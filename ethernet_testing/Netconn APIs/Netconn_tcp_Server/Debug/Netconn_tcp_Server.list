
Netconn_tcp_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003784  0801638c  0801638c  0002638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019b10  08019b10  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08019b10  08019b10  00029b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019b18  08019b18  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019b18  08019b18  00029b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019b1c  08019b1c  00029b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08019b20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b5f4  20000084  08019ba4  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b678  08019ba4  0003b678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004206c  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007706  00000000  00000000  00072120  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020b0  00000000  00000000  00079828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f28  00000000  00000000  0007b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001197a  00000000  00000000  0007d800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a466  00000000  00000000  0008f17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff049  00000000  00000000  000b95e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b8629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bcc  00000000  00000000  001b86a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016374 	.word	0x08016374

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08016374 	.word	0x08016374

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fbfe 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f816 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f884 	bl	80006a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f003 fd44 	bl	800402c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <main+0x2c>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <main+0x30>)
 80005aa:	f003 fdd1 	bl	8004150 <osThreadNew>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <main+0x34>)
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f003 fd6e 	bl	8004094 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x28>
 80005ba:	bf00      	nop
 80005bc:	08019914 	.word	0x08019914
 80005c0:	0800086d 	.word	0x0800086d
 80005c4:	20004c28 	.word	0x20004c28

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f014 fff0 	bl	80155bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <SystemClock_Config+0xd8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <SystemClock_Config+0xd8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xd8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xdc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <SystemClock_Config+0xdc>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800063c:	23b4      	movs	r3, #180	; 0xb4
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f8a1 	bl	8002794 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f926 	bl	80008a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800065c:	f002 f84a 	bl	80026f4 <HAL_PWREx_EnableOverDrive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000666:	f000 f91f 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f002 faf3 	bl	8002c74 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000694:	f000 f908 	bl	80008a8 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	4b63      	ldr	r3, [pc, #396]	; (8000850 <MX_GPIO_Init+0x1a8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a62      	ldr	r2, [pc, #392]	; (8000850 <MX_GPIO_Init+0x1a8>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b60      	ldr	r3, [pc, #384]	; (8000850 <MX_GPIO_Init+0x1a8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <MX_GPIO_Init+0x1a8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a5b      	ldr	r2, [pc, #364]	; (8000850 <MX_GPIO_Init+0x1a8>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b59      	ldr	r3, [pc, #356]	; (8000850 <MX_GPIO_Init+0x1a8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b55      	ldr	r3, [pc, #340]	; (8000850 <MX_GPIO_Init+0x1a8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a54      	ldr	r2, [pc, #336]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a4d      	ldr	r2, [pc, #308]	; (8000850 <MX_GPIO_Init+0x1a8>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b4b      	ldr	r3, [pc, #300]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a46      	ldr	r2, [pc, #280]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b44      	ldr	r3, [pc, #272]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b40      	ldr	r3, [pc, #256]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <MX_GPIO_Init+0x1a8>)
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <MX_GPIO_Init+0x1a8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f244 0181 	movw	r1, #16513	; 0x4081
 800076c:	4839      	ldr	r0, [pc, #228]	; (8000854 <MX_GPIO_Init+0x1ac>)
 800076e:	f001 ffa7 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	4838      	ldr	r0, [pc, #224]	; (8000858 <MX_GPIO_Init+0x1b0>)
 8000778:	f001 ffa2 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <MX_GPIO_Init+0x1b4>)
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4833      	ldr	r0, [pc, #204]	; (8000860 <MX_GPIO_Init+0x1b8>)
 8000792:	f001 fdeb 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000796:	f244 0381 	movw	r3, #16513	; 0x4081
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4829      	ldr	r0, [pc, #164]	; (8000854 <MX_GPIO_Init+0x1ac>)
 80007b0:	f001 fddc 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007c6:	2307      	movs	r3, #7
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4824      	ldr	r0, [pc, #144]	; (8000864 <MX_GPIO_Init+0x1bc>)
 80007d2:	f001 fdcb 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_GPIO_Init+0x1b0>)
 80007ee:	f001 fdbd 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_GPIO_Init+0x1b0>)
 8000806:	f001 fdb1 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800080a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800081c:	230a      	movs	r3, #10
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <MX_GPIO_Init+0x1c0>)
 8000828:	f001 fda0 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800082c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_GPIO_Init+0x1c0>)
 8000842:	f001 fd93 	bl	800236c <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	; 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400
 8000858:	40021800 	.word	0x40021800
 800085c:	10110000 	.word	0x10110000
 8000860:	40020800 	.word	0x40020800
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40020000 	.word	0x40020000

0800086c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000874:	f002 fe4c 	bl	8003510 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 8000878:	f000 fa4e 	bl	8000d18 <tcpserver_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f003 fd0d 	bl	800429c <osDelay>
 8000882:	e7fb      	b.n	800087c <StartDefaultTask+0x10>

08000884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000896:	f000 fa9f 	bl	8000dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40010000 	.word	0x40010000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	2019      	movs	r0, #25
 800091e:	f000 fb55 	bl	8000fcc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000922:	2019      	movs	r0, #25
 8000924:	f000 fb6e 	bl	8001004 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <HAL_InitTick+0xa4>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000930:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <HAL_InitTick+0xa4>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6453      	str	r3, [r2, #68]	; 0x44
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_InitTick+0xa4>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000944:	f107 0210 	add.w	r2, r7, #16
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fb6e 	bl	8003030 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000954:	f002 fb58 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8000958:	4603      	mov	r3, r0
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <HAL_InitTick+0xa8>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9b      	lsrs	r3, r3, #18
 8000968:	3b01      	subs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_InitTick+0xac>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <HAL_InitTick+0xb0>)
 8000970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_InitTick+0xac>)
 8000974:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000978:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_InitTick+0xac>)
 800097c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_InitTick+0xac>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_InitTick+0xac>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <HAL_InitTick+0xac>)
 800098e:	f002 fb81 	bl	8003094 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d104      	bne.n	80009a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <HAL_InitTick+0xac>)
 800099a:	f002 fbb0 	bl	80030fe <HAL_TIM_Base_Start_IT>
 800099e:	4603      	mov	r3, r0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3730      	adds	r7, #48	; 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	20004c2c 	.word	0x20004c2c
 80009b8:	40010000 	.word	0x40010000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009f6:	f002 fba6 	bl	8003146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20004c2c 	.word	0x20004c2c

08000a04 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <ETH_IRQHandler+0x10>)
 8000a0a:	f000 feef 	bl	80017ec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200066e4 	.word	0x200066e4

08000a18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e00a      	b.n	8000a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a2a:	f3af 8000 	nop.w
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbf0      	blt.n	8000a2a <_read+0x12>
	}

return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e009      	b.n	8000a78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf1      	blt.n	8000a64 <_write+0x12>
	}
	return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_close>:

int _close(int file)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
	return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_isatty>:

int _isatty(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d205      	bcs.n	8000b30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <_sbrk+0x6c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	371c      	adds	r7, #28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	20030000 	.word	0x20030000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	200000a0 	.word	0x200000a0
 8000b5c:	2000b678 	.word	0x2000b678
 8000b60:	2000b670 	.word	0x2000b670

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <SystemInit+0x28>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <SystemInit+0x28>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SystemInit+0x28>)
 8000b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <tcp_thread>:
char smsg[200];


/**** Send RESPONSE every time the client sends some data ******/
static void tcp_thread(void *arg)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	6078      	str	r0, [r7, #4]
	err_t err, accept_err, recv_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2010      	movs	r0, #16
 8000b9e:	f007 f9b9 	bl	8007f14 <netconn_new_with_proto_and_callback>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <tcp_thread+0x158>)
 8000ba6:	601a      	str	r2, [r3, #0]

	if (conn!=NULL)
 8000ba8:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <tcp_thread+0x158>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 8097 	beq.w	8000ce0 <tcp_thread+0x150>
	{
		/* Bind connection to the port number 10. */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <tcp_thread+0x158>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	494c      	ldr	r1, [pc, #304]	; (8000cec <tcp_thread+0x15c>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f007 fa64 	bl	8008088 <netconn_bind>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8000bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f040 8084 	bne.w	8000cd6 <tcp_thread+0x146>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <tcp_thread+0x158>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	21ff      	movs	r1, #255	; 0xff
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f007 fa8f 	bl	80080f8 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <tcp_thread+0x158>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4944      	ldr	r1, [pc, #272]	; (8000cf0 <tcp_thread+0x160>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f007 fab5 	bl	8008150 <netconn_accept>
 8000be6:	4603      	mov	r3, r0
 8000be8:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8000bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f3      	bne.n	8000bda <tcp_thread+0x4a>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000bf2:	e05c      	b.n	8000cae <tcp_thread+0x11e>
					{
						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <tcp_thread+0x164>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	4a3f      	ldr	r2, [pc, #252]	; (8000cf8 <tcp_thread+0x168>)
 8000bfc:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	; (8000cf4 <tcp_thread+0x164>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	899a      	ldrh	r2, [r3, #12]
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <tcp_thread+0x16c>)
 8000c06:	801a      	strh	r2, [r3, #0]

							//To store data

							static int i=0;
							static int c=0;
							strncpy((data+i*c)  ,buf->p->payload, buf->p->len );
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <tcp_thread+0x170>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3d      	ldr	r2, [pc, #244]	; (8000d04 <tcp_thread+0x174>)
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	493d      	ldr	r1, [pc, #244]	; (8000d08 <tcp_thread+0x178>)
 8000c12:	6809      	ldr	r1, [r1, #0]
 8000c14:	fb01 f202 	mul.w	r2, r1, r2
 8000c18:	1898      	adds	r0, r3, r2
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <tcp_thread+0x164>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6859      	ldr	r1, [r3, #4]
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <tcp_thread+0x164>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	895b      	ldrh	r3, [r3, #10]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f014 fe31 	bl	8015892 <strncpy>
							i = buf->p->len;
 8000c30:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <tcp_thread+0x164>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	895b      	ldrh	r3, [r3, #10]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <tcp_thread+0x174>)
 8000c3c:	601a      	str	r2, [r3, #0]
							c++;
 8000c3e:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <tcp_thread+0x178>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <tcp_thread+0x178>)
 8000c46:	6013      	str	r3, [r2, #0]

							// Or modify the message received, so that we can send it back to the client
							//int len = sprintf (smsg, "\"%s\" was sent by the Server\n", msg);
							int len = sprintf (smsg, " message was sent by the Server\n");
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <tcp_thread+0x17c>)
 8000c4a:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <tcp_thread+0x180>)
 8000c4c:	4614      	mov	r4, r2
 8000c4e:	469c      	mov	ip, r3
 8000c50:	f104 0e20 	add.w	lr, r4, #32
 8000c54:	4665      	mov	r5, ip
 8000c56:	4626      	mov	r6, r4
 8000c58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c5a:	6028      	str	r0, [r5, #0]
 8000c5c:	6069      	str	r1, [r5, #4]
 8000c5e:	60aa      	str	r2, [r5, #8]
 8000c60:	60eb      	str	r3, [r5, #12]
 8000c62:	3410      	adds	r4, #16
 8000c64:	f10c 0c10 	add.w	ip, ip, #16
 8000c68:	4574      	cmp	r4, lr
 8000c6a:	d1f3      	bne.n	8000c54 <tcp_thread+0xc4>
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	4622      	mov	r2, r4
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	2320      	movs	r3, #32
 8000c76:	60bb      	str	r3, [r7, #8]

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <tcp_thread+0x160>)
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	4921      	ldr	r1, [pc, #132]	; (8000d0c <tcp_thread+0x17c>)
 8000c86:	f007 fce5 	bl	8008654 <netconn_write_partly>
							memset (msg, '\0', 100);  // clear the buffer
 8000c8a:	2264      	movs	r2, #100	; 0x64
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4821      	ldr	r0, [pc, #132]	; (8000d14 <tcp_thread+0x184>)
 8000c90:	f014 fc94 	bl	80155bc <memset>
						}
						while (netbuf_next(buf) >0);
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <tcp_thread+0x164>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f009 f9f5 	bl	800a088 <netbuf_next>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	dcb1      	bgt.n	8000c08 <tcp_thread+0x78>

						netbuf_delete(buf);
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <tcp_thread+0x164>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f009 f9cd 	bl	800a048 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <tcp_thread+0x160>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4910      	ldr	r1, [pc, #64]	; (8000cf4 <tcp_thread+0x164>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f007 fc53 	bl	8008560 <netconn_recv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d099      	beq.n	8000bf4 <tcp_thread+0x64>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <tcp_thread+0x160>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f007 fdc7 	bl	8008858 <netconn_close>
					netconn_delete(newconn);
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <tcp_thread+0x160>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f007 f9be 	bl	8008050 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8000cd4:	e781      	b.n	8000bda <tcp_thread+0x4a>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <tcp_thread+0x158>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f007 f9b8 	bl	8008050 <netconn_delete>
		}
	}
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	200000a4 	.word	0x200000a4
 8000cec:	08019a64 	.word	0x08019a64
 8000cf0:	200000a8 	.word	0x200000a8
 8000cf4:	200000ac 	.word	0x200000ac
 8000cf8:	200000b0 	.word	0x200000b0
 8000cfc:	200000b4 	.word	0x200000b4
 8000d00:	20000004 	.word	0x20000004
 8000d04:	200000b8 	.word	0x200000b8
 8000d08:	200000bc 	.word	0x200000bc
 8000d0c:	20004c6c 	.word	0x20004c6c
 8000d10:	08016398 	.word	0x08016398
 8000d14:	20004d34 	.word	0x20004d34

08000d18 <tcpserver_init>:


void tcpserver_init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af02      	add	r7, sp, #8
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000d1e:	2318      	movs	r3, #24
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d26:	2200      	movs	r2, #0
 8000d28:	4903      	ldr	r1, [pc, #12]	; (8000d38 <tcpserver_init+0x20>)
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <tcpserver_init+0x24>)
 8000d2c:	f014 fb00 	bl	8015330 <sys_thread_new>
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08000b91 	.word	0x08000b91
 8000d3c:	080163bc 	.word	0x080163bc

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d46:	e003      	b.n	8000d50 <LoopCopyDataInit>

08000d48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d4e:	3104      	adds	r1, #4

08000d50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d58:	d3f6      	bcc.n	8000d48 <CopyDataInit>
  ldr  r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d5c:	e002      	b.n	8000d64 <LoopFillZerobss>

08000d5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d60:	f842 3b04 	str.w	r3, [r2], #4

08000d64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d68:	d3f9      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d6a:	f7ff fefb 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f014 fbe7 	bl	8015540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fc0d 	bl	8000590 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000d7c:	08019b20 	.word	0x08019b20
  ldr  r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d84:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000d88:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000d8c:	2000b678 	.word	0x2000b678

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_Init+0x40>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_Init+0x40>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_Init+0x40>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f8fa 	bl	8000fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fda0 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fd76 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000000c 	.word	0x2000000c
 8000dfc:	20004d98 	.word	0x20004d98

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20004d98 	.word	0x20004d98

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_Delay+0x40>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffde 	bl	8000e00 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000000c 	.word	0x2000000c

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff4c 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fde:	f7ff ff61 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff ffb1 	bl	8000f50 <NVIC_EncodePriority>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff80 	bl	8000efc <__NVIC_SetPriority>
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff54 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001030:	4baa      	ldr	r3, [pc, #680]	; (80012dc <HAL_ETH_Init+0x2bc>)
 8001032:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e185      	b.n	8001352 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f002 fbba 	bl	80037d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b9e      	ldr	r3, [pc, #632]	; (80012e0 <HAL_ETH_Init+0x2c0>)
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	4a9d      	ldr	r2, [pc, #628]	; (80012e0 <HAL_ETH_Init+0x2c0>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	6453      	str	r3, [r2, #68]	; 0x44
 8001070:	4b9b      	ldr	r3, [pc, #620]	; (80012e0 <HAL_ETH_Init+0x2c0>)
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800107c:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_ETH_Init+0x2c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a98      	ldr	r2, [pc, #608]	; (80012e4 <HAL_ETH_Init+0x2c4>)
 8001082:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001086:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001088:	4b96      	ldr	r3, [pc, #600]	; (80012e4 <HAL_ETH_Init+0x2c4>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4994      	ldr	r1, [pc, #592]	; (80012e4 <HAL_ETH_Init+0x2c4>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010ae:	f7ff fea7 	bl	8000e00 <HAL_GetTick>
 80010b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010b4:	e011      	b.n	80010da <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80010b6:	f7ff fea3 	bl	8000e00 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010c4:	d909      	bls.n	80010da <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e13b      	b.n	8001352 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e4      	bne.n	80010b6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f023 031c 	bic.w	r3, r3, #28
 80010fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010fc:	f001 ff78 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8001100:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4a78      	ldr	r2, [pc, #480]	; (80012e8 <HAL_ETH_Init+0x2c8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d908      	bls.n	800111c <HAL_ETH_Init+0xfc>
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4a77      	ldr	r2, [pc, #476]	; (80012ec <HAL_ETH_Init+0x2cc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d804      	bhi.n	800111c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e027      	b.n	800116c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4a73      	ldr	r2, [pc, #460]	; (80012ec <HAL_ETH_Init+0x2cc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d908      	bls.n	8001136 <HAL_ETH_Init+0x116>
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	4a72      	ldr	r2, [pc, #456]	; (80012f0 <HAL_ETH_Init+0x2d0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d804      	bhi.n	8001136 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f043 030c 	orr.w	r3, r3, #12
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	e01a      	b.n	800116c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4a6d      	ldr	r2, [pc, #436]	; (80012f0 <HAL_ETH_Init+0x2d0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d903      	bls.n	8001146 <HAL_ETH_Init+0x126>
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4a6c      	ldr	r2, [pc, #432]	; (80012f4 <HAL_ETH_Init+0x2d4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d911      	bls.n	800116a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4a6a      	ldr	r2, [pc, #424]	; (80012f4 <HAL_ETH_Init+0x2d4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d908      	bls.n	8001160 <HAL_ETH_Init+0x140>
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_ETH_Init+0x2d8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d804      	bhi.n	8001160 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e005      	b.n	800116c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	e000      	b.n	800116c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800116a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001178:	2100      	movs	r1, #0
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 fc19 	bl	80019b2 <HAL_ETH_WritePHYRegister>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800118a:	6939      	ldr	r1, [r7, #16]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fdcf 	bl	8001d30 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0d9      	b.n	8001352 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800119e:	20ff      	movs	r0, #255	; 0xff
 80011a0:	f7ff fe3a 	bl	8000e18 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80a7 	beq.w	80012fc <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011ae:	f7ff fe27 	bl	8000e00 <HAL_GetTick>
 80011b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	461a      	mov	r2, r3
 80011ba:	2101      	movs	r1, #1
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fb90 	bl	80018e2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011c2:	f7ff fe1d 	bl	8000e00 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d90f      	bls.n	80011f4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011d8:	6939      	ldr	r1, [r7, #16]
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fda8 	bl	8001d30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0ae      	b.n	8001352 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0da      	beq.n	80011b4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001202:	2100      	movs	r1, #0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fbd4 	bl	80019b2 <HAL_ETH_WritePHYRegister>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00b      	beq.n	8001228 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001214:	6939      	ldr	r1, [r7, #16]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fd8a 	bl	8001d30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001224:	2301      	movs	r3, #1
 8001226:	e094      	b.n	8001352 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fdea 	bl	8000e00 <HAL_GetTick>
 800122c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	461a      	mov	r2, r3
 8001234:	2101      	movs	r1, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fb53 	bl	80018e2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800123c:	f7ff fde0 	bl	8000e00 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	; 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d90f      	bls.n	800126e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001252:	6939      	ldr	r1, [r7, #16]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fd6b 	bl	8001d30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e071      	b.n	8001352 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0da      	beq.n	800122e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	461a      	mov	r2, r3
 800127e:	211f      	movs	r1, #31
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fb2e 	bl	80018e2 <HAL_ETH_ReadPHYRegister>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00b      	beq.n	80012a4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fd4c 	bl	8001d30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012a0:	2301      	movs	r3, #1
 80012a2:	e056      	b.n	8001352 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	e002      	b.n	80012be <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	e037      	b.n	8001340 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	e032      	b.n	8001340 <HAL_ETH_Init+0x320>
 80012da:	bf00      	nop
 80012dc:	03938700 	.word	0x03938700
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40013800 	.word	0x40013800
 80012e8:	01312cff 	.word	0x01312cff
 80012ec:	02160ebf 	.word	0x02160ebf
 80012f0:	039386ff 	.word	0x039386ff
 80012f4:	05f5e0ff 	.word	0x05f5e0ff
 80012f8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	085b      	lsrs	r3, r3, #1
 800130a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800130c:	4313      	orrs	r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fb4c 	bl	80019b2 <HAL_ETH_WritePHYRegister>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fd02 	bl	8001d30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e00c      	b.n	8001352 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001338:	f640 70ff 	movw	r0, #4095	; 0xfff
 800133c:	f7ff fd6c 	bl	8000e18 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fcf4 	bl	8001d30 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop

0800135c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_ETH_DMATxDescListInit+0x20>
 8001378:	2302      	movs	r3, #2
 800137a:	e052      	b.n	8001422 <HAL_ETH_DMATxDescListInit+0xc6>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e030      	b.n	80013fa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	4413      	add	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013a8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	461a      	mov	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d208      	bcs.n	80013ee <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	015b      	lsls	r3, r3, #5
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	e002      	b.n	80013f4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3ca      	bcc.n	8001398 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140c:	3310      	adds	r3, #16
 800140e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800142e:	b480      	push	{r7}
 8001430:	b087      	sub	sp, #28
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ETH_DMARxDescListInit+0x20>
 800144a:	2302      	movs	r3, #2
 800144c:	e056      	b.n	80014fc <HAL_ETH_DMARxDescListInit+0xce>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2202      	movs	r2, #2
 800145a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e034      	b.n	80014d4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800147a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001482:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	461a      	mov	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d208      	bcs.n	80014c8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	015b      	lsls	r3, r3, #5
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	e002      	b.n	80014ce <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3c6      	bcc.n	800146a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e6:	330c      	adds	r3, #12
 80014e8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_ETH_TransmitFrame+0x24>
 8001528:	2302      	movs	r3, #2
 800152a:	e0cd      	b.n	80016c8 <HAL_ETH_TransmitFrame+0x1c0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001552:	2301      	movs	r3, #1
 8001554:	e0b8      	b.n	80016c8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da09      	bge.n	8001574 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2212      	movs	r2, #18
 8001564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0a9      	b.n	80016c8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800157a:	4293      	cmp	r3, r2
 800157c:	d915      	bls.n	80015aa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a9b      	lsrs	r3, r3, #10
 8001588:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <HAL_ETH_TransmitFrame+0x1cc>)
 800158e:	fba3 1302 	umull	r1, r3, r3, r2
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e001      	b.n	80015ae <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d11c      	bne.n	80015ee <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80015c2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015ce:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015de:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	461a      	mov	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ec:	e04b      	b.n	8001686 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	e044      	b.n	800167e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001602:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d107      	bne.n	800161a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001618:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001622:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3b01      	subs	r3, #1
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	429a      	cmp	r2, r3
 800162c:	d116      	bne.n	800165c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800163c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4a25      	ldr	r2, [pc, #148]	; (80016d8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001642:	fb02 f203 	mul.w	r2, r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4413      	add	r3, r2
 800164a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800164e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800165a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800166a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	3301      	adds	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3b6      	bcc.n	80015f4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168e:	3314      	adds	r3, #20
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a2:	3314      	adds	r3, #20
 80016a4:	2204      	movs	r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	3304      	adds	r3, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	ac02b00b 	.word	0xac02b00b
 80016d8:	fffffa0c 	.word	0xfffffa0c

080016dc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e074      	b.n	80017e0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001706:	e05a      	b.n	80017be <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171c:	d10d      	bne.n	800173a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
 8001738:	e041      	b.n	80017be <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
 800175e:	e02e      	b.n	80017be <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	2b01      	cmp	r3, #1
 8001778:	d103      	bne.n	8001782 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800178e:	1f1a      	subs	r2, r3, #4
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e010      	b.n	80017e0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db02      	blt.n	80017ce <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d99c      	bls.n	8001708 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fc:	3314      	adds	r3, #20
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d112      	bne.n	800182e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f002 f8b1 	bl	8003970 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001816:	3314      	adds	r3, #20
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800182c:	e01b      	b.n	8001866 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001836:	3314      	adds	r3, #20
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d111      	bne.n	8001866 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f839 	bl	80018ba <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001850:	3314      	adds	r3, #20
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	3314      	adds	r3, #20
 8001870:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001874:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	3314      	adds	r3, #20
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800188a:	d112      	bne.n	80018b2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f81e 	bl	80018ce <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189a:	3314      	adds	r3, #20
 800189c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018a0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	460b      	mov	r3, r1
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b82      	cmp	r3, #130	; 0x82
 8001902:	d101      	bne.n	8001908 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
 8001906:	e050      	b.n	80019aa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2282      	movs	r2, #130	; 0x82
 800190c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 031c 	and.w	r3, r3, #28
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8a1b      	ldrh	r3, [r3, #16]
 8001924:	02db      	lsls	r3, r3, #11
 8001926:	b29b      	uxth	r3, r3
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800192e:	897b      	ldrh	r3, [r7, #10]
 8001930:	019b      	lsls	r3, r3, #6
 8001932:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0302 	bic.w	r3, r3, #2
 8001942:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001954:	f7ff fa54 	bl	8000e00 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800195a:	e015      	b.n	8001988 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800195c:	f7ff fa50 	bl	8000e00 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d309      	bcc.n	8001980 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e014      	b.n	80019aa <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e4      	bne.n	800195c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	460b      	mov	r3, r1
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b42      	cmp	r3, #66	; 0x42
 80019d2:	d101      	bne.n	80019d8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
 80019d6:	e04e      	b.n	8001a76 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2242      	movs	r2, #66	; 0x42
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 031c 	and.w	r3, r3, #28
 80019ee:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8a1b      	ldrh	r3, [r3, #16]
 80019f4:	02db      	lsls	r3, r3, #11
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a2e:	f7ff f9e7 	bl	8000e00 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a34:	e015      	b.n	8001a62 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a36:	f7ff f9e3 	bl	8000e00 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d309      	bcc.n	8001a5a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e00d      	b.n	8001a76 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e4      	bne.n	8001a36 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_ETH_Start+0x16>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e01f      	b.n	8001ad4 <HAL_ETH_Start+0x56>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fb45 	bl	8002134 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fb7c 	bl	80021a8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fc13 	bl	80022dc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fbb0 	bl	800221c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fbdd 	bl	800227c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_ETH_Stop+0x16>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e01f      	b.n	8001b32 <HAL_ETH_Stop+0x56>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fba2 	bl	800224c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fbcf 	bl	80022ac <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fb67 	bl	80021e2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fbe1 	bl	80022dc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fb27 	bl	800216e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_ETH_ConfigMAC+0x1c>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e0e4      	b.n	8001d22 <HAL_ETH_ConfigMAC+0x1e6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80b1 	beq.w	8001cd2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_ETH_ConfigMAC+0x1f0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b88:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b8e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b94:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001b9a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ba0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ba6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001bac:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001bb2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001bb8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001bbe:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001bc4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001bca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff f918 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bf8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001bfe:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c04:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c0a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c10:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c16:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c22:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c24:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff f8f2 	bl	8000e18 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c44:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c4e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c6c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c72:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c78:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c7e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c84:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f7ff f8bb 	bl	8000e18 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff f8a8 	bl	8000e18 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	61da      	str	r2, [r3, #28]
 8001cd0:	e01e      	b.n	8001d10 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ce0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff f888 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	ff20810f 	.word	0xff20810f

08001d30 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0b0      	sub	sp, #192	; 0xc0
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d54:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d7c:	e001      	b.n	8001d82 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d86:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d9c:	2340      	movs	r3, #64	; 0x40
 8001d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e08:	4bac      	ldr	r3, [pc, #688]	; (80020bc <ETH_MACDMAConfig+0x38c>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e14:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e18:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e1c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e22:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e26:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e2a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e30:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e34:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e38:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e3c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e40:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e44:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e58:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7fe ffd7 	bl	8000e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e72:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e78:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e7c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e82:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e88:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e8e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e94:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ea0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ea2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7fe ffb2 	bl	8000e18 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ebc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ec6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ed0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001edc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ef4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001efa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f00:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f06:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f0c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f20:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7fe ff73 	bl	8000e18 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f3a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f3c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7fe ff5e 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f64:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f78:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	3318      	adds	r3, #24
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <ETH_MACDMAConfig+0x390>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fce:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fd2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001fd4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001fd6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001fd8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001fda:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001fdc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001fde:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001fe0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001fe2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001fe6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001fea:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001fee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ff0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	3318      	adds	r3, #24
 8002004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002008:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	3318      	adds	r3, #24
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800201a:	2001      	movs	r0, #1
 800201c:	f7fe fefc 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002028:	3318      	adds	r3, #24
 800202a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800202e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002034:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002038:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800203c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002040:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002044:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002046:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800204a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002058:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002068:	2001      	movs	r0, #1
 800206a:	f7fe fed5 	bl	8000e18 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002076:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800207a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10f      	bne.n	80020a4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208c:	331c      	adds	r3, #28
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	331c      	adds	r3, #28
 80020a2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	461a      	mov	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f809 	bl	80020c4 <ETH_MACAddressConfig>
}
 80020b2:	bf00      	nop
 80020b4:	37c0      	adds	r7, #192	; 0xc0
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	ff20810f 	.word	0xff20810f
 80020c0:	f8de3f23 	.word	0xf8de3f23

080020c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3305      	adds	r3, #5
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	3204      	adds	r2, #4
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <ETH_MACAddressConfig+0x68>)
 80020e6:	4413      	add	r3, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3303      	adds	r3, #3
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	061a      	lsls	r2, r3, #24
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3302      	adds	r3, #2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3301      	adds	r3, #1
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	4313      	orrs	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <ETH_MACAddressConfig+0x6c>)
 8002116:	4413      	add	r3, r2
 8002118:	461a      	mov	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	6013      	str	r3, [r2, #0]
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40028040 	.word	0x40028040
 8002130:	40028044 	.word	0x40028044

08002134 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002158:	2001      	movs	r0, #1
 800215a:	f000 f8e9 	bl	8002330 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	601a      	str	r2, [r3, #0]
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0208 	bic.w	r2, r2, #8
 8002188:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 f8cc 	bl	8002330 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0204 	orr.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f000 f8af 	bl	8002330 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0204 	bic.w	r2, r2, #4
 80021fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 f892 	bl	8002330 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222c:	3318      	adds	r3, #24
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223c:	3318      	adds	r3, #24
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225c:	3318      	adds	r3, #24
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	3318      	adds	r3, #24
 800226e:	601a      	str	r2, [r3, #0]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228c:	3318      	adds	r3, #24
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0202 	orr.w	r2, r2, #2
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	3318      	adds	r3, #24
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	3318      	adds	r3, #24
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0202 	bic.w	r2, r2, #2
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	3318      	adds	r3, #24
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	3318      	adds	r3, #24
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	3318      	adds	r3, #24
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	3318      	adds	r3, #24
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 f80c 	bl	8002330 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002322:	3318      	adds	r3, #24
 8002324:	601a      	str	r2, [r3, #0]
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <ETH_Delay+0x34>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <ETH_Delay+0x38>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0a5b      	lsrs	r3, r3, #9
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800234c:	bf00      	nop
  } 
  while (Delay --);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	60fa      	str	r2, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f9      	bne.n	800234c <ETH_Delay+0x1c>
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	20000000 	.word	0x20000000
 8002368:	10624dd3 	.word	0x10624dd3

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e177      	b.n	8002678 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8166 	bne.w	8002672 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d00b      	beq.n	80023c6 <HAL_GPIO_Init+0x5a>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ba:	2b11      	cmp	r3, #17
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d130      	bne.n	8002428 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 0201 	and.w	r2, r3, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0xfc>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b12      	cmp	r3, #18
 8002466:	d123      	bne.n	80024b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0203 	and.w	r2, r3, #3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80c0 	beq.w	8002672 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_GPIO_Init+0x320>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a64      	ldr	r2, [pc, #400]	; (800268c <HAL_GPIO_Init+0x320>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <HAL_GPIO_Init+0x320>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250e:	4a60      	ldr	r2, [pc, #384]	; (8002690 <HAL_GPIO_Init+0x324>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a57      	ldr	r2, [pc, #348]	; (8002694 <HAL_GPIO_Init+0x328>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d037      	beq.n	80025aa <HAL_GPIO_Init+0x23e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a56      	ldr	r2, [pc, #344]	; (8002698 <HAL_GPIO_Init+0x32c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d031      	beq.n	80025a6 <HAL_GPIO_Init+0x23a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a55      	ldr	r2, [pc, #340]	; (800269c <HAL_GPIO_Init+0x330>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02b      	beq.n	80025a2 <HAL_GPIO_Init+0x236>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_GPIO_Init+0x334>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d025      	beq.n	800259e <HAL_GPIO_Init+0x232>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a53      	ldr	r2, [pc, #332]	; (80026a4 <HAL_GPIO_Init+0x338>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01f      	beq.n	800259a <HAL_GPIO_Init+0x22e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_GPIO_Init+0x33c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x22a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <HAL_GPIO_Init+0x340>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x226>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_GPIO_Init+0x344>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x222>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <HAL_GPIO_Init+0x348>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x21e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_GPIO_Init+0x34c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x21a>
 8002582:	2309      	movs	r3, #9
 8002584:	e012      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002586:	230a      	movs	r3, #10
 8002588:	e010      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800258a:	2308      	movs	r3, #8
 800258c:	e00e      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800258e:	2307      	movs	r3, #7
 8002590:	e00c      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002592:	2306      	movs	r3, #6
 8002594:	e00a      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002596:	2305      	movs	r3, #5
 8002598:	e008      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800259a:	2304      	movs	r3, #4
 800259c:	e006      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800259e:	2303      	movs	r3, #3
 80025a0:	e004      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025aa:	2300      	movs	r3, #0
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f002 0203 	and.w	r2, r2, #3
 80025b2:	0092      	lsls	r2, r2, #2
 80025b4:	4093      	lsls	r3, r2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025bc:	4934      	ldr	r1, [pc, #208]	; (8002690 <HAL_GPIO_Init+0x324>)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ca:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_GPIO_Init+0x350>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_GPIO_Init+0x350>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f4:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_GPIO_Init+0x350>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_GPIO_Init+0x350>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_GPIO_Init+0x350>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002642:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_GPIO_Init+0x350>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_GPIO_Init+0x350>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800266c:	4a13      	ldr	r2, [pc, #76]	; (80026bc <HAL_GPIO_Init+0x350>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b0f      	cmp	r3, #15
 800267c:	f67f ae84 	bls.w	8002388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002680:	bf00      	nop
 8002682:	3724      	adds	r7, #36	; 0x24
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40023800 	.word	0x40023800
 8002690:	40013800 	.word	0x40013800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40021c00 	.word	0x40021c00
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40022400 	.word	0x40022400
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_PWREx_EnableOverDrive+0x90>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <HAL_PWREx_EnableOverDrive+0x90>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_PWREx_EnableOverDrive+0x90>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_PWREx_EnableOverDrive+0x94>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002720:	f7fe fb6e 	bl	8000e00 <HAL_GetTick>
 8002724:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002726:	e009      	b.n	800273c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002728:	f7fe fb6a 	bl	8000e00 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002736:	d901      	bls.n	800273c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e01f      	b.n	800277c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d1ee      	bne.n	8002728 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002750:	f7fe fb56 	bl	8000e00 <HAL_GetTick>
 8002754:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002756:	e009      	b.n	800276c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002758:	f7fe fb52 	bl	8000e00 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002766:	d901      	bls.n	800276c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e007      	b.n	800277c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_PWREx_EnableOverDrive+0x98>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002778:	d1ee      	bne.n	8002758 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	420e0040 	.word	0x420e0040
 800278c:	40007000 	.word	0x40007000
 8002790:	420e0044 	.word	0x420e0044

08002794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e25b      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b2:	4ba3      	ldr	r3, [pc, #652]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d00c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027be:	4ba0      	ldr	r3, [pc, #640]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d112      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	4b9d      	ldr	r3, [pc, #628]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05b      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d157      	bne.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e236      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x74>
 80027fa:	4b91      	ldr	r3, [pc, #580]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a90      	ldr	r2, [pc, #576]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b8b      	ldr	r3, [pc, #556]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a8a      	ldr	r2, [pc, #552]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a87      	ldr	r2, [pc, #540]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a83      	ldr	r2, [pc, #524]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a80      	ldr	r2, [pc, #512]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fad8 	bl	8000e00 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fad4 	bl	8000e00 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1fb      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fac4 	bl	8000e00 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fac0 	bl	8000e00 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1e7      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028aa:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c2:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1bb      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4952      	ldr	r1, [pc, #328]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e03a      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCC_OscConfig+0x2b0>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fe fa79 	bl	8000e00 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002912:	f7fe fa75 	bl	8000e00 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e19c      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4940      	ldr	r1, [pc, #256]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <HAL_RCC_OscConfig+0x2b0>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fa58 	bl	8000e00 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002954:	f7fe fa54 	bl	8000e00 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e17b      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d030      	beq.n	80029e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCC_OscConfig+0x2b4>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe fa38 	bl	8000e00 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe fa34 	bl	8000e00 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e15b      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x200>
 80029b2:	e015      	b.n	80029e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCC_OscConfig+0x2b4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fa21 	bl	8000e00 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c2:	f7fe fa1d 	bl	8000e00 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e144      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80a0 	beq.w	8002b2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x2b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d121      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_RCC_OscConfig+0x2b8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <HAL_RCC_OscConfig+0x2b8>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe f9e3 	bl	8000e00 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	e011      	b.n	8002a62 <HAL_RCC_OscConfig+0x2ce>
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	42470000 	.word	0x42470000
 8002a48:	42470e80 	.word	0x42470e80
 8002a4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fe f9d6 	bl	8000e00 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0fd      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCC_OscConfig+0x4d4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d106      	bne.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
 8002a76:	4b7d      	ldr	r3, [pc, #500]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a7c      	ldr	r2, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	e01c      	b.n	8002abe <HAL_RCC_OscConfig+0x32a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x312>
 8002a8c:	4b77      	ldr	r3, [pc, #476]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a76      	ldr	r2, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
 8002a98:	4b74      	ldr	r3, [pc, #464]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa4:	e00b      	b.n	8002abe <HAL_RCC_OscConfig+0x32a>
 8002aa6:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a70      	ldr	r2, [pc, #448]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	4b6e      	ldr	r3, [pc, #440]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a6d      	ldr	r2, [pc, #436]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d015      	beq.n	8002af2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7fe f99b 	bl	8000e00 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe f997 	bl	8000e00 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0bc      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ee      	beq.n	8002ace <HAL_RCC_OscConfig+0x33a>
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe f985 	bl	8000e00 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe f981 	bl	8000e00 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0a6      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ee      	bne.n	8002afa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a51      	ldr	r2, [pc, #324]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8092 	beq.w	8002c5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d05c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d141      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <HAL_RCC_OscConfig+0x4dc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe f955 	bl	8000e00 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe f951 	bl	8000e00 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e078      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	019b      	lsls	r3, r3, #6
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	085b      	lsrs	r3, r3, #1
 8002b90:	3b01      	subs	r3, #1
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	061b      	lsls	r3, r3, #24
 8002b9c:	4933      	ldr	r1, [pc, #204]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_RCC_OscConfig+0x4dc>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f92a 	bl	8000e00 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe f926 	bl	8000e00 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04d      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x41c>
 8002bce:	e045      	b.n	8002c5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_RCC_OscConfig+0x4dc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7fe f913 	bl	8000e00 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bde:	f7fe f90f 	bl	8000e00 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e036      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x44a>
 8002bfc:	e02e      	b.n	8002c5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e029      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_RCC_OscConfig+0x4d8>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d11c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d115      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	42470060 	.word	0x42470060

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0cc      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d90c      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b65      	ldr	r3, [pc, #404]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d044      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e067      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4934      	ldr	r1, [pc, #208]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fe f84c 	bl	8000e00 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe f848 	bl	8000e00 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e04f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d20c      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4601      	mov	r1, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fd74 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08019938 	.word	0x08019938
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000008 	.word	0x20000008

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d007      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x32>
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d008      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x38>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 80b4 	bne.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e6e:	60bb      	str	r3, [r7, #8]
       break;
 8002e70:	e0b3      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e72:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e74:	60bb      	str	r3, [r7, #8]
      break;
 8002e76:	e0b0      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e82:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04a      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	f04f 0400 	mov.w	r4, #0
 8002e98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	ea03 0501 	and.w	r5, r3, r1
 8002ea4:	ea04 0602 	and.w	r6, r4, r2
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	4632      	mov	r2, r6
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	f04f 0400 	mov.w	r4, #0
 8002eb4:	0154      	lsls	r4, r2, #5
 8002eb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eba:	014b      	lsls	r3, r1, #5
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	1b49      	subs	r1, r1, r5
 8002ec2:	eb62 0206 	sbc.w	r2, r2, r6
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	f04f 0400 	mov.w	r4, #0
 8002ece:	0194      	lsls	r4, r2, #6
 8002ed0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ed4:	018b      	lsls	r3, r1, #6
 8002ed6:	1a5b      	subs	r3, r3, r1
 8002ed8:	eb64 0402 	sbc.w	r4, r4, r2
 8002edc:	f04f 0100 	mov.w	r1, #0
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	00e2      	lsls	r2, r4, #3
 8002ee6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002eea:	00d9      	lsls	r1, r3, #3
 8002eec:	460b      	mov	r3, r1
 8002eee:	4614      	mov	r4, r2
 8002ef0:	195b      	adds	r3, r3, r5
 8002ef2:	eb44 0406 	adc.w	r4, r4, r6
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	0262      	lsls	r2, r4, #9
 8002f00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f04:	0259      	lsls	r1, r3, #9
 8002f06:	460b      	mov	r3, r1
 8002f08:	4614      	mov	r4, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f04f 0400 	mov.w	r4, #0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	f7fd f9ba 	bl	8000290 <__aeabi_uldivmod>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	460c      	mov	r4, r1
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e049      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f24:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	ea03 0501 	and.w	r5, r3, r1
 8002f3a:	ea04 0602 	and.w	r6, r4, r2
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4632      	mov	r2, r6
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	f04f 0400 	mov.w	r4, #0
 8002f4a:	0154      	lsls	r4, r2, #5
 8002f4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f50:	014b      	lsls	r3, r1, #5
 8002f52:	4619      	mov	r1, r3
 8002f54:	4622      	mov	r2, r4
 8002f56:	1b49      	subs	r1, r1, r5
 8002f58:	eb62 0206 	sbc.w	r2, r2, r6
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	0194      	lsls	r4, r2, #6
 8002f66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f6a:	018b      	lsls	r3, r1, #6
 8002f6c:	1a5b      	subs	r3, r3, r1
 8002f6e:	eb64 0402 	sbc.w	r4, r4, r2
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	00e2      	lsls	r2, r4, #3
 8002f7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f80:	00d9      	lsls	r1, r3, #3
 8002f82:	460b      	mov	r3, r1
 8002f84:	4614      	mov	r4, r2
 8002f86:	195b      	adds	r3, r3, r5
 8002f88:	eb44 0406 	adc.w	r4, r4, r6
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	02a2      	lsls	r2, r4, #10
 8002f96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f9a:	0299      	lsls	r1, r3, #10
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4614      	mov	r4, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f04f 0400 	mov.w	r4, #0
 8002faa:	461a      	mov	r2, r3
 8002fac:	4623      	mov	r3, r4
 8002fae:	f7fd f96f 	bl	8000290 <__aeabi_uldivmod>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	60bb      	str	r3, [r7, #8]
      break;
 8002fd2:	e002      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fd6:	60bb      	str	r3, [r7, #8]
      break;
 8002fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fda:	68bb      	ldr	r3, [r7, #8]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	007a1200 	.word	0x007a1200

08002ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000000 	.word	0x20000000

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800300c:	f7ff fff0 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003010:	4601      	mov	r1, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0b5b      	lsrs	r3, r3, #13
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4a03      	ldr	r2, [pc, #12]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	08019948 	.word	0x08019948

08003030 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	220f      	movs	r2, #15
 800303e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0203 	and.w	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCC_GetClockConfig+0x60>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 020f 	and.w	r2, r3, #15
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40023c00 	.word	0x40023c00

08003094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e01d      	b.n	80030e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f815 	bl	80030ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f000 f968 	bl	80033a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d007      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d122      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d11b      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0202 	mvn.w	r2, #2
 8003172:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8ee 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 800318e:	e005      	b.n	800319c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8e0 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8f1 	bl	800337e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d122      	bne.n	80031f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d11b      	bne.n	80031f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f06f 0204 	mvn.w	r2, #4
 80031c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f8c4 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 80031e2:	e005      	b.n	80031f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f8b6 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8c7 	bl	800337e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b08      	cmp	r3, #8
 8003202:	d122      	bne.n	800324a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b08      	cmp	r3, #8
 8003210:	d11b      	bne.n	800324a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f06f 0208 	mvn.w	r2, #8
 800321a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2204      	movs	r2, #4
 8003220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f89a 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 8003236:	e005      	b.n	8003244 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f88c 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f89d 	bl	800337e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b10      	cmp	r3, #16
 8003256:	d122      	bne.n	800329e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b10      	cmp	r3, #16
 8003264:	d11b      	bne.n	800329e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f06f 0210 	mvn.w	r2, #16
 800326e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2208      	movs	r2, #8
 8003274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f870 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 800328a:	e005      	b.n	8003298 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f862 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f873 	bl	800337e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d10e      	bne.n	80032ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f06f 0201 	mvn.w	r2, #1
 80032c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7fd fadd 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	2b80      	cmp	r3, #128	; 0x80
 80032d6:	d10e      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d107      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f903 	bl	80034fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d10e      	bne.n	8003322 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d107      	bne.n	8003322 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800331a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f838 	bl	8003392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b20      	cmp	r3, #32
 800332e:	d10e      	bne.n	800334e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d107      	bne.n	800334e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0220 	mvn.w	r2, #32
 8003346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8cd 	bl	80034e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a40      	ldr	r2, [pc, #256]	; (80034bc <TIM_Base_SetConfig+0x114>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c6:	d00f      	beq.n	80033e8 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3d      	ldr	r2, [pc, #244]	; (80034c0 <TIM_Base_SetConfig+0x118>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <TIM_Base_SetConfig+0x11c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <TIM_Base_SetConfig+0x120>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3a      	ldr	r2, [pc, #232]	; (80034cc <TIM_Base_SetConfig+0x124>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d108      	bne.n	80033fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <TIM_Base_SetConfig+0x114>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02b      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d027      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <TIM_Base_SetConfig+0x118>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d023      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <TIM_Base_SetConfig+0x11c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01f      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <TIM_Base_SetConfig+0x120>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01b      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a29      	ldr	r2, [pc, #164]	; (80034cc <TIM_Base_SetConfig+0x124>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d017      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <TIM_Base_SetConfig+0x128>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <TIM_Base_SetConfig+0x12c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00f      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <TIM_Base_SetConfig+0x130>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a25      	ldr	r2, [pc, #148]	; (80034dc <TIM_Base_SetConfig+0x134>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <TIM_Base_SetConfig+0x138>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <TIM_Base_SetConfig+0x13c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d108      	bne.n	800346c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <TIM_Base_SetConfig+0x114>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0xf8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <TIM_Base_SetConfig+0x124>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d103      	bne.n	80034a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	615a      	str	r2, [r3, #20]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40010400 	.word	0x40010400
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40014400 	.word	0x40014400
 80034d8:	40014800 	.word	0x40014800
 80034dc:	40001800 	.word	0x40001800
 80034e0:	40001c00 	.word	0x40001c00
 80034e4:	40002000 	.word	0x40002000

080034e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8003516:	4ba0      	ldr	r3, [pc, #640]	; (8003798 <MX_LWIP_Init+0x288>)
 8003518:	22a9      	movs	r2, #169	; 0xa9
 800351a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800351c:	4b9e      	ldr	r3, [pc, #632]	; (8003798 <MX_LWIP_Init+0x288>)
 800351e:	22fe      	movs	r2, #254	; 0xfe
 8003520:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 84;
 8003522:	4b9d      	ldr	r3, [pc, #628]	; (8003798 <MX_LWIP_Init+0x288>)
 8003524:	2254      	movs	r2, #84	; 0x54
 8003526:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 57;
 8003528:	4b9b      	ldr	r3, [pc, #620]	; (8003798 <MX_LWIP_Init+0x288>)
 800352a:	2239      	movs	r2, #57	; 0x39
 800352c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800352e:	4b9b      	ldr	r3, [pc, #620]	; (800379c <MX_LWIP_Init+0x28c>)
 8003530:	22ff      	movs	r2, #255	; 0xff
 8003532:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003534:	4b99      	ldr	r3, [pc, #612]	; (800379c <MX_LWIP_Init+0x28c>)
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800353a:	4b98      	ldr	r3, [pc, #608]	; (800379c <MX_LWIP_Init+0x28c>)
 800353c:	2200      	movs	r2, #0
 800353e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003540:	4b96      	ldr	r3, [pc, #600]	; (800379c <MX_LWIP_Init+0x28c>)
 8003542:	2200      	movs	r2, #0
 8003544:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 8003546:	4b96      	ldr	r3, [pc, #600]	; (80037a0 <MX_LWIP_Init+0x290>)
 8003548:	22a9      	movs	r2, #169	; 0xa9
 800354a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 800354c:	4b94      	ldr	r3, [pc, #592]	; (80037a0 <MX_LWIP_Init+0x290>)
 800354e:	22fe      	movs	r2, #254	; 0xfe
 8003550:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 84;
 8003552:	4b93      	ldr	r3, [pc, #588]	; (80037a0 <MX_LWIP_Init+0x290>)
 8003554:	2254      	movs	r2, #84	; 0x54
 8003556:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 59;
 8003558:	4b91      	ldr	r3, [pc, #580]	; (80037a0 <MX_LWIP_Init+0x290>)
 800355a:	223b      	movs	r2, #59	; 0x3b
 800355c:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800355e:	2100      	movs	r1, #0
 8003560:	2000      	movs	r0, #0
 8003562:	f006 ff2b 	bl	800a3bc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003566:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <MX_LWIP_Init+0x288>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	061a      	lsls	r2, r3, #24
 800356c:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <MX_LWIP_Init+0x288>)
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	4b88      	ldr	r3, [pc, #544]	; (8003798 <MX_LWIP_Init+0x288>)
 8003576:	789b      	ldrb	r3, [r3, #2]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	4313      	orrs	r3, r2
 800357c:	4a86      	ldr	r2, [pc, #536]	; (8003798 <MX_LWIP_Init+0x288>)
 800357e:	78d2      	ldrb	r2, [r2, #3]
 8003580:	4313      	orrs	r3, r2
 8003582:	061a      	lsls	r2, r3, #24
 8003584:	4b84      	ldr	r3, [pc, #528]	; (8003798 <MX_LWIP_Init+0x288>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	0619      	lsls	r1, r3, #24
 800358a:	4b83      	ldr	r3, [pc, #524]	; (8003798 <MX_LWIP_Init+0x288>)
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	041b      	lsls	r3, r3, #16
 8003590:	4319      	orrs	r1, r3
 8003592:	4b81      	ldr	r3, [pc, #516]	; (8003798 <MX_LWIP_Init+0x288>)
 8003594:	789b      	ldrb	r3, [r3, #2]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	430b      	orrs	r3, r1
 800359a:	497f      	ldr	r1, [pc, #508]	; (8003798 <MX_LWIP_Init+0x288>)
 800359c:	78c9      	ldrb	r1, [r1, #3]
 800359e:	430b      	orrs	r3, r1
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035a6:	431a      	orrs	r2, r3
 80035a8:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <MX_LWIP_Init+0x288>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	0619      	lsls	r1, r3, #24
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <MX_LWIP_Init+0x288>)
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	4319      	orrs	r1, r3
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <MX_LWIP_Init+0x288>)
 80035b8:	789b      	ldrb	r3, [r3, #2]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	430b      	orrs	r3, r1
 80035be:	4976      	ldr	r1, [pc, #472]	; (8003798 <MX_LWIP_Init+0x288>)
 80035c0:	78c9      	ldrb	r1, [r1, #3]
 80035c2:	430b      	orrs	r3, r1
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035ca:	431a      	orrs	r2, r3
 80035cc:	4b72      	ldr	r3, [pc, #456]	; (8003798 <MX_LWIP_Init+0x288>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	0619      	lsls	r1, r3, #24
 80035d2:	4b71      	ldr	r3, [pc, #452]	; (8003798 <MX_LWIP_Init+0x288>)
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	4319      	orrs	r1, r3
 80035da:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <MX_LWIP_Init+0x288>)
 80035dc:	789b      	ldrb	r3, [r3, #2]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	430b      	orrs	r3, r1
 80035e2:	496d      	ldr	r1, [pc, #436]	; (8003798 <MX_LWIP_Init+0x288>)
 80035e4:	78c9      	ldrb	r1, [r1, #3]
 80035e6:	430b      	orrs	r3, r1
 80035e8:	0e1b      	lsrs	r3, r3, #24
 80035ea:	4313      	orrs	r3, r2
 80035ec:	4a6d      	ldr	r2, [pc, #436]	; (80037a4 <MX_LWIP_Init+0x294>)
 80035ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <MX_LWIP_Init+0x28c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	061a      	lsls	r2, r3, #24
 80035f6:	4b69      	ldr	r3, [pc, #420]	; (800379c <MX_LWIP_Init+0x28c>)
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	431a      	orrs	r2, r3
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <MX_LWIP_Init+0x28c>)
 8003600:	789b      	ldrb	r3, [r3, #2]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	4313      	orrs	r3, r2
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <MX_LWIP_Init+0x28c>)
 8003608:	78d2      	ldrb	r2, [r2, #3]
 800360a:	4313      	orrs	r3, r2
 800360c:	061a      	lsls	r2, r3, #24
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <MX_LWIP_Init+0x28c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	0619      	lsls	r1, r3, #24
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <MX_LWIP_Init+0x28c>)
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	4319      	orrs	r1, r3
 800361c:	4b5f      	ldr	r3, [pc, #380]	; (800379c <MX_LWIP_Init+0x28c>)
 800361e:	789b      	ldrb	r3, [r3, #2]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	430b      	orrs	r3, r1
 8003624:	495d      	ldr	r1, [pc, #372]	; (800379c <MX_LWIP_Init+0x28c>)
 8003626:	78c9      	ldrb	r1, [r1, #3]
 8003628:	430b      	orrs	r3, r1
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003630:	431a      	orrs	r2, r3
 8003632:	4b5a      	ldr	r3, [pc, #360]	; (800379c <MX_LWIP_Init+0x28c>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	0619      	lsls	r1, r3, #24
 8003638:	4b58      	ldr	r3, [pc, #352]	; (800379c <MX_LWIP_Init+0x28c>)
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	4319      	orrs	r1, r3
 8003640:	4b56      	ldr	r3, [pc, #344]	; (800379c <MX_LWIP_Init+0x28c>)
 8003642:	789b      	ldrb	r3, [r3, #2]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	430b      	orrs	r3, r1
 8003648:	4954      	ldr	r1, [pc, #336]	; (800379c <MX_LWIP_Init+0x28c>)
 800364a:	78c9      	ldrb	r1, [r1, #3]
 800364c:	430b      	orrs	r3, r1
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003654:	431a      	orrs	r2, r3
 8003656:	4b51      	ldr	r3, [pc, #324]	; (800379c <MX_LWIP_Init+0x28c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	0619      	lsls	r1, r3, #24
 800365c:	4b4f      	ldr	r3, [pc, #316]	; (800379c <MX_LWIP_Init+0x28c>)
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	4319      	orrs	r1, r3
 8003664:	4b4d      	ldr	r3, [pc, #308]	; (800379c <MX_LWIP_Init+0x28c>)
 8003666:	789b      	ldrb	r3, [r3, #2]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	430b      	orrs	r3, r1
 800366c:	494b      	ldr	r1, [pc, #300]	; (800379c <MX_LWIP_Init+0x28c>)
 800366e:	78c9      	ldrb	r1, [r1, #3]
 8003670:	430b      	orrs	r3, r1
 8003672:	0e1b      	lsrs	r3, r3, #24
 8003674:	4313      	orrs	r3, r2
 8003676:	4a4c      	ldr	r2, [pc, #304]	; (80037a8 <MX_LWIP_Init+0x298>)
 8003678:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <MX_LWIP_Init+0x290>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	061a      	lsls	r2, r3, #24
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <MX_LWIP_Init+0x290>)
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <MX_LWIP_Init+0x290>)
 800368a:	789b      	ldrb	r3, [r3, #2]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	4313      	orrs	r3, r2
 8003690:	4a43      	ldr	r2, [pc, #268]	; (80037a0 <MX_LWIP_Init+0x290>)
 8003692:	78d2      	ldrb	r2, [r2, #3]
 8003694:	4313      	orrs	r3, r2
 8003696:	061a      	lsls	r2, r3, #24
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <MX_LWIP_Init+0x290>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	0619      	lsls	r1, r3, #24
 800369e:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	041b      	lsls	r3, r3, #16
 80036a4:	4319      	orrs	r1, r3
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036a8:	789b      	ldrb	r3, [r3, #2]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	430b      	orrs	r3, r1
 80036ae:	493c      	ldr	r1, [pc, #240]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036b0:	78c9      	ldrb	r1, [r1, #3]
 80036b2:	430b      	orrs	r3, r1
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036ba:	431a      	orrs	r2, r3
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	0619      	lsls	r1, r3, #24
 80036c2:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036c4:	785b      	ldrb	r3, [r3, #1]
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	4319      	orrs	r1, r3
 80036ca:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036cc:	789b      	ldrb	r3, [r3, #2]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	430b      	orrs	r3, r1
 80036d2:	4933      	ldr	r1, [pc, #204]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036d4:	78c9      	ldrb	r1, [r1, #3]
 80036d6:	430b      	orrs	r3, r1
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80036de:	431a      	orrs	r2, r3
 80036e0:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	0619      	lsls	r1, r3, #24
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	4319      	orrs	r1, r3
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036f0:	789b      	ldrb	r3, [r3, #2]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	430b      	orrs	r3, r1
 80036f6:	492a      	ldr	r1, [pc, #168]	; (80037a0 <MX_LWIP_Init+0x290>)
 80036f8:	78c9      	ldrb	r1, [r1, #3]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	0e1b      	lsrs	r3, r3, #24
 80036fe:	4313      	orrs	r3, r2
 8003700:	4a2a      	ldr	r2, [pc, #168]	; (80037ac <MX_LWIP_Init+0x29c>)
 8003702:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <MX_LWIP_Init+0x2a0>)
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <MX_LWIP_Init+0x2a4>)
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4b26      	ldr	r3, [pc, #152]	; (80037ac <MX_LWIP_Init+0x29c>)
 8003712:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <MX_LWIP_Init+0x298>)
 8003714:	4923      	ldr	r1, [pc, #140]	; (80037a4 <MX_LWIP_Init+0x294>)
 8003716:	4828      	ldr	r0, [pc, #160]	; (80037b8 <MX_LWIP_Init+0x2a8>)
 8003718:	f007 fbd4 	bl	800aec4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800371c:	4826      	ldr	r0, [pc, #152]	; (80037b8 <MX_LWIP_Init+0x2a8>)
 800371e:	f007 fd83 	bl	800b228 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <MX_LWIP_Init+0x2a8>)
 8003724:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003734:	4820      	ldr	r0, [pc, #128]	; (80037b8 <MX_LWIP_Init+0x2a8>)
 8003736:	f007 fd87 	bl	800b248 <netif_set_up>
 800373a:	e002      	b.n	8003742 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800373c:	481e      	ldr	r0, [pc, #120]	; (80037b8 <MX_LWIP_Init+0x2a8>)
 800373e:	f007 fdef 	bl	800b320 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003742:	491e      	ldr	r1, [pc, #120]	; (80037bc <MX_LWIP_Init+0x2ac>)
 8003744:	481c      	ldr	r0, [pc, #112]	; (80037b8 <MX_LWIP_Init+0x2a8>)
 8003746:	f007 fe81 	bl	800b44c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800374a:	2200      	movs	r2, #0
 800374c:	2101      	movs	r1, #1
 800374e:	2001      	movs	r0, #1
 8003750:	f000 ff1a 	bl	8004588 <osSemaphoreNew>
 8003754:	4602      	mov	r2, r0
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <MX_LWIP_Init+0x2b0>)
 8003758:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <MX_LWIP_Init+0x2b4>)
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <MX_LWIP_Init+0x2a8>)
 800375e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <MX_LWIP_Init+0x2b0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <MX_LWIP_Init+0x2b4>)
 8003766:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	2100      	movs	r1, #0
 800376c:	4816      	ldr	r0, [pc, #88]	; (80037c8 <MX_LWIP_Init+0x2b8>)
 800376e:	f011 ff25 	bl	80155bc <memset>
  attributes.name = "LinkThr";
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <MX_LWIP_Init+0x2b8>)
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <MX_LWIP_Init+0x2bc>)
 8003776:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <MX_LWIP_Init+0x2b8>)
 800377a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800377e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <MX_LWIP_Init+0x2b8>)
 8003782:	2210      	movs	r2, #16
 8003784:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <MX_LWIP_Init+0x2b8>)
 8003788:	490e      	ldr	r1, [pc, #56]	; (80037c4 <MX_LWIP_Init+0x2b4>)
 800378a:	4811      	ldr	r0, [pc, #68]	; (80037d0 <MX_LWIP_Init+0x2c0>)
 800378c:	f000 fce0 	bl	8004150 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20004e08 	.word	0x20004e08
 800379c:	20004e04 	.word	0x20004e04
 80037a0:	20004da4 	.word	0x20004da4
 80037a4:	20004e00 	.word	0x20004e00
 80037a8:	20004e0c 	.word	0x20004e0c
 80037ac:	20004e10 	.word	0x20004e10
 80037b0:	0800a2cd 	.word	0x0800a2cd
 80037b4:	08003e2d 	.word	0x08003e2d
 80037b8:	20004dcc 	.word	0x20004dcc
 80037bc:	08003f11 	.word	0x08003f11
 80037c0:	200000c0 	.word	0x200000c0
 80037c4:	20004d9c 	.word	0x20004d9c
 80037c8:	20004da8 	.word	0x20004da8
 80037cc:	080163c8 	.word	0x080163c8
 80037d0:	08003e99 	.word	0x08003e99

080037d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08e      	sub	sp, #56	; 0x38
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a59      	ldr	r2, [pc, #356]	; (8003958 <HAL_ETH_MspInit+0x184>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	f040 80ac 	bne.w	8003950 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_ETH_MspInit+0x188>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	4a56      	ldr	r2, [pc, #344]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003806:	6313      	str	r3, [r2, #48]	; 0x30
 8003808:	4b54      	ldr	r3, [pc, #336]	; (800395c <HAL_ETH_MspInit+0x188>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	4b50      	ldr	r3, [pc, #320]	; (800395c <HAL_ETH_MspInit+0x188>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	4a4f      	ldr	r2, [pc, #316]	; (800395c <HAL_ETH_MspInit+0x188>)
 800381e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003822:	6313      	str	r3, [r2, #48]	; 0x30
 8003824:	4b4d      	ldr	r3, [pc, #308]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	4b49      	ldr	r3, [pc, #292]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	4a48      	ldr	r2, [pc, #288]	; (800395c <HAL_ETH_MspInit+0x188>)
 800383a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800383e:	6313      	str	r3, [r2, #48]	; 0x30
 8003840:	4b46      	ldr	r3, [pc, #280]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	4b42      	ldr	r3, [pc, #264]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4a41      	ldr	r2, [pc, #260]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	6313      	str	r3, [r2, #48]	; 0x30
 800385c:	4b3f      	ldr	r3, [pc, #252]	; (800395c <HAL_ETH_MspInit+0x188>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	4b3b      	ldr	r3, [pc, #236]	; (800395c <HAL_ETH_MspInit+0x188>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	4a3a      	ldr	r2, [pc, #232]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6313      	str	r3, [r2, #48]	; 0x30
 8003878:	4b38      	ldr	r3, [pc, #224]	; (800395c <HAL_ETH_MspInit+0x188>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_ETH_MspInit+0x188>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4a33      	ldr	r2, [pc, #204]	; (800395c <HAL_ETH_MspInit+0x188>)
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	6313      	str	r3, [r2, #48]	; 0x30
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_ETH_MspInit+0x188>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_ETH_MspInit+0x188>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <HAL_ETH_MspInit+0x188>)
 80038aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ae:	6313      	str	r3, [r2, #48]	; 0x30
 80038b0:	4b2a      	ldr	r3, [pc, #168]	; (800395c <HAL_ETH_MspInit+0x188>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80038bc:	2332      	movs	r3, #50	; 0x32
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c8:	2303      	movs	r3, #3
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038cc:	230b      	movs	r3, #11
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d4:	4619      	mov	r1, r3
 80038d6:	4822      	ldr	r0, [pc, #136]	; (8003960 <HAL_ETH_MspInit+0x18c>)
 80038d8:	f7fe fd48 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80038dc:	2386      	movs	r3, #134	; 0x86
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	2302      	movs	r3, #2
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e8:	2303      	movs	r3, #3
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038ec:	230b      	movs	r3, #11
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f4:	4619      	mov	r1, r3
 80038f6:	481b      	ldr	r0, [pc, #108]	; (8003964 <HAL_ETH_MspInit+0x190>)
 80038f8:	f7fe fd38 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80038fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800390e:	230b      	movs	r3, #11
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003916:	4619      	mov	r1, r3
 8003918:	4813      	ldr	r0, [pc, #76]	; (8003968 <HAL_ETH_MspInit+0x194>)
 800391a:	f7fe fd27 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800391e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392c:	2303      	movs	r3, #3
 800392e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003930:	230b      	movs	r3, #11
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003938:	4619      	mov	r1, r3
 800393a:	480c      	ldr	r0, [pc, #48]	; (800396c <HAL_ETH_MspInit+0x198>)
 800393c:	f7fe fd16 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003940:	2200      	movs	r2, #0
 8003942:	2100      	movs	r1, #0
 8003944:	203d      	movs	r0, #61	; 0x3d
 8003946:	f7fd fb41 	bl	8000fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800394a:	203d      	movs	r0, #61	; 0x3d
 800394c:	f7fd fb5a 	bl	8001004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003950:	bf00      	nop
 8003952:	3738      	adds	r7, #56	; 0x38
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40028000 	.word	0x40028000
 800395c:	40023800 	.word	0x40023800
 8003960:	40020800 	.word	0x40020800
 8003964:	40020000 	.word	0x40020000
 8003968:	40020400 	.word	0x40020400
 800396c:	40021800 	.word	0x40021800

08003970 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <HAL_ETH_RxCpltCallback+0x1c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f000 ff07 	bl	8004790 <osSemaphoreRelease>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200000c4 	.word	0x200000c4

08003990 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b090      	sub	sp, #64	; 0x40
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800399c:	4b59      	ldr	r3, [pc, #356]	; (8003b04 <low_level_init+0x174>)
 800399e:	4a5a      	ldr	r2, [pc, #360]	; (8003b08 <low_level_init+0x178>)
 80039a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80039a2:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <low_level_init+0x174>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80039a8:	4b56      	ldr	r3, [pc, #344]	; (8003b04 <low_level_init+0x174>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80039ae:	2300      	movs	r3, #0
 80039b0:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80039b6:	23e1      	movs	r3, #225	; 0xe1
 80039b8:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80039be:	2300      	movs	r3, #0
 80039c0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80039c2:	2300      	movs	r3, #0
 80039c4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80039c6:	4a4f      	ldr	r2, [pc, #316]	; (8003b04 <low_level_init+0x174>)
 80039c8:	f107 030c 	add.w	r3, r7, #12
 80039cc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80039ce:	4b4d      	ldr	r3, [pc, #308]	; (8003b04 <low_level_init+0x174>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80039d4:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <low_level_init+0x174>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80039da:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <low_level_init+0x174>)
 80039dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039e0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80039e2:	4848      	ldr	r0, [pc, #288]	; (8003b04 <low_level_init+0x174>)
 80039e4:	f7fd fb1c 	bl	8001020 <HAL_ETH_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80039ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <low_level_init+0x78>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003a08:	2304      	movs	r3, #4
 8003a0a:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <low_level_init+0x17c>)
 8003a0c:	4940      	ldr	r1, [pc, #256]	; (8003b10 <low_level_init+0x180>)
 8003a0e:	483d      	ldr	r0, [pc, #244]	; (8003b04 <low_level_init+0x174>)
 8003a10:	f7fd fca4 	bl	800135c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003a14:	2304      	movs	r3, #4
 8003a16:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <low_level_init+0x184>)
 8003a18:	493f      	ldr	r1, [pc, #252]	; (8003b18 <low_level_init+0x188>)
 8003a1a:	483a      	ldr	r0, [pc, #232]	; (8003b04 <low_level_init+0x174>)
 8003a1c:	f7fd fd07 	bl	800142e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2206      	movs	r2, #6
 8003a24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003a28:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <low_level_init+0x174>)
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003a34:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <low_level_init+0x174>)
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	785a      	ldrb	r2, [r3, #1]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003a40:	4b30      	ldr	r3, [pc, #192]	; (8003b04 <low_level_init+0x174>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	789a      	ldrb	r2, [r3, #2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	; (8003b04 <low_level_init+0x174>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	78da      	ldrb	r2, [r3, #3]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <low_level_init+0x174>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	791a      	ldrb	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003a64:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <low_level_init+0x174>)
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	795a      	ldrb	r2, [r3, #5]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a76:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a7e:	f043 030a 	orr.w	r3, r3, #10
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 fd7a 	bl	8004588 <osSemaphoreNew>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <low_level_init+0x18c>)
 8003a98:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f011 fd8a 	bl	80155bc <memset>
  attributes.name = "EthIf";
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <low_level_init+0x190>)
 8003aaa:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003aac:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8003ab2:	2330      	movs	r3, #48	; 0x30
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003ab6:	f107 0314 	add.w	r3, r7, #20
 8003aba:	461a      	mov	r2, r3
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4819      	ldr	r0, [pc, #100]	; (8003b24 <low_level_init+0x194>)
 8003ac0:	f000 fb46 	bl	8004150 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003ac4:	480f      	ldr	r0, [pc, #60]	; (8003b04 <low_level_init+0x174>)
 8003ac6:	f7fd ffda 	bl	8001a7e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ace:	461a      	mov	r2, r3
 8003ad0:	211d      	movs	r1, #29
 8003ad2:	480c      	ldr	r0, [pc, #48]	; (8003b04 <low_level_init+0x174>)
 8003ad4:	f7fd ff05 	bl	80018e2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f043 030b 	orr.w	r3, r3, #11
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	211d      	movs	r1, #29
 8003ae6:	4807      	ldr	r0, [pc, #28]	; (8003b04 <low_level_init+0x174>)
 8003ae8:	f7fd ff63 	bl	80019b2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003aec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003af0:	461a      	mov	r2, r3
 8003af2:	211d      	movs	r1, #29
 8003af4:	4803      	ldr	r0, [pc, #12]	; (8003b04 <low_level_init+0x174>)
 8003af6:	f7fd fef4 	bl	80018e2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003afa:	bf00      	nop
 8003afc:	3740      	adds	r7, #64	; 0x40
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200066e4 	.word	0x200066e4
 8003b08:	40028000 	.word	0x40028000
 8003b0c:	2000672c 	.word	0x2000672c
 8003b10:	20004e14 	.word	0x20004e14
 8003b14:	20004e94 	.word	0x20004e94
 8003b18:	20006664 	.word	0x20006664
 8003b1c:	200000c4 	.word	0x200000c4
 8003b20:	080163d0 	.word	0x080163d0
 8003b24:	08003dcd 	.word	0x08003dcd

08003b28 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003b32:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <low_level_output+0x138>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003b4a:	4b45      	ldr	r3, [pc, #276]	; (8003c60 <low_level_output+0x138>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	e05a      	b.n	8003c10 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da03      	bge.n	8003b6a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003b62:	23f8      	movs	r3, #248	; 0xf8
 8003b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003b68:	e05c      	b.n	8003c24 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	895b      	ldrh	r3, [r3, #10]
 8003b6e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003b74:	e02f      	b.n	8003bd6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	18d0      	adds	r0, r2, r3
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	18d1      	adds	r1, r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f011 fd0a 	bl	80155a6 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da03      	bge.n	8003ba8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003ba0:	23f8      	movs	r3, #248	; 0xf8
 8003ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003ba6:	e03d      	b.n	8003c24 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003bb8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003bc4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003bd0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d8c8      	bhi.n	8003b76 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	18d0      	adds	r0, r2, r3
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f011 fcd6 	bl	80155a6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1a1      	bne.n	8003b5a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003c16:	6979      	ldr	r1, [r7, #20]
 8003c18:	4811      	ldr	r0, [pc, #68]	; (8003c60 <low_level_output+0x138>)
 8003c1a:	f7fd fc75 	bl	8001508 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <low_level_output+0x138>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <low_level_output+0x138>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c40:	3314      	adds	r3, #20
 8003c42:	2220      	movs	r2, #32
 8003c44:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <low_level_output+0x138>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003c54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3728      	adds	r7, #40	; 0x28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	200066e4 	.word	0x200066e4

08003c64 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08c      	sub	sp, #48	; 0x30
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003c88:	484f      	ldr	r0, [pc, #316]	; (8003dc8 <low_level_input+0x164>)
 8003c8a:	f7fd fd27 	bl	80016dc <HAL_ETH_GetReceivedFrame_IT>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <low_level_input+0x34>

    return NULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e092      	b.n	8003dbe <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003c98:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <low_level_input+0x164>)
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <low_level_input+0x164>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003ca4:	89fb      	ldrh	r3, [r7, #14]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f007 fc94 	bl	800b5e0 <pbuf_alloc>
 8003cb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d04b      	beq.n	8003d58 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003cc0:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <low_level_input+0x164>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cce:	e040      	b.n	8003d52 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	895b      	ldrh	r3, [r3, #10]
 8003cd4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003cda:	e021      	b.n	8003d20 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	18d0      	adds	r0, r2, r3
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	18d1      	adds	r1, r2, r3
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f011 fc57 	bl	80155a6 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003d0e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d1a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d8d6      	bhi.n	8003cdc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	18d0      	adds	r0, r2, r3
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f011 fc31 	bl	80155a6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4413      	add	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1bb      	bne.n	8003cd0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <low_level_input+0x164>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e00b      	b.n	8003d7c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <low_level_input+0x164>)
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3ee      	bcc.n	8003d64 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <low_level_input+0x164>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <low_level_input+0x164>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d94:	3314      	adds	r3, #20
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003da0:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <low_level_input+0x164>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da8:	3314      	adds	r3, #20
 8003daa:	2280      	movs	r2, #128	; 0x80
 8003dac:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <low_level_input+0x164>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db6:	3308      	adds	r3, #8
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3730      	adds	r7, #48	; 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200066e4 	.word	0x200066e4

08003dcc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <ethernetif_input+0x58>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fc6f 	bl	80046c4 <osSemaphoreAcquire>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f5      	bne.n	8003dd8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003dec:	480e      	ldr	r0, [pc, #56]	; (8003e28 <ethernetif_input+0x5c>)
 8003dee:	f011 fa83 	bl	80152f8 <sys_mutex_lock>
        p = low_level_input( netif );
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff36 	bl	8003c64 <low_level_input>
 8003df8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	4798      	blx	r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003e10:	68b8      	ldr	r0, [r7, #8]
 8003e12:	f007 fec5 	bl	800bba0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003e16:	4804      	ldr	r0, [pc, #16]	; (8003e28 <ethernetif_input+0x5c>)
 8003e18:	f011 fa7d 	bl	8015316 <sys_mutex_unlock>
      } while(p!=NULL);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e4      	bne.n	8003dec <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003e22:	e7d9      	b.n	8003dd8 <ethernetif_input+0xc>
 8003e24:	200000c4 	.word	0x200000c4
 8003e28:	20007f3c 	.word	0x20007f3c

08003e2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <ethernetif_init+0x1c>
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <ethernetif_init+0x48>)
 8003e3c:	f44f 720e 	mov.w	r2, #568	; 0x238
 8003e40:	490d      	ldr	r1, [pc, #52]	; (8003e78 <ethernetif_init+0x4c>)
 8003e42:	480e      	ldr	r0, [pc, #56]	; (8003e7c <ethernetif_init+0x50>)
 8003e44:	f011 fc1c 	bl	8015680 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2273      	movs	r2, #115	; 0x73
 8003e4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2274      	movs	r2, #116	; 0x74
 8003e54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <ethernetif_init+0x54>)
 8003e5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <ethernetif_init+0x58>)
 8003e62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fd93 	bl	8003990 <low_level_init>

  return ERR_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	080163d8 	.word	0x080163d8
 8003e78:	080163f4 	.word	0x080163f4
 8003e7c:	08016404 	.word	0x08016404
 8003e80:	08013365 	.word	0x08013365
 8003e84:	08003b29 	.word	0x08003b29

08003e88 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003e8c:	f7fc ffb8 	bl	8000e00 <HAL_GetTick>
 8003e90:	4603      	mov	r3, r0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003ea8:	f107 0308 	add.w	r3, r7, #8
 8003eac:	461a      	mov	r2, r3
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4816      	ldr	r0, [pc, #88]	; (8003f0c <ethernetif_set_link+0x74>)
 8003eb2:	f7fd fd16 	bl	80018e2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d108      	bne.n	8003ee0 <ethernetif_set_link+0x48>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f007 fa53 	bl	800b384 <netif_set_link_up>
 8003ede:	e011      	b.n	8003f04 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <ethernetif_set_link+0x6c>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f007 fa74 	bl	800b3ec <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003f04:	20c8      	movs	r0, #200	; 0xc8
 8003f06:	f000 f9c9 	bl	800429c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003f0a:	e7cd      	b.n	8003ea8 <ethernetif_set_link+0x10>
 8003f0c:	200066e4 	.word	0x200066e4

08003f10 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d05d      	beq.n	8003fee <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003f32:	4b34      	ldr	r3, [pc, #208]	; (8004004 <ethernetif_update_config+0xf4>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d03f      	beq.n	8003fba <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4830      	ldr	r0, [pc, #192]	; (8004004 <ethernetif_update_config+0xf4>)
 8003f42:	f7fd fd36 	bl	80019b2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fc ff5b 	bl	8000e00 <HAL_GetTick>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003f4e:	f107 0308 	add.w	r3, r7, #8
 8003f52:	461a      	mov	r2, r3
 8003f54:	2101      	movs	r1, #1
 8003f56:	482b      	ldr	r0, [pc, #172]	; (8004004 <ethernetif_update_config+0xf4>)
 8003f58:	f7fd fcc3 	bl	80018e2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003f5c:	f7fc ff50 	bl	8000e00 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f6a:	d828      	bhi.n	8003fbe <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0eb      	beq.n	8003f4e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003f76:	f107 0308 	add.w	r3, r7, #8
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	211f      	movs	r1, #31
 8003f7e:	4821      	ldr	r0, [pc, #132]	; (8004004 <ethernetif_update_config+0xf4>)
 8003f80:	f7fd fcaf 	bl	80018e2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <ethernetif_update_config+0xf4>)
 8003f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	e002      	b.n	8003f9e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <ethernetif_update_config+0xf4>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <ethernetif_update_config+0xf4>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	e016      	b.n	8003fde <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <ethernetif_update_config+0xf4>)
 8003fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	e011      	b.n	8003fde <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <ethernetif_update_config+0xb0>
          goto error;
 8003fbe:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <ethernetif_update_config+0xf4>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <ethernetif_update_config+0xf4>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	480a      	ldr	r0, [pc, #40]	; (8004004 <ethernetif_update_config+0xf4>)
 8003fda:	f7fd fcea 	bl	80019b2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4808      	ldr	r0, [pc, #32]	; (8004004 <ethernetif_update_config+0xf4>)
 8003fe2:	f7fd fdab 	bl	8001b3c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003fe6:	4807      	ldr	r0, [pc, #28]	; (8004004 <ethernetif_update_config+0xf4>)
 8003fe8:	f7fd fd49 	bl	8001a7e <HAL_ETH_Start>
 8003fec:	e002      	b.n	8003ff4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003fee:	4805      	ldr	r0, [pc, #20]	; (8004004 <ethernetif_update_config+0xf4>)
 8003ff0:	f7fd fd74 	bl	8001adc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f807 	bl	8004008 <ethernetif_notify_conn_changed>
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200066e4 	.word	0x200066e4

08004008 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004032:	f3ef 8305 	mrs	r3, IPSR
 8004036:	60bb      	str	r3, [r7, #8]
  return(result);
 8004038:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403e:	f3ef 8310 	mrs	r3, PRIMASK
 8004042:	607b      	str	r3, [r7, #4]
  return(result);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800404a:	f3ef 8311 	mrs	r3, BASEPRI
 800404e:	603b      	str	r3, [r7, #0]
  return(result);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <osKernelInitialize+0x3a>
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <osKernelInitialize+0x64>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d103      	bne.n	8004066 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800405e:	f06f 0305 	mvn.w	r3, #5
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e00c      	b.n	8004080 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <osKernelInitialize+0x64>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <osKernelInitialize+0x64>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e002      	b.n	8004080 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004080:	68fb      	ldr	r3, [r7, #12]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	200000c8 	.word	0x200000c8

08004094 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800409a:	f3ef 8305 	mrs	r3, IPSR
 800409e:	60bb      	str	r3, [r7, #8]
  return(result);
 80040a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a6:	f3ef 8310 	mrs	r3, PRIMASK
 80040aa:	607b      	str	r3, [r7, #4]
  return(result);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040b2:	f3ef 8311 	mrs	r3, BASEPRI
 80040b6:	603b      	str	r3, [r7, #0]
  return(result);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <osKernelStart+0x3a>
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <osKernelStart+0x68>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d103      	bne.n	80040ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80040c6:	f06f 0305 	mvn.w	r3, #5
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e010      	b.n	80040f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <osKernelStart+0x68>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d109      	bne.n	80040ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040d6:	f7ff ffa1 	bl	800401c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <osKernelStart+0x68>)
 80040dc:	2202      	movs	r2, #2
 80040de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040e0:	f002 f966 	bl	80063b0 <vTaskStartScheduler>
      stat = osOK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e002      	b.n	80040f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040f0:	68fb      	ldr	r3, [r7, #12]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	200000c8 	.word	0x200000c8

08004100 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004106:	f3ef 8305 	mrs	r3, IPSR
 800410a:	60bb      	str	r3, [r7, #8]
  return(result);
 800410c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004112:	f3ef 8310 	mrs	r3, PRIMASK
 8004116:	607b      	str	r3, [r7, #4]
  return(result);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800411e:	f3ef 8311 	mrs	r3, BASEPRI
 8004122:	603b      	str	r3, [r7, #0]
  return(result);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <osKernelGetTickCount+0x3a>
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <osKernelGetTickCount+0x4c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d103      	bne.n	800413a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004132:	f002 fa65 	bl	8006600 <xTaskGetTickCountFromISR>
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	e002      	b.n	8004140 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800413a:	f002 fa51 	bl	80065e0 <xTaskGetTickCount>
 800413e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	200000c8 	.word	0x200000c8

08004150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b090      	sub	sp, #64	; 0x40
 8004154:	af04      	add	r7, sp, #16
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004160:	f3ef 8305 	mrs	r3, IPSR
 8004164:	61fb      	str	r3, [r7, #28]
  return(result);
 8004166:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 808f 	bne.w	800428c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416e:	f3ef 8310 	mrs	r3, PRIMASK
 8004172:	61bb      	str	r3, [r7, #24]
  return(result);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800417a:	f3ef 8311 	mrs	r3, BASEPRI
 800417e:	617b      	str	r3, [r7, #20]
  return(result);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <osThreadNew+0x3e>
 8004186:	4b44      	ldr	r3, [pc, #272]	; (8004298 <osThreadNew+0x148>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d07e      	beq.n	800428c <osThreadNew+0x13c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d07b      	beq.n	800428c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004198:	2318      	movs	r3, #24
 800419a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d045      	beq.n	8004238 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <osThreadNew+0x6a>
        name = attr->name;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <osThreadNew+0x90>
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	2b38      	cmp	r3, #56	; 0x38
 80041d2:	d805      	bhi.n	80041e0 <osThreadNew+0x90>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <osThreadNew+0x94>
        return (NULL);
 80041e0:	2300      	movs	r3, #0
 80041e2:	e054      	b.n	800428e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <osThreadNew+0xca>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2bbb      	cmp	r3, #187	; 0xbb
 8004202:	d90a      	bls.n	800421a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <osThreadNew+0xca>
        mem = 1;
 8004214:	2301      	movs	r3, #1
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	e010      	b.n	800423c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <osThreadNew+0xec>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <osThreadNew+0xec>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <osThreadNew+0xec>
          mem = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	e001      	b.n	800423c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d110      	bne.n	8004264 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800424a:	9202      	str	r2, [sp, #8]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f001 febf 	bl	8005fdc <xTaskCreateStatic>
 800425e:	4603      	mov	r3, r0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e013      	b.n	800428c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d110      	bne.n	800428c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	b29a      	uxth	r2, r3
 800426e:	f107 0310 	add.w	r3, r7, #16
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f001 ff07 	bl	8006090 <xTaskCreate>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <osThreadNew+0x13c>
          hTask = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800428c:	693b      	ldr	r3, [r7, #16]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3730      	adds	r7, #48	; 0x30
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200000c8 	.word	0x200000c8

0800429c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042a4:	f3ef 8305 	mrs	r3, IPSR
 80042a8:	613b      	str	r3, [r7, #16]
  return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10f      	bne.n	80042d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b0:	f3ef 8310 	mrs	r3, PRIMASK
 80042b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042bc:	f3ef 8311 	mrs	r3, BASEPRI
 80042c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <osDelay+0x3c>
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <osDelay+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d103      	bne.n	80042d8 <osDelay+0x3c>
    stat = osErrorISR;
 80042d0:	f06f 0305 	mvn.w	r3, #5
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e007      	b.n	80042e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f002 f830 	bl	8006348 <vTaskDelay>
    }
  }

  return (stat);
 80042e8:	697b      	ldr	r3, [r7, #20]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200000c8 	.word	0x200000c8

080042f8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004304:	f3ef 8305 	mrs	r3, IPSR
 8004308:	613b      	str	r3, [r7, #16]
  return(result);
 800430a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 8085 	bne.w	800441c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004312:	f3ef 8310 	mrs	r3, PRIMASK
 8004316:	60fb      	str	r3, [r7, #12]
  return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800431e:	f3ef 8311 	mrs	r3, BASEPRI
 8004322:	60bb      	str	r3, [r7, #8]
  return(result);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <osMutexNew+0x3a>
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <osMutexNew+0x130>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d074      	beq.n	800441c <osMutexNew+0x124>
    if (attr != NULL) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	e001      	b.n	8004344 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <osMutexNew+0x5c>
      rmtx = 1U;
 800434e:	2301      	movs	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	e001      	b.n	8004358 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d15c      	bne.n	800441c <osMutexNew+0x124>
      mem = -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d015      	beq.n	800439a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <osMutexNew+0x8c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b4f      	cmp	r3, #79	; 0x4f
 800437c:	d902      	bls.n	8004384 <osMutexNew+0x8c>
          mem = 1;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e00c      	b.n	800439e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <osMutexNew+0xa6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <osMutexNew+0xa6>
            mem = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e001      	b.n	800439e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d112      	bne.n	80043ca <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4619      	mov	r1, r3
 80043b0:	2004      	movs	r0, #4
 80043b2:	f000 fea6 	bl	8005102 <xQueueCreateMutexStatic>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24
 80043b8:	e016      	b.n	80043e8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4619      	mov	r1, r3
 80043c0:	2001      	movs	r0, #1
 80043c2:	f000 fe9e 	bl	8005102 <xQueueCreateMutexStatic>
 80043c6:	6278      	str	r0, [r7, #36]	; 0x24
 80043c8:	e00e      	b.n	80043e8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80043d6:	2004      	movs	r0, #4
 80043d8:	f000 fe7b 	bl	80050d2 <xQueueCreateMutex>
 80043dc:	6278      	str	r0, [r7, #36]	; 0x24
 80043de:	e003      	b.n	80043e8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80043e0:	2001      	movs	r0, #1
 80043e2:	f000 fe76 	bl	80050d2 <xQueueCreateMutex>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <osMutexNew+0x110>
        if (attr != NULL) {
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <osMutexNew+0x104>
          name = attr->name;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e001      	b.n	8004400 <osMutexNew+0x108>
        } else {
          name = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004400:	6979      	ldr	r1, [r7, #20]
 8004402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004404:	f001 fd64 	bl	8005ed0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <osMutexNew+0x124>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800441e:	4618      	mov	r0, r3
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200000c8 	.word	0x200000c8

0800442c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800444a:	f3ef 8305 	mrs	r3, IPSR
 800444e:	613b      	str	r3, [r7, #16]
  return(result);
 8004450:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004456:	f3ef 8310 	mrs	r3, PRIMASK
 800445a:	60fb      	str	r3, [r7, #12]
  return(result);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004462:	f3ef 8311 	mrs	r3, BASEPRI
 8004466:	60bb      	str	r3, [r7, #8]
  return(result);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <osMutexAcquire+0x52>
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <osMutexAcquire+0xb8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d103      	bne.n	800447e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004476:	f06f 0305 	mvn.w	r3, #5
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e02c      	b.n	80044d8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004484:	f06f 0303 	mvn.w	r3, #3
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e025      	b.n	80044d8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d011      	beq.n	80044b6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004492:	6839      	ldr	r1, [r7, #0]
 8004494:	69b8      	ldr	r0, [r7, #24]
 8004496:	f000 fe82 	bl	800519e <xQueueTakeMutexRecursive>
 800449a:	4603      	mov	r3, r0
 800449c:	2b01      	cmp	r3, #1
 800449e:	d01b      	beq.n	80044d8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80044a6:	f06f 0301 	mvn.w	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e014      	b.n	80044d8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80044ae:	f06f 0302 	mvn.w	r3, #2
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	e010      	b.n	80044d8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	69b8      	ldr	r0, [r7, #24]
 80044ba:	f001 f9ff 	bl	80058bc <xQueueSemaphoreTake>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d009      	beq.n	80044d8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80044ca:	f06f 0301 	mvn.w	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	e002      	b.n	80044d8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80044d2:	f06f 0302 	mvn.w	r3, #2
 80044d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80044d8:	69fb      	ldr	r3, [r7, #28]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200000c8 	.word	0x200000c8

080044e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004504:	f3ef 8305 	mrs	r3, IPSR
 8004508:	613b      	str	r3, [r7, #16]
  return(result);
 800450a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10f      	bne.n	8004530 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004510:	f3ef 8310 	mrs	r3, PRIMASK
 8004514:	60fb      	str	r3, [r7, #12]
  return(result);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800451c:	f3ef 8311 	mrs	r3, BASEPRI
 8004520:	60bb      	str	r3, [r7, #8]
  return(result);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <osMutexRelease+0x50>
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <osMutexRelease+0x9c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d103      	bne.n	8004538 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004530:	f06f 0305 	mvn.w	r3, #5
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e01f      	b.n	8004578 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800453e:	f06f 0303 	mvn.w	r3, #3
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e018      	b.n	8004578 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800454c:	69b8      	ldr	r0, [r7, #24]
 800454e:	f000 fdf3 	bl	8005138 <xQueueGiveMutexRecursive>
 8004552:	4603      	mov	r3, r0
 8004554:	2b01      	cmp	r3, #1
 8004556:	d00f      	beq.n	8004578 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004558:	f06f 0302 	mvn.w	r3, #2
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e00b      	b.n	8004578 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004560:	2300      	movs	r3, #0
 8004562:	2200      	movs	r2, #0
 8004564:	2100      	movs	r1, #0
 8004566:	69b8      	ldr	r0, [r7, #24]
 8004568:	f000 feb4 	bl	80052d4 <xQueueGenericSend>
 800456c:	4603      	mov	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d002      	beq.n	8004578 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004572:	f06f 0302 	mvn.w	r3, #2
 8004576:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004578:	69fb      	ldr	r3, [r7, #28]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	200000c8 	.word	0x200000c8

08004588 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b08c      	sub	sp, #48	; 0x30
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004598:	f3ef 8305 	mrs	r3, IPSR
 800459c:	61bb      	str	r3, [r7, #24]
  return(result);
 800459e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f040 8087 	bne.w	80046b4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a6:	f3ef 8310 	mrs	r3, PRIMASK
 80045aa:	617b      	str	r3, [r7, #20]
  return(result);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045b2:	f3ef 8311 	mrs	r3, BASEPRI
 80045b6:	613b      	str	r3, [r7, #16]
  return(result);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <osSemaphoreNew+0x3e>
 80045be:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <osSemaphoreNew+0x138>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d076      	beq.n	80046b4 <osSemaphoreNew+0x12c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d073      	beq.n	80046b4 <osSemaphoreNew+0x12c>
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d86f      	bhi.n	80046b4 <osSemaphoreNew+0x12c>
    mem = -1;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <osSemaphoreNew+0x6e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b4f      	cmp	r3, #79	; 0x4f
 80045ee:	d902      	bls.n	80045f6 <osSemaphoreNew+0x6e>
        mem = 1;
 80045f0:	2301      	movs	r3, #1
 80045f2:	623b      	str	r3, [r7, #32]
 80045f4:	e00c      	b.n	8004610 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d108      	bne.n	8004610 <osSemaphoreNew+0x88>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <osSemaphoreNew+0x88>
          mem = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	e001      	b.n	8004610 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d04d      	beq.n	80046b4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d129      	bne.n	8004672 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10b      	bne.n	800463c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	2303      	movs	r3, #3
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	2200      	movs	r2, #0
 8004630:	2100      	movs	r1, #0
 8004632:	2001      	movs	r0, #1
 8004634:	f000 fc5e 	bl	8004ef4 <xQueueGenericCreateStatic>
 8004638:	6278      	str	r0, [r7, #36]	; 0x24
 800463a:	e005      	b.n	8004648 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800463c:	2203      	movs	r2, #3
 800463e:	2100      	movs	r1, #0
 8004640:	2001      	movs	r0, #1
 8004642:	f000 fcca 	bl	8004fda <xQueueGenericCreate>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	d022      	beq.n	8004694 <osSemaphoreNew+0x10c>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01f      	beq.n	8004694 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004654:	2300      	movs	r3, #0
 8004656:	2200      	movs	r2, #0
 8004658:	2100      	movs	r1, #0
 800465a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800465c:	f000 fe3a 	bl	80052d4 <xQueueGenericSend>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d016      	beq.n	8004694 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8004666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004668:	f001 fae7 	bl	8005c3a <vQueueDelete>
            hSemaphore = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e010      	b.n	8004694 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d108      	bne.n	800468a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	461a      	mov	r2, r3
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fdc1 	bl	8005208 <xQueueCreateCountingSemaphoreStatic>
 8004686:	6278      	str	r0, [r7, #36]	; 0x24
 8004688:	e004      	b.n	8004694 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fdf0 	bl	8005272 <xQueueCreateCountingSemaphore>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00c      	beq.n	80046b4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <osSemaphoreNew+0x120>
          name = attr->name;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e001      	b.n	80046ac <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80046ac:	69f9      	ldr	r1, [r7, #28]
 80046ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046b0:	f001 fc0e 	bl	8005ed0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3728      	adds	r7, #40	; 0x28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200000c8 	.word	0x200000c8

080046c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80046dc:	f06f 0303 	mvn.w	r3, #3
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e04b      	b.n	800477c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e4:	f3ef 8305 	mrs	r3, IPSR
 80046e8:	617b      	str	r3, [r7, #20]
  return(result);
 80046ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10f      	bne.n	8004710 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f0:	f3ef 8310 	mrs	r3, PRIMASK
 80046f4:	613b      	str	r3, [r7, #16]
  return(result);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004700:	60fb      	str	r3, [r7, #12]
  return(result);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d026      	beq.n	8004756 <osSemaphoreAcquire+0x92>
 8004708:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <osSemaphoreAcquire+0xc4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d122      	bne.n	8004756 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004716:	f06f 0303 	mvn.w	r3, #3
 800471a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800471c:	e02d      	b.n	800477a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	461a      	mov	r2, r3
 8004728:	2100      	movs	r1, #0
 800472a:	69b8      	ldr	r0, [r7, #24]
 800472c:	f001 f9ce 	bl	8005acc <xQueueReceiveFromISR>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d003      	beq.n	800473e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004736:	f06f 0302 	mvn.w	r3, #2
 800473a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800473c:	e01d      	b.n	800477a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01a      	beq.n	800477a <osSemaphoreAcquire+0xb6>
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <osSemaphoreAcquire+0xc8>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004754:	e011      	b.n	800477a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004756:	6839      	ldr	r1, [r7, #0]
 8004758:	69b8      	ldr	r0, [r7, #24]
 800475a:	f001 f8af 	bl	80058bc <xQueueSemaphoreTake>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d00b      	beq.n	800477c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800476a:	f06f 0301 	mvn.w	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e004      	b.n	800477c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004772:	f06f 0302 	mvn.w	r3, #2
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e000      	b.n	800477c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800477a:	bf00      	nop
      }
    }
  }

  return (stat);
 800477c:	69fb      	ldr	r3, [r7, #28]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200000c8 	.word	0x200000c8
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80047a6:	f06f 0303 	mvn.w	r3, #3
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e03e      	b.n	800482c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ae:	f3ef 8305 	mrs	r3, IPSR
 80047b2:	617b      	str	r3, [r7, #20]
  return(result);
 80047b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ba:	f3ef 8310 	mrs	r3, PRIMASK
 80047be:	613b      	str	r3, [r7, #16]
  return(result);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d105      	bne.n	80047d2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047c6:	f3ef 8311 	mrs	r3, BASEPRI
 80047ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01e      	beq.n	8004810 <osSemaphoreRelease+0x80>
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <osSemaphoreRelease+0xa8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d11a      	bne.n	8004810 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	4619      	mov	r1, r3
 80047e4:	69b8      	ldr	r0, [r7, #24]
 80047e6:	f000 ff03 	bl	80055f0 <xQueueGiveFromISR>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d003      	beq.n	80047f8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80047f0:	f06f 0302 	mvn.w	r3, #2
 80047f4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80047f6:	e018      	b.n	800482a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d015      	beq.n	800482a <osSemaphoreRelease+0x9a>
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <osSemaphoreRelease+0xac>)
 8004800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800480e:	e00c      	b.n	800482a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004810:	2300      	movs	r3, #0
 8004812:	2200      	movs	r2, #0
 8004814:	2100      	movs	r1, #0
 8004816:	69b8      	ldr	r0, [r7, #24]
 8004818:	f000 fd5c 	bl	80052d4 <xQueueGenericSend>
 800481c:	4603      	mov	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d004      	beq.n	800482c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004822:	f06f 0302 	mvn.w	r3, #2
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e000      	b.n	800482c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800482a:	bf00      	nop
    }
  }

  return (stat);
 800482c:	69fb      	ldr	r3, [r7, #28]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200000c8 	.word	0x200000c8
 800483c:	e000ed04 	.word	0xe000ed04

08004840 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800484c:	f3ef 8305 	mrs	r3, IPSR
 8004850:	617b      	str	r3, [r7, #20]
  return(result);
 8004852:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004858:	f3ef 8310 	mrs	r3, PRIMASK
 800485c:	613b      	str	r3, [r7, #16]
  return(result);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004864:	f3ef 8311 	mrs	r3, BASEPRI
 8004868:	60fb      	str	r3, [r7, #12]
  return(result);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <osSemaphoreDelete+0x40>
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <osSemaphoreDelete+0x68>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d103      	bne.n	8004880 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8004878:	f06f 0305 	mvn.w	r3, #5
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e00e      	b.n	800489e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8004886:	f06f 0303 	mvn.w	r3, #3
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e007      	b.n	800489e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800488e:	69b8      	ldr	r0, [r7, #24]
 8004890:	f001 fb46 	bl	8005f20 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004894:	2300      	movs	r3, #0
 8004896:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8004898:	69b8      	ldr	r0, [r7, #24]
 800489a:	f001 f9ce 	bl	8005c3a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800489e:	69fb      	ldr	r3, [r7, #28]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200000c8 	.word	0x200000c8

080048ac <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08c      	sub	sp, #48	; 0x30
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048bc:	f3ef 8305 	mrs	r3, IPSR
 80048c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80048c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d170      	bne.n	80049aa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c8:	f3ef 8310 	mrs	r3, PRIMASK
 80048cc:	617b      	str	r3, [r7, #20]
  return(result);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048d4:	f3ef 8311 	mrs	r3, BASEPRI
 80048d8:	613b      	str	r3, [r7, #16]
  return(result);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <osMessageQueueNew+0x3c>
 80048e0:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <osMessageQueueNew+0x108>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d060      	beq.n	80049aa <osMessageQueueNew+0xfe>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d05d      	beq.n	80049aa <osMessageQueueNew+0xfe>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05a      	beq.n	80049aa <osMessageQueueNew+0xfe>
    mem = -1;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d029      	beq.n	8004954 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d012      	beq.n	800492e <osMessageQueueNew+0x82>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b4f      	cmp	r3, #79	; 0x4f
 800490e:	d90e      	bls.n	800492e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	429a      	cmp	r2, r3
 8004926:	d302      	bcc.n	800492e <osMessageQueueNew+0x82>
        mem = 1;
 8004928:	2301      	movs	r3, #1
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	e014      	b.n	8004958 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d110      	bne.n	8004958 <osMessageQueueNew+0xac>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10c      	bne.n	8004958 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	d108      	bne.n	8004958 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <osMessageQueueNew+0xac>
          mem = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	e001      	b.n	8004958 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10c      	bne.n	8004978 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6899      	ldr	r1, [r3, #8]
 8004966:	2300      	movs	r3, #0
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	460b      	mov	r3, r1
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fac0 	bl	8004ef4 <xQueueGenericCreateStatic>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24
 8004976:	e008      	b.n	800498a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800497e:	2200      	movs	r2, #0
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fb29 	bl	8004fda <xQueueGenericCreate>
 8004988:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <osMessageQueueNew+0xf2>
        name = attr->name;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	e001      	b.n	80049a2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80049a2:	69f9      	ldr	r1, [r7, #28]
 80049a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a6:	f001 fa93 	bl	8005ed0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3728      	adds	r7, #40	; 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	200000c8 	.word	0x200000c8

080049b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d0:	f3ef 8305 	mrs	r3, IPSR
 80049d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80049d6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10f      	bne.n	80049fc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049dc:	f3ef 8310 	mrs	r3, PRIMASK
 80049e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ec:	617b      	str	r3, [r7, #20]
  return(result);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02c      	beq.n	8004a4e <osMessageQueuePut+0x96>
 80049f4:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <osMessageQueuePut+0xe0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d128      	bne.n	8004a4e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <osMessageQueuePut+0x56>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <osMessageQueuePut+0x56>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004a0e:	f06f 0303 	mvn.w	r3, #3
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a14:	e039      	b.n	8004a8a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004a1a:	f107 0210 	add.w	r2, r7, #16
 8004a1e:	2300      	movs	r3, #0
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	6a38      	ldr	r0, [r7, #32]
 8004a24:	f000 fd50 	bl	80054c8 <xQueueGenericSendFromISR>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d003      	beq.n	8004a36 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004a2e:	f06f 0302 	mvn.w	r3, #2
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a34:	e029      	b.n	8004a8a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d026      	beq.n	8004a8a <osMessageQueuePut+0xd2>
 8004a3c:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <osMessageQueuePut+0xe4>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a4c:	e01d      	b.n	8004a8a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <osMessageQueuePut+0xa2>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004a5a:	f06f 0303 	mvn.w	r3, #3
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e014      	b.n	8004a8c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a62:	2300      	movs	r3, #0
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	6a38      	ldr	r0, [r7, #32]
 8004a6a:	f000 fc33 	bl	80052d4 <xQueueGenericSend>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d00b      	beq.n	8004a8c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004a7a:	f06f 0301 	mvn.w	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a80:	e004      	b.n	8004a8c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004a82:	f06f 0302 	mvn.w	r3, #2
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
 8004a88:	e000      	b.n	8004a8c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a8a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	200000c8 	.word	0x200000c8
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab6:	f3ef 8305 	mrs	r3, IPSR
 8004aba:	61fb      	str	r3, [r7, #28]
  return(result);
 8004abc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10f      	bne.n	8004ae2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ace:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02c      	beq.n	8004b34 <osMessageQueueGet+0x94>
 8004ada:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <osMessageQueueGet+0xdc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d128      	bne.n	8004b34 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <osMessageQueueGet+0x54>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <osMessageQueueGet+0x54>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004af4:	f06f 0303 	mvn.w	r3, #3
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004afa:	e038      	b.n	8004b6e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004b00:	f107 0310 	add.w	r3, r7, #16
 8004b04:	461a      	mov	r2, r3
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6a38      	ldr	r0, [r7, #32]
 8004b0a:	f000 ffdf 	bl	8005acc <xQueueReceiveFromISR>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d003      	beq.n	8004b1c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004b14:	f06f 0302 	mvn.w	r3, #2
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b1a:	e028      	b.n	8004b6e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d025      	beq.n	8004b6e <osMessageQueueGet+0xce>
 8004b22:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <osMessageQueueGet+0xe0>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b32:	e01c      	b.n	8004b6e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <osMessageQueueGet+0xa0>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004b40:	f06f 0303 	mvn.w	r3, #3
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
 8004b46:	e013      	b.n	8004b70 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	6a38      	ldr	r0, [r7, #32]
 8004b4e:	f000 fdd9 	bl	8005704 <xQueueReceive>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d00b      	beq.n	8004b70 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004b5e:	f06f 0301 	mvn.w	r3, #1
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	e004      	b.n	8004b70 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004b66:	f06f 0302 	mvn.w	r3, #2
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	e000      	b.n	8004b70 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3728      	adds	r7, #40	; 0x28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200000c8 	.word	0x200000c8
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <osMessageQueueGetCount+0x18>
    count = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e01e      	b.n	8004bda <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b9c:	f3ef 8305 	mrs	r3, IPSR
 8004ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ba2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10f      	bne.n	8004bc8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bac:	613b      	str	r3, [r7, #16]
  return(result);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <osMessageQueueGetCount+0x4e>
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <osMessageQueueGetCount+0x60>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d104      	bne.n	8004bd2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004bc8:	69b8      	ldr	r0, [r7, #24]
 8004bca:	f001 f819 	bl	8005c00 <uxQueueMessagesWaitingFromISR>
 8004bce:	61f8      	str	r0, [r7, #28]
 8004bd0:	e003      	b.n	8004bda <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004bd2:	69b8      	ldr	r0, [r7, #24]
 8004bd4:	f000 fff7 	bl	8005bc6 <uxQueueMessagesWaiting>
 8004bd8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8004bda:	69fb      	ldr	r3, [r7, #28]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200000c8 	.word	0x200000c8

08004be8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf4:	f3ef 8305 	mrs	r3, IPSR
 8004bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8004bfa:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10f      	bne.n	8004c20 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c00:	f3ef 8310 	mrs	r3, PRIMASK
 8004c04:	613b      	str	r3, [r7, #16]
  return(result);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <osMessageQueueDelete+0x40>
 8004c18:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <osMessageQueueDelete+0x68>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d103      	bne.n	8004c28 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8004c20:	f06f 0305 	mvn.w	r3, #5
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e00e      	b.n	8004c46 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8004c2e:	f06f 0303 	mvn.w	r3, #3
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e007      	b.n	8004c46 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8004c36:	69b8      	ldr	r0, [r7, #24]
 8004c38:	f001 f972 	bl	8005f20 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8004c40:	69b8      	ldr	r0, [r7, #24]
 8004c42:	f000 fffa 	bl	8005c3a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004c46:	69fb      	ldr	r3, [r7, #28]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200000c8 	.word	0x200000c8

08004c54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4a06      	ldr	r2, [pc, #24]	; (8004c84 <vApplicationGetIdleTaskMemory+0x30>)
 8004c6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	601a      	str	r2, [r3, #0]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	200000cc 	.word	0x200000cc
 8004c84:	20000188 	.word	0x20000188

08004c88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <vApplicationGetTimerTaskMemory+0x30>)
 8004c9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ca6:	601a      	str	r2, [r3, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000388 	.word	0x20000388
 8004cb8:	20000444 	.word	0x20000444

08004cbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0208 	add.w	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f103 0208 	add.w	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f103 0208 	add.w	r2, r3, #8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d103      	bne.n	8004d7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e00c      	b.n	8004d98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3308      	adds	r3, #8
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <vListInsert+0x2e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d2f6      	bcs.n	8004d86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6892      	ldr	r2, [r2, #8]
 8004de6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d103      	bne.n	8004e04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	e7fe      	b.n	8004e4a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004e4c:	f002 fd66 	bl	800791c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	68f9      	ldr	r1, [r7, #12]
 8004e5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	441a      	add	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d114      	bne.n	8004ecc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01a      	beq.n	8004ee0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3310      	adds	r3, #16
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fd22 	bl	80068f8 <xTaskRemoveFromEventList>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d012      	beq.n	8004ee0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <xQueueGenericReset+0xcc>)
 8004ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	e009      	b.n	8004ee0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3310      	adds	r3, #16
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fef3 	bl	8004cbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3324      	adds	r3, #36	; 0x24
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff feee 	bl	8004cbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ee0:	f002 fd4a 	bl	8007978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ee4:	2301      	movs	r3, #1
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08e      	sub	sp, #56	; 0x38
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <xQueueGenericCreateStatic+0x28>
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f1a:	e7fe      	b.n	8004f1a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <xQueueGenericCreateStatic+0x42>
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	e7fe      	b.n	8004f34 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <xQueueGenericCreateStatic+0x4e>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <xQueueGenericCreateStatic+0x52>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <xQueueGenericCreateStatic+0x54>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <xQueueGenericCreateStatic+0x6c>
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	e7fe      	b.n	8004f5e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <xQueueGenericCreateStatic+0x78>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <xQueueGenericCreateStatic+0x7c>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <xQueueGenericCreateStatic+0x7e>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <xQueueGenericCreateStatic+0x96>
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	e7fe      	b.n	8004f88 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f8a:	2350      	movs	r3, #80	; 0x50
 8004f8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b50      	cmp	r3, #80	; 0x50
 8004f92:	d009      	beq.n	8004fa8 <xQueueGenericCreateStatic+0xb4>
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	e7fe      	b.n	8004fa6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fa8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00d      	beq.n	8004fd0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fbc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f844 	bl	8005058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3730      	adds	r7, #48	; 0x30
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b08a      	sub	sp, #40	; 0x28
 8004fde:	af02      	add	r7, sp, #8
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <xQueueGenericCreate+0x28>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e7fe      	b.n	8005000 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e004      	b.n	8005018 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3350      	adds	r3, #80	; 0x50
 800501c:	4618      	mov	r0, r3
 800501e:	f002 fd85 	bl	8007b2c <pvPortMalloc>
 8005022:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d011      	beq.n	800504e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3350      	adds	r3, #80	; 0x50
 8005032:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800503c:	79fa      	ldrb	r2, [r7, #7]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f805 	bl	8005058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800504e:	69bb      	ldr	r3, [r7, #24]
	}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e002      	b.n	800507a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005086:	2101      	movs	r1, #1
 8005088:	69b8      	ldr	r0, [r7, #24]
 800508a:	f7ff fecb 	bl	8004e24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80050be:	2300      	movs	r3, #0
 80050c0:	2200      	movs	r2, #0
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f905 	bl	80052d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	4603      	mov	r3, r0
 80050da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80050dc:	2301      	movs	r3, #1
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff ff75 	bl	8004fda <xQueueGenericCreate>
 80050f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ffd3 	bl	800509e <prvInitialiseMutex>

		return xNewQueue;
 80050f8:	68fb      	ldr	r3, [r7, #12]
	}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005102:	b580      	push	{r7, lr}
 8005104:	b088      	sub	sp, #32
 8005106:	af02      	add	r7, sp, #8
 8005108:	4603      	mov	r3, r0
 800510a:	6039      	str	r1, [r7, #0]
 800510c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800510e:	2301      	movs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	6939      	ldr	r1, [r7, #16]
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7ff fee7 	bl	8004ef4 <xQueueGenericCreateStatic>
 8005126:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff ffb8 	bl	800509e <prvInitialiseMutex>

		return xNewQueue;
 800512e:	68fb      	ldr	r3, [r7, #12]
	}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <xQueueGiveMutexRecursive+0x26>
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e7fe      	b.n	800515c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	689c      	ldr	r4, [r3, #8]
 8005162:	f001 fd85 	bl	8006c70 <xTaskGetCurrentTaskHandle>
 8005166:	4603      	mov	r3, r0
 8005168:	429c      	cmp	r4, r3
 800516a:	d111      	bne.n	8005190 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d105      	bne.n	800518a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800517e:	2300      	movs	r3, #0
 8005180:	2200      	movs	r2, #0
 8005182:	2100      	movs	r1, #0
 8005184:	6938      	ldr	r0, [r7, #16]
 8005186:	f000 f8a5 	bl	80052d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800518a:	2301      	movs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e001      	b.n	8005194 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005194:	697b      	ldr	r3, [r7, #20]
	}
 8005196:	4618      	mov	r0, r3
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd90      	pop	{r4, r7, pc}

0800519e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800519e:	b590      	push	{r4, r7, lr}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <xQueueTakeMutexRecursive+0x28>
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e7fe      	b.n	80051c4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	689c      	ldr	r4, [r3, #8]
 80051ca:	f001 fd51 	bl	8006c70 <xTaskGetCurrentTaskHandle>
 80051ce:	4603      	mov	r3, r0
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d107      	bne.n	80051e4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80051de:	2301      	movs	r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e00c      	b.n	80051fe <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6938      	ldr	r0, [r7, #16]
 80051e8:	f000 fb68 	bl	80058bc <xQueueSemaphoreTake>
 80051ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80051fe:	697b      	ldr	r3, [r7, #20]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}

08005208 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <xQueueCreateCountingSemaphoreStatic+0x26>
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	e7fe      	b.n	800522c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	429a      	cmp	r2, r3
 8005234:	d909      	bls.n	800524a <xQueueCreateCountingSemaphoreStatic+0x42>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e7fe      	b.n	8005248 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800524a:	2302      	movs	r3, #2
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	2100      	movs	r1, #0
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fe4d 	bl	8004ef4 <xQueueGenericCreateStatic>
 800525a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005268:	69fb      	ldr	r3, [r7, #28]
	}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <xQueueCreateCountingSemaphore+0x24>
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e7fe      	b.n	8005294 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d909      	bls.n	80052b2 <xQueueCreateCountingSemaphore+0x40>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e7fe      	b.n	80052b0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052b2:	2202      	movs	r2, #2
 80052b4:	2100      	movs	r1, #0
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe8f 	bl	8004fda <xQueueGenericCreate>
 80052bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80052ca:	697b      	ldr	r3, [r7, #20]
	}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08e      	sub	sp, #56	; 0x38
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052e2:	2300      	movs	r3, #0
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <xQueueGenericSend+0x30>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
 8005302:	e7fe      	b.n	8005302 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <xQueueGenericSend+0x3e>
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <xQueueGenericSend+0x42>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <xQueueGenericSend+0x44>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <xQueueGenericSend+0x5c>
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
 800532e:	e7fe      	b.n	800532e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d103      	bne.n	800533e <xQueueGenericSend+0x6a>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <xQueueGenericSend+0x6e>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <xQueueGenericSend+0x70>
 8005342:	2300      	movs	r3, #0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <xQueueGenericSend+0x88>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	623b      	str	r3, [r7, #32]
 800535a:	e7fe      	b.n	800535a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800535c:	f001 fc98 	bl	8006c90 <xTaskGetSchedulerState>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <xQueueGenericSend+0x98>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xQueueGenericSend+0x9c>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericSend+0x9e>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <xQueueGenericSend+0xb6>
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e7fe      	b.n	8005388 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800538a:	f002 fac7 	bl	800791c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <xQueueGenericSend+0xcc>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d129      	bne.n	80053f4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a6:	f000 fc82 	bl	8005cae <prvCopyDataToQueue>
 80053aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d010      	beq.n	80053d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	3324      	adds	r3, #36	; 0x24
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 fa9d 	bl	80068f8 <xTaskRemoveFromEventList>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d013      	beq.n	80053ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053c4:	4b3f      	ldr	r3, [pc, #252]	; (80054c4 <xQueueGenericSend+0x1f0>)
 80053c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	e00a      	b.n	80053ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <xQueueGenericSend+0x1f0>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053ec:	f002 fac4 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e063      	b.n	80054bc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053fa:	f002 fabd 	bl	8007978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	e05c      	b.n	80054bc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	4618      	mov	r0, r3
 800540e:	f001 fad5 	bl	80069bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005412:	2301      	movs	r3, #1
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005416:	f002 faaf 	bl	8007978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800541a:	f001 f837 	bl	800648c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800541e:	f002 fa7d 	bl	800791c <vPortEnterCritical>
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005428:	b25b      	sxtb	r3, r3
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d103      	bne.n	8005438 <xQueueGenericSend+0x164>
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800543e:	b25b      	sxtb	r3, r3
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d103      	bne.n	800544e <xQueueGenericSend+0x17a>
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544e:	f002 fa93 	bl	8007978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005452:	1d3a      	adds	r2, r7, #4
 8005454:	f107 0314 	add.w	r3, r7, #20
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f001 fac4 	bl	80069e8 <xTaskCheckForTimeOut>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d124      	bne.n	80054b0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005466:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005468:	f000 fd19 	bl	8005e9e <prvIsQueueFull>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	3310      	adds	r3, #16
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f001 f9ee 	bl	800685c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005482:	f000 fca4 	bl	8005dce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005486:	f001 f80f 	bl	80064a8 <xTaskResumeAll>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	f47f af7c 	bne.w	800538a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <xQueueGenericSend+0x1f0>)
 8005494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	e772      	b.n	800538a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054a6:	f000 fc92 	bl	8005dce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054aa:	f000 fffd 	bl	80064a8 <xTaskResumeAll>
 80054ae:	e76c      	b.n	800538a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054b2:	f000 fc8c 	bl	8005dce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b6:	f000 fff7 	bl	80064a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3738      	adds	r7, #56	; 0x38
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08e      	sub	sp, #56	; 0x38
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <xQueueGenericSendFromISR+0x2c>
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	e7fe      	b.n	80054f2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d103      	bne.n	8005502 <xQueueGenericSendFromISR+0x3a>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <xQueueGenericSendFromISR+0x3e>
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <xQueueGenericSendFromISR+0x40>
 8005506:	2300      	movs	r3, #0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <xQueueGenericSendFromISR+0x58>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	623b      	str	r3, [r7, #32]
 800551e:	e7fe      	b.n	800551e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d103      	bne.n	800552e <xQueueGenericSendFromISR+0x66>
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <xQueueGenericSendFromISR+0x6a>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <xQueueGenericSendFromISR+0x6c>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <xQueueGenericSendFromISR+0x84>
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e7fe      	b.n	800554a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800554c:	f002 fac2 	bl	8007ad4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005550:	f3ef 8211 	mrs	r2, BASEPRI
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61ba      	str	r2, [r7, #24]
 8005566:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005568:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <xQueueGenericSendFromISR+0xb6>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d12c      	bne.n	80055d8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800558e:	f000 fb8e 	bl	8005cae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005592:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d112      	bne.n	80055c2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d016      	beq.n	80055d2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	3324      	adds	r3, #36	; 0x24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 f9a5 	bl	80068f8 <xTaskRemoveFromEventList>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00e      	beq.n	80055d2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e007      	b.n	80055d2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055c6:	3301      	adds	r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	b25a      	sxtb	r2, r3
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055d2:	2301      	movs	r3, #1
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80055d6:	e001      	b.n	80055dc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3738      	adds	r7, #56	; 0x38
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	; 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	e7fe      	b.n	8005616 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <xQueueGiveFromISR+0x44>
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e7fe      	b.n	8005632 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <xQueueGiveFromISR+0x54>
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <xQueueGiveFromISR+0x58>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <xQueueGiveFromISR+0x5a>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <xQueueGiveFromISR+0x72>
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e7fe      	b.n	8005660 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005662:	f002 fa37 	bl	8007ad4 <vPortValidateInterruptPriority>
	__asm volatile
 8005666:	f3ef 8211 	mrs	r2, BASEPRI
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	617a      	str	r2, [r7, #20]
 800567c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800567e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568e:	429a      	cmp	r2, r3
 8005690:	d22b      	bcs.n	80056ea <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d112      	bne.n	80056d4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	3324      	adds	r3, #36	; 0x24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f91c 	bl	80068f8 <xTaskRemoveFromEventList>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2201      	movs	r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e007      	b.n	80056e4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d8:	3301      	adds	r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	b25a      	sxtb	r2, r3
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056e4:	2301      	movs	r3, #1
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
 80056e8:	e001      	b.n	80056ee <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3738      	adds	r7, #56	; 0x38
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08c      	sub	sp, #48	; 0x30
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005710:	2300      	movs	r3, #0
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <xQueueReceive+0x2e>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	623b      	str	r3, [r7, #32]
 8005730:	e7fe      	b.n	8005730 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d103      	bne.n	8005740 <xQueueReceive+0x3c>
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <xQueueReceive+0x40>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <xQueueReceive+0x42>
 8005744:	2300      	movs	r3, #0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <xQueueReceive+0x5a>
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e7fe      	b.n	800575c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800575e:	f001 fa97 	bl	8006c90 <xTaskGetSchedulerState>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <xQueueReceive+0x6a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <xQueueReceive+0x6e>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <xQueueReceive+0x70>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <xQueueReceive+0x88>
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e7fe      	b.n	800578a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800578c:	f002 f8c6 	bl	800791c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01f      	beq.n	80057dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a0:	f000 faef 	bl	8005d82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00f      	beq.n	80057d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	3310      	adds	r3, #16
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 f89d 	bl	80068f8 <xTaskRemoveFromEventList>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <xQueueReceive+0x1b4>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057d4:	f002 f8d0 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 80057d8:	2301      	movs	r3, #1
 80057da:	e069      	b.n	80058b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e2:	f002 f8c9 	bl	8007978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e062      	b.n	80058b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057f0:	f107 0310 	add.w	r3, r7, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f8e1 	bl	80069bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057fe:	f002 f8bb 	bl	8007978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005802:	f000 fe43 	bl	800648c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005806:	f002 f889 	bl	800791c <vPortEnterCritical>
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005810:	b25b      	sxtb	r3, r3
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d103      	bne.n	8005820 <xQueueReceive+0x11c>
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005826:	b25b      	sxtb	r3, r3
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d103      	bne.n	8005836 <xQueueReceive+0x132>
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005836:	f002 f89f 	bl	8007978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583a:	1d3a      	adds	r2, r7, #4
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f001 f8d0 	bl	80069e8 <xTaskCheckForTimeOut>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d123      	bne.n	8005896 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800584e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005850:	f000 fb0f 	bl	8005e72 <prvIsQueueEmpty>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d017      	beq.n	800588a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	3324      	adds	r3, #36	; 0x24
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fffa 	bl	800685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800586a:	f000 fab0 	bl	8005dce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800586e:	f000 fe1b 	bl	80064a8 <xTaskResumeAll>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d189      	bne.n	800578c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005878:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <xQueueReceive+0x1b4>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	e780      	b.n	800578c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800588a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588c:	f000 fa9f 	bl	8005dce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005890:	f000 fe0a 	bl	80064a8 <xTaskResumeAll>
 8005894:	e77a      	b.n	800578c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005898:	f000 fa99 	bl	8005dce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800589c:	f000 fe04 	bl	80064a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a2:	f000 fae6 	bl	8005e72 <prvIsQueueEmpty>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f43f af6f 	beq.w	800578c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3730      	adds	r7, #48	; 0x30
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	; 0x38
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <xQueueSemaphoreTake+0x30>
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	e7fe      	b.n	80058ea <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d009      	beq.n	8005908 <xQueueSemaphoreTake+0x4c>
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	e7fe      	b.n	8005906 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005908:	f001 f9c2 	bl	8006c90 <xTaskGetSchedulerState>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <xQueueSemaphoreTake+0x5c>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <xQueueSemaphoreTake+0x60>
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <xQueueSemaphoreTake+0x62>
 800591c:	2300      	movs	r3, #0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <xQueueSemaphoreTake+0x7a>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	e7fe      	b.n	8005934 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005936:	f001 fff1 	bl	800791c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d024      	beq.n	8005990 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	1e5a      	subs	r2, r3, #1
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005956:	f001 fb0d 	bl	8006f74 <pvTaskIncrementMutexHeldCount>
 800595a:	4602      	mov	r2, r0
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00f      	beq.n	8005988 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	3310      	adds	r3, #16
 800596c:	4618      	mov	r0, r3
 800596e:	f000 ffc3 	bl	80068f8 <xTaskRemoveFromEventList>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005978:	4b53      	ldr	r3, [pc, #332]	; (8005ac8 <xQueueSemaphoreTake+0x20c>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005988:	f001 fff6 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	e096      	b.n	8005abe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d110      	bne.n	80059b8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	2b00      	cmp	r3, #0
 800599a:	d009      	beq.n	80059b0 <xQueueSemaphoreTake+0xf4>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e7fe      	b.n	80059ae <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80059b0:	f001 ffe2 	bl	8007978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059b4:	2300      	movs	r3, #0
 80059b6:	e082      	b.n	8005abe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059be:	f107 030c 	add.w	r3, r7, #12
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fffa 	bl	80069bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059cc:	f001 ffd4 	bl	8007978 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059d0:	f000 fd5c 	bl	800648c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059d4:	f001 ffa2 	bl	800791c <vPortEnterCritical>
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d103      	bne.n	80059ee <xQueueSemaphoreTake+0x132>
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d103      	bne.n	8005a04 <xQueueSemaphoreTake+0x148>
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a04:	f001 ffb8 	bl	8007978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a08:	463a      	mov	r2, r7
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 ffe9 	bl	80069e8 <xTaskCheckForTimeOut>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d132      	bne.n	8005a82 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a1e:	f000 fa28 	bl	8005e72 <prvIsQueueEmpty>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d026      	beq.n	8005a76 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005a30:	f001 ff74 	bl	800791c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 f947 	bl	8006ccc <xTaskPriorityInherit>
 8005a3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a40:	f001 ff9a 	bl	8007978 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 ff05 	bl	800685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a54:	f000 f9bb 	bl	8005dce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a58:	f000 fd26 	bl	80064a8 <xTaskResumeAll>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f47f af69 	bne.w	8005936 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <xQueueSemaphoreTake+0x20c>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	e75f      	b.n	8005936 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a78:	f000 f9a9 	bl	8005dce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a7c:	f000 fd14 	bl	80064a8 <xTaskResumeAll>
 8005a80:	e759      	b.n	8005936 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a84:	f000 f9a3 	bl	8005dce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a88:	f000 fd0e 	bl	80064a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a8e:	f000 f9f0 	bl	8005e72 <prvIsQueueEmpty>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f43f af4e 	beq.w	8005936 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005aa0:	f001 ff3c 	bl	800791c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005aa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aa6:	f000 f8ea 	bl	8005c7e <prvGetDisinheritPriorityAfterTimeout>
 8005aaa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 f9de 	bl	8006e74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ab8:	f001 ff5e 	bl	8007978 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005abc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3738      	adds	r7, #56	; 0x38
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08e      	sub	sp, #56	; 0x38
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <xQueueReceiveFromISR+0x2a>
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	623b      	str	r3, [r7, #32]
 8005af4:	e7fe      	b.n	8005af4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <xQueueReceiveFromISR+0x38>
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <xQueueReceiveFromISR+0x3c>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <xQueueReceiveFromISR+0x3e>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <xQueueReceiveFromISR+0x56>
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e7fe      	b.n	8005b20 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b22:	f001 ffd7 	bl	8007ad4 <vPortValidateInterruptPriority>
	__asm volatile
 8005b26:	f3ef 8211 	mrs	r2, BASEPRI
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	61ba      	str	r2, [r7, #24]
 8005b3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02f      	beq.n	8005bae <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b5c:	f000 f911 	bl	8005d82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	1e5a      	subs	r2, r3, #1
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d112      	bne.n	8005b98 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d016      	beq.n	8005ba8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	3310      	adds	r3, #16
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 feba 	bl	80068f8 <xTaskRemoveFromEventList>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e007      	b.n	8005ba8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	b25a      	sxtb	r2, r3
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bac:	e001      	b.n	8005bb2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3738      	adds	r7, #56	; 0x38
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	e7fe      	b.n	8005be6 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005be8:	f001 fe98 	bl	800791c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005bf2:	f001 fec1 	bl	8007978 <vPortExitCritical>

	return uxReturn;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <uxQueueMessagesWaitingFromISR+0x26>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e7fe      	b.n	8005c24 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005c2c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d109      	bne.n	8005c60 <vQueueDelete+0x26>
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	e7fe      	b.n	8005c5e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f95d 	bl	8005f20 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f002 f81d 	bl	8007cb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e001      	b.n	8005ca0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
	}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10d      	bne.n	8005ce8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d14d      	bne.n	8005d70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 f85f 	bl	8006d9c <xTaskPriorityDisinherit>
 8005cde:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	609a      	str	r2, [r3, #8]
 8005ce6:	e043      	b.n	8005d70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d119      	bne.n	8005d22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6858      	ldr	r0, [r3, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	f00f fc54 	bl	80155a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	441a      	add	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d32b      	bcc.n	8005d70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	605a      	str	r2, [r3, #4]
 8005d20:	e026      	b.n	8005d70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	68d8      	ldr	r0, [r3, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	f00f fc3a 	bl	80155a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	425b      	negs	r3, r3
 8005d3c:	441a      	add	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d207      	bcs.n	8005d5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	425b      	negs	r3, r3
 8005d58:	441a      	add	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d105      	bne.n	8005d70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d78:	697b      	ldr	r3, [r7, #20]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d018      	beq.n	8005dc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	441a      	add	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d303      	bcc.n	8005db6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68d9      	ldr	r1, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6838      	ldr	r0, [r7, #0]
 8005dc2:	f00f fbf0 	bl	80155a6 <memcpy>
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005dd6:	f001 fda1 	bl	800791c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de2:	e011      	b.n	8005e08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3324      	adds	r3, #36	; 0x24
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fd81 	bl	80068f8 <xTaskRemoveFromEventList>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dfc:	f000 fe54 	bl	8006aa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dce9      	bgt.n	8005de4 <prvUnlockQueue+0x16>
 8005e10:	e000      	b.n	8005e14 <prvUnlockQueue+0x46>
					break;
 8005e12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	22ff      	movs	r2, #255	; 0xff
 8005e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e1c:	f001 fdac 	bl	8007978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e20:	f001 fd7c 	bl	800791c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e2c:	e011      	b.n	8005e52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d012      	beq.n	8005e5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3310      	adds	r3, #16
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fd5c 	bl	80068f8 <xTaskRemoveFromEventList>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e46:	f000 fe2f 	bl	8006aa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e4a:	7bbb      	ldrb	r3, [r7, #14]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dce9      	bgt.n	8005e2e <prvUnlockQueue+0x60>
 8005e5a:	e000      	b.n	8005e5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	22ff      	movs	r2, #255	; 0xff
 8005e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e66:	f001 fd87 	bl	8007978 <vPortExitCritical>
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e7a:	f001 fd4f 	bl	800791c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d102      	bne.n	8005e8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e86:	2301      	movs	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e001      	b.n	8005e90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e90:	f001 fd72 	bl	8007978 <vPortExitCritical>

	return xReturn;
 8005e94:	68fb      	ldr	r3, [r7, #12]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ea6:	f001 fd39 	bl	800791c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d102      	bne.n	8005ebc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e001      	b.n	8005ec0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ec0:	f001 fd5a 	bl	8007978 <vPortExitCritical>

	return xReturn;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	e014      	b.n	8005f0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ee0:	4a0e      	ldr	r2, [pc, #56]	; (8005f1c <vQueueAddToRegistry+0x4c>)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005eec:	490b      	ldr	r1, [pc, #44]	; (8005f1c <vQueueAddToRegistry+0x4c>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <vQueueAddToRegistry+0x4c>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4413      	add	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f02:	e005      	b.n	8005f10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b07      	cmp	r3, #7
 8005f0e:	d9e7      	bls.n	8005ee0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20007efc 	.word	0x20007efc

08005f20 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e016      	b.n	8005f5c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005f2e:	4a10      	ldr	r2, [pc, #64]	; (8005f70 <vQueueUnregisterQueue+0x50>)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d10b      	bne.n	8005f56 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005f3e:	4a0c      	ldr	r2, [pc, #48]	; (8005f70 <vQueueUnregisterQueue+0x50>)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2100      	movs	r1, #0
 8005f44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005f48:	4a09      	ldr	r2, [pc, #36]	; (8005f70 <vQueueUnregisterQueue+0x50>)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	2200      	movs	r2, #0
 8005f52:	605a      	str	r2, [r3, #4]
				break;
 8005f54:	e005      	b.n	8005f62 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b07      	cmp	r3, #7
 8005f60:	d9e5      	bls.n	8005f2e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20007efc 	.word	0x20007efc

08005f74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f84:	f001 fcca 	bl	800791c <vPortEnterCritical>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f8e:	b25b      	sxtb	r3, r3
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d103      	bne.n	8005f9e <vQueueWaitForMessageRestricted+0x2a>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fa4:	b25b      	sxtb	r3, r3
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d103      	bne.n	8005fb4 <vQueueWaitForMessageRestricted+0x40>
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb4:	f001 fce0 	bl	8007978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3324      	adds	r3, #36	; 0x24
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fc6b 	bl	80068a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fce:	6978      	ldr	r0, [r7, #20]
 8005fd0:	f7ff fefd 	bl	8005dce <prvUnlockQueue>
	}
 8005fd4:	bf00      	nop
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08e      	sub	sp, #56	; 0x38
 8005fe0:	af04      	add	r7, sp, #16
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <xTaskCreateStatic+0x28>
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	e7fe      	b.n	8006002 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <xTaskCreateStatic+0x42>
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	e7fe      	b.n	800601c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800601e:	23bc      	movs	r3, #188	; 0xbc
 8006020:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2bbc      	cmp	r3, #188	; 0xbc
 8006026:	d009      	beq.n	800603c <xTaskCreateStatic+0x60>
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	e7fe      	b.n	800603a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800603c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01e      	beq.n	8006082 <xTaskCreateStatic+0xa6>
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01b      	beq.n	8006082 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006052:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	2202      	movs	r2, #2
 8006058:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800605c:	2300      	movs	r3, #0
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	9302      	str	r3, [sp, #8]
 8006064:	f107 0314 	add.w	r3, r7, #20
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f851 	bl	800611c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800607a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800607c:	f000 f8f4 	bl	8006268 <prvAddNewTaskToReadyList>
 8006080:	e001      	b.n	8006086 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006086:	697b      	ldr	r3, [r7, #20]
	}
 8006088:	4618      	mov	r0, r3
 800608a:	3728      	adds	r7, #40	; 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08c      	sub	sp, #48	; 0x30
 8006094:	af04      	add	r7, sp, #16
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 fd41 	bl	8007b2c <pvPortMalloc>
 80060aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060b2:	20bc      	movs	r0, #188	; 0xbc
 80060b4:	f001 fd3a 	bl	8007b2c <pvPortMalloc>
 80060b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
 80060c6:	e005      	b.n	80060d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060c8:	6978      	ldr	r0, [r7, #20]
 80060ca:	f001 fdf1 	bl	8007cb0 <vPortFree>
 80060ce:	e001      	b.n	80060d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d017      	beq.n	800610a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060e2:	88fa      	ldrh	r2, [r7, #6]
 80060e4:	2300      	movs	r3, #0
 80060e6:	9303      	str	r3, [sp, #12]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	9302      	str	r3, [sp, #8]
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f80f 	bl	800611c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060fe:	69f8      	ldr	r0, [r7, #28]
 8006100:	f000 f8b2 	bl	8006268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006104:	2301      	movs	r3, #1
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e002      	b.n	8006110 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006110:	69bb      	ldr	r3, [r7, #24]
	}
 8006112:	4618      	mov	r0, r3
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	461a      	mov	r2, r3
 8006134:	21a5      	movs	r1, #165	; 0xa5
 8006136:	f00f fa41 	bl	80155bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006144:	3b01      	subs	r3, #1
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f023 0307 	bic.w	r3, r3, #7
 8006152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <prvInitialiseNewTask+0x56>
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e7fe      	b.n	8006170 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01f      	beq.n	80061b8 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	e012      	b.n	80061a4 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	7819      	ldrb	r1, [r3, #0]
 8006186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	3334      	adds	r3, #52	; 0x34
 800618e:	460a      	mov	r2, r1
 8006190:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d006      	beq.n	80061ac <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3301      	adds	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b0f      	cmp	r3, #15
 80061a8:	d9e9      	bls.n	800617e <prvInitialiseNewTask+0x62>
 80061aa:	e000      	b.n	80061ae <prvInitialiseNewTask+0x92>
			{
				break;
 80061ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b6:	e003      	b.n	80061c0 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2b37      	cmp	r3, #55	; 0x37
 80061c4:	d901      	bls.n	80061ca <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061c6:	2337      	movs	r3, #55	; 0x37
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2200      	movs	r2, #0
 80061da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	3304      	adds	r3, #4
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe fd8b 	bl	8004cfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	3318      	adds	r3, #24
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fd86 	bl	8004cfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	2200      	movs	r2, #0
 800620a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	2200      	movs	r2, #0
 8006212:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	3354      	adds	r3, #84	; 0x54
 800621a:	2260      	movs	r2, #96	; 0x60
 800621c:	2100      	movs	r1, #0
 800621e:	4618      	mov	r0, r3
 8006220:	f00f f9cc 	bl	80155bc <memset>
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	4a0d      	ldr	r2, [pc, #52]	; (800625c <prvInitialiseNewTask+0x140>)
 8006228:	659a      	str	r2, [r3, #88]	; 0x58
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	4a0c      	ldr	r2, [pc, #48]	; (8006260 <prvInitialiseNewTask+0x144>)
 800622e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	4a0c      	ldr	r2, [pc, #48]	; (8006264 <prvInitialiseNewTask+0x148>)
 8006234:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	68f9      	ldr	r1, [r7, #12]
 800623a:	69b8      	ldr	r0, [r7, #24]
 800623c:	f001 fa48 	bl	80076d0 <pxPortInitialiseStack>
 8006240:	4602      	mov	r2, r0
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006252:	bf00      	nop
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	08019a98 	.word	0x08019a98
 8006260:	08019ab8 	.word	0x08019ab8
 8006264:	08019a78 	.word	0x08019a78

08006268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006270:	f001 fb54 	bl	800791c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006274:	4b2d      	ldr	r3, [pc, #180]	; (800632c <prvAddNewTaskToReadyList+0xc4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3301      	adds	r3, #1
 800627a:	4a2c      	ldr	r2, [pc, #176]	; (800632c <prvAddNewTaskToReadyList+0xc4>)
 800627c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800627e:	4b2c      	ldr	r3, [pc, #176]	; (8006330 <prvAddNewTaskToReadyList+0xc8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006286:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <prvAddNewTaskToReadyList+0xc8>)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800628c:	4b27      	ldr	r3, [pc, #156]	; (800632c <prvAddNewTaskToReadyList+0xc4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d110      	bne.n	80062b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006294:	f000 fc2c 	bl	8006af0 <prvInitialiseTaskLists>
 8006298:	e00d      	b.n	80062b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800629a:	4b26      	ldr	r3, [pc, #152]	; (8006334 <prvAddNewTaskToReadyList+0xcc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062a2:	4b23      	ldr	r3, [pc, #140]	; (8006330 <prvAddNewTaskToReadyList+0xc8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d802      	bhi.n	80062b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062b0:	4a1f      	ldr	r2, [pc, #124]	; (8006330 <prvAddNewTaskToReadyList+0xc8>)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062b6:	4b20      	ldr	r3, [pc, #128]	; (8006338 <prvAddNewTaskToReadyList+0xd0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <prvAddNewTaskToReadyList+0xd0>)
 80062be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062c0:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <prvAddNewTaskToReadyList+0xd0>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <prvAddNewTaskToReadyList+0xd4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d903      	bls.n	80062dc <prvAddNewTaskToReadyList+0x74>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4a18      	ldr	r2, [pc, #96]	; (800633c <prvAddNewTaskToReadyList+0xd4>)
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4a15      	ldr	r2, [pc, #84]	; (8006340 <prvAddNewTaskToReadyList+0xd8>)
 80062ea:	441a      	add	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe fd0f 	bl	8004d16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062f8:	f001 fb3e 	bl	8007978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <prvAddNewTaskToReadyList+0xcc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00e      	beq.n	8006322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006304:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <prvAddNewTaskToReadyList+0xc8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	429a      	cmp	r2, r3
 8006310:	d207      	bcs.n	8006322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <prvAddNewTaskToReadyList+0xdc>)
 8006314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000d18 	.word	0x20000d18
 8006330:	20000844 	.word	0x20000844
 8006334:	20000d24 	.word	0x20000d24
 8006338:	20000d34 	.word	0x20000d34
 800633c:	20000d20 	.word	0x20000d20
 8006340:	20000848 	.word	0x20000848
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800635a:	4b13      	ldr	r3, [pc, #76]	; (80063a8 <vTaskDelay+0x60>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <vTaskDelay+0x2e>
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	e7fe      	b.n	8006374 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006376:	f000 f889 	bl	800648c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800637a:	2100      	movs	r1, #0
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fe0d 	bl	8006f9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006382:	f000 f891 	bl	80064a8 <xTaskResumeAll>
 8006386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800638e:	4b07      	ldr	r3, [pc, #28]	; (80063ac <vTaskDelay+0x64>)
 8006390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000d40 	.word	0x20000d40
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08a      	sub	sp, #40	; 0x28
 80063b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063be:	463a      	mov	r2, r7
 80063c0:	1d39      	adds	r1, r7, #4
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fc44 	bl	8004c54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	9202      	str	r2, [sp, #8]
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	460a      	mov	r2, r1
 80063de:	4923      	ldr	r1, [pc, #140]	; (800646c <vTaskStartScheduler+0xbc>)
 80063e0:	4823      	ldr	r0, [pc, #140]	; (8006470 <vTaskStartScheduler+0xc0>)
 80063e2:	f7ff fdfb 	bl	8005fdc <xTaskCreateStatic>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b22      	ldr	r3, [pc, #136]	; (8006474 <vTaskStartScheduler+0xc4>)
 80063ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063ec:	4b21      	ldr	r3, [pc, #132]	; (8006474 <vTaskStartScheduler+0xc4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063f4:	2301      	movs	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e001      	b.n	80063fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d102      	bne.n	800640a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006404:	f000 fe1e 	bl	8007044 <xTimerCreateTimerTask>
 8006408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d11a      	bne.n	8006446 <vTaskStartScheduler+0x96>
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <vTaskStartScheduler+0xc8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3354      	adds	r3, #84	; 0x54
 8006428:	4a14      	ldr	r2, [pc, #80]	; (800647c <vTaskStartScheduler+0xcc>)
 800642a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800642c:	4b14      	ldr	r3, [pc, #80]	; (8006480 <vTaskStartScheduler+0xd0>)
 800642e:	f04f 32ff 	mov.w	r2, #4294967295
 8006432:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006434:	4b13      	ldr	r3, [pc, #76]	; (8006484 <vTaskStartScheduler+0xd4>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800643a:	4b13      	ldr	r3, [pc, #76]	; (8006488 <vTaskStartScheduler+0xd8>)
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006440:	f001 f9ce 	bl	80077e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006444:	e00d      	b.n	8006462 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d109      	bne.n	8006462 <vTaskStartScheduler+0xb2>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e7fe      	b.n	8006460 <vTaskStartScheduler+0xb0>
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	0801642c 	.word	0x0801642c
 8006470:	08006ac1 	.word	0x08006ac1
 8006474:	20000d3c 	.word	0x20000d3c
 8006478:	20000844 	.word	0x20000844
 800647c:	20000020 	.word	0x20000020
 8006480:	20000d38 	.word	0x20000d38
 8006484:	20000d24 	.word	0x20000d24
 8006488:	20000d1c 	.word	0x20000d1c

0800648c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <vTaskSuspendAll+0x18>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	4a03      	ldr	r2, [pc, #12]	; (80064a4 <vTaskSuspendAll+0x18>)
 8006498:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800649a:	bf00      	nop
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000d40 	.word	0x20000d40

080064a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064b6:	4b41      	ldr	r3, [pc, #260]	; (80065bc <xTaskResumeAll+0x114>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <xTaskResumeAll+0x2a>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	e7fe      	b.n	80064d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064d2:	f001 fa23 	bl	800791c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064d6:	4b39      	ldr	r3, [pc, #228]	; (80065bc <xTaskResumeAll+0x114>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3b01      	subs	r3, #1
 80064dc:	4a37      	ldr	r2, [pc, #220]	; (80065bc <xTaskResumeAll+0x114>)
 80064de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e0:	4b36      	ldr	r3, [pc, #216]	; (80065bc <xTaskResumeAll+0x114>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d162      	bne.n	80065ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064e8:	4b35      	ldr	r3, [pc, #212]	; (80065c0 <xTaskResumeAll+0x118>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d05e      	beq.n	80065ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064f0:	e02f      	b.n	8006552 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f2:	4b34      	ldr	r3, [pc, #208]	; (80065c4 <xTaskResumeAll+0x11c>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3318      	adds	r3, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fc66 	bl	8004dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3304      	adds	r3, #4
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe fc61 	bl	8004dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	4b2d      	ldr	r3, [pc, #180]	; (80065c8 <xTaskResumeAll+0x120>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d903      	bls.n	8006522 <xTaskResumeAll+0x7a>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	4a2a      	ldr	r2, [pc, #168]	; (80065c8 <xTaskResumeAll+0x120>)
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4a27      	ldr	r2, [pc, #156]	; (80065cc <xTaskResumeAll+0x124>)
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fe fbec 	bl	8004d16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <xTaskResumeAll+0x128>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	429a      	cmp	r2, r3
 800654a:	d302      	bcc.n	8006552 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800654c:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <xTaskResumeAll+0x12c>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006552:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <xTaskResumeAll+0x11c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1cb      	bne.n	80064f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006560:	f000 fb66 	bl	8006c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006564:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <xTaskResumeAll+0x130>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d010      	beq.n	8006592 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006570:	f000 f858 	bl	8006624 <xTaskIncrementTick>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800657a:	4b16      	ldr	r3, [pc, #88]	; (80065d4 <xTaskResumeAll+0x12c>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3b01      	subs	r3, #1
 8006584:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f1      	bne.n	8006570 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800658c:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <xTaskResumeAll+0x130>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006592:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <xTaskResumeAll+0x12c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800659a:	2301      	movs	r3, #1
 800659c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <xTaskResumeAll+0x134>)
 80065a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065ae:	f001 f9e3 	bl	8007978 <vPortExitCritical>

	return xAlreadyYielded;
 80065b2:	68bb      	ldr	r3, [r7, #8]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20000d40 	.word	0x20000d40
 80065c0:	20000d18 	.word	0x20000d18
 80065c4:	20000cd8 	.word	0x20000cd8
 80065c8:	20000d20 	.word	0x20000d20
 80065cc:	20000848 	.word	0x20000848
 80065d0:	20000844 	.word	0x20000844
 80065d4:	20000d2c 	.word	0x20000d2c
 80065d8:	20000d28 	.word	0x20000d28
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <xTaskGetTickCount+0x1c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065ec:	687b      	ldr	r3, [r7, #4]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000d1c 	.word	0x20000d1c

08006600 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006606:	f001 fa65 	bl	8007ad4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800660e:	4b04      	ldr	r3, [pc, #16]	; (8006620 <xTaskGetTickCountFromISR+0x20>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006614:	683b      	ldr	r3, [r7, #0]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000d1c 	.word	0x20000d1c

08006624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800662e:	4b4e      	ldr	r3, [pc, #312]	; (8006768 <xTaskIncrementTick+0x144>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 8088 	bne.w	8006748 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006638:	4b4c      	ldr	r3, [pc, #304]	; (800676c <xTaskIncrementTick+0x148>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3301      	adds	r3, #1
 800663e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006640:	4a4a      	ldr	r2, [pc, #296]	; (800676c <xTaskIncrementTick+0x148>)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d11f      	bne.n	800668c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800664c:	4b48      	ldr	r3, [pc, #288]	; (8006770 <xTaskIncrementTick+0x14c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <xTaskIncrementTick+0x46>
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	e7fe      	b.n	8006668 <xTaskIncrementTick+0x44>
 800666a:	4b41      	ldr	r3, [pc, #260]	; (8006770 <xTaskIncrementTick+0x14c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	4b40      	ldr	r3, [pc, #256]	; (8006774 <xTaskIncrementTick+0x150>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a3e      	ldr	r2, [pc, #248]	; (8006770 <xTaskIncrementTick+0x14c>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	4a3e      	ldr	r2, [pc, #248]	; (8006774 <xTaskIncrementTick+0x150>)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	4b3e      	ldr	r3, [pc, #248]	; (8006778 <xTaskIncrementTick+0x154>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	4a3c      	ldr	r2, [pc, #240]	; (8006778 <xTaskIncrementTick+0x154>)
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	f000 fad2 	bl	8006c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800668c:	4b3b      	ldr	r3, [pc, #236]	; (800677c <xTaskIncrementTick+0x158>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	429a      	cmp	r2, r3
 8006694:	d349      	bcc.n	800672a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006696:	4b36      	ldr	r3, [pc, #216]	; (8006770 <xTaskIncrementTick+0x14c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a0:	4b36      	ldr	r3, [pc, #216]	; (800677c <xTaskIncrementTick+0x158>)
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	601a      	str	r2, [r3, #0]
					break;
 80066a8:	e03f      	b.n	800672a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <xTaskIncrementTick+0x14c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d203      	bcs.n	80066ca <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066c2:	4a2e      	ldr	r2, [pc, #184]	; (800677c <xTaskIncrementTick+0x158>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066c8:	e02f      	b.n	800672a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fb7e 	bl	8004dd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	3318      	adds	r3, #24
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe fb75 	bl	8004dd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ea:	4b25      	ldr	r3, [pc, #148]	; (8006780 <xTaskIncrementTick+0x15c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d903      	bls.n	80066fa <xTaskIncrementTick+0xd6>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	4a22      	ldr	r2, [pc, #136]	; (8006780 <xTaskIncrementTick+0x15c>)
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4a1f      	ldr	r2, [pc, #124]	; (8006784 <xTaskIncrementTick+0x160>)
 8006708:	441a      	add	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	3304      	adds	r3, #4
 800670e:	4619      	mov	r1, r3
 8006710:	4610      	mov	r0, r2
 8006712:	f7fe fb00 	bl	8004d16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671a:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <xTaskIncrementTick+0x164>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	429a      	cmp	r2, r3
 8006722:	d3b8      	bcc.n	8006696 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006724:	2301      	movs	r3, #1
 8006726:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006728:	e7b5      	b.n	8006696 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800672a:	4b17      	ldr	r3, [pc, #92]	; (8006788 <xTaskIncrementTick+0x164>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006730:	4914      	ldr	r1, [pc, #80]	; (8006784 <xTaskIncrementTick+0x160>)
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d907      	bls.n	8006752 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006742:	2301      	movs	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	e004      	b.n	8006752 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <xTaskIncrementTick+0x168>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	4a0f      	ldr	r2, [pc, #60]	; (800678c <xTaskIncrementTick+0x168>)
 8006750:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <xTaskIncrementTick+0x16c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800675a:	2301      	movs	r3, #1
 800675c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800675e:	697b      	ldr	r3, [r7, #20]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000d40 	.word	0x20000d40
 800676c:	20000d1c 	.word	0x20000d1c
 8006770:	20000cd0 	.word	0x20000cd0
 8006774:	20000cd4 	.word	0x20000cd4
 8006778:	20000d30 	.word	0x20000d30
 800677c:	20000d38 	.word	0x20000d38
 8006780:	20000d20 	.word	0x20000d20
 8006784:	20000848 	.word	0x20000848
 8006788:	20000844 	.word	0x20000844
 800678c:	20000d28 	.word	0x20000d28
 8006790:	20000d2c 	.word	0x20000d2c

08006794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800679a:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <vTaskSwitchContext+0xb0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067a2:	4b29      	ldr	r3, [pc, #164]	; (8006848 <vTaskSwitchContext+0xb4>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067a8:	e045      	b.n	8006836 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80067aa:	4b27      	ldr	r3, [pc, #156]	; (8006848 <vTaskSwitchContext+0xb4>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b0:	4b26      	ldr	r3, [pc, #152]	; (800684c <vTaskSwitchContext+0xb8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	e00f      	b.n	80067d8 <vTaskSwitchContext+0x44>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <vTaskSwitchContext+0x3e>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	607b      	str	r3, [r7, #4]
 80067d0:	e7fe      	b.n	80067d0 <vTaskSwitchContext+0x3c>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	491d      	ldr	r1, [pc, #116]	; (8006850 <vTaskSwitchContext+0xbc>)
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0e5      	beq.n	80067b8 <vTaskSwitchContext+0x24>
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4a16      	ldr	r2, [pc, #88]	; (8006850 <vTaskSwitchContext+0xbc>)
 80067f8:	4413      	add	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	3308      	adds	r3, #8
 800680e:	429a      	cmp	r2, r3
 8006810:	d104      	bne.n	800681c <vTaskSwitchContext+0x88>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	605a      	str	r2, [r3, #4]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	4a0c      	ldr	r2, [pc, #48]	; (8006854 <vTaskSwitchContext+0xc0>)
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	4a09      	ldr	r2, [pc, #36]	; (800684c <vTaskSwitchContext+0xb8>)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <vTaskSwitchContext+0xc0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3354      	adds	r3, #84	; 0x54
 8006832:	4a09      	ldr	r2, [pc, #36]	; (8006858 <vTaskSwitchContext+0xc4>)
 8006834:	6013      	str	r3, [r2, #0]
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000d40 	.word	0x20000d40
 8006848:	20000d2c 	.word	0x20000d2c
 800684c:	20000d20 	.word	0x20000d20
 8006850:	20000848 	.word	0x20000848
 8006854:	20000844 	.word	0x20000844
 8006858:	20000020 	.word	0x20000020

0800685c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <vTaskPlaceOnEventList+0x24>
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	e7fe      	b.n	800687e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <vTaskPlaceOnEventList+0x44>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3318      	adds	r3, #24
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7fe fa68 	bl	8004d5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800688e:	2101      	movs	r1, #1
 8006890:	6838      	ldr	r0, [r7, #0]
 8006892:	f000 fb83 	bl	8006f9c <prvAddCurrentTaskToDelayedList>
}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000844 	.word	0x20000844

080068a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <vTaskPlaceOnEventListRestricted+0x26>
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e7fe      	b.n	80068c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <vTaskPlaceOnEventListRestricted+0x50>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3318      	adds	r3, #24
 80068d0:	4619      	mov	r1, r3
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7fe fa1f 	bl	8004d16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295
 80068e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	68b8      	ldr	r0, [r7, #8]
 80068e8:	f000 fb58 	bl	8006f9c <prvAddCurrentTaskToDelayedList>
	}
 80068ec:	bf00      	nop
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000844 	.word	0x20000844

080068f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <xTaskRemoveFromEventList+0x2a>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e7fe      	b.n	8006920 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3318      	adds	r3, #24
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fa52 	bl	8004dd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800692c:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <xTaskRemoveFromEventList+0xac>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11d      	bne.n	8006970 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	3304      	adds	r3, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fa49 	bl	8004dd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <xTaskRemoveFromEventList+0xb0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d903      	bls.n	8006952 <xTaskRemoveFromEventList+0x5a>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <xTaskRemoveFromEventList+0xb0>)
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4a13      	ldr	r2, [pc, #76]	; (80069ac <xTaskRemoveFromEventList+0xb4>)
 8006960:	441a      	add	r2, r3
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f7fe f9d4 	bl	8004d16 <vListInsertEnd>
 800696e:	e005      	b.n	800697c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3318      	adds	r3, #24
 8006974:	4619      	mov	r1, r3
 8006976:	480e      	ldr	r0, [pc, #56]	; (80069b0 <xTaskRemoveFromEventList+0xb8>)
 8006978:	f7fe f9cd 	bl	8004d16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006980:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <xTaskRemoveFromEventList+0xbc>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	429a      	cmp	r2, r3
 8006988:	d905      	bls.n	8006996 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800698a:	2301      	movs	r3, #1
 800698c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800698e:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <xTaskRemoveFromEventList+0xc0>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	e001      	b.n	800699a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800699a:	697b      	ldr	r3, [r7, #20]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000d40 	.word	0x20000d40
 80069a8:	20000d20 	.word	0x20000d20
 80069ac:	20000848 	.word	0x20000848
 80069b0:	20000cd8 	.word	0x20000cd8
 80069b4:	20000844 	.word	0x20000844
 80069b8:	20000d2c 	.word	0x20000d2c

080069bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <vTaskInternalSetTimeOutState+0x24>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <vTaskInternalSetTimeOutState+0x28>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	605a      	str	r2, [r3, #4]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20000d30 	.word	0x20000d30
 80069e4:	20000d1c 	.word	0x20000d1c

080069e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <xTaskCheckForTimeOut+0x24>
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	e7fe      	b.n	8006a0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <xTaskCheckForTimeOut+0x3e>
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e7fe      	b.n	8006a24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006a26:	f000 ff79 	bl	800791c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <xTaskCheckForTimeOut+0xb8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d102      	bne.n	8006a4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	e023      	b.n	8006a92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <xTaskCheckForTimeOut+0xbc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d007      	beq.n	8006a66 <xTaskCheckForTimeOut+0x7e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e015      	b.n	8006a92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d20b      	bcs.n	8006a88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff ff9d 	bl	80069bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	e004      	b.n	8006a92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a92:	f000 ff71 	bl	8007978 <vPortExitCritical>

	return xReturn;
 8006a96:	69fb      	ldr	r3, [r7, #28]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000d1c 	.word	0x20000d1c
 8006aa4:	20000d30 	.word	0x20000d30

08006aa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006aac:	4b03      	ldr	r3, [pc, #12]	; (8006abc <vTaskMissedYield+0x14>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000d2c 	.word	0x20000d2c

08006ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ac8:	f000 f852 	bl	8006b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <prvIdleTask+0x28>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d9f9      	bls.n	8006ac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <prvIdleTask+0x2c>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ae4:	e7f0      	b.n	8006ac8 <prvIdleTask+0x8>
 8006ae6:	bf00      	nop
 8006ae8:	20000848 	.word	0x20000848
 8006aec:	e000ed04 	.word	0xe000ed04

08006af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006af6:	2300      	movs	r3, #0
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	e00c      	b.n	8006b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4a12      	ldr	r2, [pc, #72]	; (8006b50 <prvInitialiseTaskLists+0x60>)
 8006b08:	4413      	add	r3, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe f8d6 	bl	8004cbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3301      	adds	r3, #1
 8006b14:	607b      	str	r3, [r7, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b37      	cmp	r3, #55	; 0x37
 8006b1a:	d9ef      	bls.n	8006afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b1c:	480d      	ldr	r0, [pc, #52]	; (8006b54 <prvInitialiseTaskLists+0x64>)
 8006b1e:	f7fe f8cd 	bl	8004cbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b22:	480d      	ldr	r0, [pc, #52]	; (8006b58 <prvInitialiseTaskLists+0x68>)
 8006b24:	f7fe f8ca 	bl	8004cbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b28:	480c      	ldr	r0, [pc, #48]	; (8006b5c <prvInitialiseTaskLists+0x6c>)
 8006b2a:	f7fe f8c7 	bl	8004cbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b2e:	480c      	ldr	r0, [pc, #48]	; (8006b60 <prvInitialiseTaskLists+0x70>)
 8006b30:	f7fe f8c4 	bl	8004cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b34:	480b      	ldr	r0, [pc, #44]	; (8006b64 <prvInitialiseTaskLists+0x74>)
 8006b36:	f7fe f8c1 	bl	8004cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <prvInitialiseTaskLists+0x78>)
 8006b3c:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <prvInitialiseTaskLists+0x64>)
 8006b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b40:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <prvInitialiseTaskLists+0x7c>)
 8006b42:	4a05      	ldr	r2, [pc, #20]	; (8006b58 <prvInitialiseTaskLists+0x68>)
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000848 	.word	0x20000848
 8006b54:	20000ca8 	.word	0x20000ca8
 8006b58:	20000cbc 	.word	0x20000cbc
 8006b5c:	20000cd8 	.word	0x20000cd8
 8006b60:	20000cec 	.word	0x20000cec
 8006b64:	20000d04 	.word	0x20000d04
 8006b68:	20000cd0 	.word	0x20000cd0
 8006b6c:	20000cd4 	.word	0x20000cd4

08006b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b76:	e019      	b.n	8006bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b78:	f000 fed0 	bl	800791c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <prvCheckTasksWaitingTermination+0x4c>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe f921 	bl	8004dd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <prvCheckTasksWaitingTermination+0x50>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <prvCheckTasksWaitingTermination+0x50>)
 8006b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <prvCheckTasksWaitingTermination+0x54>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <prvCheckTasksWaitingTermination+0x54>)
 8006ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ba2:	f000 fee9 	bl	8007978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f80e 	bl	8006bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <prvCheckTasksWaitingTermination+0x54>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e1      	bne.n	8006b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000cec 	.word	0x20000cec
 8006bc0:	20000d18 	.word	0x20000d18
 8006bc4:	20000d00 	.word	0x20000d00

08006bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3354      	adds	r3, #84	; 0x54
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f00e fdad 	bl	8015734 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 f861 	bl	8007cb0 <vPortFree>
				vPortFree( pxTCB );
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 f85e 	bl	8007cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bf4:	e017      	b.n	8006c26 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d103      	bne.n	8006c08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 f855 	bl	8007cb0 <vPortFree>
	}
 8006c06:	e00e      	b.n	8006c26 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d009      	beq.n	8006c26 <prvDeleteTCB+0x5e>
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e7fe      	b.n	8006c24 <prvDeleteTCB+0x5c>
	}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <prvResetNextTaskUnblockTime+0x38>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <prvResetNextTaskUnblockTime+0x3c>)
 8006c42:	f04f 32ff 	mov.w	r2, #4294967295
 8006c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c48:	e008      	b.n	8006c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4a:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <prvResetNextTaskUnblockTime+0x38>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <prvResetNextTaskUnblockTime+0x3c>)
 8006c5a:	6013      	str	r3, [r2, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	20000cd0 	.word	0x20000cd0
 8006c6c:	20000d38 	.word	0x20000d38

08006c70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <xTaskGetCurrentTaskHandle+0x1c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c7c:	687b      	ldr	r3, [r7, #4]
	}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000844 	.word	0x20000844

08006c90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c96:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <xTaskGetSchedulerState+0x34>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d102      	bne.n	8006ca4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	607b      	str	r3, [r7, #4]
 8006ca2:	e008      	b.n	8006cb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca4:	4b08      	ldr	r3, [pc, #32]	; (8006cc8 <xTaskGetSchedulerState+0x38>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cac:	2302      	movs	r3, #2
 8006cae:	607b      	str	r3, [r7, #4]
 8006cb0:	e001      	b.n	8006cb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cb6:	687b      	ldr	r3, [r7, #4]
	}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	20000d24 	.word	0x20000d24
 8006cc8:	20000d40 	.word	0x20000d40

08006ccc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d051      	beq.n	8006d86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce6:	4b2a      	ldr	r3, [pc, #168]	; (8006d90 <xTaskPriorityInherit+0xc4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d241      	bcs.n	8006d74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	db06      	blt.n	8006d06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf8:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <xTaskPriorityInherit+0xc4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6959      	ldr	r1, [r3, #20]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <xTaskPriorityInherit+0xc8>)
 8006d18:	4413      	add	r3, r2
 8006d1a:	4299      	cmp	r1, r3
 8006d1c:	d122      	bne.n	8006d64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe f854 	bl	8004dd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d28:	4b19      	ldr	r3, [pc, #100]	; (8006d90 <xTaskPriorityInherit+0xc4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <xTaskPriorityInherit+0xcc>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d903      	bls.n	8006d46 <xTaskPriorityInherit+0x7a>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	4a15      	ldr	r2, [pc, #84]	; (8006d98 <xTaskPriorityInherit+0xcc>)
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <xTaskPriorityInherit+0xc8>)
 8006d54:	441a      	add	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f7fd ffda 	bl	8004d16 <vListInsertEnd>
 8006d62:	e004      	b.n	8006d6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <xTaskPriorityInherit+0xc4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e008      	b.n	8006d86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <xTaskPriorityInherit+0xc4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d201      	bcs.n	8006d86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d86:	68fb      	ldr	r3, [r7, #12]
	}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000844 	.word	0x20000844
 8006d94:	20000848 	.word	0x20000848
 8006d98:	20000d20 	.word	0x20000d20

08006d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d054      	beq.n	8006e5c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006db2:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <xTaskPriorityDisinherit+0xcc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d009      	beq.n	8006dd0 <xTaskPriorityDisinherit+0x34>
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e7fe      	b.n	8006dce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <xTaskPriorityDisinherit+0x50>
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	e7fe      	b.n	8006dea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df0:	1e5a      	subs	r2, r3, #1
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d02c      	beq.n	8006e5c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d128      	bne.n	8006e5c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fd ffde 	bl	8004dd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <xTaskPriorityDisinherit+0xd0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d903      	bls.n	8006e3c <xTaskPriorityDisinherit+0xa0>
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <xTaskPriorityDisinherit+0xd0>)
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <xTaskPriorityDisinherit+0xd4>)
 8006e4a:	441a      	add	r2, r3
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f7fd ff5f 	bl	8004d16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e5c:	697b      	ldr	r3, [r7, #20]
	}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000844 	.word	0x20000844
 8006e6c:	20000d20 	.word	0x20000d20
 8006e70:	20000848 	.word	0x20000848

08006e74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d068      	beq.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e7fe      	b.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d902      	bls.n	8006eb8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	e002      	b.n	8006ebe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d04a      	beq.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d145      	bne.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ed2:	4b25      	ldr	r3, [pc, #148]	; (8006f68 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d109      	bne.n	8006ef0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	e7fe      	b.n	8006eee <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	db04      	blt.n	8006f0e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	6959      	ldr	r1, [r3, #20]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006f1e:	4413      	add	r3, r2
 8006f20:	4299      	cmp	r1, r3
 8006f22:	d11c      	bne.n	8006f5e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd ff51 	bl	8004dd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d903      	bls.n	8006f42 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4a07      	ldr	r2, [pc, #28]	; (8006f6c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006f50:	441a      	add	r2, r3
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7fd fedc 	bl	8004d16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f5e:	bf00      	nop
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000844 	.word	0x20000844
 8006f6c:	20000848 	.word	0x20000848
 8006f70:	20000d20 	.word	0x20000d20

08006f74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f78:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f86:	3201      	adds	r2, #1
 8006f88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006f8a:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
	}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	20000844 	.word	0x20000844

08006f9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fa6:	4b21      	ldr	r3, [pc, #132]	; (800702c <prvAddCurrentTaskToDelayedList+0x90>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fd ff0c 	bl	8004dd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d10a      	bne.n	8006fd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4819      	ldr	r0, [pc, #100]	; (8007034 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fd0:	f7fd fea1 	bl	8004d16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fd4:	e026      	b.n	8007024 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d209      	bcs.n	8007002 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fee:	4b12      	ldr	r3, [pc, #72]	; (8007038 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f7fd feaf 	bl	8004d5e <vListInsert>
}
 8007000:	e010      	b.n	8007024 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007002:	4b0e      	ldr	r3, [pc, #56]	; (800703c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fd fea5 	bl	8004d5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	429a      	cmp	r2, r3
 800701c:	d202      	bcs.n	8007024 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800701e:	4a08      	ldr	r2, [pc, #32]	; (8007040 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6013      	str	r3, [r2, #0]
}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000d1c 	.word	0x20000d1c
 8007030:	20000844 	.word	0x20000844
 8007034:	20000d04 	.word	0x20000d04
 8007038:	20000cd4 	.word	0x20000cd4
 800703c:	20000cd0 	.word	0x20000cd0
 8007040:	20000d38 	.word	0x20000d38

08007044 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	; 0x28
 8007048:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800704e:	f000 faff 	bl	8007650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007052:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <xTimerCreateTimerTask+0x80>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d021      	beq.n	800709e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007062:	1d3a      	adds	r2, r7, #4
 8007064:	f107 0108 	add.w	r1, r7, #8
 8007068:	f107 030c 	add.w	r3, r7, #12
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd fe0b 	bl	8004c88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	9202      	str	r2, [sp, #8]
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	2302      	movs	r3, #2
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	460a      	mov	r2, r1
 8007084:	4910      	ldr	r1, [pc, #64]	; (80070c8 <xTimerCreateTimerTask+0x84>)
 8007086:	4811      	ldr	r0, [pc, #68]	; (80070cc <xTimerCreateTimerTask+0x88>)
 8007088:	f7fe ffa8 	bl	8005fdc <xTaskCreateStatic>
 800708c:	4602      	mov	r2, r0
 800708e:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <xTimerCreateTimerTask+0x8c>)
 8007090:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007092:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <xTimerCreateTimerTask+0x8c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800709a:	2301      	movs	r3, #1
 800709c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <xTimerCreateTimerTask+0x74>
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	e7fe      	b.n	80070b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80070b8:	697b      	ldr	r3, [r7, #20]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000d74 	.word	0x20000d74
 80070c8:	08016434 	.word	0x08016434
 80070cc:	08007205 	.word	0x08007205
 80070d0:	20000d78 	.word	0x20000d78

080070d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d109      	bne.n	8007100 <xTimerGenericCommand+0x2c>
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	623b      	str	r3, [r7, #32]
 80070fe:	e7fe      	b.n	80070fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007100:	4b19      	ldr	r3, [pc, #100]	; (8007168 <xTimerGenericCommand+0x94>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02a      	beq.n	800715e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b05      	cmp	r3, #5
 8007118:	dc18      	bgt.n	800714c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800711a:	f7ff fdb9 	bl	8006c90 <xTaskGetSchedulerState>
 800711e:	4603      	mov	r3, r0
 8007120:	2b02      	cmp	r3, #2
 8007122:	d109      	bne.n	8007138 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007124:	4b10      	ldr	r3, [pc, #64]	; (8007168 <xTimerGenericCommand+0x94>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	f107 0110 	add.w	r1, r7, #16
 800712c:	2300      	movs	r3, #0
 800712e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007130:	f7fe f8d0 	bl	80052d4 <xQueueGenericSend>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24
 8007136:	e012      	b.n	800715e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007138:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <xTimerGenericCommand+0x94>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	f107 0110 	add.w	r1, r7, #16
 8007140:	2300      	movs	r3, #0
 8007142:	2200      	movs	r2, #0
 8007144:	f7fe f8c6 	bl	80052d4 <xQueueGenericSend>
 8007148:	6278      	str	r0, [r7, #36]	; 0x24
 800714a:	e008      	b.n	800715e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <xTimerGenericCommand+0x94>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	f107 0110 	add.w	r1, r7, #16
 8007154:	2300      	movs	r3, #0
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	f7fe f9b6 	bl	80054c8 <xQueueGenericSendFromISR>
 800715c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007160:	4618      	mov	r0, r3
 8007162:	3728      	adds	r7, #40	; 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000d74 	.word	0x20000d74

0800716c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007176:	4b22      	ldr	r3, [pc, #136]	; (8007200 <prvProcessExpiredTimer+0x94>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd fe23 	bl	8004dd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d021      	beq.n	80071dc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	699a      	ldr	r2, [r3, #24]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	18d1      	adds	r1, r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	6978      	ldr	r0, [r7, #20]
 80071a6:	f000 f8d1 	bl	800734c <prvInsertTimerInActiveList>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01e      	beq.n	80071ee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071b0:	2300      	movs	r3, #0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	2100      	movs	r1, #0
 80071ba:	6978      	ldr	r0, [r7, #20]
 80071bc:	f7ff ff8a 	bl	80070d4 <xTimerGenericCommand>
 80071c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d112      	bne.n	80071ee <prvProcessExpiredTimer+0x82>
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	e7fe      	b.n	80071da <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e2:	f023 0301 	bic.w	r3, r3, #1
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	6978      	ldr	r0, [r7, #20]
 80071f4:	4798      	blx	r3
}
 80071f6:	bf00      	nop
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000d6c 	.word	0x20000d6c

08007204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800720c:	f107 0308 	add.w	r3, r7, #8
 8007210:	4618      	mov	r0, r3
 8007212:	f000 f857 	bl	80072c4 <prvGetNextExpireTime>
 8007216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f803 	bl	8007228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007222:	f000 f8d5 	bl	80073d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007226:	e7f1      	b.n	800720c <prvTimerTask+0x8>

08007228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007232:	f7ff f92b 	bl	800648c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f866 	bl	800730c <prvSampleTimeNow>
 8007240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d130      	bne.n	80072aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <prvProcessTimerOrBlockTask+0x3c>
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	429a      	cmp	r2, r3
 8007254:	d806      	bhi.n	8007264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007256:	f7ff f927 	bl	80064a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff ff85 	bl	800716c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007262:	e024      	b.n	80072ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <prvProcessTimerOrBlockTask+0x90>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <prvProcessTimerOrBlockTask+0x50>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <prvProcessTimerOrBlockTask+0x52>
 8007278:	2300      	movs	r3, #0
 800727a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800727c:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <prvProcessTimerOrBlockTask+0x94>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	4619      	mov	r1, r3
 800728a:	f7fe fe73 	bl	8005f74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800728e:	f7ff f90b 	bl	80064a8 <xTaskResumeAll>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007298:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <prvProcessTimerOrBlockTask+0x98>)
 800729a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	f3bf 8f6f 	isb	sy
}
 80072a8:	e001      	b.n	80072ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072aa:	f7ff f8fd 	bl	80064a8 <xTaskResumeAll>
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000d70 	.word	0x20000d70
 80072bc:	20000d74 	.word	0x20000d74
 80072c0:	e000ed04 	.word	0xe000ed04

080072c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <prvGetNextExpireTime+0x44>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <prvGetNextExpireTime+0x16>
 80072d6:	2201      	movs	r2, #1
 80072d8:	e000      	b.n	80072dc <prvGetNextExpireTime+0x18>
 80072da:	2200      	movs	r2, #0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d105      	bne.n	80072f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <prvGetNextExpireTime+0x44>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	e001      	b.n	80072f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000d6c 	.word	0x20000d6c

0800730c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007314:	f7ff f964 	bl	80065e0 <xTaskGetTickCount>
 8007318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <prvSampleTimeNow+0x3c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	429a      	cmp	r2, r3
 8007322:	d205      	bcs.n	8007330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007324:	f000 f930 	bl	8007588 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	e002      	b.n	8007336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007336:	4a04      	ldr	r2, [pc, #16]	; (8007348 <prvSampleTimeNow+0x3c>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000d7c 	.word	0x20000d7c

0800734c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	429a      	cmp	r2, r3
 8007370:	d812      	bhi.n	8007398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	1ad2      	subs	r2, r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e01b      	b.n	80073be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007386:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <prvInsertTimerInActiveList+0x7c>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3304      	adds	r3, #4
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f7fd fce4 	bl	8004d5e <vListInsert>
 8007396:	e012      	b.n	80073be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d206      	bcs.n	80073ae <prvInsertTimerInActiveList+0x62>
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d302      	bcc.n	80073ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	e007      	b.n	80073be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <prvInsertTimerInActiveList+0x80>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7fd fcd0 	bl	8004d5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073be:	697b      	ldr	r3, [r7, #20]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000d70 	.word	0x20000d70
 80073cc:	20000d6c 	.word	0x20000d6c

080073d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08e      	sub	sp, #56	; 0x38
 80073d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073d6:	e0c6      	b.n	8007566 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da17      	bge.n	800740e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073de:	1d3b      	adds	r3, r7, #4
 80073e0:	3304      	adds	r3, #4
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <prvProcessReceivedCommands+0x2e>
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	e7fe      	b.n	80073fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007404:	6850      	ldr	r0, [r2, #4]
 8007406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007408:	6892      	ldr	r2, [r2, #8]
 800740a:	4611      	mov	r1, r2
 800740c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f2c0 80a7 	blt.w	8007564 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	3304      	adds	r3, #4
 8007426:	4618      	mov	r0, r3
 8007428:	f7fd fcd2 	bl	8004dd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800742c:	463b      	mov	r3, r7
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ff6c 	bl	800730c <prvSampleTimeNow>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b09      	cmp	r3, #9
 800743a:	f200 8094 	bhi.w	8007566 <prvProcessReceivedCommands+0x196>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <prvProcessReceivedCommands+0x74>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	0800746d 	.word	0x0800746d
 8007448:	0800746d 	.word	0x0800746d
 800744c:	0800746d 	.word	0x0800746d
 8007450:	080074df 	.word	0x080074df
 8007454:	080074f3 	.word	0x080074f3
 8007458:	0800753b 	.word	0x0800753b
 800745c:	0800746d 	.word	0x0800746d
 8007460:	0800746d 	.word	0x0800746d
 8007464:	080074df 	.word	0x080074df
 8007468:	080074f3 	.word	0x080074f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	b2da      	uxtb	r2, r3
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	18d1      	adds	r1, r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748c:	f7ff ff5e 	bl	800734c <prvInsertTimerInActiveList>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d067      	beq.n	8007566 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800749c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d05c      	beq.n	8007566 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	441a      	add	r2, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074be:	f7ff fe09 	bl	80070d4 <xTimerGenericCommand>
 80074c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d14d      	bne.n	8007566 <prvProcessReceivedCommands+0x196>
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e7fe      	b.n	80074dc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074f0:	e039      	b.n	8007566 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <prvProcessReceivedCommands+0x156>
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e7fe      	b.n	8007524 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	18d1      	adds	r1, r2, r3
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007534:	f7ff ff0a 	bl	800734c <prvInsertTimerInActiveList>
					break;
 8007538:	e015      	b.n	8007566 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754a:	f000 fbb1 	bl	8007cb0 <vPortFree>
 800754e:	e00a      	b.n	8007566 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007562:	e000      	b.n	8007566 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007564:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007566:	4b07      	ldr	r3, [pc, #28]	; (8007584 <prvProcessReceivedCommands+0x1b4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	1d39      	adds	r1, r7, #4
 800756c:	2200      	movs	r2, #0
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe f8c8 	bl	8005704 <xQueueReceive>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	f47f af2e 	bne.w	80073d8 <prvProcessReceivedCommands+0x8>
	}
}
 800757c:	bf00      	nop
 800757e:	3730      	adds	r7, #48	; 0x30
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000d74 	.word	0x20000d74

08007588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800758e:	e047      	b.n	8007620 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007590:	4b2d      	ldr	r3, [pc, #180]	; (8007648 <prvSwitchTimerLists+0xc0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759a:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <prvSwitchTimerLists+0xc0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fd fc11 	bl	8004dd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02d      	beq.n	8007620 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4413      	add	r3, r2
 80075cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d90e      	bls.n	80075f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075e2:	4b19      	ldr	r3, [pc, #100]	; (8007648 <prvSwitchTimerLists+0xc0>)
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fd fbb6 	bl	8004d5e <vListInsert>
 80075f2:	e015      	b.n	8007620 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075f4:	2300      	movs	r3, #0
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2300      	movs	r3, #0
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	2100      	movs	r1, #0
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fd68 	bl	80070d4 <xTimerGenericCommand>
 8007604:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <prvSwitchTimerLists+0x98>
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	603b      	str	r3, [r7, #0]
 800761e:	e7fe      	b.n	800761e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <prvSwitchTimerLists+0xc0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1b2      	bne.n	8007590 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800762a:	4b07      	ldr	r3, [pc, #28]	; (8007648 <prvSwitchTimerLists+0xc0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007630:	4b06      	ldr	r3, [pc, #24]	; (800764c <prvSwitchTimerLists+0xc4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <prvSwitchTimerLists+0xc0>)
 8007636:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007638:	4a04      	ldr	r2, [pc, #16]	; (800764c <prvSwitchTimerLists+0xc4>)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	6013      	str	r3, [r2, #0]
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000d6c 	.word	0x20000d6c
 800764c:	20000d70 	.word	0x20000d70

08007650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007656:	f000 f961 	bl	800791c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800765a:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <prvCheckForValidListAndQueue+0x60>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d120      	bne.n	80076a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007662:	4814      	ldr	r0, [pc, #80]	; (80076b4 <prvCheckForValidListAndQueue+0x64>)
 8007664:	f7fd fb2a 	bl	8004cbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007668:	4813      	ldr	r0, [pc, #76]	; (80076b8 <prvCheckForValidListAndQueue+0x68>)
 800766a:	f7fd fb27 	bl	8004cbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <prvCheckForValidListAndQueue+0x6c>)
 8007670:	4a10      	ldr	r2, [pc, #64]	; (80076b4 <prvCheckForValidListAndQueue+0x64>)
 8007672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007674:	4b12      	ldr	r3, [pc, #72]	; (80076c0 <prvCheckForValidListAndQueue+0x70>)
 8007676:	4a10      	ldr	r2, [pc, #64]	; (80076b8 <prvCheckForValidListAndQueue+0x68>)
 8007678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800767a:	2300      	movs	r3, #0
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <prvCheckForValidListAndQueue+0x74>)
 8007680:	4a11      	ldr	r2, [pc, #68]	; (80076c8 <prvCheckForValidListAndQueue+0x78>)
 8007682:	2110      	movs	r1, #16
 8007684:	200a      	movs	r0, #10
 8007686:	f7fd fc35 	bl	8004ef4 <xQueueGenericCreateStatic>
 800768a:	4602      	mov	r2, r0
 800768c:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <prvCheckForValidListAndQueue+0x60>)
 800768e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <prvCheckForValidListAndQueue+0x60>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <prvCheckForValidListAndQueue+0x60>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	490b      	ldr	r1, [pc, #44]	; (80076cc <prvCheckForValidListAndQueue+0x7c>)
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fc16 	bl	8005ed0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076a4:	f000 f968 	bl	8007978 <vPortExitCritical>
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000d74 	.word	0x20000d74
 80076b4:	20000d44 	.word	0x20000d44
 80076b8:	20000d58 	.word	0x20000d58
 80076bc:	20000d6c 	.word	0x20000d6c
 80076c0:	20000d70 	.word	0x20000d70
 80076c4:	20000e20 	.word	0x20000e20
 80076c8:	20000d80 	.word	0x20000d80
 80076cc:	0801643c 	.word	0x0801643c

080076d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3b04      	subs	r3, #4
 80076e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f023 0201 	bic.w	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007700:	4a0c      	ldr	r2, [pc, #48]	; (8007734 <pxPortInitialiseStack+0x64>)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3b14      	subs	r3, #20
 800770a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3b04      	subs	r3, #4
 8007716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f06f 0202 	mvn.w	r2, #2
 800771e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3b20      	subs	r3, #32
 8007724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007726:	68fb      	ldr	r3, [r7, #12]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	08007739 	.word	0x08007739

08007738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007742:	4b11      	ldr	r3, [pc, #68]	; (8007788 <prvTaskExitError+0x50>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	d009      	beq.n	8007760 <prvTaskExitError+0x28>
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e7fe      	b.n	800775e <prvTaskExitError+0x26>
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007772:	bf00      	nop
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0fc      	beq.n	8007774 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800777a:	bf00      	nop
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	20000010 	.word	0x20000010
 800778c:	00000000 	.word	0x00000000

08007790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077b8:	4808      	ldr	r0, [pc, #32]	; (80077dc <prvPortStartFirstTask+0x24>)
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f380 8808 	msr	MSP, r0
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8814 	msr	CONTROL, r0
 80077ca:	b662      	cpsie	i
 80077cc:	b661      	cpsie	f
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	df00      	svc	0
 80077d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077da:	bf00      	nop
 80077dc:	e000ed08 	.word	0xe000ed08

080077e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077e6:	4b44      	ldr	r3, [pc, #272]	; (80078f8 <xPortStartScheduler+0x118>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a44      	ldr	r2, [pc, #272]	; (80078fc <xPortStartScheduler+0x11c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d109      	bne.n	8007804 <xPortStartScheduler+0x24>
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	e7fe      	b.n	8007802 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007804:	4b3c      	ldr	r3, [pc, #240]	; (80078f8 <xPortStartScheduler+0x118>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a3d      	ldr	r2, [pc, #244]	; (8007900 <xPortStartScheduler+0x120>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d109      	bne.n	8007822 <xPortStartScheduler+0x42>
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e7fe      	b.n	8007820 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007822:	4b38      	ldr	r3, [pc, #224]	; (8007904 <xPortStartScheduler+0x124>)
 8007824:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	22ff      	movs	r2, #255	; 0xff
 8007832:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	b2db      	uxtb	r3, r3
 8007840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007844:	b2da      	uxtb	r2, r3
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <xPortStartScheduler+0x128>)
 8007848:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800784a:	4b30      	ldr	r3, [pc, #192]	; (800790c <xPortStartScheduler+0x12c>)
 800784c:	2207      	movs	r2, #7
 800784e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007850:	e009      	b.n	8007866 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007852:	4b2e      	ldr	r3, [pc, #184]	; (800790c <xPortStartScheduler+0x12c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3b01      	subs	r3, #1
 8007858:	4a2c      	ldr	r2, [pc, #176]	; (800790c <xPortStartScheduler+0x12c>)
 800785a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	b2db      	uxtb	r3, r3
 8007864:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786e:	2b80      	cmp	r3, #128	; 0x80
 8007870:	d0ef      	beq.n	8007852 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007872:	4b26      	ldr	r3, [pc, #152]	; (800790c <xPortStartScheduler+0x12c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1c3 0307 	rsb	r3, r3, #7
 800787a:	2b04      	cmp	r3, #4
 800787c:	d009      	beq.n	8007892 <xPortStartScheduler+0xb2>
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	e7fe      	b.n	8007890 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007892:	4b1e      	ldr	r3, [pc, #120]	; (800790c <xPortStartScheduler+0x12c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	4a1c      	ldr	r2, [pc, #112]	; (800790c <xPortStartScheduler+0x12c>)
 800789a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <xPortStartScheduler+0x12c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078a4:	4a19      	ldr	r2, [pc, #100]	; (800790c <xPortStartScheduler+0x12c>)
 80078a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <xPortStartScheduler+0x130>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a16      	ldr	r2, [pc, #88]	; (8007910 <xPortStartScheduler+0x130>)
 80078b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <xPortStartScheduler+0x130>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a13      	ldr	r2, [pc, #76]	; (8007910 <xPortStartScheduler+0x130>)
 80078c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078c8:	f000 f8d6 	bl	8007a78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078cc:	4b11      	ldr	r3, [pc, #68]	; (8007914 <xPortStartScheduler+0x134>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078d2:	f000 f8f5 	bl	8007ac0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <xPortStartScheduler+0x138>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a0f      	ldr	r2, [pc, #60]	; (8007918 <xPortStartScheduler+0x138>)
 80078dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078e2:	f7ff ff69 	bl	80077b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078e6:	f7fe ff55 	bl	8006794 <vTaskSwitchContext>
	prvTaskExitError();
 80078ea:	f7ff ff25 	bl	8007738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	e000ed00 	.word	0xe000ed00
 80078fc:	410fc271 	.word	0x410fc271
 8007900:	410fc270 	.word	0x410fc270
 8007904:	e000e400 	.word	0xe000e400
 8007908:	20000e70 	.word	0x20000e70
 800790c:	20000e74 	.word	0x20000e74
 8007910:	e000ed20 	.word	0xe000ed20
 8007914:	20000010 	.word	0x20000010
 8007918:	e000ef34 	.word	0xe000ef34

0800791c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <vPortEnterCritical+0x54>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	4a0d      	ldr	r2, [pc, #52]	; (8007970 <vPortEnterCritical+0x54>)
 800793c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <vPortEnterCritical+0x54>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d10e      	bne.n	8007964 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <vPortEnterCritical+0x58>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <vPortEnterCritical+0x48>
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	e7fe      	b.n	8007962 <vPortEnterCritical+0x46>
	}
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20000010 	.word	0x20000010
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <vPortExitCritical+0x4c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <vPortExitCritical+0x22>
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	e7fe      	b.n	8007998 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800799a:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <vPortExitCritical+0x4c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3b01      	subs	r3, #1
 80079a0:	4a08      	ldr	r2, [pc, #32]	; (80079c4 <vPortExitCritical+0x4c>)
 80079a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079a4:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <vPortExitCritical+0x4c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <vPortExitCritical+0x3e>
 80079ac:	2300      	movs	r3, #0
 80079ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000010 	.word	0x20000010
	...

080079d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <pxCurrentTCBConst>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f01e 0f10 	tst.w	lr, #16
 80079e0:	bf08      	it	eq
 80079e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	6010      	str	r0, [r2, #0]
 80079ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079f4:	f380 8811 	msr	BASEPRI, r0
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f7fe fec8 	bl	8006794 <vTaskSwitchContext>
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f380 8811 	msr	BASEPRI, r0
 8007a0c:	bc09      	pop	{r0, r3}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	f01e 0f10 	tst.w	lr, #16
 8007a1a:	bf08      	it	eq
 8007a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a20:	f380 8809 	msr	PSP, r0
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst>:
 8007a30:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a50:	f7fe fde8 	bl	8006624 <xTaskIncrementTick>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a5a:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <SysTick_Handler+0x3c>)
 8007a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	2300      	movs	r3, #0
 8007a64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <vPortSetupTimerInterrupt+0x34>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <vPortSetupTimerInterrupt+0x38>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <vPortSetupTimerInterrupt+0x3c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	; (8007ab8 <vPortSetupTimerInterrupt+0x40>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	099b      	lsrs	r3, r3, #6
 8007a94:	4a09      	ldr	r2, [pc, #36]	; (8007abc <vPortSetupTimerInterrupt+0x44>)
 8007a96:	3b01      	subs	r3, #1
 8007a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a9a:	4b04      	ldr	r3, [pc, #16]	; (8007aac <vPortSetupTimerInterrupt+0x34>)
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	e000e010 	.word	0xe000e010
 8007ab0:	e000e018 	.word	0xe000e018
 8007ab4:	20000000 	.word	0x20000000
 8007ab8:	10624dd3 	.word	0x10624dd3
 8007abc:	e000e014 	.word	0xe000e014

08007ac0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ac0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ad0 <vPortEnableVFP+0x10>
 8007ac4:	6801      	ldr	r1, [r0, #0]
 8007ac6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007aca:	6001      	str	r1, [r0, #0]
 8007acc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ace:	bf00      	nop
 8007ad0:	e000ed88 	.word	0xe000ed88

08007ad4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ada:	f3ef 8305 	mrs	r3, IPSR
 8007ade:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b0f      	cmp	r3, #15
 8007ae4:	d904      	bls.n	8007af0 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ae6:	4a0e      	ldr	r2, [pc, #56]	; (8007b20 <vPortValidateInterruptPriority+0x4c>)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	72fb      	strb	r3, [r7, #11]
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007af0:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <vPortValidateInterruptPriority+0x50>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <vPortValidateInterruptPriority+0x54>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d909      	bls.n	8007b14 <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	e7fe      	b.n	8007b12 <vPortValidateInterruptPriority+0x3e>
	}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	e000e3f0 	.word	0xe000e3f0
 8007b24:	e000ed0c 	.word	0xe000ed0c
 8007b28:	20000e74 	.word	0x20000e74

08007b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b38:	f7fe fca8 	bl	800648c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b3c:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <pvPortMalloc+0x170>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b44:	f000 f90c 	bl	8007d60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b48:	4b55      	ldr	r3, [pc, #340]	; (8007ca0 <pvPortMalloc+0x174>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 808c 	bne.w	8007c6e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01c      	beq.n	8007b96 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d013      	beq.n	8007b96 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	3308      	adds	r3, #8
 8007b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <pvPortMalloc+0x6a>
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e7fe      	b.n	8007b94 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d068      	beq.n	8007c6e <pvPortMalloc+0x142>
 8007b9c:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <pvPortMalloc+0x178>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d863      	bhi.n	8007c6e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ba6:	4b40      	ldr	r3, [pc, #256]	; (8007ca8 <pvPortMalloc+0x17c>)
 8007ba8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007baa:	4b3f      	ldr	r3, [pc, #252]	; (8007ca8 <pvPortMalloc+0x17c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb0:	e004      	b.n	8007bbc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d903      	bls.n	8007bce <pvPortMalloc+0xa2>
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f1      	bne.n	8007bb2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bce:	4b33      	ldr	r3, [pc, #204]	; (8007c9c <pvPortMalloc+0x170>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d04a      	beq.n	8007c6e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2208      	movs	r2, #8
 8007bde:	4413      	add	r3, r2
 8007be0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	1ad2      	subs	r2, r2, r3
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d91e      	bls.n	8007c38 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <pvPortMalloc+0xf4>
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	e7fe      	b.n	8007c1e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c32:	69b8      	ldr	r0, [r7, #24]
 8007c34:	f000 f8f6 	bl	8007e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c38:	4b1a      	ldr	r3, [pc, #104]	; (8007ca4 <pvPortMalloc+0x178>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	4a18      	ldr	r2, [pc, #96]	; (8007ca4 <pvPortMalloc+0x178>)
 8007c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c46:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <pvPortMalloc+0x178>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b18      	ldr	r3, [pc, #96]	; (8007cac <pvPortMalloc+0x180>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d203      	bcs.n	8007c5a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c52:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <pvPortMalloc+0x178>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a15      	ldr	r2, [pc, #84]	; (8007cac <pvPortMalloc+0x180>)
 8007c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <pvPortMalloc+0x174>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c6e:	f7fe fc1b 	bl	80064a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <pvPortMalloc+0x164>
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	e7fe      	b.n	8007c8e <pvPortMalloc+0x162>
	return pvReturn;
 8007c90:	69fb      	ldr	r3, [r7, #28]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3728      	adds	r7, #40	; 0x28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20004a80 	.word	0x20004a80
 8007ca0:	20004a8c 	.word	0x20004a8c
 8007ca4:	20004a84 	.word	0x20004a84
 8007ca8:	20004a78 	.word	0x20004a78
 8007cac:	20004a88 	.word	0x20004a88

08007cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d046      	beq.n	8007d50 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	425b      	negs	r3, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	4b20      	ldr	r3, [pc, #128]	; (8007d58 <vPortFree+0xa8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <vPortFree+0x42>
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e7fe      	b.n	8007cf0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <vPortFree+0x5e>
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	60bb      	str	r3, [r7, #8]
 8007d0c:	e7fe      	b.n	8007d0c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <vPortFree+0xa8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d019      	beq.n	8007d50 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d115      	bne.n	8007d50 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <vPortFree+0xa8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	43db      	mvns	r3, r3
 8007d2e:	401a      	ands	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d34:	f7fe fbaa 	bl	800648c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <vPortFree+0xac>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4413      	add	r3, r2
 8007d42:	4a06      	ldr	r2, [pc, #24]	; (8007d5c <vPortFree+0xac>)
 8007d44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d46:	6938      	ldr	r0, [r7, #16]
 8007d48:	f000 f86c 	bl	8007e24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d4c:	f7fe fbac 	bl	80064a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d50:	bf00      	nop
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20004a8c 	.word	0x20004a8c
 8007d5c:	20004a84 	.word	0x20004a84

08007d60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d66:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d6c:	4b27      	ldr	r3, [pc, #156]	; (8007e0c <prvHeapInit+0xac>)
 8007d6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3307      	adds	r3, #7
 8007d7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0307 	bic.w	r3, r3, #7
 8007d86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	4a1f      	ldr	r2, [pc, #124]	; (8007e0c <prvHeapInit+0xac>)
 8007d90:	4413      	add	r3, r2
 8007d92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <prvHeapInit+0xb0>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d9e:	4b1c      	ldr	r3, [pc, #112]	; (8007e10 <prvHeapInit+0xb0>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4413      	add	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dac:	2208      	movs	r2, #8
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <prvHeapInit+0xb4>)
 8007dc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dc2:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <prvHeapInit+0xb4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <prvHeapInit+0xb4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007de0:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <prvHeapInit+0xb4>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	4a0a      	ldr	r2, [pc, #40]	; (8007e18 <prvHeapInit+0xb8>)
 8007dee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	4a09      	ldr	r2, [pc, #36]	; (8007e1c <prvHeapInit+0xbc>)
 8007df6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007df8:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <prvHeapInit+0xc0>)
 8007dfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dfe:	601a      	str	r2, [r3, #0]
}
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000e78 	.word	0x20000e78
 8007e10:	20004a78 	.word	0x20004a78
 8007e14:	20004a80 	.word	0x20004a80
 8007e18:	20004a88 	.word	0x20004a88
 8007e1c:	20004a84 	.word	0x20004a84
 8007e20:	20004a8c 	.word	0x20004a8c

08007e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e2c:	4b28      	ldr	r3, [pc, #160]	; (8007ed0 <prvInsertBlockIntoFreeList+0xac>)
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e002      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x14>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d8f7      	bhi.n	8007e32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d108      	bne.n	8007e66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	441a      	add	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d118      	bne.n	8007eac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b15      	ldr	r3, [pc, #84]	; (8007ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d00d      	beq.n	8007ea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	e008      	b.n	8007eb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e003      	b.n	8007eb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d002      	beq.n	8007ec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20004a78 	.word	0x20004a78
 8007ed4:	20004a80 	.word	0x20004a80

08007ed8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f002 fa4f 	bl	800a390 <tcpip_send_msg_wait_sem>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <netconn_apimsg+0x2e>
    return apimsg->err;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007f04:	e001      	b.n	8007f0a <netconn_apimsg+0x32>
  }
  return err;
 8007f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08c      	sub	sp, #48	; 0x30
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	603a      	str	r2, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
 8007f20:	460b      	mov	r3, r1
 8007f22:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 f91f 	bl	800916c <netconn_alloc>
 8007f2e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d054      	beq.n	8007fe0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007f36:	79bb      	ldrb	r3, [r7, #6]
 8007f38:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	4619      	mov	r1, r3
 8007f44:	4829      	ldr	r0, [pc, #164]	; (8007fec <netconn_new_with_proto_and_callback+0xd8>)
 8007f46:	f7ff ffc7 	bl	8007ed8 <netconn_apimsg>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007f50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d043      	beq.n	8007fe0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <netconn_new_with_proto_and_callback+0x58>
 8007f60:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <netconn_new_with_proto_and_callback+0xdc>)
 8007f62:	22a3      	movs	r2, #163	; 0xa3
 8007f64:	4923      	ldr	r1, [pc, #140]	; (8007ff4 <netconn_new_with_proto_and_callback+0xe0>)
 8007f66:	4824      	ldr	r0, [pc, #144]	; (8007ff8 <netconn_new_with_proto_and_callback+0xe4>)
 8007f68:	f00d fb8a 	bl	8015680 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	3310      	adds	r3, #16
 8007f70:	4618      	mov	r0, r3
 8007f72:	f00d f8f3 	bl	801515c <sys_mbox_valid>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <netconn_new_with_proto_and_callback+0x74>
 8007f7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <netconn_new_with_proto_and_callback+0xdc>)
 8007f7e:	22a4      	movs	r2, #164	; 0xa4
 8007f80:	491e      	ldr	r1, [pc, #120]	; (8007ffc <netconn_new_with_proto_and_callback+0xe8>)
 8007f82:	481d      	ldr	r0, [pc, #116]	; (8007ff8 <netconn_new_with_proto_and_callback+0xe4>)
 8007f84:	f00d fb7c 	bl	8015680 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	3314      	adds	r3, #20
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f00d f8e5 	bl	801515c <sys_mbox_valid>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <netconn_new_with_proto_and_callback+0x90>
 8007f98:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <netconn_new_with_proto_and_callback+0xdc>)
 8007f9a:	22a6      	movs	r2, #166	; 0xa6
 8007f9c:	4918      	ldr	r1, [pc, #96]	; (8008000 <netconn_new_with_proto_and_callback+0xec>)
 8007f9e:	4816      	ldr	r0, [pc, #88]	; (8007ff8 <netconn_new_with_proto_and_callback+0xe4>)
 8007fa0:	f00d fb6e 	bl	8015680 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f00d f965 	bl	8015278 <sys_sem_valid>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <netconn_new_with_proto_and_callback+0xac>
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <netconn_new_with_proto_and_callback+0xdc>)
 8007fb6:	22a9      	movs	r2, #169	; 0xa9
 8007fb8:	4912      	ldr	r1, [pc, #72]	; (8008004 <netconn_new_with_proto_and_callback+0xf0>)
 8007fba:	480f      	ldr	r0, [pc, #60]	; (8007ff8 <netconn_new_with_proto_and_callback+0xe4>)
 8007fbc:	f00d fb60 	bl	8015680 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	330c      	adds	r3, #12
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f00d f94a 	bl	801525e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	3310      	adds	r3, #16
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f00d f850 	bl	8015074 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fd6:	2007      	movs	r0, #7
 8007fd8:	f002 ff42 	bl	800ae60 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e000      	b.n	8007fe2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3730      	adds	r7, #48	; 0x30
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	08009141 	.word	0x08009141
 8007ff0:	08016444 	.word	0x08016444
 8007ff4:	08016478 	.word	0x08016478
 8007ff8:	0801649c 	.word	0x0801649c
 8007ffc:	080164c4 	.word	0x080164c4
 8008000:	080164dc 	.word	0x080164dc
 8008004:	08016500 	.word	0x08016500

08008008 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08c      	sub	sp, #48	; 0x30
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	e014      	b.n	8008044 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800801e:	2329      	movs	r3, #41	; 0x29
 8008020:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008022:	f107 030c 	add.w	r3, r7, #12
 8008026:	4619      	mov	r1, r3
 8008028:	4808      	ldr	r0, [pc, #32]	; (800804c <netconn_prepare_delete+0x44>)
 800802a:	f7ff ff55 	bl	8007ed8 <netconn_apimsg>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008034:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <netconn_prepare_delete+0x3a>
    return err;
 800803c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008040:	e000      	b.n	8008044 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3730      	adds	r7, #48	; 0x30
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	080096a5 	.word	0x080096a5

08008050 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <netconn_delete+0x12>
    return ERR_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	e00d      	b.n	800807e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff ffd0 	bl	8008008 <netconn_prepare_delete>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800806c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <netconn_delete+0x2a>
    netconn_free(conn);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f8e7 	bl	8009248 <netconn_free>
  }
  return err;
 800807a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08e      	sub	sp, #56	; 0x38
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <netconn_bind+0x28>
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <netconn_bind+0x5c>)
 800809e:	f44f 729c 	mov.w	r2, #312	; 0x138
 80080a2:	4911      	ldr	r1, [pc, #68]	; (80080e8 <netconn_bind+0x60>)
 80080a4:	4811      	ldr	r0, [pc, #68]	; (80080ec <netconn_bind+0x64>)
 80080a6:	f00d faeb 	bl	8015680 <iprintf>
 80080aa:	f06f 030f 	mvn.w	r3, #15
 80080ae:	e015      	b.n	80080dc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80080b6:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <netconn_bind+0x68>)
 80080b8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80080c6:	f107 0314 	add.w	r3, r7, #20
 80080ca:	4619      	mov	r1, r3
 80080cc:	4809      	ldr	r0, [pc, #36]	; (80080f4 <netconn_bind+0x6c>)
 80080ce:	f7ff ff03 	bl	8007ed8 <netconn_apimsg>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80080d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3738      	adds	r7, #56	; 0x38
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	08016444 	.word	0x08016444
 80080e8:	0801657c 	.word	0x0801657c
 80080ec:	0801649c 	.word	0x0801649c
 80080f0:	08019a64 	.word	0x08019a64
 80080f4:	0800986d 	.word	0x0800986d

080080f8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08c      	sub	sp, #48	; 0x30
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d109      	bne.n	800811e <netconn_listen_with_backlog+0x26>
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <netconn_listen_with_backlog+0x48>)
 800810c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008110:	490c      	ldr	r1, [pc, #48]	; (8008144 <netconn_listen_with_backlog+0x4c>)
 8008112:	480d      	ldr	r0, [pc, #52]	; (8008148 <netconn_listen_with_backlog+0x50>)
 8008114:	f00d fab4 	bl	8015680 <iprintf>
 8008118:	f06f 030f 	mvn.w	r3, #15
 800811c:	e00c      	b.n	8008138 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008122:	f107 030c 	add.w	r3, r7, #12
 8008126:	4619      	mov	r1, r3
 8008128:	4808      	ldr	r0, [pc, #32]	; (800814c <netconn_listen_with_backlog+0x54>)
 800812a:	f7ff fed5 	bl	8007ed8 <netconn_apimsg>
 800812e:	4603      	mov	r3, r0
 8008130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008134:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008138:	4618      	mov	r0, r3
 800813a:	3730      	adds	r7, #48	; 0x30
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08016444 	.word	0x08016444
 8008144:	080165fc 	.word	0x080165fc
 8008148:	0801649c 	.word	0x0801649c
 800814c:	080098e5 	.word	0x080098e5

08008150 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d109      	bne.n	8008174 <netconn_accept+0x24>
 8008160:	4b3d      	ldr	r3, [pc, #244]	; (8008258 <netconn_accept+0x108>)
 8008162:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008166:	493d      	ldr	r1, [pc, #244]	; (800825c <netconn_accept+0x10c>)
 8008168:	483d      	ldr	r0, [pc, #244]	; (8008260 <netconn_accept+0x110>)
 800816a:	f00d fa89 	bl	8015680 <iprintf>
 800816e:	f06f 030f 	mvn.w	r3, #15
 8008172:	e06c      	b.n	800824e <netconn_accept+0xfe>
  *new_conn = NULL;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <netconn_accept+0x44>
 8008180:	4b35      	ldr	r3, [pc, #212]	; (8008258 <netconn_accept+0x108>)
 8008182:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008186:	4937      	ldr	r1, [pc, #220]	; (8008264 <netconn_accept+0x114>)
 8008188:	4835      	ldr	r0, [pc, #212]	; (8008260 <netconn_accept+0x110>)
 800818a:	f00d fa79 	bl	8015680 <iprintf>
 800818e:	f06f 030f 	mvn.w	r3, #15
 8008192:	e05c      	b.n	800824e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb6c 	bl	8008872 <netconn_err>
 800819a:	4603      	mov	r3, r0
 800819c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800819e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80081a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081aa:	e050      	b.n	800824e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3314      	adds	r3, #20
 80081b0:	4618      	mov	r0, r3
 80081b2:	f00c ffd3 	bl	801515c <sys_mbox_valid>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <netconn_accept+0x78>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7f1b      	ldrb	r3, [r3, #28]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80081c8:	f06f 030e 	mvn.w	r3, #14
 80081cc:	e03f      	b.n	800824e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7f1b      	ldrb	r3, [r3, #28]
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3314      	adds	r3, #20
 80081de:	f107 020c 	add.w	r2, r7, #12
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f00c ffa2 	bl	801512e <sys_arch_mbox_tryfetch>
 80081ea:	4603      	mov	r3, r0
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f0:	d10a      	bne.n	8008208 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80081f2:	f06f 0306 	mvn.w	r3, #6
 80081f6:	e02a      	b.n	800824e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3314      	adds	r3, #20
 80081fc:	f107 010c 	add.w	r1, r7, #12
 8008200:	2200      	movs	r2, #0
 8008202:	4618      	mov	r0, r3
 8008204:	f00c ff62 	bl	80150cc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <netconn_accept+0xcc>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	2200      	movs	r2, #0
 8008216:	2101      	movs	r1, #1
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f107 0213 	add.w	r2, r7, #19
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fb71 	bl	800890c <lwip_netconn_is_err_msg>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008230:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008234:	e00b      	b.n	800824e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800823c:	f06f 030e 	mvn.w	r3, #14
 8008240:	e005      	b.n	800824e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800824c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	08016444 	.word	0x08016444
 800825c:	0801661c 	.word	0x0801661c
 8008260:	0801649c 	.word	0x0801649c
 8008264:	0801663c 	.word	0x0801663c

08008268 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d109      	bne.n	8008294 <netconn_recv_data+0x2c>
 8008280:	4b58      	ldr	r3, [pc, #352]	; (80083e4 <netconn_recv_data+0x17c>)
 8008282:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008286:	4958      	ldr	r1, [pc, #352]	; (80083e8 <netconn_recv_data+0x180>)
 8008288:	4858      	ldr	r0, [pc, #352]	; (80083ec <netconn_recv_data+0x184>)
 800828a:	f00d f9f9 	bl	8015680 <iprintf>
 800828e:	f06f 030f 	mvn.w	r3, #15
 8008292:	e0a2      	b.n	80083da <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <netconn_recv_data+0x4c>
 80082a0:	4b50      	ldr	r3, [pc, #320]	; (80083e4 <netconn_recv_data+0x17c>)
 80082a2:	f240 224a 	movw	r2, #586	; 0x24a
 80082a6:	4952      	ldr	r1, [pc, #328]	; (80083f0 <netconn_recv_data+0x188>)
 80082a8:	4850      	ldr	r0, [pc, #320]	; (80083ec <netconn_recv_data+0x184>)
 80082aa:	f00d f9e9 	bl	8015680 <iprintf>
 80082ae:	f06f 030f 	mvn.w	r3, #15
 80082b2:	e092      	b.n	80083da <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3310      	adds	r3, #16
 80082b8:	4618      	mov	r0, r3
 80082ba:	f00c ff4f 	bl	801515c <sys_mbox_valid>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10e      	bne.n	80082e2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fad4 	bl	8008872 <netconn_err>
 80082ca:	4603      	mov	r3, r0
 80082cc:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80082ce:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80082d6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80082da:	e07e      	b.n	80083da <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80082dc:	f06f 030a 	mvn.w	r3, #10
 80082e0:	e07b      	b.n	80083da <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	7f1b      	ldrb	r3, [r3, #28]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10f      	bne.n	800830e <netconn_recv_data+0xa6>
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10a      	bne.n	800830e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	7f1b      	ldrb	r3, [r3, #28]
 80082fc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d023      	beq.n	8008356 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3310      	adds	r3, #16
 8008312:	f107 0218 	add.w	r2, r7, #24
 8008316:	4611      	mov	r1, r2
 8008318:	4618      	mov	r0, r3
 800831a:	f00c ff08 	bl	801512e <sys_arch_mbox_tryfetch>
 800831e:	4603      	mov	r3, r0
 8008320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008324:	d11f      	bne.n	8008366 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 faa3 	bl	8008872 <netconn_err>
 800832c:	4603      	mov	r3, r0
 800832e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008330:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008338:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800833c:	e04d      	b.n	80083da <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	7f1b      	ldrb	r3, [r3, #28]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800834a:	f06f 030a 	mvn.w	r3, #10
 800834e:	e044      	b.n	80083da <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008350:	f06f 0306 	mvn.w	r3, #6
 8008354:	e041      	b.n	80083da <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3310      	adds	r3, #16
 800835a:	f107 0118 	add.w	r1, r7, #24
 800835e:	2200      	movs	r2, #0
 8008360:	4618      	mov	r0, r3
 8008362:	f00c feb3 	bl	80150cc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800836e:	2b10      	cmp	r3, #16
 8008370:	d117      	bne.n	80083a2 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f107 0217 	add.w	r2, r7, #23
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fac6 	bl	800890c <lwip_netconn_is_err_msg>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800838a:	f113 0f0f 	cmn.w	r3, #15
 800838e:	d101      	bne.n	8008394 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e022      	b.n	80083da <netconn_recv_data+0x172>
      }
      return err;
 8008394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008398:	e01f      	b.n	80083da <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	891b      	ldrh	r3, [r3, #8]
 800839e:	83fb      	strh	r3, [r7, #30]
 80083a0:	e00d      	b.n	80083be <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d106      	bne.n	80083b6 <netconn_recv_data+0x14e>
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <netconn_recv_data+0x17c>)
 80083aa:	f240 2291 	movw	r2, #657	; 0x291
 80083ae:	4911      	ldr	r1, [pc, #68]	; (80083f4 <netconn_recv_data+0x18c>)
 80083b0:	480e      	ldr	r0, [pc, #56]	; (80083ec <netconn_recv_data+0x184>)
 80083b2:	f00d f965 	bl	8015680 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	891b      	ldrh	r3, [r3, #8]
 80083bc:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <netconn_recv_data+0x16a>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	8bfa      	ldrh	r2, [r7, #30]
 80083cc:	2101      	movs	r1, #1
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	08016444 	.word	0x08016444
 80083e8:	0801665c 	.word	0x0801665c
 80083ec:	0801649c 	.word	0x0801649c
 80083f0:	0801667c 	.word	0x0801667c
 80083f4:	08016698 	.word	0x08016698

080083f8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <netconn_tcp_recvd_msg+0x1e>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008412:	2b10      	cmp	r3, #16
 8008414:	d009      	beq.n	800842a <netconn_tcp_recvd_msg+0x32>
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <netconn_tcp_recvd_msg+0x50>)
 8008418:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800841c:	490b      	ldr	r1, [pc, #44]	; (800844c <netconn_tcp_recvd_msg+0x54>)
 800841e:	480c      	ldr	r0, [pc, #48]	; (8008450 <netconn_tcp_recvd_msg+0x58>)
 8008420:	f00d f92e 	bl	8015680 <iprintf>
 8008424:	f06f 030f 	mvn.w	r3, #15
 8008428:	e00a      	b.n	8008440 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4806      	ldr	r0, [pc, #24]	; (8008454 <netconn_tcp_recvd_msg+0x5c>)
 800843a:	f7ff fd4d 	bl	8007ed8 <netconn_apimsg>
 800843e:	4603      	mov	r3, r0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	08016444 	.word	0x08016444
 800844c:	080166a4 	.word	0x080166a4
 8008450:	0801649c 	.word	0x0801649c
 8008454:	08009a15 	.word	0x08009a15

08008458 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b090      	sub	sp, #64	; 0x40
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3310      	adds	r3, #16
 800846a:	4618      	mov	r0, r3
 800846c:	f00c fe76 	bl	801515c <sys_mbox_valid>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008476:	f06f 030a 	mvn.w	r3, #10
 800847a:	e06d      	b.n	8008558 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	7f1b      	ldrb	r3, [r3, #28]
 8008480:	b25b      	sxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	da07      	bge.n	8008496 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	7f1b      	ldrb	r3, [r3, #28]
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	b2da      	uxtb	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008494:	e039      	b.n	800850a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	461a      	mov	r2, r3
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fee3 	bl	8008268 <netconn_recv_data>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80084a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80084b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084b4:	e050      	b.n	8008558 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10e      	bne.n	80084e4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <netconn_recv_data_tcp+0x7a>
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	891b      	ldrh	r3, [r3, #8]
 80084d0:	e000      	b.n	80084d4 <netconn_recv_data_tcp+0x7c>
 80084d2:	2301      	movs	r3, #1
 80084d4:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80084d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084d8:	f107 0214 	add.w	r2, r7, #20
 80084dc:	4619      	mov	r1, r3
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7ff ff8a 	bl	80083f8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d134      	bne.n	8008554 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	f003 0310 	and.w	r3, r3, #16
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	7f1b      	ldrb	r3, [r3, #28]
 80084f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008502:	f06f 0306 	mvn.w	r3, #6
 8008506:	e027      	b.n	8008558 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008508:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <netconn_recv_data_tcp+0xc6>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2200      	movs	r2, #0
 8008518:	2101      	movs	r1, #1
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10f      	bne.n	8008546 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 f9a3 	bl	8008872 <netconn_err>
 800852c:	4603      	mov	r3, r0
 800852e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008532:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <netconn_recv_data_tcp+0xe8>
          return err;
 800853a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800853e:	e00b      	b.n	8008558 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008540:	f06f 030d 	mvn.w	r3, #13
 8008544:	e008      	b.n	8008558 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008546:	2101      	movs	r1, #1
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 f955 	bl	80087f8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800854e:	f06f 030e 	mvn.w	r3, #14
 8008552:	e001      	b.n	8008558 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008554:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008558:	4618      	mov	r0, r3
 800855a:	3740      	adds	r7, #64	; 0x40
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d109      	bne.n	8008588 <netconn_recv+0x28>
 8008574:	4b32      	ldr	r3, [pc, #200]	; (8008640 <netconn_recv+0xe0>)
 8008576:	f240 3263 	movw	r2, #867	; 0x363
 800857a:	4932      	ldr	r1, [pc, #200]	; (8008644 <netconn_recv+0xe4>)
 800857c:	4832      	ldr	r0, [pc, #200]	; (8008648 <netconn_recv+0xe8>)
 800857e:	f00d f87f 	bl	8015680 <iprintf>
 8008582:	f06f 030f 	mvn.w	r3, #15
 8008586:	e056      	b.n	8008636 <netconn_recv+0xd6>
  *new_buf = NULL;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <netconn_recv+0x48>
 8008594:	4b2a      	ldr	r3, [pc, #168]	; (8008640 <netconn_recv+0xe0>)
 8008596:	f240 3265 	movw	r2, #869	; 0x365
 800859a:	492c      	ldr	r1, [pc, #176]	; (800864c <netconn_recv+0xec>)
 800859c:	482a      	ldr	r0, [pc, #168]	; (8008648 <netconn_recv+0xe8>)
 800859e:	f00d f86f 	bl	8015680 <iprintf>
 80085a2:	f06f 030f 	mvn.w	r3, #15
 80085a6:	e046      	b.n	8008636 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d13a      	bne.n	800862a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80085b8:	2006      	movs	r0, #6
 80085ba:	f002 fbff 	bl	800adbc <memp_malloc>
 80085be:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <netconn_recv+0x6c>
      return ERR_MEM;
 80085c6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ca:	e034      	b.n	8008636 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	2200      	movs	r2, #0
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff ff3f 	bl	8008458 <netconn_recv_data_tcp>
 80085da:	4603      	mov	r3, r0
 80085dc:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80085de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d006      	beq.n	80085f4 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80085e6:	6979      	ldr	r1, [r7, #20]
 80085e8:	2006      	movs	r0, #6
 80085ea:	f002 fc39 	bl	800ae60 <memp_free>
      return err;
 80085ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085f2:	e020      	b.n	8008636 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <netconn_recv+0xa8>
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <netconn_recv+0xe0>)
 80085fc:	f240 3279 	movw	r2, #889	; 0x379
 8008600:	4913      	ldr	r1, [pc, #76]	; (8008650 <netconn_recv+0xf0>)
 8008602:	4811      	ldr	r0, [pc, #68]	; (8008648 <netconn_recv+0xe8>)
 8008604:	f00d f83c 	bl	8015680 <iprintf>

    buf->p = p;
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2200      	movs	r2, #0
 8008618:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2200      	movs	r2, #0
 800861e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	e005      	b.n	8008636 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800862a:	2200      	movs	r2, #0
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff fe1a 	bl	8008268 <netconn_recv_data>
 8008634:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	08016444 	.word	0x08016444
 8008644:	0801665c 	.word	0x0801665c
 8008648:	0801649c 	.word	0x0801649c
 800864c:	0801667c 	.word	0x0801667c
 8008650:	080166f4 	.word	0x080166f4

08008654 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af02      	add	r7, sp, #8
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	f107 0110 	add.w	r1, r7, #16
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	4613      	mov	r3, r2
 8008676:	2201      	movs	r2, #1
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 f805 	bl	8008688 <netconn_write_vectors_partly>
 800867e:	4603      	mov	r3, r0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b092      	sub	sp, #72	; 0x48
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4611      	mov	r1, r2
 8008694:	461a      	mov	r2, r3
 8008696:	460b      	mov	r3, r1
 8008698:	80fb      	strh	r3, [r7, #6]
 800869a:	4613      	mov	r3, r2
 800869c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <netconn_write_vectors_partly+0x30>
 80086a4:	4b4e      	ldr	r3, [pc, #312]	; (80087e0 <netconn_write_vectors_partly+0x158>)
 80086a6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80086aa:	494e      	ldr	r1, [pc, #312]	; (80087e4 <netconn_write_vectors_partly+0x15c>)
 80086ac:	484e      	ldr	r0, [pc, #312]	; (80087e8 <netconn_write_vectors_partly+0x160>)
 80086ae:	f00c ffe7 	bl	8015680 <iprintf>
 80086b2:	f06f 030f 	mvn.w	r3, #15
 80086b6:	e08e      	b.n	80087d6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d009      	beq.n	80086d8 <netconn_write_vectors_partly+0x50>
 80086c4:	4b46      	ldr	r3, [pc, #280]	; (80087e0 <netconn_write_vectors_partly+0x158>)
 80086c6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80086ca:	4948      	ldr	r1, [pc, #288]	; (80087ec <netconn_write_vectors_partly+0x164>)
 80086cc:	4846      	ldr	r0, [pc, #280]	; (80087e8 <netconn_write_vectors_partly+0x160>)
 80086ce:	f00c ffd7 	bl	8015680 <iprintf>
 80086d2:	f06f 0305 	mvn.w	r3, #5
 80086d6:	e07e      	b.n	80087d6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	7f1b      	ldrb	r3, [r3, #28]
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <netconn_write_vectors_partly+0x66>
 80086e4:	797b      	ldrb	r3, [r7, #5]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <netconn_write_vectors_partly+0x6a>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <netconn_write_vectors_partly+0x6c>
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80086f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <netconn_write_vectors_partly+0x84>
 8008700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008702:	2b00      	cmp	r3, #0
 8008704:	d102      	bne.n	800870c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008706:	f06f 0305 	mvn.w	r3, #5
 800870a:	e064      	b.n	80087d6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008710:	2300      	movs	r3, #0
 8008712:	643b      	str	r3, [r7, #64]	; 0x40
 8008714:	e015      	b.n	8008742 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008722:	4413      	add	r3, r2
 8008724:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008732:	429a      	cmp	r2, r3
 8008734:	d202      	bcs.n	800873c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008736:	f06f 0305 	mvn.w	r3, #5
 800873a:	e04c      	b.n	80087d6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800873c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800873e:	3301      	adds	r3, #1
 8008740:	643b      	str	r3, [r7, #64]	; 0x40
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008746:	429a      	cmp	r2, r3
 8008748:	dbe5      	blt.n	8008716 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800874a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	e040      	b.n	80087d6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008756:	2b00      	cmp	r3, #0
 8008758:	da0a      	bge.n	8008770 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800875a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800875c:	2b00      	cmp	r3, #0
 800875e:	d102      	bne.n	8008766 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008760:	f06f 0305 	mvn.w	r3, #5
 8008764:	e037      	b.n	80087d6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008766:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800876a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008780:	797b      	ldrb	r3, [r7, #5]
 8008782:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008788:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	4619      	mov	r1, r3
 8008794:	4816      	ldr	r0, [pc, #88]	; (80087f0 <netconn_write_vectors_partly+0x168>)
 8008796:	f7ff fb9f 	bl	8007ed8 <netconn_apimsg>
 800879a:	4603      	mov	r3, r0
 800879c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80087a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d114      	bne.n	80087d2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80087a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80087ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087b2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80087b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d006      	beq.n	80087d2 <netconn_write_vectors_partly+0x14a>
 80087c4:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <netconn_write_vectors_partly+0x158>)
 80087c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80087ca:	490a      	ldr	r1, [pc, #40]	; (80087f4 <netconn_write_vectors_partly+0x16c>)
 80087cc:	4806      	ldr	r0, [pc, #24]	; (80087e8 <netconn_write_vectors_partly+0x160>)
 80087ce:	f00c ff57 	bl	8015680 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80087d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3748      	adds	r7, #72	; 0x48
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	08016444 	.word	0x08016444
 80087e4:	0801671c 	.word	0x0801671c
 80087e8:	0801649c 	.word	0x0801649c
 80087ec:	08016738 	.word	0x08016738
 80087f0:	08009e19 	.word	0x08009e19
 80087f4:	0801675c 	.word	0x0801675c

080087f8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08c      	sub	sp, #48	; 0x30
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d109      	bne.n	800881e <netconn_close_shutdown+0x26>
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <netconn_close_shutdown+0x50>)
 800880c:	f240 4247 	movw	r2, #1095	; 0x447
 8008810:	490e      	ldr	r1, [pc, #56]	; (800884c <netconn_close_shutdown+0x54>)
 8008812:	480f      	ldr	r0, [pc, #60]	; (8008850 <netconn_close_shutdown+0x58>)
 8008814:	f00c ff34 	bl	8015680 <iprintf>
 8008818:	f06f 030f 	mvn.w	r3, #15
 800881c:	e010      	b.n	8008840 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008826:	2329      	movs	r3, #41	; 0x29
 8008828:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	4619      	mov	r1, r3
 8008830:	4808      	ldr	r0, [pc, #32]	; (8008854 <netconn_close_shutdown+0x5c>)
 8008832:	f7ff fb51 	bl	8007ed8 <netconn_apimsg>
 8008836:	4603      	mov	r3, r0
 8008838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800883c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008840:	4618      	mov	r0, r3
 8008842:	3730      	adds	r7, #48	; 0x30
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	08016444 	.word	0x08016444
 800884c:	08016780 	.word	0x08016780
 8008850:	0801649c 	.word	0x0801649c
 8008854:	08009f31 	.word	0x08009f31

08008858 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008860:	2103      	movs	r1, #3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff ffc8 	bl	80087f8 <netconn_close_shutdown>
 8008868:	4603      	mov	r3, r0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <netconn_err+0x12>
    return ERR_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	e00d      	b.n	80088a0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008884:	f00c fd74 	bl	8015370 <sys_arch_protect>
 8008888:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7a1b      	ldrb	r3, [r3, #8]
 800888e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f00c fd78 	bl	801538c <sys_arch_unprotect>
  return err;
 800889c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80088b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b6:	f113 0f0e 	cmn.w	r3, #14
 80088ba:	d008      	beq.n	80088ce <lwip_netconn_err_to_msg+0x26>
 80088bc:	f113 0f0d 	cmn.w	r3, #13
 80088c0:	d003      	beq.n	80088ca <lwip_netconn_err_to_msg+0x22>
 80088c2:	f113 0f0f 	cmn.w	r3, #15
 80088c6:	d004      	beq.n	80088d2 <lwip_netconn_err_to_msg+0x2a>
 80088c8:	e005      	b.n	80088d6 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80088ca:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <lwip_netconn_err_to_msg+0x4c>)
 80088cc:	e00e      	b.n	80088ec <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80088ce:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <lwip_netconn_err_to_msg+0x50>)
 80088d0:	e00c      	b.n	80088ec <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80088d2:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <lwip_netconn_err_to_msg+0x54>)
 80088d4:	e00a      	b.n	80088ec <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80088d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <lwip_netconn_err_to_msg+0x42>
 80088de:	4b08      	ldr	r3, [pc, #32]	; (8008900 <lwip_netconn_err_to_msg+0x58>)
 80088e0:	227d      	movs	r2, #125	; 0x7d
 80088e2:	4908      	ldr	r1, [pc, #32]	; (8008904 <lwip_netconn_err_to_msg+0x5c>)
 80088e4:	4808      	ldr	r0, [pc, #32]	; (8008908 <lwip_netconn_err_to_msg+0x60>)
 80088e6:	f00c fecb 	bl	8015680 <iprintf>
      return NULL;
 80088ea:	2300      	movs	r3, #0
  }
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	08019950 	.word	0x08019950
 80088f8:	08019951 	.word	0x08019951
 80088fc:	08019952 	.word	0x08019952
 8008900:	0801679c 	.word	0x0801679c
 8008904:	080167d0 	.word	0x080167d0
 8008908:	080167e0 	.word	0x080167e0

0800890c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d105      	bne.n	8008928 <lwip_netconn_is_err_msg+0x1c>
 800891c:	4b12      	ldr	r3, [pc, #72]	; (8008968 <lwip_netconn_is_err_msg+0x5c>)
 800891e:	2285      	movs	r2, #133	; 0x85
 8008920:	4912      	ldr	r1, [pc, #72]	; (800896c <lwip_netconn_is_err_msg+0x60>)
 8008922:	4813      	ldr	r0, [pc, #76]	; (8008970 <lwip_netconn_is_err_msg+0x64>)
 8008924:	f00c feac 	bl	8015680 <iprintf>

  if (msg == &netconn_aborted) {
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a12      	ldr	r2, [pc, #72]	; (8008974 <lwip_netconn_is_err_msg+0x68>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d104      	bne.n	800893a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	22f3      	movs	r2, #243	; 0xf3
 8008934:	701a      	strb	r2, [r3, #0]
    return 1;
 8008936:	2301      	movs	r3, #1
 8008938:	e012      	b.n	8008960 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a0e      	ldr	r2, [pc, #56]	; (8008978 <lwip_netconn_is_err_msg+0x6c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d104      	bne.n	800894c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	22f2      	movs	r2, #242	; 0xf2
 8008946:	701a      	strb	r2, [r3, #0]
    return 1;
 8008948:	2301      	movs	r3, #1
 800894a:	e009      	b.n	8008960 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a0b      	ldr	r2, [pc, #44]	; (800897c <lwip_netconn_is_err_msg+0x70>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d104      	bne.n	800895e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	22f1      	movs	r2, #241	; 0xf1
 8008958:	701a      	strb	r2, [r3, #0]
    return 1;
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	0801679c 	.word	0x0801679c
 800896c:	08016808 	.word	0x08016808
 8008970:	080167e0 	.word	0x080167e0
 8008974:	08019950 	.word	0x08019950
 8008978:	08019951 	.word	0x08019951
 800897c:	08019952 	.word	0x08019952

08008980 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <recv_udp+0x20>
 8008994:	4b34      	ldr	r3, [pc, #208]	; (8008a68 <recv_udp+0xe8>)
 8008996:	22e5      	movs	r2, #229	; 0xe5
 8008998:	4934      	ldr	r1, [pc, #208]	; (8008a6c <recv_udp+0xec>)
 800899a:	4835      	ldr	r0, [pc, #212]	; (8008a70 <recv_udp+0xf0>)
 800899c:	f00c fe70 	bl	8015680 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <recv_udp+0x32>
 80089a6:	4b30      	ldr	r3, [pc, #192]	; (8008a68 <recv_udp+0xe8>)
 80089a8:	22e6      	movs	r2, #230	; 0xe6
 80089aa:	4932      	ldr	r1, [pc, #200]	; (8008a74 <recv_udp+0xf4>)
 80089ac:	4830      	ldr	r0, [pc, #192]	; (8008a70 <recv_udp+0xf0>)
 80089ae:	f00c fe67 	bl	8015680 <iprintf>
  conn = (struct netconn *)arg;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d103      	bne.n	80089c4 <recv_udp+0x44>
    pbuf_free(p);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f003 f8ef 	bl	800bba0 <pbuf_free>
    return;
 80089c2:	e04d      	b.n	8008a60 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d005      	beq.n	80089da <recv_udp+0x5a>
 80089ce:	4b26      	ldr	r3, [pc, #152]	; (8008a68 <recv_udp+0xe8>)
 80089d0:	22ee      	movs	r2, #238	; 0xee
 80089d2:	4929      	ldr	r1, [pc, #164]	; (8008a78 <recv_udp+0xf8>)
 80089d4:	4826      	ldr	r0, [pc, #152]	; (8008a70 <recv_udp+0xf0>)
 80089d6:	f00c fe53 	bl	8015680 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3310      	adds	r3, #16
 80089de:	4618      	mov	r0, r3
 80089e0:	f00c fbbc 	bl	801515c <sys_mbox_valid>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f003 f8d8 	bl	800bba0 <pbuf_free>
    return;
 80089f0:	e036      	b.n	8008a60 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089f2:	2006      	movs	r0, #6
 80089f4:	f002 f9e2 	bl	800adbc <memp_malloc>
 80089f8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d103      	bne.n	8008a08 <recv_udp+0x88>
    pbuf_free(p);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f003 f8cd 	bl	800bba0 <pbuf_free>
    return;
 8008a06:	e02b      	b.n	8008a60 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <recv_udp+0xa0>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	e000      	b.n	8008a22 <recv_udp+0xa2>
 8008a20:	2300      	movs	r3, #0
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a2a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	891b      	ldrh	r3, [r3, #8]
 8008a30:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	3310      	adds	r3, #16
 8008a36:	69b9      	ldr	r1, [r7, #24]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f00c fb2d 	bl	8015098 <sys_mbox_trypost>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <recv_udp+0xcc>
    netbuf_delete(buf);
 8008a44:	69b8      	ldr	r0, [r7, #24]
 8008a46:	f001 faff 	bl	800a048 <netbuf_delete>
    return;
 8008a4a:	e009      	b.n	8008a60 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <recv_udp+0xe0>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	8afa      	ldrh	r2, [r7, #22]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	69f8      	ldr	r0, [r7, #28]
 8008a5e:	4798      	blx	r3
  }
}
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	0801679c 	.word	0x0801679c
 8008a6c:	08016814 	.word	0x08016814
 8008a70:	080167e0 	.word	0x080167e0
 8008a74:	08016838 	.word	0x08016838
 8008a78:	08016858 	.word	0x08016858

08008a7c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <recv_tcp+0x22>
 8008a90:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <recv_tcp+0xf0>)
 8008a92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a96:	4936      	ldr	r1, [pc, #216]	; (8008b70 <recv_tcp+0xf4>)
 8008a98:	4836      	ldr	r0, [pc, #216]	; (8008b74 <recv_tcp+0xf8>)
 8008a9a:	f00c fdf1 	bl	8015680 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d106      	bne.n	8008ab2 <recv_tcp+0x36>
 8008aa4:	4b31      	ldr	r3, [pc, #196]	; (8008b6c <recv_tcp+0xf0>)
 8008aa6:	f240 122d 	movw	r2, #301	; 0x12d
 8008aaa:	4933      	ldr	r1, [pc, #204]	; (8008b78 <recv_tcp+0xfc>)
 8008aac:	4831      	ldr	r0, [pc, #196]	; (8008b74 <recv_tcp+0xf8>)
 8008aae:	f00c fde7 	bl	8015680 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <recv_tcp+0x4c>
 8008aba:	4b2c      	ldr	r3, [pc, #176]	; (8008b6c <recv_tcp+0xf0>)
 8008abc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008ac0:	492e      	ldr	r1, [pc, #184]	; (8008b7c <recv_tcp+0x100>)
 8008ac2:	482c      	ldr	r0, [pc, #176]	; (8008b74 <recv_tcp+0xf8>)
 8008ac4:	f00c fddc 	bl	8015680 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <recv_tcp+0x5c>
    return ERR_VAL;
 8008ad2:	f06f 0305 	mvn.w	r3, #5
 8008ad6:	e045      	b.n	8008b64 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d006      	beq.n	8008af0 <recv_tcp+0x74>
 8008ae2:	4b22      	ldr	r3, [pc, #136]	; (8008b6c <recv_tcp+0xf0>)
 8008ae4:	f240 1235 	movw	r2, #309	; 0x135
 8008ae8:	4925      	ldr	r1, [pc, #148]	; (8008b80 <recv_tcp+0x104>)
 8008aea:	4822      	ldr	r0, [pc, #136]	; (8008b74 <recv_tcp+0xf8>)
 8008aec:	f00c fdc8 	bl	8015680 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	3310      	adds	r3, #16
 8008af4:	4618      	mov	r0, r3
 8008af6:	f00c fb31 	bl	801515c <sys_mbox_valid>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10d      	bne.n	8008b1c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	891b      	ldrh	r3, [r3, #8]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f003 fff5 	bl	800cafc <tcp_recved>
      pbuf_free(p);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f003 f844 	bl	800bba0 <pbuf_free>
    }
    return ERR_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e023      	b.n	8008b64 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <recv_tcp+0xb2>
    msg = p;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	891b      	ldrh	r3, [r3, #8]
 8008b2a:	83fb      	strh	r3, [r7, #30]
 8008b2c:	e003      	b.n	8008b36 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008b2e:	4b15      	ldr	r3, [pc, #84]	; (8008b84 <recv_tcp+0x108>)
 8008b30:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	3310      	adds	r3, #16
 8008b3a:	69b9      	ldr	r1, [r7, #24]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f00c faab 	bl	8015098 <sys_mbox_trypost>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008b48:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4c:	e00a      	b.n	8008b64 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <recv_tcp+0xe6>
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	8bfa      	ldrh	r2, [r7, #30]
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6978      	ldr	r0, [r7, #20]
 8008b60:	4798      	blx	r3
  }

  return ERR_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3720      	adds	r7, #32
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	0801679c 	.word	0x0801679c
 8008b70:	08016878 	.word	0x08016878
 8008b74:	080167e0 	.word	0x080167e0
 8008b78:	0801689c 	.word	0x0801689c
 8008b7c:	080168bc 	.word	0x080168bc
 8008b80:	080168d4 	.word	0x080168d4
 8008b84:	08019952 	.word	0x08019952

08008b88 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d106      	bne.n	8008baa <poll_tcp+0x22>
 8008b9c:	4b29      	ldr	r3, [pc, #164]	; (8008c44 <poll_tcp+0xbc>)
 8008b9e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008ba2:	4929      	ldr	r1, [pc, #164]	; (8008c48 <poll_tcp+0xc0>)
 8008ba4:	4829      	ldr	r0, [pc, #164]	; (8008c4c <poll_tcp+0xc4>)
 8008ba6:	f00c fd6b 	bl	8015680 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d104      	bne.n	8008bbc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 ff63 	bl	8009a80 <lwip_netconn_do_writemore>
 8008bba:	e016      	b.n	8008bea <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d112      	bne.n	8008bea <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <poll_tcp+0x5a>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	7a5b      	ldrb	r3, [r3, #9]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	7a5a      	ldrb	r2, [r3, #9]
 8008bdc:	3a01      	subs	r2, #1
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008be2:	2101      	movs	r1, #1
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 fbf7 	bl	80093d8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	7f1b      	ldrb	r3, [r3, #28]
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d021      	beq.n	8008c3a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d01d      	beq.n	8008c3a <poll_tcp+0xb2>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008c06:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008c0a:	d316      	bcc.n	8008c3a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d810      	bhi.n	8008c3a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	7f1b      	ldrb	r3, [r3, #28]
 8008c1c:	f023 0310 	bic.w	r3, r3, #16
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <poll_tcp+0xb2>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c32:	2200      	movs	r2, #0
 8008c34:	2102      	movs	r1, #2
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	0801679c 	.word	0x0801679c
 8008c48:	080168f4 	.word	0x080168f4
 8008c4c:	080167e0 	.word	0x080167e0

08008c50 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <sent_tcp+0x26>
 8008c68:	4b20      	ldr	r3, [pc, #128]	; (8008cec <sent_tcp+0x9c>)
 8008c6a:	f240 1293 	movw	r2, #403	; 0x193
 8008c6e:	4920      	ldr	r1, [pc, #128]	; (8008cf0 <sent_tcp+0xa0>)
 8008c70:	4820      	ldr	r0, [pc, #128]	; (8008cf4 <sent_tcp+0xa4>)
 8008c72:	f00c fd05 	bl	8015680 <iprintf>

  if (conn) {
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d032      	beq.n	8008ce2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	785b      	ldrb	r3, [r3, #1]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d104      	bne.n	8008c8e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008c84:	2101      	movs	r1, #1
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	f000 fefa 	bl	8009a80 <lwip_netconn_do_writemore>
 8008c8c:	e007      	b.n	8008c9e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d103      	bne.n	8008c9e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008c96:	2101      	movs	r1, #1
 8008c98:	6978      	ldr	r0, [r7, #20]
 8008c9a:	f000 fb9d 	bl	80093d8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01d      	beq.n	8008ce2 <sent_tcp+0x92>
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008cae:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008cb2:	d316      	bcc.n	8008ce2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d810      	bhi.n	8008ce2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	7f1b      	ldrb	r3, [r3, #28]
 8008cc4:	f023 0310 	bic.w	r3, r3, #16
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d005      	beq.n	8008ce2 <sent_tcp+0x92>
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	2102      	movs	r1, #2
 8008cde:	6978      	ldr	r0, [r7, #20]
 8008ce0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	0801679c 	.word	0x0801679c
 8008cf0:	080168f4 	.word	0x080168f4
 8008cf4:	080167e0 	.word	0x080167e0

08008cf8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <err_tcp+0x24>
 8008d0e:	4b5f      	ldr	r3, [pc, #380]	; (8008e8c <err_tcp+0x194>)
 8008d10:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008d14:	495e      	ldr	r1, [pc, #376]	; (8008e90 <err_tcp+0x198>)
 8008d16:	485f      	ldr	r0, [pc, #380]	; (8008e94 <err_tcp+0x19c>)
 8008d18:	f00c fcb2 	bl	8015680 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008d1c:	f00c fb28 	bl	8015370 <sys_arch_protect>
 8008d20:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	2200      	movs	r2, #0
 8008d26:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	7f1b      	ldrb	r3, [r3, #28]
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	785b      	ldrb	r3, [r3, #1]
 8008d40:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	2200      	movs	r2, #0
 8008d46:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008d48:	69b8      	ldr	r0, [r7, #24]
 8008d4a:	f00c fb1f 	bl	801538c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <err_tcp+0x6a>
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2104      	movs	r1, #4
 8008d5e:	69f8      	ldr	r0, [r7, #28]
 8008d60:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <err_tcp+0x7e>
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2100      	movs	r1, #0
 8008d72:	69f8      	ldr	r0, [r7, #28]
 8008d74:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <err_tcp+0x92>
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	2200      	movs	r2, #0
 8008d84:	2102      	movs	r1, #2
 8008d86:	69f8      	ldr	r0, [r7, #28]
 8008d88:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fd8a 	bl	80088a8 <lwip_netconn_err_to_msg>
 8008d94:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	3310      	adds	r3, #16
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f00c f9de 	bl	801515c <sys_mbox_valid>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d005      	beq.n	8008db2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3310      	adds	r3, #16
 8008daa:	6939      	ldr	r1, [r7, #16]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f00c f973 	bl	8015098 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	3314      	adds	r3, #20
 8008db6:	4618      	mov	r0, r3
 8008db8:	f00c f9d0 	bl	801515c <sys_mbox_valid>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d005      	beq.n	8008dce <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	6939      	ldr	r1, [r7, #16]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f00c f965 	bl	8015098 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d005      	beq.n	8008de0 <err_tcp+0xe8>
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d002      	beq.n	8008de0 <err_tcp+0xe8>
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d143      	bne.n	8008e68 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	7f1b      	ldrb	r3, [r3, #28]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	bf14      	ite	ne
 8008dec:	2301      	movne	r3, #1
 8008dee:	2300      	moveq	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	7f1b      	ldrb	r3, [r3, #28]
 8008df8:	f023 0304 	bic.w	r3, r3, #4
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d13b      	bne.n	8008e80 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d106      	bne.n	8008e1e <err_tcp+0x126>
 8008e10:	4b1e      	ldr	r3, [pc, #120]	; (8008e8c <err_tcp+0x194>)
 8008e12:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008e16:	4920      	ldr	r1, [pc, #128]	; (8008e98 <err_tcp+0x1a0>)
 8008e18:	481e      	ldr	r0, [pc, #120]	; (8008e94 <err_tcp+0x19c>)
 8008e1a:	f00c fc31 	bl	8015680 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d104      	bne.n	8008e2e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	711a      	strb	r2, [r3, #4]
 8008e2c:	e003      	b.n	8008e36 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	78fa      	ldrb	r2, [r7, #3]
 8008e34:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008e40:	68b8      	ldr	r0, [r7, #8]
 8008e42:	f00c fa19 	bl	8015278 <sys_sem_valid>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d106      	bne.n	8008e5a <err_tcp+0x162>
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <err_tcp+0x194>)
 8008e4e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008e52:	4912      	ldr	r1, [pc, #72]	; (8008e9c <err_tcp+0x1a4>)
 8008e54:	480f      	ldr	r0, [pc, #60]	; (8008e94 <err_tcp+0x19c>)
 8008e56:	f00c fc13 	bl	8015680 <iprintf>
      conn->current_msg = NULL;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008e60:	68b8      	ldr	r0, [r7, #8]
 8008e62:	f00c f9ef 	bl	8015244 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008e66:	e00b      	b.n	8008e80 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d008      	beq.n	8008e82 <err_tcp+0x18a>
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <err_tcp+0x194>)
 8008e72:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008e76:	490a      	ldr	r1, [pc, #40]	; (8008ea0 <err_tcp+0x1a8>)
 8008e78:	4806      	ldr	r0, [pc, #24]	; (8008e94 <err_tcp+0x19c>)
 8008e7a:	f00c fc01 	bl	8015680 <iprintf>
  }
}
 8008e7e:	e000      	b.n	8008e82 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008e80:	bf00      	nop
}
 8008e82:	bf00      	nop
 8008e84:	3720      	adds	r7, #32
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	0801679c 	.word	0x0801679c
 8008e90:	080168f4 	.word	0x080168f4
 8008e94:	080167e0 	.word	0x080167e0
 8008e98:	08016904 	.word	0x08016904
 8008e9c:	08016920 	.word	0x08016920
 8008ea0:	0801693c 	.word	0x0801693c

08008ea4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f004 fce3 	bl	800d880 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008eba:	490a      	ldr	r1, [pc, #40]	; (8008ee4 <setup_tcp+0x40>)
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f004 fcf1 	bl	800d8a4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008ec2:	4909      	ldr	r1, [pc, #36]	; (8008ee8 <setup_tcp+0x44>)
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f004 fd0f 	bl	800d8e8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008eca:	2202      	movs	r2, #2
 8008ecc:	4907      	ldr	r1, [pc, #28]	; (8008eec <setup_tcp+0x48>)
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f004 fd66 	bl	800d9a0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008ed4:	4906      	ldr	r1, [pc, #24]	; (8008ef0 <setup_tcp+0x4c>)
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f004 fd28 	bl	800d92c <tcp_err>
}
 8008edc:	bf00      	nop
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	08008a7d 	.word	0x08008a7d
 8008ee8:	08008c51 	.word	0x08008c51
 8008eec:	08008b89 	.word	0x08008b89
 8008ef0:	08008cf9 	.word	0x08008cf9

08008ef4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b089      	sub	sp, #36	; 0x24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <accept_function+0x1e>
    return ERR_VAL;
 8008f0c:	f06f 0305 	mvn.w	r3, #5
 8008f10:	e0a1      	b.n	8009056 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	3314      	adds	r3, #20
 8008f16:	4618      	mov	r0, r3
 8008f18:	f00c f920 	bl	801515c <sys_mbox_valid>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008f22:	f06f 0305 	mvn.w	r3, #5
 8008f26:	e096      	b.n	8009056 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d11b      	bne.n	8008f66 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f103 0414 	add.w	r4, r3, #20
 8008f34:	f06f 000c 	mvn.w	r0, #12
 8008f38:	f7ff fcb6 	bl	80088a8 <lwip_netconn_err_to_msg>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4620      	mov	r0, r4
 8008f42:	f00c f8a9 	bl	8015098 <sys_mbox_trypost>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d109      	bne.n	8008f60 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <accept_function+0x6c>
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	69f8      	ldr	r0, [r7, #28]
 8008f5e:	4798      	blx	r3
    }
    return ERR_VAL;
 8008f60:	f06f 0305 	mvn.w	r3, #5
 8008f64:	e077      	b.n	8009056 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d006      	beq.n	8008f7c <accept_function+0x88>
 8008f6e:	4b3c      	ldr	r3, [pc, #240]	; (8009060 <accept_function+0x16c>)
 8008f70:	f240 222a 	movw	r2, #554	; 0x22a
 8008f74:	493b      	ldr	r1, [pc, #236]	; (8009064 <accept_function+0x170>)
 8008f76:	483c      	ldr	r0, [pc, #240]	; (8009068 <accept_function+0x174>)
 8008f78:	f00c fb82 	bl	8015680 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f000 f8f0 	bl	800916c <netconn_alloc>
 8008f8c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11b      	bne.n	8008fcc <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	f103 0414 	add.w	r4, r3, #20
 8008f9a:	f06f 000c 	mvn.w	r0, #12
 8008f9e:	f7ff fc83 	bl	80088a8 <lwip_netconn_err_to_msg>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f00c f876 	bl	8015098 <sys_mbox_trypost>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d109      	bne.n	8008fc6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <accept_function+0xd2>
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	69f8      	ldr	r0, [r7, #28]
 8008fc4:	4798      	blx	r3
    }
    return ERR_MEM;
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fca:	e044      	b.n	8009056 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008fd2:	69b8      	ldr	r0, [r7, #24]
 8008fd4:	f7ff ff66 	bl	8008ea4 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	3314      	adds	r3, #20
 8008fdc:	69b9      	ldr	r1, [r7, #24]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f00c f85a 	bl	8015098 <sys_mbox_trypost>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d02a      	beq.n	8009040 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6978      	ldr	r0, [r7, #20]
 8008ff4:	f004 fc44 	bl	800d880 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	6978      	ldr	r0, [r7, #20]
 8008ffc:	f004 fc52 	bl	800d8a4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009000:	2100      	movs	r1, #0
 8009002:	6978      	ldr	r0, [r7, #20]
 8009004:	f004 fc70 	bl	800d8e8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009008:	2200      	movs	r2, #0
 800900a:	2100      	movs	r1, #0
 800900c:	6978      	ldr	r0, [r7, #20]
 800900e:	f004 fcc7 	bl	800d9a0 <tcp_poll>
    tcp_err(pcb, NULL);
 8009012:	2100      	movs	r1, #0
 8009014:	6978      	ldr	r0, [r7, #20]
 8009016:	f004 fc89 	bl	800d92c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2200      	movs	r2, #0
 800901e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	3310      	adds	r3, #16
 8009024:	4618      	mov	r0, r3
 8009026:	f00c f825 	bl	8015074 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	3310      	adds	r3, #16
 800902e:	4618      	mov	r0, r3
 8009030:	f00c f8a5 	bl	801517e <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009034:	69b8      	ldr	r0, [r7, #24]
 8009036:	f000 f907 	bl	8009248 <netconn_free>
    return ERR_MEM;
 800903a:	f04f 33ff 	mov.w	r3, #4294967295
 800903e:	e00a      	b.n	8009056 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <accept_function+0x160>
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	69f8      	ldr	r0, [r7, #28]
 8009052:	4798      	blx	r3
  }

  return ERR_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3724      	adds	r7, #36	; 0x24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd90      	pop	{r4, r7, pc}
 800905e:	bf00      	nop
 8009060:	0801679c 	.word	0x0801679c
 8009064:	08016958 	.word	0x08016958
 8009068:	080167e0 	.word	0x080167e0

0800906c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d006      	beq.n	8009090 <pcb_new+0x24>
 8009082:	4b2b      	ldr	r3, [pc, #172]	; (8009130 <pcb_new+0xc4>)
 8009084:	f240 2265 	movw	r2, #613	; 0x265
 8009088:	492a      	ldr	r1, [pc, #168]	; (8009134 <pcb_new+0xc8>)
 800908a:	482b      	ldr	r0, [pc, #172]	; (8009138 <pcb_new+0xcc>)
 800908c:	f00c faf8 	bl	8015680 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800909a:	2b10      	cmp	r3, #16
 800909c:	d022      	beq.n	80090e4 <pcb_new+0x78>
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d133      	bne.n	800910a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681c      	ldr	r4, [r3, #0]
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f009 fcd2 	bl	8012a52 <udp_new_ip_type>
 80090ae:	4603      	mov	r3, r0
 80090b0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02a      	beq.n	8009112 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b22      	cmp	r3, #34	; 0x22
 80090c4:	d104      	bne.n	80090d0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6858      	ldr	r0, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	4917      	ldr	r1, [pc, #92]	; (800913c <pcb_new+0xd0>)
 80090de:	f009 fc3f 	bl	8012960 <udp_recv>
      }
      break;
 80090e2:	e016      	b.n	8009112 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681c      	ldr	r4, [r3, #0]
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f004 fbba 	bl	800d864 <tcp_new_ip_type>
 80090f0:	4603      	mov	r3, r0
 80090f2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00b      	beq.n	8009116 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff fece 	bl	8008ea4 <setup_tcp>
      }
      break;
 8009108:	e005      	b.n	8009116 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	22fa      	movs	r2, #250	; 0xfa
 800910e:	711a      	strb	r2, [r3, #4]
      return;
 8009110:	e00a      	b.n	8009128 <pcb_new+0xbc>
      break;
 8009112:	bf00      	nop
 8009114:	e000      	b.n	8009118 <pcb_new+0xac>
      break;
 8009116:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d102      	bne.n	8009128 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	711a      	strb	r2, [r3, #4]
  }
}
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bd90      	pop	{r4, r7, pc}
 800912e:	bf00      	nop
 8009130:	0801679c 	.word	0x0801679c
 8009134:	08016980 	.word	0x08016980
 8009138:	080167e0 	.word	0x080167e0
 800913c:	08008981 	.word	0x08008981

08009140 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff ff85 	bl	800906c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	6039      	str	r1, [r7, #0]
 8009176:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800917c:	2007      	movs	r0, #7
 800917e:	f001 fe1d 	bl	800adbc <memp_malloc>
 8009182:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <netconn_alloc+0x22>
    return NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	e052      	b.n	8009234 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	79fa      	ldrb	r2, [r7, #7]
 8009198:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	d004      	beq.n	80091b4 <netconn_alloc+0x48>
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d105      	bne.n	80091ba <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80091ae:	2306      	movs	r3, #6
 80091b0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80091b2:	e00a      	b.n	80091ca <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80091b4:	2306      	movs	r3, #6
 80091b6:	617b      	str	r3, [r7, #20]
      break;
 80091b8:	e007      	b.n	80091ca <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80091ba:	4b20      	ldr	r3, [pc, #128]	; (800923c <netconn_alloc+0xd0>)
 80091bc:	f240 22e5 	movw	r2, #741	; 0x2e5
 80091c0:	491f      	ldr	r1, [pc, #124]	; (8009240 <netconn_alloc+0xd4>)
 80091c2:	4820      	ldr	r0, [pc, #128]	; (8009244 <netconn_alloc+0xd8>)
 80091c4:	f00c fa5c 	bl	8015680 <iprintf>
      goto free_and_return;
 80091c8:	e02f      	b.n	800922a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3310      	adds	r3, #16
 80091ce:	6979      	ldr	r1, [r7, #20]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f00b ff35 	bl	8015040 <sys_mbox_new>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d125      	bne.n	8009228 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	330c      	adds	r3, #12
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f00b ffd8 	bl	8015198 <sys_sem_new>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3310      	adds	r3, #16
 80091f2:	4618      	mov	r0, r3
 80091f4:	f00b ff3e 	bl	8015074 <sys_mbox_free>
    goto free_and_return;
 80091f8:	e017      	b.n	800922a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3314      	adds	r3, #20
 80091fe:	4618      	mov	r0, r3
 8009200:	f00b ffbd 	bl	801517e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f04f 32ff 	mov.w	r2, #4294967295
 8009210:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	7cfa      	ldrb	r2, [r7, #19]
 8009222:	771a      	strb	r2, [r3, #28]
  return conn;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	e005      	b.n	8009234 <netconn_alloc+0xc8>
    goto free_and_return;
 8009228:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	2007      	movs	r0, #7
 800922e:	f001 fe17 	bl	800ae60 <memp_free>
  return NULL;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	0801679c 	.word	0x0801679c
 8009240:	080169a0 	.word	0x080169a0
 8009244:	080167e0 	.word	0x080167e0

08009248 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d006      	beq.n	8009266 <netconn_free+0x1e>
 8009258:	4b1b      	ldr	r3, [pc, #108]	; (80092c8 <netconn_free+0x80>)
 800925a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800925e:	491b      	ldr	r1, [pc, #108]	; (80092cc <netconn_free+0x84>)
 8009260:	481b      	ldr	r0, [pc, #108]	; (80092d0 <netconn_free+0x88>)
 8009262:	f00c fa0d 	bl	8015680 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3310      	adds	r3, #16
 800926a:	4618      	mov	r0, r3
 800926c:	f00b ff76 	bl	801515c <sys_mbox_valid>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d006      	beq.n	8009284 <netconn_free+0x3c>
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <netconn_free+0x80>)
 8009278:	f44f 7249 	mov.w	r2, #804	; 0x324
 800927c:	4915      	ldr	r1, [pc, #84]	; (80092d4 <netconn_free+0x8c>)
 800927e:	4814      	ldr	r0, [pc, #80]	; (80092d0 <netconn_free+0x88>)
 8009280:	f00c f9fe 	bl	8015680 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3314      	adds	r3, #20
 8009288:	4618      	mov	r0, r3
 800928a:	f00b ff67 	bl	801515c <sys_mbox_valid>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d006      	beq.n	80092a2 <netconn_free+0x5a>
 8009294:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <netconn_free+0x80>)
 8009296:	f240 3227 	movw	r2, #807	; 0x327
 800929a:	490f      	ldr	r1, [pc, #60]	; (80092d8 <netconn_free+0x90>)
 800929c:	480c      	ldr	r0, [pc, #48]	; (80092d0 <netconn_free+0x88>)
 800929e:	f00c f9ef 	bl	8015680 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	330c      	adds	r3, #12
 80092a6:	4618      	mov	r0, r3
 80092a8:	f00b ffd9 	bl	801525e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	330c      	adds	r3, #12
 80092b0:	4618      	mov	r0, r3
 80092b2:	f00b fff2 	bl	801529a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	2007      	movs	r0, #7
 80092ba:	f001 fdd1 	bl	800ae60 <memp_free>
}
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	0801679c 	.word	0x0801679c
 80092cc:	080169c8 	.word	0x080169c8
 80092d0:	080167e0 	.word	0x080167e0
 80092d4:	080169f8 	.word	0x080169f8
 80092d8:	08016a34 	.word	0x08016a34

080092dc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3310      	adds	r3, #16
 80092e8:	4618      	mov	r0, r3
 80092ea:	f00b ff37 	bl	801515c <sys_mbox_valid>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d02f      	beq.n	8009354 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80092f4:	e018      	b.n	8009328 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092fe:	2b10      	cmp	r3, #16
 8009300:	d10e      	bne.n	8009320 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f107 020f 	add.w	r2, r7, #15
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff fafe 	bl	800890c <lwip_netconn_is_err_msg>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d108      	bne.n	8009328 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	4618      	mov	r0, r3
 800931a:	f002 fc41 	bl	800bba0 <pbuf_free>
 800931e:	e003      	b.n	8009328 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fe90 	bl	800a048 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3310      	adds	r3, #16
 800932c:	f107 0210 	add.w	r2, r7, #16
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f00b fefb 	bl	801512e <sys_arch_mbox_tryfetch>
 8009338:	4603      	mov	r3, r0
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d1da      	bne.n	80092f6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3310      	adds	r3, #16
 8009344:	4618      	mov	r0, r3
 8009346:	f00b fe95 	bl	8015074 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3310      	adds	r3, #16
 800934e:	4618      	mov	r0, r3
 8009350:	f00b ff15 	bl	801517e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3314      	adds	r3, #20
 8009358:	4618      	mov	r0, r3
 800935a:	f00b feff 	bl	801515c <sys_mbox_valid>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d034      	beq.n	80093ce <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009364:	e01d      	b.n	80093a2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f107 020e 	add.w	r2, r7, #14
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff facc 	bl	800890c <lwip_netconn_is_err_msg>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d113      	bne.n	80093a2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800937e:	6978      	ldr	r0, [r7, #20]
 8009380:	f7ff ffac 	bl	80092dc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	f003 f9eb 	bl	800c76c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2200      	movs	r2, #0
 800939a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800939c:	6978      	ldr	r0, [r7, #20]
 800939e:	f7ff ff53 	bl	8009248 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3314      	adds	r3, #20
 80093a6:	f107 0210 	add.w	r2, r7, #16
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f00b febe 	bl	801512e <sys_arch_mbox_tryfetch>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b8:	d1d5      	bne.n	8009366 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3314      	adds	r3, #20
 80093be:	4618      	mov	r0, r3
 80093c0:	f00b fe58 	bl	8015074 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3314      	adds	r3, #20
 80093c8:	4618      	mov	r0, r3
 80093ca:	f00b fed8 	bl	801517e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80093ce:	bf00      	nop
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d106      	bne.n	80093fc <lwip_netconn_do_close_internal+0x24>
 80093ee:	4ba1      	ldr	r3, [pc, #644]	; (8009674 <lwip_netconn_do_close_internal+0x29c>)
 80093f0:	f240 32a2 	movw	r2, #930	; 0x3a2
 80093f4:	49a0      	ldr	r1, [pc, #640]	; (8009678 <lwip_netconn_do_close_internal+0x2a0>)
 80093f6:	48a1      	ldr	r0, [pc, #644]	; (800967c <lwip_netconn_do_close_internal+0x2a4>)
 80093f8:	f00c f942 	bl	8015680 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009404:	2b10      	cmp	r3, #16
 8009406:	d006      	beq.n	8009416 <lwip_netconn_do_close_internal+0x3e>
 8009408:	4b9a      	ldr	r3, [pc, #616]	; (8009674 <lwip_netconn_do_close_internal+0x29c>)
 800940a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800940e:	499c      	ldr	r1, [pc, #624]	; (8009680 <lwip_netconn_do_close_internal+0x2a8>)
 8009410:	489a      	ldr	r0, [pc, #616]	; (800967c <lwip_netconn_do_close_internal+0x2a4>)
 8009412:	f00c f935 	bl	8015680 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b04      	cmp	r3, #4
 800941c:	d006      	beq.n	800942c <lwip_netconn_do_close_internal+0x54>
 800941e:	4b95      	ldr	r3, [pc, #596]	; (8009674 <lwip_netconn_do_close_internal+0x29c>)
 8009420:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009424:	4997      	ldr	r1, [pc, #604]	; (8009684 <lwip_netconn_do_close_internal+0x2ac>)
 8009426:	4895      	ldr	r0, [pc, #596]	; (800967c <lwip_netconn_do_close_internal+0x2a4>)
 8009428:	f00c f92a 	bl	8015680 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <lwip_netconn_do_close_internal+0x6a>
 8009434:	4b8f      	ldr	r3, [pc, #572]	; (8009674 <lwip_netconn_do_close_internal+0x29c>)
 8009436:	f240 32a5 	movw	r2, #933	; 0x3a5
 800943a:	4993      	ldr	r1, [pc, #588]	; (8009688 <lwip_netconn_do_close_internal+0x2b0>)
 800943c:	488f      	ldr	r0, [pc, #572]	; (800967c <lwip_netconn_do_close_internal+0x2a4>)
 800943e:	f00c f91f 	bl	8015680 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <lwip_netconn_do_close_internal+0x80>
 800944a:	4b8a      	ldr	r3, [pc, #552]	; (8009674 <lwip_netconn_do_close_internal+0x29c>)
 800944c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009450:	498e      	ldr	r1, [pc, #568]	; (800968c <lwip_netconn_do_close_internal+0x2b4>)
 8009452:	488a      	ldr	r0, [pc, #552]	; (800967c <lwip_netconn_do_close_internal+0x2a4>)
 8009454:	f00c f914 	bl	8015680 <iprintf>

  tpcb = conn->pcb.tcp;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	7a1b      	ldrb	r3, [r3, #8]
 8009464:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d102      	bne.n	8009482 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800947c:	2301      	movs	r3, #1
 800947e:	75bb      	strb	r3, [r7, #22]
 8009480:	e01f      	b.n	80094c2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800948c:	2b05      	cmp	r3, #5
 800948e:	d007      	beq.n	80094a0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009494:	2b06      	cmp	r3, #6
 8009496:	d003      	beq.n	80094a0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800949c:	2b08      	cmp	r3, #8
 800949e:	d102      	bne.n	80094a6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80094a0:	2301      	movs	r3, #1
 80094a2:	75bb      	strb	r3, [r7, #22]
 80094a4:	e00d      	b.n	80094c2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80094a6:	7b7b      	ldrb	r3, [r7, #13]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d008      	beq.n	80094be <lwip_netconn_do_close_internal+0xe6>
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	8b5b      	ldrh	r3, [r3, #26]
 80094b0:	f003 0310 	and.w	r3, r3, #16
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80094b8:	2301      	movs	r3, #1
 80094ba:	75bb      	strb	r3, [r7, #22]
 80094bc:	e001      	b.n	80094c2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80094c2:	7dbb      	ldrb	r3, [r7, #22]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80094c8:	2100      	movs	r1, #0
 80094ca:	6938      	ldr	r0, [r7, #16]
 80094cc:	f004 f9d8 	bl	800d880 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	7d1b      	ldrb	r3, [r3, #20]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d104      	bne.n	80094e2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80094d8:	2100      	movs	r1, #0
 80094da:	6938      	ldr	r0, [r7, #16]
 80094dc:	f004 fa48 	bl	800d970 <tcp_accept>
 80094e0:	e01d      	b.n	800951e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80094e8:	2100      	movs	r1, #0
 80094ea:	6938      	ldr	r0, [r7, #16]
 80094ec:	f004 f9da 	bl	800d8a4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80094f0:	2100      	movs	r1, #0
 80094f2:	6938      	ldr	r0, [r7, #16]
 80094f4:	f004 fa3c 	bl	800d970 <tcp_accept>
    }
    if (shut_tx) {
 80094f8:	7b7b      	ldrb	r3, [r7, #13]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80094fe:	2100      	movs	r1, #0
 8009500:	6938      	ldr	r0, [r7, #16]
 8009502:	f004 f9f1 	bl	800d8e8 <tcp_sent>
    }
    if (shut_close) {
 8009506:	7dbb      	ldrb	r3, [r7, #22]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d008      	beq.n	800951e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800950c:	2200      	movs	r2, #0
 800950e:	2100      	movs	r1, #0
 8009510:	6938      	ldr	r0, [r7, #16]
 8009512:	f004 fa45 	bl	800d9a0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009516:	2100      	movs	r1, #0
 8009518:	6938      	ldr	r0, [r7, #16]
 800951a:	f004 fa07 	bl	800d92c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800951e:	7dbb      	ldrb	r3, [r7, #22]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009524:	6938      	ldr	r0, [r7, #16]
 8009526:	f002 ffdd 	bl	800c4e4 <tcp_close>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]
 800952e:	e007      	b.n	8009540 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	7b7a      	ldrb	r2, [r7, #13]
 8009534:	4619      	mov	r1, r3
 8009536:	6938      	ldr	r0, [r7, #16]
 8009538:	f003 f800 	bl	800c53c <tcp_shutdown>
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009540:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009548:	2301      	movs	r3, #1
 800954a:	757b      	strb	r3, [r7, #21]
 800954c:	e016      	b.n	800957c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800954e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009556:	d10f      	bne.n	8009578 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	7a5b      	ldrb	r3, [r3, #9]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10c      	bne.n	800957c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009562:	2301      	movs	r3, #1
 8009564:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009566:	7dbb      	ldrb	r3, [r7, #22]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800956c:	6938      	ldr	r0, [r7, #16]
 800956e:	f003 f8fd 	bl	800c76c <tcp_abort>
          err = ERR_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	75fb      	strb	r3, [r7, #23]
 8009576:	e001      	b.n	800957c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009578:	2301      	movs	r3, #1
 800957a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800957c:	7d7b      	ldrb	r3, [r7, #21]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d044      	beq.n	800960c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	330c      	adds	r3, #12
 800958a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	7dfa      	ldrb	r2, [r7, #23]
 8009592:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80095a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d129      	bne.n	80095fc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80095a8:	7dbb      	ldrb	r3, [r7, #22]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00c      	beq.n	80095c8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <lwip_netconn_do_close_internal+0x1f0>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2200      	movs	r2, #0
 80095c2:	2104      	movs	r1, #4
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
      }
      if (shut_rx) {
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d009      	beq.n	80095e2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <lwip_netconn_do_close_internal+0x20a>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	4798      	blx	r3
      }
      if (shut_tx) {
 80095e2:	7b7b      	ldrb	r3, [r7, #13]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d009      	beq.n	80095fc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <lwip_netconn_do_close_internal+0x224>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	2200      	movs	r2, #0
 80095f6:	2102      	movs	r1, #2
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009602:	68b8      	ldr	r0, [r7, #8]
 8009604:	f00b fe1e 	bl	8015244 <sys_sem_signal>
    }
    return ERR_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	e02e      	b.n	800966a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800960c:	7d7b      	ldrb	r3, [r7, #21]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d11e      	bne.n	8009650 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	7d1b      	ldrb	r3, [r3, #20]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d106      	bne.n	8009628 <lwip_netconn_do_close_internal+0x250>
 800961a:	4b16      	ldr	r3, [pc, #88]	; (8009674 <lwip_netconn_do_close_internal+0x29c>)
 800961c:	f240 4241 	movw	r2, #1089	; 0x441
 8009620:	491b      	ldr	r1, [pc, #108]	; (8009690 <lwip_netconn_do_close_internal+0x2b8>)
 8009622:	4816      	ldr	r0, [pc, #88]	; (800967c <lwip_netconn_do_close_internal+0x2a4>)
 8009624:	f00c f82c 	bl	8015680 <iprintf>
    if (shut_tx) {
 8009628:	7b7b      	ldrb	r3, [r7, #13]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800962e:	4919      	ldr	r1, [pc, #100]	; (8009694 <lwip_netconn_do_close_internal+0x2bc>)
 8009630:	6938      	ldr	r0, [r7, #16]
 8009632:	f004 f959 	bl	800d8e8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009636:	2201      	movs	r2, #1
 8009638:	4917      	ldr	r1, [pc, #92]	; (8009698 <lwip_netconn_do_close_internal+0x2c0>)
 800963a:	6938      	ldr	r0, [r7, #16]
 800963c:	f004 f9b0 	bl	800d9a0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009640:	4916      	ldr	r1, [pc, #88]	; (800969c <lwip_netconn_do_close_internal+0x2c4>)
 8009642:	6938      	ldr	r0, [r7, #16]
 8009644:	f004 f972 	bl	800d92c <tcp_err>
    tcp_arg(tpcb, conn);
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	6938      	ldr	r0, [r7, #16]
 800964c:	f004 f918 	bl	800d880 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d106      	bne.n	8009666 <lwip_netconn_do_close_internal+0x28e>
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <lwip_netconn_do_close_internal+0x29c>)
 800965a:	f240 424d 	movw	r2, #1101	; 0x44d
 800965e:	4910      	ldr	r1, [pc, #64]	; (80096a0 <lwip_netconn_do_close_internal+0x2c8>)
 8009660:	4806      	ldr	r0, [pc, #24]	; (800967c <lwip_netconn_do_close_internal+0x2a4>)
 8009662:	f00c f80d 	bl	8015680 <iprintf>
  return err;
 8009666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	0801679c 	.word	0x0801679c
 8009678:	08016a70 	.word	0x08016a70
 800967c:	080167e0 	.word	0x080167e0
 8009680:	08016a80 	.word	0x08016a80
 8009684:	08016aa0 	.word	0x08016aa0
 8009688:	08016ac4 	.word	0x08016ac4
 800968c:	08016904 	.word	0x08016904
 8009690:	08016ad8 	.word	0x08016ad8
 8009694:	08008c51 	.word	0x08008c51
 8009698:	08008b89 	.word	0x08008b89
 800969c:	08008cf9 	.word	0x08008cf9
 80096a0:	08016afc 	.word	0x08016afc

080096a4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00d      	beq.n	80096da <lwip_netconn_do_delconn+0x36>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	d006      	beq.n	80096da <lwip_netconn_do_delconn+0x36>
 80096cc:	4b60      	ldr	r3, [pc, #384]	; (8009850 <lwip_netconn_do_delconn+0x1ac>)
 80096ce:	f240 425f 	movw	r2, #1119	; 0x45f
 80096d2:	4960      	ldr	r1, [pc, #384]	; (8009854 <lwip_netconn_do_delconn+0x1b0>)
 80096d4:	4860      	ldr	r0, [pc, #384]	; (8009858 <lwip_netconn_do_delconn+0x1b4>)
 80096d6:	f00b ffd3 	bl	8015680 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <lwip_netconn_do_delconn+0x48>
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d002      	beq.n	80096ec <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d109      	bne.n	8009700 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	d10a      	bne.n	8009708 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	7f1b      	ldrb	r3, [r3, #28]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	22fb      	movs	r2, #251	; 0xfb
 8009704:	711a      	strb	r2, [r3, #4]
 8009706:	e097      	b.n	8009838 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	2b03      	cmp	r3, #3
 800970c:	d10d      	bne.n	800972a <lwip_netconn_do_delconn+0x86>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	7f1b      	ldrb	r3, [r3, #28]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d106      	bne.n	800972a <lwip_netconn_do_delconn+0x86>
 800971c:	4b4c      	ldr	r3, [pc, #304]	; (8009850 <lwip_netconn_do_delconn+0x1ac>)
 800971e:	f240 427b 	movw	r2, #1147	; 0x47b
 8009722:	494e      	ldr	r1, [pc, #312]	; (800985c <lwip_netconn_do_delconn+0x1b8>)
 8009724:	484c      	ldr	r0, [pc, #304]	; (8009858 <lwip_netconn_do_delconn+0x1b4>)
 8009726:	f00b ffab 	bl	8015680 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff fdd1 	bl	80092dc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d05f      	beq.n	8009804 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800974e:	2b10      	cmp	r3, #16
 8009750:	d00e      	beq.n	8009770 <lwip_netconn_do_delconn+0xcc>
 8009752:	2b20      	cmp	r3, #32
 8009754:	d000      	beq.n	8009758 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8009756:	e051      	b.n	80097fc <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	f009 f919 	bl	80129a0 <udp_remove>
          break;
 800976e:	e045      	b.n	80097fc <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d006      	beq.n	8009788 <lwip_netconn_do_delconn+0xe4>
 800977a:	4b35      	ldr	r3, [pc, #212]	; (8009850 <lwip_netconn_do_delconn+0x1ac>)
 800977c:	f240 4294 	movw	r2, #1172	; 0x494
 8009780:	4937      	ldr	r1, [pc, #220]	; (8009860 <lwip_netconn_do_delconn+0x1bc>)
 8009782:	4835      	ldr	r0, [pc, #212]	; (8009858 <lwip_netconn_do_delconn+0x1b4>)
 8009784:	f00b ff7c 	bl	8015680 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2204      	movs	r2, #4
 800978e:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2203      	movs	r2, #3
 8009794:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff fe17 	bl	80093d8 <lwip_netconn_do_close_internal>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d04a      	beq.n	8009846 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	785b      	ldrb	r3, [r3, #1]
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d006      	beq.n	80097c8 <lwip_netconn_do_delconn+0x124>
 80097ba:	4b25      	ldr	r3, [pc, #148]	; (8009850 <lwip_netconn_do_delconn+0x1ac>)
 80097bc:	f240 429a 	movw	r2, #1178	; 0x49a
 80097c0:	4928      	ldr	r1, [pc, #160]	; (8009864 <lwip_netconn_do_delconn+0x1c0>)
 80097c2:	4825      	ldr	r0, [pc, #148]	; (8009858 <lwip_netconn_do_delconn+0x1b4>)
 80097c4:	f00b ff5c 	bl	8015680 <iprintf>
            UNLOCK_TCPIP_CORE();
 80097c8:	4827      	ldr	r0, [pc, #156]	; (8009868 <lwip_netconn_do_delconn+0x1c4>)
 80097ca:	f00b fda4 	bl	8015316 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	330c      	adds	r3, #12
 80097d4:	2100      	movs	r1, #0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f00b fd03 	bl	80151e2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80097dc:	4822      	ldr	r0, [pc, #136]	; (8009868 <lwip_netconn_do_delconn+0x1c4>)
 80097de:	f00b fd8b 	bl	80152f8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	785b      	ldrb	r3, [r3, #1]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d02c      	beq.n	8009846 <lwip_netconn_do_delconn+0x1a2>
 80097ec:	4b18      	ldr	r3, [pc, #96]	; (8009850 <lwip_netconn_do_delconn+0x1ac>)
 80097ee:	f240 429e 	movw	r2, #1182	; 0x49e
 80097f2:	491c      	ldr	r1, [pc, #112]	; (8009864 <lwip_netconn_do_delconn+0x1c0>)
 80097f4:	4818      	ldr	r0, [pc, #96]	; (8009858 <lwip_netconn_do_delconn+0x1b4>)
 80097f6:	f00b ff43 	bl	8015680 <iprintf>
          return;
 80097fa:	e024      	b.n	8009846 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2200      	movs	r2, #0
 8009802:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	2b00      	cmp	r3, #0
 800980c:	d007      	beq.n	800981e <lwip_netconn_do_delconn+0x17a>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	6810      	ldr	r0, [r2, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	2100      	movs	r1, #0
 800981c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b00      	cmp	r3, #0
 8009826:	d007      	beq.n	8009838 <lwip_netconn_do_delconn+0x194>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	6810      	ldr	r0, [r2, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	2102      	movs	r1, #2
 8009836:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	330c      	adds	r3, #12
 800983e:	4618      	mov	r0, r3
 8009840:	f00b fd1a 	bl	8015278 <sys_sem_valid>
 8009844:	e000      	b.n	8009848 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009846:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	0801679c 	.word	0x0801679c
 8009854:	08016b0c 	.word	0x08016b0c
 8009858:	080167e0 	.word	0x080167e0
 800985c:	08016b20 	.word	0x08016b20
 8009860:	08016b40 	.word	0x08016b40
 8009864:	08016b5c 	.word	0x08016b5c
 8009868:	20007f3c 	.word	0x20007f3c

0800986c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d026      	beq.n	80098d0 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800988c:	2b10      	cmp	r3, #16
 800988e:	d00e      	beq.n	80098ae <lwip_netconn_do_bind+0x42>
 8009890:	2b20      	cmp	r3, #32
 8009892:	d119      	bne.n	80098c8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6858      	ldr	r0, [r3, #4]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6899      	ldr	r1, [r3, #8]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	899b      	ldrh	r3, [r3, #12]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f008 ffd4 	bl	8012850 <udp_bind>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]
        break;
 80098ac:	e012      	b.n	80098d4 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6858      	ldr	r0, [r3, #4]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	6899      	ldr	r1, [r3, #8]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	899b      	ldrh	r3, [r3, #12]
 80098bc:	461a      	mov	r2, r3
 80098be:	f002 ff61 	bl	800c784 <tcp_bind>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]
        break;
 80098c6:	e005      	b.n	80098d4 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80098c8:	23fa      	movs	r3, #250	; 0xfa
 80098ca:	73fb      	strb	r3, [r7, #15]
        break;
 80098cc:	bf00      	nop
 80098ce:	e001      	b.n	80098d4 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80098d0:	23fa      	movs	r3, #250	; 0xfa
 80098d2:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	7bfa      	ldrb	r2, [r7, #15]
 80098d8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d07f      	beq.n	80099fa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009904:	2b10      	cmp	r3, #16
 8009906:	d175      	bne.n	80099f4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d165      	bne.n	80099de <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	7d1b      	ldrb	r3, [r3, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800991e:	23fa      	movs	r3, #250	; 0xfa
 8009920:	72fb      	strb	r3, [r7, #11]
 8009922:	e06c      	b.n	80099fe <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009924:	23ff      	movs	r3, #255	; 0xff
 8009926:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f107 020b 	add.w	r2, r7, #11
 8009932:	7cf9      	ldrb	r1, [r7, #19]
 8009934:	4618      	mov	r0, r3
 8009936:	f002 ffdd 	bl	800c8f4 <tcp_listen_with_backlog_and_err>
 800993a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d05d      	beq.n	80099fe <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3310      	adds	r3, #16
 8009948:	4618      	mov	r0, r3
 800994a:	f00b fc07 	bl	801515c <sys_mbox_valid>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00b      	beq.n	800996c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3310      	adds	r3, #16
 800995a:	4618      	mov	r0, r3
 800995c:	f00b fb8a 	bl	8015074 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3310      	adds	r3, #16
 8009966:	4618      	mov	r0, r3
 8009968:	f00b fc09 	bl	801517e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3314      	adds	r3, #20
 8009976:	4618      	mov	r0, r3
 8009978:	f00b fbf0 	bl	801515c <sys_mbox_valid>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d108      	bne.n	8009994 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3314      	adds	r3, #20
 8009988:	2106      	movs	r1, #6
 800998a:	4618      	mov	r0, r3
 800998c:	f00b fb58 	bl	8015040 <sys_mbox_new>
 8009990:	4603      	mov	r3, r0
 8009992:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009994:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d118      	bne.n	80099ce <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2202      	movs	r2, #2
 80099a2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4619      	mov	r1, r3
 80099b8:	4610      	mov	r0, r2
 80099ba:	f003 ff61 	bl	800d880 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	4912      	ldr	r1, [pc, #72]	; (8009a10 <lwip_netconn_do_listen+0x12c>)
 80099c6:	4618      	mov	r0, r3
 80099c8:	f003 ffd2 	bl	800d970 <tcp_accept>
 80099cc:	e017      	b.n	80099fe <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f002 fd88 	bl	800c4e4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2200      	movs	r2, #0
 80099da:	605a      	str	r2, [r3, #4]
 80099dc:	e00f      	b.n	80099fe <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	785b      	ldrb	r3, [r3, #1]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d102      	bne.n	80099ee <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	72fb      	strb	r3, [r7, #11]
 80099ec:	e007      	b.n	80099fe <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80099ee:	23f5      	movs	r3, #245	; 0xf5
 80099f0:	72fb      	strb	r3, [r7, #11]
 80099f2:	e004      	b.n	80099fe <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80099f4:	23f0      	movs	r3, #240	; 0xf0
 80099f6:	72fb      	strb	r3, [r7, #11]
 80099f8:	e001      	b.n	80099fe <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80099fa:	23f5      	movs	r3, #245	; 0xf5
 80099fc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80099fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009a06:	bf00      	nop
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	08008ef5 	.word	0x08008ef5

08009a14 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	2200      	movs	r2, #0
 8009a24:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d022      	beq.n	8009a76 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d11b      	bne.n	8009a76 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4a:	d202      	bcs.n	8009a52 <lwip_netconn_do_recv+0x3e>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	e001      	b.n	8009a56 <lwip_netconn_do_recv+0x42>
 8009a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a56:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	89fa      	ldrh	r2, [r7, #14]
 8009a60:	4611      	mov	r1, r2
 8009a62:	4618      	mov	r0, r3
 8009a64:	f003 f84a 	bl	800cafc <tcp_recved>
        remaining -= recved;
 8009a68:	89fb      	ldrh	r3, [r7, #14]
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e6      	bne.n	8009a44 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009a76:	bf00      	nop
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d106      	bne.n	8009aa4 <lwip_netconn_do_writemore+0x24>
 8009a96:	4b96      	ldr	r3, [pc, #600]	; (8009cf0 <lwip_netconn_do_writemore+0x270>)
 8009a98:	f240 6273 	movw	r2, #1651	; 0x673
 8009a9c:	4995      	ldr	r1, [pc, #596]	; (8009cf4 <lwip_netconn_do_writemore+0x274>)
 8009a9e:	4896      	ldr	r0, [pc, #600]	; (8009cf8 <lwip_netconn_do_writemore+0x278>)
 8009aa0:	f00b fdee 	bl	8015680 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d006      	beq.n	8009aba <lwip_netconn_do_writemore+0x3a>
 8009aac:	4b90      	ldr	r3, [pc, #576]	; (8009cf0 <lwip_netconn_do_writemore+0x270>)
 8009aae:	f240 6274 	movw	r2, #1652	; 0x674
 8009ab2:	4992      	ldr	r1, [pc, #584]	; (8009cfc <lwip_netconn_do_writemore+0x27c>)
 8009ab4:	4890      	ldr	r0, [pc, #576]	; (8009cf8 <lwip_netconn_do_writemore+0x278>)
 8009ab6:	f00b fde3 	bl	8015680 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <lwip_netconn_do_writemore+0x50>
 8009ac2:	4b8b      	ldr	r3, [pc, #556]	; (8009cf0 <lwip_netconn_do_writemore+0x270>)
 8009ac4:	f240 6275 	movw	r2, #1653	; 0x675
 8009ac8:	498d      	ldr	r1, [pc, #564]	; (8009d00 <lwip_netconn_do_writemore+0x280>)
 8009aca:	488b      	ldr	r0, [pc, #556]	; (8009cf8 <lwip_netconn_do_writemore+0x278>)
 8009acc:	f00b fdd8 	bl	8015680 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <lwip_netconn_do_writemore+0x66>
 8009ad8:	4b85      	ldr	r3, [pc, #532]	; (8009cf0 <lwip_netconn_do_writemore+0x270>)
 8009ada:	f240 6276 	movw	r2, #1654	; 0x676
 8009ade:	4989      	ldr	r1, [pc, #548]	; (8009d04 <lwip_netconn_do_writemore+0x284>)
 8009ae0:	4885      	ldr	r0, [pc, #532]	; (8009cf8 <lwip_netconn_do_writemore+0x278>)
 8009ae2:	f00b fdcd 	bl	8015680 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d306      	bcc.n	8009b04 <lwip_netconn_do_writemore+0x84>
 8009af6:	4b7e      	ldr	r3, [pc, #504]	; (8009cf0 <lwip_netconn_do_writemore+0x270>)
 8009af8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009afc:	4982      	ldr	r1, [pc, #520]	; (8009d08 <lwip_netconn_do_writemore+0x288>)
 8009afe:	487e      	ldr	r0, [pc, #504]	; (8009cf8 <lwip_netconn_do_writemore+0x278>)
 8009b00:	f00b fdbe 	bl	8015680 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	899b      	ldrh	r3, [r3, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <lwip_netconn_do_writemore+0x9c>
 8009b0e:	4b78      	ldr	r3, [pc, #480]	; (8009cf0 <lwip_netconn_do_writemore+0x270>)
 8009b10:	f240 6279 	movw	r2, #1657	; 0x679
 8009b14:	497d      	ldr	r1, [pc, #500]	; (8009d0c <lwip_netconn_do_writemore+0x28c>)
 8009b16:	4878      	ldr	r0, [pc, #480]	; (8009cf8 <lwip_netconn_do_writemore+0x278>)
 8009b18:	f00b fdb2 	bl	8015680 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a1b      	ldr	r3, [r3, #32]
 8009b20:	7f1b      	ldrb	r3, [r3, #28]
 8009b22:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7f1b      	ldrb	r3, [r3, #28]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <lwip_netconn_do_writemore+0xba>
 8009b30:	7ebb      	ldrb	r3, [r7, #26]
 8009b32:	f003 0304 	and.w	r3, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <lwip_netconn_do_writemore+0xbe>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <lwip_netconn_do_writemore+0xc0>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	4413      	add	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b6c:	d307      	bcc.n	8009b7e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b72:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009b74:	7ebb      	ldrb	r3, [r7, #26]
 8009b76:	f043 0302 	orr.w	r3, r3, #2
 8009b7a:	76bb      	strb	r3, [r7, #26]
 8009b7c:	e001      	b.n	8009b82 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b8a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009b8c:	89fa      	ldrh	r2, [r7, #14]
 8009b8e:	8bbb      	ldrh	r3, [r7, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d216      	bcs.n	8009bc2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009b94:	89fb      	ldrh	r3, [r7, #14]
 8009b96:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009b98:	7e3b      	ldrb	r3, [r7, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00d      	beq.n	8009bba <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009b9e:	8bbb      	ldrh	r3, [r7, #28]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10e      	bne.n	8009bc2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d102      	bne.n	8009bb4 <lwip_netconn_do_writemore+0x134>
 8009bae:	f06f 0306 	mvn.w	r3, #6
 8009bb2:	e000      	b.n	8009bb6 <lwip_netconn_do_writemore+0x136>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009bb8:	e07d      	b.n	8009cb6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009bba:	7ebb      	ldrb	r3, [r7, #26]
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	8bbb      	ldrh	r3, [r7, #28]
 8009bca:	441a      	add	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d906      	bls.n	8009be6 <lwip_netconn_do_writemore+0x166>
 8009bd8:	4b45      	ldr	r3, [pc, #276]	; (8009cf0 <lwip_netconn_do_writemore+0x270>)
 8009bda:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009bde:	494c      	ldr	r1, [pc, #304]	; (8009d10 <lwip_netconn_do_writemore+0x290>)
 8009be0:	4845      	ldr	r0, [pc, #276]	; (8009cf8 <lwip_netconn_do_writemore+0x278>)
 8009be2:	f00b fd4d 	bl	8015680 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009be6:	8bbb      	ldrh	r3, [r7, #28]
 8009be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d103      	bne.n	8009bf8 <lwip_netconn_do_writemore+0x178>
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf6:	d209      	bcs.n	8009c0c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009bfc:	8bba      	ldrh	r2, [r7, #28]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d10b      	bne.n	8009c1a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	899b      	ldrh	r3, [r3, #12]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d906      	bls.n	8009c1a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009c10:	7ebb      	ldrb	r3, [r7, #26]
 8009c12:	f043 0302 	orr.w	r3, r3, #2
 8009c16:	76bb      	strb	r3, [r7, #26]
 8009c18:	e001      	b.n	8009c1e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6858      	ldr	r0, [r3, #4]
 8009c22:	7ebb      	ldrb	r3, [r7, #26]
 8009c24:	8bba      	ldrh	r2, [r7, #28]
 8009c26:	6979      	ldr	r1, [r7, #20]
 8009c28:	f006 fd66 	bl	80106f8 <tcp_write>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009c30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d12c      	bne.n	8009c92 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	6999      	ldr	r1, [r3, #24]
 8009c3e:	8bba      	ldrh	r2, [r7, #28]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a1b      	ldr	r3, [r3, #32]
 8009c44:	440a      	add	r2, r1
 8009c46:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	6919      	ldr	r1, [r3, #16]
 8009c4e:	8bba      	ldrh	r2, [r7, #28]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	440a      	add	r2, r1
 8009c56:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	691a      	ldr	r2, [r3, #16]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d113      	bne.n	8009c92 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	899a      	ldrh	r2, [r3, #12]
 8009c70:	3a01      	subs	r2, #1
 8009c72:	b292      	uxth	r2, r2
 8009c74:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	899b      	ldrh	r3, [r3, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d008      	beq.n	8009c92 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	3208      	adds	r2, #8
 8009c88:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009c92:	7e7b      	ldrb	r3, [r7, #25]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d004      	beq.n	8009ca2 <lwip_netconn_do_writemore+0x222>
 8009c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f43f af50 	beq.w	8009b42 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009ca2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <lwip_netconn_do_writemore+0x234>
 8009caa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb2:	d146      	bne.n	8009d42 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009cb4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009cb6:	7e3b      	ldrb	r3, [r7, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d02b      	beq.n	8009d14 <lwip_netconn_do_writemore+0x294>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	699a      	ldr	r2, [r3, #24]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d223      	bcs.n	8009d14 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <lwip_netconn_do_writemore+0x260>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2103      	movs	r1, #3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7f1b      	ldrb	r3, [r3, #28]
 8009ce4:	f043 0310 	orr.w	r3, r3, #16
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	771a      	strb	r2, [r3, #28]
 8009cee:	e028      	b.n	8009d42 <lwip_netconn_do_writemore+0x2c2>
 8009cf0:	0801679c 	.word	0x0801679c
 8009cf4:	080168f4 	.word	0x080168f4
 8009cf8:	080167e0 	.word	0x080167e0
 8009cfc:	08016bfc 	.word	0x08016bfc
 8009d00:	08016904 	.word	0x08016904
 8009d04:	08016c1c 	.word	0x08016c1c
 8009d08:	08016c34 	.word	0x08016c34
 8009d0c:	08016c74 	.word	0x08016c74
 8009d10:	08016c9c 	.word	0x08016c9c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d1c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009d20:	d305      	bcc.n	8009d2e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d909      	bls.n	8009d42 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d005      	beq.n	8009d42 <lwip_netconn_do_writemore+0x2c2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2103      	movs	r1, #3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d11d      	bne.n	8009d86 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	699a      	ldr	r2, [r3, #24]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d002      	beq.n	8009d60 <lwip_netconn_do_writemore+0x2e0>
 8009d5a:	7e3b      	ldrb	r3, [r7, #24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009d60:	2301      	movs	r3, #1
 8009d62:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f007 fab1 	bl	80112d0 <tcp_output>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009d72:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009d76:	f113 0f04 	cmn.w	r3, #4
 8009d7a:	d12c      	bne.n	8009dd6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009d7c:	7b3b      	ldrb	r3, [r7, #12]
 8009d7e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009d80:	2301      	movs	r3, #1
 8009d82:	76fb      	strb	r3, [r7, #27]
 8009d84:	e027      	b.n	8009dd6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8e:	d120      	bne.n	8009dd2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f007 fa9b 	bl	80112d0 <tcp_output>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009d9e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009da2:	f113 0f04 	cmn.w	r3, #4
 8009da6:	d104      	bne.n	8009db2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009da8:	7b7b      	ldrb	r3, [r7, #13]
 8009daa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009dac:	2301      	movs	r3, #1
 8009dae:	76fb      	strb	r3, [r7, #27]
 8009db0:	e011      	b.n	8009dd6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009db2:	7e3b      	ldrb	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00e      	beq.n	8009dd6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d102      	bne.n	8009dc8 <lwip_netconn_do_writemore+0x348>
 8009dc2:	f06f 0306 	mvn.w	r3, #6
 8009dc6:	e000      	b.n	8009dca <lwip_netconn_do_writemore+0x34a>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	76fb      	strb	r3, [r7, #27]
 8009dd0:	e001      	b.n	8009dd6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009dd6:	7efb      	ldrb	r3, [r7, #27]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d015      	beq.n	8009e08 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	330c      	adds	r3, #12
 8009de4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	7ffa      	ldrb	r2, [r7, #31]
 8009dec:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009dfa:	78fb      	ldrb	r3, [r7, #3]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009e00:	68b8      	ldr	r0, [r7, #8]
 8009e02:	f00b fa1f 	bl	8015244 <sys_sem_signal>
 8009e06:	e002      	b.n	8009e0e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	e000      	b.n	8009e10 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fe fd22 	bl	8008872 <netconn_err>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d166      	bne.n	8009f08 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e44:	2b10      	cmp	r3, #16
 8009e46:	d15d      	bne.n	8009f04 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009e52:	23fb      	movs	r3, #251	; 0xfb
 8009e54:	73fb      	strb	r3, [r7, #15]
 8009e56:	e057      	b.n	8009f08 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d04d      	beq.n	8009efe <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2201      	movs	r2, #1
 8009e68:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d006      	beq.n	8009e82 <lwip_netconn_do_write+0x6a>
 8009e74:	4b28      	ldr	r3, [pc, #160]	; (8009f18 <lwip_netconn_do_write+0x100>)
 8009e76:	f240 7223 	movw	r2, #1827	; 0x723
 8009e7a:	4928      	ldr	r1, [pc, #160]	; (8009f1c <lwip_netconn_do_write+0x104>)
 8009e7c:	4828      	ldr	r0, [pc, #160]	; (8009f20 <lwip_netconn_do_write+0x108>)
 8009e7e:	f00b fbff 	bl	8015680 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d106      	bne.n	8009e98 <lwip_netconn_do_write+0x80>
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <lwip_netconn_do_write+0x100>)
 8009e8c:	f240 7224 	movw	r2, #1828	; 0x724
 8009e90:	4924      	ldr	r1, [pc, #144]	; (8009f24 <lwip_netconn_do_write+0x10c>)
 8009e92:	4823      	ldr	r0, [pc, #140]	; (8009f20 <lwip_netconn_do_write+0x108>)
 8009e94:	f00b fbf4 	bl	8015680 <iprintf>
        msg->conn->current_msg = msg;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fdea 	bl	8009a80 <lwip_netconn_do_writemore>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d02e      	beq.n	8009f10 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d006      	beq.n	8009eca <lwip_netconn_do_write+0xb2>
 8009ebc:	4b16      	ldr	r3, [pc, #88]	; (8009f18 <lwip_netconn_do_write+0x100>)
 8009ebe:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009ec2:	4919      	ldr	r1, [pc, #100]	; (8009f28 <lwip_netconn_do_write+0x110>)
 8009ec4:	4816      	ldr	r0, [pc, #88]	; (8009f20 <lwip_netconn_do_write+0x108>)
 8009ec6:	f00b fbdb 	bl	8015680 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009eca:	4818      	ldr	r0, [pc, #96]	; (8009f2c <lwip_netconn_do_write+0x114>)
 8009ecc:	f00b fa23 	bl	8015316 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f00b f982 	bl	80151e2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009ede:	4813      	ldr	r0, [pc, #76]	; (8009f2c <lwip_netconn_do_write+0x114>)
 8009ee0:	f00b fa0a 	bl	80152f8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	785b      	ldrb	r3, [r3, #1]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d110      	bne.n	8009f10 <lwip_netconn_do_write+0xf8>
 8009eee:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <lwip_netconn_do_write+0x100>)
 8009ef0:	f240 722c 	movw	r2, #1836	; 0x72c
 8009ef4:	490c      	ldr	r1, [pc, #48]	; (8009f28 <lwip_netconn_do_write+0x110>)
 8009ef6:	480a      	ldr	r0, [pc, #40]	; (8009f20 <lwip_netconn_do_write+0x108>)
 8009ef8:	f00b fbc2 	bl	8015680 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009efc:	e008      	b.n	8009f10 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009efe:	23f5      	movs	r3, #245	; 0xf5
 8009f00:	73fb      	strb	r3, [r7, #15]
 8009f02:	e001      	b.n	8009f08 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009f04:	23fa      	movs	r3, #250	; 0xfa
 8009f06:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	7bfa      	ldrb	r2, [r7, #15]
 8009f0c:	711a      	strb	r2, [r3, #4]
 8009f0e:	e000      	b.n	8009f12 <lwip_netconn_do_write+0xfa>
        return;
 8009f10:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	0801679c 	.word	0x0801679c
 8009f1c:	08016b40 	.word	0x08016b40
 8009f20:	080167e0 	.word	0x080167e0
 8009f24:	08016cc8 	.word	0x08016cc8
 8009f28:	08016b5c 	.word	0x08016b5c
 8009f2c:	20007f3c 	.word	0x20007f3c

08009f30 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d069      	beq.n	800a022 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009f58:	2b10      	cmp	r3, #16
 8009f5a:	d162      	bne.n	800a022 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d002      	beq.n	8009f6a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d05b      	beq.n	800a022 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009f6a:	7afb      	ldrb	r3, [r7, #11]
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d103      	bne.n	8009f78 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	22f5      	movs	r2, #245	; 0xf5
 8009f74:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009f76:	e059      	b.n	800a02c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d103      	bne.n	8009f86 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	22fb      	movs	r2, #251	; 0xfb
 8009f82:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009f84:	e052      	b.n	800a02c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	7a1b      	ldrb	r3, [r3, #8]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d004      	beq.n	8009f9c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff f9a0 	bl	80092dc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d006      	beq.n	8009fb4 <lwip_netconn_do_close+0x84>
 8009fa6:	4b23      	ldr	r3, [pc, #140]	; (800a034 <lwip_netconn_do_close+0x104>)
 8009fa8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009fac:	4922      	ldr	r1, [pc, #136]	; (800a038 <lwip_netconn_do_close+0x108>)
 8009fae:	4823      	ldr	r0, [pc, #140]	; (800a03c <lwip_netconn_do_close+0x10c>)
 8009fb0:	f00b fb66 	bl	8015680 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2204      	movs	r2, #4
 8009fba:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2100      	movs	r1, #0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff fa04 	bl	80093d8 <lwip_netconn_do_close_internal>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d029      	beq.n	800a02a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	d006      	beq.n	8009fee <lwip_netconn_do_close+0xbe>
 8009fe0:	4b14      	ldr	r3, [pc, #80]	; (800a034 <lwip_netconn_do_close+0x104>)
 8009fe2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009fe6:	4916      	ldr	r1, [pc, #88]	; (800a040 <lwip_netconn_do_close+0x110>)
 8009fe8:	4814      	ldr	r0, [pc, #80]	; (800a03c <lwip_netconn_do_close+0x10c>)
 8009fea:	f00b fb49 	bl	8015680 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009fee:	4815      	ldr	r0, [pc, #84]	; (800a044 <lwip_netconn_do_close+0x114>)
 8009ff0:	f00b f991 	bl	8015316 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	330c      	adds	r3, #12
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f00b f8f0 	bl	80151e2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a002:	4810      	ldr	r0, [pc, #64]	; (800a044 <lwip_netconn_do_close+0x114>)
 800a004:	f00b f978 	bl	80152f8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00b      	beq.n	800a02a <lwip_netconn_do_close+0xfa>
 800a012:	4b08      	ldr	r3, [pc, #32]	; (800a034 <lwip_netconn_do_close+0x104>)
 800a014:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a018:	4909      	ldr	r1, [pc, #36]	; (800a040 <lwip_netconn_do_close+0x110>)
 800a01a:	4808      	ldr	r0, [pc, #32]	; (800a03c <lwip_netconn_do_close+0x10c>)
 800a01c:	f00b fb30 	bl	8015680 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a020:	e003      	b.n	800a02a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	22f5      	movs	r2, #245	; 0xf5
 800a026:	711a      	strb	r2, [r3, #4]
 800a028:	e000      	b.n	800a02c <lwip_netconn_do_close+0xfc>
      return;
 800a02a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	0801679c 	.word	0x0801679c
 800a038:	08016b40 	.word	0x08016b40
 800a03c:	080167e0 	.word	0x080167e0
 800a040:	08016b5c 	.word	0x08016b5c
 800a044:	20007f3c 	.word	0x20007f3c

0800a048 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d013      	beq.n	800a07e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4618      	mov	r0, r3
 800a064:	f001 fd9c 	bl	800bba0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	605a      	str	r2, [r3, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	2006      	movs	r0, #6
 800a07a:	f000 fef1 	bl	800ae60 <memp_free>
  }
}
 800a07e:	bf00      	nop
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d108      	bne.n	800a0a8 <netbuf_next+0x20>
 800a096:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <netbuf_next+0x54>)
 800a098:	22e0      	movs	r2, #224	; 0xe0
 800a09a:	4911      	ldr	r1, [pc, #68]	; (800a0e0 <netbuf_next+0x58>)
 800a09c:	4811      	ldr	r0, [pc, #68]	; (800a0e4 <netbuf_next+0x5c>)
 800a09e:	f00b faef 	bl	8015680 <iprintf>
 800a0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a6:	e014      	b.n	800a0d2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <netbuf_next+0x30>
    return -1;
 800a0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b6:	e00c      	b.n	800a0d2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <netbuf_next+0x48>
    return 1;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e000      	b.n	800a0d2 <netbuf_next+0x4a>
  }
  return 0;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	08016cf4 	.word	0x08016cf4
 800a0e0:	08016e54 	.word	0x08016e54
 800a0e4:	08016d44 	.word	0x08016d44

0800a0e8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a0f2:	f008 f9b3 	bl	801245c <sys_timeouts_sleeptime>
 800a0f6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fe:	d10b      	bne.n	800a118 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a100:	4813      	ldr	r0, [pc, #76]	; (800a150 <tcpip_timeouts_mbox_fetch+0x68>)
 800a102:	f00b f908 	bl	8015316 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a106:	2200      	movs	r2, #0
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f00a ffde 	bl	80150cc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a110:	480f      	ldr	r0, [pc, #60]	; (800a150 <tcpip_timeouts_mbox_fetch+0x68>)
 800a112:	f00b f8f1 	bl	80152f8 <sys_mutex_lock>
    return;
 800a116:	e018      	b.n	800a14a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d102      	bne.n	800a124 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a11e:	f008 f963 	bl	80123e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a122:	e7e6      	b.n	800a0f2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a124:	480a      	ldr	r0, [pc, #40]	; (800a150 <tcpip_timeouts_mbox_fetch+0x68>)
 800a126:	f00b f8f6 	bl	8015316 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f00a ffcc 	bl	80150cc <sys_arch_mbox_fetch>
 800a134:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a136:	4806      	ldr	r0, [pc, #24]	; (800a150 <tcpip_timeouts_mbox_fetch+0x68>)
 800a138:	f00b f8de 	bl	80152f8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d102      	bne.n	800a14a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a144:	f008 f950 	bl	80123e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a148:	e7d3      	b.n	800a0f2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20007f3c 	.word	0x20007f3c

0800a154 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a15c:	4810      	ldr	r0, [pc, #64]	; (800a1a0 <tcpip_thread+0x4c>)
 800a15e:	f00b f8cb 	bl	80152f8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a162:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <tcpip_thread+0x50>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d005      	beq.n	800a176 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <tcpip_thread+0x50>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a0e      	ldr	r2, [pc, #56]	; (800a1a8 <tcpip_thread+0x54>)
 800a170:	6812      	ldr	r2, [r2, #0]
 800a172:	4610      	mov	r0, r2
 800a174:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a176:	f107 030c 	add.w	r3, r7, #12
 800a17a:	4619      	mov	r1, r3
 800a17c:	480b      	ldr	r0, [pc, #44]	; (800a1ac <tcpip_thread+0x58>)
 800a17e:	f7ff ffb3 	bl	800a0e8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d106      	bne.n	800a196 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a188:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <tcpip_thread+0x5c>)
 800a18a:	2291      	movs	r2, #145	; 0x91
 800a18c:	4909      	ldr	r1, [pc, #36]	; (800a1b4 <tcpip_thread+0x60>)
 800a18e:	480a      	ldr	r0, [pc, #40]	; (800a1b8 <tcpip_thread+0x64>)
 800a190:	f00b fa76 	bl	8015680 <iprintf>
      continue;
 800a194:	e003      	b.n	800a19e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 f80f 	bl	800a1bc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a19e:	e7ea      	b.n	800a176 <tcpip_thread+0x22>
 800a1a0:	20007f3c 	.word	0x20007f3c
 800a1a4:	20004a90 	.word	0x20004a90
 800a1a8:	20004a94 	.word	0x20004a94
 800a1ac:	20004a98 	.word	0x20004a98
 800a1b0:	08016e8c 	.word	0x08016e8c
 800a1b4:	08016ebc 	.word	0x08016ebc
 800a1b8:	08016edc 	.word	0x08016edc

0800a1bc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d018      	beq.n	800a1fe <tcpip_thread_handle_msg+0x42>
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d021      	beq.n	800a214 <tcpip_thread_handle_msg+0x58>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d126      	bne.n	800a222 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6850      	ldr	r0, [r2, #4]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	6892      	ldr	r2, [r2, #8]
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	4798      	blx	r3
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d004      	beq.n	800a1f4 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fcd6 	bl	800bba0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	2009      	movs	r0, #9
 800a1f8:	f000 fe32 	bl	800ae60 <memp_free>
      break;
 800a1fc:	e018      	b.n	800a230 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	6892      	ldr	r2, [r2, #8]
 800a206:	4610      	mov	r0, r2
 800a208:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	2008      	movs	r0, #8
 800a20e:	f000 fe27 	bl	800ae60 <memp_free>
      break;
 800a212:	e00d      	b.n	800a230 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	6892      	ldr	r2, [r2, #8]
 800a21c:	4610      	mov	r0, r2
 800a21e:	4798      	blx	r3
      break;
 800a220:	e006      	b.n	800a230 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <tcpip_thread_handle_msg+0x7c>)
 800a224:	22cf      	movs	r2, #207	; 0xcf
 800a226:	4905      	ldr	r1, [pc, #20]	; (800a23c <tcpip_thread_handle_msg+0x80>)
 800a228:	4805      	ldr	r0, [pc, #20]	; (800a240 <tcpip_thread_handle_msg+0x84>)
 800a22a:	f00b fa29 	bl	8015680 <iprintf>
      break;
 800a22e:	bf00      	nop
  }
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	08016e8c 	.word	0x08016e8c
 800a23c:	08016ebc 	.word	0x08016ebc
 800a240:	08016edc 	.word	0x08016edc

0800a244 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a250:	481a      	ldr	r0, [pc, #104]	; (800a2bc <tcpip_inpkt+0x78>)
 800a252:	f00a ff83 	bl	801515c <sys_mbox_valid>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d105      	bne.n	800a268 <tcpip_inpkt+0x24>
 800a25c:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <tcpip_inpkt+0x7c>)
 800a25e:	22fc      	movs	r2, #252	; 0xfc
 800a260:	4918      	ldr	r1, [pc, #96]	; (800a2c4 <tcpip_inpkt+0x80>)
 800a262:	4819      	ldr	r0, [pc, #100]	; (800a2c8 <tcpip_inpkt+0x84>)
 800a264:	f00b fa0c 	bl	8015680 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a268:	2009      	movs	r0, #9
 800a26a:	f000 fda7 	bl	800adbc <memp_malloc>
 800a26e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d102      	bne.n	800a27c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a276:	f04f 33ff 	mov.w	r3, #4294967295
 800a27a:	e01a      	b.n	800a2b2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2200      	movs	r2, #0
 800a280:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a294:	6979      	ldr	r1, [r7, #20]
 800a296:	4809      	ldr	r0, [pc, #36]	; (800a2bc <tcpip_inpkt+0x78>)
 800a298:	f00a fefe 	bl	8015098 <sys_mbox_trypost>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a2a2:	6979      	ldr	r1, [r7, #20]
 800a2a4:	2009      	movs	r0, #9
 800a2a6:	f000 fddb 	bl	800ae60 <memp_free>
    return ERR_MEM;
 800a2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ae:	e000      	b.n	800a2b2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a2b0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20004a98 	.word	0x20004a98
 800a2c0:	08016e8c 	.word	0x08016e8c
 800a2c4:	08016f04 	.word	0x08016f04
 800a2c8:	08016edc 	.word	0x08016edc

0800a2cc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2dc:	f003 0318 	and.w	r3, r3, #24
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d006      	beq.n	800a2f2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a2e4:	4a08      	ldr	r2, [pc, #32]	; (800a308 <tcpip_input+0x3c>)
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ffab 	bl	800a244 <tcpip_inpkt>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	e005      	b.n	800a2fe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a2f2:	4a06      	ldr	r2, [pc, #24]	; (800a30c <tcpip_input+0x40>)
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff ffa4 	bl	800a244 <tcpip_inpkt>
 800a2fc:	4603      	mov	r3, r0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	08014e95 	.word	0x08014e95
 800a30c:	08013db5 	.word	0x08013db5

0800a310 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a31a:	4819      	ldr	r0, [pc, #100]	; (800a380 <tcpip_try_callback+0x70>)
 800a31c:	f00a ff1e 	bl	801515c <sys_mbox_valid>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d106      	bne.n	800a334 <tcpip_try_callback+0x24>
 800a326:	4b17      	ldr	r3, [pc, #92]	; (800a384 <tcpip_try_callback+0x74>)
 800a328:	f240 125d 	movw	r2, #349	; 0x15d
 800a32c:	4916      	ldr	r1, [pc, #88]	; (800a388 <tcpip_try_callback+0x78>)
 800a32e:	4817      	ldr	r0, [pc, #92]	; (800a38c <tcpip_try_callback+0x7c>)
 800a330:	f00b f9a6 	bl	8015680 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a334:	2008      	movs	r0, #8
 800a336:	f000 fd41 	bl	800adbc <memp_malloc>
 800a33a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a342:	f04f 33ff 	mov.w	r3, #4294967295
 800a346:	e017      	b.n	800a378 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2201      	movs	r2, #1
 800a34c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	4808      	ldr	r0, [pc, #32]	; (800a380 <tcpip_try_callback+0x70>)
 800a35e:	f00a fe9b 	bl	8015098 <sys_mbox_trypost>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d006      	beq.n	800a376 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a368:	68f9      	ldr	r1, [r7, #12]
 800a36a:	2008      	movs	r0, #8
 800a36c:	f000 fd78 	bl	800ae60 <memp_free>
    return ERR_MEM;
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	e000      	b.n	800a378 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20004a98 	.word	0x20004a98
 800a384:	08016e8c 	.word	0x08016e8c
 800a388:	08016f04 	.word	0x08016f04
 800a38c:	08016edc 	.word	0x08016edc

0800a390 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a39c:	4806      	ldr	r0, [pc, #24]	; (800a3b8 <tcpip_send_msg_wait_sem+0x28>)
 800a39e:	f00a ffab 	bl	80152f8 <sys_mutex_lock>
  fn(apimsg);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68b8      	ldr	r0, [r7, #8]
 800a3a6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a3a8:	4803      	ldr	r0, [pc, #12]	; (800a3b8 <tcpip_send_msg_wait_sem+0x28>)
 800a3aa:	f00a ffb4 	bl	8015316 <sys_mutex_unlock>
  return ERR_OK;
 800a3ae:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20007f3c 	.word	0x20007f3c

0800a3bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af02      	add	r7, sp, #8
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a3c6:	f000 f871 	bl	800a4ac <lwip_init>

  tcpip_init_done = initfunc;
 800a3ca:	4a17      	ldr	r2, [pc, #92]	; (800a428 <tcpip_init+0x6c>)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a3d0:	4a16      	ldr	r2, [pc, #88]	; (800a42c <tcpip_init+0x70>)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a3d6:	2106      	movs	r1, #6
 800a3d8:	4815      	ldr	r0, [pc, #84]	; (800a430 <tcpip_init+0x74>)
 800a3da:	f00a fe31 	bl	8015040 <sys_mbox_new>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a3e4:	4b13      	ldr	r3, [pc, #76]	; (800a434 <tcpip_init+0x78>)
 800a3e6:	f240 2261 	movw	r2, #609	; 0x261
 800a3ea:	4913      	ldr	r1, [pc, #76]	; (800a438 <tcpip_init+0x7c>)
 800a3ec:	4813      	ldr	r0, [pc, #76]	; (800a43c <tcpip_init+0x80>)
 800a3ee:	f00b f947 	bl	8015680 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a3f2:	4813      	ldr	r0, [pc, #76]	; (800a440 <tcpip_init+0x84>)
 800a3f4:	f00a ff6a 	bl	80152cc <sys_mutex_new>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d006      	beq.n	800a40c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a3fe:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <tcpip_init+0x78>)
 800a400:	f240 2265 	movw	r2, #613	; 0x265
 800a404:	490f      	ldr	r1, [pc, #60]	; (800a444 <tcpip_init+0x88>)
 800a406:	480d      	ldr	r0, [pc, #52]	; (800a43c <tcpip_init+0x80>)
 800a408:	f00b f93a 	bl	8015680 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a40c:	2318      	movs	r3, #24
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a414:	2200      	movs	r2, #0
 800a416:	490c      	ldr	r1, [pc, #48]	; (800a448 <tcpip_init+0x8c>)
 800a418:	480c      	ldr	r0, [pc, #48]	; (800a44c <tcpip_init+0x90>)
 800a41a:	f00a ff89 	bl	8015330 <sys_thread_new>
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20004a90 	.word	0x20004a90
 800a42c:	20004a94 	.word	0x20004a94
 800a430:	20004a98 	.word	0x20004a98
 800a434:	08016e8c 	.word	0x08016e8c
 800a438:	08016f14 	.word	0x08016f14
 800a43c:	08016edc 	.word	0x08016edc
 800a440:	20007f3c 	.word	0x20007f3c
 800a444:	08016f38 	.word	0x08016f38
 800a448:	0800a155 	.word	0x0800a155
 800a44c:	08016f5c 	.word	0x08016f5c

0800a450 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	021b      	lsls	r3, r3, #8
 800a45e:	b21a      	sxth	r2, r3
 800a460:	88fb      	ldrh	r3, [r7, #6]
 800a462:	0a1b      	lsrs	r3, r3, #8
 800a464:	b29b      	uxth	r3, r3
 800a466:	b21b      	sxth	r3, r3
 800a468:	4313      	orrs	r3, r2
 800a46a:	b21b      	sxth	r3, r3
 800a46c:	b29b      	uxth	r3, r3
}
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	061a      	lsls	r2, r3, #24
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	021b      	lsls	r3, r3, #8
 800a48a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	0a1b      	lsrs	r3, r3, #8
 800a494:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a498:	431a      	orrs	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	0e1b      	lsrs	r3, r3, #24
 800a49e:	4313      	orrs	r3, r2
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a4b6:	f00a fefd 	bl	80152b4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a4ba:	f000 f8d5 	bl	800a668 <mem_init>
  memp_init();
 800a4be:	f000 fc31 	bl	800ad24 <memp_init>
  pbuf_init();
  netif_init();
 800a4c2:	f000 fcf7 	bl	800aeb4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a4c6:	f008 f801 	bl	80124cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a4ca:	f001 fe03 	bl	800c0d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a4ce:	f007 ff45 	bl	801235c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <ptr_to_mem+0x20>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	88fb      	ldrh	r3, [r7, #6]
 800a4ec:	4413      	add	r3, r2
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20004a9c 	.word	0x20004a9c

0800a500 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a05      	ldr	r2, [pc, #20]	; (800a520 <mem_to_ptr+0x20>)
 800a50c:	6812      	ldr	r2, [r2, #0]
 800a50e:	1a9b      	subs	r3, r3, r2
 800a510:	b29b      	uxth	r3, r3
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	20004a9c 	.word	0x20004a9c

0800a524 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a524:	b590      	push	{r4, r7, lr}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a52c:	4b45      	ldr	r3, [pc, #276]	; (800a644 <plug_holes+0x120>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d206      	bcs.n	800a544 <plug_holes+0x20>
 800a536:	4b44      	ldr	r3, [pc, #272]	; (800a648 <plug_holes+0x124>)
 800a538:	f240 12df 	movw	r2, #479	; 0x1df
 800a53c:	4943      	ldr	r1, [pc, #268]	; (800a64c <plug_holes+0x128>)
 800a53e:	4844      	ldr	r0, [pc, #272]	; (800a650 <plug_holes+0x12c>)
 800a540:	f00b f89e 	bl	8015680 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a544:	4b43      	ldr	r3, [pc, #268]	; (800a654 <plug_holes+0x130>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d306      	bcc.n	800a55c <plug_holes+0x38>
 800a54e:	4b3e      	ldr	r3, [pc, #248]	; (800a648 <plug_holes+0x124>)
 800a550:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a554:	4940      	ldr	r1, [pc, #256]	; (800a658 <plug_holes+0x134>)
 800a556:	483e      	ldr	r0, [pc, #248]	; (800a650 <plug_holes+0x12c>)
 800a558:	f00b f892 	bl	8015680 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	791b      	ldrb	r3, [r3, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d006      	beq.n	800a572 <plug_holes+0x4e>
 800a564:	4b38      	ldr	r3, [pc, #224]	; (800a648 <plug_holes+0x124>)
 800a566:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a56a:	493c      	ldr	r1, [pc, #240]	; (800a65c <plug_holes+0x138>)
 800a56c:	4838      	ldr	r0, [pc, #224]	; (800a650 <plug_holes+0x12c>)
 800a56e:	f00b f887 	bl	8015680 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a57a:	d906      	bls.n	800a58a <plug_holes+0x66>
 800a57c:	4b32      	ldr	r3, [pc, #200]	; (800a648 <plug_holes+0x124>)
 800a57e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a582:	4937      	ldr	r1, [pc, #220]	; (800a660 <plug_holes+0x13c>)
 800a584:	4832      	ldr	r0, [pc, #200]	; (800a650 <plug_holes+0x12c>)
 800a586:	f00b f87b 	bl	8015680 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff ffa4 	bl	800a4dc <ptr_to_mem>
 800a594:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d024      	beq.n	800a5e8 <plug_holes+0xc4>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	791b      	ldrb	r3, [r3, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d120      	bne.n	800a5e8 <plug_holes+0xc4>
 800a5a6:	4b2b      	ldr	r3, [pc, #172]	; (800a654 <plug_holes+0x130>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d01b      	beq.n	800a5e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a5b0:	4b2c      	ldr	r3, [pc, #176]	; (800a664 <plug_holes+0x140>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d102      	bne.n	800a5c0 <plug_holes+0x9c>
      lfree = mem;
 800a5ba:	4a2a      	ldr	r2, [pc, #168]	; (800a664 <plug_holes+0x140>)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	881a      	ldrh	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5d0:	d00a      	beq.n	800a5e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff ff80 	bl	800a4dc <ptr_to_mem>
 800a5dc:	4604      	mov	r4, r0
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff ff8e 	bl	800a500 <mem_to_ptr>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	885b      	ldrh	r3, [r3, #2]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff ff75 	bl	800a4dc <ptr_to_mem>
 800a5f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d01f      	beq.n	800a63c <plug_holes+0x118>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d11b      	bne.n	800a63c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a604:	4b17      	ldr	r3, [pc, #92]	; (800a664 <plug_holes+0x140>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d102      	bne.n	800a614 <plug_holes+0xf0>
      lfree = pmem;
 800a60e:	4a15      	ldr	r2, [pc, #84]	; (800a664 <plug_holes+0x140>)
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	881a      	ldrh	r2, [r3, #0]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a624:	d00a      	beq.n	800a63c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff ff56 	bl	800a4dc <ptr_to_mem>
 800a630:	4604      	mov	r4, r0
 800a632:	68b8      	ldr	r0, [r7, #8]
 800a634:	f7ff ff64 	bl	800a500 <mem_to_ptr>
 800a638:	4603      	mov	r3, r0
 800a63a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	bd90      	pop	{r4, r7, pc}
 800a644:	20004a9c 	.word	0x20004a9c
 800a648:	08016f6c 	.word	0x08016f6c
 800a64c:	08016f9c 	.word	0x08016f9c
 800a650:	08016fb4 	.word	0x08016fb4
 800a654:	20004aa0 	.word	0x20004aa0
 800a658:	08016fdc 	.word	0x08016fdc
 800a65c:	08016ff8 	.word	0x08016ff8
 800a660:	08017014 	.word	0x08017014
 800a664:	20004aa8 	.word	0x20004aa8

0800a668 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a66e:	4b1f      	ldr	r3, [pc, #124]	; (800a6ec <mem_init+0x84>)
 800a670:	3303      	adds	r3, #3
 800a672:	f023 0303 	bic.w	r3, r3, #3
 800a676:	461a      	mov	r2, r3
 800a678:	4b1d      	ldr	r3, [pc, #116]	; (800a6f0 <mem_init+0x88>)
 800a67a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a67c:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <mem_init+0x88>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a688:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a696:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a69a:	f7ff ff1f 	bl	800a4dc <ptr_to_mem>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	4b14      	ldr	r3, [pc, #80]	; (800a6f4 <mem_init+0x8c>)
 800a6a2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a6a4:	4b13      	ldr	r3, [pc, #76]	; (800a6f4 <mem_init+0x8c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a6ac:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <mem_init+0x8c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a6b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a6b6:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <mem_init+0x8c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a6be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <mem_init+0x88>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a0c      	ldr	r2, [pc, #48]	; (800a6f8 <mem_init+0x90>)
 800a6c6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a6c8:	480c      	ldr	r0, [pc, #48]	; (800a6fc <mem_init+0x94>)
 800a6ca:	f00a fdff 	bl	80152cc <sys_mutex_new>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a6d4:	4b0a      	ldr	r3, [pc, #40]	; (800a700 <mem_init+0x98>)
 800a6d6:	f240 221f 	movw	r2, #543	; 0x21f
 800a6da:	490a      	ldr	r1, [pc, #40]	; (800a704 <mem_init+0x9c>)
 800a6dc:	480a      	ldr	r0, [pc, #40]	; (800a708 <mem_init+0xa0>)
 800a6de:	f00a ffcf 	bl	8015680 <iprintf>
  }
}
 800a6e2:	bf00      	nop
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20007f58 	.word	0x20007f58
 800a6f0:	20004a9c 	.word	0x20004a9c
 800a6f4:	20004aa0 	.word	0x20004aa0
 800a6f8:	20004aa8 	.word	0x20004aa8
 800a6fc:	20004aa4 	.word	0x20004aa4
 800a700:	08016f6c 	.word	0x08016f6c
 800a704:	08017040 	.word	0x08017040
 800a708:	08016fb4 	.word	0x08016fb4

0800a70c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff fef3 	bl	800a500 <mem_to_ptr>
 800a71a:	4603      	mov	r3, r0
 800a71c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff feda 	bl	800a4dc <ptr_to_mem>
 800a728:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff fed4 	bl	800a4dc <ptr_to_mem>
 800a734:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a73e:	d818      	bhi.n	800a772 <mem_link_valid+0x66>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	885b      	ldrh	r3, [r3, #2]
 800a744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a748:	d813      	bhi.n	800a772 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a74e:	8afa      	ldrh	r2, [r7, #22]
 800a750:	429a      	cmp	r2, r3
 800a752:	d004      	beq.n	800a75e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	8afa      	ldrh	r2, [r7, #22]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d109      	bne.n	800a772 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a75e:	4b08      	ldr	r3, [pc, #32]	; (800a780 <mem_link_valid+0x74>)
 800a760:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	429a      	cmp	r2, r3
 800a766:	d006      	beq.n	800a776 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	885b      	ldrh	r3, [r3, #2]
 800a76c:	8afa      	ldrh	r2, [r7, #22]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d001      	beq.n	800a776 <mem_link_valid+0x6a>
    return 0;
 800a772:	2300      	movs	r3, #0
 800a774:	e000      	b.n	800a778 <mem_link_valid+0x6c>
  }
  return 1;
 800a776:	2301      	movs	r3, #1
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20004aa0 	.word	0x20004aa0

0800a784 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d070      	beq.n	800a874 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00d      	beq.n	800a7b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a79c:	4b37      	ldr	r3, [pc, #220]	; (800a87c <mem_free+0xf8>)
 800a79e:	f240 2273 	movw	r2, #627	; 0x273
 800a7a2:	4937      	ldr	r1, [pc, #220]	; (800a880 <mem_free+0xfc>)
 800a7a4:	4837      	ldr	r0, [pc, #220]	; (800a884 <mem_free+0x100>)
 800a7a6:	f00a ff6b 	bl	8015680 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7aa:	f00a fde1 	bl	8015370 <sys_arch_protect>
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f00a fdeb 	bl	801538c <sys_arch_unprotect>
    return;
 800a7b6:	e05e      	b.n	800a876 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3b08      	subs	r3, #8
 800a7bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a7be:	4b32      	ldr	r3, [pc, #200]	; (800a888 <mem_free+0x104>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d306      	bcc.n	800a7d6 <mem_free+0x52>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f103 020c 	add.w	r2, r3, #12
 800a7ce:	4b2f      	ldr	r3, [pc, #188]	; (800a88c <mem_free+0x108>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d90d      	bls.n	800a7f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a7d6:	4b29      	ldr	r3, [pc, #164]	; (800a87c <mem_free+0xf8>)
 800a7d8:	f240 227f 	movw	r2, #639	; 0x27f
 800a7dc:	492c      	ldr	r1, [pc, #176]	; (800a890 <mem_free+0x10c>)
 800a7de:	4829      	ldr	r0, [pc, #164]	; (800a884 <mem_free+0x100>)
 800a7e0:	f00a ff4e 	bl	8015680 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7e4:	f00a fdc4 	bl	8015370 <sys_arch_protect>
 800a7e8:	6138      	str	r0, [r7, #16]
 800a7ea:	6938      	ldr	r0, [r7, #16]
 800a7ec:	f00a fdce 	bl	801538c <sys_arch_unprotect>
    return;
 800a7f0:	e041      	b.n	800a876 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a7f2:	4828      	ldr	r0, [pc, #160]	; (800a894 <mem_free+0x110>)
 800a7f4:	f00a fd80 	bl	80152f8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	791b      	ldrb	r3, [r3, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d110      	bne.n	800a822 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a800:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <mem_free+0xf8>)
 800a802:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a806:	4924      	ldr	r1, [pc, #144]	; (800a898 <mem_free+0x114>)
 800a808:	481e      	ldr	r0, [pc, #120]	; (800a884 <mem_free+0x100>)
 800a80a:	f00a ff39 	bl	8015680 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a80e:	4821      	ldr	r0, [pc, #132]	; (800a894 <mem_free+0x110>)
 800a810:	f00a fd81 	bl	8015316 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a814:	f00a fdac 	bl	8015370 <sys_arch_protect>
 800a818:	6178      	str	r0, [r7, #20]
 800a81a:	6978      	ldr	r0, [r7, #20]
 800a81c:	f00a fdb6 	bl	801538c <sys_arch_unprotect>
    return;
 800a820:	e029      	b.n	800a876 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a822:	69f8      	ldr	r0, [r7, #28]
 800a824:	f7ff ff72 	bl	800a70c <mem_link_valid>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d110      	bne.n	800a850 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a82e:	4b13      	ldr	r3, [pc, #76]	; (800a87c <mem_free+0xf8>)
 800a830:	f240 2295 	movw	r2, #661	; 0x295
 800a834:	4919      	ldr	r1, [pc, #100]	; (800a89c <mem_free+0x118>)
 800a836:	4813      	ldr	r0, [pc, #76]	; (800a884 <mem_free+0x100>)
 800a838:	f00a ff22 	bl	8015680 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a83c:	4815      	ldr	r0, [pc, #84]	; (800a894 <mem_free+0x110>)
 800a83e:	f00a fd6a 	bl	8015316 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a842:	f00a fd95 	bl	8015370 <sys_arch_protect>
 800a846:	61b8      	str	r0, [r7, #24]
 800a848:	69b8      	ldr	r0, [r7, #24]
 800a84a:	f00a fd9f 	bl	801538c <sys_arch_unprotect>
    return;
 800a84e:	e012      	b.n	800a876 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	2200      	movs	r2, #0
 800a854:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a856:	4b12      	ldr	r3, [pc, #72]	; (800a8a0 <mem_free+0x11c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d202      	bcs.n	800a866 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a860:	4a0f      	ldr	r2, [pc, #60]	; (800a8a0 <mem_free+0x11c>)
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a866:	69f8      	ldr	r0, [r7, #28]
 800a868:	f7ff fe5c 	bl	800a524 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a86c:	4809      	ldr	r0, [pc, #36]	; (800a894 <mem_free+0x110>)
 800a86e:	f00a fd52 	bl	8015316 <sys_mutex_unlock>
 800a872:	e000      	b.n	800a876 <mem_free+0xf2>
    return;
 800a874:	bf00      	nop
}
 800a876:	3720      	adds	r7, #32
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	08016f6c 	.word	0x08016f6c
 800a880:	0801705c 	.word	0x0801705c
 800a884:	08016fb4 	.word	0x08016fb4
 800a888:	20004a9c 	.word	0x20004a9c
 800a88c:	20004aa0 	.word	0x20004aa0
 800a890:	08017080 	.word	0x08017080
 800a894:	20004aa4 	.word	0x20004aa4
 800a898:	0801709c 	.word	0x0801709c
 800a89c:	080170c4 	.word	0x080170c4
 800a8a0:	20004aa8 	.word	0x20004aa8

0800a8a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a8b0:	887b      	ldrh	r3, [r7, #2]
 800a8b2:	3303      	adds	r3, #3
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a8bc:	8bfb      	ldrh	r3, [r7, #30]
 800a8be:	2b0b      	cmp	r3, #11
 800a8c0:	d801      	bhi.n	800a8c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a8c6:	8bfb      	ldrh	r3, [r7, #30]
 800a8c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8cc:	d803      	bhi.n	800a8d6 <mem_trim+0x32>
 800a8ce:	8bfa      	ldrh	r2, [r7, #30]
 800a8d0:	887b      	ldrh	r3, [r7, #2]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d201      	bcs.n	800a8da <mem_trim+0x36>
    return NULL;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e0d8      	b.n	800aa8c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a8da:	4b6e      	ldr	r3, [pc, #440]	; (800aa94 <mem_trim+0x1f0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d304      	bcc.n	800a8ee <mem_trim+0x4a>
 800a8e4:	4b6c      	ldr	r3, [pc, #432]	; (800aa98 <mem_trim+0x1f4>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d306      	bcc.n	800a8fc <mem_trim+0x58>
 800a8ee:	4b6b      	ldr	r3, [pc, #428]	; (800aa9c <mem_trim+0x1f8>)
 800a8f0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a8f4:	496a      	ldr	r1, [pc, #424]	; (800aaa0 <mem_trim+0x1fc>)
 800a8f6:	486b      	ldr	r0, [pc, #428]	; (800aaa4 <mem_trim+0x200>)
 800a8f8:	f00a fec2 	bl	8015680 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a8fc:	4b65      	ldr	r3, [pc, #404]	; (800aa94 <mem_trim+0x1f0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	429a      	cmp	r2, r3
 800a904:	d304      	bcc.n	800a910 <mem_trim+0x6c>
 800a906:	4b64      	ldr	r3, [pc, #400]	; (800aa98 <mem_trim+0x1f4>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d307      	bcc.n	800a920 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a910:	f00a fd2e 	bl	8015370 <sys_arch_protect>
 800a914:	60b8      	str	r0, [r7, #8]
 800a916:	68b8      	ldr	r0, [r7, #8]
 800a918:	f00a fd38 	bl	801538c <sys_arch_unprotect>
    return rmem;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	e0b5      	b.n	800aa8c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3b08      	subs	r3, #8
 800a924:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a926:	69b8      	ldr	r0, [r7, #24]
 800a928:	f7ff fdea 	bl	800a500 <mem_to_ptr>
 800a92c:	4603      	mov	r3, r0
 800a92e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	881a      	ldrh	r2, [r3, #0]
 800a934:	8afb      	ldrh	r3, [r7, #22]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	b29b      	uxth	r3, r3
 800a93a:	3b08      	subs	r3, #8
 800a93c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a93e:	8bfa      	ldrh	r2, [r7, #30]
 800a940:	8abb      	ldrh	r3, [r7, #20]
 800a942:	429a      	cmp	r2, r3
 800a944:	d906      	bls.n	800a954 <mem_trim+0xb0>
 800a946:	4b55      	ldr	r3, [pc, #340]	; (800aa9c <mem_trim+0x1f8>)
 800a948:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a94c:	4956      	ldr	r1, [pc, #344]	; (800aaa8 <mem_trim+0x204>)
 800a94e:	4855      	ldr	r0, [pc, #340]	; (800aaa4 <mem_trim+0x200>)
 800a950:	f00a fe96 	bl	8015680 <iprintf>
  if (newsize > size) {
 800a954:	8bfa      	ldrh	r2, [r7, #30]
 800a956:	8abb      	ldrh	r3, [r7, #20]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d901      	bls.n	800a960 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	e095      	b.n	800aa8c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a960:	8bfa      	ldrh	r2, [r7, #30]
 800a962:	8abb      	ldrh	r3, [r7, #20]
 800a964:	429a      	cmp	r2, r3
 800a966:	d101      	bne.n	800a96c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	e08f      	b.n	800aa8c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a96c:	484f      	ldr	r0, [pc, #316]	; (800aaac <mem_trim+0x208>)
 800a96e:	f00a fcc3 	bl	80152f8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	881b      	ldrh	r3, [r3, #0]
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff fdb0 	bl	800a4dc <ptr_to_mem>
 800a97c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	791b      	ldrb	r3, [r3, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d13f      	bne.n	800aa06 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a98e:	d106      	bne.n	800a99e <mem_trim+0xfa>
 800a990:	4b42      	ldr	r3, [pc, #264]	; (800aa9c <mem_trim+0x1f8>)
 800a992:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a996:	4946      	ldr	r1, [pc, #280]	; (800aab0 <mem_trim+0x20c>)
 800a998:	4842      	ldr	r0, [pc, #264]	; (800aaa4 <mem_trim+0x200>)
 800a99a:	f00a fe71 	bl	8015680 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a9a4:	8afa      	ldrh	r2, [r7, #22]
 800a9a6:	8bfb      	ldrh	r3, [r7, #30]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a9b0:	4b40      	ldr	r3, [pc, #256]	; (800aab4 <mem_trim+0x210>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d106      	bne.n	800a9c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a9ba:	89fb      	ldrh	r3, [r7, #14]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff fd8d 	bl	800a4dc <ptr_to_mem>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	4b3b      	ldr	r3, [pc, #236]	; (800aab4 <mem_trim+0x210>)
 800a9c6:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a9c8:	89fb      	ldrh	r3, [r7, #14]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fd86 	bl	800a4dc <ptr_to_mem>
 800a9d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	89ba      	ldrh	r2, [r7, #12]
 800a9dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	8afa      	ldrh	r2, [r7, #22]
 800a9e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	89fa      	ldrh	r2, [r7, #14]
 800a9e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9f2:	d047      	beq.n	800aa84 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff fd6f 	bl	800a4dc <ptr_to_mem>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	89fb      	ldrh	r3, [r7, #14]
 800aa02:	8053      	strh	r3, [r2, #2]
 800aa04:	e03e      	b.n	800aa84 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aa06:	8bfb      	ldrh	r3, [r7, #30]
 800aa08:	f103 0214 	add.w	r2, r3, #20
 800aa0c:	8abb      	ldrh	r3, [r7, #20]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d838      	bhi.n	800aa84 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa12:	8afa      	ldrh	r2, [r7, #22]
 800aa14:	8bfb      	ldrh	r3, [r7, #30]
 800aa16:	4413      	add	r3, r2
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa26:	d106      	bne.n	800aa36 <mem_trim+0x192>
 800aa28:	4b1c      	ldr	r3, [pc, #112]	; (800aa9c <mem_trim+0x1f8>)
 800aa2a:	f240 3216 	movw	r2, #790	; 0x316
 800aa2e:	4920      	ldr	r1, [pc, #128]	; (800aab0 <mem_trim+0x20c>)
 800aa30:	481c      	ldr	r0, [pc, #112]	; (800aaa4 <mem_trim+0x200>)
 800aa32:	f00a fe25 	bl	8015680 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800aa36:	89fb      	ldrh	r3, [r7, #14]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff fd4f 	bl	800a4dc <ptr_to_mem>
 800aa3e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aa40:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <mem_trim+0x210>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d202      	bcs.n	800aa50 <mem_trim+0x1ac>
      lfree = mem2;
 800aa4a:	4a1a      	ldr	r2, [pc, #104]	; (800aab4 <mem_trim+0x210>)
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2200      	movs	r2, #0
 800aa54:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	881a      	ldrh	r2, [r3, #0]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	8afa      	ldrh	r2, [r7, #22]
 800aa62:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	89fa      	ldrh	r2, [r7, #14]
 800aa68:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa72:	d007      	beq.n	800aa84 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7ff fd2f 	bl	800a4dc <ptr_to_mem>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	89fb      	ldrh	r3, [r7, #14]
 800aa82:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa84:	4809      	ldr	r0, [pc, #36]	; (800aaac <mem_trim+0x208>)
 800aa86:	f00a fc46 	bl	8015316 <sys_mutex_unlock>
  return rmem;
 800aa8a:	687b      	ldr	r3, [r7, #4]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3720      	adds	r7, #32
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20004a9c 	.word	0x20004a9c
 800aa98:	20004aa0 	.word	0x20004aa0
 800aa9c:	08016f6c 	.word	0x08016f6c
 800aaa0:	080170f8 	.word	0x080170f8
 800aaa4:	08016fb4 	.word	0x08016fb4
 800aaa8:	08017110 	.word	0x08017110
 800aaac:	20004aa4 	.word	0x20004aa4
 800aab0:	08017130 	.word	0x08017130
 800aab4:	20004aa8 	.word	0x20004aa8

0800aab8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aac2:	88fb      	ldrh	r3, [r7, #6]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <mem_malloc+0x14>
    return NULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	e0e2      	b.n	800ac92 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aacc:	88fb      	ldrh	r3, [r7, #6]
 800aace:	3303      	adds	r3, #3
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f023 0303 	bic.w	r3, r3, #3
 800aad6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aad8:	8bbb      	ldrh	r3, [r7, #28]
 800aada:	2b0b      	cmp	r3, #11
 800aadc:	d801      	bhi.n	800aae2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aade:	230c      	movs	r3, #12
 800aae0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aae2:	8bbb      	ldrh	r3, [r7, #28]
 800aae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aae8:	d803      	bhi.n	800aaf2 <mem_malloc+0x3a>
 800aaea:	8bba      	ldrh	r2, [r7, #28]
 800aaec:	88fb      	ldrh	r3, [r7, #6]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d201      	bcs.n	800aaf6 <mem_malloc+0x3e>
    return NULL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e0cd      	b.n	800ac92 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800aaf6:	4869      	ldr	r0, [pc, #420]	; (800ac9c <mem_malloc+0x1e4>)
 800aaf8:	f00a fbfe 	bl	80152f8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aafc:	4b68      	ldr	r3, [pc, #416]	; (800aca0 <mem_malloc+0x1e8>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff fcfd 	bl	800a500 <mem_to_ptr>
 800ab06:	4603      	mov	r3, r0
 800ab08:	83fb      	strh	r3, [r7, #30]
 800ab0a:	e0b7      	b.n	800ac7c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ab0c:	8bfb      	ldrh	r3, [r7, #30]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff fce4 	bl	800a4dc <ptr_to_mem>
 800ab14:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	791b      	ldrb	r3, [r3, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f040 80a7 	bne.w	800ac6e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	461a      	mov	r2, r3
 800ab26:	8bfb      	ldrh	r3, [r7, #30]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	f1a3 0208 	sub.w	r2, r3, #8
 800ab2e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ab30:	429a      	cmp	r2, r3
 800ab32:	f0c0 809c 	bcc.w	800ac6e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	8bfb      	ldrh	r3, [r7, #30]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	f1a3 0208 	sub.w	r2, r3, #8
 800ab44:	8bbb      	ldrh	r3, [r7, #28]
 800ab46:	3314      	adds	r3, #20
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d333      	bcc.n	800abb4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ab4c:	8bfa      	ldrh	r2, [r7, #30]
 800ab4e:	8bbb      	ldrh	r3, [r7, #28]
 800ab50:	4413      	add	r3, r2
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	3308      	adds	r3, #8
 800ab56:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ab58:	8a7b      	ldrh	r3, [r7, #18]
 800ab5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab5e:	d106      	bne.n	800ab6e <mem_malloc+0xb6>
 800ab60:	4b50      	ldr	r3, [pc, #320]	; (800aca4 <mem_malloc+0x1ec>)
 800ab62:	f240 3287 	movw	r2, #903	; 0x387
 800ab66:	4950      	ldr	r1, [pc, #320]	; (800aca8 <mem_malloc+0x1f0>)
 800ab68:	4850      	ldr	r0, [pc, #320]	; (800acac <mem_malloc+0x1f4>)
 800ab6a:	f00a fd89 	bl	8015680 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ab6e:	8a7b      	ldrh	r3, [r7, #18]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fcb3 	bl	800a4dc <ptr_to_mem>
 800ab76:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	881a      	ldrh	r2, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8bfa      	ldrh	r2, [r7, #30]
 800ab8a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	8a7a      	ldrh	r2, [r7, #18]
 800ab90:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	2201      	movs	r2, #1
 800ab96:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aba0:	d00b      	beq.n	800abba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fc98 	bl	800a4dc <ptr_to_mem>
 800abac:	4602      	mov	r2, r0
 800abae:	8a7b      	ldrh	r3, [r7, #18]
 800abb0:	8053      	strh	r3, [r2, #2]
 800abb2:	e002      	b.n	800abba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2201      	movs	r2, #1
 800abb8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800abba:	4b39      	ldr	r3, [pc, #228]	; (800aca0 <mem_malloc+0x1e8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d127      	bne.n	800ac14 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800abc4:	4b36      	ldr	r3, [pc, #216]	; (800aca0 <mem_malloc+0x1e8>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800abca:	e005      	b.n	800abd8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fc83 	bl	800a4dc <ptr_to_mem>
 800abd6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	791b      	ldrb	r3, [r3, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d004      	beq.n	800abea <mem_malloc+0x132>
 800abe0:	4b33      	ldr	r3, [pc, #204]	; (800acb0 <mem_malloc+0x1f8>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d1f0      	bne.n	800abcc <mem_malloc+0x114>
          }
          lfree = cur;
 800abea:	4a2d      	ldr	r2, [pc, #180]	; (800aca0 <mem_malloc+0x1e8>)
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800abf0:	4b2b      	ldr	r3, [pc, #172]	; (800aca0 <mem_malloc+0x1e8>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	4b2e      	ldr	r3, [pc, #184]	; (800acb0 <mem_malloc+0x1f8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d00b      	beq.n	800ac14 <mem_malloc+0x15c>
 800abfc:	4b28      	ldr	r3, [pc, #160]	; (800aca0 <mem_malloc+0x1e8>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	791b      	ldrb	r3, [r3, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d006      	beq.n	800ac14 <mem_malloc+0x15c>
 800ac06:	4b27      	ldr	r3, [pc, #156]	; (800aca4 <mem_malloc+0x1ec>)
 800ac08:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ac0c:	4929      	ldr	r1, [pc, #164]	; (800acb4 <mem_malloc+0x1fc>)
 800ac0e:	4827      	ldr	r0, [pc, #156]	; (800acac <mem_malloc+0x1f4>)
 800ac10:	f00a fd36 	bl	8015680 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ac14:	4821      	ldr	r0, [pc, #132]	; (800ac9c <mem_malloc+0x1e4>)
 800ac16:	f00a fb7e 	bl	8015316 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ac1a:	8bba      	ldrh	r2, [r7, #28]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	4413      	add	r3, r2
 800ac20:	3308      	adds	r3, #8
 800ac22:	4a23      	ldr	r2, [pc, #140]	; (800acb0 <mem_malloc+0x1f8>)
 800ac24:	6812      	ldr	r2, [r2, #0]
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d906      	bls.n	800ac38 <mem_malloc+0x180>
 800ac2a:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <mem_malloc+0x1ec>)
 800ac2c:	f240 32ba 	movw	r2, #954	; 0x3ba
 800ac30:	4921      	ldr	r1, [pc, #132]	; (800acb8 <mem_malloc+0x200>)
 800ac32:	481e      	ldr	r0, [pc, #120]	; (800acac <mem_malloc+0x1f4>)
 800ac34:	f00a fd24 	bl	8015680 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f003 0303 	and.w	r3, r3, #3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d006      	beq.n	800ac50 <mem_malloc+0x198>
 800ac42:	4b18      	ldr	r3, [pc, #96]	; (800aca4 <mem_malloc+0x1ec>)
 800ac44:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ac48:	491c      	ldr	r1, [pc, #112]	; (800acbc <mem_malloc+0x204>)
 800ac4a:	4818      	ldr	r0, [pc, #96]	; (800acac <mem_malloc+0x1f4>)
 800ac4c:	f00a fd18 	bl	8015680 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <mem_malloc+0x1b0>
 800ac5a:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <mem_malloc+0x1ec>)
 800ac5c:	f240 32be 	movw	r2, #958	; 0x3be
 800ac60:	4917      	ldr	r1, [pc, #92]	; (800acc0 <mem_malloc+0x208>)
 800ac62:	4812      	ldr	r0, [pc, #72]	; (800acac <mem_malloc+0x1f4>)
 800ac64:	f00a fd0c 	bl	8015680 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	e011      	b.n	800ac92 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ac6e:	8bfb      	ldrh	r3, [r7, #30]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fc33 	bl	800a4dc <ptr_to_mem>
 800ac76:	4603      	mov	r3, r0
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ac7c:	8bfa      	ldrh	r2, [r7, #30]
 800ac7e:	8bbb      	ldrh	r3, [r7, #28]
 800ac80:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ac84:	429a      	cmp	r2, r3
 800ac86:	f4ff af41 	bcc.w	800ab0c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ac8a:	4804      	ldr	r0, [pc, #16]	; (800ac9c <mem_malloc+0x1e4>)
 800ac8c:	f00a fb43 	bl	8015316 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3720      	adds	r7, #32
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20004aa4 	.word	0x20004aa4
 800aca0:	20004aa8 	.word	0x20004aa8
 800aca4:	08016f6c 	.word	0x08016f6c
 800aca8:	08017130 	.word	0x08017130
 800acac:	08016fb4 	.word	0x08016fb4
 800acb0:	20004aa0 	.word	0x20004aa0
 800acb4:	08017144 	.word	0x08017144
 800acb8:	08017160 	.word	0x08017160
 800acbc:	08017190 	.word	0x08017190
 800acc0:	080171c0 	.word	0x080171c0

0800acc4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	3303      	adds	r3, #3
 800acda:	f023 0303 	bic.w	r3, r3, #3
 800acde:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	e011      	b.n	800ad0a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	4413      	add	r3, r2
 800ad02:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3301      	adds	r3, #1
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	885b      	ldrh	r3, [r3, #2]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	4293      	cmp	r3, r2
 800ad14:	dbe7      	blt.n	800ace6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ad16:	bf00      	nop
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
	...

0800ad24 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	80fb      	strh	r3, [r7, #6]
 800ad2e:	e009      	b.n	800ad44 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ad30:	88fb      	ldrh	r3, [r7, #6]
 800ad32:	4a08      	ldr	r2, [pc, #32]	; (800ad54 <memp_init+0x30>)
 800ad34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7ff ffc3 	bl	800acc4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	3301      	adds	r3, #1
 800ad42:	80fb      	strh	r3, [r7, #6]
 800ad44:	88fb      	ldrh	r3, [r7, #6]
 800ad46:	2b0c      	cmp	r3, #12
 800ad48:	d9f2      	bls.n	800ad30 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	080199f0 	.word	0x080199f0

0800ad58 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ad60:	f00a fb06 	bl	8015370 <sys_arch_protect>
 800ad64:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d015      	beq.n	800ada0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	6812      	ldr	r2, [r2, #0]
 800ad7c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	f003 0303 	and.w	r3, r3, #3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d006      	beq.n	800ad96 <do_memp_malloc_pool+0x3e>
 800ad88:	4b09      	ldr	r3, [pc, #36]	; (800adb0 <do_memp_malloc_pool+0x58>)
 800ad8a:	f240 1219 	movw	r2, #281	; 0x119
 800ad8e:	4909      	ldr	r1, [pc, #36]	; (800adb4 <do_memp_malloc_pool+0x5c>)
 800ad90:	4809      	ldr	r0, [pc, #36]	; (800adb8 <do_memp_malloc_pool+0x60>)
 800ad92:	f00a fc75 	bl	8015680 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f00a faf8 	bl	801538c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	e003      	b.n	800ada8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f00a faf3 	bl	801538c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	080171e4 	.word	0x080171e4
 800adb4:	08017214 	.word	0x08017214
 800adb8:	08017238 	.word	0x08017238

0800adbc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	2b0c      	cmp	r3, #12
 800adca:	d908      	bls.n	800adde <memp_malloc+0x22>
 800adcc:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <memp_malloc+0x3c>)
 800adce:	f240 1257 	movw	r2, #343	; 0x157
 800add2:	490a      	ldr	r1, [pc, #40]	; (800adfc <memp_malloc+0x40>)
 800add4:	480a      	ldr	r0, [pc, #40]	; (800ae00 <memp_malloc+0x44>)
 800add6:	f00a fc53 	bl	8015680 <iprintf>
 800adda:	2300      	movs	r3, #0
 800addc:	e008      	b.n	800adf0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	4a08      	ldr	r2, [pc, #32]	; (800ae04 <memp_malloc+0x48>)
 800ade2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7ff ffb6 	bl	800ad58 <do_memp_malloc_pool>
 800adec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800adee:	68fb      	ldr	r3, [r7, #12]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	080171e4 	.word	0x080171e4
 800adfc:	08017274 	.word	0x08017274
 800ae00:	08017238 	.word	0x08017238
 800ae04:	080199f0 	.word	0x080199f0

0800ae08 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	f003 0303 	and.w	r3, r3, #3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d006      	beq.n	800ae2a <do_memp_free_pool+0x22>
 800ae1c:	4b0d      	ldr	r3, [pc, #52]	; (800ae54 <do_memp_free_pool+0x4c>)
 800ae1e:	f240 126d 	movw	r2, #365	; 0x16d
 800ae22:	490d      	ldr	r1, [pc, #52]	; (800ae58 <do_memp_free_pool+0x50>)
 800ae24:	480d      	ldr	r0, [pc, #52]	; (800ae5c <do_memp_free_pool+0x54>)
 800ae26:	f00a fc2b 	bl	8015680 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ae2e:	f00a fa9f 	bl	8015370 <sys_arch_protect>
 800ae32:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ae46:	68b8      	ldr	r0, [r7, #8]
 800ae48:	f00a faa0 	bl	801538c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ae4c:	bf00      	nop
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	080171e4 	.word	0x080171e4
 800ae58:	08017294 	.word	0x08017294
 800ae5c:	08017238 	.word	0x08017238

0800ae60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	4603      	mov	r3, r0
 800ae68:	6039      	str	r1, [r7, #0]
 800ae6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	2b0c      	cmp	r3, #12
 800ae70:	d907      	bls.n	800ae82 <memp_free+0x22>
 800ae72:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <memp_free+0x44>)
 800ae74:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ae78:	490b      	ldr	r1, [pc, #44]	; (800aea8 <memp_free+0x48>)
 800ae7a:	480c      	ldr	r0, [pc, #48]	; (800aeac <memp_free+0x4c>)
 800ae7c:	f00a fc00 	bl	8015680 <iprintf>
 800ae80:	e00c      	b.n	800ae9c <memp_free+0x3c>

  if (mem == NULL) {
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d008      	beq.n	800ae9a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ae88:	79fb      	ldrb	r3, [r7, #7]
 800ae8a:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <memp_free+0x50>)
 800ae8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff ffb8 	bl	800ae08 <do_memp_free_pool>
 800ae98:	e000      	b.n	800ae9c <memp_free+0x3c>
    return;
 800ae9a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	080171e4 	.word	0x080171e4
 800aea8:	080172b4 	.word	0x080172b4
 800aeac:	08017238 	.word	0x08017238
 800aeb0:	080199f0 	.word	0x080199f0

0800aeb4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
	...

0800aec4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
 800aed0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d108      	bne.n	800aeea <netif_add+0x26>
 800aed8:	4b57      	ldr	r3, [pc, #348]	; (800b038 <netif_add+0x174>)
 800aeda:	f240 1227 	movw	r2, #295	; 0x127
 800aede:	4957      	ldr	r1, [pc, #348]	; (800b03c <netif_add+0x178>)
 800aee0:	4857      	ldr	r0, [pc, #348]	; (800b040 <netif_add+0x17c>)
 800aee2:	f00a fbcd 	bl	8015680 <iprintf>
 800aee6:	2300      	movs	r3, #0
 800aee8:	e0a2      	b.n	800b030 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d108      	bne.n	800af02 <netif_add+0x3e>
 800aef0:	4b51      	ldr	r3, [pc, #324]	; (800b038 <netif_add+0x174>)
 800aef2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aef6:	4953      	ldr	r1, [pc, #332]	; (800b044 <netif_add+0x180>)
 800aef8:	4851      	ldr	r0, [pc, #324]	; (800b040 <netif_add+0x17c>)
 800aefa:	f00a fbc1 	bl	8015680 <iprintf>
 800aefe:	2300      	movs	r3, #0
 800af00:	e096      	b.n	800b030 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800af08:	4b4f      	ldr	r3, [pc, #316]	; (800b048 <netif_add+0x184>)
 800af0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800af12:	4b4d      	ldr	r3, [pc, #308]	; (800b048 <netif_add+0x184>)
 800af14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800af1c:	4b4a      	ldr	r3, [pc, #296]	; (800b048 <netif_add+0x184>)
 800af1e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	4a45      	ldr	r2, [pc, #276]	; (800b04c <netif_add+0x188>)
 800af36:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a3a      	ldr	r2, [r7, #32]
 800af50:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800af52:	4b3f      	ldr	r3, [pc, #252]	; (800b050 <netif_add+0x18c>)
 800af54:	781a      	ldrb	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af60:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 f913 	bl	800b194 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	4798      	blx	r3
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <netif_add+0xba>
    return NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	e058      	b.n	800b030 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af84:	2bff      	cmp	r3, #255	; 0xff
 800af86:	d103      	bne.n	800af90 <netif_add+0xcc>
        netif->num = 0;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af94:	4b2f      	ldr	r3, [pc, #188]	; (800b054 <netif_add+0x190>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	617b      	str	r3, [r7, #20]
 800af9a:	e02b      	b.n	800aff4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d106      	bne.n	800afb2 <netif_add+0xee>
 800afa4:	4b24      	ldr	r3, [pc, #144]	; (800b038 <netif_add+0x174>)
 800afa6:	f240 128b 	movw	r2, #395	; 0x18b
 800afaa:	492b      	ldr	r1, [pc, #172]	; (800b058 <netif_add+0x194>)
 800afac:	4824      	ldr	r0, [pc, #144]	; (800b040 <netif_add+0x17c>)
 800afae:	f00a fb67 	bl	8015680 <iprintf>
        num_netifs++;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	3301      	adds	r3, #1
 800afb6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2bff      	cmp	r3, #255	; 0xff
 800afbc:	dd06      	ble.n	800afcc <netif_add+0x108>
 800afbe:	4b1e      	ldr	r3, [pc, #120]	; (800b038 <netif_add+0x174>)
 800afc0:	f240 128d 	movw	r2, #397	; 0x18d
 800afc4:	4925      	ldr	r1, [pc, #148]	; (800b05c <netif_add+0x198>)
 800afc6:	481e      	ldr	r0, [pc, #120]	; (800b040 <netif_add+0x17c>)
 800afc8:	f00a fb5a 	bl	8015680 <iprintf>
        if (netif2->num == netif->num) {
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afd8:	429a      	cmp	r2, r3
 800afda:	d108      	bne.n	800afee <netif_add+0x12a>
          netif->num++;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afe2:	3301      	adds	r3, #1
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800afec:	e005      	b.n	800affa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1d0      	bne.n	800af9c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1be      	bne.n	800af7e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b006:	2bfe      	cmp	r3, #254	; 0xfe
 800b008:	d103      	bne.n	800b012 <netif_add+0x14e>
    netif_num = 0;
 800b00a:	4b11      	ldr	r3, [pc, #68]	; (800b050 <netif_add+0x18c>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e006      	b.n	800b020 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b018:	3301      	adds	r3, #1
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <netif_add+0x18c>)
 800b01e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b020:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <netif_add+0x190>)
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b028:	4a0a      	ldr	r2, [pc, #40]	; (800b054 <netif_add+0x190>)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b02e:	68fb      	ldr	r3, [r7, #12]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	080172d0 	.word	0x080172d0
 800b03c:	08017364 	.word	0x08017364
 800b040:	08017320 	.word	0x08017320
 800b044:	08017380 	.word	0x08017380
 800b048:	08019a64 	.word	0x08019a64
 800b04c:	0800b46f 	.word	0x0800b46f
 800b050:	20004ae0 	.word	0x20004ae0
 800b054:	2000b644 	.word	0x2000b644
 800b058:	080173a4 	.word	0x080173a4
 800b05c:	080173b8 	.word	0x080173b8

0800b060 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f002 fe3d 	bl	800dcec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f007 fcf9 	bl	8012a6c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <netif_do_set_ipaddr+0x20>
 800b096:	4b1d      	ldr	r3, [pc, #116]	; (800b10c <netif_do_set_ipaddr+0x88>)
 800b098:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b09c:	491c      	ldr	r1, [pc, #112]	; (800b110 <netif_do_set_ipaddr+0x8c>)
 800b09e:	481d      	ldr	r0, [pc, #116]	; (800b114 <netif_do_set_ipaddr+0x90>)
 800b0a0:	f00a faee 	bl	8015680 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <netif_do_set_ipaddr+0x34>
 800b0aa:	4b18      	ldr	r3, [pc, #96]	; (800b10c <netif_do_set_ipaddr+0x88>)
 800b0ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b0b0:	4917      	ldr	r1, [pc, #92]	; (800b110 <netif_do_set_ipaddr+0x8c>)
 800b0b2:	4818      	ldr	r0, [pc, #96]	; (800b114 <netif_do_set_ipaddr+0x90>)
 800b0b4:	f00a fae4 	bl	8015680 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d01c      	beq.n	800b100 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b0d6:	f107 0314 	add.w	r3, r7, #20
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff ffbf 	bl	800b060 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <netif_do_set_ipaddr+0x6a>
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	e000      	b.n	800b0f0 <netif_do_set_ipaddr+0x6c>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 f8d2 	bl	800b2a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e000      	b.n	800b102 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	080172d0 	.word	0x080172d0
 800b110:	080173e8 	.word	0x080173e8
 800b114:	08017320 	.word	0x08017320

0800b118 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3308      	adds	r3, #8
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d00a      	beq.n	800b148 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <netif_do_set_netmask+0x26>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	e000      	b.n	800b140 <netif_do_set_netmask+0x28>
 800b13e:	2300      	movs	r3, #0
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	60f8      	str	r0, [r7, #12]
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	330c      	adds	r3, #12
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d00a      	beq.n	800b186 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <netif_do_set_gw+0x26>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	e000      	b.n	800b17e <netif_do_set_gw+0x28>
 800b17c:	2300      	movs	r3, #0
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b182:	2301      	movs	r3, #1
 800b184:	e000      	b.n	800b188 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b088      	sub	sp, #32
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b1b0:	4b1c      	ldr	r3, [pc, #112]	; (800b224 <netif_set_addr+0x90>)
 800b1b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b1ba:	4b1a      	ldr	r3, [pc, #104]	; (800b224 <netif_set_addr+0x90>)
 800b1bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b1c4:	4b17      	ldr	r3, [pc, #92]	; (800b224 <netif_set_addr+0x90>)
 800b1c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <netif_set_addr+0x42>
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <netif_set_addr+0x46>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e000      	b.n	800b1dc <netif_set_addr+0x48>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d006      	beq.n	800b1f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b1e4:	f107 0310 	add.w	r3, r7, #16
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff ff49 	bl	800b084 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff ff8e 	bl	800b118 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff ffa8 	bl	800b156 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d106      	bne.n	800b21a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b20c:	f107 0310 	add.w	r3, r7, #16
 800b210:	461a      	mov	r2, r3
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff ff35 	bl	800b084 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b21a:	bf00      	nop
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	08019a64 	.word	0x08019a64

0800b228 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b230:	4a04      	ldr	r2, [pc, #16]	; (800b244 <netif_set_default+0x1c>)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b236:	bf00      	nop
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	2000b648 	.word	0x2000b648

0800b248 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d107      	bne.n	800b266 <netif_set_up+0x1e>
 800b256:	4b0f      	ldr	r3, [pc, #60]	; (800b294 <netif_set_up+0x4c>)
 800b258:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b25c:	490e      	ldr	r1, [pc, #56]	; (800b298 <netif_set_up+0x50>)
 800b25e:	480f      	ldr	r0, [pc, #60]	; (800b29c <netif_set_up+0x54>)
 800b260:	f00a fa0e 	bl	8015680 <iprintf>
 800b264:	e013      	b.n	800b28e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10c      	bne.n	800b28e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b27a:	f043 0301 	orr.w	r3, r3, #1
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b286:	2103      	movs	r1, #3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f809 	bl	800b2a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	080172d0 	.word	0x080172d0
 800b298:	08017458 	.word	0x08017458
 800b29c:	08017320 	.word	0x08017320

0800b2a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <netif_issue_reports+0x20>
 800b2b2:	4b18      	ldr	r3, [pc, #96]	; (800b314 <netif_issue_reports+0x74>)
 800b2b4:	f240 326d 	movw	r2, #877	; 0x36d
 800b2b8:	4917      	ldr	r1, [pc, #92]	; (800b318 <netif_issue_reports+0x78>)
 800b2ba:	4818      	ldr	r0, [pc, #96]	; (800b31c <netif_issue_reports+0x7c>)
 800b2bc:	f00a f9e0 	bl	8015680 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2c6:	f003 0304 	and.w	r3, r3, #4
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d01e      	beq.n	800b30c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d017      	beq.n	800b30c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b2dc:	78fb      	ldrb	r3, [r7, #3]
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d013      	beq.n	800b30e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00e      	beq.n	800b30e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2f6:	f003 0308 	and.w	r3, r3, #8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d007      	beq.n	800b30e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3304      	adds	r3, #4
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f008 fb1b 	bl	8013940 <etharp_request>
 800b30a:	e000      	b.n	800b30e <netif_issue_reports+0x6e>
    return;
 800b30c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	080172d0 	.word	0x080172d0
 800b318:	08017474 	.word	0x08017474
 800b31c:	08017320 	.word	0x08017320

0800b320 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d107      	bne.n	800b33e <netif_set_down+0x1e>
 800b32e:	4b12      	ldr	r3, [pc, #72]	; (800b378 <netif_set_down+0x58>)
 800b330:	f240 329b 	movw	r2, #923	; 0x39b
 800b334:	4911      	ldr	r1, [pc, #68]	; (800b37c <netif_set_down+0x5c>)
 800b336:	4812      	ldr	r0, [pc, #72]	; (800b380 <netif_set_down+0x60>)
 800b338:	f00a f9a2 	bl	8015680 <iprintf>
 800b33c:	e019      	b.n	800b372 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d012      	beq.n	800b372 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b352:	f023 0301 	bic.w	r3, r3, #1
 800b356:	b2da      	uxtb	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b364:	f003 0308 	and.w	r3, r3, #8
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f007 fea5 	bl	80130bc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	080172d0 	.word	0x080172d0
 800b37c:	08017498 	.word	0x08017498
 800b380:	08017320 	.word	0x08017320

0800b384 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d107      	bne.n	800b3a2 <netif_set_link_up+0x1e>
 800b392:	4b13      	ldr	r3, [pc, #76]	; (800b3e0 <netif_set_link_up+0x5c>)
 800b394:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b398:	4912      	ldr	r1, [pc, #72]	; (800b3e4 <netif_set_link_up+0x60>)
 800b39a:	4813      	ldr	r0, [pc, #76]	; (800b3e8 <netif_set_link_up+0x64>)
 800b39c:	f00a f970 	bl	8015680 <iprintf>
 800b3a0:	e01b      	b.n	800b3da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d114      	bne.n	800b3da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3b6:	f043 0304 	orr.w	r3, r3, #4
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b3c2:	2103      	movs	r1, #3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff ff6b 	bl	800b2a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <netif_set_link_up+0x56>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	080172d0 	.word	0x080172d0
 800b3e4:	080174b8 	.word	0x080174b8
 800b3e8:	08017320 	.word	0x08017320

0800b3ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d107      	bne.n	800b40a <netif_set_link_down+0x1e>
 800b3fa:	4b11      	ldr	r3, [pc, #68]	; (800b440 <netif_set_link_down+0x54>)
 800b3fc:	f240 4206 	movw	r2, #1030	; 0x406
 800b400:	4910      	ldr	r1, [pc, #64]	; (800b444 <netif_set_link_down+0x58>)
 800b402:	4811      	ldr	r0, [pc, #68]	; (800b448 <netif_set_link_down+0x5c>)
 800b404:	f00a f93c 	bl	8015680 <iprintf>
 800b408:	e017      	b.n	800b43a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d010      	beq.n	800b43a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b41e:	f023 0304 	bic.w	r3, r3, #4
 800b422:	b2da      	uxtb	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	69db      	ldr	r3, [r3, #28]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <netif_set_link_down+0x4e>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	080172d0 	.word	0x080172d0
 800b444:	080174dc 	.word	0x080174dc
 800b448:	08017320 	.word	0x08017320

0800b44c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	61da      	str	r2, [r3, #28]
  }
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b47a:	f06f 030b 	mvn.w	r3, #11
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
	...

0800b48c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d013      	beq.n	800b4c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b49c:	4b0d      	ldr	r3, [pc, #52]	; (800b4d4 <netif_get_by_index+0x48>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	e00c      	b.n	800b4be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	79fa      	ldrb	r2, [r7, #7]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d101      	bne.n	800b4b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	e006      	b.n	800b4c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1ef      	bne.n	800b4a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	2000b644 	.word	0x2000b644

0800b4d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b4de:	f009 ff47 	bl	8015370 <sys_arch_protect>
 800b4e2:	6038      	str	r0, [r7, #0]
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <pbuf_free_ooseq+0x44>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
 800b4ea:	6838      	ldr	r0, [r7, #0]
 800b4ec:	f009 ff4e 	bl	801538c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b4f0:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <pbuf_free_ooseq+0x48>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	607b      	str	r3, [r7, #4]
 800b4f6:	e00a      	b.n	800b50e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f002 fc31 	bl	800dd68 <tcp_free_ooseq>
      return;
 800b506:	e005      	b.n	800b514 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	607b      	str	r3, [r7, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1f1      	bne.n	800b4f8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	2000b64c 	.word	0x2000b64c
 800b520:	2000b654 	.word	0x2000b654

0800b524 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b52c:	f7ff ffd4 	bl	800b4d8 <pbuf_free_ooseq>
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b53e:	f009 ff17 	bl	8015370 <sys_arch_protect>
 800b542:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b544:	4b0f      	ldr	r3, [pc, #60]	; (800b584 <pbuf_pool_is_empty+0x4c>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b54a:	4b0e      	ldr	r3, [pc, #56]	; (800b584 <pbuf_pool_is_empty+0x4c>)
 800b54c:	2201      	movs	r2, #1
 800b54e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f009 ff1b 	bl	801538c <sys_arch_unprotect>

  if (!queued) {
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10f      	bne.n	800b57c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b55c:	2100      	movs	r1, #0
 800b55e:	480a      	ldr	r0, [pc, #40]	; (800b588 <pbuf_pool_is_empty+0x50>)
 800b560:	f7fe fed6 	bl	800a310 <tcpip_try_callback>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d008      	beq.n	800b57c <pbuf_pool_is_empty+0x44>
 800b56a:	f009 ff01 	bl	8015370 <sys_arch_protect>
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	4b04      	ldr	r3, [pc, #16]	; (800b584 <pbuf_pool_is_empty+0x4c>)
 800b572:	2200      	movs	r2, #0
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f009 ff08 	bl	801538c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	2000b64c 	.word	0x2000b64c
 800b588:	0800b525 	.word	0x0800b525

0800b58c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4611      	mov	r1, r2
 800b598:	461a      	mov	r2, r3
 800b59a:	460b      	mov	r3, r1
 800b59c:	80fb      	strh	r3, [r7, #6]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	88fa      	ldrh	r2, [r7, #6]
 800b5b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	88ba      	ldrh	r2, [r7, #4]
 800b5b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b5ba:	8b3b      	ldrh	r3, [r7, #24]
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	7f3a      	ldrb	r2, [r7, #28]
 800b5c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	73da      	strb	r2, [r3, #15]
}
 800b5d4:	bf00      	nop
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08c      	sub	sp, #48	; 0x30
 800b5e4:	af02      	add	r7, sp, #8
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	71fb      	strb	r3, [r7, #7]
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	80bb      	strh	r3, [r7, #4]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b5f2:	79fb      	ldrb	r3, [r7, #7]
 800b5f4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b5f6:	887b      	ldrh	r3, [r7, #2]
 800b5f8:	2b41      	cmp	r3, #65	; 0x41
 800b5fa:	d00b      	beq.n	800b614 <pbuf_alloc+0x34>
 800b5fc:	2b41      	cmp	r3, #65	; 0x41
 800b5fe:	dc02      	bgt.n	800b606 <pbuf_alloc+0x26>
 800b600:	2b01      	cmp	r3, #1
 800b602:	d007      	beq.n	800b614 <pbuf_alloc+0x34>
 800b604:	e0c2      	b.n	800b78c <pbuf_alloc+0x1ac>
 800b606:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b60a:	d00b      	beq.n	800b624 <pbuf_alloc+0x44>
 800b60c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b610:	d070      	beq.n	800b6f4 <pbuf_alloc+0x114>
 800b612:	e0bb      	b.n	800b78c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b614:	887a      	ldrh	r2, [r7, #2]
 800b616:	88bb      	ldrh	r3, [r7, #4]
 800b618:	4619      	mov	r1, r3
 800b61a:	2000      	movs	r0, #0
 800b61c:	f000 f8d2 	bl	800b7c4 <pbuf_alloc_reference>
 800b620:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b622:	e0bd      	b.n	800b7a0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b628:	2300      	movs	r3, #0
 800b62a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b62c:	88bb      	ldrh	r3, [r7, #4]
 800b62e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b630:	200c      	movs	r0, #12
 800b632:	f7ff fbc3 	bl	800adbc <memp_malloc>
 800b636:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d109      	bne.n	800b652 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b63e:	f7ff ff7b 	bl	800b538 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b64a:	f000 faa9 	bl	800bba0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	e0a7      	b.n	800b7a2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b654:	3303      	adds	r3, #3
 800b656:	b29b      	uxth	r3, r3
 800b658:	f023 0303 	bic.w	r3, r3, #3
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b662:	b29b      	uxth	r3, r3
 800b664:	8b7a      	ldrh	r2, [r7, #26]
 800b666:	4293      	cmp	r3, r2
 800b668:	bf28      	it	cs
 800b66a:	4613      	movcs	r3, r2
 800b66c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b66e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b670:	3310      	adds	r3, #16
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	4413      	add	r3, r2
 800b676:	3303      	adds	r3, #3
 800b678:	f023 0303 	bic.w	r3, r3, #3
 800b67c:	4618      	mov	r0, r3
 800b67e:	89f9      	ldrh	r1, [r7, #14]
 800b680:	8b7a      	ldrh	r2, [r7, #26]
 800b682:	2300      	movs	r3, #0
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	887b      	ldrh	r3, [r7, #2]
 800b688:	9300      	str	r3, [sp, #0]
 800b68a:	460b      	mov	r3, r1
 800b68c:	4601      	mov	r1, r0
 800b68e:	6938      	ldr	r0, [r7, #16]
 800b690:	f7ff ff7c 	bl	800b58c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f003 0303 	and.w	r3, r3, #3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d006      	beq.n	800b6ae <pbuf_alloc+0xce>
 800b6a0:	4b42      	ldr	r3, [pc, #264]	; (800b7ac <pbuf_alloc+0x1cc>)
 800b6a2:	f240 1201 	movw	r2, #257	; 0x101
 800b6a6:	4942      	ldr	r1, [pc, #264]	; (800b7b0 <pbuf_alloc+0x1d0>)
 800b6a8:	4842      	ldr	r0, [pc, #264]	; (800b7b4 <pbuf_alloc+0x1d4>)
 800b6aa:	f009 ffe9 	bl	8015680 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b6ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6b0:	3303      	adds	r3, #3
 800b6b2:	f023 0303 	bic.w	r3, r3, #3
 800b6b6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b6ba:	d106      	bne.n	800b6ca <pbuf_alloc+0xea>
 800b6bc:	4b3b      	ldr	r3, [pc, #236]	; (800b7ac <pbuf_alloc+0x1cc>)
 800b6be:	f240 1203 	movw	r2, #259	; 0x103
 800b6c2:	493d      	ldr	r1, [pc, #244]	; (800b7b8 <pbuf_alloc+0x1d8>)
 800b6c4:	483b      	ldr	r0, [pc, #236]	; (800b7b4 <pbuf_alloc+0x1d4>)
 800b6c6:	f009 ffdb 	bl	8015680 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6d4:	e002      	b.n	800b6dc <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b6e0:	8b7a      	ldrh	r2, [r7, #26]
 800b6e2:	89fb      	ldrh	r3, [r7, #14]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b6ec:	8b7b      	ldrh	r3, [r7, #26]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d19e      	bne.n	800b630 <pbuf_alloc+0x50>
      break;
 800b6f2:	e055      	b.n	800b7a0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b6f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6f6:	3303      	adds	r3, #3
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	f023 0303 	bic.w	r3, r3, #3
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	88bb      	ldrh	r3, [r7, #4]
 800b702:	3303      	adds	r3, #3
 800b704:	b29b      	uxth	r3, r3
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	4413      	add	r3, r2
 800b70e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b710:	8b3b      	ldrh	r3, [r7, #24]
 800b712:	3310      	adds	r3, #16
 800b714:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b716:	8b3a      	ldrh	r2, [r7, #24]
 800b718:	88bb      	ldrh	r3, [r7, #4]
 800b71a:	3303      	adds	r3, #3
 800b71c:	f023 0303 	bic.w	r3, r3, #3
 800b720:	429a      	cmp	r2, r3
 800b722:	d306      	bcc.n	800b732 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b724:	8afa      	ldrh	r2, [r7, #22]
 800b726:	88bb      	ldrh	r3, [r7, #4]
 800b728:	3303      	adds	r3, #3
 800b72a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b72e:	429a      	cmp	r2, r3
 800b730:	d201      	bcs.n	800b736 <pbuf_alloc+0x156>
        return NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	e035      	b.n	800b7a2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b736:	8afb      	ldrh	r3, [r7, #22]
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff f9bd 	bl	800aab8 <mem_malloc>
 800b73e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <pbuf_alloc+0x16a>
        return NULL;
 800b746:	2300      	movs	r3, #0
 800b748:	e02b      	b.n	800b7a2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b74a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b74c:	3310      	adds	r3, #16
 800b74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b750:	4413      	add	r3, r2
 800b752:	3303      	adds	r3, #3
 800b754:	f023 0303 	bic.w	r3, r3, #3
 800b758:	4618      	mov	r0, r3
 800b75a:	88b9      	ldrh	r1, [r7, #4]
 800b75c:	88ba      	ldrh	r2, [r7, #4]
 800b75e:	2300      	movs	r3, #0
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	887b      	ldrh	r3, [r7, #2]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	460b      	mov	r3, r1
 800b768:	4601      	mov	r1, r0
 800b76a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b76c:	f7ff ff0e 	bl	800b58c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	f003 0303 	and.w	r3, r3, #3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d010      	beq.n	800b79e <pbuf_alloc+0x1be>
 800b77c:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <pbuf_alloc+0x1cc>)
 800b77e:	f240 1223 	movw	r2, #291	; 0x123
 800b782:	490e      	ldr	r1, [pc, #56]	; (800b7bc <pbuf_alloc+0x1dc>)
 800b784:	480b      	ldr	r0, [pc, #44]	; (800b7b4 <pbuf_alloc+0x1d4>)
 800b786:	f009 ff7b 	bl	8015680 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b78a:	e008      	b.n	800b79e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b78c:	4b07      	ldr	r3, [pc, #28]	; (800b7ac <pbuf_alloc+0x1cc>)
 800b78e:	f240 1227 	movw	r2, #295	; 0x127
 800b792:	490b      	ldr	r1, [pc, #44]	; (800b7c0 <pbuf_alloc+0x1e0>)
 800b794:	4807      	ldr	r0, [pc, #28]	; (800b7b4 <pbuf_alloc+0x1d4>)
 800b796:	f009 ff73 	bl	8015680 <iprintf>
      return NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	e001      	b.n	800b7a2 <pbuf_alloc+0x1c2>
      break;
 800b79e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3728      	adds	r7, #40	; 0x28
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	08017500 	.word	0x08017500
 800b7b0:	08017530 	.word	0x08017530
 800b7b4:	08017560 	.word	0x08017560
 800b7b8:	08017588 	.word	0x08017588
 800b7bc:	080175bc 	.word	0x080175bc
 800b7c0:	080175e8 	.word	0x080175e8

0800b7c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	807b      	strh	r3, [r7, #2]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b7d4:	883b      	ldrh	r3, [r7, #0]
 800b7d6:	2b41      	cmp	r3, #65	; 0x41
 800b7d8:	d009      	beq.n	800b7ee <pbuf_alloc_reference+0x2a>
 800b7da:	883b      	ldrh	r3, [r7, #0]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d006      	beq.n	800b7ee <pbuf_alloc_reference+0x2a>
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <pbuf_alloc_reference+0x5c>)
 800b7e2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b7e6:	490f      	ldr	r1, [pc, #60]	; (800b824 <pbuf_alloc_reference+0x60>)
 800b7e8:	480f      	ldr	r0, [pc, #60]	; (800b828 <pbuf_alloc_reference+0x64>)
 800b7ea:	f009 ff49 	bl	8015680 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b7ee:	200b      	movs	r0, #11
 800b7f0:	f7ff fae4 	bl	800adbc <memp_malloc>
 800b7f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e00b      	b.n	800b818 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b800:	8879      	ldrh	r1, [r7, #2]
 800b802:	887a      	ldrh	r2, [r7, #2]
 800b804:	2300      	movs	r3, #0
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	883b      	ldrh	r3, [r7, #0]
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	460b      	mov	r3, r1
 800b80e:	6879      	ldr	r1, [r7, #4]
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f7ff febb 	bl	800b58c <pbuf_init_alloced_pbuf>
  return p;
 800b816:	68fb      	ldr	r3, [r7, #12]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	08017500 	.word	0x08017500
 800b824:	08017604 	.word	0x08017604
 800b828:	08017560 	.word	0x08017560

0800b82c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af02      	add	r7, sp, #8
 800b832:	607b      	str	r3, [r7, #4]
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
 800b838:	460b      	mov	r3, r1
 800b83a:	81bb      	strh	r3, [r7, #12]
 800b83c:	4613      	mov	r3, r2
 800b83e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b844:	8a7b      	ldrh	r3, [r7, #18]
 800b846:	3303      	adds	r3, #3
 800b848:	f023 0203 	bic.w	r2, r3, #3
 800b84c:	89bb      	ldrh	r3, [r7, #12]
 800b84e:	441a      	add	r2, r3
 800b850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b852:	429a      	cmp	r2, r3
 800b854:	d901      	bls.n	800b85a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	e018      	b.n	800b88c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d007      	beq.n	800b870 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b860:	8a7b      	ldrh	r3, [r7, #18]
 800b862:	3303      	adds	r3, #3
 800b864:	f023 0303 	bic.w	r3, r3, #3
 800b868:	6a3a      	ldr	r2, [r7, #32]
 800b86a:	4413      	add	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e001      	b.n	800b874 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	89b9      	ldrh	r1, [r7, #12]
 800b878:	89ba      	ldrh	r2, [r7, #12]
 800b87a:	2302      	movs	r3, #2
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	897b      	ldrh	r3, [r7, #10]
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	460b      	mov	r3, r1
 800b884:	6979      	ldr	r1, [r7, #20]
 800b886:	f7ff fe81 	bl	800b58c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b88a:	687b      	ldr	r3, [r7, #4]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d106      	bne.n	800b8b4 <pbuf_realloc+0x20>
 800b8a6:	4b3a      	ldr	r3, [pc, #232]	; (800b990 <pbuf_realloc+0xfc>)
 800b8a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b8ac:	4939      	ldr	r1, [pc, #228]	; (800b994 <pbuf_realloc+0x100>)
 800b8ae:	483a      	ldr	r0, [pc, #232]	; (800b998 <pbuf_realloc+0x104>)
 800b8b0:	f009 fee6 	bl	8015680 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	891b      	ldrh	r3, [r3, #8]
 800b8b8:	887a      	ldrh	r2, [r7, #2]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d264      	bcs.n	800b988 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	891a      	ldrh	r2, [r3, #8]
 800b8c2:	887b      	ldrh	r3, [r7, #2]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b8c8:	887b      	ldrh	r3, [r7, #2]
 800b8ca:	817b      	strh	r3, [r7, #10]
  q = p;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b8d0:	e018      	b.n	800b904 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	895b      	ldrh	r3, [r3, #10]
 800b8d6:	897a      	ldrh	r2, [r7, #10]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	891a      	ldrh	r2, [r3, #8]
 800b8e0:	893b      	ldrh	r3, [r7, #8]
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <pbuf_realloc+0x70>
 800b8f6:	4b26      	ldr	r3, [pc, #152]	; (800b990 <pbuf_realloc+0xfc>)
 800b8f8:	f240 12af 	movw	r2, #431	; 0x1af
 800b8fc:	4927      	ldr	r1, [pc, #156]	; (800b99c <pbuf_realloc+0x108>)
 800b8fe:	4826      	ldr	r0, [pc, #152]	; (800b998 <pbuf_realloc+0x104>)
 800b900:	f009 febe 	bl	8015680 <iprintf>
  while (rem_len > q->len) {
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	895b      	ldrh	r3, [r3, #10]
 800b908:	897a      	ldrh	r2, [r7, #10]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d8e1      	bhi.n	800b8d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	7b1b      	ldrb	r3, [r3, #12]
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	2b00      	cmp	r3, #0
 800b918:	d122      	bne.n	800b960 <pbuf_realloc+0xcc>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	895b      	ldrh	r3, [r3, #10]
 800b91e:	897a      	ldrh	r2, [r7, #10]
 800b920:	429a      	cmp	r2, r3
 800b922:	d01d      	beq.n	800b960 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	7b5b      	ldrb	r3, [r3, #13]
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d117      	bne.n	800b960 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	461a      	mov	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	897b      	ldrh	r3, [r7, #10]
 800b93e:	4413      	add	r3, r2
 800b940:	b29b      	uxth	r3, r3
 800b942:	4619      	mov	r1, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7fe ffad 	bl	800a8a4 <mem_trim>
 800b94a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <pbuf_realloc+0xcc>
 800b952:	4b0f      	ldr	r3, [pc, #60]	; (800b990 <pbuf_realloc+0xfc>)
 800b954:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b958:	4911      	ldr	r1, [pc, #68]	; (800b9a0 <pbuf_realloc+0x10c>)
 800b95a:	480f      	ldr	r0, [pc, #60]	; (800b998 <pbuf_realloc+0x104>)
 800b95c:	f009 fe90 	bl	8015680 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	897a      	ldrh	r2, [r7, #10]
 800b964:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	895a      	ldrh	r2, [r3, #10]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d004      	beq.n	800b980 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f910 	bl	800bba0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	e000      	b.n	800b98a <pbuf_realloc+0xf6>
    return;
 800b988:	bf00      	nop

}
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	08017500 	.word	0x08017500
 800b994:	08017618 	.word	0x08017618
 800b998:	08017560 	.word	0x08017560
 800b99c:	08017630 	.word	0x08017630
 800b9a0:	08017648 	.word	0x08017648

0800b9a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <pbuf_add_header_impl+0x22>
 800b9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ba68 <pbuf_add_header_impl+0xc4>)
 800b9ba:	f240 12df 	movw	r2, #479	; 0x1df
 800b9be:	492b      	ldr	r1, [pc, #172]	; (800ba6c <pbuf_add_header_impl+0xc8>)
 800b9c0:	482b      	ldr	r0, [pc, #172]	; (800ba70 <pbuf_add_header_impl+0xcc>)
 800b9c2:	f009 fe5d 	bl	8015680 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <pbuf_add_header_impl+0x30>
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9d2:	d301      	bcc.n	800b9d8 <pbuf_add_header_impl+0x34>
    return 1;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e043      	b.n	800ba60 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <pbuf_add_header_impl+0x3e>
    return 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e03e      	b.n	800ba60 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	891a      	ldrh	r2, [r3, #8]
 800b9ea:	8a7b      	ldrh	r3, [r7, #18]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	8a7a      	ldrh	r2, [r7, #18]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d901      	bls.n	800b9fa <pbuf_add_header_impl+0x56>
    return 1;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e032      	b.n	800ba60 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	7b1b      	ldrb	r3, [r3, #12]
 800b9fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ba00:	8a3b      	ldrh	r3, [r7, #16]
 800ba02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00c      	beq.n	800ba24 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	685a      	ldr	r2, [r3, #4]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	425b      	negs	r3, r3
 800ba12:	4413      	add	r3, r2
 800ba14:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3310      	adds	r3, #16
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d20d      	bcs.n	800ba3c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e01d      	b.n	800ba60 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ba24:	79fb      	ldrb	r3, [r7, #7]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d006      	beq.n	800ba38 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	425b      	negs	r3, r3
 800ba32:	4413      	add	r3, r2
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	e001      	b.n	800ba3c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e011      	b.n	800ba60 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	895a      	ldrh	r2, [r3, #10]
 800ba46:	8a7b      	ldrh	r3, [r7, #18]
 800ba48:	4413      	add	r3, r2
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	891a      	ldrh	r2, [r3, #8]
 800ba54:	8a7b      	ldrh	r3, [r7, #18]
 800ba56:	4413      	add	r3, r2
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	811a      	strh	r2, [r3, #8]


  return 0;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	08017500 	.word	0x08017500
 800ba6c:	08017664 	.word	0x08017664
 800ba70:	08017560 	.word	0x08017560

0800ba74 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ba7e:	2200      	movs	r2, #0
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff ff8e 	bl	800b9a4 <pbuf_add_header_impl>
 800ba88:	4603      	mov	r3, r0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d106      	bne.n	800bab2 <pbuf_remove_header+0x1e>
 800baa4:	4b20      	ldr	r3, [pc, #128]	; (800bb28 <pbuf_remove_header+0x94>)
 800baa6:	f240 224b 	movw	r2, #587	; 0x24b
 800baaa:	4920      	ldr	r1, [pc, #128]	; (800bb2c <pbuf_remove_header+0x98>)
 800baac:	4820      	ldr	r0, [pc, #128]	; (800bb30 <pbuf_remove_header+0x9c>)
 800baae:	f009 fde7 	bl	8015680 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <pbuf_remove_header+0x2c>
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800babe:	d301      	bcc.n	800bac4 <pbuf_remove_header+0x30>
    return 1;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e02c      	b.n	800bb1e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <pbuf_remove_header+0x3a>
    return 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	e027      	b.n	800bb1e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	895b      	ldrh	r3, [r3, #10]
 800bad6:	89fa      	ldrh	r2, [r7, #14]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d908      	bls.n	800baee <pbuf_remove_header+0x5a>
 800badc:	4b12      	ldr	r3, [pc, #72]	; (800bb28 <pbuf_remove_header+0x94>)
 800bade:	f240 2255 	movw	r2, #597	; 0x255
 800bae2:	4914      	ldr	r1, [pc, #80]	; (800bb34 <pbuf_remove_header+0xa0>)
 800bae4:	4812      	ldr	r0, [pc, #72]	; (800bb30 <pbuf_remove_header+0x9c>)
 800bae6:	f009 fdcb 	bl	8015680 <iprintf>
 800baea:	2301      	movs	r3, #1
 800baec:	e017      	b.n	800bb1e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	441a      	add	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	895a      	ldrh	r2, [r3, #10]
 800bb04:	89fb      	ldrh	r3, [r7, #14]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	891a      	ldrh	r2, [r3, #8]
 800bb12:	89fb      	ldrh	r3, [r7, #14]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	08017500 	.word	0x08017500
 800bb2c:	08017664 	.word	0x08017664
 800bb30:	08017560 	.word	0x08017560
 800bb34:	08017670 	.word	0x08017670

0800bb38 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	807b      	strh	r3, [r7, #2]
 800bb44:	4613      	mov	r3, r2
 800bb46:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bb48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	da08      	bge.n	800bb62 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bb50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb54:	425b      	negs	r3, r3
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff ff9b 	bl	800ba94 <pbuf_remove_header>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	e007      	b.n	800bb72 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bb62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb66:	787a      	ldrb	r2, [r7, #1]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff ff1a 	bl	800b9a4 <pbuf_add_header_impl>
 800bb70:	4603      	mov	r3, r0
  }
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b082      	sub	sp, #8
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bb86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff ffd2 	bl	800bb38 <pbuf_header_impl>
 800bb94:	4603      	mov	r3, r0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10b      	bne.n	800bbc6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d106      	bne.n	800bbc2 <pbuf_free+0x22>
 800bbb4:	4b3b      	ldr	r3, [pc, #236]	; (800bca4 <pbuf_free+0x104>)
 800bbb6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bbba:	493b      	ldr	r1, [pc, #236]	; (800bca8 <pbuf_free+0x108>)
 800bbbc:	483b      	ldr	r0, [pc, #236]	; (800bcac <pbuf_free+0x10c>)
 800bbbe:	f009 fd5f 	bl	8015680 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e069      	b.n	800bc9a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bbca:	e062      	b.n	800bc92 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bbcc:	f009 fbd0 	bl	8015370 <sys_arch_protect>
 800bbd0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	7b9b      	ldrb	r3, [r3, #14]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <pbuf_free+0x48>
 800bbda:	4b32      	ldr	r3, [pc, #200]	; (800bca4 <pbuf_free+0x104>)
 800bbdc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bbe0:	4933      	ldr	r1, [pc, #204]	; (800bcb0 <pbuf_free+0x110>)
 800bbe2:	4832      	ldr	r0, [pc, #200]	; (800bcac <pbuf_free+0x10c>)
 800bbe4:	f009 fd4c 	bl	8015680 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7b9b      	ldrb	r3, [r3, #14]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	739a      	strb	r2, [r3, #14]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7b9b      	ldrb	r3, [r3, #14]
 800bbf8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bbfa:	69b8      	ldr	r0, [r7, #24]
 800bbfc:	f009 fbc6 	bl	801538c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d143      	bne.n	800bc8e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7b1b      	ldrb	r3, [r3, #12]
 800bc10:	f003 030f 	and.w	r3, r3, #15
 800bc14:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	7b5b      	ldrb	r3, [r3, #13]
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d011      	beq.n	800bc46 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d106      	bne.n	800bc3c <pbuf_free+0x9c>
 800bc2e:	4b1d      	ldr	r3, [pc, #116]	; (800bca4 <pbuf_free+0x104>)
 800bc30:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bc34:	491f      	ldr	r1, [pc, #124]	; (800bcb4 <pbuf_free+0x114>)
 800bc36:	481d      	ldr	r0, [pc, #116]	; (800bcac <pbuf_free+0x10c>)
 800bc38:	f009 fd22 	bl	8015680 <iprintf>
        pc->custom_free_function(p);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	4798      	blx	r3
 800bc44:	e01d      	b.n	800bc82 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d104      	bne.n	800bc56 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bc4c:	6879      	ldr	r1, [r7, #4]
 800bc4e:	200c      	movs	r0, #12
 800bc50:	f7ff f906 	bl	800ae60 <memp_free>
 800bc54:	e015      	b.n	800bc82 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d104      	bne.n	800bc66 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bc5c:	6879      	ldr	r1, [r7, #4]
 800bc5e:	200b      	movs	r0, #11
 800bc60:	f7ff f8fe 	bl	800ae60 <memp_free>
 800bc64:	e00d      	b.n	800bc82 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d103      	bne.n	800bc74 <pbuf_free+0xd4>
          mem_free(p);
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7fe fd89 	bl	800a784 <mem_free>
 800bc72:	e006      	b.n	800bc82 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bc74:	4b0b      	ldr	r3, [pc, #44]	; (800bca4 <pbuf_free+0x104>)
 800bc76:	f240 320f 	movw	r2, #783	; 0x30f
 800bc7a:	490f      	ldr	r1, [pc, #60]	; (800bcb8 <pbuf_free+0x118>)
 800bc7c:	480b      	ldr	r0, [pc, #44]	; (800bcac <pbuf_free+0x10c>)
 800bc7e:	f009 fcff 	bl	8015680 <iprintf>
        }
      }
      count++;
 800bc82:	7ffb      	ldrb	r3, [r7, #31]
 800bc84:	3301      	adds	r3, #1
 800bc86:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	607b      	str	r3, [r7, #4]
 800bc8c:	e001      	b.n	800bc92 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d199      	bne.n	800bbcc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bc98:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3720      	adds	r7, #32
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	08017500 	.word	0x08017500
 800bca8:	08017664 	.word	0x08017664
 800bcac:	08017560 	.word	0x08017560
 800bcb0:	08017690 	.word	0x08017690
 800bcb4:	080176a8 	.word	0x080176a8
 800bcb8:	080176cc 	.word	0x080176cc

0800bcbc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bcc8:	e005      	b.n	800bcd6 <pbuf_clen+0x1a>
    ++len;
 800bcca:	89fb      	ldrh	r3, [r7, #14]
 800bccc:	3301      	adds	r3, #1
 800bcce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1f6      	bne.n	800bcca <pbuf_clen+0xe>
  }
  return len;
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
	...

0800bcec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d016      	beq.n	800bd28 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bcfa:	f009 fb39 	bl	8015370 <sys_arch_protect>
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	7b9b      	ldrb	r3, [r3, #14]
 800bd04:	3301      	adds	r3, #1
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	739a      	strb	r2, [r3, #14]
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f009 fb3d 	bl	801538c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	7b9b      	ldrb	r3, [r3, #14]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <pbuf_ref+0x3c>
 800bd1a:	4b05      	ldr	r3, [pc, #20]	; (800bd30 <pbuf_ref+0x44>)
 800bd1c:	f240 3242 	movw	r2, #834	; 0x342
 800bd20:	4904      	ldr	r1, [pc, #16]	; (800bd34 <pbuf_ref+0x48>)
 800bd22:	4805      	ldr	r0, [pc, #20]	; (800bd38 <pbuf_ref+0x4c>)
 800bd24:	f009 fcac 	bl	8015680 <iprintf>
  }
}
 800bd28:	bf00      	nop
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	08017500 	.word	0x08017500
 800bd34:	080176e0 	.word	0x080176e0
 800bd38:	08017560 	.word	0x08017560

0800bd3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <pbuf_cat+0x16>
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d107      	bne.n	800bd62 <pbuf_cat+0x26>
 800bd52:	4b20      	ldr	r3, [pc, #128]	; (800bdd4 <pbuf_cat+0x98>)
 800bd54:	f240 325a 	movw	r2, #858	; 0x35a
 800bd58:	491f      	ldr	r1, [pc, #124]	; (800bdd8 <pbuf_cat+0x9c>)
 800bd5a:	4820      	ldr	r0, [pc, #128]	; (800bddc <pbuf_cat+0xa0>)
 800bd5c:	f009 fc90 	bl	8015680 <iprintf>
 800bd60:	e034      	b.n	800bdcc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	e00a      	b.n	800bd7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	891a      	ldrh	r2, [r3, #8]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	891b      	ldrh	r3, [r3, #8]
 800bd70:	4413      	add	r3, r2
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	60fb      	str	r3, [r7, #12]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1f0      	bne.n	800bd68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	891a      	ldrh	r2, [r3, #8]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	895b      	ldrh	r3, [r3, #10]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d006      	beq.n	800bda0 <pbuf_cat+0x64>
 800bd92:	4b10      	ldr	r3, [pc, #64]	; (800bdd4 <pbuf_cat+0x98>)
 800bd94:	f240 3262 	movw	r2, #866	; 0x362
 800bd98:	4911      	ldr	r1, [pc, #68]	; (800bde0 <pbuf_cat+0xa4>)
 800bd9a:	4810      	ldr	r0, [pc, #64]	; (800bddc <pbuf_cat+0xa0>)
 800bd9c:	f009 fc70 	bl	8015680 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d006      	beq.n	800bdb6 <pbuf_cat+0x7a>
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <pbuf_cat+0x98>)
 800bdaa:	f240 3263 	movw	r2, #867	; 0x363
 800bdae:	490d      	ldr	r1, [pc, #52]	; (800bde4 <pbuf_cat+0xa8>)
 800bdb0:	480a      	ldr	r0, [pc, #40]	; (800bddc <pbuf_cat+0xa0>)
 800bdb2:	f009 fc65 	bl	8015680 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	891a      	ldrh	r2, [r3, #8]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	891b      	ldrh	r3, [r3, #8]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	08017500 	.word	0x08017500
 800bdd8:	080176f4 	.word	0x080176f4
 800bddc:	08017560 	.word	0x08017560
 800bde0:	0801772c 	.word	0x0801772c
 800bde4:	0801775c 	.word	0x0801775c

0800bde8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	617b      	str	r3, [r7, #20]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d008      	beq.n	800be12 <pbuf_copy+0x2a>
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d005      	beq.n	800be12 <pbuf_copy+0x2a>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	891a      	ldrh	r2, [r3, #8]
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	891b      	ldrh	r3, [r3, #8]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d209      	bcs.n	800be26 <pbuf_copy+0x3e>
 800be12:	4b57      	ldr	r3, [pc, #348]	; (800bf70 <pbuf_copy+0x188>)
 800be14:	f240 32ca 	movw	r2, #970	; 0x3ca
 800be18:	4956      	ldr	r1, [pc, #344]	; (800bf74 <pbuf_copy+0x18c>)
 800be1a:	4857      	ldr	r0, [pc, #348]	; (800bf78 <pbuf_copy+0x190>)
 800be1c:	f009 fc30 	bl	8015680 <iprintf>
 800be20:	f06f 030f 	mvn.w	r3, #15
 800be24:	e09f      	b.n	800bf66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	895b      	ldrh	r3, [r3, #10]
 800be2a:	461a      	mov	r2, r3
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	1ad2      	subs	r2, r2, r3
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	895b      	ldrh	r3, [r3, #10]
 800be34:	4619      	mov	r1, r3
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	1acb      	subs	r3, r1, r3
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d306      	bcc.n	800be4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	895b      	ldrh	r3, [r3, #10]
 800be42:	461a      	mov	r2, r3
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	e005      	b.n	800be58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	895b      	ldrh	r3, [r3, #10]
 800be50:	461a      	mov	r2, r3
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	18d0      	adds	r0, r2, r3
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	4413      	add	r3, r2
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4619      	mov	r1, r3
 800be6c:	f009 fb9b 	bl	80155a6 <memcpy>
    offset_to += len;
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	4413      	add	r3, r2
 800be76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	4413      	add	r3, r2
 800be7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	895b      	ldrh	r3, [r3, #10]
 800be84:	461a      	mov	r2, r3
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	4293      	cmp	r3, r2
 800be8a:	d906      	bls.n	800be9a <pbuf_copy+0xb2>
 800be8c:	4b38      	ldr	r3, [pc, #224]	; (800bf70 <pbuf_copy+0x188>)
 800be8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800be92:	493a      	ldr	r1, [pc, #232]	; (800bf7c <pbuf_copy+0x194>)
 800be94:	4838      	ldr	r0, [pc, #224]	; (800bf78 <pbuf_copy+0x190>)
 800be96:	f009 fbf3 	bl	8015680 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	895b      	ldrh	r3, [r3, #10]
 800be9e:	461a      	mov	r2, r3
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d906      	bls.n	800beb4 <pbuf_copy+0xcc>
 800bea6:	4b32      	ldr	r3, [pc, #200]	; (800bf70 <pbuf_copy+0x188>)
 800bea8:	f240 32da 	movw	r2, #986	; 0x3da
 800beac:	4934      	ldr	r1, [pc, #208]	; (800bf80 <pbuf_copy+0x198>)
 800beae:	4832      	ldr	r0, [pc, #200]	; (800bf78 <pbuf_copy+0x190>)
 800beb0:	f009 fbe6 	bl	8015680 <iprintf>
    if (offset_from >= p_from->len) {
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	895b      	ldrh	r3, [r3, #10]
 800beb8:	461a      	mov	r2, r3
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d304      	bcc.n	800beca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	895b      	ldrh	r3, [r3, #10]
 800bece:	461a      	mov	r2, r3
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d114      	bne.n	800bf00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10c      	bne.n	800bf00 <pbuf_copy+0x118>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d009      	beq.n	800bf00 <pbuf_copy+0x118>
 800beec:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <pbuf_copy+0x188>)
 800beee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bef2:	4924      	ldr	r1, [pc, #144]	; (800bf84 <pbuf_copy+0x19c>)
 800bef4:	4820      	ldr	r0, [pc, #128]	; (800bf78 <pbuf_copy+0x190>)
 800bef6:	f009 fbc3 	bl	8015680 <iprintf>
 800befa:	f06f 030f 	mvn.w	r3, #15
 800befe:	e032      	b.n	800bf66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d013      	beq.n	800bf2e <pbuf_copy+0x146>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	895a      	ldrh	r2, [r3, #10]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	891b      	ldrh	r3, [r3, #8]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d10d      	bne.n	800bf2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d009      	beq.n	800bf2e <pbuf_copy+0x146>
 800bf1a:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <pbuf_copy+0x188>)
 800bf1c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800bf20:	4919      	ldr	r1, [pc, #100]	; (800bf88 <pbuf_copy+0x1a0>)
 800bf22:	4815      	ldr	r0, [pc, #84]	; (800bf78 <pbuf_copy+0x190>)
 800bf24:	f009 fbac 	bl	8015680 <iprintf>
 800bf28:	f06f 0305 	mvn.w	r3, #5
 800bf2c:	e01b      	b.n	800bf66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d013      	beq.n	800bf5c <pbuf_copy+0x174>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	895a      	ldrh	r2, [r3, #10]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	891b      	ldrh	r3, [r3, #8]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d10d      	bne.n	800bf5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d009      	beq.n	800bf5c <pbuf_copy+0x174>
 800bf48:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <pbuf_copy+0x188>)
 800bf4a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800bf4e:	490e      	ldr	r1, [pc, #56]	; (800bf88 <pbuf_copy+0x1a0>)
 800bf50:	4809      	ldr	r0, [pc, #36]	; (800bf78 <pbuf_copy+0x190>)
 800bf52:	f009 fb95 	bl	8015680 <iprintf>
 800bf56:	f06f 0305 	mvn.w	r3, #5
 800bf5a:	e004      	b.n	800bf66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f47f af61 	bne.w	800be26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	08017500 	.word	0x08017500
 800bf74:	080177a8 	.word	0x080177a8
 800bf78:	08017560 	.word	0x08017560
 800bf7c:	080177d8 	.word	0x080177d8
 800bf80:	080177f0 	.word	0x080177f0
 800bf84:	0801780c 	.word	0x0801780c
 800bf88:	0801781c 	.word	0x0801781c

0800bf8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	4611      	mov	r1, r2
 800bf98:	461a      	mov	r2, r3
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	80fb      	strh	r3, [r7, #6]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d108      	bne.n	800bfc2 <pbuf_copy_partial+0x36>
 800bfb0:	4b2b      	ldr	r3, [pc, #172]	; (800c060 <pbuf_copy_partial+0xd4>)
 800bfb2:	f240 420a 	movw	r2, #1034	; 0x40a
 800bfb6:	492b      	ldr	r1, [pc, #172]	; (800c064 <pbuf_copy_partial+0xd8>)
 800bfb8:	482b      	ldr	r0, [pc, #172]	; (800c068 <pbuf_copy_partial+0xdc>)
 800bfba:	f009 fb61 	bl	8015680 <iprintf>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	e04a      	b.n	800c058 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d108      	bne.n	800bfda <pbuf_copy_partial+0x4e>
 800bfc8:	4b25      	ldr	r3, [pc, #148]	; (800c060 <pbuf_copy_partial+0xd4>)
 800bfca:	f240 420b 	movw	r2, #1035	; 0x40b
 800bfce:	4927      	ldr	r1, [pc, #156]	; (800c06c <pbuf_copy_partial+0xe0>)
 800bfd0:	4825      	ldr	r0, [pc, #148]	; (800c068 <pbuf_copy_partial+0xdc>)
 800bfd2:	f009 fb55 	bl	8015680 <iprintf>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e03e      	b.n	800c058 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	e034      	b.n	800c04a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bfe0:	88bb      	ldrh	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00a      	beq.n	800bffc <pbuf_copy_partial+0x70>
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	895b      	ldrh	r3, [r3, #10]
 800bfea:	88ba      	ldrh	r2, [r7, #4]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d305      	bcc.n	800bffc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	895b      	ldrh	r3, [r3, #10]
 800bff4:	88ba      	ldrh	r2, [r7, #4]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	80bb      	strh	r3, [r7, #4]
 800bffa:	e023      	b.n	800c044 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	895a      	ldrh	r2, [r3, #10]
 800c000:	88bb      	ldrh	r3, [r7, #4]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c006:	8b3a      	ldrh	r2, [r7, #24]
 800c008:	88fb      	ldrh	r3, [r7, #6]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d901      	bls.n	800c012 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c00e:	88fb      	ldrh	r3, [r7, #6]
 800c010:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c012:	8b7b      	ldrh	r3, [r7, #26]
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	18d0      	adds	r0, r2, r3
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	88bb      	ldrh	r3, [r7, #4]
 800c01e:	4413      	add	r3, r2
 800c020:	8b3a      	ldrh	r2, [r7, #24]
 800c022:	4619      	mov	r1, r3
 800c024:	f009 fabf 	bl	80155a6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c028:	8afa      	ldrh	r2, [r7, #22]
 800c02a:	8b3b      	ldrh	r3, [r7, #24]
 800c02c:	4413      	add	r3, r2
 800c02e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c030:	8b7a      	ldrh	r2, [r7, #26]
 800c032:	8b3b      	ldrh	r3, [r7, #24]
 800c034:	4413      	add	r3, r2
 800c036:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c038:	88fa      	ldrh	r2, [r7, #6]
 800c03a:	8b3b      	ldrh	r3, [r7, #24]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	61fb      	str	r3, [r7, #28]
 800c04a:	88fb      	ldrh	r3, [r7, #6]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <pbuf_copy_partial+0xca>
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1c4      	bne.n	800bfe0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c056:	8afb      	ldrh	r3, [r7, #22]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3720      	adds	r7, #32
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	08017500 	.word	0x08017500
 800c064:	08017848 	.word	0x08017848
 800c068:	08017560 	.word	0x08017560
 800c06c:	08017868 	.word	0x08017868

0800c070 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	603a      	str	r2, [r7, #0]
 800c07a:	71fb      	strb	r3, [r7, #7]
 800c07c:	460b      	mov	r3, r1
 800c07e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	8919      	ldrh	r1, [r3, #8]
 800c084:	88ba      	ldrh	r2, [r7, #4]
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff faa9 	bl	800b5e0 <pbuf_alloc>
 800c08e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <pbuf_clone+0x2a>
    return NULL;
 800c096:	2300      	movs	r3, #0
 800c098:	e011      	b.n	800c0be <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7ff fea3 	bl	800bde8 <pbuf_copy>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c0a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d006      	beq.n	800c0bc <pbuf_clone+0x4c>
 800c0ae:	4b06      	ldr	r3, [pc, #24]	; (800c0c8 <pbuf_clone+0x58>)
 800c0b0:	f240 5224 	movw	r2, #1316	; 0x524
 800c0b4:	4905      	ldr	r1, [pc, #20]	; (800c0cc <pbuf_clone+0x5c>)
 800c0b6:	4806      	ldr	r0, [pc, #24]	; (800c0d0 <pbuf_clone+0x60>)
 800c0b8:	f009 fae2 	bl	8015680 <iprintf>
  return q;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	08017500 	.word	0x08017500
 800c0cc:	08017974 	.word	0x08017974
 800c0d0:	08017560 	.word	0x08017560

0800c0d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c0d8:	f009 faea 	bl	80156b0 <rand>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	4b01      	ldr	r3, [pc, #4]	; (800c0f4 <tcp_init+0x20>)
 800c0ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c0f0:	bf00      	nop
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	20000014 	.word	0x20000014

0800c0f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	7d1b      	ldrb	r3, [r3, #20]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d105      	bne.n	800c114 <tcp_free+0x1c>
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <tcp_free+0x2c>)
 800c10a:	22d4      	movs	r2, #212	; 0xd4
 800c10c:	4906      	ldr	r1, [pc, #24]	; (800c128 <tcp_free+0x30>)
 800c10e:	4807      	ldr	r0, [pc, #28]	; (800c12c <tcp_free+0x34>)
 800c110:	f009 fab6 	bl	8015680 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	2001      	movs	r0, #1
 800c118:	f7fe fea2 	bl	800ae60 <memp_free>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	08017a00 	.word	0x08017a00
 800c128:	08017a30 	.word	0x08017a30
 800c12c:	08017a44 	.word	0x08017a44

0800c130 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7d1b      	ldrb	r3, [r3, #20]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d105      	bne.n	800c14c <tcp_free_listen+0x1c>
 800c140:	4b06      	ldr	r3, [pc, #24]	; (800c15c <tcp_free_listen+0x2c>)
 800c142:	22df      	movs	r2, #223	; 0xdf
 800c144:	4906      	ldr	r1, [pc, #24]	; (800c160 <tcp_free_listen+0x30>)
 800c146:	4807      	ldr	r0, [pc, #28]	; (800c164 <tcp_free_listen+0x34>)
 800c148:	f009 fa9a 	bl	8015680 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c14c:	6879      	ldr	r1, [r7, #4]
 800c14e:	2002      	movs	r0, #2
 800c150:	f7fe fe86 	bl	800ae60 <memp_free>
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	08017a00 	.word	0x08017a00
 800c160:	08017a6c 	.word	0x08017a6c
 800c164:	08017a44 	.word	0x08017a44

0800c168 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c16c:	f001 f89a 	bl	800d2a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c170:	4b07      	ldr	r3, [pc, #28]	; (800c190 <tcp_tmr+0x28>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	3301      	adds	r3, #1
 800c176:	b2da      	uxtb	r2, r3
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <tcp_tmr+0x28>)
 800c17a:	701a      	strb	r2, [r3, #0]
 800c17c:	4b04      	ldr	r3, [pc, #16]	; (800c190 <tcp_tmr+0x28>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c188:	f000 fd4e 	bl	800cc28 <tcp_slowtmr>
  }
}
 800c18c:	bf00      	nop
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20004ae1 	.word	0x20004ae1

0800c194 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d105      	bne.n	800c1b0 <tcp_remove_listener+0x1c>
 800c1a4:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <tcp_remove_listener+0x48>)
 800c1a6:	22ff      	movs	r2, #255	; 0xff
 800c1a8:	490d      	ldr	r1, [pc, #52]	; (800c1e0 <tcp_remove_listener+0x4c>)
 800c1aa:	480e      	ldr	r0, [pc, #56]	; (800c1e4 <tcp_remove_listener+0x50>)
 800c1ac:	f009 fa68 	bl	8015680 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	e00a      	b.n	800c1cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d102      	bne.n	800c1c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	60fb      	str	r3, [r7, #12]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1f1      	bne.n	800c1b6 <tcp_remove_listener+0x22>
    }
  }
}
 800c1d2:	bf00      	nop
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	08017a00 	.word	0x08017a00
 800c1e0:	08017a88 	.word	0x08017a88
 800c1e4:	08017a44 	.word	0x08017a44

0800c1e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <tcp_listen_closed+0x1c>
 800c1f6:	4b14      	ldr	r3, [pc, #80]	; (800c248 <tcp_listen_closed+0x60>)
 800c1f8:	f240 1211 	movw	r2, #273	; 0x111
 800c1fc:	4913      	ldr	r1, [pc, #76]	; (800c24c <tcp_listen_closed+0x64>)
 800c1fe:	4814      	ldr	r0, [pc, #80]	; (800c250 <tcp_listen_closed+0x68>)
 800c200:	f009 fa3e 	bl	8015680 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7d1b      	ldrb	r3, [r3, #20]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d006      	beq.n	800c21a <tcp_listen_closed+0x32>
 800c20c:	4b0e      	ldr	r3, [pc, #56]	; (800c248 <tcp_listen_closed+0x60>)
 800c20e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c212:	4910      	ldr	r1, [pc, #64]	; (800c254 <tcp_listen_closed+0x6c>)
 800c214:	480e      	ldr	r0, [pc, #56]	; (800c250 <tcp_listen_closed+0x68>)
 800c216:	f009 fa33 	bl	8015680 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c21a:	2301      	movs	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	e00b      	b.n	800c238 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c220:	4a0d      	ldr	r2, [pc, #52]	; (800c258 <tcp_listen_closed+0x70>)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff ffb1 	bl	800c194 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d9f0      	bls.n	800c220 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c23e:	bf00      	nop
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	08017a00 	.word	0x08017a00
 800c24c:	08017ab0 	.word	0x08017ab0
 800c250:	08017a44 	.word	0x08017a44
 800c254:	08017abc 	.word	0x08017abc
 800c258:	08019a3c 	.word	0x08019a3c

0800c25c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c25c:	b5b0      	push	{r4, r5, r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af04      	add	r7, sp, #16
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d106      	bne.n	800c27c <tcp_close_shutdown+0x20>
 800c26e:	4b61      	ldr	r3, [pc, #388]	; (800c3f4 <tcp_close_shutdown+0x198>)
 800c270:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c274:	4960      	ldr	r1, [pc, #384]	; (800c3f8 <tcp_close_shutdown+0x19c>)
 800c276:	4861      	ldr	r0, [pc, #388]	; (800c3fc <tcp_close_shutdown+0x1a0>)
 800c278:	f009 fa02 	bl	8015680 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c27c:	78fb      	ldrb	r3, [r7, #3]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d066      	beq.n	800c350 <tcp_close_shutdown+0xf4>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7d1b      	ldrb	r3, [r3, #20]
 800c286:	2b04      	cmp	r3, #4
 800c288:	d003      	beq.n	800c292 <tcp_close_shutdown+0x36>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7d1b      	ldrb	r3, [r3, #20]
 800c28e:	2b07      	cmp	r3, #7
 800c290:	d15e      	bne.n	800c350 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c296:	2b00      	cmp	r3, #0
 800c298:	d104      	bne.n	800c2a4 <tcp_close_shutdown+0x48>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c29e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c2a2:	d055      	beq.n	800c350 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	8b5b      	ldrh	r3, [r3, #26]
 800c2a8:	f003 0310 	and.w	r3, r3, #16
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d106      	bne.n	800c2be <tcp_close_shutdown+0x62>
 800c2b0:	4b50      	ldr	r3, [pc, #320]	; (800c3f4 <tcp_close_shutdown+0x198>)
 800c2b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c2b6:	4952      	ldr	r1, [pc, #328]	; (800c400 <tcp_close_shutdown+0x1a4>)
 800c2b8:	4850      	ldr	r0, [pc, #320]	; (800c3fc <tcp_close_shutdown+0x1a0>)
 800c2ba:	f009 f9e1 	bl	8015680 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c2c6:	687d      	ldr	r5, [r7, #4]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	8ad2      	ldrh	r2, [r2, #22]
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	8b09      	ldrh	r1, [r1, #24]
 800c2d4:	9102      	str	r1, [sp, #8]
 800c2d6:	9201      	str	r2, [sp, #4]
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	462b      	mov	r3, r5
 800c2dc:	4622      	mov	r2, r4
 800c2de:	4601      	mov	r1, r0
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f005 fdb9 	bl	8011e58 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f001 fb8a 	bl	800da00 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c2ec:	4b45      	ldr	r3, [pc, #276]	; (800c404 <tcp_close_shutdown+0x1a8>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d105      	bne.n	800c302 <tcp_close_shutdown+0xa6>
 800c2f6:	4b43      	ldr	r3, [pc, #268]	; (800c404 <tcp_close_shutdown+0x1a8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	4a41      	ldr	r2, [pc, #260]	; (800c404 <tcp_close_shutdown+0x1a8>)
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	e013      	b.n	800c32a <tcp_close_shutdown+0xce>
 800c302:	4b40      	ldr	r3, [pc, #256]	; (800c404 <tcp_close_shutdown+0x1a8>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	e00c      	b.n	800c324 <tcp_close_shutdown+0xc8>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	429a      	cmp	r2, r3
 800c312:	d104      	bne.n	800c31e <tcp_close_shutdown+0xc2>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	68da      	ldr	r2, [r3, #12]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	60da      	str	r2, [r3, #12]
 800c31c:	e005      	b.n	800c32a <tcp_close_shutdown+0xce>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	60fb      	str	r3, [r7, #12]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1ef      	bne.n	800c30a <tcp_close_shutdown+0xae>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	60da      	str	r2, [r3, #12]
 800c330:	4b35      	ldr	r3, [pc, #212]	; (800c408 <tcp_close_shutdown+0x1ac>)
 800c332:	2201      	movs	r2, #1
 800c334:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c336:	4b35      	ldr	r3, [pc, #212]	; (800c40c <tcp_close_shutdown+0x1b0>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d102      	bne.n	800c346 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c340:	f004 f81c 	bl	801037c <tcp_trigger_input_pcb_close>
 800c344:	e002      	b.n	800c34c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f7ff fed6 	bl	800c0f8 <tcp_free>
      }
      return ERR_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	e04d      	b.n	800c3ec <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	7d1b      	ldrb	r3, [r3, #20]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d02d      	beq.n	800c3b4 <tcp_close_shutdown+0x158>
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d036      	beq.n	800c3ca <tcp_close_shutdown+0x16e>
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d13f      	bne.n	800c3e0 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	8adb      	ldrh	r3, [r3, #22]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d021      	beq.n	800c3ac <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c368:	4b29      	ldr	r3, [pc, #164]	; (800c410 <tcp_close_shutdown+0x1b4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d105      	bne.n	800c37e <tcp_close_shutdown+0x122>
 800c372:	4b27      	ldr	r3, [pc, #156]	; (800c410 <tcp_close_shutdown+0x1b4>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	4a25      	ldr	r2, [pc, #148]	; (800c410 <tcp_close_shutdown+0x1b4>)
 800c37a:	6013      	str	r3, [r2, #0]
 800c37c:	e013      	b.n	800c3a6 <tcp_close_shutdown+0x14a>
 800c37e:	4b24      	ldr	r3, [pc, #144]	; (800c410 <tcp_close_shutdown+0x1b4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	60bb      	str	r3, [r7, #8]
 800c384:	e00c      	b.n	800c3a0 <tcp_close_shutdown+0x144>
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d104      	bne.n	800c39a <tcp_close_shutdown+0x13e>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68da      	ldr	r2, [r3, #12]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	60da      	str	r2, [r3, #12]
 800c398:	e005      	b.n	800c3a6 <tcp_close_shutdown+0x14a>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	60bb      	str	r3, [r7, #8]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1ef      	bne.n	800c386 <tcp_close_shutdown+0x12a>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff fea3 	bl	800c0f8 <tcp_free>
      break;
 800c3b2:	e01a      	b.n	800c3ea <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff ff17 	bl	800c1e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c3ba:	6879      	ldr	r1, [r7, #4]
 800c3bc:	4815      	ldr	r0, [pc, #84]	; (800c414 <tcp_close_shutdown+0x1b8>)
 800c3be:	f001 fb6f 	bl	800daa0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff feb4 	bl	800c130 <tcp_free_listen>
      break;
 800c3c8:	e00f      	b.n	800c3ea <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c3ca:	6879      	ldr	r1, [r7, #4]
 800c3cc:	480d      	ldr	r0, [pc, #52]	; (800c404 <tcp_close_shutdown+0x1a8>)
 800c3ce:	f001 fb67 	bl	800daa0 <tcp_pcb_remove>
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <tcp_close_shutdown+0x1ac>)
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff fe8d 	bl	800c0f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c3de:	e004      	b.n	800c3ea <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f819 	bl	800c418 <tcp_close_shutdown_fin>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	e000      	b.n	800c3ec <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bdb0      	pop	{r4, r5, r7, pc}
 800c3f4:	08017a00 	.word	0x08017a00
 800c3f8:	08017ad4 	.word	0x08017ad4
 800c3fc:	08017a44 	.word	0x08017a44
 800c400:	08017af4 	.word	0x08017af4
 800c404:	2000b654 	.word	0x2000b654
 800c408:	2000b650 	.word	0x2000b650
 800c40c:	2000b668 	.word	0x2000b668
 800c410:	2000b660 	.word	0x2000b660
 800c414:	2000b65c 	.word	0x2000b65c

0800c418 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d106      	bne.n	800c434 <tcp_close_shutdown_fin+0x1c>
 800c426:	4b2c      	ldr	r3, [pc, #176]	; (800c4d8 <tcp_close_shutdown_fin+0xc0>)
 800c428:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c42c:	492b      	ldr	r1, [pc, #172]	; (800c4dc <tcp_close_shutdown_fin+0xc4>)
 800c42e:	482c      	ldr	r0, [pc, #176]	; (800c4e0 <tcp_close_shutdown_fin+0xc8>)
 800c430:	f009 f926 	bl	8015680 <iprintf>

  switch (pcb->state) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7d1b      	ldrb	r3, [r3, #20]
 800c438:	2b04      	cmp	r3, #4
 800c43a:	d010      	beq.n	800c45e <tcp_close_shutdown_fin+0x46>
 800c43c:	2b07      	cmp	r3, #7
 800c43e:	d01b      	beq.n	800c478 <tcp_close_shutdown_fin+0x60>
 800c440:	2b03      	cmp	r3, #3
 800c442:	d126      	bne.n	800c492 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f004 fe05 	bl	8011054 <tcp_send_fin>
 800c44a:	4603      	mov	r3, r0
 800c44c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d11f      	bne.n	800c496 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2205      	movs	r2, #5
 800c45a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c45c:	e01b      	b.n	800c496 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f004 fdf8 	bl	8011054 <tcp_send_fin>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d114      	bne.n	800c49a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2205      	movs	r2, #5
 800c474:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c476:	e010      	b.n	800c49a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f004 fdeb 	bl	8011054 <tcp_send_fin>
 800c47e:	4603      	mov	r3, r0
 800c480:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2209      	movs	r2, #9
 800c48e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c490:	e005      	b.n	800c49e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	e01c      	b.n	800c4d0 <tcp_close_shutdown_fin+0xb8>
      break;
 800c496:	bf00      	nop
 800c498:	e002      	b.n	800c4a0 <tcp_close_shutdown_fin+0x88>
      break;
 800c49a:	bf00      	nop
 800c49c:	e000      	b.n	800c4a0 <tcp_close_shutdown_fin+0x88>
      break;
 800c49e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f004 ff11 	bl	80112d0 <tcp_output>
 800c4ae:	e00d      	b.n	800c4cc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b8:	d108      	bne.n	800c4cc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8b5b      	ldrh	r3, [r3, #26]
 800c4be:	f043 0308 	orr.w	r3, r3, #8
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	e001      	b.n	800c4d0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	08017a00 	.word	0x08017a00
 800c4dc:	08017ab0 	.word	0x08017ab0
 800c4e0:	08017a44 	.word	0x08017a44

0800c4e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d109      	bne.n	800c506 <tcp_close+0x22>
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	; (800c530 <tcp_close+0x4c>)
 800c4f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c4f8:	490e      	ldr	r1, [pc, #56]	; (800c534 <tcp_close+0x50>)
 800c4fa:	480f      	ldr	r0, [pc, #60]	; (800c538 <tcp_close+0x54>)
 800c4fc:	f009 f8c0 	bl	8015680 <iprintf>
 800c500:	f06f 030f 	mvn.w	r3, #15
 800c504:	e00f      	b.n	800c526 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	7d1b      	ldrb	r3, [r3, #20]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d006      	beq.n	800c51c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8b5b      	ldrh	r3, [r3, #26]
 800c512:	f043 0310 	orr.w	r3, r3, #16
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c51c:	2101      	movs	r1, #1
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7ff fe9c 	bl	800c25c <tcp_close_shutdown>
 800c524:	4603      	mov	r3, r0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	08017a00 	.word	0x08017a00
 800c534:	08017b10 	.word	0x08017b10
 800c538:	08017a44 	.word	0x08017a44

0800c53c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d109      	bne.n	800c562 <tcp_shutdown+0x26>
 800c54e:	4b25      	ldr	r3, [pc, #148]	; (800c5e4 <tcp_shutdown+0xa8>)
 800c550:	f240 2207 	movw	r2, #519	; 0x207
 800c554:	4924      	ldr	r1, [pc, #144]	; (800c5e8 <tcp_shutdown+0xac>)
 800c556:	4825      	ldr	r0, [pc, #148]	; (800c5ec <tcp_shutdown+0xb0>)
 800c558:	f009 f892 	bl	8015680 <iprintf>
 800c55c:	f06f 030f 	mvn.w	r3, #15
 800c560:	e03c      	b.n	800c5dc <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	7d1b      	ldrb	r3, [r3, #20]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d102      	bne.n	800c570 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c56a:	f06f 030a 	mvn.w	r3, #10
 800c56e:	e035      	b.n	800c5dc <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d01b      	beq.n	800c5ae <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	8b5b      	ldrh	r3, [r3, #26]
 800c57a:	f043 0310 	orr.w	r3, r3, #16
 800c57e:	b29a      	uxth	r2, r3
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d005      	beq.n	800c596 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c58a:	2101      	movs	r1, #1
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f7ff fe65 	bl	800c25c <tcp_close_shutdown>
 800c592:	4603      	mov	r3, r0
 800c594:	e022      	b.n	800c5dc <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d007      	beq.n	800c5ae <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7ff fafc 	bl	800bba0 <pbuf_free>
      pcb->refused_data = NULL;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d012      	beq.n	800c5da <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	7d1b      	ldrb	r3, [r3, #20]
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	db0b      	blt.n	800c5d4 <tcp_shutdown+0x98>
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	dd01      	ble.n	800c5c4 <tcp_shutdown+0x88>
 800c5c0:	2b07      	cmp	r3, #7
 800c5c2:	d107      	bne.n	800c5d4 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff fe46 	bl	800c25c <tcp_close_shutdown>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	e003      	b.n	800c5dc <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c5d4:	f06f 030a 	mvn.w	r3, #10
 800c5d8:	e000      	b.n	800c5dc <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	08017a00 	.word	0x08017a00
 800c5e8:	08017b28 	.word	0x08017b28
 800c5ec:	08017a44 	.word	0x08017a44

0800c5f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08e      	sub	sp, #56	; 0x38
 800c5f4:	af04      	add	r7, sp, #16
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d107      	bne.n	800c610 <tcp_abandon+0x20>
 800c600:	4b52      	ldr	r3, [pc, #328]	; (800c74c <tcp_abandon+0x15c>)
 800c602:	f240 223d 	movw	r2, #573	; 0x23d
 800c606:	4952      	ldr	r1, [pc, #328]	; (800c750 <tcp_abandon+0x160>)
 800c608:	4852      	ldr	r0, [pc, #328]	; (800c754 <tcp_abandon+0x164>)
 800c60a:	f009 f839 	bl	8015680 <iprintf>
 800c60e:	e099      	b.n	800c744 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7d1b      	ldrb	r3, [r3, #20]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d106      	bne.n	800c626 <tcp_abandon+0x36>
 800c618:	4b4c      	ldr	r3, [pc, #304]	; (800c74c <tcp_abandon+0x15c>)
 800c61a:	f240 2241 	movw	r2, #577	; 0x241
 800c61e:	494e      	ldr	r1, [pc, #312]	; (800c758 <tcp_abandon+0x168>)
 800c620:	484c      	ldr	r0, [pc, #304]	; (800c754 <tcp_abandon+0x164>)
 800c622:	f009 f82d 	bl	8015680 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	7d1b      	ldrb	r3, [r3, #20]
 800c62a:	2b0a      	cmp	r3, #10
 800c62c:	d107      	bne.n	800c63e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	484a      	ldr	r0, [pc, #296]	; (800c75c <tcp_abandon+0x16c>)
 800c632:	f001 fa35 	bl	800daa0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fd5e 	bl	800c0f8 <tcp_free>
 800c63c:	e082      	b.n	800c744 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c64a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c650:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c658:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7d1b      	ldrb	r3, [r3, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d126      	bne.n	800c6b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8adb      	ldrh	r3, [r3, #22]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d02e      	beq.n	800c6ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c670:	4b3b      	ldr	r3, [pc, #236]	; (800c760 <tcp_abandon+0x170>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d105      	bne.n	800c686 <tcp_abandon+0x96>
 800c67a:	4b39      	ldr	r3, [pc, #228]	; (800c760 <tcp_abandon+0x170>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	4a37      	ldr	r2, [pc, #220]	; (800c760 <tcp_abandon+0x170>)
 800c682:	6013      	str	r3, [r2, #0]
 800c684:	e013      	b.n	800c6ae <tcp_abandon+0xbe>
 800c686:	4b36      	ldr	r3, [pc, #216]	; (800c760 <tcp_abandon+0x170>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	61fb      	str	r3, [r7, #28]
 800c68c:	e00c      	b.n	800c6a8 <tcp_abandon+0xb8>
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	429a      	cmp	r2, r3
 800c696:	d104      	bne.n	800c6a2 <tcp_abandon+0xb2>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68da      	ldr	r2, [r3, #12]
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	60da      	str	r2, [r3, #12]
 800c6a0:	e005      	b.n	800c6ae <tcp_abandon+0xbe>
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	61fb      	str	r3, [r7, #28]
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1ef      	bne.n	800c68e <tcp_abandon+0x9e>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	60da      	str	r2, [r3, #12]
 800c6b4:	e00b      	b.n	800c6ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	8adb      	ldrh	r3, [r3, #22]
 800c6be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c6c0:	6879      	ldr	r1, [r7, #4]
 800c6c2:	4828      	ldr	r0, [pc, #160]	; (800c764 <tcp_abandon+0x174>)
 800c6c4:	f001 f9ec 	bl	800daa0 <tcp_pcb_remove>
 800c6c8:	4b27      	ldr	r3, [pc, #156]	; (800c768 <tcp_abandon+0x178>)
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fec2 	bl	800d464 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d004      	beq.n	800c6f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 feb9 	bl	800d464 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d004      	beq.n	800c704 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 feb0 	bl	800d464 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00e      	beq.n	800c728 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c70a:	6879      	ldr	r1, [r7, #4]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3304      	adds	r3, #4
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	8b12      	ldrh	r2, [r2, #24]
 800c714:	9202      	str	r2, [sp, #8]
 800c716:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c718:	9201      	str	r2, [sp, #4]
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	460b      	mov	r3, r1
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	69b9      	ldr	r1, [r7, #24]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f005 fb98 	bl	8011e58 <tcp_rst>
    }
    last_state = pcb->state;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	7d1b      	ldrb	r3, [r3, #20]
 800c72c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fce2 	bl	800c0f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d004      	beq.n	800c744 <tcp_abandon+0x154>
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	f06f 010c 	mvn.w	r1, #12
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	4798      	blx	r3
  }
}
 800c744:	3728      	adds	r7, #40	; 0x28
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	08017a00 	.word	0x08017a00
 800c750:	08017b44 	.word	0x08017b44
 800c754:	08017a44 	.word	0x08017a44
 800c758:	08017b60 	.word	0x08017b60
 800c75c:	2000b664 	.word	0x2000b664
 800c760:	2000b660 	.word	0x2000b660
 800c764:	2000b654 	.word	0x2000b654
 800c768:	2000b650 	.word	0x2000b650

0800c76c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c774:	2101      	movs	r1, #1
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7ff ff3a 	bl	800c5f0 <tcp_abandon>
}
 800c77c:	bf00      	nop
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	4613      	mov	r3, r2
 800c790:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c792:	2304      	movs	r3, #4
 800c794:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c79c:	4b3e      	ldr	r3, [pc, #248]	; (800c898 <tcp_bind+0x114>)
 800c79e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d109      	bne.n	800c7ba <tcp_bind+0x36>
 800c7a6:	4b3d      	ldr	r3, [pc, #244]	; (800c89c <tcp_bind+0x118>)
 800c7a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c7ac:	493c      	ldr	r1, [pc, #240]	; (800c8a0 <tcp_bind+0x11c>)
 800c7ae:	483d      	ldr	r0, [pc, #244]	; (800c8a4 <tcp_bind+0x120>)
 800c7b0:	f008 ff66 	bl	8015680 <iprintf>
 800c7b4:	f06f 030f 	mvn.w	r3, #15
 800c7b8:	e06a      	b.n	800c890 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	7d1b      	ldrb	r3, [r3, #20]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d009      	beq.n	800c7d6 <tcp_bind+0x52>
 800c7c2:	4b36      	ldr	r3, [pc, #216]	; (800c89c <tcp_bind+0x118>)
 800c7c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c7c8:	4937      	ldr	r1, [pc, #220]	; (800c8a8 <tcp_bind+0x124>)
 800c7ca:	4836      	ldr	r0, [pc, #216]	; (800c8a4 <tcp_bind+0x120>)
 800c7cc:	f008 ff58 	bl	8015680 <iprintf>
 800c7d0:	f06f 0305 	mvn.w	r3, #5
 800c7d4:	e05c      	b.n	800c890 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c7d6:	88fb      	ldrh	r3, [r7, #6]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d109      	bne.n	800c7f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c7dc:	f000 f9de 	bl	800cb9c <tcp_new_port>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c7e4:	88fb      	ldrh	r3, [r7, #6]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d135      	bne.n	800c856 <tcp_bind+0xd2>
      return ERR_BUF;
 800c7ea:	f06f 0301 	mvn.w	r3, #1
 800c7ee:	e04f      	b.n	800c890 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	61fb      	str	r3, [r7, #28]
 800c7f4:	e02b      	b.n	800c84e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c7f6:	4a2d      	ldr	r2, [pc, #180]	; (800c8ac <tcp_bind+0x128>)
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	61bb      	str	r3, [r7, #24]
 800c802:	e01e      	b.n	800c842 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	8adb      	ldrh	r3, [r3, #22]
 800c808:	88fa      	ldrh	r2, [r7, #6]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d116      	bne.n	800c83c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c80e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c810:	2b00      	cmp	r3, #0
 800c812:	d010      	beq.n	800c836 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00c      	beq.n	800c836 <tcp_bind+0xb2>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d009      	beq.n	800c836 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d005      	beq.n	800c836 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c832:	429a      	cmp	r2, r3
 800c834:	d102      	bne.n	800c83c <tcp_bind+0xb8>
              return ERR_USE;
 800c836:	f06f 0307 	mvn.w	r3, #7
 800c83a:	e029      	b.n	800c890 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1dd      	bne.n	800c804 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	3301      	adds	r3, #1
 800c84c:	61fb      	str	r3, [r7, #28]
 800c84e:	69fa      	ldr	r2, [r7, #28]
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	429a      	cmp	r2, r3
 800c854:	dbcf      	blt.n	800c7f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00c      	beq.n	800c876 <tcp_bind+0xf2>
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d008      	beq.n	800c876 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <tcp_bind+0xec>
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	e000      	b.n	800c872 <tcp_bind+0xee>
 800c870:	2300      	movs	r3, #0
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	88fa      	ldrh	r2, [r7, #6]
 800c87a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c87c:	4b0c      	ldr	r3, [pc, #48]	; (800c8b0 <tcp_bind+0x12c>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	60da      	str	r2, [r3, #12]
 800c884:	4a0a      	ldr	r2, [pc, #40]	; (800c8b0 <tcp_bind+0x12c>)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6013      	str	r3, [r2, #0]
 800c88a:	f005 fca7 	bl	80121dc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3720      	adds	r7, #32
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	08019a64 	.word	0x08019a64
 800c89c:	08017a00 	.word	0x08017a00
 800c8a0:	08017b94 	.word	0x08017b94
 800c8a4:	08017a44 	.word	0x08017a44
 800c8a8:	08017bac 	.word	0x08017bac
 800c8ac:	08019a3c 	.word	0x08019a3c
 800c8b0:	2000b660 	.word	0x2000b660

0800c8b4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d106      	bne.n	800c8d6 <tcp_accept_null+0x22>
 800c8c8:	4b07      	ldr	r3, [pc, #28]	; (800c8e8 <tcp_accept_null+0x34>)
 800c8ca:	f240 320f 	movw	r2, #783	; 0x30f
 800c8ce:	4907      	ldr	r1, [pc, #28]	; (800c8ec <tcp_accept_null+0x38>)
 800c8d0:	4807      	ldr	r0, [pc, #28]	; (800c8f0 <tcp_accept_null+0x3c>)
 800c8d2:	f008 fed5 	bl	8015680 <iprintf>

  tcp_abort(pcb);
 800c8d6:	68b8      	ldr	r0, [r7, #8]
 800c8d8:	f7ff ff48 	bl	800c76c <tcp_abort>

  return ERR_ABRT;
 800c8dc:	f06f 030c 	mvn.w	r3, #12
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	08017a00 	.word	0x08017a00
 800c8ec:	08017bd4 	.word	0x08017bd4
 800c8f0:	08017a44 	.word	0x08017a44

0800c8f4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b088      	sub	sp, #32
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	607a      	str	r2, [r7, #4]
 800c900:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d109      	bne.n	800c920 <tcp_listen_with_backlog_and_err+0x2c>
 800c90c:	4b47      	ldr	r3, [pc, #284]	; (800ca2c <tcp_listen_with_backlog_and_err+0x138>)
 800c90e:	f240 3259 	movw	r2, #857	; 0x359
 800c912:	4947      	ldr	r1, [pc, #284]	; (800ca30 <tcp_listen_with_backlog_and_err+0x13c>)
 800c914:	4847      	ldr	r0, [pc, #284]	; (800ca34 <tcp_listen_with_backlog_and_err+0x140>)
 800c916:	f008 feb3 	bl	8015680 <iprintf>
 800c91a:	23f0      	movs	r3, #240	; 0xf0
 800c91c:	76fb      	strb	r3, [r7, #27]
 800c91e:	e079      	b.n	800ca14 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	7d1b      	ldrb	r3, [r3, #20]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d009      	beq.n	800c93c <tcp_listen_with_backlog_and_err+0x48>
 800c928:	4b40      	ldr	r3, [pc, #256]	; (800ca2c <tcp_listen_with_backlog_and_err+0x138>)
 800c92a:	f240 325a 	movw	r2, #858	; 0x35a
 800c92e:	4942      	ldr	r1, [pc, #264]	; (800ca38 <tcp_listen_with_backlog_and_err+0x144>)
 800c930:	4840      	ldr	r0, [pc, #256]	; (800ca34 <tcp_listen_with_backlog_and_err+0x140>)
 800c932:	f008 fea5 	bl	8015680 <iprintf>
 800c936:	23f1      	movs	r3, #241	; 0xf1
 800c938:	76fb      	strb	r3, [r7, #27]
 800c93a:	e06b      	b.n	800ca14 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	7d1b      	ldrb	r3, [r3, #20]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d104      	bne.n	800c94e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c948:	23f7      	movs	r3, #247	; 0xf7
 800c94a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c94c:	e062      	b.n	800ca14 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c94e:	2002      	movs	r0, #2
 800c950:	f7fe fa34 	bl	800adbc <memp_malloc>
 800c954:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c95c:	23ff      	movs	r3, #255	; 0xff
 800c95e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c960:	e058      	b.n	800ca14 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	691a      	ldr	r2, [r3, #16]
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	8ada      	ldrh	r2, [r3, #22]
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	2201      	movs	r2, #1
 800c976:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	7d5a      	ldrb	r2, [r3, #21]
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	7a5a      	ldrb	r2, [r3, #9]
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	2200      	movs	r2, #0
 800c98c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	7ada      	ldrb	r2, [r3, #11]
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	7a9a      	ldrb	r2, [r3, #10]
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	8adb      	ldrh	r3, [r3, #22]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d021      	beq.n	800c9f2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c9ae:	4b23      	ldr	r3, [pc, #140]	; (800ca3c <tcp_listen_with_backlog_and_err+0x148>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d105      	bne.n	800c9c4 <tcp_listen_with_backlog_and_err+0xd0>
 800c9b8:	4b20      	ldr	r3, [pc, #128]	; (800ca3c <tcp_listen_with_backlog_and_err+0x148>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	4a1f      	ldr	r2, [pc, #124]	; (800ca3c <tcp_listen_with_backlog_and_err+0x148>)
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	e013      	b.n	800c9ec <tcp_listen_with_backlog_and_err+0xf8>
 800c9c4:	4b1d      	ldr	r3, [pc, #116]	; (800ca3c <tcp_listen_with_backlog_and_err+0x148>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	617b      	str	r3, [r7, #20]
 800c9ca:	e00c      	b.n	800c9e6 <tcp_listen_with_backlog_and_err+0xf2>
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d104      	bne.n	800c9e0 <tcp_listen_with_backlog_and_err+0xec>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	68da      	ldr	r2, [r3, #12]
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	60da      	str	r2, [r3, #12]
 800c9de:	e005      	b.n	800c9ec <tcp_listen_with_backlog_and_err+0xf8>
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	617b      	str	r3, [r7, #20]
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1ef      	bne.n	800c9cc <tcp_listen_with_backlog_and_err+0xd8>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff fb80 	bl	800c0f8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	4a11      	ldr	r2, [pc, #68]	; (800ca40 <tcp_listen_with_backlog_and_err+0x14c>)
 800c9fc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c9fe:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <tcp_listen_with_backlog_and_err+0x150>)
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	60da      	str	r2, [r3, #12]
 800ca06:	4a0f      	ldr	r2, [pc, #60]	; (800ca44 <tcp_listen_with_backlog_and_err+0x150>)
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	f005 fbe6 	bl	80121dc <tcp_timer_needed>
  res = ERR_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7efa      	ldrb	r2, [r7, #27]
 800ca1e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ca20:	69fb      	ldr	r3, [r7, #28]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3720      	adds	r7, #32
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	08017a00 	.word	0x08017a00
 800ca30:	08017bf4 	.word	0x08017bf4
 800ca34:	08017a44 	.word	0x08017a44
 800ca38:	08017c24 	.word	0x08017c24
 800ca3c:	2000b660 	.word	0x2000b660
 800ca40:	0800c8b5 	.word	0x0800c8b5
 800ca44:	2000b65c 	.word	0x2000b65c

0800ca48 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <tcp_update_rcv_ann_wnd+0x1c>
 800ca56:	4b25      	ldr	r3, [pc, #148]	; (800caec <tcp_update_rcv_ann_wnd+0xa4>)
 800ca58:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ca5c:	4924      	ldr	r1, [pc, #144]	; (800caf0 <tcp_update_rcv_ann_wnd+0xa8>)
 800ca5e:	4825      	ldr	r0, [pc, #148]	; (800caf4 <tcp_update_rcv_ann_wnd+0xac>)
 800ca60:	f008 fe0e 	bl	8015680 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ca6c:	4413      	add	r3, r2
 800ca6e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ca78:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ca7c:	bf28      	it	cs
 800ca7e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ca82:	b292      	uxth	r2, r2
 800ca84:	4413      	add	r3, r2
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	db08      	blt.n	800caa0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	e020      	b.n	800cae2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dd03      	ble.n	800cab6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cab4:	e014      	b.n	800cae0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cac8:	d306      	bcc.n	800cad8 <tcp_update_rcv_ann_wnd+0x90>
 800caca:	4b08      	ldr	r3, [pc, #32]	; (800caec <tcp_update_rcv_ann_wnd+0xa4>)
 800cacc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cad0:	4909      	ldr	r1, [pc, #36]	; (800caf8 <tcp_update_rcv_ann_wnd+0xb0>)
 800cad2:	4808      	ldr	r0, [pc, #32]	; (800caf4 <tcp_update_rcv_ann_wnd+0xac>)
 800cad4:	f008 fdd4 	bl	8015680 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	b29a      	uxth	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cae0:	2300      	movs	r3, #0
  }
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	08017a00 	.word	0x08017a00
 800caf0:	08017c5c 	.word	0x08017c5c
 800caf4:	08017a44 	.word	0x08017a44
 800caf8:	08017c80 	.word	0x08017c80

0800cafc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	460b      	mov	r3, r1
 800cb06:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d107      	bne.n	800cb1e <tcp_recved+0x22>
 800cb0e:	4b1f      	ldr	r3, [pc, #124]	; (800cb8c <tcp_recved+0x90>)
 800cb10:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cb14:	491e      	ldr	r1, [pc, #120]	; (800cb90 <tcp_recved+0x94>)
 800cb16:	481f      	ldr	r0, [pc, #124]	; (800cb94 <tcp_recved+0x98>)
 800cb18:	f008 fdb2 	bl	8015680 <iprintf>
 800cb1c:	e032      	b.n	800cb84 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7d1b      	ldrb	r3, [r3, #20]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d106      	bne.n	800cb34 <tcp_recved+0x38>
 800cb26:	4b19      	ldr	r3, [pc, #100]	; (800cb8c <tcp_recved+0x90>)
 800cb28:	f240 32d3 	movw	r2, #979	; 0x3d3
 800cb2c:	491a      	ldr	r1, [pc, #104]	; (800cb98 <tcp_recved+0x9c>)
 800cb2e:	4819      	ldr	r0, [pc, #100]	; (800cb94 <tcp_recved+0x98>)
 800cb30:	f008 fda6 	bl	8015680 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cb38:	887b      	ldrh	r3, [r7, #2]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cb3e:	89fb      	ldrh	r3, [r7, #14]
 800cb40:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb44:	d804      	bhi.n	800cb50 <tcp_recved+0x54>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb4a:	89fa      	ldrh	r2, [r7, #14]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d204      	bcs.n	800cb5a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cb56:	851a      	strh	r2, [r3, #40]	; 0x28
 800cb58:	e002      	b.n	800cb60 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	89fa      	ldrh	r2, [r7, #14]
 800cb5e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7ff ff71 	bl	800ca48 <tcp_update_rcv_ann_wnd>
 800cb66:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cb6e:	d309      	bcc.n	800cb84 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	8b5b      	ldrh	r3, [r3, #26]
 800cb74:	f043 0302 	orr.w	r3, r3, #2
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f004 fba6 	bl	80112d0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	08017a00 	.word	0x08017a00
 800cb90:	08017c9c 	.word	0x08017c9c
 800cb94:	08017a44 	.word	0x08017a44
 800cb98:	08017cb4 	.word	0x08017cb4

0800cb9c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cba6:	4b1e      	ldr	r3, [pc, #120]	; (800cc20 <tcp_new_port+0x84>)
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	4b1c      	ldr	r3, [pc, #112]	; (800cc20 <tcp_new_port+0x84>)
 800cbb0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	; (800cc20 <tcp_new_port+0x84>)
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d103      	bne.n	800cbc6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cbbe:	4b18      	ldr	r3, [pc, #96]	; (800cc20 <tcp_new_port+0x84>)
 800cbc0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cbc4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	71fb      	strb	r3, [r7, #7]
 800cbca:	e01e      	b.n	800cc0a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	4a15      	ldr	r2, [pc, #84]	; (800cc24 <tcp_new_port+0x88>)
 800cbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	603b      	str	r3, [r7, #0]
 800cbd8:	e011      	b.n	800cbfe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	8ada      	ldrh	r2, [r3, #22]
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <tcp_new_port+0x84>)
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d108      	bne.n	800cbf8 <tcp_new_port+0x5c>
        n++;
 800cbe6:	88bb      	ldrh	r3, [r7, #4]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cbec:	88bb      	ldrh	r3, [r7, #4]
 800cbee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbf2:	d3d8      	bcc.n	800cba6 <tcp_new_port+0xa>
          return 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e00d      	b.n	800cc14 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	603b      	str	r3, [r7, #0]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1ea      	bne.n	800cbda <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cc04:	79fb      	ldrb	r3, [r7, #7]
 800cc06:	3301      	adds	r3, #1
 800cc08:	71fb      	strb	r3, [r7, #7]
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d9dd      	bls.n	800cbcc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cc10:	4b03      	ldr	r3, [pc, #12]	; (800cc20 <tcp_new_port+0x84>)
 800cc12:	881b      	ldrh	r3, [r3, #0]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr
 800cc20:	20000014 	.word	0x20000014
 800cc24:	08019a3c 	.word	0x08019a3c

0800cc28 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cc28:	b5b0      	push	{r4, r5, r7, lr}
 800cc2a:	b090      	sub	sp, #64	; 0x40
 800cc2c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cc34:	4b94      	ldr	r3, [pc, #592]	; (800ce88 <tcp_slowtmr+0x260>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	4a93      	ldr	r2, [pc, #588]	; (800ce88 <tcp_slowtmr+0x260>)
 800cc3c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cc3e:	4b93      	ldr	r3, [pc, #588]	; (800ce8c <tcp_slowtmr+0x264>)
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	3301      	adds	r3, #1
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	4b91      	ldr	r3, [pc, #580]	; (800ce8c <tcp_slowtmr+0x264>)
 800cc48:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cc4e:	4b90      	ldr	r3, [pc, #576]	; (800ce90 <tcp_slowtmr+0x268>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cc54:	e29f      	b.n	800d196 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	7d1b      	ldrb	r3, [r3, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d106      	bne.n	800cc6c <tcp_slowtmr+0x44>
 800cc5e:	4b8d      	ldr	r3, [pc, #564]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cc60:	f240 42be 	movw	r2, #1214	; 0x4be
 800cc64:	498c      	ldr	r1, [pc, #560]	; (800ce98 <tcp_slowtmr+0x270>)
 800cc66:	488d      	ldr	r0, [pc, #564]	; (800ce9c <tcp_slowtmr+0x274>)
 800cc68:	f008 fd0a 	bl	8015680 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d106      	bne.n	800cc82 <tcp_slowtmr+0x5a>
 800cc74:	4b87      	ldr	r3, [pc, #540]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cc76:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cc7a:	4989      	ldr	r1, [pc, #548]	; (800cea0 <tcp_slowtmr+0x278>)
 800cc7c:	4887      	ldr	r0, [pc, #540]	; (800ce9c <tcp_slowtmr+0x274>)
 800cc7e:	f008 fcff 	bl	8015680 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	7d1b      	ldrb	r3, [r3, #20]
 800cc86:	2b0a      	cmp	r3, #10
 800cc88:	d106      	bne.n	800cc98 <tcp_slowtmr+0x70>
 800cc8a:	4b82      	ldr	r3, [pc, #520]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cc8c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cc90:	4984      	ldr	r1, [pc, #528]	; (800cea4 <tcp_slowtmr+0x27c>)
 800cc92:	4882      	ldr	r0, [pc, #520]	; (800ce9c <tcp_slowtmr+0x274>)
 800cc94:	f008 fcf4 	bl	8015680 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	7f9a      	ldrb	r2, [r3, #30]
 800cc9c:	4b7b      	ldr	r3, [pc, #492]	; (800ce8c <tcp_slowtmr+0x264>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d105      	bne.n	800ccb0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ccae:	e272      	b.n	800d196 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ccb0:	4b76      	ldr	r3, [pc, #472]	; (800ce8c <tcp_slowtmr+0x264>)
 800ccb2:	781a      	ldrb	r2, [r3, #0]
 800ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	7d1b      	ldrb	r3, [r3, #20]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d10a      	bne.n	800cce2 <tcp_slowtmr+0xba>
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	d905      	bls.n	800cce2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ccd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccda:	3301      	adds	r3, #1
 800ccdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cce0:	e11e      	b.n	800cf20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cce8:	2b0b      	cmp	r3, #11
 800ccea:	d905      	bls.n	800ccf8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ccec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ccf6:	e113      	b.n	800cf20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d075      	beq.n	800cdee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d006      	beq.n	800cd18 <tcp_slowtmr+0xf0>
 800cd0a:	4b62      	ldr	r3, [pc, #392]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cd0c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cd10:	4965      	ldr	r1, [pc, #404]	; (800cea8 <tcp_slowtmr+0x280>)
 800cd12:	4862      	ldr	r0, [pc, #392]	; (800ce9c <tcp_slowtmr+0x274>)
 800cd14:	f008 fcb4 	bl	8015680 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d106      	bne.n	800cd2e <tcp_slowtmr+0x106>
 800cd20:	4b5c      	ldr	r3, [pc, #368]	; (800ce94 <tcp_slowtmr+0x26c>)
 800cd22:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cd26:	4961      	ldr	r1, [pc, #388]	; (800ceac <tcp_slowtmr+0x284>)
 800cd28:	485c      	ldr	r0, [pc, #368]	; (800ce9c <tcp_slowtmr+0x274>)
 800cd2a:	f008 fca9 	bl	8015680 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cd34:	2b0b      	cmp	r3, #11
 800cd36:	d905      	bls.n	800cd44 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cd38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd42:	e0ed      	b.n	800cf20 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	4a58      	ldr	r2, [pc, #352]	; (800ceb0 <tcp_slowtmr+0x288>)
 800cd4e:	5cd3      	ldrb	r3, [r2, r3]
 800cd50:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cd58:	7c7a      	ldrb	r2, [r7, #17]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d907      	bls.n	800cd6e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cd64:	3301      	adds	r3, #1
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cd74:	7c7a      	ldrb	r2, [r7, #17]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	f200 80d2 	bhi.w	800cf20 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d108      	bne.n	800cd9c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cd8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd8c:	f005 f958 	bl	8012040 <tcp_zero_window_probe>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d014      	beq.n	800cdc0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cd96:	2300      	movs	r3, #0
 800cd98:	623b      	str	r3, [r7, #32]
 800cd9a:	e011      	b.n	800cdc0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cda2:	4619      	mov	r1, r3
 800cda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda6:	f004 f80d 	bl	8010dc4 <tcp_split_unsent_seg>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d107      	bne.n	800cdc0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cdb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdb2:	f004 fa8d 	bl	80112d0 <tcp_output>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 80ac 	beq.w	800cf20 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cdd6:	2b06      	cmp	r3, #6
 800cdd8:	f200 80a2 	bhi.w	800cf20 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cde2:	3301      	adds	r3, #1
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cdec:	e098      	b.n	800cf20 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db0f      	blt.n	800ce18 <tcp_slowtmr+0x1f0>
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cdfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d008      	beq.n	800ce18 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	3301      	adds	r3, #1
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	b21a      	sxth	r2, r3
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ce24:	429a      	cmp	r2, r3
 800ce26:	db7b      	blt.n	800cf20 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ce28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce2a:	f004 fd49 	bl	80118c0 <tcp_rexmit_rto_prepare>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d007      	beq.n	800ce44 <tcp_slowtmr+0x21c>
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d171      	bne.n	800cf20 <tcp_slowtmr+0x2f8>
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d06d      	beq.n	800cf20 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	7d1b      	ldrb	r3, [r3, #20]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d03a      	beq.n	800cec2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce52:	2b0c      	cmp	r3, #12
 800ce54:	bf28      	it	cs
 800ce56:	230c      	movcs	r3, #12
 800ce58:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ce5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ce60:	10db      	asrs	r3, r3, #3
 800ce62:	b21b      	sxth	r3, r3
 800ce64:	461a      	mov	r2, r3
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ce6c:	4413      	add	r3, r2
 800ce6e:	7efa      	ldrb	r2, [r7, #27]
 800ce70:	4910      	ldr	r1, [pc, #64]	; (800ceb4 <tcp_slowtmr+0x28c>)
 800ce72:	5c8a      	ldrb	r2, [r1, r2]
 800ce74:	4093      	lsls	r3, r2
 800ce76:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	dc1a      	bgt.n	800ceb8 <tcp_slowtmr+0x290>
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	b21a      	sxth	r2, r3
 800ce86:	e019      	b.n	800cebc <tcp_slowtmr+0x294>
 800ce88:	2000b658 	.word	0x2000b658
 800ce8c:	20004ae2 	.word	0x20004ae2
 800ce90:	2000b654 	.word	0x2000b654
 800ce94:	08017a00 	.word	0x08017a00
 800ce98:	08017d44 	.word	0x08017d44
 800ce9c:	08017a44 	.word	0x08017a44
 800cea0:	08017d70 	.word	0x08017d70
 800cea4:	08017d9c 	.word	0x08017d9c
 800cea8:	08017dcc 	.word	0x08017dcc
 800ceac:	08017e00 	.word	0x08017e00
 800ceb0:	08019a34 	.word	0x08019a34
 800ceb4:	08019a24 	.word	0x08019a24
 800ceb8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	2200      	movs	r2, #0
 800cec6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ced4:	4293      	cmp	r3, r2
 800ced6:	bf28      	it	cs
 800ced8:	4613      	movcs	r3, r2
 800ceda:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cedc:	8a7b      	ldrh	r3, [r7, #18]
 800cede:	085b      	lsrs	r3, r3, #1
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d206      	bcs.n	800cf08 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	2200      	movs	r2, #0
 800cf16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cf1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf1c:	f004 fd40 	bl	80119a0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	7d1b      	ldrb	r3, [r3, #20]
 800cf24:	2b06      	cmp	r3, #6
 800cf26:	d111      	bne.n	800cf4c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	8b5b      	ldrh	r3, [r3, #26]
 800cf2c:	f003 0310 	and.w	r3, r3, #16
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00b      	beq.n	800cf4c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf34:	4b9d      	ldr	r3, [pc, #628]	; (800d1ac <tcp_slowtmr+0x584>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	2b28      	cmp	r3, #40	; 0x28
 800cf40:	d904      	bls.n	800cf4c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cf42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf46:	3301      	adds	r3, #1
 800cf48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	7a5b      	ldrb	r3, [r3, #9]
 800cf50:	f003 0308 	and.w	r3, r3, #8
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d04c      	beq.n	800cff2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d003      	beq.n	800cf68 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cf64:	2b07      	cmp	r3, #7
 800cf66:	d144      	bne.n	800cff2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf68:	4b90      	ldr	r3, [pc, #576]	; (800d1ac <tcp_slowtmr+0x584>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	6a1b      	ldr	r3, [r3, #32]
 800cf70:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf78:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800cf7c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cf80:	498b      	ldr	r1, [pc, #556]	; (800d1b0 <tcp_slowtmr+0x588>)
 800cf82:	fba1 1303 	umull	r1, r3, r1, r3
 800cf86:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d90a      	bls.n	800cfa2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cf8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf90:	3301      	adds	r3, #1
 800cf92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cf96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfa0:	e027      	b.n	800cff2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cfa2:	4b82      	ldr	r3, [pc, #520]	; (800d1ac <tcp_slowtmr+0x584>)
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa8:	6a1b      	ldr	r3, [r3, #32]
 800cfaa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cfb8:	4618      	mov	r0, r3
 800cfba:	4b7e      	ldr	r3, [pc, #504]	; (800d1b4 <tcp_slowtmr+0x58c>)
 800cfbc:	fb03 f300 	mul.w	r3, r3, r0
 800cfc0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cfc2:	497b      	ldr	r1, [pc, #492]	; (800d1b0 <tcp_slowtmr+0x588>)
 800cfc4:	fba1 1303 	umull	r1, r3, r1, r3
 800cfc8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d911      	bls.n	800cff2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cfce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfd0:	f004 fff6 	bl	8011fc0 <tcp_keepalive>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cfda:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d107      	bne.n	800cff2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cfe8:	3301      	adds	r3, #1
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfee:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d011      	beq.n	800d01e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cffa:	4b6c      	ldr	r3, [pc, #432]	; (800d1ac <tcp_slowtmr+0x584>)
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	1ad2      	subs	r2, r2, r3
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d00a:	4619      	mov	r1, r3
 800d00c:	460b      	mov	r3, r1
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	440b      	add	r3, r1
 800d012:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d014:	429a      	cmp	r2, r3
 800d016:	d302      	bcc.n	800d01e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d01a:	f000 fea5 	bl	800dd68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d020:	7d1b      	ldrb	r3, [r3, #20]
 800d022:	2b03      	cmp	r3, #3
 800d024:	d10b      	bne.n	800d03e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d026:	4b61      	ldr	r3, [pc, #388]	; (800d1ac <tcp_slowtmr+0x584>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02c:	6a1b      	ldr	r3, [r3, #32]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	2b28      	cmp	r3, #40	; 0x28
 800d032:	d904      	bls.n	800d03e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d038:	3301      	adds	r3, #1
 800d03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	7d1b      	ldrb	r3, [r3, #20]
 800d042:	2b09      	cmp	r3, #9
 800d044:	d10b      	bne.n	800d05e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d046:	4b59      	ldr	r3, [pc, #356]	; (800d1ac <tcp_slowtmr+0x584>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	2bf0      	cmp	r3, #240	; 0xf0
 800d052:	d904      	bls.n	800d05e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d058:	3301      	adds	r3, #1
 800d05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d05e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d062:	2b00      	cmp	r3, #0
 800d064:	d060      	beq.n	800d128 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d06c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d06e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d070:	f000 fcc6 	bl	800da00 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	2b00      	cmp	r3, #0
 800d078:	d010      	beq.n	800d09c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d07a:	4b4f      	ldr	r3, [pc, #316]	; (800d1b8 <tcp_slowtmr+0x590>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d080:	429a      	cmp	r2, r3
 800d082:	d106      	bne.n	800d092 <tcp_slowtmr+0x46a>
 800d084:	4b4d      	ldr	r3, [pc, #308]	; (800d1bc <tcp_slowtmr+0x594>)
 800d086:	f240 526d 	movw	r2, #1389	; 0x56d
 800d08a:	494d      	ldr	r1, [pc, #308]	; (800d1c0 <tcp_slowtmr+0x598>)
 800d08c:	484d      	ldr	r0, [pc, #308]	; (800d1c4 <tcp_slowtmr+0x59c>)
 800d08e:	f008 faf7 	bl	8015680 <iprintf>
        prev->next = pcb->next;
 800d092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d094:	68da      	ldr	r2, [r3, #12]
 800d096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d098:	60da      	str	r2, [r3, #12]
 800d09a:	e00f      	b.n	800d0bc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d09c:	4b46      	ldr	r3, [pc, #280]	; (800d1b8 <tcp_slowtmr+0x590>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d006      	beq.n	800d0b4 <tcp_slowtmr+0x48c>
 800d0a6:	4b45      	ldr	r3, [pc, #276]	; (800d1bc <tcp_slowtmr+0x594>)
 800d0a8:	f240 5271 	movw	r2, #1393	; 0x571
 800d0ac:	4946      	ldr	r1, [pc, #280]	; (800d1c8 <tcp_slowtmr+0x5a0>)
 800d0ae:	4845      	ldr	r0, [pc, #276]	; (800d1c4 <tcp_slowtmr+0x59c>)
 800d0b0:	f008 fae6 	bl	8015680 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	4a3f      	ldr	r2, [pc, #252]	; (800d1b8 <tcp_slowtmr+0x590>)
 800d0ba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d0bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d013      	beq.n	800d0ec <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d0cc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0d4:	8ad2      	ldrh	r2, [r2, #22]
 800d0d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0d8:	8b09      	ldrh	r1, [r1, #24]
 800d0da:	9102      	str	r1, [sp, #8]
 800d0dc:	9201      	str	r2, [sp, #4]
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	462b      	mov	r3, r5
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4601      	mov	r1, r0
 800d0e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0e8:	f004 feb6 	bl	8011e58 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	7d1b      	ldrb	r3, [r3, #20]
 800d0f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d102:	6838      	ldr	r0, [r7, #0]
 800d104:	f7fe fff8 	bl	800c0f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d108:	4b30      	ldr	r3, [pc, #192]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d004      	beq.n	800d11e <tcp_slowtmr+0x4f6>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f06f 010c 	mvn.w	r1, #12
 800d11a:	68b8      	ldr	r0, [r7, #8]
 800d11c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d11e:	4b2b      	ldr	r3, [pc, #172]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d037      	beq.n	800d196 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d126:	e590      	b.n	800cc4a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d134:	7f1b      	ldrb	r3, [r3, #28]
 800d136:	3301      	adds	r3, #1
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	7f1a      	ldrb	r2, [r3, #28]
 800d142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d144:	7f5b      	ldrb	r3, [r3, #29]
 800d146:	429a      	cmp	r2, r3
 800d148:	d325      	bcc.n	800d196 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14c:	2200      	movs	r2, #0
 800d14e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d150:	4b1e      	ldr	r3, [pc, #120]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d152:	2200      	movs	r2, #0
 800d154:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <tcp_slowtmr+0x550>
 800d160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d168:	6912      	ldr	r2, [r2, #16]
 800d16a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d16c:	4610      	mov	r0, r2
 800d16e:	4798      	blx	r3
 800d170:	4603      	mov	r3, r0
 800d172:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d176:	e002      	b.n	800d17e <tcp_slowtmr+0x556>
 800d178:	2300      	movs	r3, #0
 800d17a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d17e:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <tcp_slowtmr+0x5a4>)
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d000      	beq.n	800d188 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d186:	e560      	b.n	800cc4a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d188:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d102      	bne.n	800d196 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d192:	f004 f89d 	bl	80112d0 <tcp_output>
  while (pcb != NULL) {
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f47f ad5c 	bne.w	800cc56 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d1a2:	4b0b      	ldr	r3, [pc, #44]	; (800d1d0 <tcp_slowtmr+0x5a8>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d1a8:	e067      	b.n	800d27a <tcp_slowtmr+0x652>
 800d1aa:	bf00      	nop
 800d1ac:	2000b658 	.word	0x2000b658
 800d1b0:	10624dd3 	.word	0x10624dd3
 800d1b4:	000124f8 	.word	0x000124f8
 800d1b8:	2000b654 	.word	0x2000b654
 800d1bc:	08017a00 	.word	0x08017a00
 800d1c0:	08017e38 	.word	0x08017e38
 800d1c4:	08017a44 	.word	0x08017a44
 800d1c8:	08017e64 	.word	0x08017e64
 800d1cc:	2000b650 	.word	0x2000b650
 800d1d0:	2000b664 	.word	0x2000b664
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	7d1b      	ldrb	r3, [r3, #20]
 800d1d8:	2b0a      	cmp	r3, #10
 800d1da:	d006      	beq.n	800d1ea <tcp_slowtmr+0x5c2>
 800d1dc:	4b2a      	ldr	r3, [pc, #168]	; (800d288 <tcp_slowtmr+0x660>)
 800d1de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d1e2:	492a      	ldr	r1, [pc, #168]	; (800d28c <tcp_slowtmr+0x664>)
 800d1e4:	482a      	ldr	r0, [pc, #168]	; (800d290 <tcp_slowtmr+0x668>)
 800d1e6:	f008 fa4b 	bl	8015680 <iprintf>
    pcb_remove = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1f0:	4b28      	ldr	r3, [pc, #160]	; (800d294 <tcp_slowtmr+0x66c>)
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	2bf0      	cmp	r3, #240	; 0xf0
 800d1fc:	d904      	bls.n	800d208 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d202:	3301      	adds	r3, #1
 800d204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d02f      	beq.n	800d270 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d212:	f000 fbf5 	bl	800da00 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d010      	beq.n	800d23e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d21c:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <tcp_slowtmr+0x670>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d222:	429a      	cmp	r2, r3
 800d224:	d106      	bne.n	800d234 <tcp_slowtmr+0x60c>
 800d226:	4b18      	ldr	r3, [pc, #96]	; (800d288 <tcp_slowtmr+0x660>)
 800d228:	f240 52af 	movw	r2, #1455	; 0x5af
 800d22c:	491b      	ldr	r1, [pc, #108]	; (800d29c <tcp_slowtmr+0x674>)
 800d22e:	4818      	ldr	r0, [pc, #96]	; (800d290 <tcp_slowtmr+0x668>)
 800d230:	f008 fa26 	bl	8015680 <iprintf>
        prev->next = pcb->next;
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	68da      	ldr	r2, [r3, #12]
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	60da      	str	r2, [r3, #12]
 800d23c:	e00f      	b.n	800d25e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d23e:	4b16      	ldr	r3, [pc, #88]	; (800d298 <tcp_slowtmr+0x670>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d244:	429a      	cmp	r2, r3
 800d246:	d006      	beq.n	800d256 <tcp_slowtmr+0x62e>
 800d248:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <tcp_slowtmr+0x660>)
 800d24a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d24e:	4914      	ldr	r1, [pc, #80]	; (800d2a0 <tcp_slowtmr+0x678>)
 800d250:	480f      	ldr	r0, [pc, #60]	; (800d290 <tcp_slowtmr+0x668>)
 800d252:	f008 fa15 	bl	8015680 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	4a0f      	ldr	r2, [pc, #60]	; (800d298 <tcp_slowtmr+0x670>)
 800d25c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d268:	69f8      	ldr	r0, [r7, #28]
 800d26a:	f7fe ff45 	bl	800c0f8 <tcp_free>
 800d26e:	e004      	b.n	800d27a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d272:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1a9      	bne.n	800d1d4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d280:	bf00      	nop
 800d282:	3730      	adds	r7, #48	; 0x30
 800d284:	46bd      	mov	sp, r7
 800d286:	bdb0      	pop	{r4, r5, r7, pc}
 800d288:	08017a00 	.word	0x08017a00
 800d28c:	08017e90 	.word	0x08017e90
 800d290:	08017a44 	.word	0x08017a44
 800d294:	2000b658 	.word	0x2000b658
 800d298:	2000b664 	.word	0x2000b664
 800d29c:	08017ec0 	.word	0x08017ec0
 800d2a0:	08017ee8 	.word	0x08017ee8

0800d2a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d2aa:	4b2d      	ldr	r3, [pc, #180]	; (800d360 <tcp_fasttmr+0xbc>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	4b2b      	ldr	r3, [pc, #172]	; (800d360 <tcp_fasttmr+0xbc>)
 800d2b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d2b6:	4b2b      	ldr	r3, [pc, #172]	; (800d364 <tcp_fasttmr+0xc0>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d2bc:	e048      	b.n	800d350 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	7f9a      	ldrb	r2, [r3, #30]
 800d2c2:	4b27      	ldr	r3, [pc, #156]	; (800d360 <tcp_fasttmr+0xbc>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d03f      	beq.n	800d34a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d2ca:	4b25      	ldr	r3, [pc, #148]	; (800d360 <tcp_fasttmr+0xbc>)
 800d2cc:	781a      	ldrb	r2, [r3, #0]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	8b5b      	ldrh	r3, [r3, #26]
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d010      	beq.n	800d300 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	8b5b      	ldrh	r3, [r3, #26]
 800d2e2:	f043 0302 	orr.w	r3, r3, #2
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f003 ffef 	bl	80112d0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	8b5b      	ldrh	r3, [r3, #26]
 800d2f6:	f023 0303 	bic.w	r3, r3, #3
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8b5b      	ldrh	r3, [r3, #26]
 800d304:	f003 0308 	and.w	r3, r3, #8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d009      	beq.n	800d320 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	8b5b      	ldrh	r3, [r3, #26]
 800d310:	f023 0308 	bic.w	r3, r3, #8
 800d314:	b29a      	uxth	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7ff f87c 	bl	800c418 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00a      	beq.n	800d344 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d32e:	4b0e      	ldr	r3, [pc, #56]	; (800d368 <tcp_fasttmr+0xc4>)
 800d330:	2200      	movs	r2, #0
 800d332:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 f819 	bl	800d36c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d33a:	4b0b      	ldr	r3, [pc, #44]	; (800d368 <tcp_fasttmr+0xc4>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d000      	beq.n	800d344 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d342:	e7b8      	b.n	800d2b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	607b      	str	r3, [r7, #4]
 800d348:	e002      	b.n	800d350 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1b3      	bne.n	800d2be <tcp_fasttmr+0x1a>
    }
  }
}
 800d356:	bf00      	nop
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	20004ae2 	.word	0x20004ae2
 800d364:	2000b654 	.word	0x2000b654
 800d368:	2000b650 	.word	0x2000b650

0800d36c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d36c:	b590      	push	{r4, r7, lr}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d109      	bne.n	800d38e <tcp_process_refused_data+0x22>
 800d37a:	4b37      	ldr	r3, [pc, #220]	; (800d458 <tcp_process_refused_data+0xec>)
 800d37c:	f240 6209 	movw	r2, #1545	; 0x609
 800d380:	4936      	ldr	r1, [pc, #216]	; (800d45c <tcp_process_refused_data+0xf0>)
 800d382:	4837      	ldr	r0, [pc, #220]	; (800d460 <tcp_process_refused_data+0xf4>)
 800d384:	f008 f97c 	bl	8015680 <iprintf>
 800d388:	f06f 030f 	mvn.w	r3, #15
 800d38c:	e060      	b.n	800d450 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d392:	7b5b      	ldrb	r3, [r3, #13]
 800d394:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d39a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <tcp_process_refused_data+0x58>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6918      	ldr	r0, [r3, #16]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	47a0      	blx	r4
 800d3be:	4603      	mov	r3, r0
 800d3c0:	73fb      	strb	r3, [r7, #15]
 800d3c2:	e007      	b.n	800d3d4 <tcp_process_refused_data+0x68>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	6879      	ldr	r1, [r7, #4]
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	f000 f8a2 	bl	800d514 <tcp_recv_null>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d12a      	bne.n	800d432 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d3dc:	7bbb      	ldrb	r3, [r7, #14]
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d033      	beq.n	800d44e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d3ee:	d005      	beq.n	800d3fc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00b      	beq.n	800d41e <tcp_process_refused_data+0xb2>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6918      	ldr	r0, [r3, #16]
 800d410:	2300      	movs	r3, #0
 800d412:	2200      	movs	r2, #0
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	47a0      	blx	r4
 800d418:	4603      	mov	r3, r0
 800d41a:	73fb      	strb	r3, [r7, #15]
 800d41c:	e001      	b.n	800d422 <tcp_process_refused_data+0xb6>
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d426:	f113 0f0d 	cmn.w	r3, #13
 800d42a:	d110      	bne.n	800d44e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d42c:	f06f 030c 	mvn.w	r3, #12
 800d430:	e00e      	b.n	800d450 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d436:	f113 0f0d 	cmn.w	r3, #13
 800d43a:	d102      	bne.n	800d442 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d43c:	f06f 030c 	mvn.w	r3, #12
 800d440:	e006      	b.n	800d450 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68ba      	ldr	r2, [r7, #8]
 800d446:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d448:	f06f 0304 	mvn.w	r3, #4
 800d44c:	e000      	b.n	800d450 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	bd90      	pop	{r4, r7, pc}
 800d458:	08017a00 	.word	0x08017a00
 800d45c:	08017f10 	.word	0x08017f10
 800d460:	08017a44 	.word	0x08017a44

0800d464 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d46c:	e007      	b.n	800d47e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f809 	bl	800d48c <tcp_seg_free>
    seg = next;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1f4      	bne.n	800d46e <tcp_segs_free+0xa>
  }
}
 800d484:	bf00      	nop
 800d486:	3710      	adds	r7, #16
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00c      	beq.n	800d4b4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d004      	beq.n	800d4ac <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fb7a 	bl	800bba0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	2003      	movs	r0, #3
 800d4b0:	f7fd fcd6 	bl	800ae60 <memp_free>
  }
}
 800d4b4:	bf00      	nop
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d106      	bne.n	800d4d8 <tcp_seg_copy+0x1c>
 800d4ca:	4b0f      	ldr	r3, [pc, #60]	; (800d508 <tcp_seg_copy+0x4c>)
 800d4cc:	f240 6282 	movw	r2, #1666	; 0x682
 800d4d0:	490e      	ldr	r1, [pc, #56]	; (800d50c <tcp_seg_copy+0x50>)
 800d4d2:	480f      	ldr	r0, [pc, #60]	; (800d510 <tcp_seg_copy+0x54>)
 800d4d4:	f008 f8d4 	bl	8015680 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d4d8:	2003      	movs	r0, #3
 800d4da:	f7fd fc6f 	bl	800adbc <memp_malloc>
 800d4de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <tcp_seg_copy+0x2e>
    return NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	e00a      	b.n	800d500 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d4ea:	2210      	movs	r2, #16
 800d4ec:	6879      	ldr	r1, [r7, #4]
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f008 f859 	bl	80155a6 <memcpy>
  pbuf_ref(cseg->p);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fe fbf7 	bl	800bcec <pbuf_ref>
  return cseg;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	08017a00 	.word	0x08017a00
 800d50c:	08017f54 	.word	0x08017f54
 800d510:	08017a44 	.word	0x08017a44

0800d514 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
 800d520:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d109      	bne.n	800d53c <tcp_recv_null+0x28>
 800d528:	4b12      	ldr	r3, [pc, #72]	; (800d574 <tcp_recv_null+0x60>)
 800d52a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d52e:	4912      	ldr	r1, [pc, #72]	; (800d578 <tcp_recv_null+0x64>)
 800d530:	4812      	ldr	r0, [pc, #72]	; (800d57c <tcp_recv_null+0x68>)
 800d532:	f008 f8a5 	bl	8015680 <iprintf>
 800d536:	f06f 030f 	mvn.w	r3, #15
 800d53a:	e016      	b.n	800d56a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d009      	beq.n	800d556 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	891b      	ldrh	r3, [r3, #8]
 800d546:	4619      	mov	r1, r3
 800d548:	68b8      	ldr	r0, [r7, #8]
 800d54a:	f7ff fad7 	bl	800cafc <tcp_recved>
    pbuf_free(p);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7fe fb26 	bl	800bba0 <pbuf_free>
 800d554:	e008      	b.n	800d568 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d104      	bne.n	800d568 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d55e:	68b8      	ldr	r0, [r7, #8]
 800d560:	f7fe ffc0 	bl	800c4e4 <tcp_close>
 800d564:	4603      	mov	r3, r0
 800d566:	e000      	b.n	800d56a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	08017a00 	.word	0x08017a00
 800d578:	08017f70 	.word	0x08017f70
 800d57c:	08017a44 	.word	0x08017a44

0800d580 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d58a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	db01      	blt.n	800d596 <tcp_kill_prio+0x16>
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	e000      	b.n	800d598 <tcp_kill_prio+0x18>
 800d596:	237f      	movs	r3, #127	; 0x7f
 800d598:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d59a:	7afb      	ldrb	r3, [r7, #11]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d034      	beq.n	800d60a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d5a0:	7afb      	ldrb	r3, [r7, #11]
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5ae:	4b19      	ldr	r3, [pc, #100]	; (800d614 <tcp_kill_prio+0x94>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	617b      	str	r3, [r7, #20]
 800d5b4:	e01f      	b.n	800d5f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	7d5b      	ldrb	r3, [r3, #21]
 800d5ba:	7afa      	ldrb	r2, [r7, #11]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d80c      	bhi.n	800d5da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d5c4:	7afa      	ldrb	r2, [r7, #11]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d112      	bne.n	800d5f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d5ca:	4b13      	ldr	r3, [pc, #76]	; (800d618 <tcp_kill_prio+0x98>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	1ad3      	subs	r3, r2, r3
 800d5d4:	68fa      	ldr	r2, [r7, #12]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d80a      	bhi.n	800d5f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d5da:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <tcp_kill_prio+0x98>)
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	6a1b      	ldr	r3, [r3, #32]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	7d5b      	ldrb	r3, [r3, #21]
 800d5ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	617b      	str	r3, [r7, #20]
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1dc      	bne.n	800d5b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d004      	beq.n	800d60c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d602:	6938      	ldr	r0, [r7, #16]
 800d604:	f7ff f8b2 	bl	800c76c <tcp_abort>
 800d608:	e000      	b.n	800d60c <tcp_kill_prio+0x8c>
    return;
 800d60a:	bf00      	nop
  }
}
 800d60c:	3718      	adds	r7, #24
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	2000b654 	.word	0x2000b654
 800d618:	2000b658 	.word	0x2000b658

0800d61c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	2b08      	cmp	r3, #8
 800d62a:	d009      	beq.n	800d640 <tcp_kill_state+0x24>
 800d62c:	79fb      	ldrb	r3, [r7, #7]
 800d62e:	2b09      	cmp	r3, #9
 800d630:	d006      	beq.n	800d640 <tcp_kill_state+0x24>
 800d632:	4b1a      	ldr	r3, [pc, #104]	; (800d69c <tcp_kill_state+0x80>)
 800d634:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d638:	4919      	ldr	r1, [pc, #100]	; (800d6a0 <tcp_kill_state+0x84>)
 800d63a:	481a      	ldr	r0, [pc, #104]	; (800d6a4 <tcp_kill_state+0x88>)
 800d63c:	f008 f820 	bl	8015680 <iprintf>

  inactivity = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d644:	2300      	movs	r3, #0
 800d646:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d648:	4b17      	ldr	r3, [pc, #92]	; (800d6a8 <tcp_kill_state+0x8c>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	617b      	str	r3, [r7, #20]
 800d64e:	e017      	b.n	800d680 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	7d1b      	ldrb	r3, [r3, #20]
 800d654:	79fa      	ldrb	r2, [r7, #7]
 800d656:	429a      	cmp	r2, r3
 800d658:	d10f      	bne.n	800d67a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d65a:	4b14      	ldr	r3, [pc, #80]	; (800d6ac <tcp_kill_state+0x90>)
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	6a1b      	ldr	r3, [r3, #32]
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	429a      	cmp	r2, r3
 800d668:	d807      	bhi.n	800d67a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d66a:	4b10      	ldr	r3, [pc, #64]	; (800d6ac <tcp_kill_state+0x90>)
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	6a1b      	ldr	r3, [r3, #32]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	617b      	str	r3, [r7, #20]
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1e4      	bne.n	800d650 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d68c:	2100      	movs	r1, #0
 800d68e:	6938      	ldr	r0, [r7, #16]
 800d690:	f7fe ffae 	bl	800c5f0 <tcp_abandon>
  }
}
 800d694:	bf00      	nop
 800d696:	3718      	adds	r7, #24
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	08017a00 	.word	0x08017a00
 800d6a0:	08017f8c 	.word	0x08017f8c
 800d6a4:	08017a44 	.word	0x08017a44
 800d6a8:	2000b654 	.word	0x2000b654
 800d6ac:	2000b658 	.word	0x2000b658

0800d6b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6be:	4b12      	ldr	r3, [pc, #72]	; (800d708 <tcp_kill_timewait+0x58>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	e012      	b.n	800d6ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d6c6:	4b11      	ldr	r3, [pc, #68]	; (800d70c <tcp_kill_timewait+0x5c>)
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6a1b      	ldr	r3, [r3, #32]
 800d6ce:	1ad3      	subs	r3, r2, r3
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d807      	bhi.n	800d6e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d6d6:	4b0d      	ldr	r3, [pc, #52]	; (800d70c <tcp_kill_timewait+0x5c>)
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1e9      	bne.n	800d6c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d6f8:	68b8      	ldr	r0, [r7, #8]
 800d6fa:	f7ff f837 	bl	800c76c <tcp_abort>
  }
}
 800d6fe:	bf00      	nop
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	2000b664 	.word	0x2000b664
 800d70c:	2000b658 	.word	0x2000b658

0800d710 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d716:	4b10      	ldr	r3, [pc, #64]	; (800d758 <tcp_handle_closepend+0x48>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d71c:	e014      	b.n	800d748 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	8b5b      	ldrh	r3, [r3, #26]
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d009      	beq.n	800d744 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	8b5b      	ldrh	r3, [r3, #26]
 800d734:	f023 0308 	bic.w	r3, r3, #8
 800d738:	b29a      	uxth	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7fe fe6a 	bl	800c418 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1e7      	bne.n	800d71e <tcp_handle_closepend+0xe>
  }
}
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	2000b654 	.word	0x2000b654

0800d75c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	4603      	mov	r3, r0
 800d764:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d766:	2001      	movs	r0, #1
 800d768:	f7fd fb28 	bl	800adbc <memp_malloc>
 800d76c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d126      	bne.n	800d7c2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d774:	f7ff ffcc 	bl	800d710 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d778:	f7ff ff9a 	bl	800d6b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d77c:	2001      	movs	r0, #1
 800d77e:	f7fd fb1d 	bl	800adbc <memp_malloc>
 800d782:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d11b      	bne.n	800d7c2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d78a:	2009      	movs	r0, #9
 800d78c:	f7ff ff46 	bl	800d61c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d790:	2001      	movs	r0, #1
 800d792:	f7fd fb13 	bl	800adbc <memp_malloc>
 800d796:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d111      	bne.n	800d7c2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d79e:	2008      	movs	r0, #8
 800d7a0:	f7ff ff3c 	bl	800d61c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d7a4:	2001      	movs	r0, #1
 800d7a6:	f7fd fb09 	bl	800adbc <memp_malloc>
 800d7aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d107      	bne.n	800d7c2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d7b2:	79fb      	ldrb	r3, [r7, #7]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff fee3 	bl	800d580 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	f7fd fafe 	bl	800adbc <memp_malloc>
 800d7c0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d03f      	beq.n	800d848 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d7c8:	229c      	movs	r2, #156	; 0x9c
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f007 fef5 	bl	80155bc <memset>
    pcb->prio = prio;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	79fa      	ldrb	r2, [r7, #7]
 800d7d6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d7de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d7e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	22ff      	movs	r2, #255	; 0xff
 800d7f6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d7fe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2206      	movs	r2, #6
 800d804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2206      	movs	r2, #6
 800d80c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d814:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2201      	movs	r2, #1
 800d81a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d81e:	4b0d      	ldr	r3, [pc, #52]	; (800d854 <tcp_alloc+0xf8>)
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d826:	4b0c      	ldr	r3, [pc, #48]	; (800d858 <tcp_alloc+0xfc>)
 800d828:	781a      	ldrb	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d834:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4a08      	ldr	r2, [pc, #32]	; (800d85c <tcp_alloc+0x100>)
 800d83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a07      	ldr	r2, [pc, #28]	; (800d860 <tcp_alloc+0x104>)
 800d844:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d848:	68fb      	ldr	r3, [r7, #12]
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	2000b658 	.word	0x2000b658
 800d858:	20004ae2 	.word	0x20004ae2
 800d85c:	0800d515 	.word	0x0800d515
 800d860:	006ddd00 	.word	0x006ddd00

0800d864 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	4603      	mov	r3, r0
 800d86c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d86e:	2040      	movs	r0, #64	; 0x40
 800d870:	f7ff ff74 	bl	800d75c <tcp_alloc>
 800d874:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d876:	68fb      	ldr	r3, [r7, #12]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	683a      	ldr	r2, [r7, #0]
 800d894:	611a      	str	r2, [r3, #16]
  }
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
	...

0800d8a4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00e      	beq.n	800d8d2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7d1b      	ldrb	r3, [r3, #20]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d106      	bne.n	800d8ca <tcp_recv+0x26>
 800d8bc:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <tcp_recv+0x38>)
 800d8be:	f240 72df 	movw	r2, #2015	; 0x7df
 800d8c2:	4907      	ldr	r1, [pc, #28]	; (800d8e0 <tcp_recv+0x3c>)
 800d8c4:	4807      	ldr	r0, [pc, #28]	; (800d8e4 <tcp_recv+0x40>)
 800d8c6:	f007 fedb 	bl	8015680 <iprintf>
    pcb->recv = recv;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	08017a00 	.word	0x08017a00
 800d8e0:	08017f9c 	.word	0x08017f9c
 800d8e4:	08017a44 	.word	0x08017a44

0800d8e8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00e      	beq.n	800d916 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7d1b      	ldrb	r3, [r3, #20]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d106      	bne.n	800d90e <tcp_sent+0x26>
 800d900:	4b07      	ldr	r3, [pc, #28]	; (800d920 <tcp_sent+0x38>)
 800d902:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d906:	4907      	ldr	r1, [pc, #28]	; (800d924 <tcp_sent+0x3c>)
 800d908:	4807      	ldr	r0, [pc, #28]	; (800d928 <tcp_sent+0x40>)
 800d90a:	f007 feb9 	bl	8015680 <iprintf>
    pcb->sent = sent;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	683a      	ldr	r2, [r7, #0]
 800d912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d916:	bf00      	nop
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	08017a00 	.word	0x08017a00
 800d924:	08017fc4 	.word	0x08017fc4
 800d928:	08017a44 	.word	0x08017a44

0800d92c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00e      	beq.n	800d95a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d106      	bne.n	800d952 <tcp_err+0x26>
 800d944:	4b07      	ldr	r3, [pc, #28]	; (800d964 <tcp_err+0x38>)
 800d946:	f640 020d 	movw	r2, #2061	; 0x80d
 800d94a:	4907      	ldr	r1, [pc, #28]	; (800d968 <tcp_err+0x3c>)
 800d94c:	4807      	ldr	r0, [pc, #28]	; (800d96c <tcp_err+0x40>)
 800d94e:	f007 fe97 	bl	8015680 <iprintf>
    pcb->errf = err;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d95a:	bf00      	nop
 800d95c:	3708      	adds	r7, #8
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	08017a00 	.word	0x08017a00
 800d968:	08017fec 	.word	0x08017fec
 800d96c:	08017a44 	.word	0x08017a44

0800d970 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d008      	beq.n	800d992 <tcp_accept+0x22>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	7d1b      	ldrb	r3, [r3, #20]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d104      	bne.n	800d992 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	619a      	str	r2, [r3, #24]
  }
}
 800d992:	bf00      	nop
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
	...

0800d9a0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d107      	bne.n	800d9c4 <tcp_poll+0x24>
 800d9b4:	4b0e      	ldr	r3, [pc, #56]	; (800d9f0 <tcp_poll+0x50>)
 800d9b6:	f640 023d 	movw	r2, #2109	; 0x83d
 800d9ba:	490e      	ldr	r1, [pc, #56]	; (800d9f4 <tcp_poll+0x54>)
 800d9bc:	480e      	ldr	r0, [pc, #56]	; (800d9f8 <tcp_poll+0x58>)
 800d9be:	f007 fe5f 	bl	8015680 <iprintf>
 800d9c2:	e011      	b.n	800d9e8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	7d1b      	ldrb	r3, [r3, #20]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d106      	bne.n	800d9da <tcp_poll+0x3a>
 800d9cc:	4b08      	ldr	r3, [pc, #32]	; (800d9f0 <tcp_poll+0x50>)
 800d9ce:	f640 023e 	movw	r2, #2110	; 0x83e
 800d9d2:	490a      	ldr	r1, [pc, #40]	; (800d9fc <tcp_poll+0x5c>)
 800d9d4:	4808      	ldr	r0, [pc, #32]	; (800d9f8 <tcp_poll+0x58>)
 800d9d6:	f007 fe53 	bl	8015680 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	79fa      	ldrb	r2, [r7, #7]
 800d9e6:	775a      	strb	r2, [r3, #29]
}
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	08017a00 	.word	0x08017a00
 800d9f4:	08018014 	.word	0x08018014
 800d9f8:	08017a44 	.word	0x08017a44
 800d9fc:	0801802c 	.word	0x0801802c

0800da00 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d107      	bne.n	800da1e <tcp_pcb_purge+0x1e>
 800da0e:	4b21      	ldr	r3, [pc, #132]	; (800da94 <tcp_pcb_purge+0x94>)
 800da10:	f640 0251 	movw	r2, #2129	; 0x851
 800da14:	4920      	ldr	r1, [pc, #128]	; (800da98 <tcp_pcb_purge+0x98>)
 800da16:	4821      	ldr	r0, [pc, #132]	; (800da9c <tcp_pcb_purge+0x9c>)
 800da18:	f007 fe32 	bl	8015680 <iprintf>
 800da1c:	e037      	b.n	800da8e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	7d1b      	ldrb	r3, [r3, #20]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d033      	beq.n	800da8e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800da2a:	2b0a      	cmp	r3, #10
 800da2c:	d02f      	beq.n	800da8e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800da32:	2b01      	cmp	r3, #1
 800da34:	d02b      	beq.n	800da8e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d007      	beq.n	800da4e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe f8ac 	bl	800bba0 <pbuf_free>
      pcb->refused_data = NULL;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f986 	bl	800dd68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da62:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff fcfb 	bl	800d464 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff fcf6 	bl	800d464 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	66da      	str	r2, [r3, #108]	; 0x6c
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	08017a00 	.word	0x08017a00
 800da98:	0801804c 	.word	0x0801804c
 800da9c:	08017a44 	.word	0x08017a44

0800daa0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d106      	bne.n	800dabe <tcp_pcb_remove+0x1e>
 800dab0:	4b3e      	ldr	r3, [pc, #248]	; (800dbac <tcp_pcb_remove+0x10c>)
 800dab2:	f640 0283 	movw	r2, #2179	; 0x883
 800dab6:	493e      	ldr	r1, [pc, #248]	; (800dbb0 <tcp_pcb_remove+0x110>)
 800dab8:	483e      	ldr	r0, [pc, #248]	; (800dbb4 <tcp_pcb_remove+0x114>)
 800daba:	f007 fde1 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d106      	bne.n	800dad2 <tcp_pcb_remove+0x32>
 800dac4:	4b39      	ldr	r3, [pc, #228]	; (800dbac <tcp_pcb_remove+0x10c>)
 800dac6:	f640 0284 	movw	r2, #2180	; 0x884
 800daca:	493b      	ldr	r1, [pc, #236]	; (800dbb8 <tcp_pcb_remove+0x118>)
 800dacc:	4839      	ldr	r0, [pc, #228]	; (800dbb4 <tcp_pcb_remove+0x114>)
 800dace:	f007 fdd7 	bl	8015680 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d105      	bne.n	800dae8 <tcp_pcb_remove+0x48>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	68da      	ldr	r2, [r3, #12]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	601a      	str	r2, [r3, #0]
 800dae6:	e013      	b.n	800db10 <tcp_pcb_remove+0x70>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	60fb      	str	r3, [r7, #12]
 800daee:	e00c      	b.n	800db0a <tcp_pcb_remove+0x6a>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d104      	bne.n	800db04 <tcp_pcb_remove+0x64>
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68da      	ldr	r2, [r3, #12]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	60da      	str	r2, [r3, #12]
 800db02:	e005      	b.n	800db10 <tcp_pcb_remove+0x70>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	60fb      	str	r3, [r7, #12]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1ef      	bne.n	800daf0 <tcp_pcb_remove+0x50>
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	2200      	movs	r2, #0
 800db14:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800db16:	6838      	ldr	r0, [r7, #0]
 800db18:	f7ff ff72 	bl	800da00 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	7d1b      	ldrb	r3, [r3, #20]
 800db20:	2b0a      	cmp	r3, #10
 800db22:	d013      	beq.n	800db4c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d00f      	beq.n	800db4c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	8b5b      	ldrh	r3, [r3, #26]
 800db30:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800db34:	2b00      	cmp	r3, #0
 800db36:	d009      	beq.n	800db4c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	8b5b      	ldrh	r3, [r3, #26]
 800db3c:	f043 0302 	orr.w	r3, r3, #2
 800db40:	b29a      	uxth	r2, r3
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db46:	6838      	ldr	r0, [r7, #0]
 800db48:	f003 fbc2 	bl	80112d0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	7d1b      	ldrb	r3, [r3, #20]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d020      	beq.n	800db96 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d006      	beq.n	800db6a <tcp_pcb_remove+0xca>
 800db5c:	4b13      	ldr	r3, [pc, #76]	; (800dbac <tcp_pcb_remove+0x10c>)
 800db5e:	f640 0293 	movw	r2, #2195	; 0x893
 800db62:	4916      	ldr	r1, [pc, #88]	; (800dbbc <tcp_pcb_remove+0x11c>)
 800db64:	4813      	ldr	r0, [pc, #76]	; (800dbb4 <tcp_pcb_remove+0x114>)
 800db66:	f007 fd8b 	bl	8015680 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d006      	beq.n	800db80 <tcp_pcb_remove+0xe0>
 800db72:	4b0e      	ldr	r3, [pc, #56]	; (800dbac <tcp_pcb_remove+0x10c>)
 800db74:	f640 0294 	movw	r2, #2196	; 0x894
 800db78:	4911      	ldr	r1, [pc, #68]	; (800dbc0 <tcp_pcb_remove+0x120>)
 800db7a:	480e      	ldr	r0, [pc, #56]	; (800dbb4 <tcp_pcb_remove+0x114>)
 800db7c:	f007 fd80 	bl	8015680 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db84:	2b00      	cmp	r3, #0
 800db86:	d006      	beq.n	800db96 <tcp_pcb_remove+0xf6>
 800db88:	4b08      	ldr	r3, [pc, #32]	; (800dbac <tcp_pcb_remove+0x10c>)
 800db8a:	f640 0296 	movw	r2, #2198	; 0x896
 800db8e:	490d      	ldr	r1, [pc, #52]	; (800dbc4 <tcp_pcb_remove+0x124>)
 800db90:	4808      	ldr	r0, [pc, #32]	; (800dbb4 <tcp_pcb_remove+0x114>)
 800db92:	f007 fd75 	bl	8015680 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	2200      	movs	r2, #0
 800db9a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	2200      	movs	r2, #0
 800dba0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dba2:	bf00      	nop
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	08017a00 	.word	0x08017a00
 800dbb0:	08018068 	.word	0x08018068
 800dbb4:	08017a44 	.word	0x08017a44
 800dbb8:	08018084 	.word	0x08018084
 800dbbc:	080180a4 	.word	0x080180a4
 800dbc0:	080180bc 	.word	0x080180bc
 800dbc4:	080180d8 	.word	0x080180d8

0800dbc8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d106      	bne.n	800dbe4 <tcp_next_iss+0x1c>
 800dbd6:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <tcp_next_iss+0x38>)
 800dbd8:	f640 02af 	movw	r2, #2223	; 0x8af
 800dbdc:	4909      	ldr	r1, [pc, #36]	; (800dc04 <tcp_next_iss+0x3c>)
 800dbde:	480a      	ldr	r0, [pc, #40]	; (800dc08 <tcp_next_iss+0x40>)
 800dbe0:	f007 fd4e 	bl	8015680 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dbe4:	4b09      	ldr	r3, [pc, #36]	; (800dc0c <tcp_next_iss+0x44>)
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <tcp_next_iss+0x48>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4413      	add	r3, r2
 800dbee:	4a07      	ldr	r2, [pc, #28]	; (800dc0c <tcp_next_iss+0x44>)
 800dbf0:	6013      	str	r3, [r2, #0]
  return iss;
 800dbf2:	4b06      	ldr	r3, [pc, #24]	; (800dc0c <tcp_next_iss+0x44>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	08017a00 	.word	0x08017a00
 800dc04:	080180f0 	.word	0x080180f0
 800dc08:	08017a44 	.word	0x08017a44
 800dc0c:	20000018 	.word	0x20000018
 800dc10:	2000b658 	.word	0x2000b658

0800dc14 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d106      	bne.n	800dc36 <tcp_eff_send_mss_netif+0x22>
 800dc28:	4b14      	ldr	r3, [pc, #80]	; (800dc7c <tcp_eff_send_mss_netif+0x68>)
 800dc2a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dc2e:	4914      	ldr	r1, [pc, #80]	; (800dc80 <tcp_eff_send_mss_netif+0x6c>)
 800dc30:	4814      	ldr	r0, [pc, #80]	; (800dc84 <tcp_eff_send_mss_netif+0x70>)
 800dc32:	f007 fd25 	bl	8015680 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d101      	bne.n	800dc40 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dc3c:	89fb      	ldrh	r3, [r7, #14]
 800dc3e:	e019      	b.n	800dc74 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc44:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dc46:	8afb      	ldrh	r3, [r7, #22]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d012      	beq.n	800dc72 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dc4c:	2328      	movs	r3, #40	; 0x28
 800dc4e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dc50:	8afa      	ldrh	r2, [r7, #22]
 800dc52:	8abb      	ldrh	r3, [r7, #20]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d904      	bls.n	800dc62 <tcp_eff_send_mss_netif+0x4e>
 800dc58:	8afa      	ldrh	r2, [r7, #22]
 800dc5a:	8abb      	ldrh	r3, [r7, #20]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	e000      	b.n	800dc64 <tcp_eff_send_mss_netif+0x50>
 800dc62:	2300      	movs	r3, #0
 800dc64:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dc66:	8a7a      	ldrh	r2, [r7, #18]
 800dc68:	89fb      	ldrh	r3, [r7, #14]
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	bf28      	it	cs
 800dc6e:	4613      	movcs	r3, r2
 800dc70:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dc72:	89fb      	ldrh	r3, [r7, #14]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3718      	adds	r7, #24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	08017a00 	.word	0x08017a00
 800dc80:	0801810c 	.word	0x0801810c
 800dc84:	08017a44 	.word	0x08017a44

0800dc88 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d119      	bne.n	800dcd0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dc9c:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dc9e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dca2:	4910      	ldr	r1, [pc, #64]	; (800dce4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dca4:	4810      	ldr	r0, [pc, #64]	; (800dce8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dca6:	f007 fceb 	bl	8015680 <iprintf>

  while (pcb != NULL) {
 800dcaa:	e011      	b.n	800dcd0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d108      	bne.n	800dcca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7fe fd54 	bl	800c76c <tcp_abort>
      pcb = next;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	e002      	b.n	800dcd0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1ea      	bne.n	800dcac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dcd6:	bf00      	nop
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	08017a00 	.word	0x08017a00
 800dce4:	08018134 	.word	0x08018134
 800dce8:	08017a44 	.word	0x08017a44

0800dcec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d02a      	beq.n	800dd52 <tcp_netif_ip_addr_changed+0x66>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d026      	beq.n	800dd52 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dd04:	4b15      	ldr	r3, [pc, #84]	; (800dd5c <tcp_netif_ip_addr_changed+0x70>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7ff ffbc 	bl	800dc88 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dd10:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <tcp_netif_ip_addr_changed+0x74>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4619      	mov	r1, r3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff ffb6 	bl	800dc88 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d017      	beq.n	800dd52 <tcp_netif_ip_addr_changed+0x66>
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d013      	beq.n	800dd52 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd2a:	4b0e      	ldr	r3, [pc, #56]	; (800dd64 <tcp_netif_ip_addr_changed+0x78>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	60fb      	str	r3, [r7, #12]
 800dd30:	e00c      	b.n	800dd4c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d103      	bne.n	800dd46 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1ef      	bne.n	800dd32 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dd52:	bf00      	nop
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	2000b654 	.word	0x2000b654
 800dd60:	2000b660 	.word	0x2000b660
 800dd64:	2000b65c 	.word	0x2000b65c

0800dd68 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d007      	beq.n	800dd88 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7ff fb71 	bl	800d464 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dd88:	bf00      	nop
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dd90:	b590      	push	{r4, r7, lr}
 800dd92:	b08d      	sub	sp, #52	; 0x34
 800dd94:	af04      	add	r7, sp, #16
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d105      	bne.n	800ddac <tcp_input+0x1c>
 800dda0:	4b9b      	ldr	r3, [pc, #620]	; (800e010 <tcp_input+0x280>)
 800dda2:	2283      	movs	r2, #131	; 0x83
 800dda4:	499b      	ldr	r1, [pc, #620]	; (800e014 <tcp_input+0x284>)
 800dda6:	489c      	ldr	r0, [pc, #624]	; (800e018 <tcp_input+0x288>)
 800dda8:	f007 fc6a 	bl	8015680 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	4a9a      	ldr	r2, [pc, #616]	; (800e01c <tcp_input+0x28c>)
 800ddb2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	895b      	ldrh	r3, [r3, #10]
 800ddb8:	2b13      	cmp	r3, #19
 800ddba:	f240 83c4 	bls.w	800e546 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddbe:	4b98      	ldr	r3, [pc, #608]	; (800e020 <tcp_input+0x290>)
 800ddc0:	695a      	ldr	r2, [r3, #20]
 800ddc2:	4b97      	ldr	r3, [pc, #604]	; (800e020 <tcp_input+0x290>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	4610      	mov	r0, r2
 800ddca:	f006 f9ed 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f040 83ba 	bne.w	800e54a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ddd6:	4b92      	ldr	r3, [pc, #584]	; (800e020 <tcp_input+0x290>)
 800ddd8:	695b      	ldr	r3, [r3, #20]
 800ddda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddde:	2be0      	cmp	r3, #224	; 0xe0
 800dde0:	f000 83b3 	beq.w	800e54a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dde4:	4b8d      	ldr	r3, [pc, #564]	; (800e01c <tcp_input+0x28c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	899b      	ldrh	r3, [r3, #12]
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fc fb2f 	bl	800a450 <lwip_htons>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	0b1b      	lsrs	r3, r3, #12
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ddfe:	7cbb      	ldrb	r3, [r7, #18]
 800de00:	2b13      	cmp	r3, #19
 800de02:	f240 83a2 	bls.w	800e54a <tcp_input+0x7ba>
 800de06:	7cbb      	ldrb	r3, [r7, #18]
 800de08:	b29a      	uxth	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	891b      	ldrh	r3, [r3, #8]
 800de0e:	429a      	cmp	r2, r3
 800de10:	f200 839b 	bhi.w	800e54a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800de14:	7cbb      	ldrb	r3, [r7, #18]
 800de16:	b29b      	uxth	r3, r3
 800de18:	3b14      	subs	r3, #20
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	4b81      	ldr	r3, [pc, #516]	; (800e024 <tcp_input+0x294>)
 800de1e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800de20:	4b81      	ldr	r3, [pc, #516]	; (800e028 <tcp_input+0x298>)
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	895a      	ldrh	r2, [r3, #10]
 800de2a:	7cbb      	ldrb	r3, [r7, #18]
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	429a      	cmp	r2, r3
 800de30:	d309      	bcc.n	800de46 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800de32:	4b7c      	ldr	r3, [pc, #496]	; (800e024 <tcp_input+0x294>)
 800de34:	881a      	ldrh	r2, [r3, #0]
 800de36:	4b7d      	ldr	r3, [pc, #500]	; (800e02c <tcp_input+0x29c>)
 800de38:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800de3a:	7cbb      	ldrb	r3, [r7, #18]
 800de3c:	4619      	mov	r1, r3
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7fd fe28 	bl	800ba94 <pbuf_remove_header>
 800de44:	e04e      	b.n	800dee4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d105      	bne.n	800de5a <tcp_input+0xca>
 800de4e:	4b70      	ldr	r3, [pc, #448]	; (800e010 <tcp_input+0x280>)
 800de50:	22c2      	movs	r2, #194	; 0xc2
 800de52:	4977      	ldr	r1, [pc, #476]	; (800e030 <tcp_input+0x2a0>)
 800de54:	4870      	ldr	r0, [pc, #448]	; (800e018 <tcp_input+0x288>)
 800de56:	f007 fc13 	bl	8015680 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800de5a:	2114      	movs	r1, #20
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7fd fe19 	bl	800ba94 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	895a      	ldrh	r2, [r3, #10]
 800de66:	4b71      	ldr	r3, [pc, #452]	; (800e02c <tcp_input+0x29c>)
 800de68:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800de6a:	4b6e      	ldr	r3, [pc, #440]	; (800e024 <tcp_input+0x294>)
 800de6c:	881a      	ldrh	r2, [r3, #0]
 800de6e:	4b6f      	ldr	r3, [pc, #444]	; (800e02c <tcp_input+0x29c>)
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800de76:	4b6d      	ldr	r3, [pc, #436]	; (800e02c <tcp_input+0x29c>)
 800de78:	881b      	ldrh	r3, [r3, #0]
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7fd fe09 	bl	800ba94 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	895b      	ldrh	r3, [r3, #10]
 800de88:	8a3a      	ldrh	r2, [r7, #16]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	f200 835f 	bhi.w	800e54e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	4a64      	ldr	r2, [pc, #400]	; (800e028 <tcp_input+0x298>)
 800de98:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	8a3a      	ldrh	r2, [r7, #16]
 800dea0:	4611      	mov	r1, r2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fd fdf6 	bl	800ba94 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	891a      	ldrh	r2, [r3, #8]
 800deac:	8a3b      	ldrh	r3, [r7, #16]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	895b      	ldrh	r3, [r3, #10]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d005      	beq.n	800deca <tcp_input+0x13a>
 800debe:	4b54      	ldr	r3, [pc, #336]	; (800e010 <tcp_input+0x280>)
 800dec0:	22df      	movs	r2, #223	; 0xdf
 800dec2:	495c      	ldr	r1, [pc, #368]	; (800e034 <tcp_input+0x2a4>)
 800dec4:	4854      	ldr	r0, [pc, #336]	; (800e018 <tcp_input+0x288>)
 800dec6:	f007 fbdb 	bl	8015680 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	891a      	ldrh	r2, [r3, #8]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	891b      	ldrh	r3, [r3, #8]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d005      	beq.n	800dee4 <tcp_input+0x154>
 800ded8:	4b4d      	ldr	r3, [pc, #308]	; (800e010 <tcp_input+0x280>)
 800deda:	22e0      	movs	r2, #224	; 0xe0
 800dedc:	4956      	ldr	r1, [pc, #344]	; (800e038 <tcp_input+0x2a8>)
 800dede:	484e      	ldr	r0, [pc, #312]	; (800e018 <tcp_input+0x288>)
 800dee0:	f007 fbce 	bl	8015680 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dee4:	4b4d      	ldr	r3, [pc, #308]	; (800e01c <tcp_input+0x28c>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	b29a      	uxth	r2, r3
 800deec:	4b4b      	ldr	r3, [pc, #300]	; (800e01c <tcp_input+0x28c>)
 800deee:	681c      	ldr	r4, [r3, #0]
 800def0:	4610      	mov	r0, r2
 800def2:	f7fc faad 	bl	800a450 <lwip_htons>
 800def6:	4603      	mov	r3, r0
 800def8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800defa:	4b48      	ldr	r3, [pc, #288]	; (800e01c <tcp_input+0x28c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	885b      	ldrh	r3, [r3, #2]
 800df00:	b29a      	uxth	r2, r3
 800df02:	4b46      	ldr	r3, [pc, #280]	; (800e01c <tcp_input+0x28c>)
 800df04:	681c      	ldr	r4, [r3, #0]
 800df06:	4610      	mov	r0, r2
 800df08:	f7fc faa2 	bl	800a450 <lwip_htons>
 800df0c:	4603      	mov	r3, r0
 800df0e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800df10:	4b42      	ldr	r3, [pc, #264]	; (800e01c <tcp_input+0x28c>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	4b41      	ldr	r3, [pc, #260]	; (800e01c <tcp_input+0x28c>)
 800df18:	681c      	ldr	r4, [r3, #0]
 800df1a:	4610      	mov	r0, r2
 800df1c:	f7fc faad 	bl	800a47a <lwip_htonl>
 800df20:	4603      	mov	r3, r0
 800df22:	6063      	str	r3, [r4, #4]
 800df24:	6863      	ldr	r3, [r4, #4]
 800df26:	4a45      	ldr	r2, [pc, #276]	; (800e03c <tcp_input+0x2ac>)
 800df28:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800df2a:	4b3c      	ldr	r3, [pc, #240]	; (800e01c <tcp_input+0x28c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	689a      	ldr	r2, [r3, #8]
 800df30:	4b3a      	ldr	r3, [pc, #232]	; (800e01c <tcp_input+0x28c>)
 800df32:	681c      	ldr	r4, [r3, #0]
 800df34:	4610      	mov	r0, r2
 800df36:	f7fc faa0 	bl	800a47a <lwip_htonl>
 800df3a:	4603      	mov	r3, r0
 800df3c:	60a3      	str	r3, [r4, #8]
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	4a3f      	ldr	r2, [pc, #252]	; (800e040 <tcp_input+0x2b0>)
 800df42:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800df44:	4b35      	ldr	r3, [pc, #212]	; (800e01c <tcp_input+0x28c>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	89db      	ldrh	r3, [r3, #14]
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	4b33      	ldr	r3, [pc, #204]	; (800e01c <tcp_input+0x28c>)
 800df4e:	681c      	ldr	r4, [r3, #0]
 800df50:	4610      	mov	r0, r2
 800df52:	f7fc fa7d 	bl	800a450 <lwip_htons>
 800df56:	4603      	mov	r3, r0
 800df58:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800df5a:	4b30      	ldr	r3, [pc, #192]	; (800e01c <tcp_input+0x28c>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	899b      	ldrh	r3, [r3, #12]
 800df60:	b29b      	uxth	r3, r3
 800df62:	4618      	mov	r0, r3
 800df64:	f7fc fa74 	bl	800a450 <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df70:	b2da      	uxtb	r2, r3
 800df72:	4b34      	ldr	r3, [pc, #208]	; (800e044 <tcp_input+0x2b4>)
 800df74:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	891a      	ldrh	r2, [r3, #8]
 800df7a:	4b33      	ldr	r3, [pc, #204]	; (800e048 <tcp_input+0x2b8>)
 800df7c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800df7e:	4b31      	ldr	r3, [pc, #196]	; (800e044 <tcp_input+0x2b4>)
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	f003 0303 	and.w	r3, r3, #3
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00c      	beq.n	800dfa4 <tcp_input+0x214>
    tcplen++;
 800df8a:	4b2f      	ldr	r3, [pc, #188]	; (800e048 <tcp_input+0x2b8>)
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	3301      	adds	r3, #1
 800df90:	b29a      	uxth	r2, r3
 800df92:	4b2d      	ldr	r3, [pc, #180]	; (800e048 <tcp_input+0x2b8>)
 800df94:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	891a      	ldrh	r2, [r3, #8]
 800df9a:	4b2b      	ldr	r3, [pc, #172]	; (800e048 <tcp_input+0x2b8>)
 800df9c:	881b      	ldrh	r3, [r3, #0]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	f200 82d7 	bhi.w	800e552 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa8:	4b28      	ldr	r3, [pc, #160]	; (800e04c <tcp_input+0x2bc>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	61fb      	str	r3, [r7, #28]
 800dfae:	e09d      	b.n	800e0ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d105      	bne.n	800dfc4 <tcp_input+0x234>
 800dfb8:	4b15      	ldr	r3, [pc, #84]	; (800e010 <tcp_input+0x280>)
 800dfba:	22fb      	movs	r2, #251	; 0xfb
 800dfbc:	4924      	ldr	r1, [pc, #144]	; (800e050 <tcp_input+0x2c0>)
 800dfbe:	4816      	ldr	r0, [pc, #88]	; (800e018 <tcp_input+0x288>)
 800dfc0:	f007 fb5e 	bl	8015680 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	7d1b      	ldrb	r3, [r3, #20]
 800dfc8:	2b0a      	cmp	r3, #10
 800dfca:	d105      	bne.n	800dfd8 <tcp_input+0x248>
 800dfcc:	4b10      	ldr	r3, [pc, #64]	; (800e010 <tcp_input+0x280>)
 800dfce:	22fc      	movs	r2, #252	; 0xfc
 800dfd0:	4920      	ldr	r1, [pc, #128]	; (800e054 <tcp_input+0x2c4>)
 800dfd2:	4811      	ldr	r0, [pc, #68]	; (800e018 <tcp_input+0x288>)
 800dfd4:	f007 fb54 	bl	8015680 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	7d1b      	ldrb	r3, [r3, #20]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d105      	bne.n	800dfec <tcp_input+0x25c>
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <tcp_input+0x280>)
 800dfe2:	22fd      	movs	r2, #253	; 0xfd
 800dfe4:	491c      	ldr	r1, [pc, #112]	; (800e058 <tcp_input+0x2c8>)
 800dfe6:	480c      	ldr	r0, [pc, #48]	; (800e018 <tcp_input+0x288>)
 800dfe8:	f007 fb4a 	bl	8015680 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	7a1b      	ldrb	r3, [r3, #8]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d033      	beq.n	800e05c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	7a1a      	ldrb	r2, [r3, #8]
 800dff8:	4b09      	ldr	r3, [pc, #36]	; (800e020 <tcp_input+0x290>)
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e000:	3301      	adds	r3, #1
 800e002:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e004:	429a      	cmp	r2, r3
 800e006:	d029      	beq.n	800e05c <tcp_input+0x2cc>
      prev = pcb;
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	61bb      	str	r3, [r7, #24]
      continue;
 800e00c:	e06b      	b.n	800e0e6 <tcp_input+0x356>
 800e00e:	bf00      	nop
 800e010:	08018168 	.word	0x08018168
 800e014:	0801819c 	.word	0x0801819c
 800e018:	080181b4 	.word	0x080181b4
 800e01c:	20004af4 	.word	0x20004af4
 800e020:	20007f40 	.word	0x20007f40
 800e024:	20004af8 	.word	0x20004af8
 800e028:	20004afc 	.word	0x20004afc
 800e02c:	20004afa 	.word	0x20004afa
 800e030:	080181dc 	.word	0x080181dc
 800e034:	080181ec 	.word	0x080181ec
 800e038:	080181f8 	.word	0x080181f8
 800e03c:	20004b04 	.word	0x20004b04
 800e040:	20004b08 	.word	0x20004b08
 800e044:	20004b10 	.word	0x20004b10
 800e048:	20004b0e 	.word	0x20004b0e
 800e04c:	2000b654 	.word	0x2000b654
 800e050:	08018218 	.word	0x08018218
 800e054:	08018240 	.word	0x08018240
 800e058:	0801826c 	.word	0x0801826c
    }

    if (pcb->remote_port == tcphdr->src &&
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	8b1a      	ldrh	r2, [r3, #24]
 800e060:	4b94      	ldr	r3, [pc, #592]	; (800e2b4 <tcp_input+0x524>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	881b      	ldrh	r3, [r3, #0]
 800e066:	b29b      	uxth	r3, r3
 800e068:	429a      	cmp	r2, r3
 800e06a:	d13a      	bne.n	800e0e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	8ada      	ldrh	r2, [r3, #22]
 800e070:	4b90      	ldr	r3, [pc, #576]	; (800e2b4 <tcp_input+0x524>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	885b      	ldrh	r3, [r3, #2]
 800e076:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e078:	429a      	cmp	r2, r3
 800e07a:	d132      	bne.n	800e0e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	4b8d      	ldr	r3, [pc, #564]	; (800e2b8 <tcp_input+0x528>)
 800e082:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e084:	429a      	cmp	r2, r3
 800e086:	d12c      	bne.n	800e0e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	4b8a      	ldr	r3, [pc, #552]	; (800e2b8 <tcp_input+0x528>)
 800e08e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e090:	429a      	cmp	r2, r3
 800e092:	d126      	bne.n	800e0e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	69fa      	ldr	r2, [r7, #28]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d106      	bne.n	800e0ac <tcp_input+0x31c>
 800e09e:	4b87      	ldr	r3, [pc, #540]	; (800e2bc <tcp_input+0x52c>)
 800e0a0:	f240 120d 	movw	r2, #269	; 0x10d
 800e0a4:	4986      	ldr	r1, [pc, #536]	; (800e2c0 <tcp_input+0x530>)
 800e0a6:	4887      	ldr	r0, [pc, #540]	; (800e2c4 <tcp_input+0x534>)
 800e0a8:	f007 faea 	bl	8015680 <iprintf>
      if (prev != NULL) {
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00a      	beq.n	800e0c8 <tcp_input+0x338>
        prev->next = pcb->next;
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	68da      	ldr	r2, [r3, #12]
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e0ba:	4b83      	ldr	r3, [pc, #524]	; (800e2c8 <tcp_input+0x538>)
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e0c2:	4a81      	ldr	r2, [pc, #516]	; (800e2c8 <tcp_input+0x538>)
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	69fa      	ldr	r2, [r7, #28]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d111      	bne.n	800e0f6 <tcp_input+0x366>
 800e0d2:	4b7a      	ldr	r3, [pc, #488]	; (800e2bc <tcp_input+0x52c>)
 800e0d4:	f240 1215 	movw	r2, #277	; 0x115
 800e0d8:	497c      	ldr	r1, [pc, #496]	; (800e2cc <tcp_input+0x53c>)
 800e0da:	487a      	ldr	r0, [pc, #488]	; (800e2c4 <tcp_input+0x534>)
 800e0dc:	f007 fad0 	bl	8015680 <iprintf>
      break;
 800e0e0:	e009      	b.n	800e0f6 <tcp_input+0x366>
    }
    prev = pcb;
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f47f af5e 	bne.w	800dfb0 <tcp_input+0x220>
 800e0f4:	e000      	b.n	800e0f8 <tcp_input+0x368>
      break;
 800e0f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f040 8095 	bne.w	800e22a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e100:	4b73      	ldr	r3, [pc, #460]	; (800e2d0 <tcp_input+0x540>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	61fb      	str	r3, [r7, #28]
 800e106:	e03f      	b.n	800e188 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	7d1b      	ldrb	r3, [r3, #20]
 800e10c:	2b0a      	cmp	r3, #10
 800e10e:	d006      	beq.n	800e11e <tcp_input+0x38e>
 800e110:	4b6a      	ldr	r3, [pc, #424]	; (800e2bc <tcp_input+0x52c>)
 800e112:	f240 121f 	movw	r2, #287	; 0x11f
 800e116:	496f      	ldr	r1, [pc, #444]	; (800e2d4 <tcp_input+0x544>)
 800e118:	486a      	ldr	r0, [pc, #424]	; (800e2c4 <tcp_input+0x534>)
 800e11a:	f007 fab1 	bl	8015680 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	7a1b      	ldrb	r3, [r3, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d009      	beq.n	800e13a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	7a1a      	ldrb	r2, [r3, #8]
 800e12a:	4b63      	ldr	r3, [pc, #396]	; (800e2b8 <tcp_input+0x528>)
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e132:	3301      	adds	r3, #1
 800e134:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e136:	429a      	cmp	r2, r3
 800e138:	d122      	bne.n	800e180 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	8b1a      	ldrh	r2, [r3, #24]
 800e13e:	4b5d      	ldr	r3, [pc, #372]	; (800e2b4 <tcp_input+0x524>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	b29b      	uxth	r3, r3
 800e146:	429a      	cmp	r2, r3
 800e148:	d11b      	bne.n	800e182 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	8ada      	ldrh	r2, [r3, #22]
 800e14e:	4b59      	ldr	r3, [pc, #356]	; (800e2b4 <tcp_input+0x524>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	885b      	ldrh	r3, [r3, #2]
 800e154:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e156:	429a      	cmp	r2, r3
 800e158:	d113      	bne.n	800e182 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	685a      	ldr	r2, [r3, #4]
 800e15e:	4b56      	ldr	r3, [pc, #344]	; (800e2b8 <tcp_input+0x528>)
 800e160:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e162:	429a      	cmp	r2, r3
 800e164:	d10d      	bne.n	800e182 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	4b53      	ldr	r3, [pc, #332]	; (800e2b8 <tcp_input+0x528>)
 800e16c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e16e:	429a      	cmp	r2, r3
 800e170:	d107      	bne.n	800e182 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e172:	69f8      	ldr	r0, [r7, #28]
 800e174:	f000 fb52 	bl	800e81c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7fd fd11 	bl	800bba0 <pbuf_free>
        return;
 800e17e:	e1ee      	b.n	800e55e <tcp_input+0x7ce>
        continue;
 800e180:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	61fb      	str	r3, [r7, #28]
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1bc      	bne.n	800e108 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e18e:	2300      	movs	r3, #0
 800e190:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e192:	4b51      	ldr	r3, [pc, #324]	; (800e2d8 <tcp_input+0x548>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	617b      	str	r3, [r7, #20]
 800e198:	e02a      	b.n	800e1f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	7a1b      	ldrb	r3, [r3, #8]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00c      	beq.n	800e1bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	7a1a      	ldrb	r2, [r3, #8]
 800e1a6:	4b44      	ldr	r3, [pc, #272]	; (800e2b8 <tcp_input+0x528>)
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d002      	beq.n	800e1bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	61bb      	str	r3, [r7, #24]
        continue;
 800e1ba:	e016      	b.n	800e1ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	8ada      	ldrh	r2, [r3, #22]
 800e1c0:	4b3c      	ldr	r3, [pc, #240]	; (800e2b4 <tcp_input+0x524>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	885b      	ldrh	r3, [r3, #2]
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d10c      	bne.n	800e1e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	4b39      	ldr	r3, [pc, #228]	; (800e2b8 <tcp_input+0x528>)
 800e1d2:	695b      	ldr	r3, [r3, #20]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d00f      	beq.n	800e1f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00d      	beq.n	800e1fa <tcp_input+0x46a>
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d009      	beq.n	800e1fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	617b      	str	r3, [r7, #20]
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1d1      	bne.n	800e19a <tcp_input+0x40a>
 800e1f6:	e000      	b.n	800e1fa <tcp_input+0x46a>
            break;
 800e1f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d014      	beq.n	800e22a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	68da      	ldr	r2, [r3, #12]
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e20e:	4b32      	ldr	r3, [pc, #200]	; (800e2d8 <tcp_input+0x548>)
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e216:	4a30      	ldr	r2, [pc, #192]	; (800e2d8 <tcp_input+0x548>)
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e21c:	6978      	ldr	r0, [r7, #20]
 800e21e:	f000 f9ff 	bl	800e620 <tcp_listen_input>
      }
      pbuf_free(p);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7fd fcbc 	bl	800bba0 <pbuf_free>
      return;
 800e228:	e199      	b.n	800e55e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 8160 	beq.w	800e4f2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e232:	4b2a      	ldr	r3, [pc, #168]	; (800e2dc <tcp_input+0x54c>)
 800e234:	2200      	movs	r2, #0
 800e236:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	891a      	ldrh	r2, [r3, #8]
 800e23c:	4b27      	ldr	r3, [pc, #156]	; (800e2dc <tcp_input+0x54c>)
 800e23e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e240:	4a26      	ldr	r2, [pc, #152]	; (800e2dc <tcp_input+0x54c>)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e246:	4b1b      	ldr	r3, [pc, #108]	; (800e2b4 <tcp_input+0x524>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a24      	ldr	r2, [pc, #144]	; (800e2dc <tcp_input+0x54c>)
 800e24c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e24e:	4b24      	ldr	r3, [pc, #144]	; (800e2e0 <tcp_input+0x550>)
 800e250:	2200      	movs	r2, #0
 800e252:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e254:	4b23      	ldr	r3, [pc, #140]	; (800e2e4 <tcp_input+0x554>)
 800e256:	2200      	movs	r2, #0
 800e258:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e25a:	4b23      	ldr	r3, [pc, #140]	; (800e2e8 <tcp_input+0x558>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e260:	4b22      	ldr	r3, [pc, #136]	; (800e2ec <tcp_input+0x55c>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	f003 0308 	and.w	r3, r3, #8
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d006      	beq.n	800e27a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	7b5b      	ldrb	r3, [r3, #13]
 800e270:	f043 0301 	orr.w	r3, r3, #1
 800e274:	b2da      	uxtb	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d038      	beq.n	800e2f4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e282:	69f8      	ldr	r0, [r7, #28]
 800e284:	f7ff f872 	bl	800d36c <tcp_process_refused_data>
 800e288:	4603      	mov	r3, r0
 800e28a:	f113 0f0d 	cmn.w	r3, #13
 800e28e:	d007      	beq.n	800e2a0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e294:	2b00      	cmp	r3, #0
 800e296:	d02d      	beq.n	800e2f4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e298:	4b15      	ldr	r3, [pc, #84]	; (800e2f0 <tcp_input+0x560>)
 800e29a:	881b      	ldrh	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d029      	beq.n	800e2f4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f040 8104 	bne.w	800e4b2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e2aa:	69f8      	ldr	r0, [r7, #28]
 800e2ac:	f003 fe26 	bl	8011efc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e2b0:	e0ff      	b.n	800e4b2 <tcp_input+0x722>
 800e2b2:	bf00      	nop
 800e2b4:	20004af4 	.word	0x20004af4
 800e2b8:	20007f40 	.word	0x20007f40
 800e2bc:	08018168 	.word	0x08018168
 800e2c0:	08018294 	.word	0x08018294
 800e2c4:	080181b4 	.word	0x080181b4
 800e2c8:	2000b654 	.word	0x2000b654
 800e2cc:	080182c0 	.word	0x080182c0
 800e2d0:	2000b664 	.word	0x2000b664
 800e2d4:	080182ec 	.word	0x080182ec
 800e2d8:	2000b65c 	.word	0x2000b65c
 800e2dc:	20004ae4 	.word	0x20004ae4
 800e2e0:	20004b14 	.word	0x20004b14
 800e2e4:	20004b11 	.word	0x20004b11
 800e2e8:	20004b0c 	.word	0x20004b0c
 800e2ec:	20004b10 	.word	0x20004b10
 800e2f0:	20004b0e 	.word	0x20004b0e
      }
    }
    tcp_input_pcb = pcb;
 800e2f4:	4a9b      	ldr	r2, [pc, #620]	; (800e564 <tcp_input+0x7d4>)
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e2fa:	69f8      	ldr	r0, [r7, #28]
 800e2fc:	f000 fb0a 	bl	800e914 <tcp_process>
 800e300:	4603      	mov	r3, r0
 800e302:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e304:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e308:	f113 0f0d 	cmn.w	r3, #13
 800e30c:	f000 80d3 	beq.w	800e4b6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e310:	4b95      	ldr	r3, [pc, #596]	; (800e568 <tcp_input+0x7d8>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	f003 0308 	and.w	r3, r3, #8
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d015      	beq.n	800e348 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e322:	2b00      	cmp	r3, #0
 800e324:	d008      	beq.n	800e338 <tcp_input+0x5a8>
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e32c:	69fa      	ldr	r2, [r7, #28]
 800e32e:	6912      	ldr	r2, [r2, #16]
 800e330:	f06f 010d 	mvn.w	r1, #13
 800e334:	4610      	mov	r0, r2
 800e336:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e338:	69f9      	ldr	r1, [r7, #28]
 800e33a:	488c      	ldr	r0, [pc, #560]	; (800e56c <tcp_input+0x7dc>)
 800e33c:	f7ff fbb0 	bl	800daa0 <tcp_pcb_remove>
        tcp_free(pcb);
 800e340:	69f8      	ldr	r0, [r7, #28]
 800e342:	f7fd fed9 	bl	800c0f8 <tcp_free>
 800e346:	e0c1      	b.n	800e4cc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e34c:	4b88      	ldr	r3, [pc, #544]	; (800e570 <tcp_input+0x7e0>)
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d01d      	beq.n	800e390 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e354:	4b86      	ldr	r3, [pc, #536]	; (800e570 <tcp_input+0x7e0>)
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00a      	beq.n	800e37a <tcp_input+0x5ea>
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e36a:	69fa      	ldr	r2, [r7, #28]
 800e36c:	6910      	ldr	r0, [r2, #16]
 800e36e:	89fa      	ldrh	r2, [r7, #14]
 800e370:	69f9      	ldr	r1, [r7, #28]
 800e372:	4798      	blx	r3
 800e374:	4603      	mov	r3, r0
 800e376:	74fb      	strb	r3, [r7, #19]
 800e378:	e001      	b.n	800e37e <tcp_input+0x5ee>
 800e37a:	2300      	movs	r3, #0
 800e37c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e37e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e382:	f113 0f0d 	cmn.w	r3, #13
 800e386:	f000 8098 	beq.w	800e4ba <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e38a:	4b79      	ldr	r3, [pc, #484]	; (800e570 <tcp_input+0x7e0>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e390:	69f8      	ldr	r0, [r7, #28]
 800e392:	f000 f905 	bl	800e5a0 <tcp_input_delayed_close>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f040 8090 	bne.w	800e4be <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e39e:	4b75      	ldr	r3, [pc, #468]	; (800e574 <tcp_input+0x7e4>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d041      	beq.n	800e42a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d006      	beq.n	800e3bc <tcp_input+0x62c>
 800e3ae:	4b72      	ldr	r3, [pc, #456]	; (800e578 <tcp_input+0x7e8>)
 800e3b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e3b4:	4971      	ldr	r1, [pc, #452]	; (800e57c <tcp_input+0x7ec>)
 800e3b6:	4872      	ldr	r0, [pc, #456]	; (800e580 <tcp_input+0x7f0>)
 800e3b8:	f007 f962 	bl	8015680 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	8b5b      	ldrh	r3, [r3, #26]
 800e3c0:	f003 0310 	and.w	r3, r3, #16
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d008      	beq.n	800e3da <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e3c8:	4b6a      	ldr	r3, [pc, #424]	; (800e574 <tcp_input+0x7e4>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fd fbe7 	bl	800bba0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e3d2:	69f8      	ldr	r0, [r7, #28]
 800e3d4:	f7fe f9ca 	bl	800c76c <tcp_abort>
            goto aborted;
 800e3d8:	e078      	b.n	800e4cc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00c      	beq.n	800e3fe <tcp_input+0x66e>
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	6918      	ldr	r0, [r3, #16]
 800e3ee:	4b61      	ldr	r3, [pc, #388]	; (800e574 <tcp_input+0x7e4>)
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	69f9      	ldr	r1, [r7, #28]
 800e3f6:	47a0      	blx	r4
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	74fb      	strb	r3, [r7, #19]
 800e3fc:	e008      	b.n	800e410 <tcp_input+0x680>
 800e3fe:	4b5d      	ldr	r3, [pc, #372]	; (800e574 <tcp_input+0x7e4>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	2300      	movs	r3, #0
 800e404:	69f9      	ldr	r1, [r7, #28]
 800e406:	2000      	movs	r0, #0
 800e408:	f7ff f884 	bl	800d514 <tcp_recv_null>
 800e40c:	4603      	mov	r3, r0
 800e40e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e410:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e414:	f113 0f0d 	cmn.w	r3, #13
 800e418:	d053      	beq.n	800e4c2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e41a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e422:	4b54      	ldr	r3, [pc, #336]	; (800e574 <tcp_input+0x7e4>)
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e42a:	4b4f      	ldr	r3, [pc, #316]	; (800e568 <tcp_input+0x7d8>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	f003 0320 	and.w	r3, r3, #32
 800e432:	2b00      	cmp	r3, #0
 800e434:	d030      	beq.n	800e498 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d009      	beq.n	800e452 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e442:	7b5a      	ldrb	r2, [r3, #13]
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e448:	f042 0220 	orr.w	r2, r2, #32
 800e44c:	b2d2      	uxtb	r2, r2
 800e44e:	735a      	strb	r2, [r3, #13]
 800e450:	e022      	b.n	800e498 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e456:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e45a:	d005      	beq.n	800e468 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e460:	3301      	adds	r3, #1
 800e462:	b29a      	uxth	r2, r3
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00b      	beq.n	800e48a <tcp_input+0x6fa>
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	6918      	ldr	r0, [r3, #16]
 800e47c:	2300      	movs	r3, #0
 800e47e:	2200      	movs	r2, #0
 800e480:	69f9      	ldr	r1, [r7, #28]
 800e482:	47a0      	blx	r4
 800e484:	4603      	mov	r3, r0
 800e486:	74fb      	strb	r3, [r7, #19]
 800e488:	e001      	b.n	800e48e <tcp_input+0x6fe>
 800e48a:	2300      	movs	r3, #0
 800e48c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e48e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e492:	f113 0f0d 	cmn.w	r3, #13
 800e496:	d016      	beq.n	800e4c6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e498:	4b32      	ldr	r3, [pc, #200]	; (800e564 <tcp_input+0x7d4>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e49e:	69f8      	ldr	r0, [r7, #28]
 800e4a0:	f000 f87e 	bl	800e5a0 <tcp_input_delayed_close>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d10f      	bne.n	800e4ca <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e4aa:	69f8      	ldr	r0, [r7, #28]
 800e4ac:	f002 ff10 	bl	80112d0 <tcp_output>
 800e4b0:	e00c      	b.n	800e4cc <tcp_input+0x73c>
        goto aborted;
 800e4b2:	bf00      	nop
 800e4b4:	e00a      	b.n	800e4cc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e4b6:	bf00      	nop
 800e4b8:	e008      	b.n	800e4cc <tcp_input+0x73c>
              goto aborted;
 800e4ba:	bf00      	nop
 800e4bc:	e006      	b.n	800e4cc <tcp_input+0x73c>
          goto aborted;
 800e4be:	bf00      	nop
 800e4c0:	e004      	b.n	800e4cc <tcp_input+0x73c>
            goto aborted;
 800e4c2:	bf00      	nop
 800e4c4:	e002      	b.n	800e4cc <tcp_input+0x73c>
              goto aborted;
 800e4c6:	bf00      	nop
 800e4c8:	e000      	b.n	800e4cc <tcp_input+0x73c>
          goto aborted;
 800e4ca:	bf00      	nop
    tcp_input_pcb = NULL;
 800e4cc:	4b25      	ldr	r3, [pc, #148]	; (800e564 <tcp_input+0x7d4>)
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e4d2:	4b28      	ldr	r3, [pc, #160]	; (800e574 <tcp_input+0x7e4>)
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e4d8:	4b2a      	ldr	r3, [pc, #168]	; (800e584 <tcp_input+0x7f4>)
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d03d      	beq.n	800e55c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800e4e0:	4b28      	ldr	r3, [pc, #160]	; (800e584 <tcp_input+0x7f4>)
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fd fb5b 	bl	800bba0 <pbuf_free>
      inseg.p = NULL;
 800e4ea:	4b26      	ldr	r3, [pc, #152]	; (800e584 <tcp_input+0x7f4>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e4f0:	e034      	b.n	800e55c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e4f2:	4b25      	ldr	r3, [pc, #148]	; (800e588 <tcp_input+0x7f8>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	899b      	ldrh	r3, [r3, #12]
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fb ffa8 	bl	800a450 <lwip_htons>
 800e500:	4603      	mov	r3, r0
 800e502:	b2db      	uxtb	r3, r3
 800e504:	f003 0304 	and.w	r3, r3, #4
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d118      	bne.n	800e53e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e50c:	4b1f      	ldr	r3, [pc, #124]	; (800e58c <tcp_input+0x7fc>)
 800e50e:	6819      	ldr	r1, [r3, #0]
 800e510:	4b1f      	ldr	r3, [pc, #124]	; (800e590 <tcp_input+0x800>)
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	461a      	mov	r2, r3
 800e516:	4b1f      	ldr	r3, [pc, #124]	; (800e594 <tcp_input+0x804>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e51c:	4b1a      	ldr	r3, [pc, #104]	; (800e588 <tcp_input+0x7f8>)
 800e51e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e520:	885b      	ldrh	r3, [r3, #2]
 800e522:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e524:	4a18      	ldr	r2, [pc, #96]	; (800e588 <tcp_input+0x7f8>)
 800e526:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e528:	8812      	ldrh	r2, [r2, #0]
 800e52a:	b292      	uxth	r2, r2
 800e52c:	9202      	str	r2, [sp, #8]
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	4b19      	ldr	r3, [pc, #100]	; (800e598 <tcp_input+0x808>)
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	4b19      	ldr	r3, [pc, #100]	; (800e59c <tcp_input+0x80c>)
 800e536:	4602      	mov	r2, r0
 800e538:	2000      	movs	r0, #0
 800e53a:	f003 fc8d 	bl	8011e58 <tcp_rst>
    pbuf_free(p);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7fd fb2e 	bl	800bba0 <pbuf_free>
  return;
 800e544:	e00a      	b.n	800e55c <tcp_input+0x7cc>
    goto dropped;
 800e546:	bf00      	nop
 800e548:	e004      	b.n	800e554 <tcp_input+0x7c4>
dropped:
 800e54a:	bf00      	nop
 800e54c:	e002      	b.n	800e554 <tcp_input+0x7c4>
      goto dropped;
 800e54e:	bf00      	nop
 800e550:	e000      	b.n	800e554 <tcp_input+0x7c4>
      goto dropped;
 800e552:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7fd fb23 	bl	800bba0 <pbuf_free>
 800e55a:	e000      	b.n	800e55e <tcp_input+0x7ce>
  return;
 800e55c:	bf00      	nop
}
 800e55e:	3724      	adds	r7, #36	; 0x24
 800e560:	46bd      	mov	sp, r7
 800e562:	bd90      	pop	{r4, r7, pc}
 800e564:	2000b668 	.word	0x2000b668
 800e568:	20004b11 	.word	0x20004b11
 800e56c:	2000b654 	.word	0x2000b654
 800e570:	20004b0c 	.word	0x20004b0c
 800e574:	20004b14 	.word	0x20004b14
 800e578:	08018168 	.word	0x08018168
 800e57c:	0801831c 	.word	0x0801831c
 800e580:	080181b4 	.word	0x080181b4
 800e584:	20004ae4 	.word	0x20004ae4
 800e588:	20004af4 	.word	0x20004af4
 800e58c:	20004b08 	.word	0x20004b08
 800e590:	20004b0e 	.word	0x20004b0e
 800e594:	20004b04 	.word	0x20004b04
 800e598:	20007f50 	.word	0x20007f50
 800e59c:	20007f54 	.word	0x20007f54

0800e5a0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <tcp_input_delayed_close+0x1c>
 800e5ae:	4b17      	ldr	r3, [pc, #92]	; (800e60c <tcp_input_delayed_close+0x6c>)
 800e5b0:	f240 225a 	movw	r2, #602	; 0x25a
 800e5b4:	4916      	ldr	r1, [pc, #88]	; (800e610 <tcp_input_delayed_close+0x70>)
 800e5b6:	4817      	ldr	r0, [pc, #92]	; (800e614 <tcp_input_delayed_close+0x74>)
 800e5b8:	f007 f862 	bl	8015680 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e5bc:	4b16      	ldr	r3, [pc, #88]	; (800e618 <tcp_input_delayed_close+0x78>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	f003 0310 	and.w	r3, r3, #16
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d01c      	beq.n	800e602 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	8b5b      	ldrh	r3, [r3, #26]
 800e5cc:	f003 0310 	and.w	r3, r3, #16
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10d      	bne.n	800e5f0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d008      	beq.n	800e5f0 <tcp_input_delayed_close+0x50>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	6912      	ldr	r2, [r2, #16]
 800e5e8:	f06f 010e 	mvn.w	r1, #14
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5f0:	6879      	ldr	r1, [r7, #4]
 800e5f2:	480a      	ldr	r0, [pc, #40]	; (800e61c <tcp_input_delayed_close+0x7c>)
 800e5f4:	f7ff fa54 	bl	800daa0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7fd fd7d 	bl	800c0f8 <tcp_free>
    return 1;
 800e5fe:	2301      	movs	r3, #1
 800e600:	e000      	b.n	800e604 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	08018168 	.word	0x08018168
 800e610:	08018338 	.word	0x08018338
 800e614:	080181b4 	.word	0x080181b4
 800e618:	20004b11 	.word	0x20004b11
 800e61c:	2000b654 	.word	0x2000b654

0800e620 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e620:	b590      	push	{r4, r7, lr}
 800e622:	b08b      	sub	sp, #44	; 0x2c
 800e624:	af04      	add	r7, sp, #16
 800e626:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e628:	4b6f      	ldr	r3, [pc, #444]	; (800e7e8 <tcp_listen_input+0x1c8>)
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b00      	cmp	r3, #0
 800e632:	f040 80d3 	bne.w	800e7dc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d106      	bne.n	800e64a <tcp_listen_input+0x2a>
 800e63c:	4b6b      	ldr	r3, [pc, #428]	; (800e7ec <tcp_listen_input+0x1cc>)
 800e63e:	f240 2281 	movw	r2, #641	; 0x281
 800e642:	496b      	ldr	r1, [pc, #428]	; (800e7f0 <tcp_listen_input+0x1d0>)
 800e644:	486b      	ldr	r0, [pc, #428]	; (800e7f4 <tcp_listen_input+0x1d4>)
 800e646:	f007 f81b 	bl	8015680 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e64a:	4b67      	ldr	r3, [pc, #412]	; (800e7e8 <tcp_listen_input+0x1c8>)
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	f003 0310 	and.w	r3, r3, #16
 800e652:	2b00      	cmp	r3, #0
 800e654:	d019      	beq.n	800e68a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e656:	4b68      	ldr	r3, [pc, #416]	; (800e7f8 <tcp_listen_input+0x1d8>)
 800e658:	6819      	ldr	r1, [r3, #0]
 800e65a:	4b68      	ldr	r3, [pc, #416]	; (800e7fc <tcp_listen_input+0x1dc>)
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	461a      	mov	r2, r3
 800e660:	4b67      	ldr	r3, [pc, #412]	; (800e800 <tcp_listen_input+0x1e0>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e666:	4b67      	ldr	r3, [pc, #412]	; (800e804 <tcp_listen_input+0x1e4>)
 800e668:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e66a:	885b      	ldrh	r3, [r3, #2]
 800e66c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e66e:	4a65      	ldr	r2, [pc, #404]	; (800e804 <tcp_listen_input+0x1e4>)
 800e670:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e672:	8812      	ldrh	r2, [r2, #0]
 800e674:	b292      	uxth	r2, r2
 800e676:	9202      	str	r2, [sp, #8]
 800e678:	9301      	str	r3, [sp, #4]
 800e67a:	4b63      	ldr	r3, [pc, #396]	; (800e808 <tcp_listen_input+0x1e8>)
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	4b63      	ldr	r3, [pc, #396]	; (800e80c <tcp_listen_input+0x1ec>)
 800e680:	4602      	mov	r2, r0
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f003 fbe8 	bl	8011e58 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e688:	e0aa      	b.n	800e7e0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800e68a:	4b57      	ldr	r3, [pc, #348]	; (800e7e8 <tcp_listen_input+0x1c8>)
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	f003 0302 	and.w	r3, r3, #2
 800e692:	2b00      	cmp	r3, #0
 800e694:	f000 80a4 	beq.w	800e7e0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	7d5b      	ldrb	r3, [r3, #21]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff f85d 	bl	800d75c <tcp_alloc>
 800e6a2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d111      	bne.n	800e6ce <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	699b      	ldr	r3, [r3, #24]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00a      	beq.n	800e6c8 <tcp_listen_input+0xa8>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	6910      	ldr	r0, [r2, #16]
 800e6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e6be:	2100      	movs	r1, #0
 800e6c0:	4798      	blx	r3
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	73bb      	strb	r3, [r7, #14]
      return;
 800e6c6:	e08c      	b.n	800e7e2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6c8:	23f0      	movs	r3, #240	; 0xf0
 800e6ca:	73bb      	strb	r3, [r7, #14]
      return;
 800e6cc:	e089      	b.n	800e7e2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6ce:	4b50      	ldr	r3, [pc, #320]	; (800e810 <tcp_listen_input+0x1f0>)
 800e6d0:	695a      	ldr	r2, [r3, #20]
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6d6:	4b4e      	ldr	r3, [pc, #312]	; (800e810 <tcp_listen_input+0x1f0>)
 800e6d8:	691a      	ldr	r2, [r3, #16]
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	8ada      	ldrh	r2, [r3, #22]
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e6e6:	4b47      	ldr	r3, [pc, #284]	; (800e804 <tcp_listen_input+0x1e4>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2203      	movs	r2, #3
 800e6f6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e6f8:	4b41      	ldr	r3, [pc, #260]	; (800e800 <tcp_listen_input+0x1e0>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e70a:	6978      	ldr	r0, [r7, #20]
 800e70c:	f7ff fa5c 	bl	800dbc8 <tcp_next_iss>
 800e710:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	693a      	ldr	r2, [r7, #16]
 800e71c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e72a:	4b35      	ldr	r3, [pc, #212]	; (800e800 <tcp_listen_input+0x1e0>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	1e5a      	subs	r2, r3, #1
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	691a      	ldr	r2, [r3, #16]
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7a5b      	ldrb	r3, [r3, #9]
 800e746:	f003 030c 	and.w	r3, r3, #12
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	7a1a      	ldrb	r2, [r3, #8]
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e758:	4b2e      	ldr	r3, [pc, #184]	; (800e814 <tcp_listen_input+0x1f4>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	60da      	str	r2, [r3, #12]
 800e760:	4a2c      	ldr	r2, [pc, #176]	; (800e814 <tcp_listen_input+0x1f4>)
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	6013      	str	r3, [r2, #0]
 800e766:	f003 fd39 	bl	80121dc <tcp_timer_needed>
 800e76a:	4b2b      	ldr	r3, [pc, #172]	; (800e818 <tcp_listen_input+0x1f8>)
 800e76c:	2201      	movs	r2, #1
 800e76e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e770:	6978      	ldr	r0, [r7, #20]
 800e772:	f001 fd8f 	bl	8010294 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e776:	4b23      	ldr	r3, [pc, #140]	; (800e804 <tcp_listen_input+0x1e4>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	89db      	ldrh	r3, [r3, #14]
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	3304      	adds	r3, #4
 800e798:	4618      	mov	r0, r3
 800e79a:	f005 fa71 	bl	8013c80 <ip4_route>
 800e79e:	4601      	mov	r1, r0
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f7ff fa34 	bl	800dc14 <tcp_eff_send_mss_netif>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e7b4:	2112      	movs	r1, #18
 800e7b6:	6978      	ldr	r0, [r7, #20]
 800e7b8:	f002 fc9c 	bl	80110f4 <tcp_enqueue_flags>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d004      	beq.n	800e7d2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	6978      	ldr	r0, [r7, #20]
 800e7cc:	f7fd ff10 	bl	800c5f0 <tcp_abandon>
      return;
 800e7d0:	e007      	b.n	800e7e2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800e7d2:	6978      	ldr	r0, [r7, #20]
 800e7d4:	f002 fd7c 	bl	80112d0 <tcp_output>
  return;
 800e7d8:	bf00      	nop
 800e7da:	e001      	b.n	800e7e0 <tcp_listen_input+0x1c0>
    return;
 800e7dc:	bf00      	nop
 800e7de:	e000      	b.n	800e7e2 <tcp_listen_input+0x1c2>
  return;
 800e7e0:	bf00      	nop
}
 800e7e2:	371c      	adds	r7, #28
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd90      	pop	{r4, r7, pc}
 800e7e8:	20004b10 	.word	0x20004b10
 800e7ec:	08018168 	.word	0x08018168
 800e7f0:	08018360 	.word	0x08018360
 800e7f4:	080181b4 	.word	0x080181b4
 800e7f8:	20004b08 	.word	0x20004b08
 800e7fc:	20004b0e 	.word	0x20004b0e
 800e800:	20004b04 	.word	0x20004b04
 800e804:	20004af4 	.word	0x20004af4
 800e808:	20007f50 	.word	0x20007f50
 800e80c:	20007f54 	.word	0x20007f54
 800e810:	20007f40 	.word	0x20007f40
 800e814:	2000b654 	.word	0x2000b654
 800e818:	2000b650 	.word	0x2000b650

0800e81c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af04      	add	r7, sp, #16
 800e822:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e824:	4b30      	ldr	r3, [pc, #192]	; (800e8e8 <tcp_timewait_input+0xcc>)
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	f003 0304 	and.w	r3, r3, #4
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d154      	bne.n	800e8da <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d106      	bne.n	800e844 <tcp_timewait_input+0x28>
 800e836:	4b2d      	ldr	r3, [pc, #180]	; (800e8ec <tcp_timewait_input+0xd0>)
 800e838:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e83c:	492c      	ldr	r1, [pc, #176]	; (800e8f0 <tcp_timewait_input+0xd4>)
 800e83e:	482d      	ldr	r0, [pc, #180]	; (800e8f4 <tcp_timewait_input+0xd8>)
 800e840:	f006 ff1e 	bl	8015680 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e844:	4b28      	ldr	r3, [pc, #160]	; (800e8e8 <tcp_timewait_input+0xcc>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	f003 0302 	and.w	r3, r3, #2
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d02a      	beq.n	800e8a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e850:	4b29      	ldr	r3, [pc, #164]	; (800e8f8 <tcp_timewait_input+0xdc>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e858:	1ad3      	subs	r3, r2, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	db2d      	blt.n	800e8ba <tcp_timewait_input+0x9e>
 800e85e:	4b26      	ldr	r3, [pc, #152]	; (800e8f8 <tcp_timewait_input+0xdc>)
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e86a:	440b      	add	r3, r1
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	2b00      	cmp	r3, #0
 800e870:	dc23      	bgt.n	800e8ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e872:	4b22      	ldr	r3, [pc, #136]	; (800e8fc <tcp_timewait_input+0xe0>)
 800e874:	6819      	ldr	r1, [r3, #0]
 800e876:	4b22      	ldr	r3, [pc, #136]	; (800e900 <tcp_timewait_input+0xe4>)
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	4b1e      	ldr	r3, [pc, #120]	; (800e8f8 <tcp_timewait_input+0xdc>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e882:	4b20      	ldr	r3, [pc, #128]	; (800e904 <tcp_timewait_input+0xe8>)
 800e884:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e886:	885b      	ldrh	r3, [r3, #2]
 800e888:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e88a:	4a1e      	ldr	r2, [pc, #120]	; (800e904 <tcp_timewait_input+0xe8>)
 800e88c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e88e:	8812      	ldrh	r2, [r2, #0]
 800e890:	b292      	uxth	r2, r2
 800e892:	9202      	str	r2, [sp, #8]
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	4b1c      	ldr	r3, [pc, #112]	; (800e908 <tcp_timewait_input+0xec>)
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	4b1c      	ldr	r3, [pc, #112]	; (800e90c <tcp_timewait_input+0xf0>)
 800e89c:	4602      	mov	r2, r0
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f003 fada 	bl	8011e58 <tcp_rst>
      return;
 800e8a4:	e01c      	b.n	800e8e0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800e8a6:	4b10      	ldr	r3, [pc, #64]	; (800e8e8 <tcp_timewait_input+0xcc>)
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	f003 0301 	and.w	r3, r3, #1
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e8b2:	4b17      	ldr	r3, [pc, #92]	; (800e910 <tcp_timewait_input+0xf4>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e8ba:	4b11      	ldr	r3, [pc, #68]	; (800e900 <tcp_timewait_input+0xe4>)
 800e8bc:	881b      	ldrh	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d00d      	beq.n	800e8de <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	8b5b      	ldrh	r3, [r3, #26]
 800e8c6:	f043 0302 	orr.w	r3, r3, #2
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f002 fcfd 	bl	80112d0 <tcp_output>
  }
  return;
 800e8d6:	bf00      	nop
 800e8d8:	e001      	b.n	800e8de <tcp_timewait_input+0xc2>
    return;
 800e8da:	bf00      	nop
 800e8dc:	e000      	b.n	800e8e0 <tcp_timewait_input+0xc4>
  return;
 800e8de:	bf00      	nop
}
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20004b10 	.word	0x20004b10
 800e8ec:	08018168 	.word	0x08018168
 800e8f0:	08018380 	.word	0x08018380
 800e8f4:	080181b4 	.word	0x080181b4
 800e8f8:	20004b04 	.word	0x20004b04
 800e8fc:	20004b08 	.word	0x20004b08
 800e900:	20004b0e 	.word	0x20004b0e
 800e904:	20004af4 	.word	0x20004af4
 800e908:	20007f50 	.word	0x20007f50
 800e90c:	20007f54 	.word	0x20007f54
 800e910:	2000b658 	.word	0x2000b658

0800e914 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e914:	b590      	push	{r4, r7, lr}
 800e916:	b08d      	sub	sp, #52	; 0x34
 800e918:	af04      	add	r7, sp, #16
 800e91a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e920:	2300      	movs	r3, #0
 800e922:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <tcp_process+0x24>
 800e92a:	4ba5      	ldr	r3, [pc, #660]	; (800ebc0 <tcp_process+0x2ac>)
 800e92c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e930:	49a4      	ldr	r1, [pc, #656]	; (800ebc4 <tcp_process+0x2b0>)
 800e932:	48a5      	ldr	r0, [pc, #660]	; (800ebc8 <tcp_process+0x2b4>)
 800e934:	f006 fea4 	bl	8015680 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e938:	4ba4      	ldr	r3, [pc, #656]	; (800ebcc <tcp_process+0x2b8>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	f003 0304 	and.w	r3, r3, #4
 800e940:	2b00      	cmp	r3, #0
 800e942:	d04e      	beq.n	800e9e2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	7d1b      	ldrb	r3, [r3, #20]
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d108      	bne.n	800e95e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e950:	4b9f      	ldr	r3, [pc, #636]	; (800ebd0 <tcp_process+0x2bc>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d123      	bne.n	800e9a0 <tcp_process+0x8c>
        acceptable = 1;
 800e958:	2301      	movs	r3, #1
 800e95a:	76fb      	strb	r3, [r7, #27]
 800e95c:	e020      	b.n	800e9a0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e962:	4b9c      	ldr	r3, [pc, #624]	; (800ebd4 <tcp_process+0x2c0>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	429a      	cmp	r2, r3
 800e968:	d102      	bne.n	800e970 <tcp_process+0x5c>
        acceptable = 1;
 800e96a:	2301      	movs	r3, #1
 800e96c:	76fb      	strb	r3, [r7, #27]
 800e96e:	e017      	b.n	800e9a0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e970:	4b98      	ldr	r3, [pc, #608]	; (800ebd4 <tcp_process+0x2c0>)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	db10      	blt.n	800e9a0 <tcp_process+0x8c>
 800e97e:	4b95      	ldr	r3, [pc, #596]	; (800ebd4 <tcp_process+0x2c0>)
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e986:	6879      	ldr	r1, [r7, #4]
 800e988:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e98a:	440b      	add	r3, r1
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	2b00      	cmp	r3, #0
 800e990:	dc06      	bgt.n	800e9a0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	8b5b      	ldrh	r3, [r3, #26]
 800e996:	f043 0302 	orr.w	r3, r3, #2
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e9a0:	7efb      	ldrb	r3, [r7, #27]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d01b      	beq.n	800e9de <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	7d1b      	ldrb	r3, [r3, #20]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d106      	bne.n	800e9bc <tcp_process+0xa8>
 800e9ae:	4b84      	ldr	r3, [pc, #528]	; (800ebc0 <tcp_process+0x2ac>)
 800e9b0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e9b4:	4988      	ldr	r1, [pc, #544]	; (800ebd8 <tcp_process+0x2c4>)
 800e9b6:	4884      	ldr	r0, [pc, #528]	; (800ebc8 <tcp_process+0x2b4>)
 800e9b8:	f006 fe62 	bl	8015680 <iprintf>
      recv_flags |= TF_RESET;
 800e9bc:	4b87      	ldr	r3, [pc, #540]	; (800ebdc <tcp_process+0x2c8>)
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	f043 0308 	orr.w	r3, r3, #8
 800e9c4:	b2da      	uxtb	r2, r3
 800e9c6:	4b85      	ldr	r3, [pc, #532]	; (800ebdc <tcp_process+0x2c8>)
 800e9c8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	8b5b      	ldrh	r3, [r3, #26]
 800e9ce:	f023 0301 	bic.w	r3, r3, #1
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e9d8:	f06f 030d 	mvn.w	r3, #13
 800e9dc:	e37a      	b.n	800f0d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e378      	b.n	800f0d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e9e2:	4b7a      	ldr	r3, [pc, #488]	; (800ebcc <tcp_process+0x2b8>)
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	f003 0302 	and.w	r3, r3, #2
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d010      	beq.n	800ea10 <tcp_process+0xfc>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	7d1b      	ldrb	r3, [r3, #20]
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	d00c      	beq.n	800ea10 <tcp_process+0xfc>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	7d1b      	ldrb	r3, [r3, #20]
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d008      	beq.n	800ea10 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	8b5b      	ldrh	r3, [r3, #26]
 800ea02:	f043 0302 	orr.w	r3, r3, #2
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	e361      	b.n	800f0d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	8b5b      	ldrh	r3, [r3, #26]
 800ea14:	f003 0310 	and.w	r3, r3, #16
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d103      	bne.n	800ea24 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ea1c:	4b70      	ldr	r3, [pc, #448]	; (800ebe0 <tcp_process+0x2cc>)
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f001 fc2d 	bl	8010294 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	7d1b      	ldrb	r3, [r3, #20]
 800ea3e:	3b02      	subs	r3, #2
 800ea40:	2b07      	cmp	r3, #7
 800ea42:	f200 8337 	bhi.w	800f0b4 <tcp_process+0x7a0>
 800ea46:	a201      	add	r2, pc, #4	; (adr r2, 800ea4c <tcp_process+0x138>)
 800ea48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4c:	0800ea6d 	.word	0x0800ea6d
 800ea50:	0800ec9d 	.word	0x0800ec9d
 800ea54:	0800ee15 	.word	0x0800ee15
 800ea58:	0800ee3f 	.word	0x0800ee3f
 800ea5c:	0800ef63 	.word	0x0800ef63
 800ea60:	0800ee15 	.word	0x0800ee15
 800ea64:	0800efef 	.word	0x0800efef
 800ea68:	0800f07f 	.word	0x0800f07f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ea6c:	4b57      	ldr	r3, [pc, #348]	; (800ebcc <tcp_process+0x2b8>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	f003 0310 	and.w	r3, r3, #16
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 80e4 	beq.w	800ec42 <tcp_process+0x32e>
 800ea7a:	4b54      	ldr	r3, [pc, #336]	; (800ebcc <tcp_process+0x2b8>)
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	f003 0302 	and.w	r3, r3, #2
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	f000 80dd 	beq.w	800ec42 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	4b50      	ldr	r3, [pc, #320]	; (800ebd0 <tcp_process+0x2bc>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	f040 80d5 	bne.w	800ec42 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ea98:	4b4e      	ldr	r3, [pc, #312]	; (800ebd4 <tcp_process+0x2c0>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	1c5a      	adds	r2, r3, #1
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800eaaa:	4b49      	ldr	r3, [pc, #292]	; (800ebd0 <tcp_process+0x2bc>)
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eab2:	4b4c      	ldr	r3, [pc, #304]	; (800ebe4 <tcp_process+0x2d0>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	89db      	ldrh	r3, [r3, #14]
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eacc:	4b41      	ldr	r3, [pc, #260]	; (800ebd4 <tcp_process+0x2c0>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	1e5a      	subs	r2, r3, #1
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2204      	movs	r2, #4
 800eada:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4618      	mov	r0, r3
 800eae6:	f005 f8cb 	bl	8013c80 <ip4_route>
 800eaea:	4601      	mov	r1, r0
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f7ff f88e 	bl	800dc14 <tcp_eff_send_mss_netif>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	461a      	mov	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb04:	009a      	lsls	r2, r3, #2
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb0a:	005b      	lsls	r3, r3, #1
 800eb0c:	f241 111c 	movw	r1, #4380	; 0x111c
 800eb10:	428b      	cmp	r3, r1
 800eb12:	bf38      	it	cc
 800eb14:	460b      	movcc	r3, r1
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d204      	bcs.n	800eb24 <tcp_process+0x210>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	e00d      	b.n	800eb40 <tcp_process+0x22c>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb28:	005b      	lsls	r3, r3, #1
 800eb2a:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d904      	bls.n	800eb3c <tcp_process+0x228>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb36:	005b      	lsls	r3, r3, #1
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	e001      	b.n	800eb40 <tcp_process+0x22c>
 800eb3c:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d106      	bne.n	800eb5e <tcp_process+0x24a>
 800eb50:	4b1b      	ldr	r3, [pc, #108]	; (800ebc0 <tcp_process+0x2ac>)
 800eb52:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eb56:	4924      	ldr	r1, [pc, #144]	; (800ebe8 <tcp_process+0x2d4>)
 800eb58:	481b      	ldr	r0, [pc, #108]	; (800ebc8 <tcp_process+0x2b4>)
 800eb5a:	f006 fd91 	bl	8015680 <iprintf>
        --pcb->snd_queuelen;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb64:	3b01      	subs	r3, #1
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb72:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d111      	bne.n	800eb9e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb7e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d106      	bne.n	800eb94 <tcp_process+0x280>
 800eb86:	4b0e      	ldr	r3, [pc, #56]	; (800ebc0 <tcp_process+0x2ac>)
 800eb88:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eb8c:	4917      	ldr	r1, [pc, #92]	; (800ebec <tcp_process+0x2d8>)
 800eb8e:	480e      	ldr	r0, [pc, #56]	; (800ebc8 <tcp_process+0x2b4>)
 800eb90:	f006 fd76 	bl	8015680 <iprintf>
          pcb->unsent = rseg->next;
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb9c:	e003      	b.n	800eba6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eba6:	69f8      	ldr	r0, [r7, #28]
 800eba8:	f7fe fc70 	bl	800d48c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d11d      	bne.n	800ebf0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebba:	861a      	strh	r2, [r3, #48]	; 0x30
 800ebbc:	e01f      	b.n	800ebfe <tcp_process+0x2ea>
 800ebbe:	bf00      	nop
 800ebc0:	08018168 	.word	0x08018168
 800ebc4:	080183a0 	.word	0x080183a0
 800ebc8:	080181b4 	.word	0x080181b4
 800ebcc:	20004b10 	.word	0x20004b10
 800ebd0:	20004b08 	.word	0x20004b08
 800ebd4:	20004b04 	.word	0x20004b04
 800ebd8:	080183bc 	.word	0x080183bc
 800ebdc:	20004b11 	.word	0x20004b11
 800ebe0:	2000b658 	.word	0x2000b658
 800ebe4:	20004af4 	.word	0x20004af4
 800ebe8:	080183dc 	.word	0x080183dc
 800ebec:	080183f4 	.word	0x080183f4
        } else {
          pcb->rtime = 0;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00a      	beq.n	800ec1e <tcp_process+0x30a>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	6910      	ldr	r0, [r2, #16]
 800ec12:	2200      	movs	r2, #0
 800ec14:	6879      	ldr	r1, [r7, #4]
 800ec16:	4798      	blx	r3
 800ec18:	4603      	mov	r3, r0
 800ec1a:	76bb      	strb	r3, [r7, #26]
 800ec1c:	e001      	b.n	800ec22 <tcp_process+0x30e>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ec22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec26:	f113 0f0d 	cmn.w	r3, #13
 800ec2a:	d102      	bne.n	800ec32 <tcp_process+0x31e>
          return ERR_ABRT;
 800ec2c:	f06f 030c 	mvn.w	r3, #12
 800ec30:	e250      	b.n	800f0d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	8b5b      	ldrh	r3, [r3, #26]
 800ec36:	f043 0302 	orr.w	r3, r3, #2
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ec40:	e23a      	b.n	800f0b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ec42:	4b9d      	ldr	r3, [pc, #628]	; (800eeb8 <tcp_process+0x5a4>)
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	f003 0310 	and.w	r3, r3, #16
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 8234 	beq.w	800f0b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec50:	4b9a      	ldr	r3, [pc, #616]	; (800eebc <tcp_process+0x5a8>)
 800ec52:	6819      	ldr	r1, [r3, #0]
 800ec54:	4b9a      	ldr	r3, [pc, #616]	; (800eec0 <tcp_process+0x5ac>)
 800ec56:	881b      	ldrh	r3, [r3, #0]
 800ec58:	461a      	mov	r2, r3
 800ec5a:	4b9a      	ldr	r3, [pc, #616]	; (800eec4 <tcp_process+0x5b0>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec60:	4b99      	ldr	r3, [pc, #612]	; (800eec8 <tcp_process+0x5b4>)
 800ec62:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec64:	885b      	ldrh	r3, [r3, #2]
 800ec66:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec68:	4a97      	ldr	r2, [pc, #604]	; (800eec8 <tcp_process+0x5b4>)
 800ec6a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec6c:	8812      	ldrh	r2, [r2, #0]
 800ec6e:	b292      	uxth	r2, r2
 800ec70:	9202      	str	r2, [sp, #8]
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	4b95      	ldr	r3, [pc, #596]	; (800eecc <tcp_process+0x5b8>)
 800ec76:	9300      	str	r3, [sp, #0]
 800ec78:	4b95      	ldr	r3, [pc, #596]	; (800eed0 <tcp_process+0x5bc>)
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f003 f8eb 	bl	8011e58 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec88:	2b05      	cmp	r3, #5
 800ec8a:	f200 8215 	bhi.w	800f0b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f002 feab 	bl	80119f0 <tcp_rexmit_rto>
      break;
 800ec9a:	e20d      	b.n	800f0b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ec9c:	4b86      	ldr	r3, [pc, #536]	; (800eeb8 <tcp_process+0x5a4>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f003 0310 	and.w	r3, r3, #16
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f000 80a1 	beq.w	800edec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ecaa:	4b84      	ldr	r3, [pc, #528]	; (800eebc <tcp_process+0x5a8>)
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	db7e      	blt.n	800edb8 <tcp_process+0x4a4>
 800ecba:	4b80      	ldr	r3, [pc, #512]	; (800eebc <tcp_process+0x5a8>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	dc77      	bgt.n	800edb8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2204      	movs	r2, #4
 800eccc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d102      	bne.n	800ecdc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ecd6:	23fa      	movs	r3, #250	; 0xfa
 800ecd8:	76bb      	strb	r3, [r7, #26]
 800ecda:	e01d      	b.n	800ed18 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ece0:	699b      	ldr	r3, [r3, #24]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d106      	bne.n	800ecf4 <tcp_process+0x3e0>
 800ece6:	4b7b      	ldr	r3, [pc, #492]	; (800eed4 <tcp_process+0x5c0>)
 800ece8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ecec:	497a      	ldr	r1, [pc, #488]	; (800eed8 <tcp_process+0x5c4>)
 800ecee:	487b      	ldr	r0, [pc, #492]	; (800eedc <tcp_process+0x5c8>)
 800ecf0:	f006 fcc6 	bl	8015680 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00a      	beq.n	800ed14 <tcp_process+0x400>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed02:	699b      	ldr	r3, [r3, #24]
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	6910      	ldr	r0, [r2, #16]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	4798      	blx	r3
 800ed0e:	4603      	mov	r3, r0
 800ed10:	76bb      	strb	r3, [r7, #26]
 800ed12:	e001      	b.n	800ed18 <tcp_process+0x404>
 800ed14:	23f0      	movs	r3, #240	; 0xf0
 800ed16:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ed18:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00a      	beq.n	800ed36 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ed20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed24:	f113 0f0d 	cmn.w	r3, #13
 800ed28:	d002      	beq.n	800ed30 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7fd fd1e 	bl	800c76c <tcp_abort>
            }
            return ERR_ABRT;
 800ed30:	f06f 030c 	mvn.w	r3, #12
 800ed34:	e1ce      	b.n	800f0d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fae0 	bl	800f2fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ed3c:	4b68      	ldr	r3, [pc, #416]	; (800eee0 <tcp_process+0x5cc>)
 800ed3e:	881b      	ldrh	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d005      	beq.n	800ed50 <tcp_process+0x43c>
            recv_acked--;
 800ed44:	4b66      	ldr	r3, [pc, #408]	; (800eee0 <tcp_process+0x5cc>)
 800ed46:	881b      	ldrh	r3, [r3, #0]
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	4b64      	ldr	r3, [pc, #400]	; (800eee0 <tcp_process+0x5cc>)
 800ed4e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed54:	009a      	lsls	r2, r3, #2
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ed60:	428b      	cmp	r3, r1
 800ed62:	bf38      	it	cc
 800ed64:	460b      	movcc	r3, r1
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d204      	bcs.n	800ed74 <tcp_process+0x460>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	e00d      	b.n	800ed90 <tcp_process+0x47c>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d904      	bls.n	800ed8c <tcp_process+0x478>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	e001      	b.n	800ed90 <tcp_process+0x47c>
 800ed8c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ed96:	4b53      	ldr	r3, [pc, #332]	; (800eee4 <tcp_process+0x5d0>)
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	f003 0320 	and.w	r3, r3, #32
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d037      	beq.n	800ee12 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	8b5b      	ldrh	r3, [r3, #26]
 800eda6:	f043 0302 	orr.w	r3, r3, #2
 800edaa:	b29a      	uxth	r2, r3
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2207      	movs	r2, #7
 800edb4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800edb6:	e02c      	b.n	800ee12 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edb8:	4b40      	ldr	r3, [pc, #256]	; (800eebc <tcp_process+0x5a8>)
 800edba:	6819      	ldr	r1, [r3, #0]
 800edbc:	4b40      	ldr	r3, [pc, #256]	; (800eec0 <tcp_process+0x5ac>)
 800edbe:	881b      	ldrh	r3, [r3, #0]
 800edc0:	461a      	mov	r2, r3
 800edc2:	4b40      	ldr	r3, [pc, #256]	; (800eec4 <tcp_process+0x5b0>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edc8:	4b3f      	ldr	r3, [pc, #252]	; (800eec8 <tcp_process+0x5b4>)
 800edca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edcc:	885b      	ldrh	r3, [r3, #2]
 800edce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edd0:	4a3d      	ldr	r2, [pc, #244]	; (800eec8 <tcp_process+0x5b4>)
 800edd2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edd4:	8812      	ldrh	r2, [r2, #0]
 800edd6:	b292      	uxth	r2, r2
 800edd8:	9202      	str	r2, [sp, #8]
 800edda:	9301      	str	r3, [sp, #4]
 800eddc:	4b3b      	ldr	r3, [pc, #236]	; (800eecc <tcp_process+0x5b8>)
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	4b3b      	ldr	r3, [pc, #236]	; (800eed0 <tcp_process+0x5bc>)
 800ede2:	4602      	mov	r2, r0
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f003 f837 	bl	8011e58 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800edea:	e167      	b.n	800f0bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800edec:	4b32      	ldr	r3, [pc, #200]	; (800eeb8 <tcp_process+0x5a4>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 8161 	beq.w	800f0bc <tcp_process+0x7a8>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfe:	1e5a      	subs	r2, r3, #1
 800ee00:	4b30      	ldr	r3, [pc, #192]	; (800eec4 <tcp_process+0x5b0>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	f040 8159 	bne.w	800f0bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f002 fe12 	bl	8011a34 <tcp_rexmit>
      break;
 800ee10:	e154      	b.n	800f0bc <tcp_process+0x7a8>
 800ee12:	e153      	b.n	800f0bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fa71 	bl	800f2fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee1a:	4b32      	ldr	r3, [pc, #200]	; (800eee4 <tcp_process+0x5d0>)
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	f003 0320 	and.w	r3, r3, #32
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 814c 	beq.w	800f0c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8b5b      	ldrh	r3, [r3, #26]
 800ee2c:	f043 0302 	orr.w	r3, r3, #2
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2207      	movs	r2, #7
 800ee3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee3c:	e140      	b.n	800f0c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fa5c 	bl	800f2fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee44:	4b27      	ldr	r3, [pc, #156]	; (800eee4 <tcp_process+0x5d0>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	f003 0320 	and.w	r3, r3, #32
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d071      	beq.n	800ef34 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee50:	4b19      	ldr	r3, [pc, #100]	; (800eeb8 <tcp_process+0x5a4>)
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 0310 	and.w	r3, r3, #16
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d060      	beq.n	800ef1e <tcp_process+0x60a>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee60:	4b16      	ldr	r3, [pc, #88]	; (800eebc <tcp_process+0x5a8>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d15a      	bne.n	800ef1e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d156      	bne.n	800ef1e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	8b5b      	ldrh	r3, [r3, #26]
 800ee74:	f043 0302 	orr.w	r3, r3, #2
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7fe fdbe 	bl	800da00 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ee84:	4b18      	ldr	r3, [pc, #96]	; (800eee8 <tcp_process+0x5d4>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d105      	bne.n	800ee9a <tcp_process+0x586>
 800ee8e:	4b16      	ldr	r3, [pc, #88]	; (800eee8 <tcp_process+0x5d4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	4a14      	ldr	r2, [pc, #80]	; (800eee8 <tcp_process+0x5d4>)
 800ee96:	6013      	str	r3, [r2, #0]
 800ee98:	e02e      	b.n	800eef8 <tcp_process+0x5e4>
 800ee9a:	4b13      	ldr	r3, [pc, #76]	; (800eee8 <tcp_process+0x5d4>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	617b      	str	r3, [r7, #20]
 800eea0:	e027      	b.n	800eef2 <tcp_process+0x5de>
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d11f      	bne.n	800eeec <tcp_process+0x5d8>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	68da      	ldr	r2, [r3, #12]
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	60da      	str	r2, [r3, #12]
 800eeb4:	e020      	b.n	800eef8 <tcp_process+0x5e4>
 800eeb6:	bf00      	nop
 800eeb8:	20004b10 	.word	0x20004b10
 800eebc:	20004b08 	.word	0x20004b08
 800eec0:	20004b0e 	.word	0x20004b0e
 800eec4:	20004b04 	.word	0x20004b04
 800eec8:	20004af4 	.word	0x20004af4
 800eecc:	20007f50 	.word	0x20007f50
 800eed0:	20007f54 	.word	0x20007f54
 800eed4:	08018168 	.word	0x08018168
 800eed8:	08018408 	.word	0x08018408
 800eedc:	080181b4 	.word	0x080181b4
 800eee0:	20004b0c 	.word	0x20004b0c
 800eee4:	20004b11 	.word	0x20004b11
 800eee8:	2000b654 	.word	0x2000b654
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	617b      	str	r3, [r7, #20]
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1d4      	bne.n	800eea2 <tcp_process+0x58e>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	60da      	str	r2, [r3, #12]
 800eefe:	4b77      	ldr	r3, [pc, #476]	; (800f0dc <tcp_process+0x7c8>)
 800ef00:	2201      	movs	r2, #1
 800ef02:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	220a      	movs	r2, #10
 800ef08:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ef0a:	4b75      	ldr	r3, [pc, #468]	; (800f0e0 <tcp_process+0x7cc>)
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	60da      	str	r2, [r3, #12]
 800ef12:	4a73      	ldr	r2, [pc, #460]	; (800f0e0 <tcp_process+0x7cc>)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	f003 f960 	bl	80121dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ef1c:	e0d2      	b.n	800f0c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	8b5b      	ldrh	r3, [r3, #26]
 800ef22:	f043 0302 	orr.w	r3, r3, #2
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2208      	movs	r2, #8
 800ef30:	751a      	strb	r2, [r3, #20]
      break;
 800ef32:	e0c7      	b.n	800f0c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef34:	4b6b      	ldr	r3, [pc, #428]	; (800f0e4 <tcp_process+0x7d0>)
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	f003 0310 	and.w	r3, r3, #16
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f000 80c1 	beq.w	800f0c4 <tcp_process+0x7b0>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef46:	4b68      	ldr	r3, [pc, #416]	; (800f0e8 <tcp_process+0x7d4>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	f040 80ba 	bne.w	800f0c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	f040 80b5 	bne.w	800f0c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2206      	movs	r2, #6
 800ef5e:	751a      	strb	r2, [r3, #20]
      break;
 800ef60:	e0b0      	b.n	800f0c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f9ca 	bl	800f2fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef68:	4b60      	ldr	r3, [pc, #384]	; (800f0ec <tcp_process+0x7d8>)
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	f003 0320 	and.w	r3, r3, #32
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f000 80a9 	beq.w	800f0c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	8b5b      	ldrh	r3, [r3, #26]
 800ef7a:	f043 0302 	orr.w	r3, r3, #2
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f7fe fd3b 	bl	800da00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef8a:	4b59      	ldr	r3, [pc, #356]	; (800f0f0 <tcp_process+0x7dc>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d105      	bne.n	800efa0 <tcp_process+0x68c>
 800ef94:	4b56      	ldr	r3, [pc, #344]	; (800f0f0 <tcp_process+0x7dc>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	4a55      	ldr	r2, [pc, #340]	; (800f0f0 <tcp_process+0x7dc>)
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	e013      	b.n	800efc8 <tcp_process+0x6b4>
 800efa0:	4b53      	ldr	r3, [pc, #332]	; (800f0f0 <tcp_process+0x7dc>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	613b      	str	r3, [r7, #16]
 800efa6:	e00c      	b.n	800efc2 <tcp_process+0x6ae>
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d104      	bne.n	800efbc <tcp_process+0x6a8>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	68da      	ldr	r2, [r3, #12]
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	60da      	str	r2, [r3, #12]
 800efba:	e005      	b.n	800efc8 <tcp_process+0x6b4>
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	613b      	str	r3, [r7, #16]
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d1ef      	bne.n	800efa8 <tcp_process+0x694>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	60da      	str	r2, [r3, #12]
 800efce:	4b43      	ldr	r3, [pc, #268]	; (800f0dc <tcp_process+0x7c8>)
 800efd0:	2201      	movs	r2, #1
 800efd2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	220a      	movs	r2, #10
 800efd8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efda:	4b41      	ldr	r3, [pc, #260]	; (800f0e0 <tcp_process+0x7cc>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	60da      	str	r2, [r3, #12]
 800efe2:	4a3f      	ldr	r2, [pc, #252]	; (800f0e0 <tcp_process+0x7cc>)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	f003 f8f8 	bl	80121dc <tcp_timer_needed>
      }
      break;
 800efec:	e06c      	b.n	800f0c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 f984 	bl	800f2fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eff4:	4b3b      	ldr	r3, [pc, #236]	; (800f0e4 <tcp_process+0x7d0>)
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	f003 0310 	and.w	r3, r3, #16
 800effc:	2b00      	cmp	r3, #0
 800effe:	d065      	beq.n	800f0cc <tcp_process+0x7b8>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f004:	4b38      	ldr	r3, [pc, #224]	; (800f0e8 <tcp_process+0x7d4>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d15f      	bne.n	800f0cc <tcp_process+0x7b8>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f010:	2b00      	cmp	r3, #0
 800f012:	d15b      	bne.n	800f0cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7fe fcf3 	bl	800da00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f01a:	4b35      	ldr	r3, [pc, #212]	; (800f0f0 <tcp_process+0x7dc>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	d105      	bne.n	800f030 <tcp_process+0x71c>
 800f024:	4b32      	ldr	r3, [pc, #200]	; (800f0f0 <tcp_process+0x7dc>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	4a31      	ldr	r2, [pc, #196]	; (800f0f0 <tcp_process+0x7dc>)
 800f02c:	6013      	str	r3, [r2, #0]
 800f02e:	e013      	b.n	800f058 <tcp_process+0x744>
 800f030:	4b2f      	ldr	r3, [pc, #188]	; (800f0f0 <tcp_process+0x7dc>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	e00c      	b.n	800f052 <tcp_process+0x73e>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d104      	bne.n	800f04c <tcp_process+0x738>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	68da      	ldr	r2, [r3, #12]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	60da      	str	r2, [r3, #12]
 800f04a:	e005      	b.n	800f058 <tcp_process+0x744>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	60fb      	str	r3, [r7, #12]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d1ef      	bne.n	800f038 <tcp_process+0x724>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	60da      	str	r2, [r3, #12]
 800f05e:	4b1f      	ldr	r3, [pc, #124]	; (800f0dc <tcp_process+0x7c8>)
 800f060:	2201      	movs	r2, #1
 800f062:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	220a      	movs	r2, #10
 800f068:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f06a:	4b1d      	ldr	r3, [pc, #116]	; (800f0e0 <tcp_process+0x7cc>)
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	60da      	str	r2, [r3, #12]
 800f072:	4a1b      	ldr	r2, [pc, #108]	; (800f0e0 <tcp_process+0x7cc>)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	f003 f8b0 	bl	80121dc <tcp_timer_needed>
      }
      break;
 800f07c:	e026      	b.n	800f0cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 f93c 	bl	800f2fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f084:	4b17      	ldr	r3, [pc, #92]	; (800f0e4 <tcp_process+0x7d0>)
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	f003 0310 	and.w	r3, r3, #16
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d01f      	beq.n	800f0d0 <tcp_process+0x7bc>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f094:	4b14      	ldr	r3, [pc, #80]	; (800f0e8 <tcp_process+0x7d4>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d119      	bne.n	800f0d0 <tcp_process+0x7bc>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d115      	bne.n	800f0d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f0a4:	4b11      	ldr	r3, [pc, #68]	; (800f0ec <tcp_process+0x7d8>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	f043 0310 	orr.w	r3, r3, #16
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <tcp_process+0x7d8>)
 800f0b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f0b2:	e00d      	b.n	800f0d0 <tcp_process+0x7bc>
    default:
      break;
 800f0b4:	bf00      	nop
 800f0b6:	e00c      	b.n	800f0d2 <tcp_process+0x7be>
      break;
 800f0b8:	bf00      	nop
 800f0ba:	e00a      	b.n	800f0d2 <tcp_process+0x7be>
      break;
 800f0bc:	bf00      	nop
 800f0be:	e008      	b.n	800f0d2 <tcp_process+0x7be>
      break;
 800f0c0:	bf00      	nop
 800f0c2:	e006      	b.n	800f0d2 <tcp_process+0x7be>
      break;
 800f0c4:	bf00      	nop
 800f0c6:	e004      	b.n	800f0d2 <tcp_process+0x7be>
      break;
 800f0c8:	bf00      	nop
 800f0ca:	e002      	b.n	800f0d2 <tcp_process+0x7be>
      break;
 800f0cc:	bf00      	nop
 800f0ce:	e000      	b.n	800f0d2 <tcp_process+0x7be>
      break;
 800f0d0:	bf00      	nop
  }
  return ERR_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3724      	adds	r7, #36	; 0x24
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd90      	pop	{r4, r7, pc}
 800f0dc:	2000b650 	.word	0x2000b650
 800f0e0:	2000b664 	.word	0x2000b664
 800f0e4:	20004b10 	.word	0x20004b10
 800f0e8:	20004b08 	.word	0x20004b08
 800f0ec:	20004b11 	.word	0x20004b11
 800f0f0:	2000b654 	.word	0x2000b654

0800f0f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f0f4:	b590      	push	{r4, r7, lr}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d106      	bne.n	800f112 <tcp_oos_insert_segment+0x1e>
 800f104:	4b3b      	ldr	r3, [pc, #236]	; (800f1f4 <tcp_oos_insert_segment+0x100>)
 800f106:	f240 421f 	movw	r2, #1055	; 0x41f
 800f10a:	493b      	ldr	r1, [pc, #236]	; (800f1f8 <tcp_oos_insert_segment+0x104>)
 800f10c:	483b      	ldr	r0, [pc, #236]	; (800f1fc <tcp_oos_insert_segment+0x108>)
 800f10e:	f006 fab7 	bl	8015680 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	899b      	ldrh	r3, [r3, #12]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fb f998 	bl	800a450 <lwip_htons>
 800f120:	4603      	mov	r3, r0
 800f122:	b2db      	uxtb	r3, r3
 800f124:	f003 0301 	and.w	r3, r3, #1
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d028      	beq.n	800f17e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f12c:	6838      	ldr	r0, [r7, #0]
 800f12e:	f7fe f999 	bl	800d464 <tcp_segs_free>
    next = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	603b      	str	r3, [r7, #0]
 800f136:	e056      	b.n	800f1e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	899b      	ldrh	r3, [r3, #12]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	4618      	mov	r0, r3
 800f142:	f7fb f985 	bl	800a450 <lwip_htons>
 800f146:	4603      	mov	r3, r0
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	f003 0301 	and.w	r3, r3, #1
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00d      	beq.n	800f16e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	899b      	ldrh	r3, [r3, #12]
 800f158:	b29c      	uxth	r4, r3
 800f15a:	2001      	movs	r0, #1
 800f15c:	f7fb f978 	bl	800a450 <lwip_htons>
 800f160:	4603      	mov	r3, r0
 800f162:	461a      	mov	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	4322      	orrs	r2, r4
 800f16a:	b292      	uxth	r2, r2
 800f16c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f7fe f987 	bl	800d48c <tcp_seg_free>
    while (next &&
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00e      	beq.n	800f1a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	891b      	ldrh	r3, [r3, #8]
 800f188:	461a      	mov	r2, r3
 800f18a:	4b1d      	ldr	r3, [pc, #116]	; (800f200 <tcp_oos_insert_segment+0x10c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	441a      	add	r2, r3
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	6839      	ldr	r1, [r7, #0]
 800f198:	8909      	ldrh	r1, [r1, #8]
 800f19a:	440b      	add	r3, r1
 800f19c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	daca      	bge.n	800f138 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d01e      	beq.n	800f1e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	891b      	ldrh	r3, [r3, #8]
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	4b14      	ldr	r3, [pc, #80]	; (800f200 <tcp_oos_insert_segment+0x10c>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	441a      	add	r2, r3
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	dd12      	ble.n	800f1e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	4b0d      	ldr	r3, [pc, #52]	; (800f200 <tcp_oos_insert_segment+0x10c>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	891b      	ldrh	r3, [r3, #8]
 800f1de:	4619      	mov	r1, r3
 800f1e0:	4610      	mov	r0, r2
 800f1e2:	f7fc fb57 	bl	800b894 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	683a      	ldr	r2, [r7, #0]
 800f1ea:	601a      	str	r2, [r3, #0]
}
 800f1ec:	bf00      	nop
 800f1ee:	3714      	adds	r7, #20
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd90      	pop	{r4, r7, pc}
 800f1f4:	08018168 	.word	0x08018168
 800f1f8:	08018428 	.word	0x08018428
 800f1fc:	080181b4 	.word	0x080181b4
 800f200:	20004b04 	.word	0x20004b04

0800f204 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f204:	b5b0      	push	{r4, r5, r7, lr}
 800f206:	b086      	sub	sp, #24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
 800f210:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f212:	e03e      	b.n	800f292 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	4618      	mov	r0, r3
 800f224:	f7fc fd4a 	bl	800bcbc <pbuf_clen>
 800f228:	4603      	mov	r3, r0
 800f22a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f232:	8a7a      	ldrh	r2, [r7, #18]
 800f234:	429a      	cmp	r2, r3
 800f236:	d906      	bls.n	800f246 <tcp_free_acked_segments+0x42>
 800f238:	4b2a      	ldr	r3, [pc, #168]	; (800f2e4 <tcp_free_acked_segments+0xe0>)
 800f23a:	f240 4257 	movw	r2, #1111	; 0x457
 800f23e:	492a      	ldr	r1, [pc, #168]	; (800f2e8 <tcp_free_acked_segments+0xe4>)
 800f240:	482a      	ldr	r0, [pc, #168]	; (800f2ec <tcp_free_acked_segments+0xe8>)
 800f242:	f006 fa1d 	bl	8015680 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f24c:	8a7b      	ldrh	r3, [r7, #18]
 800f24e:	1ad3      	subs	r3, r2, r3
 800f250:	b29a      	uxth	r2, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	891a      	ldrh	r2, [r3, #8]
 800f25c:	4b24      	ldr	r3, [pc, #144]	; (800f2f0 <tcp_free_acked_segments+0xec>)
 800f25e:	881b      	ldrh	r3, [r3, #0]
 800f260:	4413      	add	r3, r2
 800f262:	b29a      	uxth	r2, r3
 800f264:	4b22      	ldr	r3, [pc, #136]	; (800f2f0 <tcp_free_acked_segments+0xec>)
 800f266:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f268:	6978      	ldr	r0, [r7, #20]
 800f26a:	f7fe f90f 	bl	800d48c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00c      	beq.n	800f292 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d109      	bne.n	800f292 <tcp_free_acked_segments+0x8e>
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d106      	bne.n	800f292 <tcp_free_acked_segments+0x8e>
 800f284:	4b17      	ldr	r3, [pc, #92]	; (800f2e4 <tcp_free_acked_segments+0xe0>)
 800f286:	f240 4262 	movw	r2, #1122	; 0x462
 800f28a:	491a      	ldr	r1, [pc, #104]	; (800f2f4 <tcp_free_acked_segments+0xf0>)
 800f28c:	4817      	ldr	r0, [pc, #92]	; (800f2ec <tcp_free_acked_segments+0xe8>)
 800f28e:	f006 f9f7 	bl	8015680 <iprintf>
  while (seg_list != NULL &&
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d020      	beq.n	800f2da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7fb f8eb 	bl	800a47a <lwip_htonl>
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	891b      	ldrh	r3, [r3, #8]
 800f2aa:	461d      	mov	r5, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	899b      	ldrh	r3, [r3, #12]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fb f8cb 	bl	800a450 <lwip_htons>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	f003 0303 	and.w	r3, r3, #3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <tcp_free_acked_segments+0xc6>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e000      	b.n	800f2cc <tcp_free_acked_segments+0xc8>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	442b      	add	r3, r5
 800f2ce:	18e2      	adds	r2, r4, r3
 800f2d0:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <tcp_free_acked_segments+0xf4>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	dd9c      	ble.n	800f214 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f2da:	68bb      	ldr	r3, [r7, #8]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3718      	adds	r7, #24
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bdb0      	pop	{r4, r5, r7, pc}
 800f2e4:	08018168 	.word	0x08018168
 800f2e8:	08018450 	.word	0x08018450
 800f2ec:	080181b4 	.word	0x080181b4
 800f2f0:	20004b0c 	.word	0x20004b0c
 800f2f4:	08018478 	.word	0x08018478
 800f2f8:	20004b08 	.word	0x20004b08

0800f2fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f2fc:	b5b0      	push	{r4, r5, r7, lr}
 800f2fe:	b094      	sub	sp, #80	; 0x50
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f304:	2300      	movs	r3, #0
 800f306:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d106      	bne.n	800f31c <tcp_receive+0x20>
 800f30e:	4ba6      	ldr	r3, [pc, #664]	; (800f5a8 <tcp_receive+0x2ac>)
 800f310:	f240 427b 	movw	r2, #1147	; 0x47b
 800f314:	49a5      	ldr	r1, [pc, #660]	; (800f5ac <tcp_receive+0x2b0>)
 800f316:	48a6      	ldr	r0, [pc, #664]	; (800f5b0 <tcp_receive+0x2b4>)
 800f318:	f006 f9b2 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	7d1b      	ldrb	r3, [r3, #20]
 800f320:	2b03      	cmp	r3, #3
 800f322:	d806      	bhi.n	800f332 <tcp_receive+0x36>
 800f324:	4ba0      	ldr	r3, [pc, #640]	; (800f5a8 <tcp_receive+0x2ac>)
 800f326:	f240 427c 	movw	r2, #1148	; 0x47c
 800f32a:	49a2      	ldr	r1, [pc, #648]	; (800f5b4 <tcp_receive+0x2b8>)
 800f32c:	48a0      	ldr	r0, [pc, #640]	; (800f5b0 <tcp_receive+0x2b4>)
 800f32e:	f006 f9a7 	bl	8015680 <iprintf>

  if (flags & TCP_ACK) {
 800f332:	4ba1      	ldr	r3, [pc, #644]	; (800f5b8 <tcp_receive+0x2bc>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	f003 0310 	and.w	r3, r3, #16
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	f000 8263 	beq.w	800f806 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f346:	461a      	mov	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f34c:	4413      	add	r3, r2
 800f34e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f354:	4b99      	ldr	r3, [pc, #612]	; (800f5bc <tcp_receive+0x2c0>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	db1b      	blt.n	800f396 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f362:	4b96      	ldr	r3, [pc, #600]	; (800f5bc <tcp_receive+0x2c0>)
 800f364:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f366:	429a      	cmp	r2, r3
 800f368:	d106      	bne.n	800f378 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f36e:	4b94      	ldr	r3, [pc, #592]	; (800f5c0 <tcp_receive+0x2c4>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	1ad3      	subs	r3, r2, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	db0e      	blt.n	800f396 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f37c:	4b90      	ldr	r3, [pc, #576]	; (800f5c0 <tcp_receive+0x2c4>)
 800f37e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f380:	429a      	cmp	r2, r3
 800f382:	d125      	bne.n	800f3d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f384:	4b8f      	ldr	r3, [pc, #572]	; (800f5c4 <tcp_receive+0x2c8>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	89db      	ldrh	r3, [r3, #14]
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f392:	429a      	cmp	r2, r3
 800f394:	d91c      	bls.n	800f3d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f396:	4b8b      	ldr	r3, [pc, #556]	; (800f5c4 <tcp_receive+0x2c8>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	89db      	ldrh	r3, [r3, #14]
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d205      	bcs.n	800f3c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f3c0:	4b7e      	ldr	r3, [pc, #504]	; (800f5bc <tcp_receive+0x2c0>)
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f3c8:	4b7d      	ldr	r3, [pc, #500]	; (800f5c0 <tcp_receive+0x2c4>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f3d0:	4b7b      	ldr	r3, [pc, #492]	; (800f5c0 <tcp_receive+0x2c4>)
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	dc58      	bgt.n	800f490 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f3de:	4b7a      	ldr	r3, [pc, #488]	; (800f5c8 <tcp_receive+0x2cc>)
 800f3e0:	881b      	ldrh	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d14b      	bne.n	800f47e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f3f0:	4413      	add	r3, r2
 800f3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d142      	bne.n	800f47e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	db3d      	blt.n	800f47e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f406:	4b6e      	ldr	r3, [pc, #440]	; (800f5c0 <tcp_receive+0x2c4>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d137      	bne.n	800f47e <tcp_receive+0x182>
              found_dupack = 1;
 800f40e:	2301      	movs	r3, #1
 800f410:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f418:	2bff      	cmp	r3, #255	; 0xff
 800f41a:	d007      	beq.n	800f42c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f422:	3301      	adds	r3, #1
 800f424:	b2da      	uxtb	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f432:	2b03      	cmp	r3, #3
 800f434:	d91b      	bls.n	800f46e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f440:	4413      	add	r3, r2
 800f442:	b29a      	uxth	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d30a      	bcc.n	800f464 <tcp_receive+0x168>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f458:	4413      	add	r3, r2
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f462:	e004      	b.n	800f46e <tcp_receive+0x172>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f46a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f474:	2b02      	cmp	r3, #2
 800f476:	d902      	bls.n	800f47e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f002 fb47 	bl	8011b0c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f480:	2b00      	cmp	r3, #0
 800f482:	f040 8160 	bne.w	800f746 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f48e:	e15a      	b.n	800f746 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f490:	4b4b      	ldr	r3, [pc, #300]	; (800f5c0 <tcp_receive+0x2c4>)
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	3b01      	subs	r3, #1
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f2c0 814d 	blt.w	800f73c <tcp_receive+0x440>
 800f4a2:	4b47      	ldr	r3, [pc, #284]	; (800f5c0 <tcp_receive+0x2c4>)
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f300 8145 	bgt.w	800f73c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	8b5b      	ldrh	r3, [r3, #26]
 800f4b6:	f003 0304 	and.w	r3, r3, #4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d010      	beq.n	800f4e0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	8b5b      	ldrh	r3, [r3, #26]
 800f4c2:	f023 0304 	bic.w	r3, r3, #4
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4ee:	10db      	asrs	r3, r3, #3
 800f4f0:	b21b      	sxth	r3, r3
 800f4f2:	b29a      	uxth	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	4413      	add	r3, r2
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	b21a      	sxth	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f508:	4b2d      	ldr	r3, [pc, #180]	; (800f5c0 <tcp_receive+0x2c4>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f512:	b29b      	uxth	r3, r3
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f520:	4b27      	ldr	r3, [pc, #156]	; (800f5c0 <tcp_receive+0x2c4>)
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	7d1b      	ldrb	r3, [r3, #20]
 800f52c:	2b03      	cmp	r3, #3
 800f52e:	f240 8096 	bls.w	800f65e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f53e:	429a      	cmp	r2, r3
 800f540:	d244      	bcs.n	800f5cc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	8b5b      	ldrh	r3, [r3, #26]
 800f546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <tcp_receive+0x256>
 800f54e:	2301      	movs	r3, #1
 800f550:	e000      	b.n	800f554 <tcp_receive+0x258>
 800f552:	2302      	movs	r3, #2
 800f554:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f558:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f562:	fb12 f303 	smulbb	r3, r2, r3
 800f566:	b29b      	uxth	r3, r3
 800f568:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f56a:	4293      	cmp	r3, r2
 800f56c:	bf28      	it	cs
 800f56e:	4613      	movcs	r3, r2
 800f570:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f578:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f57a:	4413      	add	r3, r2
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f584:	429a      	cmp	r2, r3
 800f586:	d309      	bcc.n	800f59c <tcp_receive+0x2a0>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f58e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f590:	4413      	add	r3, r2
 800f592:	b29a      	uxth	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f59a:	e060      	b.n	800f65e <tcp_receive+0x362>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5a6:	e05a      	b.n	800f65e <tcp_receive+0x362>
 800f5a8:	08018168 	.word	0x08018168
 800f5ac:	08018498 	.word	0x08018498
 800f5b0:	080181b4 	.word	0x080181b4
 800f5b4:	080184b4 	.word	0x080184b4
 800f5b8:	20004b10 	.word	0x20004b10
 800f5bc:	20004b04 	.word	0x20004b04
 800f5c0:	20004b08 	.word	0x20004b08
 800f5c4:	20004af4 	.word	0x20004af4
 800f5c8:	20004b0e 	.word	0x20004b0e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5d4:	4413      	add	r3, r2
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d309      	bcc.n	800f5f6 <tcp_receive+0x2fa>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5ea:	4413      	add	r3, r2
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5f4:	e004      	b.n	800f600 <tcp_receive+0x304>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d326      	bcc.n	800f65e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	b29a      	uxth	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f630:	4413      	add	r3, r2
 800f632:	b29a      	uxth	r2, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d30a      	bcc.n	800f654 <tcp_receive+0x358>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f648:	4413      	add	r3, r2
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f652:	e004      	b.n	800f65e <tcp_receive+0x362>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f65a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f666:	4a98      	ldr	r2, [pc, #608]	; (800f8c8 <tcp_receive+0x5cc>)
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7ff fdcb 	bl	800f204 <tcp_free_acked_segments>
 800f66e:	4602      	mov	r2, r0
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f67c:	4a93      	ldr	r2, [pc, #588]	; (800f8cc <tcp_receive+0x5d0>)
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7ff fdc0 	bl	800f204 <tcp_free_acked_segments>
 800f684:	4602      	mov	r2, r0
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d104      	bne.n	800f69c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f698:	861a      	strh	r2, [r3, #48]	; 0x30
 800f69a:	e002      	b.n	800f6a2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d103      	bne.n	800f6b8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f6be:	4b84      	ldr	r3, [pc, #528]	; (800f8d0 <tcp_receive+0x5d4>)
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	8b5b      	ldrh	r3, [r3, #26]
 800f6d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d035      	beq.n	800f744 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d118      	bne.n	800f712 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00c      	beq.n	800f702 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fa fec0 	bl	800a47a <lwip_htonl>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	dc20      	bgt.n	800f744 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	8b5b      	ldrh	r3, [r3, #26]
 800f706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f710:	e018      	b.n	800f744 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fa feab 	bl	800a47a <lwip_htonl>
 800f724:	4603      	mov	r3, r0
 800f726:	1ae3      	subs	r3, r4, r3
 800f728:	2b00      	cmp	r3, #0
 800f72a:	dc0b      	bgt.n	800f744 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	8b5b      	ldrh	r3, [r3, #26]
 800f730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f734:	b29a      	uxth	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f73a:	e003      	b.n	800f744 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f002 fbdd 	bl	8011efc <tcp_send_empty_ack>
 800f742:	e000      	b.n	800f746 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f744:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d05b      	beq.n	800f806 <tcp_receive+0x50a>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f752:	4b60      	ldr	r3, [pc, #384]	; (800f8d4 <tcp_receive+0x5d8>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	da54      	bge.n	800f806 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f75c:	4b5e      	ldr	r3, [pc, #376]	; (800f8d8 <tcp_receive+0x5dc>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	b29a      	uxth	r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f766:	b29b      	uxth	r3, r3
 800f768:	1ad3      	subs	r3, r2, r3
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f770:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f77a:	10db      	asrs	r3, r3, #3
 800f77c:	b21b      	sxth	r3, r3
 800f77e:	b29b      	uxth	r3, r3
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	b29b      	uxth	r3, r3
 800f784:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f78e:	b29a      	uxth	r2, r3
 800f790:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f794:	4413      	add	r3, r2
 800f796:	b29b      	uxth	r3, r3
 800f798:	b21a      	sxth	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f79e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	da05      	bge.n	800f7b2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f7a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7aa:	425b      	negs	r3, r3
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f7b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7bc:	109b      	asrs	r3, r3, #2
 800f7be:	b21b      	sxth	r3, r3
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7d6:	4413      	add	r3, r2
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	b21a      	sxth	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7e6:	10db      	asrs	r3, r3, #3
 800f7e8:	b21b      	sxth	r3, r3
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	4413      	add	r3, r2
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	b21a      	sxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f806:	4b35      	ldr	r3, [pc, #212]	; (800f8dc <tcp_receive+0x5e0>)
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f000 84e1 	beq.w	80101d2 <tcp_receive+0xed6>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	7d1b      	ldrb	r3, [r3, #20]
 800f814:	2b06      	cmp	r3, #6
 800f816:	f200 84dc 	bhi.w	80101d2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f81e:	4b30      	ldr	r3, [pc, #192]	; (800f8e0 <tcp_receive+0x5e4>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	1ad3      	subs	r3, r2, r3
 800f824:	3b01      	subs	r3, #1
 800f826:	2b00      	cmp	r3, #0
 800f828:	f2c0 808e 	blt.w	800f948 <tcp_receive+0x64c>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f830:	4b2a      	ldr	r3, [pc, #168]	; (800f8dc <tcp_receive+0x5e0>)
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	4619      	mov	r1, r3
 800f836:	4b2a      	ldr	r3, [pc, #168]	; (800f8e0 <tcp_receive+0x5e4>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	440b      	add	r3, r1
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	3301      	adds	r3, #1
 800f840:	2b00      	cmp	r3, #0
 800f842:	f300 8081 	bgt.w	800f948 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f846:	4b27      	ldr	r3, [pc, #156]	; (800f8e4 <tcp_receive+0x5e8>)
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f850:	4b23      	ldr	r3, [pc, #140]	; (800f8e0 <tcp_receive+0x5e4>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	1ad3      	subs	r3, r2, r3
 800f856:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f858:	4b22      	ldr	r3, [pc, #136]	; (800f8e4 <tcp_receive+0x5e8>)
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d106      	bne.n	800f86e <tcp_receive+0x572>
 800f860:	4b21      	ldr	r3, [pc, #132]	; (800f8e8 <tcp_receive+0x5ec>)
 800f862:	f240 5294 	movw	r2, #1428	; 0x594
 800f866:	4921      	ldr	r1, [pc, #132]	; (800f8ec <tcp_receive+0x5f0>)
 800f868:	4821      	ldr	r0, [pc, #132]	; (800f8f0 <tcp_receive+0x5f4>)
 800f86a:	f005 ff09 	bl	8015680 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f874:	4293      	cmp	r3, r2
 800f876:	d906      	bls.n	800f886 <tcp_receive+0x58a>
 800f878:	4b1b      	ldr	r3, [pc, #108]	; (800f8e8 <tcp_receive+0x5ec>)
 800f87a:	f240 5295 	movw	r2, #1429	; 0x595
 800f87e:	491d      	ldr	r1, [pc, #116]	; (800f8f4 <tcp_receive+0x5f8>)
 800f880:	481b      	ldr	r0, [pc, #108]	; (800f8f0 <tcp_receive+0x5f4>)
 800f882:	f005 fefd 	bl	8015680 <iprintf>
      off = (u16_t)off32;
 800f886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f888:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f88c:	4b15      	ldr	r3, [pc, #84]	; (800f8e4 <tcp_receive+0x5e8>)
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	891b      	ldrh	r3, [r3, #8]
 800f892:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f896:	429a      	cmp	r2, r3
 800f898:	d906      	bls.n	800f8a8 <tcp_receive+0x5ac>
 800f89a:	4b13      	ldr	r3, [pc, #76]	; (800f8e8 <tcp_receive+0x5ec>)
 800f89c:	f240 5297 	movw	r2, #1431	; 0x597
 800f8a0:	4915      	ldr	r1, [pc, #84]	; (800f8f8 <tcp_receive+0x5fc>)
 800f8a2:	4813      	ldr	r0, [pc, #76]	; (800f8f0 <tcp_receive+0x5f4>)
 800f8a4:	f005 feec 	bl	8015680 <iprintf>
      inseg.len -= off;
 800f8a8:	4b0e      	ldr	r3, [pc, #56]	; (800f8e4 <tcp_receive+0x5e8>)
 800f8aa:	891a      	ldrh	r2, [r3, #8]
 800f8ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <tcp_receive+0x5e8>)
 800f8b6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f8b8:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <tcp_receive+0x5e8>)
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	891a      	ldrh	r2, [r3, #8]
 800f8be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8c2:	1ad3      	subs	r3, r2, r3
 800f8c4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f8c6:	e029      	b.n	800f91c <tcp_receive+0x620>
 800f8c8:	080184d0 	.word	0x080184d0
 800f8cc:	080184d8 	.word	0x080184d8
 800f8d0:	20004b0c 	.word	0x20004b0c
 800f8d4:	20004b08 	.word	0x20004b08
 800f8d8:	2000b658 	.word	0x2000b658
 800f8dc:	20004b0e 	.word	0x20004b0e
 800f8e0:	20004b04 	.word	0x20004b04
 800f8e4:	20004ae4 	.word	0x20004ae4
 800f8e8:	08018168 	.word	0x08018168
 800f8ec:	080184e0 	.word	0x080184e0
 800f8f0:	080181b4 	.word	0x080181b4
 800f8f4:	080184f0 	.word	0x080184f0
 800f8f8:	08018500 	.word	0x08018500
        off -= p->len;
 800f8fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8fe:	895b      	ldrh	r3, [r3, #10]
 800f900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f90c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f90e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f912:	2200      	movs	r2, #0
 800f914:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f91e:	895b      	ldrh	r3, [r3, #10]
 800f920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f924:	429a      	cmp	r2, r3
 800f926:	d8e9      	bhi.n	800f8fc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f92c:	4619      	mov	r1, r3
 800f92e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f930:	f7fc f8b0 	bl	800ba94 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f938:	4a91      	ldr	r2, [pc, #580]	; (800fb80 <tcp_receive+0x884>)
 800f93a:	6013      	str	r3, [r2, #0]
 800f93c:	4b91      	ldr	r3, [pc, #580]	; (800fb84 <tcp_receive+0x888>)
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	4a8f      	ldr	r2, [pc, #572]	; (800fb80 <tcp_receive+0x884>)
 800f942:	6812      	ldr	r2, [r2, #0]
 800f944:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f946:	e00d      	b.n	800f964 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f948:	4b8d      	ldr	r3, [pc, #564]	; (800fb80 <tcp_receive+0x884>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	2b00      	cmp	r3, #0
 800f954:	da06      	bge.n	800f964 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	8b5b      	ldrh	r3, [r3, #26]
 800f95a:	f043 0302 	orr.w	r3, r3, #2
 800f95e:	b29a      	uxth	r2, r3
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f964:	4b86      	ldr	r3, [pc, #536]	; (800fb80 <tcp_receive+0x884>)
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f2c0 842a 	blt.w	80101c8 <tcp_receive+0xecc>
 800f974:	4b82      	ldr	r3, [pc, #520]	; (800fb80 <tcp_receive+0x884>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f97c:	6879      	ldr	r1, [r7, #4]
 800f97e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f980:	440b      	add	r3, r1
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	3301      	adds	r3, #1
 800f986:	2b00      	cmp	r3, #0
 800f988:	f300 841e 	bgt.w	80101c8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f990:	4b7b      	ldr	r3, [pc, #492]	; (800fb80 <tcp_receive+0x884>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	429a      	cmp	r2, r3
 800f996:	f040 829a 	bne.w	800fece <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f99a:	4b7a      	ldr	r3, [pc, #488]	; (800fb84 <tcp_receive+0x888>)
 800f99c:	891c      	ldrh	r4, [r3, #8]
 800f99e:	4b79      	ldr	r3, [pc, #484]	; (800fb84 <tcp_receive+0x888>)
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	899b      	ldrh	r3, [r3, #12]
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fa fd52 	bl	800a450 <lwip_htons>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	f003 0303 	and.w	r3, r3, #3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <tcp_receive+0x6c0>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e000      	b.n	800f9be <tcp_receive+0x6c2>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	4423      	add	r3, r4
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	4b71      	ldr	r3, [pc, #452]	; (800fb88 <tcp_receive+0x88c>)
 800f9c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9ca:	4b6f      	ldr	r3, [pc, #444]	; (800fb88 <tcp_receive+0x88c>)
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d275      	bcs.n	800fabe <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9d2:	4b6c      	ldr	r3, [pc, #432]	; (800fb84 <tcp_receive+0x888>)
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	899b      	ldrh	r3, [r3, #12]
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fa fd38 	bl	800a450 <lwip_htons>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0301 	and.w	r3, r3, #1
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d01f      	beq.n	800fa2c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f9ec:	4b65      	ldr	r3, [pc, #404]	; (800fb84 <tcp_receive+0x888>)
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	899b      	ldrh	r3, [r3, #12]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	b21b      	sxth	r3, r3
 800f9f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f9fa:	b21c      	sxth	r4, r3
 800f9fc:	4b61      	ldr	r3, [pc, #388]	; (800fb84 <tcp_receive+0x888>)
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	899b      	ldrh	r3, [r3, #12]
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fa fd23 	bl	800a450 <lwip_htons>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fa fd1a 	bl	800a450 <lwip_htons>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	b21b      	sxth	r3, r3
 800fa20:	4323      	orrs	r3, r4
 800fa22:	b21a      	sxth	r2, r3
 800fa24:	4b57      	ldr	r3, [pc, #348]	; (800fb84 <tcp_receive+0x888>)
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	b292      	uxth	r2, r2
 800fa2a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa30:	4b54      	ldr	r3, [pc, #336]	; (800fb84 <tcp_receive+0x888>)
 800fa32:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa34:	4b53      	ldr	r3, [pc, #332]	; (800fb84 <tcp_receive+0x888>)
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	899b      	ldrh	r3, [r3, #12]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fa fd07 	bl	800a450 <lwip_htons>
 800fa42:	4603      	mov	r3, r0
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	f003 0302 	and.w	r3, r3, #2
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d005      	beq.n	800fa5a <tcp_receive+0x75e>
            inseg.len -= 1;
 800fa4e:	4b4d      	ldr	r3, [pc, #308]	; (800fb84 <tcp_receive+0x888>)
 800fa50:	891b      	ldrh	r3, [r3, #8]
 800fa52:	3b01      	subs	r3, #1
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	4b4b      	ldr	r3, [pc, #300]	; (800fb84 <tcp_receive+0x888>)
 800fa58:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa5a:	4b4a      	ldr	r3, [pc, #296]	; (800fb84 <tcp_receive+0x888>)
 800fa5c:	685a      	ldr	r2, [r3, #4]
 800fa5e:	4b49      	ldr	r3, [pc, #292]	; (800fb84 <tcp_receive+0x888>)
 800fa60:	891b      	ldrh	r3, [r3, #8]
 800fa62:	4619      	mov	r1, r3
 800fa64:	4610      	mov	r0, r2
 800fa66:	f7fb ff15 	bl	800b894 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa6a:	4b46      	ldr	r3, [pc, #280]	; (800fb84 <tcp_receive+0x888>)
 800fa6c:	891c      	ldrh	r4, [r3, #8]
 800fa6e:	4b45      	ldr	r3, [pc, #276]	; (800fb84 <tcp_receive+0x888>)
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	899b      	ldrh	r3, [r3, #12]
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fa fcea 	bl	800a450 <lwip_htons>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	f003 0303 	and.w	r3, r3, #3
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d001      	beq.n	800fa8c <tcp_receive+0x790>
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e000      	b.n	800fa8e <tcp_receive+0x792>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	4423      	add	r3, r4
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	4b3d      	ldr	r3, [pc, #244]	; (800fb88 <tcp_receive+0x88c>)
 800fa94:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa96:	4b3c      	ldr	r3, [pc, #240]	; (800fb88 <tcp_receive+0x88c>)
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	4b38      	ldr	r3, [pc, #224]	; (800fb80 <tcp_receive+0x884>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	441a      	add	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa6:	6879      	ldr	r1, [r7, #4]
 800faa8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800faaa:	440b      	add	r3, r1
 800faac:	429a      	cmp	r2, r3
 800faae:	d006      	beq.n	800fabe <tcp_receive+0x7c2>
 800fab0:	4b36      	ldr	r3, [pc, #216]	; (800fb8c <tcp_receive+0x890>)
 800fab2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800fab6:	4936      	ldr	r1, [pc, #216]	; (800fb90 <tcp_receive+0x894>)
 800fab8:	4836      	ldr	r0, [pc, #216]	; (800fb94 <tcp_receive+0x898>)
 800faba:	f005 fde1 	bl	8015680 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f000 80e7 	beq.w	800fc96 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fac8:	4b2e      	ldr	r3, [pc, #184]	; (800fb84 <tcp_receive+0x888>)
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	899b      	ldrh	r3, [r3, #12]
 800face:	b29b      	uxth	r3, r3
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fa fcbd 	bl	800a450 <lwip_htons>
 800fad6:	4603      	mov	r3, r0
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	f003 0301 	and.w	r3, r3, #1
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d010      	beq.n	800fb04 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fae2:	e00a      	b.n	800fafa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fae8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f7fd fcc9 	bl	800d48c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1f0      	bne.n	800fae4 <tcp_receive+0x7e8>
 800fb02:	e0c8      	b.n	800fc96 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb08:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb0a:	e052      	b.n	800fbb2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	899b      	ldrh	r3, [r3, #12]
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fa fc9b 	bl	800a450 <lwip_htons>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	f003 0301 	and.w	r3, r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d03d      	beq.n	800fba2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb26:	4b17      	ldr	r3, [pc, #92]	; (800fb84 <tcp_receive+0x888>)
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	899b      	ldrh	r3, [r3, #12]
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fa fc8e 	bl	800a450 <lwip_htons>
 800fb34:	4603      	mov	r3, r0
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d130      	bne.n	800fba2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb40:	4b10      	ldr	r3, [pc, #64]	; (800fb84 <tcp_receive+0x888>)
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	899b      	ldrh	r3, [r3, #12]
 800fb46:	b29c      	uxth	r4, r3
 800fb48:	2001      	movs	r0, #1
 800fb4a:	f7fa fc81 	bl	800a450 <lwip_htons>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	461a      	mov	r2, r3
 800fb52:	4b0c      	ldr	r3, [pc, #48]	; (800fb84 <tcp_receive+0x888>)
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	4322      	orrs	r2, r4
 800fb58:	b292      	uxth	r2, r2
 800fb5a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb5c:	4b09      	ldr	r3, [pc, #36]	; (800fb84 <tcp_receive+0x888>)
 800fb5e:	891c      	ldrh	r4, [r3, #8]
 800fb60:	4b08      	ldr	r3, [pc, #32]	; (800fb84 <tcp_receive+0x888>)
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	899b      	ldrh	r3, [r3, #12]
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fa fc71 	bl	800a450 <lwip_htons>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	f003 0303 	and.w	r3, r3, #3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00e      	beq.n	800fb98 <tcp_receive+0x89c>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e00d      	b.n	800fb9a <tcp_receive+0x89e>
 800fb7e:	bf00      	nop
 800fb80:	20004b04 	.word	0x20004b04
 800fb84:	20004ae4 	.word	0x20004ae4
 800fb88:	20004b0e 	.word	0x20004b0e
 800fb8c:	08018168 	.word	0x08018168
 800fb90:	08018510 	.word	0x08018510
 800fb94:	080181b4 	.word	0x080181b4
 800fb98:	2300      	movs	r3, #0
 800fb9a:	4423      	add	r3, r4
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	4b98      	ldr	r3, [pc, #608]	; (800fe00 <tcp_receive+0xb04>)
 800fba0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fbac:	6938      	ldr	r0, [r7, #16]
 800fbae:	f7fd fc6d 	bl	800d48c <tcp_seg_free>
            while (next &&
 800fbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d00e      	beq.n	800fbd6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fbb8:	4b91      	ldr	r3, [pc, #580]	; (800fe00 <tcp_receive+0xb04>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b91      	ldr	r3, [pc, #580]	; (800fe04 <tcp_receive+0xb08>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	441a      	add	r2, r3
 800fbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbcc:	8909      	ldrh	r1, [r1, #8]
 800fbce:	440b      	add	r3, r1
 800fbd0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	da9a      	bge.n	800fb0c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d059      	beq.n	800fc90 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fbdc:	4b88      	ldr	r3, [pc, #544]	; (800fe00 <tcp_receive+0xb04>)
 800fbde:	881b      	ldrh	r3, [r3, #0]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	4b88      	ldr	r3, [pc, #544]	; (800fe04 <tcp_receive+0xb08>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	441a      	add	r2, r3
 800fbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	dd4d      	ble.n	800fc90 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	4b81      	ldr	r3, [pc, #516]	; (800fe04 <tcp_receive+0xb08>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	4b80      	ldr	r3, [pc, #512]	; (800fe08 <tcp_receive+0xb0c>)
 800fc08:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc0a:	4b7f      	ldr	r3, [pc, #508]	; (800fe08 <tcp_receive+0xb0c>)
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	899b      	ldrh	r3, [r3, #12]
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fa fc1c 	bl	800a450 <lwip_htons>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	f003 0302 	and.w	r3, r3, #2
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d005      	beq.n	800fc30 <tcp_receive+0x934>
                inseg.len -= 1;
 800fc24:	4b78      	ldr	r3, [pc, #480]	; (800fe08 <tcp_receive+0xb0c>)
 800fc26:	891b      	ldrh	r3, [r3, #8]
 800fc28:	3b01      	subs	r3, #1
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	4b76      	ldr	r3, [pc, #472]	; (800fe08 <tcp_receive+0xb0c>)
 800fc2e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc30:	4b75      	ldr	r3, [pc, #468]	; (800fe08 <tcp_receive+0xb0c>)
 800fc32:	685a      	ldr	r2, [r3, #4]
 800fc34:	4b74      	ldr	r3, [pc, #464]	; (800fe08 <tcp_receive+0xb0c>)
 800fc36:	891b      	ldrh	r3, [r3, #8]
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	f7fb fe2a 	bl	800b894 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc40:	4b71      	ldr	r3, [pc, #452]	; (800fe08 <tcp_receive+0xb0c>)
 800fc42:	891c      	ldrh	r4, [r3, #8]
 800fc44:	4b70      	ldr	r3, [pc, #448]	; (800fe08 <tcp_receive+0xb0c>)
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	899b      	ldrh	r3, [r3, #12]
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fa fbff 	bl	800a450 <lwip_htons>
 800fc52:	4603      	mov	r3, r0
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	f003 0303 	and.w	r3, r3, #3
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <tcp_receive+0x966>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e000      	b.n	800fc64 <tcp_receive+0x968>
 800fc62:	2300      	movs	r3, #0
 800fc64:	4423      	add	r3, r4
 800fc66:	b29a      	uxth	r2, r3
 800fc68:	4b65      	ldr	r3, [pc, #404]	; (800fe00 <tcp_receive+0xb04>)
 800fc6a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc6c:	4b64      	ldr	r3, [pc, #400]	; (800fe00 <tcp_receive+0xb04>)
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	461a      	mov	r2, r3
 800fc72:	4b64      	ldr	r3, [pc, #400]	; (800fe04 <tcp_receive+0xb08>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	441a      	add	r2, r3
 800fc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d006      	beq.n	800fc90 <tcp_receive+0x994>
 800fc82:	4b62      	ldr	r3, [pc, #392]	; (800fe0c <tcp_receive+0xb10>)
 800fc84:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800fc88:	4961      	ldr	r1, [pc, #388]	; (800fe10 <tcp_receive+0xb14>)
 800fc8a:	4862      	ldr	r0, [pc, #392]	; (800fe14 <tcp_receive+0xb18>)
 800fc8c:	f005 fcf8 	bl	8015680 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc94:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fc96:	4b5a      	ldr	r3, [pc, #360]	; (800fe00 <tcp_receive+0xb04>)
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	4b59      	ldr	r3, [pc, #356]	; (800fe04 <tcp_receive+0xb08>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	441a      	add	r2, r3
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcaa:	4b55      	ldr	r3, [pc, #340]	; (800fe00 <tcp_receive+0xb04>)
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d206      	bcs.n	800fcc0 <tcp_receive+0x9c4>
 800fcb2:	4b56      	ldr	r3, [pc, #344]	; (800fe0c <tcp_receive+0xb10>)
 800fcb4:	f240 6207 	movw	r2, #1543	; 0x607
 800fcb8:	4957      	ldr	r1, [pc, #348]	; (800fe18 <tcp_receive+0xb1c>)
 800fcba:	4856      	ldr	r0, [pc, #344]	; (800fe14 <tcp_receive+0xb18>)
 800fcbc:	f005 fce0 	bl	8015680 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcc4:	4b4e      	ldr	r3, [pc, #312]	; (800fe00 <tcp_receive+0xb04>)
 800fcc6:	881b      	ldrh	r3, [r3, #0]
 800fcc8:	1ad3      	subs	r3, r2, r3
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7fc feb9 	bl	800ca48 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fcd6:	4b4c      	ldr	r3, [pc, #304]	; (800fe08 <tcp_receive+0xb0c>)
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	891b      	ldrh	r3, [r3, #8]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d006      	beq.n	800fcee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fce0:	4b49      	ldr	r3, [pc, #292]	; (800fe08 <tcp_receive+0xb0c>)
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	4a4d      	ldr	r2, [pc, #308]	; (800fe1c <tcp_receive+0xb20>)
 800fce6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fce8:	4b47      	ldr	r3, [pc, #284]	; (800fe08 <tcp_receive+0xb0c>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcee:	4b46      	ldr	r3, [pc, #280]	; (800fe08 <tcp_receive+0xb0c>)
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	899b      	ldrh	r3, [r3, #12]
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fa fbaa 	bl	800a450 <lwip_htons>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	f003 0301 	and.w	r3, r3, #1
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f000 80b8 	beq.w	800fe7a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd0a:	4b45      	ldr	r3, [pc, #276]	; (800fe20 <tcp_receive+0xb24>)
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	f043 0320 	orr.w	r3, r3, #32
 800fd12:	b2da      	uxtb	r2, r3
 800fd14:	4b42      	ldr	r3, [pc, #264]	; (800fe20 <tcp_receive+0xb24>)
 800fd16:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd18:	e0af      	b.n	800fe7a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd1e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	4a36      	ldr	r2, [pc, #216]	; (800fe04 <tcp_receive+0xb08>)
 800fd2a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	891b      	ldrh	r3, [r3, #8]
 800fd30:	461c      	mov	r4, r3
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	899b      	ldrh	r3, [r3, #12]
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fa fb88 	bl	800a450 <lwip_htons>
 800fd40:	4603      	mov	r3, r0
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	f003 0303 	and.w	r3, r3, #3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <tcp_receive+0xa54>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e000      	b.n	800fd52 <tcp_receive+0xa56>
 800fd50:	2300      	movs	r3, #0
 800fd52:	191a      	adds	r2, r3, r4
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd58:	441a      	add	r2, r3
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd62:	461c      	mov	r4, r3
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	891b      	ldrh	r3, [r3, #8]
 800fd68:	461d      	mov	r5, r3
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	899b      	ldrh	r3, [r3, #12]
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fa fb6c 	bl	800a450 <lwip_htons>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	f003 0303 	and.w	r3, r3, #3
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <tcp_receive+0xa8c>
 800fd84:	2301      	movs	r3, #1
 800fd86:	e000      	b.n	800fd8a <tcp_receive+0xa8e>
 800fd88:	2300      	movs	r3, #0
 800fd8a:	442b      	add	r3, r5
 800fd8c:	429c      	cmp	r4, r3
 800fd8e:	d206      	bcs.n	800fd9e <tcp_receive+0xaa2>
 800fd90:	4b1e      	ldr	r3, [pc, #120]	; (800fe0c <tcp_receive+0xb10>)
 800fd92:	f240 622c 	movw	r2, #1580	; 0x62c
 800fd96:	4923      	ldr	r1, [pc, #140]	; (800fe24 <tcp_receive+0xb28>)
 800fd98:	481e      	ldr	r0, [pc, #120]	; (800fe14 <tcp_receive+0xb18>)
 800fd9a:	f005 fc71 	bl	8015680 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	891b      	ldrh	r3, [r3, #8]
 800fda2:	461c      	mov	r4, r3
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	899b      	ldrh	r3, [r3, #12]
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fa fb4f 	bl	800a450 <lwip_htons>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	f003 0303 	and.w	r3, r3, #3
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d001      	beq.n	800fdc2 <tcp_receive+0xac6>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e000      	b.n	800fdc4 <tcp_receive+0xac8>
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	1919      	adds	r1, r3, r4
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdca:	b28b      	uxth	r3, r1
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7fc fe37 	bl	800ca48 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	891b      	ldrh	r3, [r3, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d028      	beq.n	800fe36 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fde4:	4b0d      	ldr	r3, [pc, #52]	; (800fe1c <tcp_receive+0xb20>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d01d      	beq.n	800fe28 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fdec:	4b0b      	ldr	r3, [pc, #44]	; (800fe1c <tcp_receive+0xb20>)
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	4610      	mov	r0, r2
 800fdf8:	f7fb ffa0 	bl	800bd3c <pbuf_cat>
 800fdfc:	e018      	b.n	800fe30 <tcp_receive+0xb34>
 800fdfe:	bf00      	nop
 800fe00:	20004b0e 	.word	0x20004b0e
 800fe04:	20004b04 	.word	0x20004b04
 800fe08:	20004ae4 	.word	0x20004ae4
 800fe0c:	08018168 	.word	0x08018168
 800fe10:	08018548 	.word	0x08018548
 800fe14:	080181b4 	.word	0x080181b4
 800fe18:	08018584 	.word	0x08018584
 800fe1c:	20004b14 	.word	0x20004b14
 800fe20:	20004b11 	.word	0x20004b11
 800fe24:	080185a4 	.word	0x080185a4
            } else {
              recv_data = cseg->p;
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	4a70      	ldr	r2, [pc, #448]	; (800fff0 <tcp_receive+0xcf4>)
 800fe2e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	2200      	movs	r2, #0
 800fe34:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	899b      	ldrh	r3, [r3, #12]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fa fb06 	bl	800a450 <lwip_htons>
 800fe44:	4603      	mov	r3, r0
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 0301 	and.w	r3, r3, #1
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d00d      	beq.n	800fe6c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe50:	4b68      	ldr	r3, [pc, #416]	; (800fff4 <tcp_receive+0xcf8>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	f043 0320 	orr.w	r3, r3, #32
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	4b66      	ldr	r3, [pc, #408]	; (800fff4 <tcp_receive+0xcf8>)
 800fe5c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	7d1b      	ldrb	r3, [r3, #20]
 800fe62:	2b04      	cmp	r3, #4
 800fe64:	d102      	bne.n	800fe6c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2207      	movs	r2, #7
 800fe6a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fe74:	68b8      	ldr	r0, [r7, #8]
 800fe76:	f7fd fb09 	bl	800d48c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d008      	beq.n	800fe94 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	f43f af43 	beq.w	800fd1a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	8b5b      	ldrh	r3, [r3, #26]
 800fe98:	f003 0301 	and.w	r3, r3, #1
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00e      	beq.n	800febe <tcp_receive+0xbc2>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	8b5b      	ldrh	r3, [r3, #26]
 800fea4:	f023 0301 	bic.w	r3, r3, #1
 800fea8:	b29a      	uxth	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	835a      	strh	r2, [r3, #26]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	8b5b      	ldrh	r3, [r3, #26]
 800feb2:	f043 0302 	orr.w	r3, r3, #2
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800febc:	e188      	b.n	80101d0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	8b5b      	ldrh	r3, [r3, #26]
 800fec2:	f043 0301 	orr.w	r3, r3, #1
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fecc:	e180      	b.n	80101d0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fed6:	4848      	ldr	r0, [pc, #288]	; (800fff8 <tcp_receive+0xcfc>)
 800fed8:	f7fd faf0 	bl	800d4bc <tcp_seg_copy>
 800fedc:	4602      	mov	r2, r0
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	675a      	str	r2, [r3, #116]	; 0x74
 800fee2:	e16d      	b.n	80101c0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fee4:	2300      	movs	r3, #0
 800fee6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feec:	63bb      	str	r3, [r7, #56]	; 0x38
 800feee:	e157      	b.n	80101a0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	685a      	ldr	r2, [r3, #4]
 800fef6:	4b41      	ldr	r3, [pc, #260]	; (800fffc <tcp_receive+0xd00>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d11d      	bne.n	800ff3a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fefe:	4b3e      	ldr	r3, [pc, #248]	; (800fff8 <tcp_receive+0xcfc>)
 800ff00:	891a      	ldrh	r2, [r3, #8]
 800ff02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff04:	891b      	ldrh	r3, [r3, #8]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	f240 814f 	bls.w	80101aa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff0c:	483a      	ldr	r0, [pc, #232]	; (800fff8 <tcp_receive+0xcfc>)
 800ff0e:	f7fd fad5 	bl	800d4bc <tcp_seg_copy>
 800ff12:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f000 8149 	beq.w	80101ae <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ff1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d003      	beq.n	800ff2a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ff22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	601a      	str	r2, [r3, #0]
 800ff28:	e002      	b.n	800ff30 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	697a      	ldr	r2, [r7, #20]
 800ff2e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff32:	6978      	ldr	r0, [r7, #20]
 800ff34:	f7ff f8de 	bl	800f0f4 <tcp_oos_insert_segment>
                }
                break;
 800ff38:	e139      	b.n	80101ae <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d117      	bne.n	800ff70 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff40:	4b2e      	ldr	r3, [pc, #184]	; (800fffc <tcp_receive+0xd00>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	da57      	bge.n	8010000 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff50:	4829      	ldr	r0, [pc, #164]	; (800fff8 <tcp_receive+0xcfc>)
 800ff52:	f7fd fab3 	bl	800d4bc <tcp_seg_copy>
 800ff56:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f000 8129 	beq.w	80101b2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	69ba      	ldr	r2, [r7, #24]
 800ff64:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ff66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff68:	69b8      	ldr	r0, [r7, #24]
 800ff6a:	f7ff f8c3 	bl	800f0f4 <tcp_oos_insert_segment>
                  }
                  break;
 800ff6e:	e120      	b.n	80101b2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ff70:	4b22      	ldr	r3, [pc, #136]	; (800fffc <tcp_receive+0xd00>)
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	db3e      	blt.n	8010000 <tcp_receive+0xd04>
 800ff82:	4b1e      	ldr	r3, [pc, #120]	; (800fffc <tcp_receive+0xd00>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff88:	68db      	ldr	r3, [r3, #12]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	3301      	adds	r3, #1
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	dc35      	bgt.n	8010000 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff94:	4818      	ldr	r0, [pc, #96]	; (800fff8 <tcp_receive+0xcfc>)
 800ff96:	f7fd fa91 	bl	800d4bc <tcp_seg_copy>
 800ff9a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	f000 8109 	beq.w	80101b6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffac:	8912      	ldrh	r2, [r2, #8]
 800ffae:	441a      	add	r2, r3
 800ffb0:	4b12      	ldr	r3, [pc, #72]	; (800fffc <tcp_receive+0xd00>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	1ad3      	subs	r3, r2, r3
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	dd12      	ble.n	800ffe0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ffba:	4b10      	ldr	r3, [pc, #64]	; (800fffc <tcp_receive+0xd00>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ffd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd2:	685a      	ldr	r2, [r3, #4]
 800ffd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd6:	891b      	ldrh	r3, [r3, #8]
 800ffd8:	4619      	mov	r1, r3
 800ffda:	4610      	mov	r0, r2
 800ffdc:	f7fb fc5a 	bl	800b894 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ffe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe2:	69fa      	ldr	r2, [r7, #28]
 800ffe4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ffe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffe8:	69f8      	ldr	r0, [r7, #28]
 800ffea:	f7ff f883 	bl	800f0f4 <tcp_oos_insert_segment>
                  }
                  break;
 800ffee:	e0e2      	b.n	80101b6 <tcp_receive+0xeba>
 800fff0:	20004b14 	.word	0x20004b14
 800fff4:	20004b11 	.word	0x20004b11
 800fff8:	20004ae4 	.word	0x20004ae4
 800fffc:	20004b04 	.word	0x20004b04
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	f040 80c6 	bne.w	801019a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801000e:	4b80      	ldr	r3, [pc, #512]	; (8010210 <tcp_receive+0xf14>)
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801001a:	2b00      	cmp	r3, #0
 801001c:	f340 80bd 	ble.w	801019a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	899b      	ldrh	r3, [r3, #12]
 8010026:	b29b      	uxth	r3, r3
 8010028:	4618      	mov	r0, r3
 801002a:	f7fa fa11 	bl	800a450 <lwip_htons>
 801002e:	4603      	mov	r3, r0
 8010030:	b2db      	uxtb	r3, r3
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	2b00      	cmp	r3, #0
 8010038:	f040 80bf 	bne.w	80101ba <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801003c:	4875      	ldr	r0, [pc, #468]	; (8010214 <tcp_receive+0xf18>)
 801003e:	f7fd fa3d 	bl	800d4bc <tcp_seg_copy>
 8010042:	4602      	mov	r2, r0
 8010044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010046:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	f000 80b6 	beq.w	80101be <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801005a:	8912      	ldrh	r2, [r2, #8]
 801005c:	441a      	add	r2, r3
 801005e:	4b6c      	ldr	r3, [pc, #432]	; (8010210 <tcp_receive+0xf14>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	dd12      	ble.n	801008e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010068:	4b69      	ldr	r3, [pc, #420]	; (8010210 <tcp_receive+0xf14>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	b29a      	uxth	r2, r3
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	b29b      	uxth	r3, r3
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	b29a      	uxth	r2, r3
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801007e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010080:	685a      	ldr	r2, [r3, #4]
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	891b      	ldrh	r3, [r3, #8]
 8010086:	4619      	mov	r1, r3
 8010088:	4610      	mov	r0, r2
 801008a:	f7fb fc03 	bl	800b894 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801008e:	4b62      	ldr	r3, [pc, #392]	; (8010218 <tcp_receive+0xf1c>)
 8010090:	881b      	ldrh	r3, [r3, #0]
 8010092:	461a      	mov	r2, r3
 8010094:	4b5e      	ldr	r3, [pc, #376]	; (8010210 <tcp_receive+0xf14>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	441a      	add	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009e:	6879      	ldr	r1, [r7, #4]
 80100a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100a2:	440b      	add	r3, r1
 80100a4:	1ad3      	subs	r3, r2, r3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f340 8089 	ble.w	80101be <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80100ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	899b      	ldrh	r3, [r3, #12]
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fa f9ca 	bl	800a450 <lwip_htons>
 80100bc:	4603      	mov	r3, r0
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d022      	beq.n	801010e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	899b      	ldrh	r3, [r3, #12]
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	b21b      	sxth	r3, r3
 80100d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100d8:	b21c      	sxth	r4, r3
 80100da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	68db      	ldr	r3, [r3, #12]
 80100e0:	899b      	ldrh	r3, [r3, #12]
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fa f9b3 	bl	800a450 <lwip_htons>
 80100ea:	4603      	mov	r3, r0
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fa f9aa 	bl	800a450 <lwip_htons>
 80100fc:	4603      	mov	r3, r0
 80100fe:	b21b      	sxth	r3, r3
 8010100:	4323      	orrs	r3, r4
 8010102:	b21a      	sxth	r2, r3
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	68db      	ldr	r3, [r3, #12]
 801010a:	b292      	uxth	r2, r2
 801010c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010112:	b29a      	uxth	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010118:	4413      	add	r3, r2
 801011a:	b299      	uxth	r1, r3
 801011c:	4b3c      	ldr	r3, [pc, #240]	; (8010210 <tcp_receive+0xf14>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	b29a      	uxth	r2, r3
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	1a8a      	subs	r2, r1, r2
 8010128:	b292      	uxth	r2, r2
 801012a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801012c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	685a      	ldr	r2, [r3, #4]
 8010132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	891b      	ldrh	r3, [r3, #8]
 8010138:	4619      	mov	r1, r3
 801013a:	4610      	mov	r0, r2
 801013c:	f7fb fbaa 	bl	800b894 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	891c      	ldrh	r4, [r3, #8]
 8010146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	899b      	ldrh	r3, [r3, #12]
 801014e:	b29b      	uxth	r3, r3
 8010150:	4618      	mov	r0, r3
 8010152:	f7fa f97d 	bl	800a450 <lwip_htons>
 8010156:	4603      	mov	r3, r0
 8010158:	b2db      	uxtb	r3, r3
 801015a:	f003 0303 	and.w	r3, r3, #3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <tcp_receive+0xe6a>
 8010162:	2301      	movs	r3, #1
 8010164:	e000      	b.n	8010168 <tcp_receive+0xe6c>
 8010166:	2300      	movs	r3, #0
 8010168:	4423      	add	r3, r4
 801016a:	b29a      	uxth	r2, r3
 801016c:	4b2a      	ldr	r3, [pc, #168]	; (8010218 <tcp_receive+0xf1c>)
 801016e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010170:	4b29      	ldr	r3, [pc, #164]	; (8010218 <tcp_receive+0xf1c>)
 8010172:	881b      	ldrh	r3, [r3, #0]
 8010174:	461a      	mov	r2, r3
 8010176:	4b26      	ldr	r3, [pc, #152]	; (8010210 <tcp_receive+0xf14>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	441a      	add	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010180:	6879      	ldr	r1, [r7, #4]
 8010182:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010184:	440b      	add	r3, r1
 8010186:	429a      	cmp	r2, r3
 8010188:	d019      	beq.n	80101be <tcp_receive+0xec2>
 801018a:	4b24      	ldr	r3, [pc, #144]	; (801021c <tcp_receive+0xf20>)
 801018c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010190:	4923      	ldr	r1, [pc, #140]	; (8010220 <tcp_receive+0xf24>)
 8010192:	4824      	ldr	r0, [pc, #144]	; (8010224 <tcp_receive+0xf28>)
 8010194:	f005 fa74 	bl	8015680 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010198:	e011      	b.n	80101be <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801019a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	63bb      	str	r3, [r7, #56]	; 0x38
 80101a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f47f aea4 	bne.w	800fef0 <tcp_receive+0xbf4>
 80101a8:	e00a      	b.n	80101c0 <tcp_receive+0xec4>
                break;
 80101aa:	bf00      	nop
 80101ac:	e008      	b.n	80101c0 <tcp_receive+0xec4>
                break;
 80101ae:	bf00      	nop
 80101b0:	e006      	b.n	80101c0 <tcp_receive+0xec4>
                  break;
 80101b2:	bf00      	nop
 80101b4:	e004      	b.n	80101c0 <tcp_receive+0xec4>
                  break;
 80101b6:	bf00      	nop
 80101b8:	e002      	b.n	80101c0 <tcp_receive+0xec4>
                  break;
 80101ba:	bf00      	nop
 80101bc:	e000      	b.n	80101c0 <tcp_receive+0xec4>
                break;
 80101be:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f001 fe9b 	bl	8011efc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80101c6:	e003      	b.n	80101d0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f001 fe97 	bl	8011efc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101ce:	e01a      	b.n	8010206 <tcp_receive+0xf0a>
 80101d0:	e019      	b.n	8010206 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101d2:	4b0f      	ldr	r3, [pc, #60]	; (8010210 <tcp_receive+0xf14>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	db0a      	blt.n	80101f6 <tcp_receive+0xefa>
 80101e0:	4b0b      	ldr	r3, [pc, #44]	; (8010210 <tcp_receive+0xf14>)
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e8:	6879      	ldr	r1, [r7, #4]
 80101ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101ec:	440b      	add	r3, r1
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	3301      	adds	r3, #1
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	dd07      	ble.n	8010206 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	8b5b      	ldrh	r3, [r3, #26]
 80101fa:	f043 0302 	orr.w	r3, r3, #2
 80101fe:	b29a      	uxth	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010204:	e7ff      	b.n	8010206 <tcp_receive+0xf0a>
 8010206:	bf00      	nop
 8010208:	3750      	adds	r7, #80	; 0x50
 801020a:	46bd      	mov	sp, r7
 801020c:	bdb0      	pop	{r4, r5, r7, pc}
 801020e:	bf00      	nop
 8010210:	20004b04 	.word	0x20004b04
 8010214:	20004ae4 	.word	0x20004ae4
 8010218:	20004b0e 	.word	0x20004b0e
 801021c:	08018168 	.word	0x08018168
 8010220:	08018510 	.word	0x08018510
 8010224:	080181b4 	.word	0x080181b4

08010228 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801022e:	4b15      	ldr	r3, [pc, #84]	; (8010284 <tcp_get_next_optbyte+0x5c>)
 8010230:	881b      	ldrh	r3, [r3, #0]
 8010232:	1c5a      	adds	r2, r3, #1
 8010234:	b291      	uxth	r1, r2
 8010236:	4a13      	ldr	r2, [pc, #76]	; (8010284 <tcp_get_next_optbyte+0x5c>)
 8010238:	8011      	strh	r1, [r2, #0]
 801023a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801023c:	4b12      	ldr	r3, [pc, #72]	; (8010288 <tcp_get_next_optbyte+0x60>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d004      	beq.n	801024e <tcp_get_next_optbyte+0x26>
 8010244:	4b11      	ldr	r3, [pc, #68]	; (801028c <tcp_get_next_optbyte+0x64>)
 8010246:	881b      	ldrh	r3, [r3, #0]
 8010248:	88fa      	ldrh	r2, [r7, #6]
 801024a:	429a      	cmp	r2, r3
 801024c:	d208      	bcs.n	8010260 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801024e:	4b10      	ldr	r3, [pc, #64]	; (8010290 <tcp_get_next_optbyte+0x68>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3314      	adds	r3, #20
 8010254:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010256:	88fb      	ldrh	r3, [r7, #6]
 8010258:	683a      	ldr	r2, [r7, #0]
 801025a:	4413      	add	r3, r2
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	e00b      	b.n	8010278 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010260:	88fb      	ldrh	r3, [r7, #6]
 8010262:	b2da      	uxtb	r2, r3
 8010264:	4b09      	ldr	r3, [pc, #36]	; (801028c <tcp_get_next_optbyte+0x64>)
 8010266:	881b      	ldrh	r3, [r3, #0]
 8010268:	b2db      	uxtb	r3, r3
 801026a:	1ad3      	subs	r3, r2, r3
 801026c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801026e:	4b06      	ldr	r3, [pc, #24]	; (8010288 <tcp_get_next_optbyte+0x60>)
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	797b      	ldrb	r3, [r7, #5]
 8010274:	4413      	add	r3, r2
 8010276:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010278:	4618      	mov	r0, r3
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	20004b00 	.word	0x20004b00
 8010288:	20004afc 	.word	0x20004afc
 801028c:	20004afa 	.word	0x20004afa
 8010290:	20004af4 	.word	0x20004af4

08010294 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <tcp_parseopt+0x1c>
 80102a2:	4b31      	ldr	r3, [pc, #196]	; (8010368 <tcp_parseopt+0xd4>)
 80102a4:	f240 727d 	movw	r2, #1917	; 0x77d
 80102a8:	4930      	ldr	r1, [pc, #192]	; (801036c <tcp_parseopt+0xd8>)
 80102aa:	4831      	ldr	r0, [pc, #196]	; (8010370 <tcp_parseopt+0xdc>)
 80102ac:	f005 f9e8 	bl	8015680 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80102b0:	4b30      	ldr	r3, [pc, #192]	; (8010374 <tcp_parseopt+0xe0>)
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d053      	beq.n	8010360 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102b8:	4b2f      	ldr	r3, [pc, #188]	; (8010378 <tcp_parseopt+0xe4>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	801a      	strh	r2, [r3, #0]
 80102be:	e043      	b.n	8010348 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80102c0:	f7ff ffb2 	bl	8010228 <tcp_get_next_optbyte>
 80102c4:	4603      	mov	r3, r0
 80102c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80102c8:	7bfb      	ldrb	r3, [r7, #15]
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d03c      	beq.n	8010348 <tcp_parseopt+0xb4>
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d002      	beq.n	80102d8 <tcp_parseopt+0x44>
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d03f      	beq.n	8010356 <tcp_parseopt+0xc2>
 80102d6:	e026      	b.n	8010326 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102d8:	f7ff ffa6 	bl	8010228 <tcp_get_next_optbyte>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b04      	cmp	r3, #4
 80102e0:	d13b      	bne.n	801035a <tcp_parseopt+0xc6>
 80102e2:	4b25      	ldr	r3, [pc, #148]	; (8010378 <tcp_parseopt+0xe4>)
 80102e4:	881b      	ldrh	r3, [r3, #0]
 80102e6:	3302      	adds	r3, #2
 80102e8:	4a22      	ldr	r2, [pc, #136]	; (8010374 <tcp_parseopt+0xe0>)
 80102ea:	8812      	ldrh	r2, [r2, #0]
 80102ec:	4293      	cmp	r3, r2
 80102ee:	dc34      	bgt.n	801035a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80102f0:	f7ff ff9a 	bl	8010228 <tcp_get_next_optbyte>
 80102f4:	4603      	mov	r3, r0
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	021b      	lsls	r3, r3, #8
 80102fa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80102fc:	f7ff ff94 	bl	8010228 <tcp_get_next_optbyte>
 8010300:	4603      	mov	r3, r0
 8010302:	b29a      	uxth	r2, r3
 8010304:	89bb      	ldrh	r3, [r7, #12]
 8010306:	4313      	orrs	r3, r2
 8010308:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801030a:	89bb      	ldrh	r3, [r7, #12]
 801030c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010310:	d804      	bhi.n	801031c <tcp_parseopt+0x88>
 8010312:	89bb      	ldrh	r3, [r7, #12]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d001      	beq.n	801031c <tcp_parseopt+0x88>
 8010318:	89ba      	ldrh	r2, [r7, #12]
 801031a:	e001      	b.n	8010320 <tcp_parseopt+0x8c>
 801031c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010324:	e010      	b.n	8010348 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010326:	f7ff ff7f 	bl	8010228 <tcp_get_next_optbyte>
 801032a:	4603      	mov	r3, r0
 801032c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801032e:	7afb      	ldrb	r3, [r7, #11]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d914      	bls.n	801035e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010334:	7afb      	ldrb	r3, [r7, #11]
 8010336:	b29a      	uxth	r2, r3
 8010338:	4b0f      	ldr	r3, [pc, #60]	; (8010378 <tcp_parseopt+0xe4>)
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	4413      	add	r3, r2
 801033e:	b29b      	uxth	r3, r3
 8010340:	3b02      	subs	r3, #2
 8010342:	b29a      	uxth	r2, r3
 8010344:	4b0c      	ldr	r3, [pc, #48]	; (8010378 <tcp_parseopt+0xe4>)
 8010346:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010348:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <tcp_parseopt+0xe4>)
 801034a:	881a      	ldrh	r2, [r3, #0]
 801034c:	4b09      	ldr	r3, [pc, #36]	; (8010374 <tcp_parseopt+0xe0>)
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	429a      	cmp	r2, r3
 8010352:	d3b5      	bcc.n	80102c0 <tcp_parseopt+0x2c>
 8010354:	e004      	b.n	8010360 <tcp_parseopt+0xcc>
          return;
 8010356:	bf00      	nop
 8010358:	e002      	b.n	8010360 <tcp_parseopt+0xcc>
            return;
 801035a:	bf00      	nop
 801035c:	e000      	b.n	8010360 <tcp_parseopt+0xcc>
            return;
 801035e:	bf00      	nop
      }
    }
  }
}
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	08018168 	.word	0x08018168
 801036c:	080185cc 	.word	0x080185cc
 8010370:	080181b4 	.word	0x080181b4
 8010374:	20004af8 	.word	0x20004af8
 8010378:	20004b00 	.word	0x20004b00

0801037c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801037c:	b480      	push	{r7}
 801037e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010380:	4b05      	ldr	r3, [pc, #20]	; (8010398 <tcp_trigger_input_pcb_close+0x1c>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	f043 0310 	orr.w	r3, r3, #16
 8010388:	b2da      	uxtb	r2, r3
 801038a:	4b03      	ldr	r3, [pc, #12]	; (8010398 <tcp_trigger_input_pcb_close+0x1c>)
 801038c:	701a      	strb	r2, [r3, #0]
}
 801038e:	bf00      	nop
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr
 8010398:	20004b11 	.word	0x20004b11

0801039c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d00a      	beq.n	80103c4 <tcp_route+0x28>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	7a1b      	ldrb	r3, [r3, #8]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d006      	beq.n	80103c4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	7a1b      	ldrb	r3, [r3, #8]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fb f866 	bl	800b48c <netif_get_by_index>
 80103c0:	4603      	mov	r3, r0
 80103c2:	e003      	b.n	80103cc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f003 fc5b 	bl	8013c80 <ip4_route>
 80103ca:	4603      	mov	r3, r0
  }
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80103d4:	b590      	push	{r4, r7, lr}
 80103d6:	b087      	sub	sp, #28
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	603b      	str	r3, [r7, #0]
 80103e0:	4613      	mov	r3, r2
 80103e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d105      	bne.n	80103f6 <tcp_create_segment+0x22>
 80103ea:	4b44      	ldr	r3, [pc, #272]	; (80104fc <tcp_create_segment+0x128>)
 80103ec:	22a3      	movs	r2, #163	; 0xa3
 80103ee:	4944      	ldr	r1, [pc, #272]	; (8010500 <tcp_create_segment+0x12c>)
 80103f0:	4844      	ldr	r0, [pc, #272]	; (8010504 <tcp_create_segment+0x130>)
 80103f2:	f005 f945 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d105      	bne.n	8010408 <tcp_create_segment+0x34>
 80103fc:	4b3f      	ldr	r3, [pc, #252]	; (80104fc <tcp_create_segment+0x128>)
 80103fe:	22a4      	movs	r2, #164	; 0xa4
 8010400:	4941      	ldr	r1, [pc, #260]	; (8010508 <tcp_create_segment+0x134>)
 8010402:	4840      	ldr	r0, [pc, #256]	; (8010504 <tcp_create_segment+0x130>)
 8010404:	f005 f93c 	bl	8015680 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	b2db      	uxtb	r3, r3
 8010410:	f003 0304 	and.w	r3, r3, #4
 8010414:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010416:	2003      	movs	r0, #3
 8010418:	f7fa fcd0 	bl	800adbc <memp_malloc>
 801041c:	6138      	str	r0, [r7, #16]
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d104      	bne.n	801042e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010424:	68b8      	ldr	r0, [r7, #8]
 8010426:	f7fb fbbb 	bl	800bba0 <pbuf_free>
    return NULL;
 801042a:	2300      	movs	r3, #0
 801042c:	e061      	b.n	80104f2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010434:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	2200      	movs	r2, #0
 801043a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	891a      	ldrh	r2, [r3, #8]
 8010446:	7dfb      	ldrb	r3, [r7, #23]
 8010448:	b29b      	uxth	r3, r3
 801044a:	429a      	cmp	r2, r3
 801044c:	d205      	bcs.n	801045a <tcp_create_segment+0x86>
 801044e:	4b2b      	ldr	r3, [pc, #172]	; (80104fc <tcp_create_segment+0x128>)
 8010450:	22b0      	movs	r2, #176	; 0xb0
 8010452:	492e      	ldr	r1, [pc, #184]	; (801050c <tcp_create_segment+0x138>)
 8010454:	482b      	ldr	r0, [pc, #172]	; (8010504 <tcp_create_segment+0x130>)
 8010456:	f005 f913 	bl	8015680 <iprintf>
  seg->len = p->tot_len - optlen;
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	891a      	ldrh	r2, [r3, #8]
 801045e:	7dfb      	ldrb	r3, [r7, #23]
 8010460:	b29b      	uxth	r3, r3
 8010462:	1ad3      	subs	r3, r2, r3
 8010464:	b29a      	uxth	r2, r3
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801046a:	2114      	movs	r1, #20
 801046c:	68b8      	ldr	r0, [r7, #8]
 801046e:	f7fb fb01 	bl	800ba74 <pbuf_add_header>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d004      	beq.n	8010482 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010478:	6938      	ldr	r0, [r7, #16]
 801047a:	f7fd f807 	bl	800d48c <tcp_seg_free>
    return NULL;
 801047e:	2300      	movs	r3, #0
 8010480:	e037      	b.n	80104f2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	685a      	ldr	r2, [r3, #4]
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	8ada      	ldrh	r2, [r3, #22]
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	68dc      	ldr	r4, [r3, #12]
 8010494:	4610      	mov	r0, r2
 8010496:	f7f9 ffdb 	bl	800a450 <lwip_htons>
 801049a:	4603      	mov	r3, r0
 801049c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	8b1a      	ldrh	r2, [r3, #24]
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	68dc      	ldr	r4, [r3, #12]
 80104a6:	4610      	mov	r0, r2
 80104a8:	f7f9 ffd2 	bl	800a450 <lwip_htons>
 80104ac:	4603      	mov	r3, r0
 80104ae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	68dc      	ldr	r4, [r3, #12]
 80104b4:	6838      	ldr	r0, [r7, #0]
 80104b6:	f7f9 ffe0 	bl	800a47a <lwip_htonl>
 80104ba:	4603      	mov	r3, r0
 80104bc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80104be:	7dfb      	ldrb	r3, [r7, #23]
 80104c0:	089b      	lsrs	r3, r3, #2
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	3305      	adds	r3, #5
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	031b      	lsls	r3, r3, #12
 80104cc:	b29a      	uxth	r2, r3
 80104ce:	79fb      	ldrb	r3, [r7, #7]
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	4313      	orrs	r3, r2
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	68dc      	ldr	r4, [r3, #12]
 80104da:	4610      	mov	r0, r2
 80104dc:	f7f9 ffb8 	bl	800a450 <lwip_htons>
 80104e0:	4603      	mov	r3, r0
 80104e2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	2200      	movs	r2, #0
 80104ea:	749a      	strb	r2, [r3, #18]
 80104ec:	2200      	movs	r2, #0
 80104ee:	74da      	strb	r2, [r3, #19]
  return seg;
 80104f0:	693b      	ldr	r3, [r7, #16]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	371c      	adds	r7, #28
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd90      	pop	{r4, r7, pc}
 80104fa:	bf00      	nop
 80104fc:	080185e8 	.word	0x080185e8
 8010500:	0801861c 	.word	0x0801861c
 8010504:	0801863c 	.word	0x0801863c
 8010508:	08018664 	.word	0x08018664
 801050c:	08018688 	.word	0x08018688

08010510 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	607b      	str	r3, [r7, #4]
 8010518:	4603      	mov	r3, r0
 801051a:	73fb      	strb	r3, [r7, #15]
 801051c:	460b      	mov	r3, r1
 801051e:	81bb      	strh	r3, [r7, #12]
 8010520:	4613      	mov	r3, r2
 8010522:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010524:	89bb      	ldrh	r3, [r7, #12]
 8010526:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d105      	bne.n	801053a <tcp_pbuf_prealloc+0x2a>
 801052e:	4b30      	ldr	r3, [pc, #192]	; (80105f0 <tcp_pbuf_prealloc+0xe0>)
 8010530:	22e8      	movs	r2, #232	; 0xe8
 8010532:	4930      	ldr	r1, [pc, #192]	; (80105f4 <tcp_pbuf_prealloc+0xe4>)
 8010534:	4830      	ldr	r0, [pc, #192]	; (80105f8 <tcp_pbuf_prealloc+0xe8>)
 8010536:	f005 f8a3 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801053a:	6a3b      	ldr	r3, [r7, #32]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d105      	bne.n	801054c <tcp_pbuf_prealloc+0x3c>
 8010540:	4b2b      	ldr	r3, [pc, #172]	; (80105f0 <tcp_pbuf_prealloc+0xe0>)
 8010542:	22e9      	movs	r2, #233	; 0xe9
 8010544:	492d      	ldr	r1, [pc, #180]	; (80105fc <tcp_pbuf_prealloc+0xec>)
 8010546:	482c      	ldr	r0, [pc, #176]	; (80105f8 <tcp_pbuf_prealloc+0xe8>)
 8010548:	f005 f89a 	bl	8015680 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801054c:	89ba      	ldrh	r2, [r7, #12]
 801054e:	897b      	ldrh	r3, [r7, #10]
 8010550:	429a      	cmp	r2, r3
 8010552:	d221      	bcs.n	8010598 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010554:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010558:	f003 0302 	and.w	r3, r3, #2
 801055c:	2b00      	cmp	r3, #0
 801055e:	d111      	bne.n	8010584 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010560:	6a3b      	ldr	r3, [r7, #32]
 8010562:	8b5b      	ldrh	r3, [r3, #26]
 8010564:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010568:	2b00      	cmp	r3, #0
 801056a:	d115      	bne.n	8010598 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801056c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010570:	2b00      	cmp	r3, #0
 8010572:	d007      	beq.n	8010584 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010574:	6a3b      	ldr	r3, [r7, #32]
 8010576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010578:	2b00      	cmp	r3, #0
 801057a:	d103      	bne.n	8010584 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801057c:	6a3b      	ldr	r3, [r7, #32]
 801057e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010580:	2b00      	cmp	r3, #0
 8010582:	d009      	beq.n	8010598 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010584:	89bb      	ldrh	r3, [r7, #12]
 8010586:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801058a:	f023 0203 	bic.w	r2, r3, #3
 801058e:	897b      	ldrh	r3, [r7, #10]
 8010590:	4293      	cmp	r3, r2
 8010592:	bf28      	it	cs
 8010594:	4613      	movcs	r3, r2
 8010596:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010598:	8af9      	ldrh	r1, [r7, #22]
 801059a:	7bfb      	ldrb	r3, [r7, #15]
 801059c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fb f81d 	bl	800b5e0 <pbuf_alloc>
 80105a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d101      	bne.n	80105b2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80105ae:	2300      	movs	r3, #0
 80105b0:	e019      	b.n	80105e6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d006      	beq.n	80105c8 <tcp_pbuf_prealloc+0xb8>
 80105ba:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <tcp_pbuf_prealloc+0xe0>)
 80105bc:	f240 120b 	movw	r2, #267	; 0x10b
 80105c0:	490f      	ldr	r1, [pc, #60]	; (8010600 <tcp_pbuf_prealloc+0xf0>)
 80105c2:	480d      	ldr	r0, [pc, #52]	; (80105f8 <tcp_pbuf_prealloc+0xe8>)
 80105c4:	f005 f85c 	bl	8015680 <iprintf>
  *oversize = p->len - length;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	895a      	ldrh	r2, [r3, #10]
 80105cc:	89bb      	ldrh	r3, [r7, #12]
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	89ba      	ldrh	r2, [r7, #12]
 80105da:	811a      	strh	r2, [r3, #8]
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	891a      	ldrh	r2, [r3, #8]
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	815a      	strh	r2, [r3, #10]
  return p;
 80105e4:	693b      	ldr	r3, [r7, #16]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	080185e8 	.word	0x080185e8
 80105f4:	080186a0 	.word	0x080186a0
 80105f8:	0801863c 	.word	0x0801863c
 80105fc:	080186c4 	.word	0x080186c4
 8010600:	080186e4 	.word	0x080186e4

08010604 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d106      	bne.n	8010624 <tcp_write_checks+0x20>
 8010616:	4b33      	ldr	r3, [pc, #204]	; (80106e4 <tcp_write_checks+0xe0>)
 8010618:	f240 1233 	movw	r2, #307	; 0x133
 801061c:	4932      	ldr	r1, [pc, #200]	; (80106e8 <tcp_write_checks+0xe4>)
 801061e:	4833      	ldr	r0, [pc, #204]	; (80106ec <tcp_write_checks+0xe8>)
 8010620:	f005 f82e 	bl	8015680 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	7d1b      	ldrb	r3, [r3, #20]
 8010628:	2b04      	cmp	r3, #4
 801062a:	d00e      	beq.n	801064a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010630:	2b07      	cmp	r3, #7
 8010632:	d00a      	beq.n	801064a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010638:	2b02      	cmp	r3, #2
 801063a:	d006      	beq.n	801064a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010640:	2b03      	cmp	r3, #3
 8010642:	d002      	beq.n	801064a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010644:	f06f 030a 	mvn.w	r3, #10
 8010648:	e048      	b.n	80106dc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801064a:	887b      	ldrh	r3, [r7, #2]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d101      	bne.n	8010654 <tcp_write_checks+0x50>
    return ERR_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	e043      	b.n	80106dc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801065a:	887a      	ldrh	r2, [r7, #2]
 801065c:	429a      	cmp	r2, r3
 801065e:	d909      	bls.n	8010674 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	8b5b      	ldrh	r3, [r3, #26]
 8010664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010668:	b29a      	uxth	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801066e:	f04f 33ff 	mov.w	r3, #4294967295
 8010672:	e033      	b.n	80106dc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801067a:	2b08      	cmp	r3, #8
 801067c:	d909      	bls.n	8010692 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	8b5b      	ldrh	r3, [r3, #26]
 8010682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010686:	b29a      	uxth	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801068c:	f04f 33ff 	mov.w	r3, #4294967295
 8010690:	e024      	b.n	80106dc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00f      	beq.n	80106bc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d11a      	bne.n	80106da <tcp_write_checks+0xd6>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d116      	bne.n	80106da <tcp_write_checks+0xd6>
 80106ac:	4b0d      	ldr	r3, [pc, #52]	; (80106e4 <tcp_write_checks+0xe0>)
 80106ae:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80106b2:	490f      	ldr	r1, [pc, #60]	; (80106f0 <tcp_write_checks+0xec>)
 80106b4:	480d      	ldr	r0, [pc, #52]	; (80106ec <tcp_write_checks+0xe8>)
 80106b6:	f004 ffe3 	bl	8015680 <iprintf>
 80106ba:	e00e      	b.n	80106da <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d103      	bne.n	80106cc <tcp_write_checks+0xc8>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d006      	beq.n	80106da <tcp_write_checks+0xd6>
 80106cc:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <tcp_write_checks+0xe0>)
 80106ce:	f240 1259 	movw	r2, #345	; 0x159
 80106d2:	4908      	ldr	r1, [pc, #32]	; (80106f4 <tcp_write_checks+0xf0>)
 80106d4:	4805      	ldr	r0, [pc, #20]	; (80106ec <tcp_write_checks+0xe8>)
 80106d6:	f004 ffd3 	bl	8015680 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	080185e8 	.word	0x080185e8
 80106e8:	080186f8 	.word	0x080186f8
 80106ec:	0801863c 	.word	0x0801863c
 80106f0:	08018718 	.word	0x08018718
 80106f4:	08018754 	.word	0x08018754

080106f8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80106f8:	b590      	push	{r4, r7, lr}
 80106fa:	b09b      	sub	sp, #108	; 0x6c
 80106fc:	af04      	add	r7, sp, #16
 80106fe:	60f8      	str	r0, [r7, #12]
 8010700:	60b9      	str	r1, [r7, #8]
 8010702:	4611      	mov	r1, r2
 8010704:	461a      	mov	r2, r3
 8010706:	460b      	mov	r3, r1
 8010708:	80fb      	strh	r3, [r7, #6]
 801070a:	4613      	mov	r3, r2
 801070c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801070e:	2300      	movs	r3, #0
 8010710:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010712:	2300      	movs	r3, #0
 8010714:	653b      	str	r3, [r7, #80]	; 0x50
 8010716:	2300      	movs	r3, #0
 8010718:	64fb      	str	r3, [r7, #76]	; 0x4c
 801071a:	2300      	movs	r3, #0
 801071c:	64bb      	str	r3, [r7, #72]	; 0x48
 801071e:	2300      	movs	r3, #0
 8010720:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010722:	2300      	movs	r3, #0
 8010724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010728:	2300      	movs	r3, #0
 801072a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801072e:	2300      	movs	r3, #0
 8010730:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010732:	2300      	movs	r3, #0
 8010734:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d109      	bne.n	8010754 <tcp_write+0x5c>
 8010740:	4ba5      	ldr	r3, [pc, #660]	; (80109d8 <tcp_write+0x2e0>)
 8010742:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010746:	49a5      	ldr	r1, [pc, #660]	; (80109dc <tcp_write+0x2e4>)
 8010748:	48a5      	ldr	r0, [pc, #660]	; (80109e0 <tcp_write+0x2e8>)
 801074a:	f004 ff99 	bl	8015680 <iprintf>
 801074e:	f06f 030f 	mvn.w	r3, #15
 8010752:	e32c      	b.n	8010dae <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801075a:	085b      	lsrs	r3, r3, #1
 801075c:	b29a      	uxth	r2, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010762:	4293      	cmp	r3, r2
 8010764:	bf28      	it	cs
 8010766:	4613      	movcs	r3, r2
 8010768:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801076a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801076c:	2b00      	cmp	r3, #0
 801076e:	d102      	bne.n	8010776 <tcp_write+0x7e>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010774:	e000      	b.n	8010778 <tcp_write+0x80>
 8010776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010778:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d109      	bne.n	8010794 <tcp_write+0x9c>
 8010780:	4b95      	ldr	r3, [pc, #596]	; (80109d8 <tcp_write+0x2e0>)
 8010782:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010786:	4997      	ldr	r1, [pc, #604]	; (80109e4 <tcp_write+0x2ec>)
 8010788:	4895      	ldr	r0, [pc, #596]	; (80109e0 <tcp_write+0x2e8>)
 801078a:	f004 ff79 	bl	8015680 <iprintf>
 801078e:	f06f 030f 	mvn.w	r3, #15
 8010792:	e30c      	b.n	8010dae <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010794:	88fb      	ldrh	r3, [r7, #6]
 8010796:	4619      	mov	r1, r3
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f7ff ff33 	bl	8010604 <tcp_write_checks>
 801079e:	4603      	mov	r3, r0
 80107a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80107a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d002      	beq.n	80107b2 <tcp_write+0xba>
    return err;
 80107ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80107b0:	e2fd      	b.n	8010dae <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80107bc:	2300      	movs	r3, #0
 80107be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f000 80f7 	beq.w	80109ba <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107d0:	653b      	str	r3, [r7, #80]	; 0x50
 80107d2:	e002      	b.n	80107da <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80107d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1f8      	bne.n	80107d4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80107e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107e4:	7a9b      	ldrb	r3, [r3, #10]
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	f003 0304 	and.w	r3, r3, #4
 80107ee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80107f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107f4:	891b      	ldrh	r3, [r3, #8]
 80107f6:	4619      	mov	r1, r3
 80107f8:	8c3b      	ldrh	r3, [r7, #32]
 80107fa:	440b      	add	r3, r1
 80107fc:	429a      	cmp	r2, r3
 80107fe:	da06      	bge.n	801080e <tcp_write+0x116>
 8010800:	4b75      	ldr	r3, [pc, #468]	; (80109d8 <tcp_write+0x2e0>)
 8010802:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010806:	4978      	ldr	r1, [pc, #480]	; (80109e8 <tcp_write+0x2f0>)
 8010808:	4875      	ldr	r0, [pc, #468]	; (80109e0 <tcp_write+0x2e8>)
 801080a:	f004 ff39 	bl	8015680 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801080e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010810:	891a      	ldrh	r2, [r3, #8]
 8010812:	8c3b      	ldrh	r3, [r7, #32]
 8010814:	4413      	add	r3, r2
 8010816:	b29b      	uxth	r3, r3
 8010818:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010824:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010826:	8a7b      	ldrh	r3, [r7, #18]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d027      	beq.n	801087c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801082c:	8a7b      	ldrh	r3, [r7, #18]
 801082e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010830:	429a      	cmp	r2, r3
 8010832:	d206      	bcs.n	8010842 <tcp_write+0x14a>
 8010834:	4b68      	ldr	r3, [pc, #416]	; (80109d8 <tcp_write+0x2e0>)
 8010836:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801083a:	496c      	ldr	r1, [pc, #432]	; (80109ec <tcp_write+0x2f4>)
 801083c:	4868      	ldr	r0, [pc, #416]	; (80109e0 <tcp_write+0x2e8>)
 801083e:	f004 ff1f 	bl	8015680 <iprintf>
      seg = last_unsent;
 8010842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010844:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010846:	8a7b      	ldrh	r3, [r7, #18]
 8010848:	88fa      	ldrh	r2, [r7, #6]
 801084a:	429a      	cmp	r2, r3
 801084c:	d901      	bls.n	8010852 <tcp_write+0x15a>
 801084e:	8a7b      	ldrh	r3, [r7, #18]
 8010850:	e000      	b.n	8010854 <tcp_write+0x15c>
 8010852:	88fb      	ldrh	r3, [r7, #6]
 8010854:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010856:	4293      	cmp	r3, r2
 8010858:	bfa8      	it	ge
 801085a:	4613      	movge	r3, r2
 801085c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801085e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010862:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010864:	4413      	add	r3, r2
 8010866:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801086a:	8a7a      	ldrh	r2, [r7, #18]
 801086c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	b29b      	uxth	r3, r3
 8010872:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010874:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010876:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801087c:	8a7b      	ldrh	r3, [r7, #18]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00b      	beq.n	801089a <tcp_write+0x1a2>
 8010882:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010886:	88fb      	ldrh	r3, [r7, #6]
 8010888:	429a      	cmp	r2, r3
 801088a:	d006      	beq.n	801089a <tcp_write+0x1a2>
 801088c:	4b52      	ldr	r3, [pc, #328]	; (80109d8 <tcp_write+0x2e0>)
 801088e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010892:	4957      	ldr	r1, [pc, #348]	; (80109f0 <tcp_write+0x2f8>)
 8010894:	4852      	ldr	r0, [pc, #328]	; (80109e0 <tcp_write+0x2e8>)
 8010896:	f004 fef3 	bl	8015680 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801089a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801089e:	88fb      	ldrh	r3, [r7, #6]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	f080 8168 	bcs.w	8010b76 <tcp_write+0x47e>
 80108a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f000 8164 	beq.w	8010b76 <tcp_write+0x47e>
 80108ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108b0:	891b      	ldrh	r3, [r3, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	f000 815f 	beq.w	8010b76 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80108b8:	88fa      	ldrh	r2, [r7, #6]
 80108ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108be:	1ad2      	subs	r2, r2, r3
 80108c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80108c2:	4293      	cmp	r3, r2
 80108c4:	bfa8      	it	ge
 80108c6:	4613      	movge	r3, r2
 80108c8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80108ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108cc:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80108ce:	797b      	ldrb	r3, [r7, #5]
 80108d0:	f003 0301 	and.w	r3, r3, #1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d027      	beq.n	8010928 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80108d8:	f107 0012 	add.w	r0, r7, #18
 80108dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108de:	8bf9      	ldrh	r1, [r7, #30]
 80108e0:	2301      	movs	r3, #1
 80108e2:	9302      	str	r3, [sp, #8]
 80108e4:	797b      	ldrb	r3, [r7, #5]
 80108e6:	9301      	str	r3, [sp, #4]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	9300      	str	r3, [sp, #0]
 80108ec:	4603      	mov	r3, r0
 80108ee:	2000      	movs	r0, #0
 80108f0:	f7ff fe0e 	bl	8010510 <tcp_pbuf_prealloc>
 80108f4:	6578      	str	r0, [r7, #84]	; 0x54
 80108f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	f000 8226 	beq.w	8010d4a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80108fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010900:	6858      	ldr	r0, [r3, #4]
 8010902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	4413      	add	r3, r2
 801090a:	8bfa      	ldrh	r2, [r7, #30]
 801090c:	4619      	mov	r1, r3
 801090e:	f004 fe4a 	bl	80155a6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010912:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010914:	f7fb f9d2 	bl	800bcbc <pbuf_clen>
 8010918:	4603      	mov	r3, r0
 801091a:	461a      	mov	r2, r3
 801091c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010920:	4413      	add	r3, r2
 8010922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010926:	e041      	b.n	80109ac <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	637b      	str	r3, [r7, #52]	; 0x34
 801092e:	e002      	b.n	8010936 <tcp_write+0x23e>
 8010930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	637b      	str	r3, [r7, #52]	; 0x34
 8010936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1f8      	bne.n	8010930 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010940:	7b1b      	ldrb	r3, [r3, #12]
 8010942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d115      	bne.n	8010976 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010950:	8952      	ldrh	r2, [r2, #10]
 8010952:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010954:	68ba      	ldr	r2, [r7, #8]
 8010956:	429a      	cmp	r2, r3
 8010958:	d10d      	bne.n	8010976 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801095a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801095e:	2b00      	cmp	r3, #0
 8010960:	d006      	beq.n	8010970 <tcp_write+0x278>
 8010962:	4b1d      	ldr	r3, [pc, #116]	; (80109d8 <tcp_write+0x2e0>)
 8010964:	f240 2231 	movw	r2, #561	; 0x231
 8010968:	4922      	ldr	r1, [pc, #136]	; (80109f4 <tcp_write+0x2fc>)
 801096a:	481d      	ldr	r0, [pc, #116]	; (80109e0 <tcp_write+0x2e8>)
 801096c:	f004 fe88 	bl	8015680 <iprintf>
          extendlen = seglen;
 8010970:	8bfb      	ldrh	r3, [r7, #30]
 8010972:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010974:	e01a      	b.n	80109ac <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010976:	8bfb      	ldrh	r3, [r7, #30]
 8010978:	2201      	movs	r2, #1
 801097a:	4619      	mov	r1, r3
 801097c:	2000      	movs	r0, #0
 801097e:	f7fa fe2f 	bl	800b5e0 <pbuf_alloc>
 8010982:	6578      	str	r0, [r7, #84]	; 0x54
 8010984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 81e1 	beq.w	8010d4e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801098c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	441a      	add	r2, r3
 8010994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010996:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010998:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801099a:	f7fb f98f 	bl	800bcbc <pbuf_clen>
 801099e:	4603      	mov	r3, r0
 80109a0:	461a      	mov	r2, r3
 80109a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80109a6:	4413      	add	r3, r2
 80109a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80109ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109b0:	8bfb      	ldrh	r3, [r7, #30]
 80109b2:	4413      	add	r3, r2
 80109b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80109b8:	e0dd      	b.n	8010b76 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f000 80d8 	beq.w	8010b76 <tcp_write+0x47e>
 80109c6:	4b04      	ldr	r3, [pc, #16]	; (80109d8 <tcp_write+0x2e0>)
 80109c8:	f240 224b 	movw	r2, #587	; 0x24b
 80109cc:	490a      	ldr	r1, [pc, #40]	; (80109f8 <tcp_write+0x300>)
 80109ce:	4804      	ldr	r0, [pc, #16]	; (80109e0 <tcp_write+0x2e8>)
 80109d0:	f004 fe56 	bl	8015680 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80109d4:	e0cf      	b.n	8010b76 <tcp_write+0x47e>
 80109d6:	bf00      	nop
 80109d8:	080185e8 	.word	0x080185e8
 80109dc:	08018788 	.word	0x08018788
 80109e0:	0801863c 	.word	0x0801863c
 80109e4:	080187a0 	.word	0x080187a0
 80109e8:	080187d4 	.word	0x080187d4
 80109ec:	080187ec 	.word	0x080187ec
 80109f0:	0801880c 	.word	0x0801880c
 80109f4:	0801882c 	.word	0x0801882c
 80109f8:	08018858 	.word	0x08018858
    struct pbuf *p;
    u16_t left = len - pos;
 80109fc:	88fa      	ldrh	r2, [r7, #6]
 80109fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a02:	1ad3      	subs	r3, r2, r3
 8010a04:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010a06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010a12:	8b7a      	ldrh	r2, [r7, #26]
 8010a14:	8bbb      	ldrh	r3, [r7, #28]
 8010a16:	4293      	cmp	r3, r2
 8010a18:	bf28      	it	cs
 8010a1a:	4613      	movcs	r3, r2
 8010a1c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010a1e:	797b      	ldrb	r3, [r7, #5]
 8010a20:	f003 0301 	and.w	r3, r3, #1
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d036      	beq.n	8010a96 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010a28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	8b3b      	ldrh	r3, [r7, #24]
 8010a30:	4413      	add	r3, r2
 8010a32:	b299      	uxth	r1, r3
 8010a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	bf0c      	ite	eq
 8010a3a:	2301      	moveq	r3, #1
 8010a3c:	2300      	movne	r3, #0
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	f107 0012 	add.w	r0, r7, #18
 8010a44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010a46:	9302      	str	r3, [sp, #8]
 8010a48:	797b      	ldrb	r3, [r7, #5]
 8010a4a:	9301      	str	r3, [sp, #4]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	4603      	mov	r3, r0
 8010a52:	2036      	movs	r0, #54	; 0x36
 8010a54:	f7ff fd5c 	bl	8010510 <tcp_pbuf_prealloc>
 8010a58:	6338      	str	r0, [r7, #48]	; 0x30
 8010a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8178 	beq.w	8010d52 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a64:	895b      	ldrh	r3, [r3, #10]
 8010a66:	8b3a      	ldrh	r2, [r7, #24]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d906      	bls.n	8010a7a <tcp_write+0x382>
 8010a6c:	4b8c      	ldr	r3, [pc, #560]	; (8010ca0 <tcp_write+0x5a8>)
 8010a6e:	f240 2267 	movw	r2, #615	; 0x267
 8010a72:	498c      	ldr	r1, [pc, #560]	; (8010ca4 <tcp_write+0x5ac>)
 8010a74:	488c      	ldr	r0, [pc, #560]	; (8010ca8 <tcp_write+0x5b0>)
 8010a76:	f004 fe03 	bl	8015680 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7c:	685a      	ldr	r2, [r3, #4]
 8010a7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a82:	18d0      	adds	r0, r2, r3
 8010a84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a88:	68ba      	ldr	r2, [r7, #8]
 8010a8a:	4413      	add	r3, r2
 8010a8c:	8b3a      	ldrh	r2, [r7, #24]
 8010a8e:	4619      	mov	r1, r3
 8010a90:	f004 fd89 	bl	80155a6 <memcpy>
 8010a94:	e02f      	b.n	8010af6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010a96:	8a7b      	ldrh	r3, [r7, #18]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d006      	beq.n	8010aaa <tcp_write+0x3b2>
 8010a9c:	4b80      	ldr	r3, [pc, #512]	; (8010ca0 <tcp_write+0x5a8>)
 8010a9e:	f240 2271 	movw	r2, #625	; 0x271
 8010aa2:	4982      	ldr	r1, [pc, #520]	; (8010cac <tcp_write+0x5b4>)
 8010aa4:	4880      	ldr	r0, [pc, #512]	; (8010ca8 <tcp_write+0x5b0>)
 8010aa6:	f004 fdeb 	bl	8015680 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010aaa:	8b3b      	ldrh	r3, [r7, #24]
 8010aac:	2201      	movs	r2, #1
 8010aae:	4619      	mov	r1, r3
 8010ab0:	2036      	movs	r0, #54	; 0x36
 8010ab2:	f7fa fd95 	bl	800b5e0 <pbuf_alloc>
 8010ab6:	6178      	str	r0, [r7, #20]
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 814b 	beq.w	8010d56 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010ac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ac4:	68ba      	ldr	r2, [r7, #8]
 8010ac6:	441a      	add	r2, r3
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010acc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	2036      	movs	r0, #54	; 0x36
 8010ada:	f7fa fd81 	bl	800b5e0 <pbuf_alloc>
 8010ade:	6338      	str	r0, [r7, #48]	; 0x30
 8010ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d103      	bne.n	8010aee <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010ae6:	6978      	ldr	r0, [r7, #20]
 8010ae8:	f7fb f85a 	bl	800bba0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010aec:	e136      	b.n	8010d5c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010aee:	6979      	ldr	r1, [r7, #20]
 8010af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010af2:	f7fb f923 	bl	800bd3c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010af6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010af8:	f7fb f8e0 	bl	800bcbc <pbuf_clen>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010b04:	4413      	add	r3, r2
 8010b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010b0e:	2b09      	cmp	r3, #9
 8010b10:	d903      	bls.n	8010b1a <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b14:	f7fb f844 	bl	800bba0 <pbuf_free>
      goto memerr;
 8010b18:	e120      	b.n	8010d5c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010b1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b22:	441a      	add	r2, r3
 8010b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010b30:	68f8      	ldr	r0, [r7, #12]
 8010b32:	f7ff fc4f 	bl	80103d4 <tcp_create_segment>
 8010b36:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f000 810d 	beq.w	8010d5a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d102      	bne.n	8010b4c <tcp_write+0x454>
      queue = seg;
 8010b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b48:	647b      	str	r3, [r7, #68]	; 0x44
 8010b4a:	e00c      	b.n	8010b66 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d106      	bne.n	8010b60 <tcp_write+0x468>
 8010b52:	4b53      	ldr	r3, [pc, #332]	; (8010ca0 <tcp_write+0x5a8>)
 8010b54:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010b58:	4955      	ldr	r1, [pc, #340]	; (8010cb0 <tcp_write+0x5b8>)
 8010b5a:	4853      	ldr	r0, [pc, #332]	; (8010ca8 <tcp_write+0x5b0>)
 8010b5c:	f004 fd90 	bl	8015680 <iprintf>
      prev_seg->next = seg;
 8010b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b64:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b68:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010b6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b6e:	8b3b      	ldrh	r3, [r7, #24]
 8010b70:	4413      	add	r3, r2
 8010b72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010b76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b7a:	88fb      	ldrh	r3, [r7, #6]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	f4ff af3d 	bcc.w	80109fc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010b82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d02c      	beq.n	8010be2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b8e:	e01e      	b.n	8010bce <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8010b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b92:	891a      	ldrh	r2, [r3, #8]
 8010b94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b96:	4413      	add	r3, r2
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d110      	bne.n	8010bc8 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bac:	8952      	ldrh	r2, [r2, #10]
 8010bae:	4413      	add	r3, r2
 8010bb0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010bb2:	68b9      	ldr	r1, [r7, #8]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f004 fcf6 	bl	80155a6 <memcpy>
        p->len += oversize_used;
 8010bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bbc:	895a      	ldrh	r2, [r3, #10]
 8010bbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010bc0:	4413      	add	r3, r2
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d1dd      	bne.n	8010b90 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8010bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bd6:	891a      	ldrh	r2, [r3, #8]
 8010bd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010bda:	4413      	add	r3, r2
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010be2:	8a7a      	ldrh	r2, [r7, #18]
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d018      	beq.n	8010c22 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d106      	bne.n	8010c04 <tcp_write+0x50c>
 8010bf6:	4b2a      	ldr	r3, [pc, #168]	; (8010ca0 <tcp_write+0x5a8>)
 8010bf8:	f240 22e1 	movw	r2, #737	; 0x2e1
 8010bfc:	492d      	ldr	r1, [pc, #180]	; (8010cb4 <tcp_write+0x5bc>)
 8010bfe:	482a      	ldr	r0, [pc, #168]	; (8010ca8 <tcp_write+0x5b0>)
 8010c00:	f004 fd3e 	bl	8015680 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fb f896 	bl	800bd3c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c12:	891a      	ldrh	r2, [r3, #8]
 8010c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c16:	891b      	ldrh	r3, [r3, #8]
 8010c18:	4413      	add	r3, r2
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c1e:	811a      	strh	r2, [r3, #8]
 8010c20:	e037      	b.n	8010c92 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8010c22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d034      	beq.n	8010c92 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d003      	beq.n	8010c36 <tcp_write+0x53e>
 8010c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <tcp_write+0x54c>
 8010c36:	4b1a      	ldr	r3, [pc, #104]	; (8010ca0 <tcp_write+0x5a8>)
 8010c38:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010c3c:	491e      	ldr	r1, [pc, #120]	; (8010cb8 <tcp_write+0x5c0>)
 8010c3e:	481a      	ldr	r0, [pc, #104]	; (8010ca8 <tcp_write+0x5b0>)
 8010c40:	f004 fd1e 	bl	8015680 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c4a:	e009      	b.n	8010c60 <tcp_write+0x568>
      p->tot_len += extendlen;
 8010c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4e:	891a      	ldrh	r2, [r3, #8]
 8010c50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c52:	4413      	add	r3, r2
 8010c54:	b29a      	uxth	r2, r3
 8010c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c58:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1f1      	bne.n	8010c4c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6a:	891a      	ldrh	r2, [r3, #8]
 8010c6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c6e:	4413      	add	r3, r2
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c74:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	895a      	ldrh	r2, [r3, #10]
 8010c7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c7c:	4413      	add	r3, r2
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c82:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c86:	891a      	ldrh	r2, [r3, #8]
 8010c88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c8a:	4413      	add	r3, r2
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c90:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d111      	bne.n	8010cbc <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c9e:	e010      	b.n	8010cc2 <tcp_write+0x5ca>
 8010ca0:	080185e8 	.word	0x080185e8
 8010ca4:	08018888 	.word	0x08018888
 8010ca8:	0801863c 	.word	0x0801863c
 8010cac:	080188c8 	.word	0x080188c8
 8010cb0:	080188d8 	.word	0x080188d8
 8010cb4:	080188ec 	.word	0x080188ec
 8010cb8:	08018924 	.word	0x08018924
  } else {
    last_unsent->next = queue;
 8010cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cc0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010cc6:	88fb      	ldrh	r3, [r7, #6]
 8010cc8:	441a      	add	r2, r3
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010cd4:	88fb      	ldrh	r3, [r7, #6]
 8010cd6:	1ad3      	subs	r3, r2, r3
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ce6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00e      	beq.n	8010d12 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10a      	bne.n	8010d12 <tcp_write+0x61a>
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d106      	bne.n	8010d12 <tcp_write+0x61a>
 8010d04:	4b2c      	ldr	r3, [pc, #176]	; (8010db8 <tcp_write+0x6c0>)
 8010d06:	f240 3213 	movw	r2, #787	; 0x313
 8010d0a:	492c      	ldr	r1, [pc, #176]	; (8010dbc <tcp_write+0x6c4>)
 8010d0c:	482c      	ldr	r0, [pc, #176]	; (8010dc0 <tcp_write+0x6c8>)
 8010d0e:	f004 fcb7 	bl	8015680 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d016      	beq.n	8010d46 <tcp_write+0x64e>
 8010d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d012      	beq.n	8010d46 <tcp_write+0x64e>
 8010d20:	797b      	ldrb	r3, [r7, #5]
 8010d22:	f003 0302 	and.w	r3, r3, #2
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d10d      	bne.n	8010d46 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	899b      	ldrh	r3, [r3, #12]
 8010d30:	b29c      	uxth	r4, r3
 8010d32:	2008      	movs	r0, #8
 8010d34:	f7f9 fb8c 	bl	800a450 <lwip_htons>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	4322      	orrs	r2, r4
 8010d42:	b292      	uxth	r2, r2
 8010d44:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010d46:	2300      	movs	r3, #0
 8010d48:	e031      	b.n	8010dae <tcp_write+0x6b6>
          goto memerr;
 8010d4a:	bf00      	nop
 8010d4c:	e006      	b.n	8010d5c <tcp_write+0x664>
            goto memerr;
 8010d4e:	bf00      	nop
 8010d50:	e004      	b.n	8010d5c <tcp_write+0x664>
        goto memerr;
 8010d52:	bf00      	nop
 8010d54:	e002      	b.n	8010d5c <tcp_write+0x664>
        goto memerr;
 8010d56:	bf00      	nop
 8010d58:	e000      	b.n	8010d5c <tcp_write+0x664>
      goto memerr;
 8010d5a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	8b5b      	ldrh	r3, [r3, #26]
 8010d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d64:	b29a      	uxth	r2, r3
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8010d70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010d72:	f7fa ff15 	bl	800bba0 <pbuf_free>
  }
  if (queue != NULL) {
 8010d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d002      	beq.n	8010d82 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8010d7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d7e:	f7fc fb71 	bl	800d464 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d00e      	beq.n	8010daa <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d10a      	bne.n	8010daa <tcp_write+0x6b2>
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d106      	bne.n	8010daa <tcp_write+0x6b2>
 8010d9c:	4b06      	ldr	r3, [pc, #24]	; (8010db8 <tcp_write+0x6c0>)
 8010d9e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8010da2:	4906      	ldr	r1, [pc, #24]	; (8010dbc <tcp_write+0x6c4>)
 8010da4:	4806      	ldr	r0, [pc, #24]	; (8010dc0 <tcp_write+0x6c8>)
 8010da6:	f004 fc6b 	bl	8015680 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	375c      	adds	r7, #92	; 0x5c
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd90      	pop	{r4, r7, pc}
 8010db6:	bf00      	nop
 8010db8:	080185e8 	.word	0x080185e8
 8010dbc:	0801895c 	.word	0x0801895c
 8010dc0:	0801863c 	.word	0x0801863c

08010dc4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010dc4:	b590      	push	{r4, r7, lr}
 8010dc6:	b08b      	sub	sp, #44	; 0x2c
 8010dc8:	af02      	add	r7, sp, #8
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	460b      	mov	r3, r1
 8010dce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	61fb      	str	r3, [r7, #28]
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d106      	bne.n	8010df0 <tcp_split_unsent_seg+0x2c>
 8010de2:	4b95      	ldr	r3, [pc, #596]	; (8011038 <tcp_split_unsent_seg+0x274>)
 8010de4:	f240 324b 	movw	r2, #843	; 0x34b
 8010de8:	4994      	ldr	r1, [pc, #592]	; (801103c <tcp_split_unsent_seg+0x278>)
 8010dea:	4895      	ldr	r0, [pc, #596]	; (8011040 <tcp_split_unsent_seg+0x27c>)
 8010dec:	f004 fc48 	bl	8015680 <iprintf>

  useg = pcb->unsent;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d102      	bne.n	8010e02 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8010e00:	e116      	b.n	8011030 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010e02:	887b      	ldrh	r3, [r7, #2]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d109      	bne.n	8010e1c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010e08:	4b8b      	ldr	r3, [pc, #556]	; (8011038 <tcp_split_unsent_seg+0x274>)
 8010e0a:	f240 3253 	movw	r2, #851	; 0x353
 8010e0e:	498d      	ldr	r1, [pc, #564]	; (8011044 <tcp_split_unsent_seg+0x280>)
 8010e10:	488b      	ldr	r0, [pc, #556]	; (8011040 <tcp_split_unsent_seg+0x27c>)
 8010e12:	f004 fc35 	bl	8015680 <iprintf>
    return ERR_VAL;
 8010e16:	f06f 0305 	mvn.w	r3, #5
 8010e1a:	e109      	b.n	8011030 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	891b      	ldrh	r3, [r3, #8]
 8010e20:	887a      	ldrh	r2, [r7, #2]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d301      	bcc.n	8010e2a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	e102      	b.n	8011030 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e2e:	887a      	ldrh	r2, [r7, #2]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d906      	bls.n	8010e42 <tcp_split_unsent_seg+0x7e>
 8010e34:	4b80      	ldr	r3, [pc, #512]	; (8011038 <tcp_split_unsent_seg+0x274>)
 8010e36:	f240 325b 	movw	r2, #859	; 0x35b
 8010e3a:	4983      	ldr	r1, [pc, #524]	; (8011048 <tcp_split_unsent_seg+0x284>)
 8010e3c:	4880      	ldr	r0, [pc, #512]	; (8011040 <tcp_split_unsent_seg+0x27c>)
 8010e3e:	f004 fc1f 	bl	8015680 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	891b      	ldrh	r3, [r3, #8]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <tcp_split_unsent_seg+0x94>
 8010e4a:	4b7b      	ldr	r3, [pc, #492]	; (8011038 <tcp_split_unsent_seg+0x274>)
 8010e4c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010e50:	497e      	ldr	r1, [pc, #504]	; (801104c <tcp_split_unsent_seg+0x288>)
 8010e52:	487b      	ldr	r0, [pc, #492]	; (8011040 <tcp_split_unsent_seg+0x27c>)
 8010e54:	f004 fc14 	bl	8015680 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	7a9b      	ldrb	r3, [r3, #10]
 8010e5c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010e5e:	7bfb      	ldrb	r3, [r7, #15]
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	f003 0304 	and.w	r3, r3, #4
 8010e68:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	891a      	ldrh	r2, [r3, #8]
 8010e6e:	887b      	ldrh	r3, [r7, #2]
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010e74:	7bbb      	ldrb	r3, [r7, #14]
 8010e76:	b29a      	uxth	r2, r3
 8010e78:	89bb      	ldrh	r3, [r7, #12]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e82:	4619      	mov	r1, r3
 8010e84:	2036      	movs	r0, #54	; 0x36
 8010e86:	f7fa fbab 	bl	800b5e0 <pbuf_alloc>
 8010e8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f000 80b7 	beq.w	8011002 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	891a      	ldrh	r2, [r3, #8]
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	891b      	ldrh	r3, [r3, #8]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	887b      	ldrh	r3, [r7, #2]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	6858      	ldr	r0, [r3, #4]
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	685a      	ldr	r2, [r3, #4]
 8010eb0:	7bbb      	ldrb	r3, [r7, #14]
 8010eb2:	18d1      	adds	r1, r2, r3
 8010eb4:	897b      	ldrh	r3, [r7, #10]
 8010eb6:	89ba      	ldrh	r2, [r7, #12]
 8010eb8:	f7fb f868 	bl	800bf8c <pbuf_copy_partial>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	89bb      	ldrh	r3, [r7, #12]
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	f040 809f 	bne.w	8011006 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	899b      	ldrh	r3, [r3, #12]
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7f9 fabd 	bl	800a450 <lwip_htons>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ede:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010ee4:	7efb      	ldrb	r3, [r7, #27]
 8010ee6:	f003 0308 	and.w	r3, r3, #8
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d007      	beq.n	8010efe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010eee:	7efb      	ldrb	r3, [r7, #27]
 8010ef0:	f023 0308 	bic.w	r3, r3, #8
 8010ef4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010ef6:	7ebb      	ldrb	r3, [r7, #26]
 8010ef8:	f043 0308 	orr.w	r3, r3, #8
 8010efc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010efe:	7efb      	ldrb	r3, [r7, #27]
 8010f00:	f003 0301 	and.w	r3, r3, #1
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d007      	beq.n	8010f18 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010f08:	7efb      	ldrb	r3, [r7, #27]
 8010f0a:	f023 0301 	bic.w	r3, r3, #1
 8010f0e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010f10:	7ebb      	ldrb	r3, [r7, #26]
 8010f12:	f043 0301 	orr.w	r3, r3, #1
 8010f16:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f9 faab 	bl	800a47a <lwip_htonl>
 8010f24:	4602      	mov	r2, r0
 8010f26:	887b      	ldrh	r3, [r7, #2]
 8010f28:	18d1      	adds	r1, r2, r3
 8010f2a:	7eba      	ldrb	r2, [r7, #26]
 8010f2c:	7bfb      	ldrb	r3, [r7, #15]
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	460b      	mov	r3, r1
 8010f32:	6939      	ldr	r1, [r7, #16]
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7ff fa4d 	bl	80103d4 <tcp_create_segment>
 8010f3a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d063      	beq.n	801100a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fa feb8 	bl	800bcbc <pbuf_clen>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	461a      	mov	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f56:	1a9b      	subs	r3, r3, r2
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	6858      	ldr	r0, [r3, #4]
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	891a      	ldrh	r2, [r3, #8]
 8010f6a:	89bb      	ldrh	r3, [r7, #12]
 8010f6c:	1ad3      	subs	r3, r2, r3
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	4619      	mov	r1, r3
 8010f72:	f7fa fc8f 	bl	800b894 <pbuf_realloc>
  useg->len -= remainder;
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	891a      	ldrh	r2, [r3, #8]
 8010f7a:	89bb      	ldrh	r3, [r7, #12]
 8010f7c:	1ad3      	subs	r3, r2, r3
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	899b      	ldrh	r3, [r3, #12]
 8010f8a:	b29c      	uxth	r4, r3
 8010f8c:	7efb      	ldrb	r3, [r7, #27]
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7f9 fa5d 	bl	800a450 <lwip_htons>
 8010f96:	4603      	mov	r3, r0
 8010f98:	461a      	mov	r2, r3
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	4322      	orrs	r2, r4
 8010fa0:	b292      	uxth	r2, r2
 8010fa2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7fa fe87 	bl	800bcbc <pbuf_clen>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fb8:	4413      	add	r3, r2
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010fc2:	69fb      	ldr	r3, [r7, #28]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fa fe78 	bl	800bcbc <pbuf_clen>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	461a      	mov	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fd6:	4413      	add	r3, r2
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	69fa      	ldr	r2, [r7, #28]
 8010fec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d103      	bne.n	8010ffe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010ffe:	2300      	movs	r3, #0
 8011000:	e016      	b.n	8011030 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011002:	bf00      	nop
 8011004:	e002      	b.n	801100c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011006:	bf00      	nop
 8011008:	e000      	b.n	801100c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801100a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d006      	beq.n	8011020 <tcp_split_unsent_seg+0x25c>
 8011012:	4b09      	ldr	r3, [pc, #36]	; (8011038 <tcp_split_unsent_seg+0x274>)
 8011014:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011018:	490d      	ldr	r1, [pc, #52]	; (8011050 <tcp_split_unsent_seg+0x28c>)
 801101a:	4809      	ldr	r0, [pc, #36]	; (8011040 <tcp_split_unsent_seg+0x27c>)
 801101c:	f004 fb30 	bl	8015680 <iprintf>
  if (p != NULL) {
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d002      	beq.n	801102c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011026:	6938      	ldr	r0, [r7, #16]
 8011028:	f7fa fdba 	bl	800bba0 <pbuf_free>
  }

  return ERR_MEM;
 801102c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011030:	4618      	mov	r0, r3
 8011032:	3724      	adds	r7, #36	; 0x24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd90      	pop	{r4, r7, pc}
 8011038:	080185e8 	.word	0x080185e8
 801103c:	0801897c 	.word	0x0801897c
 8011040:	0801863c 	.word	0x0801863c
 8011044:	080189a0 	.word	0x080189a0
 8011048:	080189c4 	.word	0x080189c4
 801104c:	080189d4 	.word	0x080189d4
 8011050:	080189e4 	.word	0x080189e4

08011054 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011054:	b590      	push	{r4, r7, lr}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d106      	bne.n	8011070 <tcp_send_fin+0x1c>
 8011062:	4b21      	ldr	r3, [pc, #132]	; (80110e8 <tcp_send_fin+0x94>)
 8011064:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011068:	4920      	ldr	r1, [pc, #128]	; (80110ec <tcp_send_fin+0x98>)
 801106a:	4821      	ldr	r0, [pc, #132]	; (80110f0 <tcp_send_fin+0x9c>)
 801106c:	f004 fb08 	bl	8015680 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011074:	2b00      	cmp	r3, #0
 8011076:	d02e      	beq.n	80110d6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801107c:	60fb      	str	r3, [r7, #12]
 801107e:	e002      	b.n	8011086 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1f8      	bne.n	8011080 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	899b      	ldrh	r3, [r3, #12]
 8011094:	b29b      	uxth	r3, r3
 8011096:	4618      	mov	r0, r3
 8011098:	f7f9 f9da 	bl	800a450 <lwip_htons>
 801109c:	4603      	mov	r3, r0
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	f003 0307 	and.w	r3, r3, #7
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d116      	bne.n	80110d6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	b29c      	uxth	r4, r3
 80110b0:	2001      	movs	r0, #1
 80110b2:	f7f9 f9cd 	bl	800a450 <lwip_htons>
 80110b6:	4603      	mov	r3, r0
 80110b8:	461a      	mov	r2, r3
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	4322      	orrs	r2, r4
 80110c0:	b292      	uxth	r2, r2
 80110c2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8b5b      	ldrh	r3, [r3, #26]
 80110c8:	f043 0320 	orr.w	r3, r3, #32
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80110d2:	2300      	movs	r3, #0
 80110d4:	e004      	b.n	80110e0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80110d6:	2101      	movs	r1, #1
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f80b 	bl	80110f4 <tcp_enqueue_flags>
 80110de:	4603      	mov	r3, r0
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3714      	adds	r7, #20
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd90      	pop	{r4, r7, pc}
 80110e8:	080185e8 	.word	0x080185e8
 80110ec:	080189f0 	.word	0x080189f0
 80110f0:	0801863c 	.word	0x0801863c

080110f4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b08a      	sub	sp, #40	; 0x28
 80110f8:	af02      	add	r7, sp, #8
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011100:	2300      	movs	r3, #0
 8011102:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011104:	2300      	movs	r3, #0
 8011106:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011108:	78fb      	ldrb	r3, [r7, #3]
 801110a:	f003 0303 	and.w	r3, r3, #3
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <tcp_enqueue_flags+0x2c>
 8011112:	4b67      	ldr	r3, [pc, #412]	; (80112b0 <tcp_enqueue_flags+0x1bc>)
 8011114:	f240 4212 	movw	r2, #1042	; 0x412
 8011118:	4966      	ldr	r1, [pc, #408]	; (80112b4 <tcp_enqueue_flags+0x1c0>)
 801111a:	4867      	ldr	r0, [pc, #412]	; (80112b8 <tcp_enqueue_flags+0x1c4>)
 801111c:	f004 fab0 	bl	8015680 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <tcp_enqueue_flags+0x40>
 8011126:	4b62      	ldr	r3, [pc, #392]	; (80112b0 <tcp_enqueue_flags+0x1bc>)
 8011128:	f240 4213 	movw	r2, #1043	; 0x413
 801112c:	4963      	ldr	r1, [pc, #396]	; (80112bc <tcp_enqueue_flags+0x1c8>)
 801112e:	4862      	ldr	r0, [pc, #392]	; (80112b8 <tcp_enqueue_flags+0x1c4>)
 8011130:	f004 faa6 	bl	8015680 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011134:	78fb      	ldrb	r3, [r7, #3]
 8011136:	f003 0302 	and.w	r3, r3, #2
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801113e:	2301      	movs	r3, #1
 8011140:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011142:	7ffb      	ldrb	r3, [r7, #31]
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	b2db      	uxtb	r3, r3
 8011148:	f003 0304 	and.w	r3, r3, #4
 801114c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801114e:	7dfb      	ldrb	r3, [r7, #23]
 8011150:	b29b      	uxth	r3, r3
 8011152:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011156:	4619      	mov	r1, r3
 8011158:	2036      	movs	r0, #54	; 0x36
 801115a:	f7fa fa41 	bl	800b5e0 <pbuf_alloc>
 801115e:	6138      	str	r0, [r7, #16]
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d109      	bne.n	801117a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	8b5b      	ldrh	r3, [r3, #26]
 801116a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801116e:	b29a      	uxth	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011174:	f04f 33ff 	mov.w	r3, #4294967295
 8011178:	e095      	b.n	80112a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	895a      	ldrh	r2, [r3, #10]
 801117e:	7dfb      	ldrb	r3, [r7, #23]
 8011180:	b29b      	uxth	r3, r3
 8011182:	429a      	cmp	r2, r3
 8011184:	d206      	bcs.n	8011194 <tcp_enqueue_flags+0xa0>
 8011186:	4b4a      	ldr	r3, [pc, #296]	; (80112b0 <tcp_enqueue_flags+0x1bc>)
 8011188:	f240 423a 	movw	r2, #1082	; 0x43a
 801118c:	494c      	ldr	r1, [pc, #304]	; (80112c0 <tcp_enqueue_flags+0x1cc>)
 801118e:	484a      	ldr	r0, [pc, #296]	; (80112b8 <tcp_enqueue_flags+0x1c4>)
 8011190:	f004 fa76 	bl	8015680 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011198:	78fa      	ldrb	r2, [r7, #3]
 801119a:	7ffb      	ldrb	r3, [r7, #31]
 801119c:	9300      	str	r3, [sp, #0]
 801119e:	460b      	mov	r3, r1
 80111a0:	6939      	ldr	r1, [r7, #16]
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f7ff f916 	bl	80103d4 <tcp_create_segment>
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d109      	bne.n	80111c4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	8b5b      	ldrh	r3, [r3, #26]
 80111b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111b8:	b29a      	uxth	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80111be:	f04f 33ff 	mov.w	r3, #4294967295
 80111c2:	e070      	b.n	80112a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	f003 0303 	and.w	r3, r3, #3
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d006      	beq.n	80111de <tcp_enqueue_flags+0xea>
 80111d0:	4b37      	ldr	r3, [pc, #220]	; (80112b0 <tcp_enqueue_flags+0x1bc>)
 80111d2:	f240 4242 	movw	r2, #1090	; 0x442
 80111d6:	493b      	ldr	r1, [pc, #236]	; (80112c4 <tcp_enqueue_flags+0x1d0>)
 80111d8:	4837      	ldr	r0, [pc, #220]	; (80112b8 <tcp_enqueue_flags+0x1c4>)
 80111da:	f004 fa51 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	891b      	ldrh	r3, [r3, #8]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d006      	beq.n	80111f4 <tcp_enqueue_flags+0x100>
 80111e6:	4b32      	ldr	r3, [pc, #200]	; (80112b0 <tcp_enqueue_flags+0x1bc>)
 80111e8:	f240 4243 	movw	r2, #1091	; 0x443
 80111ec:	4936      	ldr	r1, [pc, #216]	; (80112c8 <tcp_enqueue_flags+0x1d4>)
 80111ee:	4832      	ldr	r0, [pc, #200]	; (80112b8 <tcp_enqueue_flags+0x1c4>)
 80111f0:	f004 fa46 	bl	8015680 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d103      	bne.n	8011204 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	66da      	str	r2, [r3, #108]	; 0x6c
 8011202:	e00d      	b.n	8011220 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011208:	61bb      	str	r3, [r7, #24]
 801120a:	e002      	b.n	8011212 <tcp_enqueue_flags+0x11e>
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	61bb      	str	r3, [r7, #24]
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1f8      	bne.n	801120c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801121a:	69bb      	ldr	r3, [r7, #24]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011228:	78fb      	ldrb	r3, [r7, #3]
 801122a:	f003 0302 	and.w	r3, r3, #2
 801122e:	2b00      	cmp	r3, #0
 8011230:	d104      	bne.n	801123c <tcp_enqueue_flags+0x148>
 8011232:	78fb      	ldrb	r3, [r7, #3]
 8011234:	f003 0301 	and.w	r3, r3, #1
 8011238:	2b00      	cmp	r3, #0
 801123a:	d004      	beq.n	8011246 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011240:	1c5a      	adds	r2, r3, #1
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011246:	78fb      	ldrb	r3, [r7, #3]
 8011248:	f003 0301 	and.w	r3, r3, #1
 801124c:	2b00      	cmp	r3, #0
 801124e:	d006      	beq.n	801125e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	8b5b      	ldrh	r3, [r3, #26]
 8011254:	f043 0320 	orr.w	r3, r3, #32
 8011258:	b29a      	uxth	r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	4618      	mov	r0, r3
 8011264:	f7fa fd2a 	bl	800bcbc <pbuf_clen>
 8011268:	4603      	mov	r3, r0
 801126a:	461a      	mov	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011272:	4413      	add	r3, r2
 8011274:	b29a      	uxth	r2, r3
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011282:	2b00      	cmp	r3, #0
 8011284:	d00e      	beq.n	80112a4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801128a:	2b00      	cmp	r3, #0
 801128c:	d10a      	bne.n	80112a4 <tcp_enqueue_flags+0x1b0>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011292:	2b00      	cmp	r3, #0
 8011294:	d106      	bne.n	80112a4 <tcp_enqueue_flags+0x1b0>
 8011296:	4b06      	ldr	r3, [pc, #24]	; (80112b0 <tcp_enqueue_flags+0x1bc>)
 8011298:	f240 4266 	movw	r2, #1126	; 0x466
 801129c:	490b      	ldr	r1, [pc, #44]	; (80112cc <tcp_enqueue_flags+0x1d8>)
 801129e:	4806      	ldr	r0, [pc, #24]	; (80112b8 <tcp_enqueue_flags+0x1c4>)
 80112a0:	f004 f9ee 	bl	8015680 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80112a4:	2300      	movs	r3, #0
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3720      	adds	r7, #32
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	080185e8 	.word	0x080185e8
 80112b4:	08018a0c 	.word	0x08018a0c
 80112b8:	0801863c 	.word	0x0801863c
 80112bc:	08018a64 	.word	0x08018a64
 80112c0:	08018a84 	.word	0x08018a84
 80112c4:	08018ac0 	.word	0x08018ac0
 80112c8:	08018ad8 	.word	0x08018ad8
 80112cc:	08018b04 	.word	0x08018b04

080112d0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80112d0:	b5b0      	push	{r4, r5, r7, lr}
 80112d2:	b08a      	sub	sp, #40	; 0x28
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <tcp_output+0x1c>
 80112de:	4ba0      	ldr	r3, [pc, #640]	; (8011560 <tcp_output+0x290>)
 80112e0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80112e4:	499f      	ldr	r1, [pc, #636]	; (8011564 <tcp_output+0x294>)
 80112e6:	48a0      	ldr	r0, [pc, #640]	; (8011568 <tcp_output+0x298>)
 80112e8:	f004 f9ca 	bl	8015680 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	7d1b      	ldrb	r3, [r3, #20]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d106      	bne.n	8011302 <tcp_output+0x32>
 80112f4:	4b9a      	ldr	r3, [pc, #616]	; (8011560 <tcp_output+0x290>)
 80112f6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80112fa:	499c      	ldr	r1, [pc, #624]	; (801156c <tcp_output+0x29c>)
 80112fc:	489a      	ldr	r0, [pc, #616]	; (8011568 <tcp_output+0x298>)
 80112fe:	f004 f9bf 	bl	8015680 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011302:	4b9b      	ldr	r3, [pc, #620]	; (8011570 <tcp_output+0x2a0>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	429a      	cmp	r2, r3
 801130a:	d101      	bne.n	8011310 <tcp_output+0x40>
    return ERR_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	e1d2      	b.n	80116b6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801131c:	429a      	cmp	r2, r3
 801131e:	d203      	bcs.n	8011328 <tcp_output+0x58>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011326:	e002      	b.n	801132e <tcp_output+0x5e>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801132e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011334:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10b      	bne.n	8011354 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	8b5b      	ldrh	r3, [r3, #26]
 8011340:	f003 0302 	and.w	r3, r3, #2
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 81a9 	beq.w	801169c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f000 fdd6 	bl	8011efc <tcp_send_empty_ack>
 8011350:	4603      	mov	r3, r0
 8011352:	e1b0      	b.n	80116b6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011354:	6879      	ldr	r1, [r7, #4]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	3304      	adds	r3, #4
 801135a:	461a      	mov	r2, r3
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7ff f81d 	bl	801039c <tcp_route>
 8011362:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <tcp_output+0xa0>
    return ERR_RTE;
 801136a:	f06f 0303 	mvn.w	r3, #3
 801136e:	e1a2      	b.n	80116b6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d003      	beq.n	801137e <tcp_output+0xae>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d111      	bne.n	80113a2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d002      	beq.n	801138a <tcp_output+0xba>
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	3304      	adds	r3, #4
 8011388:	e000      	b.n	801138c <tcp_output+0xbc>
 801138a:	2300      	movs	r3, #0
 801138c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d102      	bne.n	801139a <tcp_output+0xca>
      return ERR_RTE;
 8011394:	f06f 0303 	mvn.w	r3, #3
 8011398:	e18d      	b.n	80116b6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80113a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f9 f866 	bl	800a47a <lwip_htonl>
 80113ae:	4602      	mov	r2, r0
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b8:	8912      	ldrh	r2, [r2, #8]
 80113ba:	4413      	add	r3, r2
 80113bc:	69ba      	ldr	r2, [r7, #24]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d227      	bcs.n	8011412 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80113c8:	461a      	mov	r2, r3
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d114      	bne.n	80113fa <tcp_output+0x12a>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d110      	bne.n	80113fa <tcp_output+0x12a>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d10b      	bne.n	80113fa <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2200      	movs	r2, #0
 80113e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2201      	movs	r2, #1
 80113ee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8b5b      	ldrh	r3, [r3, #26]
 80113fe:	f003 0302 	and.w	r3, r3, #2
 8011402:	2b00      	cmp	r3, #0
 8011404:	f000 814c 	beq.w	80116a0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f000 fd77 	bl	8011efc <tcp_send_empty_ack>
 801140e:	4603      	mov	r3, r0
 8011410:	e151      	b.n	80116b6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2200      	movs	r2, #0
 8011416:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801141e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011420:	6a3b      	ldr	r3, [r7, #32]
 8011422:	2b00      	cmp	r3, #0
 8011424:	f000 811b 	beq.w	801165e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011428:	e002      	b.n	8011430 <tcp_output+0x160>
 801142a:	6a3b      	ldr	r3, [r7, #32]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	623b      	str	r3, [r7, #32]
 8011430:	6a3b      	ldr	r3, [r7, #32]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d1f8      	bne.n	801142a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011438:	e111      	b.n	801165e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	899b      	ldrh	r3, [r3, #12]
 8011440:	b29b      	uxth	r3, r3
 8011442:	4618      	mov	r0, r3
 8011444:	f7f9 f804 	bl	800a450 <lwip_htons>
 8011448:	4603      	mov	r3, r0
 801144a:	b2db      	uxtb	r3, r3
 801144c:	f003 0304 	and.w	r3, r3, #4
 8011450:	2b00      	cmp	r3, #0
 8011452:	d006      	beq.n	8011462 <tcp_output+0x192>
 8011454:	4b42      	ldr	r3, [pc, #264]	; (8011560 <tcp_output+0x290>)
 8011456:	f240 5237 	movw	r2, #1335	; 0x537
 801145a:	4946      	ldr	r1, [pc, #280]	; (8011574 <tcp_output+0x2a4>)
 801145c:	4842      	ldr	r0, [pc, #264]	; (8011568 <tcp_output+0x298>)
 801145e:	f004 f90f 	bl	8015680 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011466:	2b00      	cmp	r3, #0
 8011468:	d01f      	beq.n	80114aa <tcp_output+0x1da>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	8b5b      	ldrh	r3, [r3, #26]
 801146e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011472:	2b00      	cmp	r3, #0
 8011474:	d119      	bne.n	80114aa <tcp_output+0x1da>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00b      	beq.n	8011496 <tcp_output+0x1c6>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d110      	bne.n	80114aa <tcp_output+0x1da>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801148c:	891a      	ldrh	r2, [r3, #8]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011492:	429a      	cmp	r2, r3
 8011494:	d209      	bcs.n	80114aa <tcp_output+0x1da>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801149c:	2b00      	cmp	r3, #0
 801149e:	d004      	beq.n	80114aa <tcp_output+0x1da>
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114a6:	2b08      	cmp	r3, #8
 80114a8:	d901      	bls.n	80114ae <tcp_output+0x1de>
 80114aa:	2301      	movs	r3, #1
 80114ac:	e000      	b.n	80114b0 <tcp_output+0x1e0>
 80114ae:	2300      	movs	r3, #0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d106      	bne.n	80114c2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	8b5b      	ldrh	r3, [r3, #26]
 80114b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f000 80e3 	beq.w	8011688 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7d1b      	ldrb	r3, [r3, #20]
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d00d      	beq.n	80114e6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	899b      	ldrh	r3, [r3, #12]
 80114d0:	b29c      	uxth	r4, r3
 80114d2:	2010      	movs	r0, #16
 80114d4:	f7f8 ffbc 	bl	800a450 <lwip_htons>
 80114d8:	4603      	mov	r3, r0
 80114da:	461a      	mov	r2, r3
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	4322      	orrs	r2, r4
 80114e2:	b292      	uxth	r2, r2
 80114e4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80114e6:	697a      	ldr	r2, [r7, #20]
 80114e8:	6879      	ldr	r1, [r7, #4]
 80114ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114ec:	f000 f908 	bl	8011700 <tcp_output_segment>
 80114f0:	4603      	mov	r3, r0
 80114f2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80114f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d009      	beq.n	8011510 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	8b5b      	ldrh	r3, [r3, #26]
 8011500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011504:	b29a      	uxth	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	835a      	strh	r2, [r3, #26]
      return err;
 801150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801150e:	e0d2      	b.n	80116b6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	7d1b      	ldrb	r3, [r3, #20]
 801151c:	2b02      	cmp	r3, #2
 801151e:	d006      	beq.n	801152e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	8b5b      	ldrh	r3, [r3, #26]
 8011524:	f023 0303 	bic.w	r3, r3, #3
 8011528:	b29a      	uxth	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	f7f8 ffa0 	bl	800a47a <lwip_htonl>
 801153a:	4604      	mov	r4, r0
 801153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153e:	891b      	ldrh	r3, [r3, #8]
 8011540:	461d      	mov	r5, r3
 8011542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	899b      	ldrh	r3, [r3, #12]
 8011548:	b29b      	uxth	r3, r3
 801154a:	4618      	mov	r0, r3
 801154c:	f7f8 ff80 	bl	800a450 <lwip_htons>
 8011550:	4603      	mov	r3, r0
 8011552:	b2db      	uxtb	r3, r3
 8011554:	f003 0303 	and.w	r3, r3, #3
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00d      	beq.n	8011578 <tcp_output+0x2a8>
 801155c:	2301      	movs	r3, #1
 801155e:	e00c      	b.n	801157a <tcp_output+0x2aa>
 8011560:	080185e8 	.word	0x080185e8
 8011564:	08018b2c 	.word	0x08018b2c
 8011568:	0801863c 	.word	0x0801863c
 801156c:	08018b44 	.word	0x08018b44
 8011570:	2000b668 	.word	0x2000b668
 8011574:	08018b6c 	.word	0x08018b6c
 8011578:	2300      	movs	r3, #0
 801157a:	442b      	add	r3, r5
 801157c:	4423      	add	r3, r4
 801157e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	1ad3      	subs	r3, r2, r3
 8011588:	2b00      	cmp	r3, #0
 801158a:	da02      	bge.n	8011592 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	68ba      	ldr	r2, [r7, #8]
 8011590:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011594:	891b      	ldrh	r3, [r3, #8]
 8011596:	461c      	mov	r4, r3
 8011598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	899b      	ldrh	r3, [r3, #12]
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7f8 ff55 	bl	800a450 <lwip_htons>
 80115a6:	4603      	mov	r3, r0
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	f003 0303 	and.w	r3, r3, #3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <tcp_output+0x2e6>
 80115b2:	2301      	movs	r3, #1
 80115b4:	e000      	b.n	80115b8 <tcp_output+0x2e8>
 80115b6:	2300      	movs	r3, #0
 80115b8:	4423      	add	r3, r4
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d049      	beq.n	8011652 <tcp_output+0x382>
      seg->next = NULL;
 80115be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c0:	2200      	movs	r2, #0
 80115c2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d105      	bne.n	80115d8 <tcp_output+0x308>
        pcb->unacked = seg;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115d0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80115d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d4:	623b      	str	r3, [r7, #32]
 80115d6:	e03f      	b.n	8011658 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80115d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	4618      	mov	r0, r3
 80115e0:	f7f8 ff4b 	bl	800a47a <lwip_htonl>
 80115e4:	4604      	mov	r4, r0
 80115e6:	6a3b      	ldr	r3, [r7, #32]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7f8 ff44 	bl	800a47a <lwip_htonl>
 80115f2:	4603      	mov	r3, r0
 80115f4:	1ae3      	subs	r3, r4, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	da24      	bge.n	8011644 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	3370      	adds	r3, #112	; 0x70
 80115fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011600:	e002      	b.n	8011608 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d011      	beq.n	8011634 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	68db      	ldr	r3, [r3, #12]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	4618      	mov	r0, r3
 801161a:	f7f8 ff2e 	bl	800a47a <lwip_htonl>
 801161e:	4604      	mov	r4, r0
 8011620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	4618      	mov	r0, r3
 8011628:	f7f8 ff27 	bl	800a47a <lwip_htonl>
 801162c:	4603      	mov	r3, r0
 801162e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011630:	2b00      	cmp	r3, #0
 8011632:	dbe6      	blt.n	8011602 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801163c:	69fb      	ldr	r3, [r7, #28]
 801163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011640:	601a      	str	r2, [r3, #0]
 8011642:	e009      	b.n	8011658 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011644:	6a3b      	ldr	r3, [r7, #32]
 8011646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011648:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801164a:	6a3b      	ldr	r3, [r7, #32]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	623b      	str	r3, [r7, #32]
 8011650:	e002      	b.n	8011658 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011652:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011654:	f7fb ff1a 	bl	800d48c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801165c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011660:	2b00      	cmp	r3, #0
 8011662:	d012      	beq.n	801168a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	4618      	mov	r0, r3
 801166c:	f7f8 ff05 	bl	800a47a <lwip_htonl>
 8011670:	4602      	mov	r2, r0
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011676:	1ad3      	subs	r3, r2, r3
 8011678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801167a:	8912      	ldrh	r2, [r2, #8]
 801167c:	4413      	add	r3, r2
  while (seg != NULL &&
 801167e:	69ba      	ldr	r2, [r7, #24]
 8011680:	429a      	cmp	r2, r3
 8011682:	f4bf aeda 	bcs.w	801143a <tcp_output+0x16a>
 8011686:	e000      	b.n	801168a <tcp_output+0x3ba>
      break;
 8011688:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801168e:	2b00      	cmp	r3, #0
 8011690:	d108      	bne.n	80116a4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801169a:	e004      	b.n	80116a6 <tcp_output+0x3d6>
    goto output_done;
 801169c:	bf00      	nop
 801169e:	e002      	b.n	80116a6 <tcp_output+0x3d6>
    goto output_done;
 80116a0:	bf00      	nop
 80116a2:	e000      	b.n	80116a6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80116a4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	8b5b      	ldrh	r3, [r3, #26]
 80116aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80116b4:	2300      	movs	r3, #0
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3728      	adds	r7, #40	; 0x28
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bdb0      	pop	{r4, r5, r7, pc}
 80116be:	bf00      	nop

080116c0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d106      	bne.n	80116dc <tcp_output_segment_busy+0x1c>
 80116ce:	4b09      	ldr	r3, [pc, #36]	; (80116f4 <tcp_output_segment_busy+0x34>)
 80116d0:	f240 529a 	movw	r2, #1434	; 0x59a
 80116d4:	4908      	ldr	r1, [pc, #32]	; (80116f8 <tcp_output_segment_busy+0x38>)
 80116d6:	4809      	ldr	r0, [pc, #36]	; (80116fc <tcp_output_segment_busy+0x3c>)
 80116d8:	f003 ffd2 	bl	8015680 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	7b9b      	ldrb	r3, [r3, #14]
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	d001      	beq.n	80116ea <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80116e6:	2301      	movs	r3, #1
 80116e8:	e000      	b.n	80116ec <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80116ea:	2300      	movs	r3, #0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3708      	adds	r7, #8
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	080185e8 	.word	0x080185e8
 80116f8:	08018b84 	.word	0x08018b84
 80116fc:	0801863c 	.word	0x0801863c

08011700 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011700:	b5b0      	push	{r4, r5, r7, lr}
 8011702:	b08c      	sub	sp, #48	; 0x30
 8011704:	af04      	add	r7, sp, #16
 8011706:	60f8      	str	r0, [r7, #12]
 8011708:	60b9      	str	r1, [r7, #8]
 801170a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d106      	bne.n	8011720 <tcp_output_segment+0x20>
 8011712:	4b64      	ldr	r3, [pc, #400]	; (80118a4 <tcp_output_segment+0x1a4>)
 8011714:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011718:	4963      	ldr	r1, [pc, #396]	; (80118a8 <tcp_output_segment+0x1a8>)
 801171a:	4864      	ldr	r0, [pc, #400]	; (80118ac <tcp_output_segment+0x1ac>)
 801171c:	f003 ffb0 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d106      	bne.n	8011734 <tcp_output_segment+0x34>
 8011726:	4b5f      	ldr	r3, [pc, #380]	; (80118a4 <tcp_output_segment+0x1a4>)
 8011728:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801172c:	4960      	ldr	r1, [pc, #384]	; (80118b0 <tcp_output_segment+0x1b0>)
 801172e:	485f      	ldr	r0, [pc, #380]	; (80118ac <tcp_output_segment+0x1ac>)
 8011730:	f003 ffa6 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d106      	bne.n	8011748 <tcp_output_segment+0x48>
 801173a:	4b5a      	ldr	r3, [pc, #360]	; (80118a4 <tcp_output_segment+0x1a4>)
 801173c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011740:	495c      	ldr	r1, [pc, #368]	; (80118b4 <tcp_output_segment+0x1b4>)
 8011742:	485a      	ldr	r0, [pc, #360]	; (80118ac <tcp_output_segment+0x1ac>)
 8011744:	f003 ff9c 	bl	8015680 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	f7ff ffb9 	bl	80116c0 <tcp_output_segment_busy>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d001      	beq.n	8011758 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011754:	2300      	movs	r3, #0
 8011756:	e0a0      	b.n	801189a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	68dc      	ldr	r4, [r3, #12]
 8011760:	4610      	mov	r0, r2
 8011762:	f7f8 fe8a 	bl	800a47a <lwip_htonl>
 8011766:	4603      	mov	r3, r0
 8011768:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	68dc      	ldr	r4, [r3, #12]
 8011772:	4610      	mov	r0, r2
 8011774:	f7f8 fe6c 	bl	800a450 <lwip_htons>
 8011778:	4603      	mov	r3, r0
 801177a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011784:	441a      	add	r2, r3
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	3314      	adds	r3, #20
 8011790:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	7a9b      	ldrb	r3, [r3, #10]
 8011796:	f003 0301 	and.w	r3, r3, #1
 801179a:	2b00      	cmp	r3, #0
 801179c:	d015      	beq.n	80117ca <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	3304      	adds	r3, #4
 80117a2:	461a      	mov	r2, r3
 80117a4:	6879      	ldr	r1, [r7, #4]
 80117a6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80117aa:	f7fc fa33 	bl	800dc14 <tcp_eff_send_mss_netif>
 80117ae:	4603      	mov	r3, r0
 80117b0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80117b2:	8b7b      	ldrh	r3, [r7, #26]
 80117b4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7f8 fe5e 	bl	800a47a <lwip_htonl>
 80117be:	4602      	mov	r2, r0
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	3304      	adds	r3, #4
 80117c8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	da02      	bge.n	80117da <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2200      	movs	r2, #0
 80117d8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d10c      	bne.n	80117fc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80117e2:	4b35      	ldr	r3, [pc, #212]	; (80118b8 <tcp_output_segment+0x1b8>)
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7f8 fe42 	bl	800a47a <lwip_htonl>
 80117f6:	4602      	mov	r2, r0
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	461a      	mov	r2, r3
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	8959      	ldrh	r1, [r3, #10]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	8b3a      	ldrh	r2, [r7, #24]
 8011818:	1a8a      	subs	r2, r1, r2
 801181a:	b292      	uxth	r2, r2
 801181c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	8919      	ldrh	r1, [r3, #8]
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	8b3a      	ldrh	r2, [r7, #24]
 801182a:	1a8a      	subs	r2, r1, r2
 801182c:	b292      	uxth	r2, r2
 801182e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	68d2      	ldr	r2, [r2, #12]
 8011838:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	2200      	movs	r2, #0
 8011840:	741a      	strb	r2, [r3, #16]
 8011842:	2200      	movs	r2, #0
 8011844:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	f103 0214 	add.w	r2, r3, #20
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	7a9b      	ldrb	r3, [r3, #10]
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	f003 0304 	and.w	r3, r3, #4
 8011858:	4413      	add	r3, r2
 801185a:	69fa      	ldr	r2, [r7, #28]
 801185c:	429a      	cmp	r2, r3
 801185e:	d006      	beq.n	801186e <tcp_output_segment+0x16e>
 8011860:	4b10      	ldr	r3, [pc, #64]	; (80118a4 <tcp_output_segment+0x1a4>)
 8011862:	f240 621c 	movw	r2, #1564	; 0x61c
 8011866:	4915      	ldr	r1, [pc, #84]	; (80118bc <tcp_output_segment+0x1bc>)
 8011868:	4810      	ldr	r0, [pc, #64]	; (80118ac <tcp_output_segment+0x1ac>)
 801186a:	f003 ff09 	bl	8015680 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6858      	ldr	r0, [r3, #4]
 8011872:	68b9      	ldr	r1, [r7, #8]
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	1d1c      	adds	r4, r3, #4
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	7add      	ldrb	r5, [r3, #11]
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	7a9b      	ldrb	r3, [r3, #10]
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	9202      	str	r2, [sp, #8]
 8011884:	2206      	movs	r2, #6
 8011886:	9201      	str	r2, [sp, #4]
 8011888:	9300      	str	r3, [sp, #0]
 801188a:	462b      	mov	r3, r5
 801188c:	4622      	mov	r2, r4
 801188e:	f002 fbb3 	bl	8013ff8 <ip4_output_if>
 8011892:	4603      	mov	r3, r0
 8011894:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801189a:	4618      	mov	r0, r3
 801189c:	3720      	adds	r7, #32
 801189e:	46bd      	mov	sp, r7
 80118a0:	bdb0      	pop	{r4, r5, r7, pc}
 80118a2:	bf00      	nop
 80118a4:	080185e8 	.word	0x080185e8
 80118a8:	08018bac 	.word	0x08018bac
 80118ac:	0801863c 	.word	0x0801863c
 80118b0:	08018bcc 	.word	0x08018bcc
 80118b4:	08018bec 	.word	0x08018bec
 80118b8:	2000b658 	.word	0x2000b658
 80118bc:	08018c10 	.word	0x08018c10

080118c0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80118c0:	b5b0      	push	{r4, r5, r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <tcp_rexmit_rto_prepare+0x1c>
 80118ce:	4b31      	ldr	r3, [pc, #196]	; (8011994 <tcp_rexmit_rto_prepare+0xd4>)
 80118d0:	f240 6263 	movw	r2, #1635	; 0x663
 80118d4:	4930      	ldr	r1, [pc, #192]	; (8011998 <tcp_rexmit_rto_prepare+0xd8>)
 80118d6:	4831      	ldr	r0, [pc, #196]	; (801199c <tcp_rexmit_rto_prepare+0xdc>)
 80118d8:	f003 fed2 	bl	8015680 <iprintf>

  if (pcb->unacked == NULL) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d102      	bne.n	80118ea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80118e4:	f06f 0305 	mvn.w	r3, #5
 80118e8:	e050      	b.n	801198c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ee:	60fb      	str	r3, [r7, #12]
 80118f0:	e00b      	b.n	801190a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f7ff fee4 	bl	80116c0 <tcp_output_segment_busy>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d002      	beq.n	8011904 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80118fe:	f06f 0305 	mvn.w	r3, #5
 8011902:	e043      	b.n	801198c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	60fb      	str	r3, [r7, #12]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d1ef      	bne.n	80118f2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011912:	68f8      	ldr	r0, [r7, #12]
 8011914:	f7ff fed4 	bl	80116c0 <tcp_output_segment_busy>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d002      	beq.n	8011924 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801191e:	f06f 0305 	mvn.w	r3, #5
 8011922:	e033      	b.n	801198c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	8b5b      	ldrh	r3, [r3, #26]
 801193e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	4618      	mov	r0, r3
 8011950:	f7f8 fd93 	bl	800a47a <lwip_htonl>
 8011954:	4604      	mov	r4, r0
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	891b      	ldrh	r3, [r3, #8]
 801195a:	461d      	mov	r5, r3
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	899b      	ldrh	r3, [r3, #12]
 8011962:	b29b      	uxth	r3, r3
 8011964:	4618      	mov	r0, r3
 8011966:	f7f8 fd73 	bl	800a450 <lwip_htons>
 801196a:	4603      	mov	r3, r0
 801196c:	b2db      	uxtb	r3, r3
 801196e:	f003 0303 	and.w	r3, r3, #3
 8011972:	2b00      	cmp	r3, #0
 8011974:	d001      	beq.n	801197a <tcp_rexmit_rto_prepare+0xba>
 8011976:	2301      	movs	r3, #1
 8011978:	e000      	b.n	801197c <tcp_rexmit_rto_prepare+0xbc>
 801197a:	2300      	movs	r3, #0
 801197c:	442b      	add	r3, r5
 801197e:	18e2      	adds	r2, r4, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801198a:	2300      	movs	r3, #0
}
 801198c:	4618      	mov	r0, r3
 801198e:	3710      	adds	r7, #16
 8011990:	46bd      	mov	sp, r7
 8011992:	bdb0      	pop	{r4, r5, r7, pc}
 8011994:	080185e8 	.word	0x080185e8
 8011998:	08018c24 	.word	0x08018c24
 801199c:	0801863c 	.word	0x0801863c

080119a0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d106      	bne.n	80119bc <tcp_rexmit_rto_commit+0x1c>
 80119ae:	4b0d      	ldr	r3, [pc, #52]	; (80119e4 <tcp_rexmit_rto_commit+0x44>)
 80119b0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80119b4:	490c      	ldr	r1, [pc, #48]	; (80119e8 <tcp_rexmit_rto_commit+0x48>)
 80119b6:	480d      	ldr	r0, [pc, #52]	; (80119ec <tcp_rexmit_rto_commit+0x4c>)
 80119b8:	f003 fe62 	bl	8015680 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119c2:	2bff      	cmp	r3, #255	; 0xff
 80119c4:	d007      	beq.n	80119d6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119cc:	3301      	adds	r3, #1
 80119ce:	b2da      	uxtb	r2, r3
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7ff fc7a 	bl	80112d0 <tcp_output>
}
 80119dc:	bf00      	nop
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	080185e8 	.word	0x080185e8
 80119e8:	08018c48 	.word	0x08018c48
 80119ec:	0801863c 	.word	0x0801863c

080119f0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d106      	bne.n	8011a0c <tcp_rexmit_rto+0x1c>
 80119fe:	4b0a      	ldr	r3, [pc, #40]	; (8011a28 <tcp_rexmit_rto+0x38>)
 8011a00:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011a04:	4909      	ldr	r1, [pc, #36]	; (8011a2c <tcp_rexmit_rto+0x3c>)
 8011a06:	480a      	ldr	r0, [pc, #40]	; (8011a30 <tcp_rexmit_rto+0x40>)
 8011a08:	f003 fe3a 	bl	8015680 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7ff ff57 	bl	80118c0 <tcp_rexmit_rto_prepare>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d102      	bne.n	8011a1e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f7ff ffc1 	bl	80119a0 <tcp_rexmit_rto_commit>
  }
}
 8011a1e:	bf00      	nop
 8011a20:	3708      	adds	r7, #8
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop
 8011a28:	080185e8 	.word	0x080185e8
 8011a2c:	08018c6c 	.word	0x08018c6c
 8011a30:	0801863c 	.word	0x0801863c

08011a34 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011a34:	b590      	push	{r4, r7, lr}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d106      	bne.n	8011a50 <tcp_rexmit+0x1c>
 8011a42:	4b2f      	ldr	r3, [pc, #188]	; (8011b00 <tcp_rexmit+0xcc>)
 8011a44:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011a48:	492e      	ldr	r1, [pc, #184]	; (8011b04 <tcp_rexmit+0xd0>)
 8011a4a:	482f      	ldr	r0, [pc, #188]	; (8011b08 <tcp_rexmit+0xd4>)
 8011a4c:	f003 fe18 	bl	8015680 <iprintf>

  if (pcb->unacked == NULL) {
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d102      	bne.n	8011a5e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011a58:	f06f 0305 	mvn.w	r3, #5
 8011a5c:	e04c      	b.n	8011af8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a62:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011a64:	68b8      	ldr	r0, [r7, #8]
 8011a66:	f7ff fe2b 	bl	80116c0 <tcp_output_segment_busy>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d002      	beq.n	8011a76 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011a70:	f06f 0305 	mvn.w	r3, #5
 8011a74:	e040      	b.n	8011af8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	336c      	adds	r3, #108	; 0x6c
 8011a82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a84:	e002      	b.n	8011a8c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d011      	beq.n	8011ab8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7f8 fcec 	bl	800a47a <lwip_htonl>
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	68db      	ldr	r3, [r3, #12]
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7f8 fce5 	bl	800a47a <lwip_htonl>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	dbe6      	blt.n	8011a86 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	68ba      	ldr	r2, [r7, #8]
 8011ac4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d103      	bne.n	8011ad6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011adc:	2bff      	cmp	r3, #255	; 0xff
 8011ade:	d007      	beq.n	8011af0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011af6:	2300      	movs	r3, #0
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3714      	adds	r7, #20
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd90      	pop	{r4, r7, pc}
 8011b00:	080185e8 	.word	0x080185e8
 8011b04:	08018c88 	.word	0x08018c88
 8011b08:	0801863c 	.word	0x0801863c

08011b0c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d106      	bne.n	8011b28 <tcp_rexmit_fast+0x1c>
 8011b1a:	4b2e      	ldr	r3, [pc, #184]	; (8011bd4 <tcp_rexmit_fast+0xc8>)
 8011b1c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011b20:	492d      	ldr	r1, [pc, #180]	; (8011bd8 <tcp_rexmit_fast+0xcc>)
 8011b22:	482e      	ldr	r0, [pc, #184]	; (8011bdc <tcp_rexmit_fast+0xd0>)
 8011b24:	f003 fdac 	bl	8015680 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d04d      	beq.n	8011bcc <tcp_rexmit_fast+0xc0>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	8b5b      	ldrh	r3, [r3, #26]
 8011b34:	f003 0304 	and.w	r3, r3, #4
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d147      	bne.n	8011bcc <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f7ff ff79 	bl	8011a34 <tcp_rexmit>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d141      	bne.n	8011bcc <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d207      	bcs.n	8011b68 <tcp_rexmit_fast+0x5c>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b5e:	0fda      	lsrs	r2, r3, #31
 8011b60:	4413      	add	r3, r2
 8011b62:	105b      	asrs	r3, r3, #1
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	e006      	b.n	8011b76 <tcp_rexmit_fast+0x6a>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b6e:	0fda      	lsrs	r2, r3, #31
 8011b70:	4413      	add	r3, r2
 8011b72:	105b      	asrs	r3, r3, #1
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011b82:	461a      	mov	r2, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b88:	005b      	lsls	r3, r3, #1
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d206      	bcs.n	8011b9c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	0049      	lsls	r1, r1, #1
 8011baa:	440b      	add	r3, r1
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	4413      	add	r3, r2
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	8b5b      	ldrh	r3, [r3, #26]
 8011bbc:	f043 0304 	orr.w	r3, r3, #4
 8011bc0:	b29a      	uxth	r2, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011bcc:	bf00      	nop
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	080185e8 	.word	0x080185e8
 8011bd8:	08018ca0 	.word	0x08018ca0
 8011bdc:	0801863c 	.word	0x0801863c

08011be0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b086      	sub	sp, #24
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	607b      	str	r3, [r7, #4]
 8011bea:	460b      	mov	r3, r1
 8011bec:	817b      	strh	r3, [r7, #10]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011bf2:	897a      	ldrh	r2, [r7, #10]
 8011bf4:	893b      	ldrh	r3, [r7, #8]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	3314      	adds	r3, #20
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c02:	4619      	mov	r1, r3
 8011c04:	2022      	movs	r0, #34	; 0x22
 8011c06:	f7f9 fceb 	bl	800b5e0 <pbuf_alloc>
 8011c0a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d04e      	beq.n	8011cb0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	895b      	ldrh	r3, [r3, #10]
 8011c16:	461a      	mov	r2, r3
 8011c18:	897b      	ldrh	r3, [r7, #10]
 8011c1a:	3314      	adds	r3, #20
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	da06      	bge.n	8011c2e <tcp_output_alloc_header_common+0x4e>
 8011c20:	4b26      	ldr	r3, [pc, #152]	; (8011cbc <tcp_output_alloc_header_common+0xdc>)
 8011c22:	f240 7224 	movw	r2, #1828	; 0x724
 8011c26:	4926      	ldr	r1, [pc, #152]	; (8011cc0 <tcp_output_alloc_header_common+0xe0>)
 8011c28:	4826      	ldr	r0, [pc, #152]	; (8011cc4 <tcp_output_alloc_header_common+0xe4>)
 8011c2a:	f003 fd29 	bl	8015680 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011c34:	8c3b      	ldrh	r3, [r7, #32]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7f8 fc0a 	bl	800a450 <lwip_htons>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	461a      	mov	r2, r3
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7f8 fc02 	bl	800a450 <lwip_htons>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	461a      	mov	r2, r3
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011c5a:	68f8      	ldr	r0, [r7, #12]
 8011c5c:	f7f8 fc0d 	bl	800a47a <lwip_htonl>
 8011c60:	4602      	mov	r2, r0
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011c66:	897b      	ldrh	r3, [r7, #10]
 8011c68:	089b      	lsrs	r3, r3, #2
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	3305      	adds	r3, #5
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	031b      	lsls	r3, r3, #12
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7f8 fbe6 	bl	800a450 <lwip_htons>
 8011c84:	4603      	mov	r3, r0
 8011c86:	461a      	mov	r2, r3
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011c8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7f8 fbde 	bl	800a450 <lwip_htons>
 8011c94:	4603      	mov	r3, r0
 8011c96:	461a      	mov	r2, r3
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	741a      	strb	r2, [r3, #16]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	749a      	strb	r2, [r3, #18]
 8011cac:	2200      	movs	r2, #0
 8011cae:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011cb0:	697b      	ldr	r3, [r7, #20]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3718      	adds	r7, #24
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	080185e8 	.word	0x080185e8
 8011cc0:	08018cc0 	.word	0x08018cc0
 8011cc4:	0801863c 	.word	0x0801863c

08011cc8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011cc8:	b5b0      	push	{r4, r5, r7, lr}
 8011cca:	b08a      	sub	sp, #40	; 0x28
 8011ccc:	af04      	add	r7, sp, #16
 8011cce:	60f8      	str	r0, [r7, #12]
 8011cd0:	607b      	str	r3, [r7, #4]
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	817b      	strh	r3, [r7, #10]
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d106      	bne.n	8011cee <tcp_output_alloc_header+0x26>
 8011ce0:	4b15      	ldr	r3, [pc, #84]	; (8011d38 <tcp_output_alloc_header+0x70>)
 8011ce2:	f240 7242 	movw	r2, #1858	; 0x742
 8011ce6:	4915      	ldr	r1, [pc, #84]	; (8011d3c <tcp_output_alloc_header+0x74>)
 8011ce8:	4815      	ldr	r0, [pc, #84]	; (8011d40 <tcp_output_alloc_header+0x78>)
 8011cea:	f003 fcc9 	bl	8015680 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	8adb      	ldrh	r3, [r3, #22]
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	8b12      	ldrh	r2, [r2, #24]
 8011cfa:	68f9      	ldr	r1, [r7, #12]
 8011cfc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011cfe:	893d      	ldrh	r5, [r7, #8]
 8011d00:	897c      	ldrh	r4, [r7, #10]
 8011d02:	9103      	str	r1, [sp, #12]
 8011d04:	2110      	movs	r1, #16
 8011d06:	9102      	str	r1, [sp, #8]
 8011d08:	9201      	str	r2, [sp, #4]
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	462a      	mov	r2, r5
 8011d10:	4621      	mov	r1, r4
 8011d12:	f7ff ff65 	bl	8011be0 <tcp_output_alloc_header_common>
 8011d16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d006      	beq.n	8011d2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d22:	68fa      	ldr	r2, [r7, #12]
 8011d24:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011d26:	441a      	add	r2, r3
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011d2c:	697b      	ldr	r3, [r7, #20]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3718      	adds	r7, #24
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bdb0      	pop	{r4, r5, r7, pc}
 8011d36:	bf00      	nop
 8011d38:	080185e8 	.word	0x080185e8
 8011d3c:	08018cf0 	.word	0x08018cf0
 8011d40:	0801863c 	.word	0x0801863c

08011d44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b088      	sub	sp, #32
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	4611      	mov	r1, r2
 8011d50:	461a      	mov	r2, r3
 8011d52:	460b      	mov	r3, r1
 8011d54:	71fb      	strb	r3, [r7, #7]
 8011d56:	4613      	mov	r3, r2
 8011d58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d106      	bne.n	8011d72 <tcp_output_fill_options+0x2e>
 8011d64:	4b13      	ldr	r3, [pc, #76]	; (8011db4 <tcp_output_fill_options+0x70>)
 8011d66:	f240 7256 	movw	r2, #1878	; 0x756
 8011d6a:	4913      	ldr	r1, [pc, #76]	; (8011db8 <tcp_output_fill_options+0x74>)
 8011d6c:	4813      	ldr	r0, [pc, #76]	; (8011dbc <tcp_output_fill_options+0x78>)
 8011d6e:	f003 fc87 	bl	8015680 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	3314      	adds	r3, #20
 8011d7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	f103 0214 	add.w	r2, r3, #20
 8011d84:	8bfb      	ldrh	r3, [r7, #30]
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4619      	mov	r1, r3
 8011d8a:	79fb      	ldrb	r3, [r7, #7]
 8011d8c:	009b      	lsls	r3, r3, #2
 8011d8e:	f003 0304 	and.w	r3, r3, #4
 8011d92:	440b      	add	r3, r1
 8011d94:	4413      	add	r3, r2
 8011d96:	697a      	ldr	r2, [r7, #20]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d006      	beq.n	8011daa <tcp_output_fill_options+0x66>
 8011d9c:	4b05      	ldr	r3, [pc, #20]	; (8011db4 <tcp_output_fill_options+0x70>)
 8011d9e:	f240 7275 	movw	r2, #1909	; 0x775
 8011da2:	4907      	ldr	r1, [pc, #28]	; (8011dc0 <tcp_output_fill_options+0x7c>)
 8011da4:	4805      	ldr	r0, [pc, #20]	; (8011dbc <tcp_output_fill_options+0x78>)
 8011da6:	f003 fc6b 	bl	8015680 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011daa:	bf00      	nop
 8011dac:	3720      	adds	r7, #32
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	080185e8 	.word	0x080185e8
 8011db8:	08018d18 	.word	0x08018d18
 8011dbc:	0801863c 	.word	0x0801863c
 8011dc0:	08018c10 	.word	0x08018c10

08011dc4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b08a      	sub	sp, #40	; 0x28
 8011dc8:	af04      	add	r7, sp, #16
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	607a      	str	r2, [r7, #4]
 8011dd0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d106      	bne.n	8011de6 <tcp_output_control_segment+0x22>
 8011dd8:	4b1c      	ldr	r3, [pc, #112]	; (8011e4c <tcp_output_control_segment+0x88>)
 8011dda:	f240 7287 	movw	r2, #1927	; 0x787
 8011dde:	491c      	ldr	r1, [pc, #112]	; (8011e50 <tcp_output_control_segment+0x8c>)
 8011de0:	481c      	ldr	r0, [pc, #112]	; (8011e54 <tcp_output_control_segment+0x90>)
 8011de2:	f003 fc4d 	bl	8015680 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011de6:	683a      	ldr	r2, [r7, #0]
 8011de8:	6879      	ldr	r1, [r7, #4]
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f7fe fad6 	bl	801039c <tcp_route>
 8011df0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d102      	bne.n	8011dfe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011df8:	23fc      	movs	r3, #252	; 0xfc
 8011dfa:	75fb      	strb	r3, [r7, #23]
 8011dfc:	e01c      	b.n	8011e38 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d006      	beq.n	8011e12 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	7adb      	ldrb	r3, [r3, #11]
 8011e08:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	7a9b      	ldrb	r3, [r3, #10]
 8011e0e:	757b      	strb	r3, [r7, #21]
 8011e10:	e003      	b.n	8011e1a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011e12:	23ff      	movs	r3, #255	; 0xff
 8011e14:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011e16:	2300      	movs	r3, #0
 8011e18:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011e1a:	7dba      	ldrb	r2, [r7, #22]
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	9302      	str	r3, [sp, #8]
 8011e20:	2306      	movs	r3, #6
 8011e22:	9301      	str	r3, [sp, #4]
 8011e24:	7d7b      	ldrb	r3, [r7, #21]
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	4613      	mov	r3, r2
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	6879      	ldr	r1, [r7, #4]
 8011e2e:	68b8      	ldr	r0, [r7, #8]
 8011e30:	f002 f8e2 	bl	8013ff8 <ip4_output_if>
 8011e34:	4603      	mov	r3, r0
 8011e36:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011e38:	68b8      	ldr	r0, [r7, #8]
 8011e3a:	f7f9 feb1 	bl	800bba0 <pbuf_free>
  return err;
 8011e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3718      	adds	r7, #24
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	080185e8 	.word	0x080185e8
 8011e50:	08018d40 	.word	0x08018d40
 8011e54:	0801863c 	.word	0x0801863c

08011e58 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011e58:	b590      	push	{r4, r7, lr}
 8011e5a:	b08b      	sub	sp, #44	; 0x2c
 8011e5c:	af04      	add	r7, sp, #16
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	607a      	str	r2, [r7, #4]
 8011e64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d106      	bne.n	8011e7a <tcp_rst+0x22>
 8011e6c:	4b1f      	ldr	r3, [pc, #124]	; (8011eec <tcp_rst+0x94>)
 8011e6e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011e72:	491f      	ldr	r1, [pc, #124]	; (8011ef0 <tcp_rst+0x98>)
 8011e74:	481f      	ldr	r0, [pc, #124]	; (8011ef4 <tcp_rst+0x9c>)
 8011e76:	f003 fc03 	bl	8015680 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d106      	bne.n	8011e8e <tcp_rst+0x36>
 8011e80:	4b1a      	ldr	r3, [pc, #104]	; (8011eec <tcp_rst+0x94>)
 8011e82:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011e86:	491c      	ldr	r1, [pc, #112]	; (8011ef8 <tcp_rst+0xa0>)
 8011e88:	481a      	ldr	r0, [pc, #104]	; (8011ef4 <tcp_rst+0x9c>)
 8011e8a:	f003 fbf9 	bl	8015680 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e8e:	2300      	movs	r3, #0
 8011e90:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011e92:	f246 0308 	movw	r3, #24584	; 0x6008
 8011e96:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011e98:	7dfb      	ldrb	r3, [r7, #23]
 8011e9a:	b29c      	uxth	r4, r3
 8011e9c:	68b8      	ldr	r0, [r7, #8]
 8011e9e:	f7f8 faec 	bl	800a47a <lwip_htonl>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	8abb      	ldrh	r3, [r7, #20]
 8011ea6:	9303      	str	r3, [sp, #12]
 8011ea8:	2314      	movs	r3, #20
 8011eaa:	9302      	str	r3, [sp, #8]
 8011eac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011eae:	9301      	str	r3, [sp, #4]
 8011eb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	4613      	mov	r3, r2
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	4621      	mov	r1, r4
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ff fe90 	bl	8011be0 <tcp_output_alloc_header_common>
 8011ec0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d00c      	beq.n	8011ee2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011ec8:	7dfb      	ldrb	r3, [r7, #23]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	6939      	ldr	r1, [r7, #16]
 8011ece:	68f8      	ldr	r0, [r7, #12]
 8011ed0:	f7ff ff38 	bl	8011d44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed6:	683a      	ldr	r2, [r7, #0]
 8011ed8:	6939      	ldr	r1, [r7, #16]
 8011eda:	68f8      	ldr	r0, [r7, #12]
 8011edc:	f7ff ff72 	bl	8011dc4 <tcp_output_control_segment>
 8011ee0:	e000      	b.n	8011ee4 <tcp_rst+0x8c>
    return;
 8011ee2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011ee4:	371c      	adds	r7, #28
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd90      	pop	{r4, r7, pc}
 8011eea:	bf00      	nop
 8011eec:	080185e8 	.word	0x080185e8
 8011ef0:	08018d6c 	.word	0x08018d6c
 8011ef4:	0801863c 	.word	0x0801863c
 8011ef8:	08018d88 	.word	0x08018d88

08011efc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011efc:	b590      	push	{r4, r7, lr}
 8011efe:	b087      	sub	sp, #28
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011f04:	2300      	movs	r3, #0
 8011f06:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d106      	bne.n	8011f20 <tcp_send_empty_ack+0x24>
 8011f12:	4b28      	ldr	r3, [pc, #160]	; (8011fb4 <tcp_send_empty_ack+0xb8>)
 8011f14:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011f18:	4927      	ldr	r1, [pc, #156]	; (8011fb8 <tcp_send_empty_ack+0xbc>)
 8011f1a:	4828      	ldr	r0, [pc, #160]	; (8011fbc <tcp_send_empty_ack+0xc0>)
 8011f1c:	f003 fbb0 	bl	8015680 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011f20:	7dfb      	ldrb	r3, [r7, #23]
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	f003 0304 	and.w	r3, r3, #4
 8011f2a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011f2c:	7d7b      	ldrb	r3, [r7, #21]
 8011f2e:	b29c      	uxth	r4, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7f8 faa0 	bl	800a47a <lwip_htonl>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	4621      	mov	r1, r4
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff fec1 	bl	8011cc8 <tcp_output_alloc_header>
 8011f46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d109      	bne.n	8011f62 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	8b5b      	ldrh	r3, [r3, #26]
 8011f52:	f043 0303 	orr.w	r3, r3, #3
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011f5c:	f06f 0301 	mvn.w	r3, #1
 8011f60:	e023      	b.n	8011faa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011f62:	7dbb      	ldrb	r3, [r7, #22]
 8011f64:	7dfa      	ldrb	r2, [r7, #23]
 8011f66:	6939      	ldr	r1, [r7, #16]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff feeb 	bl	8011d44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	3304      	adds	r3, #4
 8011f74:	6939      	ldr	r1, [r7, #16]
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff ff24 	bl	8011dc4 <tcp_output_control_segment>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d007      	beq.n	8011f98 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	8b5b      	ldrh	r3, [r3, #26]
 8011f8c:	f043 0303 	orr.w	r3, r3, #3
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	835a      	strh	r2, [r3, #26]
 8011f96:	e006      	b.n	8011fa6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	8b5b      	ldrh	r3, [r3, #26]
 8011f9c:	f023 0303 	bic.w	r3, r3, #3
 8011fa0:	b29a      	uxth	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	371c      	adds	r7, #28
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd90      	pop	{r4, r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	080185e8 	.word	0x080185e8
 8011fb8:	08018da4 	.word	0x08018da4
 8011fbc:	0801863c 	.word	0x0801863c

08011fc0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011fc0:	b590      	push	{r4, r7, lr}
 8011fc2:	b087      	sub	sp, #28
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011fc8:	2300      	movs	r3, #0
 8011fca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d106      	bne.n	8011fe0 <tcp_keepalive+0x20>
 8011fd2:	4b18      	ldr	r3, [pc, #96]	; (8012034 <tcp_keepalive+0x74>)
 8011fd4:	f640 0224 	movw	r2, #2084	; 0x824
 8011fd8:	4917      	ldr	r1, [pc, #92]	; (8012038 <tcp_keepalive+0x78>)
 8011fda:	4818      	ldr	r0, [pc, #96]	; (801203c <tcp_keepalive+0x7c>)
 8011fdc:	f003 fb50 	bl	8015680 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011fe0:	7dfb      	ldrb	r3, [r7, #23]
 8011fe2:	b29c      	uxth	r4, r3
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fe8:	3b01      	subs	r3, #1
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7f8 fa45 	bl	800a47a <lwip_htonl>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	4621      	mov	r1, r4
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7ff fe66 	bl	8011cc8 <tcp_output_alloc_header>
 8011ffc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d102      	bne.n	801200a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012004:	f04f 33ff 	mov.w	r3, #4294967295
 8012008:	e010      	b.n	801202c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801200a:	7dfb      	ldrb	r3, [r7, #23]
 801200c:	2200      	movs	r2, #0
 801200e:	6939      	ldr	r1, [r7, #16]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff fe97 	bl	8011d44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	3304      	adds	r3, #4
 801201c:	6939      	ldr	r1, [r7, #16]
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f7ff fed0 	bl	8011dc4 <tcp_output_control_segment>
 8012024:	4603      	mov	r3, r0
 8012026:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801202c:	4618      	mov	r0, r3
 801202e:	371c      	adds	r7, #28
 8012030:	46bd      	mov	sp, r7
 8012032:	bd90      	pop	{r4, r7, pc}
 8012034:	080185e8 	.word	0x080185e8
 8012038:	08018dc4 	.word	0x08018dc4
 801203c:	0801863c 	.word	0x0801863c

08012040 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012040:	b590      	push	{r4, r7, lr}
 8012042:	b08b      	sub	sp, #44	; 0x2c
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012048:	2300      	movs	r3, #0
 801204a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d106      	bne.n	8012062 <tcp_zero_window_probe+0x22>
 8012054:	4b4c      	ldr	r3, [pc, #304]	; (8012188 <tcp_zero_window_probe+0x148>)
 8012056:	f640 024f 	movw	r2, #2127	; 0x84f
 801205a:	494c      	ldr	r1, [pc, #304]	; (801218c <tcp_zero_window_probe+0x14c>)
 801205c:	484c      	ldr	r0, [pc, #304]	; (8012190 <tcp_zero_window_probe+0x150>)
 801205e:	f003 fb0f 	bl	8015680 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012066:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012068:	6a3b      	ldr	r3, [r7, #32]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d101      	bne.n	8012072 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801206e:	2300      	movs	r3, #0
 8012070:	e086      	b.n	8012180 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012078:	2bff      	cmp	r3, #255	; 0xff
 801207a:	d007      	beq.n	801208c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012082:	3301      	adds	r3, #1
 8012084:	b2da      	uxtb	r2, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801208c:	6a3b      	ldr	r3, [r7, #32]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	899b      	ldrh	r3, [r3, #12]
 8012092:	b29b      	uxth	r3, r3
 8012094:	4618      	mov	r0, r3
 8012096:	f7f8 f9db 	bl	800a450 <lwip_htons>
 801209a:	4603      	mov	r3, r0
 801209c:	b2db      	uxtb	r3, r3
 801209e:	f003 0301 	and.w	r3, r3, #1
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d005      	beq.n	80120b2 <tcp_zero_window_probe+0x72>
 80120a6:	6a3b      	ldr	r3, [r7, #32]
 80120a8:	891b      	ldrh	r3, [r3, #8]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d101      	bne.n	80120b2 <tcp_zero_window_probe+0x72>
 80120ae:	2301      	movs	r3, #1
 80120b0:	e000      	b.n	80120b4 <tcp_zero_window_probe+0x74>
 80120b2:	2300      	movs	r3, #0
 80120b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80120b6:	7ffb      	ldrb	r3, [r7, #31]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	bf0c      	ite	eq
 80120bc:	2301      	moveq	r3, #1
 80120be:	2300      	movne	r3, #0
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80120c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120c8:	b299      	uxth	r1, r3
 80120ca:	6a3b      	ldr	r3, [r7, #32]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	8bba      	ldrh	r2, [r7, #28]
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7ff fdf8 	bl	8011cc8 <tcp_output_alloc_header>
 80120d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80120da:	69bb      	ldr	r3, [r7, #24]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d102      	bne.n	80120e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80120e0:	f04f 33ff 	mov.w	r3, #4294967295
 80120e4:	e04c      	b.n	8012180 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80120e6:	69bb      	ldr	r3, [r7, #24]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80120ec:	7ffb      	ldrb	r3, [r7, #31]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d011      	beq.n	8012116 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	899b      	ldrh	r3, [r3, #12]
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	b21b      	sxth	r3, r3
 80120fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80120fe:	b21c      	sxth	r4, r3
 8012100:	2011      	movs	r0, #17
 8012102:	f7f8 f9a5 	bl	800a450 <lwip_htons>
 8012106:	4603      	mov	r3, r0
 8012108:	b21b      	sxth	r3, r3
 801210a:	4323      	orrs	r3, r4
 801210c:	b21b      	sxth	r3, r3
 801210e:	b29a      	uxth	r2, r3
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	819a      	strh	r2, [r3, #12]
 8012114:	e010      	b.n	8012138 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	3314      	adds	r3, #20
 801211c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801211e:	6a3b      	ldr	r3, [r7, #32]
 8012120:	6858      	ldr	r0, [r3, #4]
 8012122:	6a3b      	ldr	r3, [r7, #32]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	891a      	ldrh	r2, [r3, #8]
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	891b      	ldrh	r3, [r3, #8]
 801212c:	1ad3      	subs	r3, r2, r3
 801212e:	b29b      	uxth	r3, r3
 8012130:	2201      	movs	r2, #1
 8012132:	6939      	ldr	r1, [r7, #16]
 8012134:	f7f9 ff2a 	bl	800bf8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012138:	6a3b      	ldr	r3, [r7, #32]
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	4618      	mov	r0, r3
 8012140:	f7f8 f99b 	bl	800a47a <lwip_htonl>
 8012144:	4603      	mov	r3, r0
 8012146:	3301      	adds	r3, #1
 8012148:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	2b00      	cmp	r3, #0
 8012154:	da02      	bge.n	801215c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801215c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012160:	2200      	movs	r2, #0
 8012162:	69b9      	ldr	r1, [r7, #24]
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7ff fded 	bl	8011d44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	3304      	adds	r3, #4
 8012170:	69b9      	ldr	r1, [r7, #24]
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f7ff fe26 	bl	8011dc4 <tcp_output_control_segment>
 8012178:	4603      	mov	r3, r0
 801217a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801217c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012180:	4618      	mov	r0, r3
 8012182:	372c      	adds	r7, #44	; 0x2c
 8012184:	46bd      	mov	sp, r7
 8012186:	bd90      	pop	{r4, r7, pc}
 8012188:	080185e8 	.word	0x080185e8
 801218c:	08018de0 	.word	0x08018de0
 8012190:	0801863c 	.word	0x0801863c

08012194 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801219c:	f7f9 ffe4 	bl	800c168 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80121a0:	4b0a      	ldr	r3, [pc, #40]	; (80121cc <tcpip_tcp_timer+0x38>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d103      	bne.n	80121b0 <tcpip_tcp_timer+0x1c>
 80121a8:	4b09      	ldr	r3, [pc, #36]	; (80121d0 <tcpip_tcp_timer+0x3c>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d005      	beq.n	80121bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121b0:	2200      	movs	r2, #0
 80121b2:	4908      	ldr	r1, [pc, #32]	; (80121d4 <tcpip_tcp_timer+0x40>)
 80121b4:	20fa      	movs	r0, #250	; 0xfa
 80121b6:	f000 f8f1 	bl	801239c <sys_timeout>
 80121ba:	e002      	b.n	80121c2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80121bc:	4b06      	ldr	r3, [pc, #24]	; (80121d8 <tcpip_tcp_timer+0x44>)
 80121be:	2200      	movs	r2, #0
 80121c0:	601a      	str	r2, [r3, #0]
  }
}
 80121c2:	bf00      	nop
 80121c4:	3708      	adds	r7, #8
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	2000b654 	.word	0x2000b654
 80121d0:	2000b664 	.word	0x2000b664
 80121d4:	08012195 	.word	0x08012195
 80121d8:	20004b20 	.word	0x20004b20

080121dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80121e0:	4b0a      	ldr	r3, [pc, #40]	; (801220c <tcp_timer_needed+0x30>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d10f      	bne.n	8012208 <tcp_timer_needed+0x2c>
 80121e8:	4b09      	ldr	r3, [pc, #36]	; (8012210 <tcp_timer_needed+0x34>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d103      	bne.n	80121f8 <tcp_timer_needed+0x1c>
 80121f0:	4b08      	ldr	r3, [pc, #32]	; (8012214 <tcp_timer_needed+0x38>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d007      	beq.n	8012208 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80121f8:	4b04      	ldr	r3, [pc, #16]	; (801220c <tcp_timer_needed+0x30>)
 80121fa:	2201      	movs	r2, #1
 80121fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121fe:	2200      	movs	r2, #0
 8012200:	4905      	ldr	r1, [pc, #20]	; (8012218 <tcp_timer_needed+0x3c>)
 8012202:	20fa      	movs	r0, #250	; 0xfa
 8012204:	f000 f8ca 	bl	801239c <sys_timeout>
  }
}
 8012208:	bf00      	nop
 801220a:	bd80      	pop	{r7, pc}
 801220c:	20004b20 	.word	0x20004b20
 8012210:	2000b654 	.word	0x2000b654
 8012214:	2000b664 	.word	0x2000b664
 8012218:	08012195 	.word	0x08012195

0801221c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012228:	200a      	movs	r0, #10
 801222a:	f7f8 fdc7 	bl	800adbc <memp_malloc>
 801222e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d109      	bne.n	801224a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d151      	bne.n	80122e0 <sys_timeout_abs+0xc4>
 801223c:	4b2a      	ldr	r3, [pc, #168]	; (80122e8 <sys_timeout_abs+0xcc>)
 801223e:	22be      	movs	r2, #190	; 0xbe
 8012240:	492a      	ldr	r1, [pc, #168]	; (80122ec <sys_timeout_abs+0xd0>)
 8012242:	482b      	ldr	r0, [pc, #172]	; (80122f0 <sys_timeout_abs+0xd4>)
 8012244:	f003 fa1c 	bl	8015680 <iprintf>
    return;
 8012248:	e04a      	b.n	80122e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	2200      	movs	r2, #0
 801224e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	68ba      	ldr	r2, [r7, #8]
 8012254:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	68fa      	ldr	r2, [r7, #12]
 8012260:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012262:	4b24      	ldr	r3, [pc, #144]	; (80122f4 <sys_timeout_abs+0xd8>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d103      	bne.n	8012272 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801226a:	4a22      	ldr	r2, [pc, #136]	; (80122f4 <sys_timeout_abs+0xd8>)
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	6013      	str	r3, [r2, #0]
    return;
 8012270:	e037      	b.n	80122e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	685a      	ldr	r2, [r3, #4]
 8012276:	4b1f      	ldr	r3, [pc, #124]	; (80122f4 <sys_timeout_abs+0xd8>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	0fdb      	lsrs	r3, r3, #31
 8012280:	f003 0301 	and.w	r3, r3, #1
 8012284:	b2db      	uxtb	r3, r3
 8012286:	2b00      	cmp	r3, #0
 8012288:	d007      	beq.n	801229a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801228a:	4b1a      	ldr	r3, [pc, #104]	; (80122f4 <sys_timeout_abs+0xd8>)
 801228c:	681a      	ldr	r2, [r3, #0]
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012292:	4a18      	ldr	r2, [pc, #96]	; (80122f4 <sys_timeout_abs+0xd8>)
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	6013      	str	r3, [r2, #0]
 8012298:	e023      	b.n	80122e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801229a:	4b16      	ldr	r3, [pc, #88]	; (80122f4 <sys_timeout_abs+0xd8>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	617b      	str	r3, [r7, #20]
 80122a0:	e01a      	b.n	80122d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d00b      	beq.n	80122c2 <sys_timeout_abs+0xa6>
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	685a      	ldr	r2, [r3, #4]
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	1ad3      	subs	r3, r2, r3
 80122b6:	0fdb      	lsrs	r3, r3, #31
 80122b8:	f003 0301 	and.w	r3, r3, #1
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d007      	beq.n	80122d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	693a      	ldr	r2, [r7, #16]
 80122ce:	601a      	str	r2, [r3, #0]
        break;
 80122d0:	e007      	b.n	80122e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	617b      	str	r3, [r7, #20]
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d1e1      	bne.n	80122a2 <sys_timeout_abs+0x86>
 80122de:	e000      	b.n	80122e2 <sys_timeout_abs+0xc6>
    return;
 80122e0:	bf00      	nop
      }
    }
  }
}
 80122e2:	3718      	adds	r7, #24
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	08018e04 	.word	0x08018e04
 80122ec:	08018e38 	.word	0x08018e38
 80122f0:	08018e78 	.word	0x08018e78
 80122f4:	20004b18 	.word	0x20004b18

080122f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b086      	sub	sp, #24
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	4798      	blx	r3

  now = sys_now();
 801230a:	f7f1 fdbd 	bl	8003e88 <sys_now>
 801230e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	4b0f      	ldr	r3, [pc, #60]	; (8012354 <lwip_cyclic_timer+0x5c>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4413      	add	r3, r2
 801231a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	0fdb      	lsrs	r3, r3, #31
 8012324:	f003 0301 	and.w	r3, r3, #1
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	d009      	beq.n	8012342 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	4413      	add	r3, r2
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	4907      	ldr	r1, [pc, #28]	; (8012358 <lwip_cyclic_timer+0x60>)
 801233a:	4618      	mov	r0, r3
 801233c:	f7ff ff6e 	bl	801221c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012340:	e004      	b.n	801234c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	4904      	ldr	r1, [pc, #16]	; (8012358 <lwip_cyclic_timer+0x60>)
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f7ff ff68 	bl	801221c <sys_timeout_abs>
}
 801234c:	bf00      	nop
 801234e:	3718      	adds	r7, #24
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	20004b1c 	.word	0x20004b1c
 8012358:	080122f9 	.word	0x080122f9

0801235c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012362:	2301      	movs	r3, #1
 8012364:	607b      	str	r3, [r7, #4]
 8012366:	e00e      	b.n	8012386 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012368:	4a0a      	ldr	r2, [pc, #40]	; (8012394 <sys_timeouts_init+0x38>)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	00db      	lsls	r3, r3, #3
 8012374:	4a07      	ldr	r2, [pc, #28]	; (8012394 <sys_timeouts_init+0x38>)
 8012376:	4413      	add	r3, r2
 8012378:	461a      	mov	r2, r3
 801237a:	4907      	ldr	r1, [pc, #28]	; (8012398 <sys_timeouts_init+0x3c>)
 801237c:	f000 f80e 	bl	801239c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	3301      	adds	r3, #1
 8012384:	607b      	str	r3, [r7, #4]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2b02      	cmp	r3, #2
 801238a:	d9ed      	bls.n	8012368 <sys_timeouts_init+0xc>
  }
}
 801238c:	bf00      	nop
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	08019a4c 	.word	0x08019a4c
 8012398:	080122f9 	.word	0x080122f9

0801239c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b086      	sub	sp, #24
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123ae:	d306      	bcc.n	80123be <sys_timeout+0x22>
 80123b0:	4b0a      	ldr	r3, [pc, #40]	; (80123dc <sys_timeout+0x40>)
 80123b2:	f240 1229 	movw	r2, #297	; 0x129
 80123b6:	490a      	ldr	r1, [pc, #40]	; (80123e0 <sys_timeout+0x44>)
 80123b8:	480a      	ldr	r0, [pc, #40]	; (80123e4 <sys_timeout+0x48>)
 80123ba:	f003 f961 	bl	8015680 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80123be:	f7f1 fd63 	bl	8003e88 <sys_now>
 80123c2:	4602      	mov	r2, r0
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	4413      	add	r3, r2
 80123c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	68b9      	ldr	r1, [r7, #8]
 80123ce:	6978      	ldr	r0, [r7, #20]
 80123d0:	f7ff ff24 	bl	801221c <sys_timeout_abs>
#endif
}
 80123d4:	bf00      	nop
 80123d6:	3718      	adds	r7, #24
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	08018e04 	.word	0x08018e04
 80123e0:	08018ea0 	.word	0x08018ea0
 80123e4:	08018e78 	.word	0x08018e78

080123e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80123ee:	f7f1 fd4b 	bl	8003e88 <sys_now>
 80123f2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80123f4:	4b17      	ldr	r3, [pc, #92]	; (8012454 <sys_check_timeouts+0x6c>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d022      	beq.n	8012446 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	1ad3      	subs	r3, r2, r3
 8012408:	0fdb      	lsrs	r3, r3, #31
 801240a:	f003 0301 	and.w	r3, r3, #1
 801240e:	b2db      	uxtb	r3, r3
 8012410:	2b00      	cmp	r3, #0
 8012412:	d11a      	bne.n	801244a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	4a0e      	ldr	r2, [pc, #56]	; (8012454 <sys_check_timeouts+0x6c>)
 801241a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	689b      	ldr	r3, [r3, #8]
 8012420:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	4a0a      	ldr	r2, [pc, #40]	; (8012458 <sys_check_timeouts+0x70>)
 801242e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012430:	68b9      	ldr	r1, [r7, #8]
 8012432:	200a      	movs	r0, #10
 8012434:	f7f8 fd14 	bl	800ae60 <memp_free>
    if (handler != NULL) {
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d0da      	beq.n	80123f4 <sys_check_timeouts+0xc>
      handler(arg);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6838      	ldr	r0, [r7, #0]
 8012442:	4798      	blx	r3
  do {
 8012444:	e7d6      	b.n	80123f4 <sys_check_timeouts+0xc>
      return;
 8012446:	bf00      	nop
 8012448:	e000      	b.n	801244c <sys_check_timeouts+0x64>
      return;
 801244a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	20004b18 	.word	0x20004b18
 8012458:	20004b1c 	.word	0x20004b1c

0801245c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012462:	4b16      	ldr	r3, [pc, #88]	; (80124bc <sys_timeouts_sleeptime+0x60>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d102      	bne.n	8012470 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801246a:	f04f 33ff 	mov.w	r3, #4294967295
 801246e:	e020      	b.n	80124b2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012470:	f7f1 fd0a 	bl	8003e88 <sys_now>
 8012474:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012476:	4b11      	ldr	r3, [pc, #68]	; (80124bc <sys_timeouts_sleeptime+0x60>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	685a      	ldr	r2, [r3, #4]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	0fdb      	lsrs	r3, r3, #31
 8012482:	f003 0301 	and.w	r3, r3, #1
 8012486:	b2db      	uxtb	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	d001      	beq.n	8012490 <sys_timeouts_sleeptime+0x34>
    return 0;
 801248c:	2300      	movs	r3, #0
 801248e:	e010      	b.n	80124b2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012490:	4b0a      	ldr	r3, [pc, #40]	; (80124bc <sys_timeouts_sleeptime+0x60>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	685a      	ldr	r2, [r3, #4]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	1ad3      	subs	r3, r2, r3
 801249a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	da06      	bge.n	80124b0 <sys_timeouts_sleeptime+0x54>
 80124a2:	4b07      	ldr	r3, [pc, #28]	; (80124c0 <sys_timeouts_sleeptime+0x64>)
 80124a4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80124a8:	4906      	ldr	r1, [pc, #24]	; (80124c4 <sys_timeouts_sleeptime+0x68>)
 80124aa:	4807      	ldr	r0, [pc, #28]	; (80124c8 <sys_timeouts_sleeptime+0x6c>)
 80124ac:	f003 f8e8 	bl	8015680 <iprintf>
    return ret;
 80124b0:	683b      	ldr	r3, [r7, #0]
  }
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	20004b18 	.word	0x20004b18
 80124c0:	08018e04 	.word	0x08018e04
 80124c4:	08018ed8 	.word	0x08018ed8
 80124c8:	08018e78 	.word	0x08018e78

080124cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80124d0:	f003 f8ee 	bl	80156b0 <rand>
 80124d4:	4603      	mov	r3, r0
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80124dc:	b29b      	uxth	r3, r3
 80124de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	4b01      	ldr	r3, [pc, #4]	; (80124ec <udp_init+0x20>)
 80124e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80124e8:	bf00      	nop
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	2000001c 	.word	0x2000001c

080124f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80124f6:	2300      	movs	r3, #0
 80124f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80124fa:	4b17      	ldr	r3, [pc, #92]	; (8012558 <udp_new_port+0x68>)
 80124fc:	881b      	ldrh	r3, [r3, #0]
 80124fe:	1c5a      	adds	r2, r3, #1
 8012500:	b291      	uxth	r1, r2
 8012502:	4a15      	ldr	r2, [pc, #84]	; (8012558 <udp_new_port+0x68>)
 8012504:	8011      	strh	r1, [r2, #0]
 8012506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801250a:	4293      	cmp	r3, r2
 801250c:	d103      	bne.n	8012516 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801250e:	4b12      	ldr	r3, [pc, #72]	; (8012558 <udp_new_port+0x68>)
 8012510:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012514:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012516:	4b11      	ldr	r3, [pc, #68]	; (801255c <udp_new_port+0x6c>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	603b      	str	r3, [r7, #0]
 801251c:	e011      	b.n	8012542 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	8a5a      	ldrh	r2, [r3, #18]
 8012522:	4b0d      	ldr	r3, [pc, #52]	; (8012558 <udp_new_port+0x68>)
 8012524:	881b      	ldrh	r3, [r3, #0]
 8012526:	429a      	cmp	r2, r3
 8012528:	d108      	bne.n	801253c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801252a:	88fb      	ldrh	r3, [r7, #6]
 801252c:	3301      	adds	r3, #1
 801252e:	80fb      	strh	r3, [r7, #6]
 8012530:	88fb      	ldrh	r3, [r7, #6]
 8012532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012536:	d3e0      	bcc.n	80124fa <udp_new_port+0xa>
        return 0;
 8012538:	2300      	movs	r3, #0
 801253a:	e007      	b.n	801254c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	603b      	str	r3, [r7, #0]
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d1ea      	bne.n	801251e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012548:	4b03      	ldr	r3, [pc, #12]	; (8012558 <udp_new_port+0x68>)
 801254a:	881b      	ldrh	r3, [r3, #0]
}
 801254c:	4618      	mov	r0, r3
 801254e:	370c      	adds	r7, #12
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr
 8012558:	2000001c 	.word	0x2000001c
 801255c:	2000b66c 	.word	0x2000b66c

08012560 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b084      	sub	sp, #16
 8012564:	af00      	add	r7, sp, #0
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	4613      	mov	r3, r2
 801256c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d105      	bne.n	8012580 <udp_input_local_match+0x20>
 8012574:	4b27      	ldr	r3, [pc, #156]	; (8012614 <udp_input_local_match+0xb4>)
 8012576:	2287      	movs	r2, #135	; 0x87
 8012578:	4927      	ldr	r1, [pc, #156]	; (8012618 <udp_input_local_match+0xb8>)
 801257a:	4828      	ldr	r0, [pc, #160]	; (801261c <udp_input_local_match+0xbc>)
 801257c:	f003 f880 	bl	8015680 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d105      	bne.n	8012592 <udp_input_local_match+0x32>
 8012586:	4b23      	ldr	r3, [pc, #140]	; (8012614 <udp_input_local_match+0xb4>)
 8012588:	2288      	movs	r2, #136	; 0x88
 801258a:	4925      	ldr	r1, [pc, #148]	; (8012620 <udp_input_local_match+0xc0>)
 801258c:	4823      	ldr	r0, [pc, #140]	; (801261c <udp_input_local_match+0xbc>)
 801258e:	f003 f877 	bl	8015680 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	7a1b      	ldrb	r3, [r3, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d00b      	beq.n	80125b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	7a1a      	ldrb	r2, [r3, #8]
 801259e:	4b21      	ldr	r3, [pc, #132]	; (8012624 <udp_input_local_match+0xc4>)
 80125a0:	685b      	ldr	r3, [r3, #4]
 80125a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80125a6:	3301      	adds	r3, #1
 80125a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d001      	beq.n	80125b2 <udp_input_local_match+0x52>
    return 0;
 80125ae:	2300      	movs	r3, #0
 80125b0:	e02b      	b.n	801260a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80125b2:	79fb      	ldrb	r3, [r7, #7]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d018      	beq.n	80125ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d013      	beq.n	80125e6 <udp_input_local_match+0x86>
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d00f      	beq.n	80125e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80125c6:	4b17      	ldr	r3, [pc, #92]	; (8012624 <udp_input_local_match+0xc4>)
 80125c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ce:	d00a      	beq.n	80125e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	4b13      	ldr	r3, [pc, #76]	; (8012624 <udp_input_local_match+0xc4>)
 80125d6:	695b      	ldr	r3, [r3, #20]
 80125d8:	405a      	eors	r2, r3
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	3308      	adds	r3, #8
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d110      	bne.n	8012608 <udp_input_local_match+0xa8>
          return 1;
 80125e6:	2301      	movs	r3, #1
 80125e8:	e00f      	b.n	801260a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d009      	beq.n	8012604 <udp_input_local_match+0xa4>
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d005      	beq.n	8012604 <udp_input_local_match+0xa4>
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681a      	ldr	r2, [r3, #0]
 80125fc:	4b09      	ldr	r3, [pc, #36]	; (8012624 <udp_input_local_match+0xc4>)
 80125fe:	695b      	ldr	r3, [r3, #20]
 8012600:	429a      	cmp	r2, r3
 8012602:	d101      	bne.n	8012608 <udp_input_local_match+0xa8>
        return 1;
 8012604:	2301      	movs	r3, #1
 8012606:	e000      	b.n	801260a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012608:	2300      	movs	r3, #0
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	08018eec 	.word	0x08018eec
 8012618:	08018f1c 	.word	0x08018f1c
 801261c:	08018f40 	.word	0x08018f40
 8012620:	08018f68 	.word	0x08018f68
 8012624:	20007f40 	.word	0x20007f40

08012628 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012628:	b590      	push	{r4, r7, lr}
 801262a:	b08d      	sub	sp, #52	; 0x34
 801262c:	af02      	add	r7, sp, #8
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012632:	2300      	movs	r3, #0
 8012634:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d105      	bne.n	8012648 <udp_input+0x20>
 801263c:	4b7c      	ldr	r3, [pc, #496]	; (8012830 <udp_input+0x208>)
 801263e:	22cf      	movs	r2, #207	; 0xcf
 8012640:	497c      	ldr	r1, [pc, #496]	; (8012834 <udp_input+0x20c>)
 8012642:	487d      	ldr	r0, [pc, #500]	; (8012838 <udp_input+0x210>)
 8012644:	f003 f81c 	bl	8015680 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d105      	bne.n	801265a <udp_input+0x32>
 801264e:	4b78      	ldr	r3, [pc, #480]	; (8012830 <udp_input+0x208>)
 8012650:	22d0      	movs	r2, #208	; 0xd0
 8012652:	497a      	ldr	r1, [pc, #488]	; (801283c <udp_input+0x214>)
 8012654:	4878      	ldr	r0, [pc, #480]	; (8012838 <udp_input+0x210>)
 8012656:	f003 f813 	bl	8015680 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	895b      	ldrh	r3, [r3, #10]
 801265e:	2b07      	cmp	r3, #7
 8012660:	d803      	bhi.n	801266a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7f9 fa9c 	bl	800bba0 <pbuf_free>
    goto end;
 8012668:	e0de      	b.n	8012828 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012670:	4b73      	ldr	r3, [pc, #460]	; (8012840 <udp_input+0x218>)
 8012672:	695a      	ldr	r2, [r3, #20]
 8012674:	4b72      	ldr	r3, [pc, #456]	; (8012840 <udp_input+0x218>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4619      	mov	r1, r3
 801267a:	4610      	mov	r0, r2
 801267c:	f001 fd94 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 8012680:	4603      	mov	r3, r0
 8012682:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	881b      	ldrh	r3, [r3, #0]
 8012688:	b29b      	uxth	r3, r3
 801268a:	4618      	mov	r0, r3
 801268c:	f7f7 fee0 	bl	800a450 <lwip_htons>
 8012690:	4603      	mov	r3, r0
 8012692:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	885b      	ldrh	r3, [r3, #2]
 8012698:	b29b      	uxth	r3, r3
 801269a:	4618      	mov	r0, r3
 801269c:	f7f7 fed8 	bl	800a450 <lwip_htons>
 80126a0:	4603      	mov	r3, r0
 80126a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80126a4:	2300      	movs	r3, #0
 80126a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80126a8:	2300      	movs	r3, #0
 80126aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80126ac:	2300      	movs	r3, #0
 80126ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80126b0:	4b64      	ldr	r3, [pc, #400]	; (8012844 <udp_input+0x21c>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	627b      	str	r3, [r7, #36]	; 0x24
 80126b6:	e054      	b.n	8012762 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80126b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ba:	8a5b      	ldrh	r3, [r3, #18]
 80126bc:	89fa      	ldrh	r2, [r7, #14]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d14a      	bne.n	8012758 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80126c2:	7cfb      	ldrb	r3, [r7, #19]
 80126c4:	461a      	mov	r2, r3
 80126c6:	6839      	ldr	r1, [r7, #0]
 80126c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126ca:	f7ff ff49 	bl	8012560 <udp_input_local_match>
 80126ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d041      	beq.n	8012758 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	7c1b      	ldrb	r3, [r3, #16]
 80126d8:	f003 0304 	and.w	r3, r3, #4
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d11d      	bne.n	801271c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d102      	bne.n	80126ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80126e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e8:	61fb      	str	r3, [r7, #28]
 80126ea:	e017      	b.n	801271c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80126ec:	7cfb      	ldrb	r3, [r7, #19]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d014      	beq.n	801271c <udp_input+0xf4>
 80126f2:	4b53      	ldr	r3, [pc, #332]	; (8012840 <udp_input+0x218>)
 80126f4:	695b      	ldr	r3, [r3, #20]
 80126f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126fa:	d10f      	bne.n	801271c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	3304      	adds	r3, #4
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	429a      	cmp	r2, r3
 8012708:	d008      	beq.n	801271c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270c:	681a      	ldr	r2, [r3, #0]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	3304      	adds	r3, #4
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	429a      	cmp	r2, r3
 8012716:	d101      	bne.n	801271c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271e:	8a9b      	ldrh	r3, [r3, #20]
 8012720:	8a3a      	ldrh	r2, [r7, #16]
 8012722:	429a      	cmp	r2, r3
 8012724:	d118      	bne.n	8012758 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012728:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801272a:	2b00      	cmp	r3, #0
 801272c:	d005      	beq.n	801273a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012730:	685a      	ldr	r2, [r3, #4]
 8012732:	4b43      	ldr	r3, [pc, #268]	; (8012840 <udp_input+0x218>)
 8012734:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012736:	429a      	cmp	r2, r3
 8012738:	d10e      	bne.n	8012758 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801273a:	6a3b      	ldr	r3, [r7, #32]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d014      	beq.n	801276a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012742:	68da      	ldr	r2, [r3, #12]
 8012744:	6a3b      	ldr	r3, [r7, #32]
 8012746:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012748:	4b3e      	ldr	r3, [pc, #248]	; (8012844 <udp_input+0x21c>)
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012750:	4a3c      	ldr	r2, [pc, #240]	; (8012844 <udp_input+0x21c>)
 8012752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012754:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012756:	e008      	b.n	801276a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	627b      	str	r3, [r7, #36]	; 0x24
 8012762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012764:	2b00      	cmp	r3, #0
 8012766:	d1a7      	bne.n	80126b8 <udp_input+0x90>
 8012768:	e000      	b.n	801276c <udp_input+0x144>
        break;
 801276a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276e:	2b00      	cmp	r3, #0
 8012770:	d101      	bne.n	8012776 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <udp_input+0x15a>
    for_us = 1;
 801277c:	2301      	movs	r3, #1
 801277e:	76fb      	strb	r3, [r7, #27]
 8012780:	e00a      	b.n	8012798 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	3304      	adds	r3, #4
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	4b2d      	ldr	r3, [pc, #180]	; (8012840 <udp_input+0x218>)
 801278a:	695b      	ldr	r3, [r3, #20]
 801278c:	429a      	cmp	r2, r3
 801278e:	bf0c      	ite	eq
 8012790:	2301      	moveq	r3, #1
 8012792:	2300      	movne	r3, #0
 8012794:	b2db      	uxtb	r3, r3
 8012796:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012798:	7efb      	ldrb	r3, [r7, #27]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d041      	beq.n	8012822 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801279e:	2108      	movs	r1, #8
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7f9 f977 	bl	800ba94 <pbuf_remove_header>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d00a      	beq.n	80127c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80127ac:	4b20      	ldr	r3, [pc, #128]	; (8012830 <udp_input+0x208>)
 80127ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80127b2:	4925      	ldr	r1, [pc, #148]	; (8012848 <udp_input+0x220>)
 80127b4:	4820      	ldr	r0, [pc, #128]	; (8012838 <udp_input+0x210>)
 80127b6:	f002 ff63 	bl	8015680 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f7f9 f9f0 	bl	800bba0 <pbuf_free>
      goto end;
 80127c0:	e032      	b.n	8012828 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d012      	beq.n	80127ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80127c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ca:	699b      	ldr	r3, [r3, #24]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d00a      	beq.n	80127e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80127d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d2:	699c      	ldr	r4, [r3, #24]
 80127d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d6:	69d8      	ldr	r0, [r3, #28]
 80127d8:	8a3b      	ldrh	r3, [r7, #16]
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	4b1b      	ldr	r3, [pc, #108]	; (801284c <udp_input+0x224>)
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80127e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80127e4:	e021      	b.n	801282a <udp_input+0x202>
        pbuf_free(p);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7f9 f9da 	bl	800bba0 <pbuf_free>
        goto end;
 80127ec:	e01c      	b.n	8012828 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80127ee:	7cfb      	ldrb	r3, [r7, #19]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d112      	bne.n	801281a <udp_input+0x1f2>
 80127f4:	4b12      	ldr	r3, [pc, #72]	; (8012840 <udp_input+0x218>)
 80127f6:	695b      	ldr	r3, [r3, #20]
 80127f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80127fc:	2be0      	cmp	r3, #224	; 0xe0
 80127fe:	d00c      	beq.n	801281a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012800:	4b0f      	ldr	r3, [pc, #60]	; (8012840 <udp_input+0x218>)
 8012802:	899b      	ldrh	r3, [r3, #12]
 8012804:	3308      	adds	r3, #8
 8012806:	b29b      	uxth	r3, r3
 8012808:	b21b      	sxth	r3, r3
 801280a:	4619      	mov	r1, r3
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7f9 f9b4 	bl	800bb7a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012812:	2103      	movs	r1, #3
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f001 f9a9 	bl	8013b6c <icmp_dest_unreach>
      pbuf_free(p);
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f7f9 f9c0 	bl	800bba0 <pbuf_free>
  return;
 8012820:	e003      	b.n	801282a <udp_input+0x202>
    pbuf_free(p);
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7f9 f9bc 	bl	800bba0 <pbuf_free>
  return;
 8012828:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801282a:	372c      	adds	r7, #44	; 0x2c
 801282c:	46bd      	mov	sp, r7
 801282e:	bd90      	pop	{r4, r7, pc}
 8012830:	08018eec 	.word	0x08018eec
 8012834:	08018f90 	.word	0x08018f90
 8012838:	08018f40 	.word	0x08018f40
 801283c:	08018fa8 	.word	0x08018fa8
 8012840:	20007f40 	.word	0x20007f40
 8012844:	2000b66c 	.word	0x2000b66c
 8012848:	08018fc4 	.word	0x08018fc4
 801284c:	20007f50 	.word	0x20007f50

08012850 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	4613      	mov	r3, r2
 801285c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d101      	bne.n	8012868 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012864:	4b39      	ldr	r3, [pc, #228]	; (801294c <udp_bind+0xfc>)
 8012866:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d109      	bne.n	8012882 <udp_bind+0x32>
 801286e:	4b38      	ldr	r3, [pc, #224]	; (8012950 <udp_bind+0x100>)
 8012870:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012874:	4937      	ldr	r1, [pc, #220]	; (8012954 <udp_bind+0x104>)
 8012876:	4838      	ldr	r0, [pc, #224]	; (8012958 <udp_bind+0x108>)
 8012878:	f002 ff02 	bl	8015680 <iprintf>
 801287c:	f06f 030f 	mvn.w	r3, #15
 8012880:	e060      	b.n	8012944 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012882:	2300      	movs	r3, #0
 8012884:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012886:	4b35      	ldr	r3, [pc, #212]	; (801295c <udp_bind+0x10c>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	617b      	str	r3, [r7, #20]
 801288c:	e009      	b.n	80128a2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801288e:	68fa      	ldr	r2, [r7, #12]
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	429a      	cmp	r2, r3
 8012894:	d102      	bne.n	801289c <udp_bind+0x4c>
      rebind = 1;
 8012896:	2301      	movs	r3, #1
 8012898:	74fb      	strb	r3, [r7, #19]
      break;
 801289a:	e005      	b.n	80128a8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	617b      	str	r3, [r7, #20]
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d1f2      	bne.n	801288e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80128a8:	88fb      	ldrh	r3, [r7, #6]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d109      	bne.n	80128c2 <udp_bind+0x72>
    port = udp_new_port();
 80128ae:	f7ff fe1f 	bl	80124f0 <udp_new_port>
 80128b2:	4603      	mov	r3, r0
 80128b4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80128b6:	88fb      	ldrh	r3, [r7, #6]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d12c      	bne.n	8012916 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80128bc:	f06f 0307 	mvn.w	r3, #7
 80128c0:	e040      	b.n	8012944 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80128c2:	4b26      	ldr	r3, [pc, #152]	; (801295c <udp_bind+0x10c>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	617b      	str	r3, [r7, #20]
 80128c8:	e022      	b.n	8012910 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d01b      	beq.n	801290a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	8a5b      	ldrh	r3, [r3, #18]
 80128d6:	88fa      	ldrh	r2, [r7, #6]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d116      	bne.n	801290a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d00d      	beq.n	8012904 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00a      	beq.n	8012904 <udp_bind+0xb4>
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d006      	beq.n	8012904 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80128f6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d003      	beq.n	8012904 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d102      	bne.n	801290a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012904:	f06f 0307 	mvn.w	r3, #7
 8012908:	e01c      	b.n	8012944 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	617b      	str	r3, [r7, #20]
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1d9      	bne.n	80128ca <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d002      	beq.n	8012922 <udp_bind+0xd2>
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	e000      	b.n	8012924 <udp_bind+0xd4>
 8012922:	2300      	movs	r3, #0
 8012924:	68fa      	ldr	r2, [r7, #12]
 8012926:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	88fa      	ldrh	r2, [r7, #6]
 801292c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801292e:	7cfb      	ldrb	r3, [r7, #19]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d106      	bne.n	8012942 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012934:	4b09      	ldr	r3, [pc, #36]	; (801295c <udp_bind+0x10c>)
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801293c:	4a07      	ldr	r2, [pc, #28]	; (801295c <udp_bind+0x10c>)
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3718      	adds	r7, #24
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	08019a64 	.word	0x08019a64
 8012950:	08018eec 	.word	0x08018eec
 8012954:	080191b4 	.word	0x080191b4
 8012958:	08018f40 	.word	0x08018f40
 801295c:	2000b66c 	.word	0x2000b66c

08012960 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d107      	bne.n	8012982 <udp_recv+0x22>
 8012972:	4b08      	ldr	r3, [pc, #32]	; (8012994 <udp_recv+0x34>)
 8012974:	f240 428a 	movw	r2, #1162	; 0x48a
 8012978:	4907      	ldr	r1, [pc, #28]	; (8012998 <udp_recv+0x38>)
 801297a:	4808      	ldr	r0, [pc, #32]	; (801299c <udp_recv+0x3c>)
 801297c:	f002 fe80 	bl	8015680 <iprintf>
 8012980:	e005      	b.n	801298e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	68ba      	ldr	r2, [r7, #8]
 8012986:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	61da      	str	r2, [r3, #28]
}
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	08018eec 	.word	0x08018eec
 8012998:	08019220 	.word	0x08019220
 801299c:	08018f40 	.word	0x08018f40

080129a0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d107      	bne.n	80129be <udp_remove+0x1e>
 80129ae:	4b19      	ldr	r3, [pc, #100]	; (8012a14 <udp_remove+0x74>)
 80129b0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80129b4:	4918      	ldr	r1, [pc, #96]	; (8012a18 <udp_remove+0x78>)
 80129b6:	4819      	ldr	r0, [pc, #100]	; (8012a1c <udp_remove+0x7c>)
 80129b8:	f002 fe62 	bl	8015680 <iprintf>
 80129bc:	e026      	b.n	8012a0c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80129be:	4b18      	ldr	r3, [pc, #96]	; (8012a20 <udp_remove+0x80>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d105      	bne.n	80129d4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80129c8:	4b15      	ldr	r3, [pc, #84]	; (8012a20 <udp_remove+0x80>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	68db      	ldr	r3, [r3, #12]
 80129ce:	4a14      	ldr	r2, [pc, #80]	; (8012a20 <udp_remove+0x80>)
 80129d0:	6013      	str	r3, [r2, #0]
 80129d2:	e017      	b.n	8012a04 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80129d4:	4b12      	ldr	r3, [pc, #72]	; (8012a20 <udp_remove+0x80>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	60fb      	str	r3, [r7, #12]
 80129da:	e010      	b.n	80129fe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d009      	beq.n	80129f8 <udp_remove+0x58>
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d104      	bne.n	80129f8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	68da      	ldr	r2, [r3, #12]
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	60da      	str	r2, [r3, #12]
        break;
 80129f6:	e005      	b.n	8012a04 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	60fb      	str	r3, [r7, #12]
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d1eb      	bne.n	80129dc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012a04:	6879      	ldr	r1, [r7, #4]
 8012a06:	2000      	movs	r0, #0
 8012a08:	f7f8 fa2a 	bl	800ae60 <memp_free>
}
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	08018eec 	.word	0x08018eec
 8012a18:	08019238 	.word	0x08019238
 8012a1c:	08018f40 	.word	0x08018f40
 8012a20:	2000b66c 	.word	0x2000b66c

08012a24 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	f7f8 f9c6 	bl	800adbc <memp_malloc>
 8012a30:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d007      	beq.n	8012a48 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012a38:	2220      	movs	r2, #32
 8012a3a:	2100      	movs	r1, #0
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f002 fdbd 	bl	80155bc <memset>
    pcb->ttl = UDP_TTL;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	22ff      	movs	r2, #255	; 0xff
 8012a46:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012a48:	687b      	ldr	r3, [r7, #4]
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}

08012a52 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012a52:	b580      	push	{r7, lr}
 8012a54:	b084      	sub	sp, #16
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	4603      	mov	r3, r0
 8012a5a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012a5c:	f7ff ffe2 	bl	8012a24 <udp_new>
 8012a60:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012a62:	68fb      	ldr	r3, [r7, #12]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3710      	adds	r7, #16
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b085      	sub	sp, #20
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d01e      	beq.n	8012aba <udp_netif_ip_addr_changed+0x4e>
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d01a      	beq.n	8012aba <udp_netif_ip_addr_changed+0x4e>
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d017      	beq.n	8012aba <udp_netif_ip_addr_changed+0x4e>
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d013      	beq.n	8012aba <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012a92:	4b0d      	ldr	r3, [pc, #52]	; (8012ac8 <udp_netif_ip_addr_changed+0x5c>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	60fb      	str	r3, [r7, #12]
 8012a98:	e00c      	b.n	8012ab4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d103      	bne.n	8012aae <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	60fb      	str	r3, [r7, #12]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d1ef      	bne.n	8012a9a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012aba:	bf00      	nop
 8012abc:	3714      	adds	r7, #20
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop
 8012ac8:	2000b66c 	.word	0x2000b66c

08012acc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012ad4:	4915      	ldr	r1, [pc, #84]	; (8012b2c <etharp_free_entry+0x60>)
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	4613      	mov	r3, r2
 8012ada:	005b      	lsls	r3, r3, #1
 8012adc:	4413      	add	r3, r2
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	440b      	add	r3, r1
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d013      	beq.n	8012b10 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012ae8:	4910      	ldr	r1, [pc, #64]	; (8012b2c <etharp_free_entry+0x60>)
 8012aea:	687a      	ldr	r2, [r7, #4]
 8012aec:	4613      	mov	r3, r2
 8012aee:	005b      	lsls	r3, r3, #1
 8012af0:	4413      	add	r3, r2
 8012af2:	00db      	lsls	r3, r3, #3
 8012af4:	440b      	add	r3, r1
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f9 f851 	bl	800bba0 <pbuf_free>
    arp_table[i].q = NULL;
 8012afe:	490b      	ldr	r1, [pc, #44]	; (8012b2c <etharp_free_entry+0x60>)
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	4613      	mov	r3, r2
 8012b04:	005b      	lsls	r3, r3, #1
 8012b06:	4413      	add	r3, r2
 8012b08:	00db      	lsls	r3, r3, #3
 8012b0a:	440b      	add	r3, r1
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012b10:	4906      	ldr	r1, [pc, #24]	; (8012b2c <etharp_free_entry+0x60>)
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	4613      	mov	r3, r2
 8012b16:	005b      	lsls	r3, r3, #1
 8012b18:	4413      	add	r3, r2
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	440b      	add	r3, r1
 8012b1e:	3314      	adds	r3, #20
 8012b20:	2200      	movs	r2, #0
 8012b22:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012b24:	bf00      	nop
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	20004b24 	.word	0x20004b24

08012b30 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b36:	2300      	movs	r3, #0
 8012b38:	607b      	str	r3, [r7, #4]
 8012b3a:	e096      	b.n	8012c6a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012b3c:	494f      	ldr	r1, [pc, #316]	; (8012c7c <etharp_tmr+0x14c>)
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	4613      	mov	r3, r2
 8012b42:	005b      	lsls	r3, r3, #1
 8012b44:	4413      	add	r3, r2
 8012b46:	00db      	lsls	r3, r3, #3
 8012b48:	440b      	add	r3, r1
 8012b4a:	3314      	adds	r3, #20
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012b50:	78fb      	ldrb	r3, [r7, #3]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f000 8086 	beq.w	8012c64 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012b58:	4948      	ldr	r1, [pc, #288]	; (8012c7c <etharp_tmr+0x14c>)
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	005b      	lsls	r3, r3, #1
 8012b60:	4413      	add	r3, r2
 8012b62:	00db      	lsls	r3, r3, #3
 8012b64:	440b      	add	r3, r1
 8012b66:	3312      	adds	r3, #18
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	b298      	uxth	r0, r3
 8012b6e:	4943      	ldr	r1, [pc, #268]	; (8012c7c <etharp_tmr+0x14c>)
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	4613      	mov	r3, r2
 8012b74:	005b      	lsls	r3, r3, #1
 8012b76:	4413      	add	r3, r2
 8012b78:	00db      	lsls	r3, r3, #3
 8012b7a:	440b      	add	r3, r1
 8012b7c:	3312      	adds	r3, #18
 8012b7e:	4602      	mov	r2, r0
 8012b80:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012b82:	493e      	ldr	r1, [pc, #248]	; (8012c7c <etharp_tmr+0x14c>)
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	4613      	mov	r3, r2
 8012b88:	005b      	lsls	r3, r3, #1
 8012b8a:	4413      	add	r3, r2
 8012b8c:	00db      	lsls	r3, r3, #3
 8012b8e:	440b      	add	r3, r1
 8012b90:	3312      	adds	r3, #18
 8012b92:	881b      	ldrh	r3, [r3, #0]
 8012b94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012b98:	d215      	bcs.n	8012bc6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012b9a:	4938      	ldr	r1, [pc, #224]	; (8012c7c <etharp_tmr+0x14c>)
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	005b      	lsls	r3, r3, #1
 8012ba2:	4413      	add	r3, r2
 8012ba4:	00db      	lsls	r3, r3, #3
 8012ba6:	440b      	add	r3, r1
 8012ba8:	3314      	adds	r3, #20
 8012baa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	d10e      	bne.n	8012bce <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012bb0:	4932      	ldr	r1, [pc, #200]	; (8012c7c <etharp_tmr+0x14c>)
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	005b      	lsls	r3, r3, #1
 8012bb8:	4413      	add	r3, r2
 8012bba:	00db      	lsls	r3, r3, #3
 8012bbc:	440b      	add	r3, r1
 8012bbe:	3312      	adds	r3, #18
 8012bc0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012bc2:	2b04      	cmp	r3, #4
 8012bc4:	d903      	bls.n	8012bce <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f7ff ff80 	bl	8012acc <etharp_free_entry>
 8012bcc:	e04a      	b.n	8012c64 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012bce:	492b      	ldr	r1, [pc, #172]	; (8012c7c <etharp_tmr+0x14c>)
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	005b      	lsls	r3, r3, #1
 8012bd6:	4413      	add	r3, r2
 8012bd8:	00db      	lsls	r3, r3, #3
 8012bda:	440b      	add	r3, r1
 8012bdc:	3314      	adds	r3, #20
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	2b03      	cmp	r3, #3
 8012be2:	d10a      	bne.n	8012bfa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012be4:	4925      	ldr	r1, [pc, #148]	; (8012c7c <etharp_tmr+0x14c>)
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	4613      	mov	r3, r2
 8012bea:	005b      	lsls	r3, r3, #1
 8012bec:	4413      	add	r3, r2
 8012bee:	00db      	lsls	r3, r3, #3
 8012bf0:	440b      	add	r3, r1
 8012bf2:	3314      	adds	r3, #20
 8012bf4:	2204      	movs	r2, #4
 8012bf6:	701a      	strb	r2, [r3, #0]
 8012bf8:	e034      	b.n	8012c64 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012bfa:	4920      	ldr	r1, [pc, #128]	; (8012c7c <etharp_tmr+0x14c>)
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	4613      	mov	r3, r2
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	4413      	add	r3, r2
 8012c04:	00db      	lsls	r3, r3, #3
 8012c06:	440b      	add	r3, r1
 8012c08:	3314      	adds	r3, #20
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b04      	cmp	r3, #4
 8012c0e:	d10a      	bne.n	8012c26 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012c10:	491a      	ldr	r1, [pc, #104]	; (8012c7c <etharp_tmr+0x14c>)
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	4613      	mov	r3, r2
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	4413      	add	r3, r2
 8012c1a:	00db      	lsls	r3, r3, #3
 8012c1c:	440b      	add	r3, r1
 8012c1e:	3314      	adds	r3, #20
 8012c20:	2202      	movs	r2, #2
 8012c22:	701a      	strb	r2, [r3, #0]
 8012c24:	e01e      	b.n	8012c64 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012c26:	4915      	ldr	r1, [pc, #84]	; (8012c7c <etharp_tmr+0x14c>)
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	005b      	lsls	r3, r3, #1
 8012c2e:	4413      	add	r3, r2
 8012c30:	00db      	lsls	r3, r3, #3
 8012c32:	440b      	add	r3, r1
 8012c34:	3314      	adds	r3, #20
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d113      	bne.n	8012c64 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012c3c:	490f      	ldr	r1, [pc, #60]	; (8012c7c <etharp_tmr+0x14c>)
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	4613      	mov	r3, r2
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	4413      	add	r3, r2
 8012c46:	00db      	lsls	r3, r3, #3
 8012c48:	440b      	add	r3, r1
 8012c4a:	3308      	adds	r3, #8
 8012c4c:	6818      	ldr	r0, [r3, #0]
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	4613      	mov	r3, r2
 8012c52:	005b      	lsls	r3, r3, #1
 8012c54:	4413      	add	r3, r2
 8012c56:	00db      	lsls	r3, r3, #3
 8012c58:	4a08      	ldr	r2, [pc, #32]	; (8012c7c <etharp_tmr+0x14c>)
 8012c5a:	4413      	add	r3, r2
 8012c5c:	3304      	adds	r3, #4
 8012c5e:	4619      	mov	r1, r3
 8012c60:	f000 fe6e 	bl	8013940 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	3301      	adds	r3, #1
 8012c68:	607b      	str	r3, [r7, #4]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2b09      	cmp	r3, #9
 8012c6e:	f77f af65 	ble.w	8012b3c <etharp_tmr+0xc>
      }
    }
  }
}
 8012c72:	bf00      	nop
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	20004b24 	.word	0x20004b24

08012c80 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b08a      	sub	sp, #40	; 0x28
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	60f8      	str	r0, [r7, #12]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	607a      	str	r2, [r7, #4]
 8012c8c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012c8e:	230a      	movs	r3, #10
 8012c90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012c92:	230a      	movs	r3, #10
 8012c94:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012c96:	230a      	movs	r3, #10
 8012c98:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012c9e:	230a      	movs	r3, #10
 8012ca0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	83bb      	strh	r3, [r7, #28]
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	837b      	strh	r3, [r7, #26]
 8012caa:	2300      	movs	r3, #0
 8012cac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012cae:	2300      	movs	r3, #0
 8012cb0:	843b      	strh	r3, [r7, #32]
 8012cb2:	e0ae      	b.n	8012e12 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012cb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cb8:	49a6      	ldr	r1, [pc, #664]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012cba:	4613      	mov	r3, r2
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	4413      	add	r3, r2
 8012cc0:	00db      	lsls	r3, r3, #3
 8012cc2:	440b      	add	r3, r1
 8012cc4:	3314      	adds	r3, #20
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012cca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012cce:	2b0a      	cmp	r3, #10
 8012cd0:	d105      	bne.n	8012cde <etharp_find_entry+0x5e>
 8012cd2:	7dfb      	ldrb	r3, [r7, #23]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d102      	bne.n	8012cde <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012cd8:	8c3b      	ldrh	r3, [r7, #32]
 8012cda:	847b      	strh	r3, [r7, #34]	; 0x22
 8012cdc:	e095      	b.n	8012e0a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012cde:	7dfb      	ldrb	r3, [r7, #23]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f000 8092 	beq.w	8012e0a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012ce6:	7dfb      	ldrb	r3, [r7, #23]
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d009      	beq.n	8012d00 <etharp_find_entry+0x80>
 8012cec:	7dfb      	ldrb	r3, [r7, #23]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d806      	bhi.n	8012d00 <etharp_find_entry+0x80>
 8012cf2:	4b99      	ldr	r3, [pc, #612]	; (8012f58 <etharp_find_entry+0x2d8>)
 8012cf4:	f44f 7292 	mov.w	r2, #292	; 0x124
 8012cf8:	4998      	ldr	r1, [pc, #608]	; (8012f5c <etharp_find_entry+0x2dc>)
 8012cfa:	4899      	ldr	r0, [pc, #612]	; (8012f60 <etharp_find_entry+0x2e0>)
 8012cfc:	f002 fcc0 	bl	8015680 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d020      	beq.n	8012d48 <etharp_find_entry+0xc8>
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	6819      	ldr	r1, [r3, #0]
 8012d0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d0e:	4891      	ldr	r0, [pc, #580]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012d10:	4613      	mov	r3, r2
 8012d12:	005b      	lsls	r3, r3, #1
 8012d14:	4413      	add	r3, r2
 8012d16:	00db      	lsls	r3, r3, #3
 8012d18:	4403      	add	r3, r0
 8012d1a:	3304      	adds	r3, #4
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	4299      	cmp	r1, r3
 8012d20:	d112      	bne.n	8012d48 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d00c      	beq.n	8012d42 <etharp_find_entry+0xc2>
 8012d28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d2c:	4989      	ldr	r1, [pc, #548]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012d2e:	4613      	mov	r3, r2
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4413      	add	r3, r2
 8012d34:	00db      	lsls	r3, r3, #3
 8012d36:	440b      	add	r3, r1
 8012d38:	3308      	adds	r3, #8
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	687a      	ldr	r2, [r7, #4]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d102      	bne.n	8012d48 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012d42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d46:	e100      	b.n	8012f4a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012d48:	7dfb      	ldrb	r3, [r7, #23]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d140      	bne.n	8012dd0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d52:	4980      	ldr	r1, [pc, #512]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012d54:	4613      	mov	r3, r2
 8012d56:	005b      	lsls	r3, r3, #1
 8012d58:	4413      	add	r3, r2
 8012d5a:	00db      	lsls	r3, r3, #3
 8012d5c:	440b      	add	r3, r1
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d01a      	beq.n	8012d9a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012d64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d68:	497a      	ldr	r1, [pc, #488]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	005b      	lsls	r3, r3, #1
 8012d6e:	4413      	add	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	440b      	add	r3, r1
 8012d74:	3312      	adds	r3, #18
 8012d76:	881b      	ldrh	r3, [r3, #0]
 8012d78:	8bba      	ldrh	r2, [r7, #28]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d845      	bhi.n	8012e0a <etharp_find_entry+0x18a>
            old_queue = i;
 8012d7e:	8c3b      	ldrh	r3, [r7, #32]
 8012d80:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012d82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d86:	4973      	ldr	r1, [pc, #460]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012d88:	4613      	mov	r3, r2
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	4413      	add	r3, r2
 8012d8e:	00db      	lsls	r3, r3, #3
 8012d90:	440b      	add	r3, r1
 8012d92:	3312      	adds	r3, #18
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	83bb      	strh	r3, [r7, #28]
 8012d98:	e037      	b.n	8012e0a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012d9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d9e:	496d      	ldr	r1, [pc, #436]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012da0:	4613      	mov	r3, r2
 8012da2:	005b      	lsls	r3, r3, #1
 8012da4:	4413      	add	r3, r2
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	440b      	add	r3, r1
 8012daa:	3312      	adds	r3, #18
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	8b7a      	ldrh	r2, [r7, #26]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d82a      	bhi.n	8012e0a <etharp_find_entry+0x18a>
            old_pending = i;
 8012db4:	8c3b      	ldrh	r3, [r7, #32]
 8012db6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012db8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012dbc:	4965      	ldr	r1, [pc, #404]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	005b      	lsls	r3, r3, #1
 8012dc2:	4413      	add	r3, r2
 8012dc4:	00db      	lsls	r3, r3, #3
 8012dc6:	440b      	add	r3, r1
 8012dc8:	3312      	adds	r3, #18
 8012dca:	881b      	ldrh	r3, [r3, #0]
 8012dcc:	837b      	strh	r3, [r7, #26]
 8012dce:	e01c      	b.n	8012e0a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012dd0:	7dfb      	ldrb	r3, [r7, #23]
 8012dd2:	2b01      	cmp	r3, #1
 8012dd4:	d919      	bls.n	8012e0a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012dd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012dda:	495e      	ldr	r1, [pc, #376]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012ddc:	4613      	mov	r3, r2
 8012dde:	005b      	lsls	r3, r3, #1
 8012de0:	4413      	add	r3, r2
 8012de2:	00db      	lsls	r3, r3, #3
 8012de4:	440b      	add	r3, r1
 8012de6:	3312      	adds	r3, #18
 8012de8:	881b      	ldrh	r3, [r3, #0]
 8012dea:	8b3a      	ldrh	r2, [r7, #24]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d80c      	bhi.n	8012e0a <etharp_find_entry+0x18a>
            old_stable = i;
 8012df0:	8c3b      	ldrh	r3, [r7, #32]
 8012df2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012df4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012df8:	4956      	ldr	r1, [pc, #344]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	005b      	lsls	r3, r3, #1
 8012dfe:	4413      	add	r3, r2
 8012e00:	00db      	lsls	r3, r3, #3
 8012e02:	440b      	add	r3, r1
 8012e04:	3312      	adds	r3, #18
 8012e06:	881b      	ldrh	r3, [r3, #0]
 8012e08:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e0a:	8c3b      	ldrh	r3, [r7, #32]
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	843b      	strh	r3, [r7, #32]
 8012e12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e16:	2b09      	cmp	r3, #9
 8012e18:	f77f af4c 	ble.w	8012cb4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012e1c:	7afb      	ldrb	r3, [r7, #11]
 8012e1e:	f003 0302 	and.w	r3, r3, #2
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d108      	bne.n	8012e38 <etharp_find_entry+0x1b8>
 8012e26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012e2a:	2b0a      	cmp	r3, #10
 8012e2c:	d107      	bne.n	8012e3e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012e2e:	7afb      	ldrb	r3, [r7, #11]
 8012e30:	f003 0301 	and.w	r3, r3, #1
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d102      	bne.n	8012e3e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012e38:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3c:	e085      	b.n	8012f4a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012e3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012e42:	2b09      	cmp	r3, #9
 8012e44:	dc02      	bgt.n	8012e4c <etharp_find_entry+0x1cc>
    i = empty;
 8012e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e48:	843b      	strh	r3, [r7, #32]
 8012e4a:	e039      	b.n	8012ec0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012e4c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012e50:	2b09      	cmp	r3, #9
 8012e52:	dc14      	bgt.n	8012e7e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e56:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012e58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e5c:	493d      	ldr	r1, [pc, #244]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012e5e:	4613      	mov	r3, r2
 8012e60:	005b      	lsls	r3, r3, #1
 8012e62:	4413      	add	r3, r2
 8012e64:	00db      	lsls	r3, r3, #3
 8012e66:	440b      	add	r3, r1
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d018      	beq.n	8012ea0 <etharp_find_entry+0x220>
 8012e6e:	4b3a      	ldr	r3, [pc, #232]	; (8012f58 <etharp_find_entry+0x2d8>)
 8012e70:	f240 126d 	movw	r2, #365	; 0x16d
 8012e74:	493b      	ldr	r1, [pc, #236]	; (8012f64 <etharp_find_entry+0x2e4>)
 8012e76:	483a      	ldr	r0, [pc, #232]	; (8012f60 <etharp_find_entry+0x2e0>)
 8012e78:	f002 fc02 	bl	8015680 <iprintf>
 8012e7c:	e010      	b.n	8012ea0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012e7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012e82:	2b09      	cmp	r3, #9
 8012e84:	dc02      	bgt.n	8012e8c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012e86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e88:	843b      	strh	r3, [r7, #32]
 8012e8a:	e009      	b.n	8012ea0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012e8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012e90:	2b09      	cmp	r3, #9
 8012e92:	dc02      	bgt.n	8012e9a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012e94:	8bfb      	ldrh	r3, [r7, #30]
 8012e96:	843b      	strh	r3, [r7, #32]
 8012e98:	e002      	b.n	8012ea0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8012e9e:	e054      	b.n	8012f4a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012ea0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ea4:	2b09      	cmp	r3, #9
 8012ea6:	dd06      	ble.n	8012eb6 <etharp_find_entry+0x236>
 8012ea8:	4b2b      	ldr	r3, [pc, #172]	; (8012f58 <etharp_find_entry+0x2d8>)
 8012eaa:	f240 127f 	movw	r2, #383	; 0x17f
 8012eae:	492e      	ldr	r1, [pc, #184]	; (8012f68 <etharp_find_entry+0x2e8>)
 8012eb0:	482b      	ldr	r0, [pc, #172]	; (8012f60 <etharp_find_entry+0x2e0>)
 8012eb2:	f002 fbe5 	bl	8015680 <iprintf>
    etharp_free_entry(i);
 8012eb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7ff fe06 	bl	8012acc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012ec0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ec4:	2b09      	cmp	r3, #9
 8012ec6:	dd06      	ble.n	8012ed6 <etharp_find_entry+0x256>
 8012ec8:	4b23      	ldr	r3, [pc, #140]	; (8012f58 <etharp_find_entry+0x2d8>)
 8012eca:	f240 1283 	movw	r2, #387	; 0x183
 8012ece:	4926      	ldr	r1, [pc, #152]	; (8012f68 <etharp_find_entry+0x2e8>)
 8012ed0:	4823      	ldr	r0, [pc, #140]	; (8012f60 <etharp_find_entry+0x2e0>)
 8012ed2:	f002 fbd5 	bl	8015680 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012ed6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012eda:	491e      	ldr	r1, [pc, #120]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012edc:	4613      	mov	r3, r2
 8012ede:	005b      	lsls	r3, r3, #1
 8012ee0:	4413      	add	r3, r2
 8012ee2:	00db      	lsls	r3, r3, #3
 8012ee4:	440b      	add	r3, r1
 8012ee6:	3314      	adds	r3, #20
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d006      	beq.n	8012efc <etharp_find_entry+0x27c>
 8012eee:	4b1a      	ldr	r3, [pc, #104]	; (8012f58 <etharp_find_entry+0x2d8>)
 8012ef0:	f240 1285 	movw	r2, #389	; 0x185
 8012ef4:	491d      	ldr	r1, [pc, #116]	; (8012f6c <etharp_find_entry+0x2ec>)
 8012ef6:	481a      	ldr	r0, [pc, #104]	; (8012f60 <etharp_find_entry+0x2e0>)
 8012ef8:	f002 fbc2 	bl	8015680 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d00b      	beq.n	8012f1a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012f02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6819      	ldr	r1, [r3, #0]
 8012f0a:	4812      	ldr	r0, [pc, #72]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012f0c:	4613      	mov	r3, r2
 8012f0e:	005b      	lsls	r3, r3, #1
 8012f10:	4413      	add	r3, r2
 8012f12:	00db      	lsls	r3, r3, #3
 8012f14:	4403      	add	r3, r0
 8012f16:	3304      	adds	r3, #4
 8012f18:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012f1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f1e:	490d      	ldr	r1, [pc, #52]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012f20:	4613      	mov	r3, r2
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	4413      	add	r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	440b      	add	r3, r1
 8012f2a:	3312      	adds	r3, #18
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012f30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f34:	4907      	ldr	r1, [pc, #28]	; (8012f54 <etharp_find_entry+0x2d4>)
 8012f36:	4613      	mov	r3, r2
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	4413      	add	r3, r2
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	440b      	add	r3, r1
 8012f40:	3308      	adds	r3, #8
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012f46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3728      	adds	r7, #40	; 0x28
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	20004b24 	.word	0x20004b24
 8012f58:	08019250 	.word	0x08019250
 8012f5c:	08019288 	.word	0x08019288
 8012f60:	080192c8 	.word	0x080192c8
 8012f64:	080192f0 	.word	0x080192f0
 8012f68:	08019308 	.word	0x08019308
 8012f6c:	0801931c 	.word	0x0801931c

08012f70 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b088      	sub	sp, #32
 8012f74:	af02      	add	r7, sp, #8
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	607a      	str	r2, [r7, #4]
 8012f7c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f84:	2b06      	cmp	r3, #6
 8012f86:	d006      	beq.n	8012f96 <etharp_update_arp_entry+0x26>
 8012f88:	4b48      	ldr	r3, [pc, #288]	; (80130ac <etharp_update_arp_entry+0x13c>)
 8012f8a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012f8e:	4948      	ldr	r1, [pc, #288]	; (80130b0 <etharp_update_arp_entry+0x140>)
 8012f90:	4848      	ldr	r0, [pc, #288]	; (80130b4 <etharp_update_arp_entry+0x144>)
 8012f92:	f002 fb75 	bl	8015680 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d012      	beq.n	8012fc2 <etharp_update_arp_entry+0x52>
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d00e      	beq.n	8012fc2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	68f9      	ldr	r1, [r7, #12]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f001 f8fc 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 8012fb0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d105      	bne.n	8012fc2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012fbe:	2be0      	cmp	r3, #224	; 0xe0
 8012fc0:	d102      	bne.n	8012fc8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012fc2:	f06f 030f 	mvn.w	r3, #15
 8012fc6:	e06c      	b.n	80130a2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012fc8:	78fb      	ldrb	r3, [r7, #3]
 8012fca:	68fa      	ldr	r2, [r7, #12]
 8012fcc:	4619      	mov	r1, r3
 8012fce:	68b8      	ldr	r0, [r7, #8]
 8012fd0:	f7ff fe56 	bl	8012c80 <etharp_find_entry>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012fd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	da02      	bge.n	8012fe6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012fe0:	8afb      	ldrh	r3, [r7, #22]
 8012fe2:	b25b      	sxtb	r3, r3
 8012fe4:	e05d      	b.n	80130a2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012fe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fea:	4933      	ldr	r1, [pc, #204]	; (80130b8 <etharp_update_arp_entry+0x148>)
 8012fec:	4613      	mov	r3, r2
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	4413      	add	r3, r2
 8012ff2:	00db      	lsls	r3, r3, #3
 8012ff4:	440b      	add	r3, r1
 8012ff6:	3314      	adds	r3, #20
 8012ff8:	2202      	movs	r2, #2
 8012ffa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012ffc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013000:	492d      	ldr	r1, [pc, #180]	; (80130b8 <etharp_update_arp_entry+0x148>)
 8013002:	4613      	mov	r3, r2
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	4413      	add	r3, r2
 8013008:	00db      	lsls	r3, r3, #3
 801300a:	440b      	add	r3, r1
 801300c:	3308      	adds	r3, #8
 801300e:	68fa      	ldr	r2, [r7, #12]
 8013010:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013012:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013016:	4613      	mov	r3, r2
 8013018:	005b      	lsls	r3, r3, #1
 801301a:	4413      	add	r3, r2
 801301c:	00db      	lsls	r3, r3, #3
 801301e:	3308      	adds	r3, #8
 8013020:	4a25      	ldr	r2, [pc, #148]	; (80130b8 <etharp_update_arp_entry+0x148>)
 8013022:	4413      	add	r3, r2
 8013024:	3304      	adds	r3, #4
 8013026:	2206      	movs	r2, #6
 8013028:	6879      	ldr	r1, [r7, #4]
 801302a:	4618      	mov	r0, r3
 801302c:	f002 fabb 	bl	80155a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013034:	4920      	ldr	r1, [pc, #128]	; (80130b8 <etharp_update_arp_entry+0x148>)
 8013036:	4613      	mov	r3, r2
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	4413      	add	r3, r2
 801303c:	00db      	lsls	r3, r3, #3
 801303e:	440b      	add	r3, r1
 8013040:	3312      	adds	r3, #18
 8013042:	2200      	movs	r2, #0
 8013044:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013046:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801304a:	491b      	ldr	r1, [pc, #108]	; (80130b8 <etharp_update_arp_entry+0x148>)
 801304c:	4613      	mov	r3, r2
 801304e:	005b      	lsls	r3, r3, #1
 8013050:	4413      	add	r3, r2
 8013052:	00db      	lsls	r3, r3, #3
 8013054:	440b      	add	r3, r1
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d021      	beq.n	80130a0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801305c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013060:	4915      	ldr	r1, [pc, #84]	; (80130b8 <etharp_update_arp_entry+0x148>)
 8013062:	4613      	mov	r3, r2
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	4413      	add	r3, r2
 8013068:	00db      	lsls	r3, r3, #3
 801306a:	440b      	add	r3, r1
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013070:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013074:	4910      	ldr	r1, [pc, #64]	; (80130b8 <etharp_update_arp_entry+0x148>)
 8013076:	4613      	mov	r3, r2
 8013078:	005b      	lsls	r3, r3, #1
 801307a:	4413      	add	r3, r2
 801307c:	00db      	lsls	r3, r3, #3
 801307e:	440b      	add	r3, r1
 8013080:	2200      	movs	r2, #0
 8013082:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801308a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6939      	ldr	r1, [r7, #16]
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f001 ff8b 	bl	8014fb0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801309a:	6938      	ldr	r0, [r7, #16]
 801309c:	f7f8 fd80 	bl	800bba0 <pbuf_free>
  }
  return ERR_OK;
 80130a0:	2300      	movs	r3, #0
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3718      	adds	r7, #24
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	08019250 	.word	0x08019250
 80130b0:	08019348 	.word	0x08019348
 80130b4:	080192c8 	.word	0x080192c8
 80130b8:	20004b24 	.word	0x20004b24

080130bc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130c4:	2300      	movs	r3, #0
 80130c6:	60fb      	str	r3, [r7, #12]
 80130c8:	e01e      	b.n	8013108 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80130ca:	4913      	ldr	r1, [pc, #76]	; (8013118 <etharp_cleanup_netif+0x5c>)
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	4613      	mov	r3, r2
 80130d0:	005b      	lsls	r3, r3, #1
 80130d2:	4413      	add	r3, r2
 80130d4:	00db      	lsls	r3, r3, #3
 80130d6:	440b      	add	r3, r1
 80130d8:	3314      	adds	r3, #20
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80130de:	7afb      	ldrb	r3, [r7, #11]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d00e      	beq.n	8013102 <etharp_cleanup_netif+0x46>
 80130e4:	490c      	ldr	r1, [pc, #48]	; (8013118 <etharp_cleanup_netif+0x5c>)
 80130e6:	68fa      	ldr	r2, [r7, #12]
 80130e8:	4613      	mov	r3, r2
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	4413      	add	r3, r2
 80130ee:	00db      	lsls	r3, r3, #3
 80130f0:	440b      	add	r3, r1
 80130f2:	3308      	adds	r3, #8
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d102      	bne.n	8013102 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80130fc:	68f8      	ldr	r0, [r7, #12]
 80130fe:	f7ff fce5 	bl	8012acc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	3301      	adds	r3, #1
 8013106:	60fb      	str	r3, [r7, #12]
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2b09      	cmp	r3, #9
 801310c:	dddd      	ble.n	80130ca <etharp_cleanup_netif+0xe>
    }
  }
}
 801310e:	bf00      	nop
 8013110:	3710      	adds	r7, #16
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop
 8013118:	20004b24 	.word	0x20004b24

0801311c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801311c:	b5b0      	push	{r4, r5, r7, lr}
 801311e:	b08a      	sub	sp, #40	; 0x28
 8013120:	af04      	add	r7, sp, #16
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d107      	bne.n	801313c <etharp_input+0x20>
 801312c:	4b3d      	ldr	r3, [pc, #244]	; (8013224 <etharp_input+0x108>)
 801312e:	f240 228a 	movw	r2, #650	; 0x28a
 8013132:	493d      	ldr	r1, [pc, #244]	; (8013228 <etharp_input+0x10c>)
 8013134:	483d      	ldr	r0, [pc, #244]	; (801322c <etharp_input+0x110>)
 8013136:	f002 faa3 	bl	8015680 <iprintf>
 801313a:	e06f      	b.n	801321c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	b29b      	uxth	r3, r3
 8013148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801314c:	d10c      	bne.n	8013168 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013152:	2b06      	cmp	r3, #6
 8013154:	d108      	bne.n	8013168 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801315a:	2b04      	cmp	r3, #4
 801315c:	d104      	bne.n	8013168 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	885b      	ldrh	r3, [r3, #2]
 8013162:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013164:	2b08      	cmp	r3, #8
 8013166:	d003      	beq.n	8013170 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f7f8 fd19 	bl	800bba0 <pbuf_free>
    return;
 801316e:	e055      	b.n	801321c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	330e      	adds	r3, #14
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	3318      	adds	r3, #24
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	3304      	adds	r3, #4
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d102      	bne.n	8013190 <etharp_input+0x74>
    for_us = 0;
 801318a:	2300      	movs	r3, #0
 801318c:	75fb      	strb	r3, [r7, #23]
 801318e:	e009      	b.n	80131a4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013190:	68ba      	ldr	r2, [r7, #8]
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	3304      	adds	r3, #4
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	429a      	cmp	r2, r3
 801319a:	bf0c      	ite	eq
 801319c:	2301      	moveq	r3, #1
 801319e:	2300      	movne	r3, #0
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80131a4:	693b      	ldr	r3, [r7, #16]
 80131a6:	f103 0208 	add.w	r2, r3, #8
 80131aa:	7dfb      	ldrb	r3, [r7, #23]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d001      	beq.n	80131b4 <etharp_input+0x98>
 80131b0:	2301      	movs	r3, #1
 80131b2:	e000      	b.n	80131b6 <etharp_input+0x9a>
 80131b4:	2302      	movs	r3, #2
 80131b6:	f107 010c 	add.w	r1, r7, #12
 80131ba:	6838      	ldr	r0, [r7, #0]
 80131bc:	f7ff fed8 	bl	8012f70 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	88db      	ldrh	r3, [r3, #6]
 80131c4:	b29b      	uxth	r3, r3
 80131c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131ca:	d003      	beq.n	80131d4 <etharp_input+0xb8>
 80131cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131d0:	d01e      	beq.n	8013210 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80131d2:	e020      	b.n	8013216 <etharp_input+0xfa>
      if (for_us) {
 80131d4:	7dfb      	ldrb	r3, [r7, #23]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d01c      	beq.n	8013214 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80131f0:	693a      	ldr	r2, [r7, #16]
 80131f2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80131f4:	2102      	movs	r1, #2
 80131f6:	9103      	str	r1, [sp, #12]
 80131f8:	f107 010c 	add.w	r1, r7, #12
 80131fc:	9102      	str	r1, [sp, #8]
 80131fe:	9201      	str	r2, [sp, #4]
 8013200:	9300      	str	r3, [sp, #0]
 8013202:	462b      	mov	r3, r5
 8013204:	4622      	mov	r2, r4
 8013206:	4601      	mov	r1, r0
 8013208:	6838      	ldr	r0, [r7, #0]
 801320a:	f000 faeb 	bl	80137e4 <etharp_raw>
      break;
 801320e:	e001      	b.n	8013214 <etharp_input+0xf8>
      break;
 8013210:	bf00      	nop
 8013212:	e000      	b.n	8013216 <etharp_input+0xfa>
      break;
 8013214:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7f8 fcc2 	bl	800bba0 <pbuf_free>
}
 801321c:	3718      	adds	r7, #24
 801321e:	46bd      	mov	sp, r7
 8013220:	bdb0      	pop	{r4, r5, r7, pc}
 8013222:	bf00      	nop
 8013224:	08019250 	.word	0x08019250
 8013228:	080193a0 	.word	0x080193a0
 801322c:	080192c8 	.word	0x080192c8

08013230 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af02      	add	r7, sp, #8
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	4613      	mov	r3, r2
 801323c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801323e:	79fa      	ldrb	r2, [r7, #7]
 8013240:	4944      	ldr	r1, [pc, #272]	; (8013354 <etharp_output_to_arp_index+0x124>)
 8013242:	4613      	mov	r3, r2
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	4413      	add	r3, r2
 8013248:	00db      	lsls	r3, r3, #3
 801324a:	440b      	add	r3, r1
 801324c:	3314      	adds	r3, #20
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d806      	bhi.n	8013262 <etharp_output_to_arp_index+0x32>
 8013254:	4b40      	ldr	r3, [pc, #256]	; (8013358 <etharp_output_to_arp_index+0x128>)
 8013256:	f240 22ef 	movw	r2, #751	; 0x2ef
 801325a:	4940      	ldr	r1, [pc, #256]	; (801335c <etharp_output_to_arp_index+0x12c>)
 801325c:	4840      	ldr	r0, [pc, #256]	; (8013360 <etharp_output_to_arp_index+0x130>)
 801325e:	f002 fa0f 	bl	8015680 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013262:	79fa      	ldrb	r2, [r7, #7]
 8013264:	493b      	ldr	r1, [pc, #236]	; (8013354 <etharp_output_to_arp_index+0x124>)
 8013266:	4613      	mov	r3, r2
 8013268:	005b      	lsls	r3, r3, #1
 801326a:	4413      	add	r3, r2
 801326c:	00db      	lsls	r3, r3, #3
 801326e:	440b      	add	r3, r1
 8013270:	3314      	adds	r3, #20
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	2b02      	cmp	r3, #2
 8013276:	d153      	bne.n	8013320 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013278:	79fa      	ldrb	r2, [r7, #7]
 801327a:	4936      	ldr	r1, [pc, #216]	; (8013354 <etharp_output_to_arp_index+0x124>)
 801327c:	4613      	mov	r3, r2
 801327e:	005b      	lsls	r3, r3, #1
 8013280:	4413      	add	r3, r2
 8013282:	00db      	lsls	r3, r3, #3
 8013284:	440b      	add	r3, r1
 8013286:	3312      	adds	r3, #18
 8013288:	881b      	ldrh	r3, [r3, #0]
 801328a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801328e:	d919      	bls.n	80132c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013290:	79fa      	ldrb	r2, [r7, #7]
 8013292:	4613      	mov	r3, r2
 8013294:	005b      	lsls	r3, r3, #1
 8013296:	4413      	add	r3, r2
 8013298:	00db      	lsls	r3, r3, #3
 801329a:	4a2e      	ldr	r2, [pc, #184]	; (8013354 <etharp_output_to_arp_index+0x124>)
 801329c:	4413      	add	r3, r2
 801329e:	3304      	adds	r3, #4
 80132a0:	4619      	mov	r1, r3
 80132a2:	68f8      	ldr	r0, [r7, #12]
 80132a4:	f000 fb4c 	bl	8013940 <etharp_request>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d138      	bne.n	8013320 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80132ae:	79fa      	ldrb	r2, [r7, #7]
 80132b0:	4928      	ldr	r1, [pc, #160]	; (8013354 <etharp_output_to_arp_index+0x124>)
 80132b2:	4613      	mov	r3, r2
 80132b4:	005b      	lsls	r3, r3, #1
 80132b6:	4413      	add	r3, r2
 80132b8:	00db      	lsls	r3, r3, #3
 80132ba:	440b      	add	r3, r1
 80132bc:	3314      	adds	r3, #20
 80132be:	2203      	movs	r2, #3
 80132c0:	701a      	strb	r2, [r3, #0]
 80132c2:	e02d      	b.n	8013320 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80132c4:	79fa      	ldrb	r2, [r7, #7]
 80132c6:	4923      	ldr	r1, [pc, #140]	; (8013354 <etharp_output_to_arp_index+0x124>)
 80132c8:	4613      	mov	r3, r2
 80132ca:	005b      	lsls	r3, r3, #1
 80132cc:	4413      	add	r3, r2
 80132ce:	00db      	lsls	r3, r3, #3
 80132d0:	440b      	add	r3, r1
 80132d2:	3312      	adds	r3, #18
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80132da:	d321      	bcc.n	8013320 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80132dc:	79fa      	ldrb	r2, [r7, #7]
 80132de:	4613      	mov	r3, r2
 80132e0:	005b      	lsls	r3, r3, #1
 80132e2:	4413      	add	r3, r2
 80132e4:	00db      	lsls	r3, r3, #3
 80132e6:	4a1b      	ldr	r2, [pc, #108]	; (8013354 <etharp_output_to_arp_index+0x124>)
 80132e8:	4413      	add	r3, r2
 80132ea:	1d19      	adds	r1, r3, #4
 80132ec:	79fa      	ldrb	r2, [r7, #7]
 80132ee:	4613      	mov	r3, r2
 80132f0:	005b      	lsls	r3, r3, #1
 80132f2:	4413      	add	r3, r2
 80132f4:	00db      	lsls	r3, r3, #3
 80132f6:	3308      	adds	r3, #8
 80132f8:	4a16      	ldr	r2, [pc, #88]	; (8013354 <etharp_output_to_arp_index+0x124>)
 80132fa:	4413      	add	r3, r2
 80132fc:	3304      	adds	r3, #4
 80132fe:	461a      	mov	r2, r3
 8013300:	68f8      	ldr	r0, [r7, #12]
 8013302:	f000 fafb 	bl	80138fc <etharp_request_dst>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d109      	bne.n	8013320 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801330c:	79fa      	ldrb	r2, [r7, #7]
 801330e:	4911      	ldr	r1, [pc, #68]	; (8013354 <etharp_output_to_arp_index+0x124>)
 8013310:	4613      	mov	r3, r2
 8013312:	005b      	lsls	r3, r3, #1
 8013314:	4413      	add	r3, r2
 8013316:	00db      	lsls	r3, r3, #3
 8013318:	440b      	add	r3, r1
 801331a:	3314      	adds	r3, #20
 801331c:	2203      	movs	r2, #3
 801331e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013326:	79fa      	ldrb	r2, [r7, #7]
 8013328:	4613      	mov	r3, r2
 801332a:	005b      	lsls	r3, r3, #1
 801332c:	4413      	add	r3, r2
 801332e:	00db      	lsls	r3, r3, #3
 8013330:	3308      	adds	r3, #8
 8013332:	4a08      	ldr	r2, [pc, #32]	; (8013354 <etharp_output_to_arp_index+0x124>)
 8013334:	4413      	add	r3, r2
 8013336:	1d1a      	adds	r2, r3, #4
 8013338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801333c:	9300      	str	r3, [sp, #0]
 801333e:	4613      	mov	r3, r2
 8013340:	460a      	mov	r2, r1
 8013342:	68b9      	ldr	r1, [r7, #8]
 8013344:	68f8      	ldr	r0, [r7, #12]
 8013346:	f001 fe33 	bl	8014fb0 <ethernet_output>
 801334a:	4603      	mov	r3, r0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3710      	adds	r7, #16
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	20004b24 	.word	0x20004b24
 8013358:	08019250 	.word	0x08019250
 801335c:	080193c0 	.word	0x080193c0
 8013360:	080192c8 	.word	0x080192c8

08013364 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b08a      	sub	sp, #40	; 0x28
 8013368:	af02      	add	r7, sp, #8
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d106      	bne.n	8013388 <etharp_output+0x24>
 801337a:	4b73      	ldr	r3, [pc, #460]	; (8013548 <etharp_output+0x1e4>)
 801337c:	f240 321e 	movw	r2, #798	; 0x31e
 8013380:	4972      	ldr	r1, [pc, #456]	; (801354c <etharp_output+0x1e8>)
 8013382:	4873      	ldr	r0, [pc, #460]	; (8013550 <etharp_output+0x1ec>)
 8013384:	f002 f97c 	bl	8015680 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d106      	bne.n	801339c <etharp_output+0x38>
 801338e:	4b6e      	ldr	r3, [pc, #440]	; (8013548 <etharp_output+0x1e4>)
 8013390:	f240 321f 	movw	r2, #799	; 0x31f
 8013394:	496f      	ldr	r1, [pc, #444]	; (8013554 <etharp_output+0x1f0>)
 8013396:	486e      	ldr	r0, [pc, #440]	; (8013550 <etharp_output+0x1ec>)
 8013398:	f002 f972 	bl	8015680 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d106      	bne.n	80133b0 <etharp_output+0x4c>
 80133a2:	4b69      	ldr	r3, [pc, #420]	; (8013548 <etharp_output+0x1e4>)
 80133a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80133a8:	496b      	ldr	r1, [pc, #428]	; (8013558 <etharp_output+0x1f4>)
 80133aa:	4869      	ldr	r0, [pc, #420]	; (8013550 <etharp_output+0x1ec>)
 80133ac:	f002 f968 	bl	8015680 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	68f9      	ldr	r1, [r7, #12]
 80133b6:	4618      	mov	r0, r3
 80133b8:	f000 fef6 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d002      	beq.n	80133c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80133c2:	4b66      	ldr	r3, [pc, #408]	; (801355c <etharp_output+0x1f8>)
 80133c4:	61fb      	str	r3, [r7, #28]
 80133c6:	e0af      	b.n	8013528 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133d0:	2be0      	cmp	r3, #224	; 0xe0
 80133d2:	d118      	bne.n	8013406 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80133d4:	2301      	movs	r3, #1
 80133d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80133d8:	2300      	movs	r3, #0
 80133da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80133dc:	235e      	movs	r3, #94	; 0x5e
 80133de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	3301      	adds	r3, #1
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133ea:	b2db      	uxtb	r3, r3
 80133ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3302      	adds	r3, #2
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	3303      	adds	r3, #3
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80133fe:	f107 0310 	add.w	r3, r7, #16
 8013402:	61fb      	str	r3, [r7, #28]
 8013404:	e090      	b.n	8013528 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	3304      	adds	r3, #4
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	405a      	eors	r2, r3
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	3308      	adds	r3, #8
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	4013      	ands	r3, r2
 801341a:	2b00      	cmp	r3, #0
 801341c:	d012      	beq.n	8013444 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013424:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013428:	4293      	cmp	r3, r2
 801342a:	d00b      	beq.n	8013444 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	330c      	adds	r3, #12
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d003      	beq.n	801343e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	330c      	adds	r3, #12
 801343a:	61bb      	str	r3, [r7, #24]
 801343c:	e002      	b.n	8013444 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801343e:	f06f 0303 	mvn.w	r3, #3
 8013442:	e07d      	b.n	8013540 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013444:	4b46      	ldr	r3, [pc, #280]	; (8013560 <etharp_output+0x1fc>)
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	4619      	mov	r1, r3
 801344a:	4a46      	ldr	r2, [pc, #280]	; (8013564 <etharp_output+0x200>)
 801344c:	460b      	mov	r3, r1
 801344e:	005b      	lsls	r3, r3, #1
 8013450:	440b      	add	r3, r1
 8013452:	00db      	lsls	r3, r3, #3
 8013454:	4413      	add	r3, r2
 8013456:	3314      	adds	r3, #20
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	2b01      	cmp	r3, #1
 801345c:	d925      	bls.n	80134aa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801345e:	4b40      	ldr	r3, [pc, #256]	; (8013560 <etharp_output+0x1fc>)
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	4619      	mov	r1, r3
 8013464:	4a3f      	ldr	r2, [pc, #252]	; (8013564 <etharp_output+0x200>)
 8013466:	460b      	mov	r3, r1
 8013468:	005b      	lsls	r3, r3, #1
 801346a:	440b      	add	r3, r1
 801346c:	00db      	lsls	r3, r3, #3
 801346e:	4413      	add	r3, r2
 8013470:	3308      	adds	r3, #8
 8013472:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013474:	68fa      	ldr	r2, [r7, #12]
 8013476:	429a      	cmp	r2, r3
 8013478:	d117      	bne.n	80134aa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	4b38      	ldr	r3, [pc, #224]	; (8013560 <etharp_output+0x1fc>)
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	4618      	mov	r0, r3
 8013484:	4937      	ldr	r1, [pc, #220]	; (8013564 <etharp_output+0x200>)
 8013486:	4603      	mov	r3, r0
 8013488:	005b      	lsls	r3, r3, #1
 801348a:	4403      	add	r3, r0
 801348c:	00db      	lsls	r3, r3, #3
 801348e:	440b      	add	r3, r1
 8013490:	3304      	adds	r3, #4
 8013492:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013494:	429a      	cmp	r2, r3
 8013496:	d108      	bne.n	80134aa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013498:	4b31      	ldr	r3, [pc, #196]	; (8013560 <etharp_output+0x1fc>)
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	461a      	mov	r2, r3
 801349e:	68b9      	ldr	r1, [r7, #8]
 80134a0:	68f8      	ldr	r0, [r7, #12]
 80134a2:	f7ff fec5 	bl	8013230 <etharp_output_to_arp_index>
 80134a6:	4603      	mov	r3, r0
 80134a8:	e04a      	b.n	8013540 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80134aa:	2300      	movs	r3, #0
 80134ac:	75fb      	strb	r3, [r7, #23]
 80134ae:	e031      	b.n	8013514 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80134b0:	7dfa      	ldrb	r2, [r7, #23]
 80134b2:	492c      	ldr	r1, [pc, #176]	; (8013564 <etharp_output+0x200>)
 80134b4:	4613      	mov	r3, r2
 80134b6:	005b      	lsls	r3, r3, #1
 80134b8:	4413      	add	r3, r2
 80134ba:	00db      	lsls	r3, r3, #3
 80134bc:	440b      	add	r3, r1
 80134be:	3314      	adds	r3, #20
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	2b01      	cmp	r3, #1
 80134c4:	d923      	bls.n	801350e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80134c6:	7dfa      	ldrb	r2, [r7, #23]
 80134c8:	4926      	ldr	r1, [pc, #152]	; (8013564 <etharp_output+0x200>)
 80134ca:	4613      	mov	r3, r2
 80134cc:	005b      	lsls	r3, r3, #1
 80134ce:	4413      	add	r3, r2
 80134d0:	00db      	lsls	r3, r3, #3
 80134d2:	440b      	add	r3, r1
 80134d4:	3308      	adds	r3, #8
 80134d6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d117      	bne.n	801350e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	6819      	ldr	r1, [r3, #0]
 80134e2:	7dfa      	ldrb	r2, [r7, #23]
 80134e4:	481f      	ldr	r0, [pc, #124]	; (8013564 <etharp_output+0x200>)
 80134e6:	4613      	mov	r3, r2
 80134e8:	005b      	lsls	r3, r3, #1
 80134ea:	4413      	add	r3, r2
 80134ec:	00db      	lsls	r3, r3, #3
 80134ee:	4403      	add	r3, r0
 80134f0:	3304      	adds	r3, #4
 80134f2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80134f4:	4299      	cmp	r1, r3
 80134f6:	d10a      	bne.n	801350e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80134f8:	4a19      	ldr	r2, [pc, #100]	; (8013560 <etharp_output+0x1fc>)
 80134fa:	7dfb      	ldrb	r3, [r7, #23]
 80134fc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80134fe:	7dfb      	ldrb	r3, [r7, #23]
 8013500:	461a      	mov	r2, r3
 8013502:	68b9      	ldr	r1, [r7, #8]
 8013504:	68f8      	ldr	r0, [r7, #12]
 8013506:	f7ff fe93 	bl	8013230 <etharp_output_to_arp_index>
 801350a:	4603      	mov	r3, r0
 801350c:	e018      	b.n	8013540 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801350e:	7dfb      	ldrb	r3, [r7, #23]
 8013510:	3301      	adds	r3, #1
 8013512:	75fb      	strb	r3, [r7, #23]
 8013514:	7dfb      	ldrb	r3, [r7, #23]
 8013516:	2b09      	cmp	r3, #9
 8013518:	d9ca      	bls.n	80134b0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801351a:	68ba      	ldr	r2, [r7, #8]
 801351c:	69b9      	ldr	r1, [r7, #24]
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	f000 f822 	bl	8013568 <etharp_query>
 8013524:	4603      	mov	r3, r0
 8013526:	e00b      	b.n	8013540 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801352e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013532:	9300      	str	r3, [sp, #0]
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	68b9      	ldr	r1, [r7, #8]
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f001 fd39 	bl	8014fb0 <ethernet_output>
 801353e:	4603      	mov	r3, r0
}
 8013540:	4618      	mov	r0, r3
 8013542:	3720      	adds	r7, #32
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	08019250 	.word	0x08019250
 801354c:	080193a0 	.word	0x080193a0
 8013550:	080192c8 	.word	0x080192c8
 8013554:	080193f0 	.word	0x080193f0
 8013558:	08019390 	.word	0x08019390
 801355c:	08019a68 	.word	0x08019a68
 8013560:	20004c14 	.word	0x20004c14
 8013564:	20004b24 	.word	0x20004b24

08013568 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b08c      	sub	sp, #48	; 0x30
 801356c:	af02      	add	r7, sp, #8
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	3326      	adds	r3, #38	; 0x26
 8013578:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801357a:	23ff      	movs	r3, #255	; 0xff
 801357c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013580:	2300      	movs	r3, #0
 8013582:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	68f9      	ldr	r1, [r7, #12]
 801358a:	4618      	mov	r0, r3
 801358c:	f000 fe0c 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d10c      	bne.n	80135b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801359e:	2be0      	cmp	r3, #224	; 0xe0
 80135a0:	d006      	beq.n	80135b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d003      	beq.n	80135b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d102      	bne.n	80135b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80135b0:	f06f 030f 	mvn.w	r3, #15
 80135b4:	e102      	b.n	80137bc <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80135b6:	68fa      	ldr	r2, [r7, #12]
 80135b8:	2101      	movs	r1, #1
 80135ba:	68b8      	ldr	r0, [r7, #8]
 80135bc:	f7ff fb60 	bl	8012c80 <etharp_find_entry>
 80135c0:	4603      	mov	r3, r0
 80135c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80135c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	da02      	bge.n	80135d2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80135cc:	8a7b      	ldrh	r3, [r7, #18]
 80135ce:	b25b      	sxtb	r3, r3
 80135d0:	e0f4      	b.n	80137bc <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80135d2:	8a7b      	ldrh	r3, [r7, #18]
 80135d4:	2b7e      	cmp	r3, #126	; 0x7e
 80135d6:	d906      	bls.n	80135e6 <etharp_query+0x7e>
 80135d8:	4b7a      	ldr	r3, [pc, #488]	; (80137c4 <etharp_query+0x25c>)
 80135da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80135de:	497a      	ldr	r1, [pc, #488]	; (80137c8 <etharp_query+0x260>)
 80135e0:	487a      	ldr	r0, [pc, #488]	; (80137cc <etharp_query+0x264>)
 80135e2:	f002 f84d 	bl	8015680 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80135e6:	8a7b      	ldrh	r3, [r7, #18]
 80135e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80135ea:	7c7a      	ldrb	r2, [r7, #17]
 80135ec:	4978      	ldr	r1, [pc, #480]	; (80137d0 <etharp_query+0x268>)
 80135ee:	4613      	mov	r3, r2
 80135f0:	005b      	lsls	r3, r3, #1
 80135f2:	4413      	add	r3, r2
 80135f4:	00db      	lsls	r3, r3, #3
 80135f6:	440b      	add	r3, r1
 80135f8:	3314      	adds	r3, #20
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d115      	bne.n	801362c <etharp_query+0xc4>
    is_new_entry = 1;
 8013600:	2301      	movs	r3, #1
 8013602:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013604:	7c7a      	ldrb	r2, [r7, #17]
 8013606:	4972      	ldr	r1, [pc, #456]	; (80137d0 <etharp_query+0x268>)
 8013608:	4613      	mov	r3, r2
 801360a:	005b      	lsls	r3, r3, #1
 801360c:	4413      	add	r3, r2
 801360e:	00db      	lsls	r3, r3, #3
 8013610:	440b      	add	r3, r1
 8013612:	3314      	adds	r3, #20
 8013614:	2201      	movs	r2, #1
 8013616:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013618:	7c7a      	ldrb	r2, [r7, #17]
 801361a:	496d      	ldr	r1, [pc, #436]	; (80137d0 <etharp_query+0x268>)
 801361c:	4613      	mov	r3, r2
 801361e:	005b      	lsls	r3, r3, #1
 8013620:	4413      	add	r3, r2
 8013622:	00db      	lsls	r3, r3, #3
 8013624:	440b      	add	r3, r1
 8013626:	3308      	adds	r3, #8
 8013628:	68fa      	ldr	r2, [r7, #12]
 801362a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801362c:	7c7a      	ldrb	r2, [r7, #17]
 801362e:	4968      	ldr	r1, [pc, #416]	; (80137d0 <etharp_query+0x268>)
 8013630:	4613      	mov	r3, r2
 8013632:	005b      	lsls	r3, r3, #1
 8013634:	4413      	add	r3, r2
 8013636:	00db      	lsls	r3, r3, #3
 8013638:	440b      	add	r3, r1
 801363a:	3314      	adds	r3, #20
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	2b01      	cmp	r3, #1
 8013640:	d011      	beq.n	8013666 <etharp_query+0xfe>
 8013642:	7c7a      	ldrb	r2, [r7, #17]
 8013644:	4962      	ldr	r1, [pc, #392]	; (80137d0 <etharp_query+0x268>)
 8013646:	4613      	mov	r3, r2
 8013648:	005b      	lsls	r3, r3, #1
 801364a:	4413      	add	r3, r2
 801364c:	00db      	lsls	r3, r3, #3
 801364e:	440b      	add	r3, r1
 8013650:	3314      	adds	r3, #20
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	2b01      	cmp	r3, #1
 8013656:	d806      	bhi.n	8013666 <etharp_query+0xfe>
 8013658:	4b5a      	ldr	r3, [pc, #360]	; (80137c4 <etharp_query+0x25c>)
 801365a:	f240 32cf 	movw	r2, #975	; 0x3cf
 801365e:	495d      	ldr	r1, [pc, #372]	; (80137d4 <etharp_query+0x26c>)
 8013660:	485a      	ldr	r0, [pc, #360]	; (80137cc <etharp_query+0x264>)
 8013662:	f002 f80d 	bl	8015680 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013666:	6a3b      	ldr	r3, [r7, #32]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d102      	bne.n	8013672 <etharp_query+0x10a>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d10c      	bne.n	801368c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013672:	68b9      	ldr	r1, [r7, #8]
 8013674:	68f8      	ldr	r0, [r7, #12]
 8013676:	f000 f963 	bl	8013940 <etharp_request>
 801367a:	4603      	mov	r3, r0
 801367c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d102      	bne.n	801368c <etharp_query+0x124>
      return result;
 8013686:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801368a:	e097      	b.n	80137bc <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d106      	bne.n	80136a0 <etharp_query+0x138>
 8013692:	4b4c      	ldr	r3, [pc, #304]	; (80137c4 <etharp_query+0x25c>)
 8013694:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013698:	494f      	ldr	r1, [pc, #316]	; (80137d8 <etharp_query+0x270>)
 801369a:	484c      	ldr	r0, [pc, #304]	; (80137cc <etharp_query+0x264>)
 801369c:	f001 fff0 	bl	8015680 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80136a0:	7c7a      	ldrb	r2, [r7, #17]
 80136a2:	494b      	ldr	r1, [pc, #300]	; (80137d0 <etharp_query+0x268>)
 80136a4:	4613      	mov	r3, r2
 80136a6:	005b      	lsls	r3, r3, #1
 80136a8:	4413      	add	r3, r2
 80136aa:	00db      	lsls	r3, r3, #3
 80136ac:	440b      	add	r3, r1
 80136ae:	3314      	adds	r3, #20
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d918      	bls.n	80136e8 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80136b6:	4a49      	ldr	r2, [pc, #292]	; (80137dc <etharp_query+0x274>)
 80136b8:	7c7b      	ldrb	r3, [r7, #17]
 80136ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80136bc:	7c7a      	ldrb	r2, [r7, #17]
 80136be:	4613      	mov	r3, r2
 80136c0:	005b      	lsls	r3, r3, #1
 80136c2:	4413      	add	r3, r2
 80136c4:	00db      	lsls	r3, r3, #3
 80136c6:	3308      	adds	r3, #8
 80136c8:	4a41      	ldr	r2, [pc, #260]	; (80137d0 <etharp_query+0x268>)
 80136ca:	4413      	add	r3, r2
 80136cc:	1d1a      	adds	r2, r3, #4
 80136ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	4613      	mov	r3, r2
 80136d6:	697a      	ldr	r2, [r7, #20]
 80136d8:	6879      	ldr	r1, [r7, #4]
 80136da:	68f8      	ldr	r0, [r7, #12]
 80136dc:	f001 fc68 	bl	8014fb0 <ethernet_output>
 80136e0:	4603      	mov	r3, r0
 80136e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136e6:	e067      	b.n	80137b8 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80136e8:	7c7a      	ldrb	r2, [r7, #17]
 80136ea:	4939      	ldr	r1, [pc, #228]	; (80137d0 <etharp_query+0x268>)
 80136ec:	4613      	mov	r3, r2
 80136ee:	005b      	lsls	r3, r3, #1
 80136f0:	4413      	add	r3, r2
 80136f2:	00db      	lsls	r3, r3, #3
 80136f4:	440b      	add	r3, r1
 80136f6:	3314      	adds	r3, #20
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d15c      	bne.n	80137b8 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013706:	e01c      	b.n	8013742 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	895a      	ldrh	r2, [r3, #10]
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	891b      	ldrh	r3, [r3, #8]
 8013710:	429a      	cmp	r2, r3
 8013712:	d10a      	bne.n	801372a <etharp_query+0x1c2>
 8013714:	69fb      	ldr	r3, [r7, #28]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d006      	beq.n	801372a <etharp_query+0x1c2>
 801371c:	4b29      	ldr	r3, [pc, #164]	; (80137c4 <etharp_query+0x25c>)
 801371e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013722:	492f      	ldr	r1, [pc, #188]	; (80137e0 <etharp_query+0x278>)
 8013724:	4829      	ldr	r0, [pc, #164]	; (80137cc <etharp_query+0x264>)
 8013726:	f001 ffab 	bl	8015680 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801372a:	69fb      	ldr	r3, [r7, #28]
 801372c:	7b1b      	ldrb	r3, [r3, #12]
 801372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013732:	2b00      	cmp	r3, #0
 8013734:	d002      	beq.n	801373c <etharp_query+0x1d4>
        copy_needed = 1;
 8013736:	2301      	movs	r3, #1
 8013738:	61bb      	str	r3, [r7, #24]
        break;
 801373a:	e005      	b.n	8013748 <etharp_query+0x1e0>
      }
      p = p->next;
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013742:	69fb      	ldr	r3, [r7, #28]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1df      	bne.n	8013708 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d007      	beq.n	801375e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801374e:	687a      	ldr	r2, [r7, #4]
 8013750:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013754:	200e      	movs	r0, #14
 8013756:	f7f8 fc8b 	bl	800c070 <pbuf_clone>
 801375a:	61f8      	str	r0, [r7, #28]
 801375c:	e004      	b.n	8013768 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013762:	69f8      	ldr	r0, [r7, #28]
 8013764:	f7f8 fac2 	bl	800bcec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d021      	beq.n	80137b2 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801376e:	7c7a      	ldrb	r2, [r7, #17]
 8013770:	4917      	ldr	r1, [pc, #92]	; (80137d0 <etharp_query+0x268>)
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	440b      	add	r3, r1
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d00a      	beq.n	8013798 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013782:	7c7a      	ldrb	r2, [r7, #17]
 8013784:	4912      	ldr	r1, [pc, #72]	; (80137d0 <etharp_query+0x268>)
 8013786:	4613      	mov	r3, r2
 8013788:	005b      	lsls	r3, r3, #1
 801378a:	4413      	add	r3, r2
 801378c:	00db      	lsls	r3, r3, #3
 801378e:	440b      	add	r3, r1
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4618      	mov	r0, r3
 8013794:	f7f8 fa04 	bl	800bba0 <pbuf_free>
      }
      arp_table[i].q = p;
 8013798:	7c7a      	ldrb	r2, [r7, #17]
 801379a:	490d      	ldr	r1, [pc, #52]	; (80137d0 <etharp_query+0x268>)
 801379c:	4613      	mov	r3, r2
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	4413      	add	r3, r2
 80137a2:	00db      	lsls	r3, r3, #3
 80137a4:	440b      	add	r3, r1
 80137a6:	69fa      	ldr	r2, [r7, #28]
 80137a8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80137aa:	2300      	movs	r3, #0
 80137ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137b0:	e002      	b.n	80137b8 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80137b2:	23ff      	movs	r3, #255	; 0xff
 80137b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80137b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3728      	adds	r7, #40	; 0x28
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	08019250 	.word	0x08019250
 80137c8:	080193fc 	.word	0x080193fc
 80137cc:	080192c8 	.word	0x080192c8
 80137d0:	20004b24 	.word	0x20004b24
 80137d4:	0801940c 	.word	0x0801940c
 80137d8:	080193f0 	.word	0x080193f0
 80137dc:	20004c14 	.word	0x20004c14
 80137e0:	08019434 	.word	0x08019434

080137e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b08a      	sub	sp, #40	; 0x28
 80137e8:	af02      	add	r7, sp, #8
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	607a      	str	r2, [r7, #4]
 80137f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d106      	bne.n	801380a <etharp_raw+0x26>
 80137fc:	4b3a      	ldr	r3, [pc, #232]	; (80138e8 <etharp_raw+0x104>)
 80137fe:	f240 4257 	movw	r2, #1111	; 0x457
 8013802:	493a      	ldr	r1, [pc, #232]	; (80138ec <etharp_raw+0x108>)
 8013804:	483a      	ldr	r0, [pc, #232]	; (80138f0 <etharp_raw+0x10c>)
 8013806:	f001 ff3b 	bl	8015680 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801380a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801380e:	211c      	movs	r1, #28
 8013810:	200e      	movs	r0, #14
 8013812:	f7f7 fee5 	bl	800b5e0 <pbuf_alloc>
 8013816:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d102      	bne.n	8013824 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801381e:	f04f 33ff 	mov.w	r3, #4294967295
 8013822:	e05d      	b.n	80138e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	895b      	ldrh	r3, [r3, #10]
 8013828:	2b1b      	cmp	r3, #27
 801382a:	d806      	bhi.n	801383a <etharp_raw+0x56>
 801382c:	4b2e      	ldr	r3, [pc, #184]	; (80138e8 <etharp_raw+0x104>)
 801382e:	f240 4263 	movw	r2, #1123	; 0x463
 8013832:	4930      	ldr	r1, [pc, #192]	; (80138f4 <etharp_raw+0x110>)
 8013834:	482e      	ldr	r0, [pc, #184]	; (80138f0 <etharp_raw+0x10c>)
 8013836:	f001 ff23 	bl	8015680 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013840:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013842:	4618      	mov	r0, r3
 8013844:	f7f6 fe04 	bl	800a450 <lwip_htons>
 8013848:	4603      	mov	r3, r0
 801384a:	461a      	mov	r2, r3
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013856:	2b06      	cmp	r3, #6
 8013858:	d006      	beq.n	8013868 <etharp_raw+0x84>
 801385a:	4b23      	ldr	r3, [pc, #140]	; (80138e8 <etharp_raw+0x104>)
 801385c:	f240 426a 	movw	r2, #1130	; 0x46a
 8013860:	4925      	ldr	r1, [pc, #148]	; (80138f8 <etharp_raw+0x114>)
 8013862:	4823      	ldr	r0, [pc, #140]	; (80138f0 <etharp_raw+0x10c>)
 8013864:	f001 ff0c 	bl	8015680 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	3308      	adds	r3, #8
 801386c:	2206      	movs	r2, #6
 801386e:	6839      	ldr	r1, [r7, #0]
 8013870:	4618      	mov	r0, r3
 8013872:	f001 fe98 	bl	80155a6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	3312      	adds	r3, #18
 801387a:	2206      	movs	r2, #6
 801387c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801387e:	4618      	mov	r0, r3
 8013880:	f001 fe91 	bl	80155a6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	330e      	adds	r3, #14
 8013888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801388a:	6812      	ldr	r2, [r2, #0]
 801388c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	3318      	adds	r3, #24
 8013892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013894:	6812      	ldr	r2, [r2, #0]
 8013896:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	2200      	movs	r2, #0
 801389c:	701a      	strb	r2, [r3, #0]
 801389e:	2200      	movs	r2, #0
 80138a0:	f042 0201 	orr.w	r2, r2, #1
 80138a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	2200      	movs	r2, #0
 80138aa:	f042 0208 	orr.w	r2, r2, #8
 80138ae:	709a      	strb	r2, [r3, #2]
 80138b0:	2200      	movs	r2, #0
 80138b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	2206      	movs	r2, #6
 80138b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	2204      	movs	r2, #4
 80138be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80138c0:	f640 0306 	movw	r3, #2054	; 0x806
 80138c4:	9300      	str	r3, [sp, #0]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	68ba      	ldr	r2, [r7, #8]
 80138ca:	69b9      	ldr	r1, [r7, #24]
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	f001 fb6f 	bl	8014fb0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80138d2:	69b8      	ldr	r0, [r7, #24]
 80138d4:	f7f8 f964 	bl	800bba0 <pbuf_free>
  p = NULL;
 80138d8:	2300      	movs	r3, #0
 80138da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80138dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3720      	adds	r7, #32
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	08019250 	.word	0x08019250
 80138ec:	080193a0 	.word	0x080193a0
 80138f0:	080192c8 	.word	0x080192c8
 80138f4:	08019450 	.word	0x08019450
 80138f8:	08019484 	.word	0x08019484

080138fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b088      	sub	sp, #32
 8013900:	af04      	add	r7, sp, #16
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	60b9      	str	r1, [r7, #8]
 8013906:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013918:	2201      	movs	r2, #1
 801391a:	9203      	str	r2, [sp, #12]
 801391c:	68ba      	ldr	r2, [r7, #8]
 801391e:	9202      	str	r2, [sp, #8]
 8013920:	4a06      	ldr	r2, [pc, #24]	; (801393c <etharp_request_dst+0x40>)
 8013922:	9201      	str	r2, [sp, #4]
 8013924:	9300      	str	r3, [sp, #0]
 8013926:	4603      	mov	r3, r0
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	68f8      	ldr	r0, [r7, #12]
 801392c:	f7ff ff5a 	bl	80137e4 <etharp_raw>
 8013930:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013932:	4618      	mov	r0, r3
 8013934:	3710      	adds	r7, #16
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop
 801393c:	08019a70 	.word	0x08019a70

08013940 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801394a:	4a05      	ldr	r2, [pc, #20]	; (8013960 <etharp_request+0x20>)
 801394c:	6839      	ldr	r1, [r7, #0]
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f7ff ffd4 	bl	80138fc <etharp_request_dst>
 8013954:	4603      	mov	r3, r0
}
 8013956:	4618      	mov	r0, r3
 8013958:	3708      	adds	r7, #8
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	08019a68 	.word	0x08019a68

08013964 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b08e      	sub	sp, #56	; 0x38
 8013968:	af04      	add	r7, sp, #16
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801396e:	4b79      	ldr	r3, [pc, #484]	; (8013b54 <icmp_input+0x1f0>)
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	f003 030f 	and.w	r3, r3, #15
 801397c:	b2db      	uxtb	r3, r3
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	b2db      	uxtb	r3, r3
 8013982:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013986:	2b13      	cmp	r3, #19
 8013988:	f240 80cd 	bls.w	8013b26 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	895b      	ldrh	r3, [r3, #10]
 8013990:	2b03      	cmp	r3, #3
 8013992:	f240 80ca 	bls.w	8013b2a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	685b      	ldr	r3, [r3, #4]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80139a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	f000 80b7 	beq.w	8013b18 <icmp_input+0x1b4>
 80139aa:	2b08      	cmp	r3, #8
 80139ac:	f040 80b7 	bne.w	8013b1e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80139b0:	4b69      	ldr	r3, [pc, #420]	; (8013b58 <icmp_input+0x1f4>)
 80139b2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80139b4:	4b67      	ldr	r3, [pc, #412]	; (8013b54 <icmp_input+0x1f0>)
 80139b6:	695b      	ldr	r3, [r3, #20]
 80139b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80139bc:	2be0      	cmp	r3, #224	; 0xe0
 80139be:	f000 80bb 	beq.w	8013b38 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80139c2:	4b64      	ldr	r3, [pc, #400]	; (8013b54 <icmp_input+0x1f0>)
 80139c4:	695a      	ldr	r2, [r3, #20]
 80139c6:	4b63      	ldr	r3, [pc, #396]	; (8013b54 <icmp_input+0x1f0>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	4619      	mov	r1, r3
 80139cc:	4610      	mov	r0, r2
 80139ce:	f000 fbeb 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	f040 80b1 	bne.w	8013b3c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	891b      	ldrh	r3, [r3, #8]
 80139de:	2b07      	cmp	r3, #7
 80139e0:	f240 80a5 	bls.w	8013b2e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80139e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139e6:	330e      	adds	r3, #14
 80139e8:	4619      	mov	r1, r3
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f7f8 f842 	bl	800ba74 <pbuf_add_header>
 80139f0:	4603      	mov	r3, r0
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d04b      	beq.n	8013a8e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	891a      	ldrh	r2, [r3, #8]
 80139fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139fc:	4413      	add	r3, r2
 80139fe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	891b      	ldrh	r3, [r3, #8]
 8013a04:	8b7a      	ldrh	r2, [r7, #26]
 8013a06:	429a      	cmp	r2, r3
 8013a08:	f0c0 809a 	bcc.w	8013b40 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013a0c:	8b7b      	ldrh	r3, [r7, #26]
 8013a0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a12:	4619      	mov	r1, r3
 8013a14:	200e      	movs	r0, #14
 8013a16:	f7f7 fde3 	bl	800b5e0 <pbuf_alloc>
 8013a1a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	f000 8090 	beq.w	8013b44 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	895b      	ldrh	r3, [r3, #10]
 8013a28:	461a      	mov	r2, r3
 8013a2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a2c:	3308      	adds	r3, #8
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d203      	bcs.n	8013a3a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013a32:	6978      	ldr	r0, [r7, #20]
 8013a34:	f7f8 f8b4 	bl	800bba0 <pbuf_free>
          goto icmperr;
 8013a38:	e085      	b.n	8013b46 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a42:	4618      	mov	r0, r3
 8013a44:	f001 fdaf 	bl	80155a6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	6978      	ldr	r0, [r7, #20]
 8013a4e:	f7f8 f821 	bl	800ba94 <pbuf_remove_header>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d009      	beq.n	8013a6c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013a58:	4b40      	ldr	r3, [pc, #256]	; (8013b5c <icmp_input+0x1f8>)
 8013a5a:	22b6      	movs	r2, #182	; 0xb6
 8013a5c:	4940      	ldr	r1, [pc, #256]	; (8013b60 <icmp_input+0x1fc>)
 8013a5e:	4841      	ldr	r0, [pc, #260]	; (8013b64 <icmp_input+0x200>)
 8013a60:	f001 fe0e 	bl	8015680 <iprintf>
          pbuf_free(r);
 8013a64:	6978      	ldr	r0, [r7, #20]
 8013a66:	f7f8 f89b 	bl	800bba0 <pbuf_free>
          goto icmperr;
 8013a6a:	e06c      	b.n	8013b46 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013a6c:	6879      	ldr	r1, [r7, #4]
 8013a6e:	6978      	ldr	r0, [r7, #20]
 8013a70:	f7f8 f9ba 	bl	800bde8 <pbuf_copy>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d003      	beq.n	8013a82 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013a7a:	6978      	ldr	r0, [r7, #20]
 8013a7c:	f7f8 f890 	bl	800bba0 <pbuf_free>
          goto icmperr;
 8013a80:	e061      	b.n	8013b46 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f7f8 f88c 	bl	800bba0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	607b      	str	r3, [r7, #4]
 8013a8c:	e00f      	b.n	8013aae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a90:	330e      	adds	r3, #14
 8013a92:	4619      	mov	r1, r3
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7f7 fffd 	bl	800ba94 <pbuf_remove_header>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d006      	beq.n	8013aae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013aa0:	4b2e      	ldr	r3, [pc, #184]	; (8013b5c <icmp_input+0x1f8>)
 8013aa2:	22c7      	movs	r2, #199	; 0xc7
 8013aa4:	4930      	ldr	r1, [pc, #192]	; (8013b68 <icmp_input+0x204>)
 8013aa6:	482f      	ldr	r0, [pc, #188]	; (8013b64 <icmp_input+0x200>)
 8013aa8:	f001 fdea 	bl	8015680 <iprintf>
          goto icmperr;
 8013aac:	e04b      	b.n	8013b46 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7f7 ffdb 	bl	800ba74 <pbuf_add_header>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d12b      	bne.n	8013b1c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013ad2:	4b20      	ldr	r3, [pc, #128]	; (8013b54 <icmp_input+0x1f0>)
 8013ad4:	691a      	ldr	r2, [r3, #16]
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	2200      	movs	r2, #0
 8013ade:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	709a      	strb	r2, [r3, #2]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	22ff      	movs	r2, #255	; 0xff
 8013aee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	2200      	movs	r2, #0
 8013af4:	729a      	strb	r2, [r3, #10]
 8013af6:	2200      	movs	r2, #0
 8013af8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	9302      	str	r3, [sp, #8]
 8013afe:	2301      	movs	r3, #1
 8013b00:	9301      	str	r3, [sp, #4]
 8013b02:	2300      	movs	r3, #0
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	23ff      	movs	r3, #255	; 0xff
 8013b08:	2200      	movs	r2, #0
 8013b0a:	69f9      	ldr	r1, [r7, #28]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 fa73 	bl	8013ff8 <ip4_output_if>
 8013b12:	4603      	mov	r3, r0
 8013b14:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013b16:	e001      	b.n	8013b1c <icmp_input+0x1b8>
      break;
 8013b18:	bf00      	nop
 8013b1a:	e000      	b.n	8013b1e <icmp_input+0x1ba>
      break;
 8013b1c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f7f8 f83e 	bl	800bba0 <pbuf_free>
  return;
 8013b24:	e013      	b.n	8013b4e <icmp_input+0x1ea>
    goto lenerr;
 8013b26:	bf00      	nop
 8013b28:	e002      	b.n	8013b30 <icmp_input+0x1cc>
    goto lenerr;
 8013b2a:	bf00      	nop
 8013b2c:	e000      	b.n	8013b30 <icmp_input+0x1cc>
        goto lenerr;
 8013b2e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f7f8 f835 	bl	800bba0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013b36:	e00a      	b.n	8013b4e <icmp_input+0x1ea>
        goto icmperr;
 8013b38:	bf00      	nop
 8013b3a:	e004      	b.n	8013b46 <icmp_input+0x1e2>
        goto icmperr;
 8013b3c:	bf00      	nop
 8013b3e:	e002      	b.n	8013b46 <icmp_input+0x1e2>
          goto icmperr;
 8013b40:	bf00      	nop
 8013b42:	e000      	b.n	8013b46 <icmp_input+0x1e2>
          goto icmperr;
 8013b44:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f7f8 f82a 	bl	800bba0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013b4c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013b4e:	3728      	adds	r7, #40	; 0x28
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	20007f40 	.word	0x20007f40
 8013b58:	20007f54 	.word	0x20007f54
 8013b5c:	080194c8 	.word	0x080194c8
 8013b60:	08019500 	.word	0x08019500
 8013b64:	08019538 	.word	0x08019538
 8013b68:	08019560 	.word	0x08019560

08013b6c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	460b      	mov	r3, r1
 8013b76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013b78:	78fb      	ldrb	r3, [r7, #3]
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	2103      	movs	r1, #3
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 f814 	bl	8013bac <icmp_send_response>
}
 8013b84:	bf00      	nop
 8013b86:	3708      	adds	r7, #8
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b082      	sub	sp, #8
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	460b      	mov	r3, r1
 8013b96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013b98:	78fb      	ldrb	r3, [r7, #3]
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	210b      	movs	r1, #11
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 f804 	bl	8013bac <icmp_send_response>
}
 8013ba4:	bf00      	nop
 8013ba6:	3708      	adds	r7, #8
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b08c      	sub	sp, #48	; 0x30
 8013bb0:	af04      	add	r7, sp, #16
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	70fb      	strb	r3, [r7, #3]
 8013bb8:	4613      	mov	r3, r2
 8013bba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013bbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bc0:	2124      	movs	r1, #36	; 0x24
 8013bc2:	2022      	movs	r0, #34	; 0x22
 8013bc4:	f7f7 fd0c 	bl	800b5e0 <pbuf_alloc>
 8013bc8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d04c      	beq.n	8013c6a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	895b      	ldrh	r3, [r3, #10]
 8013bd4:	2b23      	cmp	r3, #35	; 0x23
 8013bd6:	d806      	bhi.n	8013be6 <icmp_send_response+0x3a>
 8013bd8:	4b26      	ldr	r3, [pc, #152]	; (8013c74 <icmp_send_response+0xc8>)
 8013bda:	f240 1269 	movw	r2, #361	; 0x169
 8013bde:	4926      	ldr	r1, [pc, #152]	; (8013c78 <icmp_send_response+0xcc>)
 8013be0:	4826      	ldr	r0, [pc, #152]	; (8013c7c <icmp_send_response+0xd0>)
 8013be2:	f001 fd4d 	bl	8015680 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	78fa      	ldrb	r2, [r7, #3]
 8013bf6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	78ba      	ldrb	r2, [r7, #2]
 8013bfc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	2200      	movs	r2, #0
 8013c02:	711a      	strb	r2, [r3, #4]
 8013c04:	2200      	movs	r2, #0
 8013c06:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	719a      	strb	r2, [r3, #6]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	f103 0008 	add.w	r0, r3, #8
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	221c      	movs	r2, #28
 8013c20:	4619      	mov	r1, r3
 8013c22:	f001 fcc0 	bl	80155a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013c26:	69bb      	ldr	r3, [r7, #24]
 8013c28:	68db      	ldr	r3, [r3, #12]
 8013c2a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013c2c:	f107 030c 	add.w	r3, r7, #12
 8013c30:	4618      	mov	r0, r3
 8013c32:	f000 f825 	bl	8013c80 <ip4_route>
 8013c36:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d011      	beq.n	8013c62 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	2200      	movs	r2, #0
 8013c42:	709a      	strb	r2, [r3, #2]
 8013c44:	2200      	movs	r2, #0
 8013c46:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013c48:	f107 020c 	add.w	r2, r7, #12
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	9302      	str	r3, [sp, #8]
 8013c50:	2301      	movs	r3, #1
 8013c52:	9301      	str	r3, [sp, #4]
 8013c54:	2300      	movs	r3, #0
 8013c56:	9300      	str	r3, [sp, #0]
 8013c58:	23ff      	movs	r3, #255	; 0xff
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	69f8      	ldr	r0, [r7, #28]
 8013c5e:	f000 f9cb 	bl	8013ff8 <ip4_output_if>
  }
  pbuf_free(q);
 8013c62:	69f8      	ldr	r0, [r7, #28]
 8013c64:	f7f7 ff9c 	bl	800bba0 <pbuf_free>
 8013c68:	e000      	b.n	8013c6c <icmp_send_response+0xc0>
    return;
 8013c6a:	bf00      	nop
}
 8013c6c:	3720      	adds	r7, #32
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	080194c8 	.word	0x080194c8
 8013c78:	08019594 	.word	0x08019594
 8013c7c:	08019538 	.word	0x08019538

08013c80 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013c80:	b480      	push	{r7}
 8013c82:	b085      	sub	sp, #20
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013c88:	4b33      	ldr	r3, [pc, #204]	; (8013d58 <ip4_route+0xd8>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	60fb      	str	r3, [r7, #12]
 8013c8e:	e036      	b.n	8013cfe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c96:	f003 0301 	and.w	r3, r3, #1
 8013c9a:	b2db      	uxtb	r3, r3
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d02b      	beq.n	8013cf8 <ip4_route+0x78>
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ca6:	089b      	lsrs	r3, r3, #2
 8013ca8:	f003 0301 	and.w	r3, r3, #1
 8013cac:	b2db      	uxtb	r3, r3
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d022      	beq.n	8013cf8 <ip4_route+0x78>
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	3304      	adds	r3, #4
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d01d      	beq.n	8013cf8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	3304      	adds	r3, #4
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	405a      	eors	r2, r3
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	3308      	adds	r3, #8
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	4013      	ands	r3, r2
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d101      	bne.n	8013cd8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	e038      	b.n	8013d4a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013cde:	f003 0302 	and.w	r3, r3, #2
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d108      	bne.n	8013cf8 <ip4_route+0x78>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	330c      	adds	r3, #12
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d101      	bne.n	8013cf8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	e028      	b.n	8013d4a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	60fb      	str	r3, [r7, #12]
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d1c5      	bne.n	8013c90 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013d04:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <ip4_route+0xdc>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d01a      	beq.n	8013d42 <ip4_route+0xc2>
 8013d0c:	4b13      	ldr	r3, [pc, #76]	; (8013d5c <ip4_route+0xdc>)
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d14:	f003 0301 	and.w	r3, r3, #1
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d012      	beq.n	8013d42 <ip4_route+0xc2>
 8013d1c:	4b0f      	ldr	r3, [pc, #60]	; (8013d5c <ip4_route+0xdc>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d24:	f003 0304 	and.w	r3, r3, #4
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d00a      	beq.n	8013d42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013d2c:	4b0b      	ldr	r3, [pc, #44]	; (8013d5c <ip4_route+0xdc>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	3304      	adds	r3, #4
 8013d32:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d004      	beq.n	8013d42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8013d40:	d101      	bne.n	8013d46 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013d42:	2300      	movs	r3, #0
 8013d44:	e001      	b.n	8013d4a <ip4_route+0xca>
  }

  return netif_default;
 8013d46:	4b05      	ldr	r3, [pc, #20]	; (8013d5c <ip4_route+0xdc>)
 8013d48:	681b      	ldr	r3, [r3, #0]
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	2000b644 	.word	0x2000b644
 8013d5c:	2000b648 	.word	0x2000b648

08013d60 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d6e:	f003 0301 	and.w	r3, r3, #1
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d016      	beq.n	8013da6 <ip4_input_accept+0x46>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	3304      	adds	r3, #4
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d011      	beq.n	8013da6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013d82:	4b0b      	ldr	r3, [pc, #44]	; (8013db0 <ip4_input_accept+0x50>)
 8013d84:	695a      	ldr	r2, [r3, #20]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	3304      	adds	r3, #4
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d008      	beq.n	8013da2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013d90:	4b07      	ldr	r3, [pc, #28]	; (8013db0 <ip4_input_accept+0x50>)
 8013d92:	695b      	ldr	r3, [r3, #20]
 8013d94:	6879      	ldr	r1, [r7, #4]
 8013d96:	4618      	mov	r0, r3
 8013d98:	f000 fa06 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 8013d9c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d001      	beq.n	8013da6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013da2:	2301      	movs	r3, #1
 8013da4:	e000      	b.n	8013da8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013da6:	2300      	movs	r3, #0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	20007f40 	.word	0x20007f40

08013db4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b086      	sub	sp, #24
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	091b      	lsrs	r3, r3, #4
 8013dca:	b2db      	uxtb	r3, r3
 8013dcc:	2b04      	cmp	r3, #4
 8013dce:	d004      	beq.n	8013dda <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	f7f7 fee5 	bl	800bba0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	e105      	b.n	8013fe6 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	f003 030f 	and.w	r3, r3, #15
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	009b      	lsls	r3, r3, #2
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	885b      	ldrh	r3, [r3, #2]
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7f6 fb2d 	bl	800a450 <lwip_htons>
 8013df6:	4603      	mov	r3, r0
 8013df8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	891b      	ldrh	r3, [r3, #8]
 8013dfe:	89ba      	ldrh	r2, [r7, #12]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d204      	bcs.n	8013e0e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013e04:	89bb      	ldrh	r3, [r7, #12]
 8013e06:	4619      	mov	r1, r3
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7f7 fd43 	bl	800b894 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	895b      	ldrh	r3, [r3, #10]
 8013e12:	89fa      	ldrh	r2, [r7, #14]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d807      	bhi.n	8013e28 <ip4_input+0x74>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	891b      	ldrh	r3, [r3, #8]
 8013e1c:	89ba      	ldrh	r2, [r7, #12]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d802      	bhi.n	8013e28 <ip4_input+0x74>
 8013e22:	89fb      	ldrh	r3, [r7, #14]
 8013e24:	2b13      	cmp	r3, #19
 8013e26:	d804      	bhi.n	8013e32 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f7f7 feb9 	bl	800bba0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	e0d9      	b.n	8013fe6 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	691b      	ldr	r3, [r3, #16]
 8013e36:	4a6e      	ldr	r2, [pc, #440]	; (8013ff0 <ip4_input+0x23c>)
 8013e38:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	4a6c      	ldr	r2, [pc, #432]	; (8013ff0 <ip4_input+0x23c>)
 8013e40:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013e42:	4b6b      	ldr	r3, [pc, #428]	; (8013ff0 <ip4_input+0x23c>)
 8013e44:	695b      	ldr	r3, [r3, #20]
 8013e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e4a:	2be0      	cmp	r3, #224	; 0xe0
 8013e4c:	d112      	bne.n	8013e74 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e54:	f003 0301 	and.w	r3, r3, #1
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d007      	beq.n	8013e6e <ip4_input+0xba>
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	3304      	adds	r3, #4
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d002      	beq.n	8013e6e <ip4_input+0xba>
      netif = inp;
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	613b      	str	r3, [r7, #16]
 8013e6c:	e02a      	b.n	8013ec4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	613b      	str	r3, [r7, #16]
 8013e72:	e027      	b.n	8013ec4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013e74:	6838      	ldr	r0, [r7, #0]
 8013e76:	f7ff ff73 	bl	8013d60 <ip4_input_accept>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d002      	beq.n	8013e86 <ip4_input+0xd2>
      netif = inp;
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	613b      	str	r3, [r7, #16]
 8013e84:	e01e      	b.n	8013ec4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013e86:	2300      	movs	r3, #0
 8013e88:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013e8a:	4b59      	ldr	r3, [pc, #356]	; (8013ff0 <ip4_input+0x23c>)
 8013e8c:	695b      	ldr	r3, [r3, #20]
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	2b7f      	cmp	r3, #127	; 0x7f
 8013e92:	d017      	beq.n	8013ec4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013e94:	4b57      	ldr	r3, [pc, #348]	; (8013ff4 <ip4_input+0x240>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	613b      	str	r3, [r7, #16]
 8013e9a:	e00e      	b.n	8013eba <ip4_input+0x106>
          if (netif == inp) {
 8013e9c:	693a      	ldr	r2, [r7, #16]
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d006      	beq.n	8013eb2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013ea4:	6938      	ldr	r0, [r7, #16]
 8013ea6:	f7ff ff5b 	bl	8013d60 <ip4_input_accept>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d108      	bne.n	8013ec2 <ip4_input+0x10e>
 8013eb0:	e000      	b.n	8013eb4 <ip4_input+0x100>
            continue;
 8013eb2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	613b      	str	r3, [r7, #16]
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d1ed      	bne.n	8013e9c <ip4_input+0xe8>
 8013ec0:	e000      	b.n	8013ec4 <ip4_input+0x110>
            break;
 8013ec2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013ec4:	4b4a      	ldr	r3, [pc, #296]	; (8013ff0 <ip4_input+0x23c>)
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	6839      	ldr	r1, [r7, #0]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f000 f96c 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d105      	bne.n	8013ee2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013ed6:	4b46      	ldr	r3, [pc, #280]	; (8013ff0 <ip4_input+0x23c>)
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013ede:	2be0      	cmp	r3, #224	; 0xe0
 8013ee0:	d104      	bne.n	8013eec <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7f7 fe5c 	bl	800bba0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	e07c      	b.n	8013fe6 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d104      	bne.n	8013efc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f7f7 fe54 	bl	800bba0 <pbuf_free>
    return ERR_OK;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	e074      	b.n	8013fe6 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	88db      	ldrh	r3, [r3, #6]
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	461a      	mov	r2, r3
 8013f04:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013f08:	4013      	ands	r3, r2
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00b      	beq.n	8013f26 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f000 fc90 	bl	8014834 <ip4_reass>
 8013f14:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d101      	bne.n	8013f20 <ip4_input+0x16c>
      return ERR_OK;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	e062      	b.n	8013fe6 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013f26:	4a32      	ldr	r2, [pc, #200]	; (8013ff0 <ip4_input+0x23c>)
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013f2c:	4a30      	ldr	r2, [pc, #192]	; (8013ff0 <ip4_input+0x23c>)
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013f32:	4a2f      	ldr	r2, [pc, #188]	; (8013ff0 <ip4_input+0x23c>)
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	f003 030f 	and.w	r3, r3, #15
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	4b29      	ldr	r3, [pc, #164]	; (8013ff0 <ip4_input+0x23c>)
 8013f4a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013f4c:	89fb      	ldrh	r3, [r7, #14]
 8013f4e:	4619      	mov	r1, r3
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f7f7 fd9f 	bl	800ba94 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	7a5b      	ldrb	r3, [r3, #9]
 8013f5a:	2b06      	cmp	r3, #6
 8013f5c:	d009      	beq.n	8013f72 <ip4_input+0x1be>
 8013f5e:	2b11      	cmp	r3, #17
 8013f60:	d002      	beq.n	8013f68 <ip4_input+0x1b4>
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d00a      	beq.n	8013f7c <ip4_input+0x1c8>
 8013f66:	e00e      	b.n	8013f86 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013f68:	6839      	ldr	r1, [r7, #0]
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f7fe fb5c 	bl	8012628 <udp_input>
        break;
 8013f70:	e026      	b.n	8013fc0 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013f72:	6839      	ldr	r1, [r7, #0]
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f7f9 ff0b 	bl	800dd90 <tcp_input>
        break;
 8013f7a:	e021      	b.n	8013fc0 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013f7c:	6839      	ldr	r1, [r7, #0]
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7ff fcf0 	bl	8013964 <icmp_input>
        break;
 8013f84:	e01c      	b.n	8013fc0 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013f86:	4b1a      	ldr	r3, [pc, #104]	; (8013ff0 <ip4_input+0x23c>)
 8013f88:	695b      	ldr	r3, [r3, #20]
 8013f8a:	6939      	ldr	r1, [r7, #16]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f000 f90b 	bl	80141a8 <ip4_addr_isbroadcast_u32>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d10f      	bne.n	8013fb8 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013f98:	4b15      	ldr	r3, [pc, #84]	; (8013ff0 <ip4_input+0x23c>)
 8013f9a:	695b      	ldr	r3, [r3, #20]
 8013f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013fa0:	2be0      	cmp	r3, #224	; 0xe0
 8013fa2:	d009      	beq.n	8013fb8 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013fa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f7f7 fde5 	bl	800bb7a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013fb0:	2102      	movs	r1, #2
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f7ff fdda 	bl	8013b6c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f7f7 fdf1 	bl	800bba0 <pbuf_free>
        break;
 8013fbe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013fc0:	4b0b      	ldr	r3, [pc, #44]	; (8013ff0 <ip4_input+0x23c>)
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013fc6:	4b0a      	ldr	r3, [pc, #40]	; (8013ff0 <ip4_input+0x23c>)
 8013fc8:	2200      	movs	r2, #0
 8013fca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013fcc:	4b08      	ldr	r3, [pc, #32]	; (8013ff0 <ip4_input+0x23c>)
 8013fce:	2200      	movs	r2, #0
 8013fd0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013fd2:	4b07      	ldr	r3, [pc, #28]	; (8013ff0 <ip4_input+0x23c>)
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013fd8:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <ip4_input+0x23c>)
 8013fda:	2200      	movs	r2, #0
 8013fdc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013fde:	4b04      	ldr	r3, [pc, #16]	; (8013ff0 <ip4_input+0x23c>)
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013fe4:	2300      	movs	r3, #0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3718      	adds	r7, #24
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	20007f40 	.word	0x20007f40
 8013ff4:	2000b644 	.word	0x2000b644

08013ff8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b08a      	sub	sp, #40	; 0x28
 8013ffc:	af04      	add	r7, sp, #16
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	607a      	str	r2, [r7, #4]
 8014004:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d009      	beq.n	8014024 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d003      	beq.n	801401e <ip4_output_if+0x26>
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d102      	bne.n	8014024 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014020:	3304      	adds	r3, #4
 8014022:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014024:	78fa      	ldrb	r2, [r7, #3]
 8014026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014028:	9302      	str	r3, [sp, #8]
 801402a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801402e:	9301      	str	r3, [sp, #4]
 8014030:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014034:	9300      	str	r3, [sp, #0]
 8014036:	4613      	mov	r3, r2
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	6979      	ldr	r1, [r7, #20]
 801403c:	68f8      	ldr	r0, [r7, #12]
 801403e:	f000 f805 	bl	801404c <ip4_output_if_src>
 8014042:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014044:	4618      	mov	r0, r3
 8014046:	3718      	adds	r7, #24
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b088      	sub	sp, #32
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	7b9b      	ldrb	r3, [r3, #14]
 801405e:	2b01      	cmp	r3, #1
 8014060:	d006      	beq.n	8014070 <ip4_output_if_src+0x24>
 8014062:	4b4b      	ldr	r3, [pc, #300]	; (8014190 <ip4_output_if_src+0x144>)
 8014064:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014068:	494a      	ldr	r1, [pc, #296]	; (8014194 <ip4_output_if_src+0x148>)
 801406a:	484b      	ldr	r0, [pc, #300]	; (8014198 <ip4_output_if_src+0x14c>)
 801406c:	f001 fb08 	bl	8015680 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d060      	beq.n	8014138 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014076:	2314      	movs	r3, #20
 8014078:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801407a:	2114      	movs	r1, #20
 801407c:	68f8      	ldr	r0, [r7, #12]
 801407e:	f7f7 fcf9 	bl	800ba74 <pbuf_add_header>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d002      	beq.n	801408e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014088:	f06f 0301 	mvn.w	r3, #1
 801408c:	e07c      	b.n	8014188 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	895b      	ldrh	r3, [r3, #10]
 8014098:	2b13      	cmp	r3, #19
 801409a:	d806      	bhi.n	80140aa <ip4_output_if_src+0x5e>
 801409c:	4b3c      	ldr	r3, [pc, #240]	; (8014190 <ip4_output_if_src+0x144>)
 801409e:	f240 3289 	movw	r2, #905	; 0x389
 80140a2:	493e      	ldr	r1, [pc, #248]	; (801419c <ip4_output_if_src+0x150>)
 80140a4:	483c      	ldr	r0, [pc, #240]	; (8014198 <ip4_output_if_src+0x14c>)
 80140a6:	f001 faeb 	bl	8015680 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80140aa:	69fb      	ldr	r3, [r7, #28]
 80140ac:	78fa      	ldrb	r2, [r7, #3]
 80140ae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80140b0:	69fb      	ldr	r3, [r7, #28]
 80140b2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80140b6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	69fb      	ldr	r3, [r7, #28]
 80140be:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80140c0:	8b7b      	ldrh	r3, [r7, #26]
 80140c2:	089b      	lsrs	r3, r3, #2
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140cc:	b2da      	uxtb	r2, r3
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80140d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	891b      	ldrh	r3, [r3, #8]
 80140de:	4618      	mov	r0, r3
 80140e0:	f7f6 f9b6 	bl	800a450 <lwip_htons>
 80140e4:	4603      	mov	r3, r0
 80140e6:	461a      	mov	r2, r3
 80140e8:	69fb      	ldr	r3, [r7, #28]
 80140ea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	2200      	movs	r2, #0
 80140f0:	719a      	strb	r2, [r3, #6]
 80140f2:	2200      	movs	r2, #0
 80140f4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80140f6:	4b2a      	ldr	r3, [pc, #168]	; (80141a0 <ip4_output_if_src+0x154>)
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7f6 f9a8 	bl	800a450 <lwip_htons>
 8014100:	4603      	mov	r3, r0
 8014102:	461a      	mov	r2, r3
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014108:	4b25      	ldr	r3, [pc, #148]	; (80141a0 <ip4_output_if_src+0x154>)
 801410a:	881b      	ldrh	r3, [r3, #0]
 801410c:	3301      	adds	r3, #1
 801410e:	b29a      	uxth	r2, r3
 8014110:	4b23      	ldr	r3, [pc, #140]	; (80141a0 <ip4_output_if_src+0x154>)
 8014112:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d104      	bne.n	8014124 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801411a:	4b22      	ldr	r3, [pc, #136]	; (80141a4 <ip4_output_if_src+0x158>)
 801411c:	681a      	ldr	r2, [r3, #0]
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	60da      	str	r2, [r3, #12]
 8014122:	e003      	b.n	801412c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	2200      	movs	r2, #0
 8014130:	729a      	strb	r2, [r3, #10]
 8014132:	2200      	movs	r2, #0
 8014134:	72da      	strb	r2, [r3, #11]
 8014136:	e00f      	b.n	8014158 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	895b      	ldrh	r3, [r3, #10]
 801413c:	2b13      	cmp	r3, #19
 801413e:	d802      	bhi.n	8014146 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014140:	f06f 0301 	mvn.w	r3, #1
 8014144:	e020      	b.n	8014188 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	691b      	ldr	r3, [r3, #16]
 8014150:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014152:	f107 0314 	add.w	r3, r7, #20
 8014156:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801415a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00c      	beq.n	801417a <ip4_output_if_src+0x12e>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	891a      	ldrh	r2, [r3, #8]
 8014164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014168:	429a      	cmp	r2, r3
 801416a:	d906      	bls.n	801417a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801416c:	687a      	ldr	r2, [r7, #4]
 801416e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014170:	68f8      	ldr	r0, [r7, #12]
 8014172:	f000 fd4b 	bl	8014c0c <ip4_frag>
 8014176:	4603      	mov	r3, r0
 8014178:	e006      	b.n	8014188 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417c:	695b      	ldr	r3, [r3, #20]
 801417e:	687a      	ldr	r2, [r7, #4]
 8014180:	68f9      	ldr	r1, [r7, #12]
 8014182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014184:	4798      	blx	r3
 8014186:	4603      	mov	r3, r0
}
 8014188:	4618      	mov	r0, r3
 801418a:	3720      	adds	r7, #32
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}
 8014190:	080195c0 	.word	0x080195c0
 8014194:	080195f4 	.word	0x080195f4
 8014198:	08019600 	.word	0x08019600
 801419c:	08019628 	.word	0x08019628
 80141a0:	20004c16 	.word	0x20004c16
 80141a4:	08019a64 	.word	0x08019a64

080141a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b085      	sub	sp, #20
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141bc:	d002      	beq.n	80141c4 <ip4_addr_isbroadcast_u32+0x1c>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d101      	bne.n	80141c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80141c4:	2301      	movs	r3, #1
 80141c6:	e02a      	b.n	801421e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80141ce:	f003 0302 	and.w	r3, r3, #2
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d101      	bne.n	80141da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80141d6:	2300      	movs	r3, #0
 80141d8:	e021      	b.n	801421e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	3304      	adds	r3, #4
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d101      	bne.n	80141ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80141e6:	2300      	movs	r3, #0
 80141e8:	e019      	b.n	801421e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	3304      	adds	r3, #4
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	405a      	eors	r2, r3
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	3308      	adds	r3, #8
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	4013      	ands	r3, r2
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d10d      	bne.n	801421c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	3308      	adds	r3, #8
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	43da      	mvns	r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	3308      	adds	r3, #8
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014214:	429a      	cmp	r2, r3
 8014216:	d101      	bne.n	801421c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014218:	2301      	movs	r3, #1
 801421a:	e000      	b.n	801421e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801421c:	2300      	movs	r3, #0
  }
}
 801421e:	4618      	mov	r0, r3
 8014220:	3714      	adds	r7, #20
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr
	...

0801422c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014232:	2300      	movs	r3, #0
 8014234:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014236:	4b12      	ldr	r3, [pc, #72]	; (8014280 <ip_reass_tmr+0x54>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801423c:	e018      	b.n	8014270 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	7fdb      	ldrb	r3, [r3, #31]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d00b      	beq.n	801425e <ip_reass_tmr+0x32>
      r->timer--;
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	7fdb      	ldrb	r3, [r3, #31]
 801424a:	3b01      	subs	r3, #1
 801424c:	b2da      	uxtb	r2, r3
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	60fb      	str	r3, [r7, #12]
 801425c:	e008      	b.n	8014270 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014268:	68b9      	ldr	r1, [r7, #8]
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f000 f80a 	bl	8014284 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d1e3      	bne.n	801423e <ip_reass_tmr+0x12>
    }
  }
}
 8014276:	bf00      	nop
 8014278:	3710      	adds	r7, #16
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	20004c18 	.word	0x20004c18

08014284 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b088      	sub	sp, #32
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801428e:	2300      	movs	r3, #0
 8014290:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014292:	683a      	ldr	r2, [r7, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	429a      	cmp	r2, r3
 8014298:	d105      	bne.n	80142a6 <ip_reass_free_complete_datagram+0x22>
 801429a:	4b45      	ldr	r3, [pc, #276]	; (80143b0 <ip_reass_free_complete_datagram+0x12c>)
 801429c:	22ab      	movs	r2, #171	; 0xab
 801429e:	4945      	ldr	r1, [pc, #276]	; (80143b4 <ip_reass_free_complete_datagram+0x130>)
 80142a0:	4845      	ldr	r0, [pc, #276]	; (80143b8 <ip_reass_free_complete_datagram+0x134>)
 80142a2:	f001 f9ed 	bl	8015680 <iprintf>
  if (prev != NULL) {
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d00a      	beq.n	80142c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d005      	beq.n	80142c2 <ip_reass_free_complete_datagram+0x3e>
 80142b6:	4b3e      	ldr	r3, [pc, #248]	; (80143b0 <ip_reass_free_complete_datagram+0x12c>)
 80142b8:	22ad      	movs	r2, #173	; 0xad
 80142ba:	4940      	ldr	r1, [pc, #256]	; (80143bc <ip_reass_free_complete_datagram+0x138>)
 80142bc:	483e      	ldr	r0, [pc, #248]	; (80143b8 <ip_reass_free_complete_datagram+0x134>)
 80142be:	f001 f9df 	bl	8015680 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	889b      	ldrh	r3, [r3, #4]
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d12a      	bne.n	801432a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	681a      	ldr	r2, [r3, #0]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	6858      	ldr	r0, [r3, #4]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	3308      	adds	r3, #8
 80142ea:	2214      	movs	r2, #20
 80142ec:	4619      	mov	r1, r3
 80142ee:	f001 f95a 	bl	80155a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80142f2:	2101      	movs	r1, #1
 80142f4:	69b8      	ldr	r0, [r7, #24]
 80142f6:	f7ff fc49 	bl	8013b8c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80142fa:	69b8      	ldr	r0, [r7, #24]
 80142fc:	f7f7 fcde 	bl	800bcbc <pbuf_clen>
 8014300:	4603      	mov	r3, r0
 8014302:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014304:	8bfa      	ldrh	r2, [r7, #30]
 8014306:	8a7b      	ldrh	r3, [r7, #18]
 8014308:	4413      	add	r3, r2
 801430a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801430e:	db05      	blt.n	801431c <ip_reass_free_complete_datagram+0x98>
 8014310:	4b27      	ldr	r3, [pc, #156]	; (80143b0 <ip_reass_free_complete_datagram+0x12c>)
 8014312:	22bc      	movs	r2, #188	; 0xbc
 8014314:	492a      	ldr	r1, [pc, #168]	; (80143c0 <ip_reass_free_complete_datagram+0x13c>)
 8014316:	4828      	ldr	r0, [pc, #160]	; (80143b8 <ip_reass_free_complete_datagram+0x134>)
 8014318:	f001 f9b2 	bl	8015680 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801431c:	8bfa      	ldrh	r2, [r7, #30]
 801431e:	8a7b      	ldrh	r3, [r7, #18]
 8014320:	4413      	add	r3, r2
 8014322:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014324:	69b8      	ldr	r0, [r7, #24]
 8014326:	f7f7 fc3b 	bl	800bba0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014330:	e01f      	b.n	8014372 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014332:	69bb      	ldr	r3, [r7, #24]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014338:	69bb      	ldr	r3, [r7, #24]
 801433a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014342:	68f8      	ldr	r0, [r7, #12]
 8014344:	f7f7 fcba 	bl	800bcbc <pbuf_clen>
 8014348:	4603      	mov	r3, r0
 801434a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801434c:	8bfa      	ldrh	r2, [r7, #30]
 801434e:	8a7b      	ldrh	r3, [r7, #18]
 8014350:	4413      	add	r3, r2
 8014352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014356:	db05      	blt.n	8014364 <ip_reass_free_complete_datagram+0xe0>
 8014358:	4b15      	ldr	r3, [pc, #84]	; (80143b0 <ip_reass_free_complete_datagram+0x12c>)
 801435a:	22cc      	movs	r2, #204	; 0xcc
 801435c:	4918      	ldr	r1, [pc, #96]	; (80143c0 <ip_reass_free_complete_datagram+0x13c>)
 801435e:	4816      	ldr	r0, [pc, #88]	; (80143b8 <ip_reass_free_complete_datagram+0x134>)
 8014360:	f001 f98e 	bl	8015680 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014364:	8bfa      	ldrh	r2, [r7, #30]
 8014366:	8a7b      	ldrh	r3, [r7, #18]
 8014368:	4413      	add	r3, r2
 801436a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801436c:	68f8      	ldr	r0, [r7, #12]
 801436e:	f7f7 fc17 	bl	800bba0 <pbuf_free>
  while (p != NULL) {
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d1dc      	bne.n	8014332 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014378:	6839      	ldr	r1, [r7, #0]
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f000 f8c2 	bl	8014504 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014380:	4b10      	ldr	r3, [pc, #64]	; (80143c4 <ip_reass_free_complete_datagram+0x140>)
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	8bfa      	ldrh	r2, [r7, #30]
 8014386:	429a      	cmp	r2, r3
 8014388:	d905      	bls.n	8014396 <ip_reass_free_complete_datagram+0x112>
 801438a:	4b09      	ldr	r3, [pc, #36]	; (80143b0 <ip_reass_free_complete_datagram+0x12c>)
 801438c:	22d2      	movs	r2, #210	; 0xd2
 801438e:	490e      	ldr	r1, [pc, #56]	; (80143c8 <ip_reass_free_complete_datagram+0x144>)
 8014390:	4809      	ldr	r0, [pc, #36]	; (80143b8 <ip_reass_free_complete_datagram+0x134>)
 8014392:	f001 f975 	bl	8015680 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014396:	4b0b      	ldr	r3, [pc, #44]	; (80143c4 <ip_reass_free_complete_datagram+0x140>)
 8014398:	881a      	ldrh	r2, [r3, #0]
 801439a:	8bfb      	ldrh	r3, [r7, #30]
 801439c:	1ad3      	subs	r3, r2, r3
 801439e:	b29a      	uxth	r2, r3
 80143a0:	4b08      	ldr	r3, [pc, #32]	; (80143c4 <ip_reass_free_complete_datagram+0x140>)
 80143a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80143a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3720      	adds	r7, #32
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	08019658 	.word	0x08019658
 80143b4:	08019694 	.word	0x08019694
 80143b8:	080196a0 	.word	0x080196a0
 80143bc:	080196c8 	.word	0x080196c8
 80143c0:	080196dc 	.word	0x080196dc
 80143c4:	20004c1c 	.word	0x20004c1c
 80143c8:	080196fc 	.word	0x080196fc

080143cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b08a      	sub	sp, #40	; 0x28
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80143d6:	2300      	movs	r3, #0
 80143d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80143da:	2300      	movs	r3, #0
 80143dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80143de:	2300      	movs	r3, #0
 80143e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80143e2:	2300      	movs	r3, #0
 80143e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80143e6:	2300      	movs	r3, #0
 80143e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80143ea:	4b28      	ldr	r3, [pc, #160]	; (801448c <ip_reass_remove_oldest_datagram+0xc0>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80143f0:	e030      	b.n	8014454 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80143f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f4:	695a      	ldr	r2, [r3, #20]
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d10c      	bne.n	8014418 <ip_reass_remove_oldest_datagram+0x4c>
 80143fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014400:	699a      	ldr	r2, [r3, #24]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	691b      	ldr	r3, [r3, #16]
 8014406:	429a      	cmp	r2, r3
 8014408:	d106      	bne.n	8014418 <ip_reass_remove_oldest_datagram+0x4c>
 801440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440c:	899a      	ldrh	r2, [r3, #12]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	889b      	ldrh	r3, [r3, #4]
 8014412:	b29b      	uxth	r3, r3
 8014414:	429a      	cmp	r2, r3
 8014416:	d014      	beq.n	8014442 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	3301      	adds	r3, #1
 801441c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801441e:	6a3b      	ldr	r3, [r7, #32]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d104      	bne.n	801442e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014426:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	61bb      	str	r3, [r7, #24]
 801442c:	e009      	b.n	8014442 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014430:	7fda      	ldrb	r2, [r3, #31]
 8014432:	6a3b      	ldr	r3, [r7, #32]
 8014434:	7fdb      	ldrb	r3, [r3, #31]
 8014436:	429a      	cmp	r2, r3
 8014438:	d803      	bhi.n	8014442 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801443c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d001      	beq.n	801444e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014456:	2b00      	cmp	r3, #0
 8014458:	d1cb      	bne.n	80143f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801445a:	6a3b      	ldr	r3, [r7, #32]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d008      	beq.n	8014472 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014460:	69b9      	ldr	r1, [r7, #24]
 8014462:	6a38      	ldr	r0, [r7, #32]
 8014464:	f7ff ff0e 	bl	8014284 <ip_reass_free_complete_datagram>
 8014468:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801446a:	697a      	ldr	r2, [r7, #20]
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	4413      	add	r3, r2
 8014470:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014472:	697a      	ldr	r2, [r7, #20]
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	429a      	cmp	r2, r3
 8014478:	da02      	bge.n	8014480 <ip_reass_remove_oldest_datagram+0xb4>
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	2b01      	cmp	r3, #1
 801447e:	dcac      	bgt.n	80143da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014480:	697b      	ldr	r3, [r7, #20]
}
 8014482:	4618      	mov	r0, r3
 8014484:	3728      	adds	r7, #40	; 0x28
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	20004c18 	.word	0x20004c18

08014490 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b084      	sub	sp, #16
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801449a:	2004      	movs	r0, #4
 801449c:	f7f6 fc8e 	bl	800adbc <memp_malloc>
 80144a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d110      	bne.n	80144ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80144a8:	6839      	ldr	r1, [r7, #0]
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7ff ff8e 	bl	80143cc <ip_reass_remove_oldest_datagram>
 80144b0:	4602      	mov	r2, r0
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	4293      	cmp	r3, r2
 80144b6:	dc03      	bgt.n	80144c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80144b8:	2004      	movs	r0, #4
 80144ba:	f7f6 fc7f 	bl	800adbc <memp_malloc>
 80144be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d101      	bne.n	80144ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80144c6:	2300      	movs	r3, #0
 80144c8:	e016      	b.n	80144f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80144ca:	2220      	movs	r2, #32
 80144cc:	2100      	movs	r1, #0
 80144ce:	68f8      	ldr	r0, [r7, #12]
 80144d0:	f001 f874 	bl	80155bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	220f      	movs	r2, #15
 80144d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80144da:	4b09      	ldr	r3, [pc, #36]	; (8014500 <ip_reass_enqueue_new_datagram+0x70>)
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80144e2:	4a07      	ldr	r2, [pc, #28]	; (8014500 <ip_reass_enqueue_new_datagram+0x70>)
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	3308      	adds	r3, #8
 80144ec:	2214      	movs	r2, #20
 80144ee:	6879      	ldr	r1, [r7, #4]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f001 f858 	bl	80155a6 <memcpy>
  return ipr;
 80144f6:	68fb      	ldr	r3, [r7, #12]
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3710      	adds	r7, #16
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	20004c18 	.word	0x20004c18

08014504 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b082      	sub	sp, #8
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801450e:	4b10      	ldr	r3, [pc, #64]	; (8014550 <ip_reass_dequeue_datagram+0x4c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	429a      	cmp	r2, r3
 8014516:	d104      	bne.n	8014522 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4a0c      	ldr	r2, [pc, #48]	; (8014550 <ip_reass_dequeue_datagram+0x4c>)
 801451e:	6013      	str	r3, [r2, #0]
 8014520:	e00d      	b.n	801453e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d106      	bne.n	8014536 <ip_reass_dequeue_datagram+0x32>
 8014528:	4b0a      	ldr	r3, [pc, #40]	; (8014554 <ip_reass_dequeue_datagram+0x50>)
 801452a:	f240 1245 	movw	r2, #325	; 0x145
 801452e:	490a      	ldr	r1, [pc, #40]	; (8014558 <ip_reass_dequeue_datagram+0x54>)
 8014530:	480a      	ldr	r0, [pc, #40]	; (801455c <ip_reass_dequeue_datagram+0x58>)
 8014532:	f001 f8a5 	bl	8015680 <iprintf>
    prev->next = ipr->next;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801453e:	6879      	ldr	r1, [r7, #4]
 8014540:	2004      	movs	r0, #4
 8014542:	f7f6 fc8d 	bl	800ae60 <memp_free>
}
 8014546:	bf00      	nop
 8014548:	3708      	adds	r7, #8
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	20004c18 	.word	0x20004c18
 8014554:	08019658 	.word	0x08019658
 8014558:	08019720 	.word	0x08019720
 801455c:	080196a0 	.word	0x080196a0

08014560 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b08c      	sub	sp, #48	; 0x30
 8014564:	af00      	add	r7, sp, #0
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801456c:	2300      	movs	r3, #0
 801456e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014570:	2301      	movs	r3, #1
 8014572:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	885b      	ldrh	r3, [r3, #2]
 801457e:	b29b      	uxth	r3, r3
 8014580:	4618      	mov	r0, r3
 8014582:	f7f5 ff65 	bl	800a450 <lwip_htons>
 8014586:	4603      	mov	r3, r0
 8014588:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801458a:	69fb      	ldr	r3, [r7, #28]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	f003 030f 	and.w	r3, r3, #15
 8014592:	b2db      	uxtb	r3, r3
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014598:	7e7b      	ldrb	r3, [r7, #25]
 801459a:	b29b      	uxth	r3, r3
 801459c:	8b7a      	ldrh	r2, [r7, #26]
 801459e:	429a      	cmp	r2, r3
 80145a0:	d202      	bcs.n	80145a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145a2:	f04f 33ff 	mov.w	r3, #4294967295
 80145a6:	e135      	b.n	8014814 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80145a8:	7e7b      	ldrb	r3, [r7, #25]
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	8b7a      	ldrh	r2, [r7, #26]
 80145ae:	1ad3      	subs	r3, r2, r3
 80145b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	88db      	ldrh	r3, [r3, #6]
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7f5 ff49 	bl	800a450 <lwip_htons>
 80145be:	4603      	mov	r3, r0
 80145c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	00db      	lsls	r3, r3, #3
 80145c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80145d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d2:	2200      	movs	r2, #0
 80145d4:	701a      	strb	r2, [r3, #0]
 80145d6:	2200      	movs	r2, #0
 80145d8:	705a      	strb	r2, [r3, #1]
 80145da:	2200      	movs	r2, #0
 80145dc:	709a      	strb	r2, [r3, #2]
 80145de:	2200      	movs	r2, #0
 80145e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80145e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e4:	8afa      	ldrh	r2, [r7, #22]
 80145e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80145e8:	8afa      	ldrh	r2, [r7, #22]
 80145ea:	8b7b      	ldrh	r3, [r7, #26]
 80145ec:	4413      	add	r3, r2
 80145ee:	b29a      	uxth	r2, r3
 80145f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80145f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f6:	88db      	ldrh	r3, [r3, #6]
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	8afa      	ldrh	r2, [r7, #22]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d902      	bls.n	8014606 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014600:	f04f 33ff 	mov.w	r3, #4294967295
 8014604:	e106      	b.n	8014814 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	627b      	str	r3, [r7, #36]	; 0x24
 801460c:	e068      	b.n	80146e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014616:	889b      	ldrh	r3, [r3, #4]
 8014618:	b29a      	uxth	r2, r3
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	889b      	ldrh	r3, [r3, #4]
 801461e:	b29b      	uxth	r3, r3
 8014620:	429a      	cmp	r2, r3
 8014622:	d235      	bcs.n	8014690 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014628:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801462c:	2b00      	cmp	r3, #0
 801462e:	d020      	beq.n	8014672 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014632:	889b      	ldrh	r3, [r3, #4]
 8014634:	b29a      	uxth	r2, r3
 8014636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014638:	88db      	ldrh	r3, [r3, #6]
 801463a:	b29b      	uxth	r3, r3
 801463c:	429a      	cmp	r2, r3
 801463e:	d307      	bcc.n	8014650 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014642:	88db      	ldrh	r3, [r3, #6]
 8014644:	b29a      	uxth	r2, r3
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	889b      	ldrh	r3, [r3, #4]
 801464a:	b29b      	uxth	r3, r3
 801464c:	429a      	cmp	r2, r3
 801464e:	d902      	bls.n	8014656 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014650:	f04f 33ff 	mov.w	r3, #4294967295
 8014654:	e0de      	b.n	8014814 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014658:	68ba      	ldr	r2, [r7, #8]
 801465a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465e:	88db      	ldrh	r3, [r3, #6]
 8014660:	b29a      	uxth	r2, r3
 8014662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014664:	889b      	ldrh	r3, [r3, #4]
 8014666:	b29b      	uxth	r3, r3
 8014668:	429a      	cmp	r2, r3
 801466a:	d03d      	beq.n	80146e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801466c:	2300      	movs	r3, #0
 801466e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014670:	e03a      	b.n	80146e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014674:	88db      	ldrh	r3, [r3, #6]
 8014676:	b29a      	uxth	r2, r3
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	889b      	ldrh	r3, [r3, #4]
 801467c:	b29b      	uxth	r3, r3
 801467e:	429a      	cmp	r2, r3
 8014680:	d902      	bls.n	8014688 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014682:	f04f 33ff 	mov.w	r3, #4294967295
 8014686:	e0c5      	b.n	8014814 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	68ba      	ldr	r2, [r7, #8]
 801468c:	605a      	str	r2, [r3, #4]
      break;
 801468e:	e02b      	b.n	80146e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014692:	889b      	ldrh	r3, [r3, #4]
 8014694:	b29a      	uxth	r2, r3
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	889b      	ldrh	r3, [r3, #4]
 801469a:	b29b      	uxth	r3, r3
 801469c:	429a      	cmp	r2, r3
 801469e:	d102      	bne.n	80146a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80146a0:	f04f 33ff 	mov.w	r3, #4294967295
 80146a4:	e0b6      	b.n	8014814 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80146a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a8:	889b      	ldrh	r3, [r3, #4]
 80146aa:	b29a      	uxth	r2, r3
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	88db      	ldrh	r3, [r3, #6]
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d202      	bcs.n	80146bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80146b6:	f04f 33ff 	mov.w	r3, #4294967295
 80146ba:	e0ab      	b.n	8014814 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80146bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d009      	beq.n	80146d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80146c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c4:	88db      	ldrh	r3, [r3, #6]
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	693b      	ldr	r3, [r7, #16]
 80146ca:	889b      	ldrh	r3, [r3, #4]
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d001      	beq.n	80146d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80146d2:	2300      	movs	r3, #0
 80146d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d193      	bne.n	801460e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80146e6:	e000      	b.n	80146ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80146e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80146ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d12d      	bne.n	801474c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80146f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d01c      	beq.n	8014730 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80146f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f8:	88db      	ldrh	r3, [r3, #6]
 80146fa:	b29a      	uxth	r2, r3
 80146fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fe:	889b      	ldrh	r3, [r3, #4]
 8014700:	b29b      	uxth	r3, r3
 8014702:	429a      	cmp	r2, r3
 8014704:	d906      	bls.n	8014714 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014706:	4b45      	ldr	r3, [pc, #276]	; (801481c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014708:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801470c:	4944      	ldr	r1, [pc, #272]	; (8014820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801470e:	4845      	ldr	r0, [pc, #276]	; (8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014710:	f000 ffb6 	bl	8015680 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014716:	68ba      	ldr	r2, [r7, #8]
 8014718:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471c:	88db      	ldrh	r3, [r3, #6]
 801471e:	b29a      	uxth	r2, r3
 8014720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014722:	889b      	ldrh	r3, [r3, #4]
 8014724:	b29b      	uxth	r3, r3
 8014726:	429a      	cmp	r2, r3
 8014728:	d010      	beq.n	801474c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801472a:	2300      	movs	r3, #0
 801472c:	623b      	str	r3, [r7, #32]
 801472e:	e00d      	b.n	801474c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d006      	beq.n	8014746 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014738:	4b38      	ldr	r3, [pc, #224]	; (801481c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801473a:	f240 12bf 	movw	r2, #447	; 0x1bf
 801473e:	493a      	ldr	r1, [pc, #232]	; (8014828 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014740:	4838      	ldr	r0, [pc, #224]	; (8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014742:	f000 ff9d 	bl	8015680 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	68ba      	ldr	r2, [r7, #8]
 801474a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d105      	bne.n	801475e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	7f9b      	ldrb	r3, [r3, #30]
 8014756:	f003 0301 	and.w	r3, r3, #1
 801475a:	2b00      	cmp	r3, #0
 801475c:	d059      	beq.n	8014812 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801475e:	6a3b      	ldr	r3, [r7, #32]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d04f      	beq.n	8014804 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d006      	beq.n	801477a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	889b      	ldrh	r3, [r3, #4]
 8014774:	b29b      	uxth	r3, r3
 8014776:	2b00      	cmp	r3, #0
 8014778:	d002      	beq.n	8014780 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801477a:	2300      	movs	r3, #0
 801477c:	623b      	str	r3, [r7, #32]
 801477e:	e041      	b.n	8014804 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014782:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801478a:	e012      	b.n	80147b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014794:	88db      	ldrh	r3, [r3, #6]
 8014796:	b29a      	uxth	r2, r3
 8014798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801479a:	889b      	ldrh	r3, [r3, #4]
 801479c:	b29b      	uxth	r3, r3
 801479e:	429a      	cmp	r2, r3
 80147a0:	d002      	beq.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80147a2:	2300      	movs	r3, #0
 80147a4:	623b      	str	r3, [r7, #32]
            break;
 80147a6:	e007      	b.n	80147b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80147a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147aa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80147ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80147b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d1e9      	bne.n	801478c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80147b8:	6a3b      	ldr	r3, [r7, #32]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d022      	beq.n	8014804 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d106      	bne.n	80147d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80147c6:	4b15      	ldr	r3, [pc, #84]	; (801481c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147c8:	f240 12df 	movw	r2, #479	; 0x1df
 80147cc:	4917      	ldr	r1, [pc, #92]	; (801482c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80147ce:	4815      	ldr	r0, [pc, #84]	; (8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80147d0:	f000 ff56 	bl	8015680 <iprintf>
          LWIP_ASSERT("sanity check",
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	685b      	ldr	r3, [r3, #4]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147dc:	429a      	cmp	r2, r3
 80147de:	d106      	bne.n	80147ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80147e0:	4b0e      	ldr	r3, [pc, #56]	; (801481c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147e2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80147e6:	4911      	ldr	r1, [pc, #68]	; (801482c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80147e8:	480e      	ldr	r0, [pc, #56]	; (8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80147ea:	f000 ff49 	bl	8015680 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80147ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d006      	beq.n	8014804 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80147f6:	4b09      	ldr	r3, [pc, #36]	; (801481c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147f8:	f240 12e3 	movw	r2, #483	; 0x1e3
 80147fc:	490c      	ldr	r1, [pc, #48]	; (8014830 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80147fe:	4809      	ldr	r0, [pc, #36]	; (8014824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014800:	f000 ff3e 	bl	8015680 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014804:	6a3b      	ldr	r3, [r7, #32]
 8014806:	2b00      	cmp	r3, #0
 8014808:	bf14      	ite	ne
 801480a:	2301      	movne	r3, #1
 801480c:	2300      	moveq	r3, #0
 801480e:	b2db      	uxtb	r3, r3
 8014810:	e000      	b.n	8014814 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014812:	2300      	movs	r3, #0
}
 8014814:	4618      	mov	r0, r3
 8014816:	3730      	adds	r7, #48	; 0x30
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	08019658 	.word	0x08019658
 8014820:	0801973c 	.word	0x0801973c
 8014824:	080196a0 	.word	0x080196a0
 8014828:	0801975c 	.word	0x0801975c
 801482c:	08019794 	.word	0x08019794
 8014830:	080197a4 	.word	0x080197a4

08014834 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b08e      	sub	sp, #56	; 0x38
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	685b      	ldr	r3, [r3, #4]
 8014840:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	f003 030f 	and.w	r3, r3, #15
 801484a:	b2db      	uxtb	r3, r3
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	b2db      	uxtb	r3, r3
 8014850:	2b14      	cmp	r3, #20
 8014852:	f040 8167 	bne.w	8014b24 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014858:	88db      	ldrh	r3, [r3, #6]
 801485a:	b29b      	uxth	r3, r3
 801485c:	4618      	mov	r0, r3
 801485e:	f7f5 fdf7 	bl	800a450 <lwip_htons>
 8014862:	4603      	mov	r3, r0
 8014864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014868:	b29b      	uxth	r3, r3
 801486a:	00db      	lsls	r3, r3, #3
 801486c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014870:	885b      	ldrh	r3, [r3, #2]
 8014872:	b29b      	uxth	r3, r3
 8014874:	4618      	mov	r0, r3
 8014876:	f7f5 fdeb 	bl	800a450 <lwip_htons>
 801487a:	4603      	mov	r3, r0
 801487c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	f003 030f 	and.w	r3, r3, #15
 8014886:	b2db      	uxtb	r3, r3
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801488e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014892:	b29b      	uxth	r3, r3
 8014894:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014896:	429a      	cmp	r2, r3
 8014898:	f0c0 8146 	bcc.w	8014b28 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801489c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148a4:	1ad3      	subs	r3, r2, r3
 80148a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7f7 fa07 	bl	800bcbc <pbuf_clen>
 80148ae:	4603      	mov	r3, r0
 80148b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80148b2:	4ba3      	ldr	r3, [pc, #652]	; (8014b40 <ip4_reass+0x30c>)
 80148b4:	881b      	ldrh	r3, [r3, #0]
 80148b6:	461a      	mov	r2, r3
 80148b8:	8c3b      	ldrh	r3, [r7, #32]
 80148ba:	4413      	add	r3, r2
 80148bc:	2b0a      	cmp	r3, #10
 80148be:	dd10      	ble.n	80148e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80148c0:	8c3b      	ldrh	r3, [r7, #32]
 80148c2:	4619      	mov	r1, r3
 80148c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148c6:	f7ff fd81 	bl	80143cc <ip_reass_remove_oldest_datagram>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f000 812d 	beq.w	8014b2c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80148d2:	4b9b      	ldr	r3, [pc, #620]	; (8014b40 <ip4_reass+0x30c>)
 80148d4:	881b      	ldrh	r3, [r3, #0]
 80148d6:	461a      	mov	r2, r3
 80148d8:	8c3b      	ldrh	r3, [r7, #32]
 80148da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80148dc:	2b0a      	cmp	r3, #10
 80148de:	f300 8125 	bgt.w	8014b2c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80148e2:	4b98      	ldr	r3, [pc, #608]	; (8014b44 <ip4_reass+0x310>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	633b      	str	r3, [r7, #48]	; 0x30
 80148e8:	e015      	b.n	8014916 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80148ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ec:	695a      	ldr	r2, [r3, #20]
 80148ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d10c      	bne.n	8014910 <ip4_reass+0xdc>
 80148f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f8:	699a      	ldr	r2, [r3, #24]
 80148fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fc:	691b      	ldr	r3, [r3, #16]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d106      	bne.n	8014910 <ip4_reass+0xdc>
 8014902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014904:	899a      	ldrh	r2, [r3, #12]
 8014906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014908:	889b      	ldrh	r3, [r3, #4]
 801490a:	b29b      	uxth	r3, r3
 801490c:	429a      	cmp	r2, r3
 801490e:	d006      	beq.n	801491e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	633b      	str	r3, [r7, #48]	; 0x30
 8014916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014918:	2b00      	cmp	r3, #0
 801491a:	d1e6      	bne.n	80148ea <ip4_reass+0xb6>
 801491c:	e000      	b.n	8014920 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801491e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014922:	2b00      	cmp	r3, #0
 8014924:	d109      	bne.n	801493a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014926:	8c3b      	ldrh	r3, [r7, #32]
 8014928:	4619      	mov	r1, r3
 801492a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801492c:	f7ff fdb0 	bl	8014490 <ip_reass_enqueue_new_datagram>
 8014930:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014934:	2b00      	cmp	r3, #0
 8014936:	d11c      	bne.n	8014972 <ip4_reass+0x13e>
      goto nullreturn;
 8014938:	e0f9      	b.n	8014b2e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493c:	88db      	ldrh	r3, [r3, #6]
 801493e:	b29b      	uxth	r3, r3
 8014940:	4618      	mov	r0, r3
 8014942:	f7f5 fd85 	bl	800a450 <lwip_htons>
 8014946:	4603      	mov	r3, r0
 8014948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801494c:	2b00      	cmp	r3, #0
 801494e:	d110      	bne.n	8014972 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014952:	89db      	ldrh	r3, [r3, #14]
 8014954:	4618      	mov	r0, r3
 8014956:	f7f5 fd7b 	bl	800a450 <lwip_htons>
 801495a:	4603      	mov	r3, r0
 801495c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014960:	2b00      	cmp	r3, #0
 8014962:	d006      	beq.n	8014972 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014966:	3308      	adds	r3, #8
 8014968:	2214      	movs	r2, #20
 801496a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801496c:	4618      	mov	r0, r3
 801496e:	f000 fe1a 	bl	80155a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014974:	88db      	ldrh	r3, [r3, #6]
 8014976:	b29b      	uxth	r3, r3
 8014978:	f003 0320 	and.w	r3, r3, #32
 801497c:	2b00      	cmp	r3, #0
 801497e:	bf0c      	ite	eq
 8014980:	2301      	moveq	r3, #1
 8014982:	2300      	movne	r3, #0
 8014984:	b2db      	uxtb	r3, r3
 8014986:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d00e      	beq.n	80149ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801498e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014992:	4413      	add	r3, r2
 8014994:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014996:	8b7a      	ldrh	r2, [r7, #26]
 8014998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801499a:	429a      	cmp	r2, r3
 801499c:	f0c0 80a0 	bcc.w	8014ae0 <ip4_reass+0x2ac>
 80149a0:	8b7b      	ldrh	r3, [r7, #26]
 80149a2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80149a6:	4293      	cmp	r3, r2
 80149a8:	f200 809a 	bhi.w	8014ae0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80149ac:	69fa      	ldr	r2, [r7, #28]
 80149ae:	6879      	ldr	r1, [r7, #4]
 80149b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149b2:	f7ff fdd5 	bl	8014560 <ip_reass_chain_frag_into_datagram_and_validate>
 80149b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149be:	f000 8091 	beq.w	8014ae4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80149c2:	4b5f      	ldr	r3, [pc, #380]	; (8014b40 <ip4_reass+0x30c>)
 80149c4:	881a      	ldrh	r2, [r3, #0]
 80149c6:	8c3b      	ldrh	r3, [r7, #32]
 80149c8:	4413      	add	r3, r2
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	4b5c      	ldr	r3, [pc, #368]	; (8014b40 <ip4_reass+0x30c>)
 80149ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80149d0:	69fb      	ldr	r3, [r7, #28]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d00d      	beq.n	80149f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80149d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80149d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149da:	4413      	add	r3, r2
 80149dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80149de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e0:	8a7a      	ldrh	r2, [r7, #18]
 80149e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80149e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e6:	7f9b      	ldrb	r3, [r3, #30]
 80149e8:	f043 0301 	orr.w	r3, r3, #1
 80149ec:	b2da      	uxtb	r2, r3
 80149ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	2b01      	cmp	r3, #1
 80149f6:	d171      	bne.n	8014adc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80149f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fa:	8b9b      	ldrh	r3, [r3, #28]
 80149fc:	3314      	adds	r3, #20
 80149fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a02:	685b      	ldr	r3, [r3, #4]
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a14:	3308      	adds	r3, #8
 8014a16:	2214      	movs	r2, #20
 8014a18:	4619      	mov	r1, r3
 8014a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a1c:	f000 fdc3 	bl	80155a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014a20:	8a3b      	ldrh	r3, [r7, #16]
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7f5 fd14 	bl	800a450 <lwip_htons>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	461a      	mov	r2, r3
 8014a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a32:	2200      	movs	r2, #0
 8014a34:	719a      	strb	r2, [r3, #6]
 8014a36:	2200      	movs	r2, #0
 8014a38:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	729a      	strb	r2, [r3, #10]
 8014a40:	2200      	movs	r2, #0
 8014a42:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014a4a:	e00d      	b.n	8014a68 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014a52:	2114      	movs	r1, #20
 8014a54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014a56:	f7f7 f81d 	bl	800ba94 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014a5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f7f7 f96d 	bl	800bd3c <pbuf_cat>
      r = iprh->next_pbuf;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d1ee      	bne.n	8014a4c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014a6e:	4b35      	ldr	r3, [pc, #212]	; (8014b44 <ip4_reass+0x310>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d102      	bne.n	8014a7e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a7c:	e010      	b.n	8014aa0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014a7e:	4b31      	ldr	r3, [pc, #196]	; (8014b44 <ip4_reass+0x310>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a84:	e007      	b.n	8014a96 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d006      	beq.n	8014a9e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d1f4      	bne.n	8014a86 <ip4_reass+0x252>
 8014a9c:	e000      	b.n	8014aa0 <ip4_reass+0x26c>
          break;
 8014a9e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aa4:	f7ff fd2e 	bl	8014504 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f7f7 f907 	bl	800bcbc <pbuf_clen>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014ab2:	4b23      	ldr	r3, [pc, #140]	; (8014b40 <ip4_reass+0x30c>)
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	8c3a      	ldrh	r2, [r7, #32]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d906      	bls.n	8014aca <ip4_reass+0x296>
 8014abc:	4b22      	ldr	r3, [pc, #136]	; (8014b48 <ip4_reass+0x314>)
 8014abe:	f240 229b 	movw	r2, #667	; 0x29b
 8014ac2:	4922      	ldr	r1, [pc, #136]	; (8014b4c <ip4_reass+0x318>)
 8014ac4:	4822      	ldr	r0, [pc, #136]	; (8014b50 <ip4_reass+0x31c>)
 8014ac6:	f000 fddb 	bl	8015680 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014aca:	4b1d      	ldr	r3, [pc, #116]	; (8014b40 <ip4_reass+0x30c>)
 8014acc:	881a      	ldrh	r2, [r3, #0]
 8014ace:	8c3b      	ldrh	r3, [r7, #32]
 8014ad0:	1ad3      	subs	r3, r2, r3
 8014ad2:	b29a      	uxth	r2, r3
 8014ad4:	4b1a      	ldr	r3, [pc, #104]	; (8014b40 <ip4_reass+0x30c>)
 8014ad6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	e02c      	b.n	8014b36 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014adc:	2300      	movs	r3, #0
 8014ade:	e02a      	b.n	8014b36 <ip4_reass+0x302>

nullreturn_ipr:
 8014ae0:	bf00      	nop
 8014ae2:	e000      	b.n	8014ae6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014ae4:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d106      	bne.n	8014afa <ip4_reass+0x2c6>
 8014aec:	4b16      	ldr	r3, [pc, #88]	; (8014b48 <ip4_reass+0x314>)
 8014aee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014af2:	4918      	ldr	r1, [pc, #96]	; (8014b54 <ip4_reass+0x320>)
 8014af4:	4816      	ldr	r0, [pc, #88]	; (8014b50 <ip4_reass+0x31c>)
 8014af6:	f000 fdc3 	bl	8015680 <iprintf>
  if (ipr->p == NULL) {
 8014afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d114      	bne.n	8014b2c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014b02:	4b10      	ldr	r3, [pc, #64]	; (8014b44 <ip4_reass+0x310>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d006      	beq.n	8014b1a <ip4_reass+0x2e6>
 8014b0c:	4b0e      	ldr	r3, [pc, #56]	; (8014b48 <ip4_reass+0x314>)
 8014b0e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014b12:	4911      	ldr	r1, [pc, #68]	; (8014b58 <ip4_reass+0x324>)
 8014b14:	480e      	ldr	r0, [pc, #56]	; (8014b50 <ip4_reass+0x31c>)
 8014b16:	f000 fdb3 	bl	8015680 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b1e:	f7ff fcf1 	bl	8014504 <ip_reass_dequeue_datagram>
 8014b22:	e004      	b.n	8014b2e <ip4_reass+0x2fa>
    goto nullreturn;
 8014b24:	bf00      	nop
 8014b26:	e002      	b.n	8014b2e <ip4_reass+0x2fa>
    goto nullreturn;
 8014b28:	bf00      	nop
 8014b2a:	e000      	b.n	8014b2e <ip4_reass+0x2fa>
  }

nullreturn:
 8014b2c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f7f7 f836 	bl	800bba0 <pbuf_free>
  return NULL;
 8014b34:	2300      	movs	r3, #0
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3738      	adds	r7, #56	; 0x38
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	20004c1c 	.word	0x20004c1c
 8014b44:	20004c18 	.word	0x20004c18
 8014b48:	08019658 	.word	0x08019658
 8014b4c:	080197c8 	.word	0x080197c8
 8014b50:	080196a0 	.word	0x080196a0
 8014b54:	080197e4 	.word	0x080197e4
 8014b58:	080197f0 	.word	0x080197f0

08014b5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014b60:	2005      	movs	r0, #5
 8014b62:	f7f6 f92b 	bl	800adbc <memp_malloc>
 8014b66:	4603      	mov	r3, r0
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	bd80      	pop	{r7, pc}

08014b6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d106      	bne.n	8014b88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014b7a:	4b07      	ldr	r3, [pc, #28]	; (8014b98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014b7c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014b80:	4906      	ldr	r1, [pc, #24]	; (8014b9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014b82:	4807      	ldr	r0, [pc, #28]	; (8014ba0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014b84:	f000 fd7c 	bl	8015680 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014b88:	6879      	ldr	r1, [r7, #4]
 8014b8a:	2005      	movs	r0, #5
 8014b8c:	f7f6 f968 	bl	800ae60 <memp_free>
}
 8014b90:	bf00      	nop
 8014b92:	3708      	adds	r7, #8
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	08019658 	.word	0x08019658
 8014b9c:	08019810 	.word	0x08019810
 8014ba0:	080196a0 	.word	0x080196a0

08014ba4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d106      	bne.n	8014bc4 <ipfrag_free_pbuf_custom+0x20>
 8014bb6:	4b11      	ldr	r3, [pc, #68]	; (8014bfc <ipfrag_free_pbuf_custom+0x58>)
 8014bb8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014bbc:	4910      	ldr	r1, [pc, #64]	; (8014c00 <ipfrag_free_pbuf_custom+0x5c>)
 8014bbe:	4811      	ldr	r0, [pc, #68]	; (8014c04 <ipfrag_free_pbuf_custom+0x60>)
 8014bc0:	f000 fd5e 	bl	8015680 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014bc4:	68fa      	ldr	r2, [r7, #12]
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d006      	beq.n	8014bda <ipfrag_free_pbuf_custom+0x36>
 8014bcc:	4b0b      	ldr	r3, [pc, #44]	; (8014bfc <ipfrag_free_pbuf_custom+0x58>)
 8014bce:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014bd2:	490d      	ldr	r1, [pc, #52]	; (8014c08 <ipfrag_free_pbuf_custom+0x64>)
 8014bd4:	480b      	ldr	r0, [pc, #44]	; (8014c04 <ipfrag_free_pbuf_custom+0x60>)
 8014bd6:	f000 fd53 	bl	8015680 <iprintf>
  if (pcr->original != NULL) {
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	695b      	ldr	r3, [r3, #20]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d004      	beq.n	8014bec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	695b      	ldr	r3, [r3, #20]
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7f6 ffda 	bl	800bba0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f7ff ffbd 	bl	8014b6c <ip_frag_free_pbuf_custom_ref>
}
 8014bf2:	bf00      	nop
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	08019658 	.word	0x08019658
 8014c00:	0801981c 	.word	0x0801981c
 8014c04:	080196a0 	.word	0x080196a0
 8014c08:	08019828 	.word	0x08019828

08014c0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b094      	sub	sp, #80	; 0x50
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c22:	3b14      	subs	r3, #20
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	da00      	bge.n	8014c2a <ip4_frag+0x1e>
 8014c28:	3307      	adds	r3, #7
 8014c2a:	10db      	asrs	r3, r3, #3
 8014c2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014c2e:	2314      	movs	r3, #20
 8014c30:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	f003 030f 	and.w	r3, r3, #15
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	009b      	lsls	r3, r3, #2
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	2b14      	cmp	r3, #20
 8014c4c:	d002      	beq.n	8014c54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014c4e:	f06f 0305 	mvn.w	r3, #5
 8014c52:	e10f      	b.n	8014e74 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	895b      	ldrh	r3, [r3, #10]
 8014c58:	2b13      	cmp	r3, #19
 8014c5a:	d809      	bhi.n	8014c70 <ip4_frag+0x64>
 8014c5c:	4b87      	ldr	r3, [pc, #540]	; (8014e7c <ip4_frag+0x270>)
 8014c5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014c62:	4987      	ldr	r1, [pc, #540]	; (8014e80 <ip4_frag+0x274>)
 8014c64:	4887      	ldr	r0, [pc, #540]	; (8014e84 <ip4_frag+0x278>)
 8014c66:	f000 fd0b 	bl	8015680 <iprintf>
 8014c6a:	f06f 0305 	mvn.w	r3, #5
 8014c6e:	e101      	b.n	8014e74 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c72:	88db      	ldrh	r3, [r3, #6]
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7f5 fbea 	bl	800a450 <lwip_htons>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014c80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014c82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014c86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014c8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014c90:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	891b      	ldrh	r3, [r3, #8]
 8014c96:	3b14      	subs	r3, #20
 8014c98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014c9c:	e0e0      	b.n	8014e60 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014c9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ca0:	00db      	lsls	r3, r3, #3
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ca8:	4293      	cmp	r3, r2
 8014caa:	bf28      	it	cs
 8014cac:	4613      	movcs	r3, r2
 8014cae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014cb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cb4:	2114      	movs	r1, #20
 8014cb6:	200e      	movs	r0, #14
 8014cb8:	f7f6 fc92 	bl	800b5e0 <pbuf_alloc>
 8014cbc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f000 80d4 	beq.w	8014e6e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc8:	895b      	ldrh	r3, [r3, #10]
 8014cca:	2b13      	cmp	r3, #19
 8014ccc:	d806      	bhi.n	8014cdc <ip4_frag+0xd0>
 8014cce:	4b6b      	ldr	r3, [pc, #428]	; (8014e7c <ip4_frag+0x270>)
 8014cd0:	f240 3225 	movw	r2, #805	; 0x325
 8014cd4:	496c      	ldr	r1, [pc, #432]	; (8014e88 <ip4_frag+0x27c>)
 8014cd6:	486b      	ldr	r0, [pc, #428]	; (8014e84 <ip4_frag+0x278>)
 8014cd8:	f000 fcd2 	bl	8015680 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	2214      	movs	r2, #20
 8014ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f000 fc5e 	bl	80155a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014cf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014cf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014cf6:	e064      	b.n	8014dc2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	895a      	ldrh	r2, [r3, #10]
 8014cfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	895b      	ldrh	r3, [r3, #10]
 8014d06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d906      	bls.n	8014d1a <ip4_frag+0x10e>
 8014d0c:	4b5b      	ldr	r3, [pc, #364]	; (8014e7c <ip4_frag+0x270>)
 8014d0e:	f240 322d 	movw	r2, #813	; 0x32d
 8014d12:	495e      	ldr	r1, [pc, #376]	; (8014e8c <ip4_frag+0x280>)
 8014d14:	485b      	ldr	r0, [pc, #364]	; (8014e84 <ip4_frag+0x278>)
 8014d16:	f000 fcb3 	bl	8015680 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014d1a:	8bfa      	ldrh	r2, [r7, #30]
 8014d1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014d20:	4293      	cmp	r3, r2
 8014d22:	bf28      	it	cs
 8014d24:	4613      	movcs	r3, r2
 8014d26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014d2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d105      	bne.n	8014d3e <ip4_frag+0x132>
        poff = 0;
 8014d32:	2300      	movs	r3, #0
 8014d34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	60fb      	str	r3, [r7, #12]
        continue;
 8014d3c:	e041      	b.n	8014dc2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014d3e:	f7ff ff0d 	bl	8014b5c <ip_frag_alloc_pbuf_custom_ref>
 8014d42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d103      	bne.n	8014d52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d4c:	f7f6 ff28 	bl	800bba0 <pbuf_free>
        goto memerr;
 8014d50:	e08e      	b.n	8014e70 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014d52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014d58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014d60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014d64:	9201      	str	r2, [sp, #4]
 8014d66:	9300      	str	r3, [sp, #0]
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2241      	movs	r2, #65	; 0x41
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	f7f6 fd5d 	bl	800b82c <pbuf_alloced_custom>
 8014d72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d106      	bne.n	8014d88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014d7a:	69b8      	ldr	r0, [r7, #24]
 8014d7c:	f7ff fef6 	bl	8014b6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d82:	f7f6 ff0d 	bl	800bba0 <pbuf_free>
        goto memerr;
 8014d86:	e073      	b.n	8014e70 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8014d88:	68f8      	ldr	r0, [r7, #12]
 8014d8a:	f7f6 ffaf 	bl	800bcec <pbuf_ref>
      pcr->original = p;
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014d94:	69bb      	ldr	r3, [r7, #24]
 8014d96:	4a3e      	ldr	r2, [pc, #248]	; (8014e90 <ip4_frag+0x284>)
 8014d98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014d9a:	6979      	ldr	r1, [r7, #20]
 8014d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d9e:	f7f6 ffcd 	bl	800bd3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014da2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014daa:	1ad3      	subs	r3, r2, r3
 8014dac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014db0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d004      	beq.n	8014dc2 <ip4_frag+0x1b6>
        poff = 0;
 8014db8:	2300      	movs	r3, #0
 8014dba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014dc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d196      	bne.n	8014cf8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014dca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014dcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014dd0:	4413      	add	r3, r2
 8014dd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014dd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014ddc:	3b14      	subs	r3, #20
 8014dde:	429a      	cmp	r2, r3
 8014de0:	bfd4      	ite	le
 8014de2:	2301      	movle	r3, #1
 8014de4:	2300      	movgt	r3, #0
 8014de6:	b2db      	uxtb	r3, r3
 8014de8:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014dea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014dee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014df2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d002      	beq.n	8014e00 <ip4_frag+0x1f4>
 8014dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d003      	beq.n	8014e08 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014e00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014e02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014e06:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014e08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7f5 fb20 	bl	800a450 <lwip_htons>
 8014e10:	4603      	mov	r3, r0
 8014e12:	461a      	mov	r2, r3
 8014e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e16:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e1a:	3314      	adds	r3, #20
 8014e1c:	b29b      	uxth	r3, r3
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7f5 fb16 	bl	800a450 <lwip_htons>
 8014e24:	4603      	mov	r3, r0
 8014e26:	461a      	mov	r2, r3
 8014e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2e:	2200      	movs	r2, #0
 8014e30:	729a      	strb	r2, [r3, #10]
 8014e32:	2200      	movs	r2, #0
 8014e34:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	695b      	ldr	r3, [r3, #20]
 8014e3a:	687a      	ldr	r2, [r7, #4]
 8014e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e3e:	68b8      	ldr	r0, [r7, #8]
 8014e40:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e44:	f7f6 feac 	bl	800bba0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014e48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014e54:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014e58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e5a:	4413      	add	r3, r2
 8014e5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014e60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	f47f af1a 	bne.w	8014c9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	e002      	b.n	8014e74 <ip4_frag+0x268>
      goto memerr;
 8014e6e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3748      	adds	r7, #72	; 0x48
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}
 8014e7c:	08019658 	.word	0x08019658
 8014e80:	08019834 	.word	0x08019834
 8014e84:	080196a0 	.word	0x080196a0
 8014e88:	08019850 	.word	0x08019850
 8014e8c:	08019870 	.word	0x08019870
 8014e90:	08014ba5 	.word	0x08014ba5

08014e94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b086      	sub	sp, #24
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014e9e:	230e      	movs	r3, #14
 8014ea0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	895b      	ldrh	r3, [r3, #10]
 8014ea6:	2b0e      	cmp	r3, #14
 8014ea8:	d96e      	bls.n	8014f88 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	7bdb      	ldrb	r3, [r3, #15]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d106      	bne.n	8014ec0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014eb8:	3301      	adds	r3, #1
 8014eba:	b2da      	uxtb	r2, r3
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	7b1a      	ldrb	r2, [r3, #12]
 8014eca:	7b5b      	ldrb	r3, [r3, #13]
 8014ecc:	021b      	lsls	r3, r3, #8
 8014ece:	4313      	orrs	r3, r2
 8014ed0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	f003 0301 	and.w	r3, r3, #1
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d023      	beq.n	8014f26 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	2b01      	cmp	r3, #1
 8014ee4:	d10f      	bne.n	8014f06 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	785b      	ldrb	r3, [r3, #1]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d11b      	bne.n	8014f26 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014ef2:	2b5e      	cmp	r3, #94	; 0x5e
 8014ef4:	d117      	bne.n	8014f26 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	7b5b      	ldrb	r3, [r3, #13]
 8014efa:	f043 0310 	orr.w	r3, r3, #16
 8014efe:	b2da      	uxtb	r2, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	735a      	strb	r2, [r3, #13]
 8014f04:	e00f      	b.n	8014f26 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	2206      	movs	r2, #6
 8014f0a:	4928      	ldr	r1, [pc, #160]	; (8014fac <ethernet_input+0x118>)
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f000 fb3b 	bl	8015588 <memcmp>
 8014f12:	4603      	mov	r3, r0
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d106      	bne.n	8014f26 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	7b5b      	ldrb	r3, [r3, #13]
 8014f1c:	f043 0308 	orr.w	r3, r3, #8
 8014f20:	b2da      	uxtb	r2, r3
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014f26:	89fb      	ldrh	r3, [r7, #14]
 8014f28:	2b08      	cmp	r3, #8
 8014f2a:	d003      	beq.n	8014f34 <ethernet_input+0xa0>
 8014f2c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014f30:	d014      	beq.n	8014f5c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014f32:	e032      	b.n	8014f9a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f3a:	f003 0308 	and.w	r3, r3, #8
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d024      	beq.n	8014f8c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014f42:	8afb      	ldrh	r3, [r7, #22]
 8014f44:	4619      	mov	r1, r3
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f7f6 fda4 	bl	800ba94 <pbuf_remove_header>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d11e      	bne.n	8014f90 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014f52:	6839      	ldr	r1, [r7, #0]
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f7fe ff2d 	bl	8013db4 <ip4_input>
      break;
 8014f5a:	e013      	b.n	8014f84 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f62:	f003 0308 	and.w	r3, r3, #8
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d014      	beq.n	8014f94 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014f6a:	8afb      	ldrh	r3, [r7, #22]
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f7f6 fd90 	bl	800ba94 <pbuf_remove_header>
 8014f74:	4603      	mov	r3, r0
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d10e      	bne.n	8014f98 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014f7a:	6839      	ldr	r1, [r7, #0]
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f7fe f8cd 	bl	801311c <etharp_input>
      break;
 8014f82:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014f84:	2300      	movs	r3, #0
 8014f86:	e00c      	b.n	8014fa2 <ethernet_input+0x10e>
    goto free_and_return;
 8014f88:	bf00      	nop
 8014f8a:	e006      	b.n	8014f9a <ethernet_input+0x106>
        goto free_and_return;
 8014f8c:	bf00      	nop
 8014f8e:	e004      	b.n	8014f9a <ethernet_input+0x106>
        goto free_and_return;
 8014f90:	bf00      	nop
 8014f92:	e002      	b.n	8014f9a <ethernet_input+0x106>
        goto free_and_return;
 8014f94:	bf00      	nop
 8014f96:	e000      	b.n	8014f9a <ethernet_input+0x106>
        goto free_and_return;
 8014f98:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f7f6 fe00 	bl	800bba0 <pbuf_free>
  return ERR_OK;
 8014fa0:	2300      	movs	r3, #0
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3718      	adds	r7, #24
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	08019a68 	.word	0x08019a68

08014fb0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b086      	sub	sp, #24
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	60f8      	str	r0, [r7, #12]
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	607a      	str	r2, [r7, #4]
 8014fbc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014fbe:	8c3b      	ldrh	r3, [r7, #32]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7f5 fa45 	bl	800a450 <lwip_htons>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014fca:	210e      	movs	r1, #14
 8014fcc:	68b8      	ldr	r0, [r7, #8]
 8014fce:	f7f6 fd51 	bl	800ba74 <pbuf_add_header>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d125      	bne.n	8015024 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	685b      	ldr	r3, [r3, #4]
 8014fdc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	8afa      	ldrh	r2, [r7, #22]
 8014fe2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	2206      	movs	r2, #6
 8014fe8:	6839      	ldr	r1, [r7, #0]
 8014fea:	4618      	mov	r0, r3
 8014fec:	f000 fadb 	bl	80155a6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	3306      	adds	r3, #6
 8014ff4:	2206      	movs	r2, #6
 8014ff6:	6879      	ldr	r1, [r7, #4]
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f000 fad4 	bl	80155a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015004:	2b06      	cmp	r3, #6
 8015006:	d006      	beq.n	8015016 <ethernet_output+0x66>
 8015008:	4b0a      	ldr	r3, [pc, #40]	; (8015034 <ethernet_output+0x84>)
 801500a:	f240 1233 	movw	r2, #307	; 0x133
 801500e:	490a      	ldr	r1, [pc, #40]	; (8015038 <ethernet_output+0x88>)
 8015010:	480a      	ldr	r0, [pc, #40]	; (801503c <ethernet_output+0x8c>)
 8015012:	f000 fb35 	bl	8015680 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	699b      	ldr	r3, [r3, #24]
 801501a:	68b9      	ldr	r1, [r7, #8]
 801501c:	68f8      	ldr	r0, [r7, #12]
 801501e:	4798      	blx	r3
 8015020:	4603      	mov	r3, r0
 8015022:	e002      	b.n	801502a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015024:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015026:	f06f 0301 	mvn.w	r3, #1
}
 801502a:	4618      	mov	r0, r3
 801502c:	3718      	adds	r7, #24
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	08019880 	.word	0x08019880
 8015038:	080198b8 	.word	0x080198b8
 801503c:	080198ec 	.word	0x080198ec

08015040 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	2200      	movs	r2, #0
 801504e:	2104      	movs	r1, #4
 8015050:	4618      	mov	r0, r3
 8015052:	f7ef fc2b 	bl	80048ac <osMessageQueueNew>
 8015056:	4602      	mov	r2, r0
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d102      	bne.n	801506a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8015064:	f04f 33ff 	mov.w	r3, #4294967295
 8015068:	e000      	b.n	801506c <sys_mbox_new+0x2c>

  return ERR_OK;
 801506a:	2300      	movs	r3, #0
}
 801506c:	4618      	mov	r0, r3
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4618      	mov	r0, r3
 8015082:	f7ef fd7f 	bl	8004b84 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4618      	mov	r0, r3
 801508c:	f7ef fdac 	bl	8004be8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015090:	bf00      	nop
 8015092:	3708      	adds	r7, #8
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}

08015098 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6818      	ldr	r0, [r3, #0]
 80150a6:	4639      	mov	r1, r7
 80150a8:	2300      	movs	r3, #0
 80150aa:	2200      	movs	r2, #0
 80150ac:	f7ef fc84 	bl	80049b8 <osMessageQueuePut>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d102      	bne.n	80150bc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80150b6:	2300      	movs	r3, #0
 80150b8:	73fb      	strb	r3, [r7, #15]
 80150ba:	e001      	b.n	80150c0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80150bc:	23ff      	movs	r3, #255	; 0xff
 80150be:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80150c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3710      	adds	r7, #16
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b086      	sub	sp, #24
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80150d8:	f7ef f812 	bl	8004100 <osKernelGetTickCount>
 80150dc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d013      	beq.n	801510c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	6818      	ldr	r0, [r3, #0]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	68b9      	ldr	r1, [r7, #8]
 80150ee:	f7ef fcd7 	bl	8004aa0 <osMessageQueueGet>
 80150f2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d105      	bne.n	8015106 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80150fa:	f7ef f801 	bl	8004100 <osKernelGetTickCount>
 80150fe:	4602      	mov	r2, r0
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	1ad3      	subs	r3, r2, r3
 8015104:	e00f      	b.n	8015126 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015106:	f04f 33ff 	mov.w	r3, #4294967295
 801510a:	e00c      	b.n	8015126 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	6818      	ldr	r0, [r3, #0]
 8015110:	f04f 33ff 	mov.w	r3, #4294967295
 8015114:	2200      	movs	r2, #0
 8015116:	68b9      	ldr	r1, [r7, #8]
 8015118:	f7ef fcc2 	bl	8004aa0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801511c:	f7ee fff0 	bl	8004100 <osKernelGetTickCount>
 8015120:	4602      	mov	r2, r0
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015126:	4618      	mov	r0, r3
 8015128:	3718      	adds	r7, #24
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}

0801512e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801512e:	b580      	push	{r7, lr}
 8015130:	b082      	sub	sp, #8
 8015132:	af00      	add	r7, sp, #0
 8015134:	6078      	str	r0, [r7, #4]
 8015136:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6818      	ldr	r0, [r3, #0]
 801513c:	2300      	movs	r3, #0
 801513e:	2200      	movs	r2, #0
 8015140:	6839      	ldr	r1, [r7, #0]
 8015142:	f7ef fcad 	bl	8004aa0 <osMessageQueueGet>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d101      	bne.n	8015150 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	e001      	b.n	8015154 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015150:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015154:	4618      	mov	r0, r3
 8015156:	3708      	adds	r7, #8
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}

0801515c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801515c:	b480      	push	{r7}
 801515e:	b083      	sub	sp, #12
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d101      	bne.n	8015170 <sys_mbox_valid+0x14>
    return 0;
 801516c:	2300      	movs	r3, #0
 801516e:	e000      	b.n	8015172 <sys_mbox_valid+0x16>
  else
    return 1;
 8015170:	2301      	movs	r3, #1
}
 8015172:	4618      	mov	r0, r3
 8015174:	370c      	adds	r7, #12
 8015176:	46bd      	mov	sp, r7
 8015178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517c:	4770      	bx	lr

0801517e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801517e:	b480      	push	{r7}
 8015180:	b083      	sub	sp, #12
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2200      	movs	r2, #0
 801518a:	601a      	str	r2, [r3, #0]
}
 801518c:	bf00      	nop
 801518e:	370c      	adds	r7, #12
 8015190:	46bd      	mov	sp, r7
 8015192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015196:	4770      	bx	lr

08015198 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	460b      	mov	r3, r1
 80151a2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80151a4:	78fb      	ldrb	r3, [r7, #3]
 80151a6:	2200      	movs	r2, #0
 80151a8:	4619      	mov	r1, r3
 80151aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80151ae:	f7ef f9eb 	bl	8004588 <osSemaphoreNew>
 80151b2:	4602      	mov	r2, r0
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d102      	bne.n	80151c6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80151c0:	f04f 33ff 	mov.w	r3, #4294967295
 80151c4:	e009      	b.n	80151da <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80151c6:	78fb      	ldrb	r3, [r7, #3]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d105      	bne.n	80151d8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2100      	movs	r1, #0
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7ef fa76 	bl	80046c4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80151d8:	2300      	movs	r3, #0
}
 80151da:	4618      	mov	r0, r3
 80151dc:	3708      	adds	r7, #8
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}

080151e2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b084      	sub	sp, #16
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
 80151ea:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80151ec:	f7ee ff88 	bl	8004100 <osKernelGetTickCount>
 80151f0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d011      	beq.n	801521c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	6839      	ldr	r1, [r7, #0]
 80151fe:	4618      	mov	r0, r3
 8015200:	f7ef fa60 	bl	80046c4 <osSemaphoreAcquire>
 8015204:	4603      	mov	r3, r0
 8015206:	2b00      	cmp	r3, #0
 8015208:	d105      	bne.n	8015216 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801520a:	f7ee ff79 	bl	8004100 <osKernelGetTickCount>
 801520e:	4602      	mov	r2, r0
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	1ad3      	subs	r3, r2, r3
 8015214:	e012      	b.n	801523c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015216:	f04f 33ff 	mov.w	r3, #4294967295
 801521a:	e00f      	b.n	801523c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801521c:	bf00      	nop
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	f04f 31ff 	mov.w	r1, #4294967295
 8015226:	4618      	mov	r0, r3
 8015228:	f7ef fa4c 	bl	80046c4 <osSemaphoreAcquire>
 801522c:	4603      	mov	r3, r0
 801522e:	2b00      	cmp	r3, #0
 8015230:	d1f5      	bne.n	801521e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8015232:	f7ee ff65 	bl	8004100 <osKernelGetTickCount>
 8015236:	4602      	mov	r2, r0
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801523c:	4618      	mov	r0, r3
 801523e:	3710      	adds	r7, #16
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4618      	mov	r0, r3
 8015252:	f7ef fa9d 	bl	8004790 <osSemaphoreRelease>
}
 8015256:	bf00      	nop
 8015258:	3708      	adds	r7, #8
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}

0801525e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801525e:	b580      	push	{r7, lr}
 8015260:	b082      	sub	sp, #8
 8015262:	af00      	add	r7, sp, #0
 8015264:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	4618      	mov	r0, r3
 801526c:	f7ef fae8 	bl	8004840 <osSemaphoreDelete>
}
 8015270:	bf00      	nop
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}

08015278 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015278:	b480      	push	{r7}
 801527a:	b083      	sub	sp, #12
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d101      	bne.n	801528c <sys_sem_valid+0x14>
    return 0;
 8015288:	2300      	movs	r3, #0
 801528a:	e000      	b.n	801528e <sys_sem_valid+0x16>
  else
    return 1;
 801528c:	2301      	movs	r3, #1
}
 801528e:	4618      	mov	r0, r3
 8015290:	370c      	adds	r7, #12
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801529a:	b480      	push	{r7}
 801529c:	b083      	sub	sp, #12
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2200      	movs	r2, #0
 80152a6:	601a      	str	r2, [r3, #0]
}
 80152a8:	bf00      	nop
 80152aa:	370c      	adds	r7, #12
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr

080152b4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80152b8:	2000      	movs	r0, #0
 80152ba:	f7ef f81d 	bl	80042f8 <osMutexNew>
 80152be:	4602      	mov	r2, r0
 80152c0:	4b01      	ldr	r3, [pc, #4]	; (80152c8 <sys_init+0x14>)
 80152c2:	601a      	str	r2, [r3, #0]
#endif
}
 80152c4:	bf00      	nop
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	2000b674 	.word	0x2000b674

080152cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80152d4:	2000      	movs	r0, #0
 80152d6:	f7ef f80f 	bl	80042f8 <osMutexNew>
 80152da:	4602      	mov	r2, r0
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d102      	bne.n	80152ee <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80152e8:	f04f 33ff 	mov.w	r3, #4294967295
 80152ec:	e000      	b.n	80152f0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80152ee:	2300      	movs	r3, #0
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	f04f 31ff 	mov.w	r1, #4294967295
 8015308:	4618      	mov	r0, r3
 801530a:	f7ef f88f 	bl	800442c <osMutexAcquire>
#endif
}
 801530e:	bf00      	nop
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b082      	sub	sp, #8
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	4618      	mov	r0, r3
 8015324:	f7ef f8e0 	bl	80044e8 <osMutexRelease>
}
 8015328:	bf00      	nop
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b08e      	sub	sp, #56	; 0x38
 8015334:	af00      	add	r7, sp, #0
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
 801533c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801533e:	f107 0314 	add.w	r3, r7, #20
 8015342:	2224      	movs	r2, #36	; 0x24
 8015344:	2100      	movs	r1, #0
 8015346:	4618      	mov	r0, r3
 8015348:	f000 f938 	bl	80155bc <memset>
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	617b      	str	r3, [r7, #20]
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	62bb      	str	r3, [r7, #40]	; 0x28
 8015354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015356:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015358:	f107 0314 	add.w	r3, r7, #20
 801535c:	461a      	mov	r2, r3
 801535e:	6879      	ldr	r1, [r7, #4]
 8015360:	68b8      	ldr	r0, [r7, #8]
 8015362:	f7ee fef5 	bl	8004150 <osThreadNew>
 8015366:	4603      	mov	r3, r0
#endif
}
 8015368:	4618      	mov	r0, r3
 801536a:	3738      	adds	r7, #56	; 0x38
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8015374:	4b04      	ldr	r3, [pc, #16]	; (8015388 <sys_arch_protect+0x18>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f04f 31ff 	mov.w	r1, #4294967295
 801537c:	4618      	mov	r0, r3
 801537e:	f7ef f855 	bl	800442c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8015382:	2301      	movs	r3, #1
}
 8015384:	4618      	mov	r0, r3
 8015386:	bd80      	pop	{r7, pc}
 8015388:	2000b674 	.word	0x2000b674

0801538c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015394:	4b04      	ldr	r3, [pc, #16]	; (80153a8 <sys_arch_unprotect+0x1c>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	4618      	mov	r0, r3
 801539a:	f7ef f8a5 	bl	80044e8 <osMutexRelease>
}
 801539e:	bf00      	nop
 80153a0:	3708      	adds	r7, #8
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	2000b674 	.word	0x2000b674

080153ac <std>:
 80153ac:	2300      	movs	r3, #0
 80153ae:	b510      	push	{r4, lr}
 80153b0:	4604      	mov	r4, r0
 80153b2:	e9c0 3300 	strd	r3, r3, [r0]
 80153b6:	6083      	str	r3, [r0, #8]
 80153b8:	8181      	strh	r1, [r0, #12]
 80153ba:	6643      	str	r3, [r0, #100]	; 0x64
 80153bc:	81c2      	strh	r2, [r0, #14]
 80153be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80153c2:	6183      	str	r3, [r0, #24]
 80153c4:	4619      	mov	r1, r3
 80153c6:	2208      	movs	r2, #8
 80153c8:	305c      	adds	r0, #92	; 0x5c
 80153ca:	f000 f8f7 	bl	80155bc <memset>
 80153ce:	4b05      	ldr	r3, [pc, #20]	; (80153e4 <std+0x38>)
 80153d0:	6263      	str	r3, [r4, #36]	; 0x24
 80153d2:	4b05      	ldr	r3, [pc, #20]	; (80153e8 <std+0x3c>)
 80153d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80153d6:	4b05      	ldr	r3, [pc, #20]	; (80153ec <std+0x40>)
 80153d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80153da:	4b05      	ldr	r3, [pc, #20]	; (80153f0 <std+0x44>)
 80153dc:	6224      	str	r4, [r4, #32]
 80153de:	6323      	str	r3, [r4, #48]	; 0x30
 80153e0:	bd10      	pop	{r4, pc}
 80153e2:	bf00      	nop
 80153e4:	0801580d 	.word	0x0801580d
 80153e8:	0801582f 	.word	0x0801582f
 80153ec:	08015867 	.word	0x08015867
 80153f0:	0801588b 	.word	0x0801588b

080153f4 <_cleanup_r>:
 80153f4:	4901      	ldr	r1, [pc, #4]	; (80153fc <_cleanup_r+0x8>)
 80153f6:	f000 b885 	b.w	8015504 <_fwalk_reent>
 80153fa:	bf00      	nop
 80153fc:	08015a0d 	.word	0x08015a0d

08015400 <__sfmoreglue>:
 8015400:	b570      	push	{r4, r5, r6, lr}
 8015402:	1e4a      	subs	r2, r1, #1
 8015404:	2568      	movs	r5, #104	; 0x68
 8015406:	4355      	muls	r5, r2
 8015408:	460e      	mov	r6, r1
 801540a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801540e:	f000 f8dd 	bl	80155cc <_malloc_r>
 8015412:	4604      	mov	r4, r0
 8015414:	b140      	cbz	r0, 8015428 <__sfmoreglue+0x28>
 8015416:	2100      	movs	r1, #0
 8015418:	e9c0 1600 	strd	r1, r6, [r0]
 801541c:	300c      	adds	r0, #12
 801541e:	60a0      	str	r0, [r4, #8]
 8015420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015424:	f000 f8ca 	bl	80155bc <memset>
 8015428:	4620      	mov	r0, r4
 801542a:	bd70      	pop	{r4, r5, r6, pc}

0801542c <__sinit>:
 801542c:	6983      	ldr	r3, [r0, #24]
 801542e:	b510      	push	{r4, lr}
 8015430:	4604      	mov	r4, r0
 8015432:	bb33      	cbnz	r3, 8015482 <__sinit+0x56>
 8015434:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015438:	6503      	str	r3, [r0, #80]	; 0x50
 801543a:	4b12      	ldr	r3, [pc, #72]	; (8015484 <__sinit+0x58>)
 801543c:	4a12      	ldr	r2, [pc, #72]	; (8015488 <__sinit+0x5c>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	6282      	str	r2, [r0, #40]	; 0x28
 8015442:	4298      	cmp	r0, r3
 8015444:	bf04      	itt	eq
 8015446:	2301      	moveq	r3, #1
 8015448:	6183      	streq	r3, [r0, #24]
 801544a:	f000 f81f 	bl	801548c <__sfp>
 801544e:	6060      	str	r0, [r4, #4]
 8015450:	4620      	mov	r0, r4
 8015452:	f000 f81b 	bl	801548c <__sfp>
 8015456:	60a0      	str	r0, [r4, #8]
 8015458:	4620      	mov	r0, r4
 801545a:	f000 f817 	bl	801548c <__sfp>
 801545e:	2200      	movs	r2, #0
 8015460:	60e0      	str	r0, [r4, #12]
 8015462:	2104      	movs	r1, #4
 8015464:	6860      	ldr	r0, [r4, #4]
 8015466:	f7ff ffa1 	bl	80153ac <std>
 801546a:	2201      	movs	r2, #1
 801546c:	2109      	movs	r1, #9
 801546e:	68a0      	ldr	r0, [r4, #8]
 8015470:	f7ff ff9c 	bl	80153ac <std>
 8015474:	2202      	movs	r2, #2
 8015476:	2112      	movs	r1, #18
 8015478:	68e0      	ldr	r0, [r4, #12]
 801547a:	f7ff ff97 	bl	80153ac <std>
 801547e:	2301      	movs	r3, #1
 8015480:	61a3      	str	r3, [r4, #24]
 8015482:	bd10      	pop	{r4, pc}
 8015484:	08019ad8 	.word	0x08019ad8
 8015488:	080153f5 	.word	0x080153f5

0801548c <__sfp>:
 801548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801548e:	4b1b      	ldr	r3, [pc, #108]	; (80154fc <__sfp+0x70>)
 8015490:	681e      	ldr	r6, [r3, #0]
 8015492:	69b3      	ldr	r3, [r6, #24]
 8015494:	4607      	mov	r7, r0
 8015496:	b913      	cbnz	r3, 801549e <__sfp+0x12>
 8015498:	4630      	mov	r0, r6
 801549a:	f7ff ffc7 	bl	801542c <__sinit>
 801549e:	3648      	adds	r6, #72	; 0x48
 80154a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80154a4:	3b01      	subs	r3, #1
 80154a6:	d503      	bpl.n	80154b0 <__sfp+0x24>
 80154a8:	6833      	ldr	r3, [r6, #0]
 80154aa:	b133      	cbz	r3, 80154ba <__sfp+0x2e>
 80154ac:	6836      	ldr	r6, [r6, #0]
 80154ae:	e7f7      	b.n	80154a0 <__sfp+0x14>
 80154b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80154b4:	b16d      	cbz	r5, 80154d2 <__sfp+0x46>
 80154b6:	3468      	adds	r4, #104	; 0x68
 80154b8:	e7f4      	b.n	80154a4 <__sfp+0x18>
 80154ba:	2104      	movs	r1, #4
 80154bc:	4638      	mov	r0, r7
 80154be:	f7ff ff9f 	bl	8015400 <__sfmoreglue>
 80154c2:	6030      	str	r0, [r6, #0]
 80154c4:	2800      	cmp	r0, #0
 80154c6:	d1f1      	bne.n	80154ac <__sfp+0x20>
 80154c8:	230c      	movs	r3, #12
 80154ca:	603b      	str	r3, [r7, #0]
 80154cc:	4604      	mov	r4, r0
 80154ce:	4620      	mov	r0, r4
 80154d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154d2:	4b0b      	ldr	r3, [pc, #44]	; (8015500 <__sfp+0x74>)
 80154d4:	6665      	str	r5, [r4, #100]	; 0x64
 80154d6:	e9c4 5500 	strd	r5, r5, [r4]
 80154da:	60a5      	str	r5, [r4, #8]
 80154dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80154e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80154e4:	2208      	movs	r2, #8
 80154e6:	4629      	mov	r1, r5
 80154e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80154ec:	f000 f866 	bl	80155bc <memset>
 80154f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80154f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80154f8:	e7e9      	b.n	80154ce <__sfp+0x42>
 80154fa:	bf00      	nop
 80154fc:	08019ad8 	.word	0x08019ad8
 8015500:	ffff0001 	.word	0xffff0001

08015504 <_fwalk_reent>:
 8015504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015508:	4680      	mov	r8, r0
 801550a:	4689      	mov	r9, r1
 801550c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015510:	2600      	movs	r6, #0
 8015512:	b914      	cbnz	r4, 801551a <_fwalk_reent+0x16>
 8015514:	4630      	mov	r0, r6
 8015516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801551a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801551e:	3f01      	subs	r7, #1
 8015520:	d501      	bpl.n	8015526 <_fwalk_reent+0x22>
 8015522:	6824      	ldr	r4, [r4, #0]
 8015524:	e7f5      	b.n	8015512 <_fwalk_reent+0xe>
 8015526:	89ab      	ldrh	r3, [r5, #12]
 8015528:	2b01      	cmp	r3, #1
 801552a:	d907      	bls.n	801553c <_fwalk_reent+0x38>
 801552c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015530:	3301      	adds	r3, #1
 8015532:	d003      	beq.n	801553c <_fwalk_reent+0x38>
 8015534:	4629      	mov	r1, r5
 8015536:	4640      	mov	r0, r8
 8015538:	47c8      	blx	r9
 801553a:	4306      	orrs	r6, r0
 801553c:	3568      	adds	r5, #104	; 0x68
 801553e:	e7ee      	b.n	801551e <_fwalk_reent+0x1a>

08015540 <__libc_init_array>:
 8015540:	b570      	push	{r4, r5, r6, lr}
 8015542:	4e0d      	ldr	r6, [pc, #52]	; (8015578 <__libc_init_array+0x38>)
 8015544:	4c0d      	ldr	r4, [pc, #52]	; (801557c <__libc_init_array+0x3c>)
 8015546:	1ba4      	subs	r4, r4, r6
 8015548:	10a4      	asrs	r4, r4, #2
 801554a:	2500      	movs	r5, #0
 801554c:	42a5      	cmp	r5, r4
 801554e:	d109      	bne.n	8015564 <__libc_init_array+0x24>
 8015550:	4e0b      	ldr	r6, [pc, #44]	; (8015580 <__libc_init_array+0x40>)
 8015552:	4c0c      	ldr	r4, [pc, #48]	; (8015584 <__libc_init_array+0x44>)
 8015554:	f000 ff0e 	bl	8016374 <_init>
 8015558:	1ba4      	subs	r4, r4, r6
 801555a:	10a4      	asrs	r4, r4, #2
 801555c:	2500      	movs	r5, #0
 801555e:	42a5      	cmp	r5, r4
 8015560:	d105      	bne.n	801556e <__libc_init_array+0x2e>
 8015562:	bd70      	pop	{r4, r5, r6, pc}
 8015564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015568:	4798      	blx	r3
 801556a:	3501      	adds	r5, #1
 801556c:	e7ee      	b.n	801554c <__libc_init_array+0xc>
 801556e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015572:	4798      	blx	r3
 8015574:	3501      	adds	r5, #1
 8015576:	e7f2      	b.n	801555e <__libc_init_array+0x1e>
 8015578:	08019b18 	.word	0x08019b18
 801557c:	08019b18 	.word	0x08019b18
 8015580:	08019b18 	.word	0x08019b18
 8015584:	08019b1c 	.word	0x08019b1c

08015588 <memcmp>:
 8015588:	b530      	push	{r4, r5, lr}
 801558a:	2400      	movs	r4, #0
 801558c:	42a2      	cmp	r2, r4
 801558e:	d101      	bne.n	8015594 <memcmp+0xc>
 8015590:	2000      	movs	r0, #0
 8015592:	e007      	b.n	80155a4 <memcmp+0x1c>
 8015594:	5d03      	ldrb	r3, [r0, r4]
 8015596:	3401      	adds	r4, #1
 8015598:	190d      	adds	r5, r1, r4
 801559a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801559e:	42ab      	cmp	r3, r5
 80155a0:	d0f4      	beq.n	801558c <memcmp+0x4>
 80155a2:	1b58      	subs	r0, r3, r5
 80155a4:	bd30      	pop	{r4, r5, pc}

080155a6 <memcpy>:
 80155a6:	b510      	push	{r4, lr}
 80155a8:	1e43      	subs	r3, r0, #1
 80155aa:	440a      	add	r2, r1
 80155ac:	4291      	cmp	r1, r2
 80155ae:	d100      	bne.n	80155b2 <memcpy+0xc>
 80155b0:	bd10      	pop	{r4, pc}
 80155b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155ba:	e7f7      	b.n	80155ac <memcpy+0x6>

080155bc <memset>:
 80155bc:	4402      	add	r2, r0
 80155be:	4603      	mov	r3, r0
 80155c0:	4293      	cmp	r3, r2
 80155c2:	d100      	bne.n	80155c6 <memset+0xa>
 80155c4:	4770      	bx	lr
 80155c6:	f803 1b01 	strb.w	r1, [r3], #1
 80155ca:	e7f9      	b.n	80155c0 <memset+0x4>

080155cc <_malloc_r>:
 80155cc:	b570      	push	{r4, r5, r6, lr}
 80155ce:	1ccd      	adds	r5, r1, #3
 80155d0:	f025 0503 	bic.w	r5, r5, #3
 80155d4:	3508      	adds	r5, #8
 80155d6:	2d0c      	cmp	r5, #12
 80155d8:	bf38      	it	cc
 80155da:	250c      	movcc	r5, #12
 80155dc:	2d00      	cmp	r5, #0
 80155de:	4606      	mov	r6, r0
 80155e0:	db01      	blt.n	80155e6 <_malloc_r+0x1a>
 80155e2:	42a9      	cmp	r1, r5
 80155e4:	d903      	bls.n	80155ee <_malloc_r+0x22>
 80155e6:	230c      	movs	r3, #12
 80155e8:	6033      	str	r3, [r6, #0]
 80155ea:	2000      	movs	r0, #0
 80155ec:	bd70      	pop	{r4, r5, r6, pc}
 80155ee:	f000 fa51 	bl	8015a94 <__malloc_lock>
 80155f2:	4a21      	ldr	r2, [pc, #132]	; (8015678 <_malloc_r+0xac>)
 80155f4:	6814      	ldr	r4, [r2, #0]
 80155f6:	4621      	mov	r1, r4
 80155f8:	b991      	cbnz	r1, 8015620 <_malloc_r+0x54>
 80155fa:	4c20      	ldr	r4, [pc, #128]	; (801567c <_malloc_r+0xb0>)
 80155fc:	6823      	ldr	r3, [r4, #0]
 80155fe:	b91b      	cbnz	r3, 8015608 <_malloc_r+0x3c>
 8015600:	4630      	mov	r0, r6
 8015602:	f000 f8f3 	bl	80157ec <_sbrk_r>
 8015606:	6020      	str	r0, [r4, #0]
 8015608:	4629      	mov	r1, r5
 801560a:	4630      	mov	r0, r6
 801560c:	f000 f8ee 	bl	80157ec <_sbrk_r>
 8015610:	1c43      	adds	r3, r0, #1
 8015612:	d124      	bne.n	801565e <_malloc_r+0x92>
 8015614:	230c      	movs	r3, #12
 8015616:	6033      	str	r3, [r6, #0]
 8015618:	4630      	mov	r0, r6
 801561a:	f000 fa3c 	bl	8015a96 <__malloc_unlock>
 801561e:	e7e4      	b.n	80155ea <_malloc_r+0x1e>
 8015620:	680b      	ldr	r3, [r1, #0]
 8015622:	1b5b      	subs	r3, r3, r5
 8015624:	d418      	bmi.n	8015658 <_malloc_r+0x8c>
 8015626:	2b0b      	cmp	r3, #11
 8015628:	d90f      	bls.n	801564a <_malloc_r+0x7e>
 801562a:	600b      	str	r3, [r1, #0]
 801562c:	50cd      	str	r5, [r1, r3]
 801562e:	18cc      	adds	r4, r1, r3
 8015630:	4630      	mov	r0, r6
 8015632:	f000 fa30 	bl	8015a96 <__malloc_unlock>
 8015636:	f104 000b 	add.w	r0, r4, #11
 801563a:	1d23      	adds	r3, r4, #4
 801563c:	f020 0007 	bic.w	r0, r0, #7
 8015640:	1ac3      	subs	r3, r0, r3
 8015642:	d0d3      	beq.n	80155ec <_malloc_r+0x20>
 8015644:	425a      	negs	r2, r3
 8015646:	50e2      	str	r2, [r4, r3]
 8015648:	e7d0      	b.n	80155ec <_malloc_r+0x20>
 801564a:	428c      	cmp	r4, r1
 801564c:	684b      	ldr	r3, [r1, #4]
 801564e:	bf16      	itet	ne
 8015650:	6063      	strne	r3, [r4, #4]
 8015652:	6013      	streq	r3, [r2, #0]
 8015654:	460c      	movne	r4, r1
 8015656:	e7eb      	b.n	8015630 <_malloc_r+0x64>
 8015658:	460c      	mov	r4, r1
 801565a:	6849      	ldr	r1, [r1, #4]
 801565c:	e7cc      	b.n	80155f8 <_malloc_r+0x2c>
 801565e:	1cc4      	adds	r4, r0, #3
 8015660:	f024 0403 	bic.w	r4, r4, #3
 8015664:	42a0      	cmp	r0, r4
 8015666:	d005      	beq.n	8015674 <_malloc_r+0xa8>
 8015668:	1a21      	subs	r1, r4, r0
 801566a:	4630      	mov	r0, r6
 801566c:	f000 f8be 	bl	80157ec <_sbrk_r>
 8015670:	3001      	adds	r0, #1
 8015672:	d0cf      	beq.n	8015614 <_malloc_r+0x48>
 8015674:	6025      	str	r5, [r4, #0]
 8015676:	e7db      	b.n	8015630 <_malloc_r+0x64>
 8015678:	20004c20 	.word	0x20004c20
 801567c:	20004c24 	.word	0x20004c24

08015680 <iprintf>:
 8015680:	b40f      	push	{r0, r1, r2, r3}
 8015682:	4b0a      	ldr	r3, [pc, #40]	; (80156ac <iprintf+0x2c>)
 8015684:	b513      	push	{r0, r1, r4, lr}
 8015686:	681c      	ldr	r4, [r3, #0]
 8015688:	b124      	cbz	r4, 8015694 <iprintf+0x14>
 801568a:	69a3      	ldr	r3, [r4, #24]
 801568c:	b913      	cbnz	r3, 8015694 <iprintf+0x14>
 801568e:	4620      	mov	r0, r4
 8015690:	f7ff fecc 	bl	801542c <__sinit>
 8015694:	ab05      	add	r3, sp, #20
 8015696:	9a04      	ldr	r2, [sp, #16]
 8015698:	68a1      	ldr	r1, [r4, #8]
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	4620      	mov	r0, r4
 801569e:	f000 fa73 	bl	8015b88 <_vfiprintf_r>
 80156a2:	b002      	add	sp, #8
 80156a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156a8:	b004      	add	sp, #16
 80156aa:	4770      	bx	lr
 80156ac:	20000020 	.word	0x20000020

080156b0 <rand>:
 80156b0:	b538      	push	{r3, r4, r5, lr}
 80156b2:	4b13      	ldr	r3, [pc, #76]	; (8015700 <rand+0x50>)
 80156b4:	681c      	ldr	r4, [r3, #0]
 80156b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80156b8:	b97b      	cbnz	r3, 80156da <rand+0x2a>
 80156ba:	2018      	movs	r0, #24
 80156bc:	f000 f9e2 	bl	8015a84 <malloc>
 80156c0:	4a10      	ldr	r2, [pc, #64]	; (8015704 <rand+0x54>)
 80156c2:	4b11      	ldr	r3, [pc, #68]	; (8015708 <rand+0x58>)
 80156c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80156c6:	e9c0 2300 	strd	r2, r3, [r0]
 80156ca:	4b10      	ldr	r3, [pc, #64]	; (801570c <rand+0x5c>)
 80156cc:	6083      	str	r3, [r0, #8]
 80156ce:	230b      	movs	r3, #11
 80156d0:	8183      	strh	r3, [r0, #12]
 80156d2:	2201      	movs	r2, #1
 80156d4:	2300      	movs	r3, #0
 80156d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80156da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80156dc:	480c      	ldr	r0, [pc, #48]	; (8015710 <rand+0x60>)
 80156de:	690a      	ldr	r2, [r1, #16]
 80156e0:	694b      	ldr	r3, [r1, #20]
 80156e2:	4c0c      	ldr	r4, [pc, #48]	; (8015714 <rand+0x64>)
 80156e4:	4350      	muls	r0, r2
 80156e6:	fb04 0003 	mla	r0, r4, r3, r0
 80156ea:	fba2 2304 	umull	r2, r3, r2, r4
 80156ee:	4403      	add	r3, r0
 80156f0:	1c54      	adds	r4, r2, #1
 80156f2:	f143 0500 	adc.w	r5, r3, #0
 80156f6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80156fa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80156fe:	bd38      	pop	{r3, r4, r5, pc}
 8015700:	20000020 	.word	0x20000020
 8015704:	abcd330e 	.word	0xabcd330e
 8015708:	e66d1234 	.word	0xe66d1234
 801570c:	0005deec 	.word	0x0005deec
 8015710:	5851f42d 	.word	0x5851f42d
 8015714:	4c957f2d 	.word	0x4c957f2d

08015718 <cleanup_glue>:
 8015718:	b538      	push	{r3, r4, r5, lr}
 801571a:	460c      	mov	r4, r1
 801571c:	6809      	ldr	r1, [r1, #0]
 801571e:	4605      	mov	r5, r0
 8015720:	b109      	cbz	r1, 8015726 <cleanup_glue+0xe>
 8015722:	f7ff fff9 	bl	8015718 <cleanup_glue>
 8015726:	4621      	mov	r1, r4
 8015728:	4628      	mov	r0, r5
 801572a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801572e:	f000 b9b3 	b.w	8015a98 <_free_r>
	...

08015734 <_reclaim_reent>:
 8015734:	4b2c      	ldr	r3, [pc, #176]	; (80157e8 <_reclaim_reent+0xb4>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	4283      	cmp	r3, r0
 801573a:	b570      	push	{r4, r5, r6, lr}
 801573c:	4604      	mov	r4, r0
 801573e:	d051      	beq.n	80157e4 <_reclaim_reent+0xb0>
 8015740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015742:	b143      	cbz	r3, 8015756 <_reclaim_reent+0x22>
 8015744:	68db      	ldr	r3, [r3, #12]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d14a      	bne.n	80157e0 <_reclaim_reent+0xac>
 801574a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801574c:	6819      	ldr	r1, [r3, #0]
 801574e:	b111      	cbz	r1, 8015756 <_reclaim_reent+0x22>
 8015750:	4620      	mov	r0, r4
 8015752:	f000 f9a1 	bl	8015a98 <_free_r>
 8015756:	6961      	ldr	r1, [r4, #20]
 8015758:	b111      	cbz	r1, 8015760 <_reclaim_reent+0x2c>
 801575a:	4620      	mov	r0, r4
 801575c:	f000 f99c 	bl	8015a98 <_free_r>
 8015760:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015762:	b111      	cbz	r1, 801576a <_reclaim_reent+0x36>
 8015764:	4620      	mov	r0, r4
 8015766:	f000 f997 	bl	8015a98 <_free_r>
 801576a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801576c:	b111      	cbz	r1, 8015774 <_reclaim_reent+0x40>
 801576e:	4620      	mov	r0, r4
 8015770:	f000 f992 	bl	8015a98 <_free_r>
 8015774:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015776:	b111      	cbz	r1, 801577e <_reclaim_reent+0x4a>
 8015778:	4620      	mov	r0, r4
 801577a:	f000 f98d 	bl	8015a98 <_free_r>
 801577e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015780:	b111      	cbz	r1, 8015788 <_reclaim_reent+0x54>
 8015782:	4620      	mov	r0, r4
 8015784:	f000 f988 	bl	8015a98 <_free_r>
 8015788:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801578a:	b111      	cbz	r1, 8015792 <_reclaim_reent+0x5e>
 801578c:	4620      	mov	r0, r4
 801578e:	f000 f983 	bl	8015a98 <_free_r>
 8015792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015794:	b111      	cbz	r1, 801579c <_reclaim_reent+0x68>
 8015796:	4620      	mov	r0, r4
 8015798:	f000 f97e 	bl	8015a98 <_free_r>
 801579c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801579e:	b111      	cbz	r1, 80157a6 <_reclaim_reent+0x72>
 80157a0:	4620      	mov	r0, r4
 80157a2:	f000 f979 	bl	8015a98 <_free_r>
 80157a6:	69a3      	ldr	r3, [r4, #24]
 80157a8:	b1e3      	cbz	r3, 80157e4 <_reclaim_reent+0xb0>
 80157aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80157ac:	4620      	mov	r0, r4
 80157ae:	4798      	blx	r3
 80157b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80157b2:	b1b9      	cbz	r1, 80157e4 <_reclaim_reent+0xb0>
 80157b4:	4620      	mov	r0, r4
 80157b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157ba:	f7ff bfad 	b.w	8015718 <cleanup_glue>
 80157be:	5949      	ldr	r1, [r1, r5]
 80157c0:	b941      	cbnz	r1, 80157d4 <_reclaim_reent+0xa0>
 80157c2:	3504      	adds	r5, #4
 80157c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157c6:	2d80      	cmp	r5, #128	; 0x80
 80157c8:	68d9      	ldr	r1, [r3, #12]
 80157ca:	d1f8      	bne.n	80157be <_reclaim_reent+0x8a>
 80157cc:	4620      	mov	r0, r4
 80157ce:	f000 f963 	bl	8015a98 <_free_r>
 80157d2:	e7ba      	b.n	801574a <_reclaim_reent+0x16>
 80157d4:	680e      	ldr	r6, [r1, #0]
 80157d6:	4620      	mov	r0, r4
 80157d8:	f000 f95e 	bl	8015a98 <_free_r>
 80157dc:	4631      	mov	r1, r6
 80157de:	e7ef      	b.n	80157c0 <_reclaim_reent+0x8c>
 80157e0:	2500      	movs	r5, #0
 80157e2:	e7ef      	b.n	80157c4 <_reclaim_reent+0x90>
 80157e4:	bd70      	pop	{r4, r5, r6, pc}
 80157e6:	bf00      	nop
 80157e8:	20000020 	.word	0x20000020

080157ec <_sbrk_r>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4c06      	ldr	r4, [pc, #24]	; (8015808 <_sbrk_r+0x1c>)
 80157f0:	2300      	movs	r3, #0
 80157f2:	4605      	mov	r5, r0
 80157f4:	4608      	mov	r0, r1
 80157f6:	6023      	str	r3, [r4, #0]
 80157f8:	f7eb f97c 	bl	8000af4 <_sbrk>
 80157fc:	1c43      	adds	r3, r0, #1
 80157fe:	d102      	bne.n	8015806 <_sbrk_r+0x1a>
 8015800:	6823      	ldr	r3, [r4, #0]
 8015802:	b103      	cbz	r3, 8015806 <_sbrk_r+0x1a>
 8015804:	602b      	str	r3, [r5, #0]
 8015806:	bd38      	pop	{r3, r4, r5, pc}
 8015808:	2000b670 	.word	0x2000b670

0801580c <__sread>:
 801580c:	b510      	push	{r4, lr}
 801580e:	460c      	mov	r4, r1
 8015810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015814:	f000 fc56 	bl	80160c4 <_read_r>
 8015818:	2800      	cmp	r0, #0
 801581a:	bfab      	itete	ge
 801581c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801581e:	89a3      	ldrhlt	r3, [r4, #12]
 8015820:	181b      	addge	r3, r3, r0
 8015822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015826:	bfac      	ite	ge
 8015828:	6563      	strge	r3, [r4, #84]	; 0x54
 801582a:	81a3      	strhlt	r3, [r4, #12]
 801582c:	bd10      	pop	{r4, pc}

0801582e <__swrite>:
 801582e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015832:	461f      	mov	r7, r3
 8015834:	898b      	ldrh	r3, [r1, #12]
 8015836:	05db      	lsls	r3, r3, #23
 8015838:	4605      	mov	r5, r0
 801583a:	460c      	mov	r4, r1
 801583c:	4616      	mov	r6, r2
 801583e:	d505      	bpl.n	801584c <__swrite+0x1e>
 8015840:	2302      	movs	r3, #2
 8015842:	2200      	movs	r2, #0
 8015844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015848:	f000 f90a 	bl	8015a60 <_lseek_r>
 801584c:	89a3      	ldrh	r3, [r4, #12]
 801584e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015856:	81a3      	strh	r3, [r4, #12]
 8015858:	4632      	mov	r2, r6
 801585a:	463b      	mov	r3, r7
 801585c:	4628      	mov	r0, r5
 801585e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015862:	f000 b82b 	b.w	80158bc <_write_r>

08015866 <__sseek>:
 8015866:	b510      	push	{r4, lr}
 8015868:	460c      	mov	r4, r1
 801586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801586e:	f000 f8f7 	bl	8015a60 <_lseek_r>
 8015872:	1c43      	adds	r3, r0, #1
 8015874:	89a3      	ldrh	r3, [r4, #12]
 8015876:	bf15      	itete	ne
 8015878:	6560      	strne	r0, [r4, #84]	; 0x54
 801587a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801587e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015882:	81a3      	strheq	r3, [r4, #12]
 8015884:	bf18      	it	ne
 8015886:	81a3      	strhne	r3, [r4, #12]
 8015888:	bd10      	pop	{r4, pc}

0801588a <__sclose>:
 801588a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801588e:	f000 b827 	b.w	80158e0 <_close_r>

08015892 <strncpy>:
 8015892:	b570      	push	{r4, r5, r6, lr}
 8015894:	3901      	subs	r1, #1
 8015896:	4604      	mov	r4, r0
 8015898:	b902      	cbnz	r2, 801589c <strncpy+0xa>
 801589a:	bd70      	pop	{r4, r5, r6, pc}
 801589c:	4623      	mov	r3, r4
 801589e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80158a2:	f803 5b01 	strb.w	r5, [r3], #1
 80158a6:	1e56      	subs	r6, r2, #1
 80158a8:	b92d      	cbnz	r5, 80158b6 <strncpy+0x24>
 80158aa:	4414      	add	r4, r2
 80158ac:	42a3      	cmp	r3, r4
 80158ae:	d0f4      	beq.n	801589a <strncpy+0x8>
 80158b0:	f803 5b01 	strb.w	r5, [r3], #1
 80158b4:	e7fa      	b.n	80158ac <strncpy+0x1a>
 80158b6:	461c      	mov	r4, r3
 80158b8:	4632      	mov	r2, r6
 80158ba:	e7ed      	b.n	8015898 <strncpy+0x6>

080158bc <_write_r>:
 80158bc:	b538      	push	{r3, r4, r5, lr}
 80158be:	4c07      	ldr	r4, [pc, #28]	; (80158dc <_write_r+0x20>)
 80158c0:	4605      	mov	r5, r0
 80158c2:	4608      	mov	r0, r1
 80158c4:	4611      	mov	r1, r2
 80158c6:	2200      	movs	r2, #0
 80158c8:	6022      	str	r2, [r4, #0]
 80158ca:	461a      	mov	r2, r3
 80158cc:	f7eb f8c1 	bl	8000a52 <_write>
 80158d0:	1c43      	adds	r3, r0, #1
 80158d2:	d102      	bne.n	80158da <_write_r+0x1e>
 80158d4:	6823      	ldr	r3, [r4, #0]
 80158d6:	b103      	cbz	r3, 80158da <_write_r+0x1e>
 80158d8:	602b      	str	r3, [r5, #0]
 80158da:	bd38      	pop	{r3, r4, r5, pc}
 80158dc:	2000b670 	.word	0x2000b670

080158e0 <_close_r>:
 80158e0:	b538      	push	{r3, r4, r5, lr}
 80158e2:	4c06      	ldr	r4, [pc, #24]	; (80158fc <_close_r+0x1c>)
 80158e4:	2300      	movs	r3, #0
 80158e6:	4605      	mov	r5, r0
 80158e8:	4608      	mov	r0, r1
 80158ea:	6023      	str	r3, [r4, #0]
 80158ec:	f7eb f8cd 	bl	8000a8a <_close>
 80158f0:	1c43      	adds	r3, r0, #1
 80158f2:	d102      	bne.n	80158fa <_close_r+0x1a>
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	b103      	cbz	r3, 80158fa <_close_r+0x1a>
 80158f8:	602b      	str	r3, [r5, #0]
 80158fa:	bd38      	pop	{r3, r4, r5, pc}
 80158fc:	2000b670 	.word	0x2000b670

08015900 <__sflush_r>:
 8015900:	898a      	ldrh	r2, [r1, #12]
 8015902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015906:	4605      	mov	r5, r0
 8015908:	0710      	lsls	r0, r2, #28
 801590a:	460c      	mov	r4, r1
 801590c:	d458      	bmi.n	80159c0 <__sflush_r+0xc0>
 801590e:	684b      	ldr	r3, [r1, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	dc05      	bgt.n	8015920 <__sflush_r+0x20>
 8015914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015916:	2b00      	cmp	r3, #0
 8015918:	dc02      	bgt.n	8015920 <__sflush_r+0x20>
 801591a:	2000      	movs	r0, #0
 801591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015922:	2e00      	cmp	r6, #0
 8015924:	d0f9      	beq.n	801591a <__sflush_r+0x1a>
 8015926:	2300      	movs	r3, #0
 8015928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801592c:	682f      	ldr	r7, [r5, #0]
 801592e:	6a21      	ldr	r1, [r4, #32]
 8015930:	602b      	str	r3, [r5, #0]
 8015932:	d032      	beq.n	801599a <__sflush_r+0x9a>
 8015934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015936:	89a3      	ldrh	r3, [r4, #12]
 8015938:	075a      	lsls	r2, r3, #29
 801593a:	d505      	bpl.n	8015948 <__sflush_r+0x48>
 801593c:	6863      	ldr	r3, [r4, #4]
 801593e:	1ac0      	subs	r0, r0, r3
 8015940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015942:	b10b      	cbz	r3, 8015948 <__sflush_r+0x48>
 8015944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015946:	1ac0      	subs	r0, r0, r3
 8015948:	2300      	movs	r3, #0
 801594a:	4602      	mov	r2, r0
 801594c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801594e:	6a21      	ldr	r1, [r4, #32]
 8015950:	4628      	mov	r0, r5
 8015952:	47b0      	blx	r6
 8015954:	1c43      	adds	r3, r0, #1
 8015956:	89a3      	ldrh	r3, [r4, #12]
 8015958:	d106      	bne.n	8015968 <__sflush_r+0x68>
 801595a:	6829      	ldr	r1, [r5, #0]
 801595c:	291d      	cmp	r1, #29
 801595e:	d848      	bhi.n	80159f2 <__sflush_r+0xf2>
 8015960:	4a29      	ldr	r2, [pc, #164]	; (8015a08 <__sflush_r+0x108>)
 8015962:	40ca      	lsrs	r2, r1
 8015964:	07d6      	lsls	r6, r2, #31
 8015966:	d544      	bpl.n	80159f2 <__sflush_r+0xf2>
 8015968:	2200      	movs	r2, #0
 801596a:	6062      	str	r2, [r4, #4]
 801596c:	04d9      	lsls	r1, r3, #19
 801596e:	6922      	ldr	r2, [r4, #16]
 8015970:	6022      	str	r2, [r4, #0]
 8015972:	d504      	bpl.n	801597e <__sflush_r+0x7e>
 8015974:	1c42      	adds	r2, r0, #1
 8015976:	d101      	bne.n	801597c <__sflush_r+0x7c>
 8015978:	682b      	ldr	r3, [r5, #0]
 801597a:	b903      	cbnz	r3, 801597e <__sflush_r+0x7e>
 801597c:	6560      	str	r0, [r4, #84]	; 0x54
 801597e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015980:	602f      	str	r7, [r5, #0]
 8015982:	2900      	cmp	r1, #0
 8015984:	d0c9      	beq.n	801591a <__sflush_r+0x1a>
 8015986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801598a:	4299      	cmp	r1, r3
 801598c:	d002      	beq.n	8015994 <__sflush_r+0x94>
 801598e:	4628      	mov	r0, r5
 8015990:	f000 f882 	bl	8015a98 <_free_r>
 8015994:	2000      	movs	r0, #0
 8015996:	6360      	str	r0, [r4, #52]	; 0x34
 8015998:	e7c0      	b.n	801591c <__sflush_r+0x1c>
 801599a:	2301      	movs	r3, #1
 801599c:	4628      	mov	r0, r5
 801599e:	47b0      	blx	r6
 80159a0:	1c41      	adds	r1, r0, #1
 80159a2:	d1c8      	bne.n	8015936 <__sflush_r+0x36>
 80159a4:	682b      	ldr	r3, [r5, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d0c5      	beq.n	8015936 <__sflush_r+0x36>
 80159aa:	2b1d      	cmp	r3, #29
 80159ac:	d001      	beq.n	80159b2 <__sflush_r+0xb2>
 80159ae:	2b16      	cmp	r3, #22
 80159b0:	d101      	bne.n	80159b6 <__sflush_r+0xb6>
 80159b2:	602f      	str	r7, [r5, #0]
 80159b4:	e7b1      	b.n	801591a <__sflush_r+0x1a>
 80159b6:	89a3      	ldrh	r3, [r4, #12]
 80159b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159bc:	81a3      	strh	r3, [r4, #12]
 80159be:	e7ad      	b.n	801591c <__sflush_r+0x1c>
 80159c0:	690f      	ldr	r7, [r1, #16]
 80159c2:	2f00      	cmp	r7, #0
 80159c4:	d0a9      	beq.n	801591a <__sflush_r+0x1a>
 80159c6:	0793      	lsls	r3, r2, #30
 80159c8:	680e      	ldr	r6, [r1, #0]
 80159ca:	bf08      	it	eq
 80159cc:	694b      	ldreq	r3, [r1, #20]
 80159ce:	600f      	str	r7, [r1, #0]
 80159d0:	bf18      	it	ne
 80159d2:	2300      	movne	r3, #0
 80159d4:	eba6 0807 	sub.w	r8, r6, r7
 80159d8:	608b      	str	r3, [r1, #8]
 80159da:	f1b8 0f00 	cmp.w	r8, #0
 80159de:	dd9c      	ble.n	801591a <__sflush_r+0x1a>
 80159e0:	4643      	mov	r3, r8
 80159e2:	463a      	mov	r2, r7
 80159e4:	6a21      	ldr	r1, [r4, #32]
 80159e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159e8:	4628      	mov	r0, r5
 80159ea:	47b0      	blx	r6
 80159ec:	2800      	cmp	r0, #0
 80159ee:	dc06      	bgt.n	80159fe <__sflush_r+0xfe>
 80159f0:	89a3      	ldrh	r3, [r4, #12]
 80159f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159f6:	81a3      	strh	r3, [r4, #12]
 80159f8:	f04f 30ff 	mov.w	r0, #4294967295
 80159fc:	e78e      	b.n	801591c <__sflush_r+0x1c>
 80159fe:	4407      	add	r7, r0
 8015a00:	eba8 0800 	sub.w	r8, r8, r0
 8015a04:	e7e9      	b.n	80159da <__sflush_r+0xda>
 8015a06:	bf00      	nop
 8015a08:	20400001 	.word	0x20400001

08015a0c <_fflush_r>:
 8015a0c:	b538      	push	{r3, r4, r5, lr}
 8015a0e:	690b      	ldr	r3, [r1, #16]
 8015a10:	4605      	mov	r5, r0
 8015a12:	460c      	mov	r4, r1
 8015a14:	b1db      	cbz	r3, 8015a4e <_fflush_r+0x42>
 8015a16:	b118      	cbz	r0, 8015a20 <_fflush_r+0x14>
 8015a18:	6983      	ldr	r3, [r0, #24]
 8015a1a:	b90b      	cbnz	r3, 8015a20 <_fflush_r+0x14>
 8015a1c:	f7ff fd06 	bl	801542c <__sinit>
 8015a20:	4b0c      	ldr	r3, [pc, #48]	; (8015a54 <_fflush_r+0x48>)
 8015a22:	429c      	cmp	r4, r3
 8015a24:	d109      	bne.n	8015a3a <_fflush_r+0x2e>
 8015a26:	686c      	ldr	r4, [r5, #4]
 8015a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a2c:	b17b      	cbz	r3, 8015a4e <_fflush_r+0x42>
 8015a2e:	4621      	mov	r1, r4
 8015a30:	4628      	mov	r0, r5
 8015a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a36:	f7ff bf63 	b.w	8015900 <__sflush_r>
 8015a3a:	4b07      	ldr	r3, [pc, #28]	; (8015a58 <_fflush_r+0x4c>)
 8015a3c:	429c      	cmp	r4, r3
 8015a3e:	d101      	bne.n	8015a44 <_fflush_r+0x38>
 8015a40:	68ac      	ldr	r4, [r5, #8]
 8015a42:	e7f1      	b.n	8015a28 <_fflush_r+0x1c>
 8015a44:	4b05      	ldr	r3, [pc, #20]	; (8015a5c <_fflush_r+0x50>)
 8015a46:	429c      	cmp	r4, r3
 8015a48:	bf08      	it	eq
 8015a4a:	68ec      	ldreq	r4, [r5, #12]
 8015a4c:	e7ec      	b.n	8015a28 <_fflush_r+0x1c>
 8015a4e:	2000      	movs	r0, #0
 8015a50:	bd38      	pop	{r3, r4, r5, pc}
 8015a52:	bf00      	nop
 8015a54:	08019a98 	.word	0x08019a98
 8015a58:	08019ab8 	.word	0x08019ab8
 8015a5c:	08019a78 	.word	0x08019a78

08015a60 <_lseek_r>:
 8015a60:	b538      	push	{r3, r4, r5, lr}
 8015a62:	4c07      	ldr	r4, [pc, #28]	; (8015a80 <_lseek_r+0x20>)
 8015a64:	4605      	mov	r5, r0
 8015a66:	4608      	mov	r0, r1
 8015a68:	4611      	mov	r1, r2
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	6022      	str	r2, [r4, #0]
 8015a6e:	461a      	mov	r2, r3
 8015a70:	f7eb f832 	bl	8000ad8 <_lseek>
 8015a74:	1c43      	adds	r3, r0, #1
 8015a76:	d102      	bne.n	8015a7e <_lseek_r+0x1e>
 8015a78:	6823      	ldr	r3, [r4, #0]
 8015a7a:	b103      	cbz	r3, 8015a7e <_lseek_r+0x1e>
 8015a7c:	602b      	str	r3, [r5, #0]
 8015a7e:	bd38      	pop	{r3, r4, r5, pc}
 8015a80:	2000b670 	.word	0x2000b670

08015a84 <malloc>:
 8015a84:	4b02      	ldr	r3, [pc, #8]	; (8015a90 <malloc+0xc>)
 8015a86:	4601      	mov	r1, r0
 8015a88:	6818      	ldr	r0, [r3, #0]
 8015a8a:	f7ff bd9f 	b.w	80155cc <_malloc_r>
 8015a8e:	bf00      	nop
 8015a90:	20000020 	.word	0x20000020

08015a94 <__malloc_lock>:
 8015a94:	4770      	bx	lr

08015a96 <__malloc_unlock>:
 8015a96:	4770      	bx	lr

08015a98 <_free_r>:
 8015a98:	b538      	push	{r3, r4, r5, lr}
 8015a9a:	4605      	mov	r5, r0
 8015a9c:	2900      	cmp	r1, #0
 8015a9e:	d045      	beq.n	8015b2c <_free_r+0x94>
 8015aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015aa4:	1f0c      	subs	r4, r1, #4
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	bfb8      	it	lt
 8015aaa:	18e4      	addlt	r4, r4, r3
 8015aac:	f7ff fff2 	bl	8015a94 <__malloc_lock>
 8015ab0:	4a1f      	ldr	r2, [pc, #124]	; (8015b30 <_free_r+0x98>)
 8015ab2:	6813      	ldr	r3, [r2, #0]
 8015ab4:	4610      	mov	r0, r2
 8015ab6:	b933      	cbnz	r3, 8015ac6 <_free_r+0x2e>
 8015ab8:	6063      	str	r3, [r4, #4]
 8015aba:	6014      	str	r4, [r2, #0]
 8015abc:	4628      	mov	r0, r5
 8015abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ac2:	f7ff bfe8 	b.w	8015a96 <__malloc_unlock>
 8015ac6:	42a3      	cmp	r3, r4
 8015ac8:	d90c      	bls.n	8015ae4 <_free_r+0x4c>
 8015aca:	6821      	ldr	r1, [r4, #0]
 8015acc:	1862      	adds	r2, r4, r1
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	bf04      	itt	eq
 8015ad2:	681a      	ldreq	r2, [r3, #0]
 8015ad4:	685b      	ldreq	r3, [r3, #4]
 8015ad6:	6063      	str	r3, [r4, #4]
 8015ad8:	bf04      	itt	eq
 8015ada:	1852      	addeq	r2, r2, r1
 8015adc:	6022      	streq	r2, [r4, #0]
 8015ade:	6004      	str	r4, [r0, #0]
 8015ae0:	e7ec      	b.n	8015abc <_free_r+0x24>
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	685a      	ldr	r2, [r3, #4]
 8015ae6:	b10a      	cbz	r2, 8015aec <_free_r+0x54>
 8015ae8:	42a2      	cmp	r2, r4
 8015aea:	d9fa      	bls.n	8015ae2 <_free_r+0x4a>
 8015aec:	6819      	ldr	r1, [r3, #0]
 8015aee:	1858      	adds	r0, r3, r1
 8015af0:	42a0      	cmp	r0, r4
 8015af2:	d10b      	bne.n	8015b0c <_free_r+0x74>
 8015af4:	6820      	ldr	r0, [r4, #0]
 8015af6:	4401      	add	r1, r0
 8015af8:	1858      	adds	r0, r3, r1
 8015afa:	4282      	cmp	r2, r0
 8015afc:	6019      	str	r1, [r3, #0]
 8015afe:	d1dd      	bne.n	8015abc <_free_r+0x24>
 8015b00:	6810      	ldr	r0, [r2, #0]
 8015b02:	6852      	ldr	r2, [r2, #4]
 8015b04:	605a      	str	r2, [r3, #4]
 8015b06:	4401      	add	r1, r0
 8015b08:	6019      	str	r1, [r3, #0]
 8015b0a:	e7d7      	b.n	8015abc <_free_r+0x24>
 8015b0c:	d902      	bls.n	8015b14 <_free_r+0x7c>
 8015b0e:	230c      	movs	r3, #12
 8015b10:	602b      	str	r3, [r5, #0]
 8015b12:	e7d3      	b.n	8015abc <_free_r+0x24>
 8015b14:	6820      	ldr	r0, [r4, #0]
 8015b16:	1821      	adds	r1, r4, r0
 8015b18:	428a      	cmp	r2, r1
 8015b1a:	bf04      	itt	eq
 8015b1c:	6811      	ldreq	r1, [r2, #0]
 8015b1e:	6852      	ldreq	r2, [r2, #4]
 8015b20:	6062      	str	r2, [r4, #4]
 8015b22:	bf04      	itt	eq
 8015b24:	1809      	addeq	r1, r1, r0
 8015b26:	6021      	streq	r1, [r4, #0]
 8015b28:	605c      	str	r4, [r3, #4]
 8015b2a:	e7c7      	b.n	8015abc <_free_r+0x24>
 8015b2c:	bd38      	pop	{r3, r4, r5, pc}
 8015b2e:	bf00      	nop
 8015b30:	20004c20 	.word	0x20004c20

08015b34 <__sfputc_r>:
 8015b34:	6893      	ldr	r3, [r2, #8]
 8015b36:	3b01      	subs	r3, #1
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	b410      	push	{r4}
 8015b3c:	6093      	str	r3, [r2, #8]
 8015b3e:	da08      	bge.n	8015b52 <__sfputc_r+0x1e>
 8015b40:	6994      	ldr	r4, [r2, #24]
 8015b42:	42a3      	cmp	r3, r4
 8015b44:	db01      	blt.n	8015b4a <__sfputc_r+0x16>
 8015b46:	290a      	cmp	r1, #10
 8015b48:	d103      	bne.n	8015b52 <__sfputc_r+0x1e>
 8015b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b4e:	f000 bacb 	b.w	80160e8 <__swbuf_r>
 8015b52:	6813      	ldr	r3, [r2, #0]
 8015b54:	1c58      	adds	r0, r3, #1
 8015b56:	6010      	str	r0, [r2, #0]
 8015b58:	7019      	strb	r1, [r3, #0]
 8015b5a:	4608      	mov	r0, r1
 8015b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b60:	4770      	bx	lr

08015b62 <__sfputs_r>:
 8015b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b64:	4606      	mov	r6, r0
 8015b66:	460f      	mov	r7, r1
 8015b68:	4614      	mov	r4, r2
 8015b6a:	18d5      	adds	r5, r2, r3
 8015b6c:	42ac      	cmp	r4, r5
 8015b6e:	d101      	bne.n	8015b74 <__sfputs_r+0x12>
 8015b70:	2000      	movs	r0, #0
 8015b72:	e007      	b.n	8015b84 <__sfputs_r+0x22>
 8015b74:	463a      	mov	r2, r7
 8015b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b7a:	4630      	mov	r0, r6
 8015b7c:	f7ff ffda 	bl	8015b34 <__sfputc_r>
 8015b80:	1c43      	adds	r3, r0, #1
 8015b82:	d1f3      	bne.n	8015b6c <__sfputs_r+0xa>
 8015b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b88 <_vfiprintf_r>:
 8015b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8c:	460c      	mov	r4, r1
 8015b8e:	b09d      	sub	sp, #116	; 0x74
 8015b90:	4617      	mov	r7, r2
 8015b92:	461d      	mov	r5, r3
 8015b94:	4606      	mov	r6, r0
 8015b96:	b118      	cbz	r0, 8015ba0 <_vfiprintf_r+0x18>
 8015b98:	6983      	ldr	r3, [r0, #24]
 8015b9a:	b90b      	cbnz	r3, 8015ba0 <_vfiprintf_r+0x18>
 8015b9c:	f7ff fc46 	bl	801542c <__sinit>
 8015ba0:	4b7c      	ldr	r3, [pc, #496]	; (8015d94 <_vfiprintf_r+0x20c>)
 8015ba2:	429c      	cmp	r4, r3
 8015ba4:	d158      	bne.n	8015c58 <_vfiprintf_r+0xd0>
 8015ba6:	6874      	ldr	r4, [r6, #4]
 8015ba8:	89a3      	ldrh	r3, [r4, #12]
 8015baa:	0718      	lsls	r0, r3, #28
 8015bac:	d55e      	bpl.n	8015c6c <_vfiprintf_r+0xe4>
 8015bae:	6923      	ldr	r3, [r4, #16]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d05b      	beq.n	8015c6c <_vfiprintf_r+0xe4>
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8015bb8:	2320      	movs	r3, #32
 8015bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bbe:	2330      	movs	r3, #48	; 0x30
 8015bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bc4:	9503      	str	r5, [sp, #12]
 8015bc6:	f04f 0b01 	mov.w	fp, #1
 8015bca:	46b8      	mov	r8, r7
 8015bcc:	4645      	mov	r5, r8
 8015bce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015bd2:	b10b      	cbz	r3, 8015bd8 <_vfiprintf_r+0x50>
 8015bd4:	2b25      	cmp	r3, #37	; 0x25
 8015bd6:	d154      	bne.n	8015c82 <_vfiprintf_r+0xfa>
 8015bd8:	ebb8 0a07 	subs.w	sl, r8, r7
 8015bdc:	d00b      	beq.n	8015bf6 <_vfiprintf_r+0x6e>
 8015bde:	4653      	mov	r3, sl
 8015be0:	463a      	mov	r2, r7
 8015be2:	4621      	mov	r1, r4
 8015be4:	4630      	mov	r0, r6
 8015be6:	f7ff ffbc 	bl	8015b62 <__sfputs_r>
 8015bea:	3001      	adds	r0, #1
 8015bec:	f000 80c2 	beq.w	8015d74 <_vfiprintf_r+0x1ec>
 8015bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf2:	4453      	add	r3, sl
 8015bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8015bf6:	f898 3000 	ldrb.w	r3, [r8]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	f000 80ba 	beq.w	8015d74 <_vfiprintf_r+0x1ec>
 8015c00:	2300      	movs	r3, #0
 8015c02:	f04f 32ff 	mov.w	r2, #4294967295
 8015c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c0a:	9304      	str	r3, [sp, #16]
 8015c0c:	9307      	str	r3, [sp, #28]
 8015c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c12:	931a      	str	r3, [sp, #104]	; 0x68
 8015c14:	46a8      	mov	r8, r5
 8015c16:	2205      	movs	r2, #5
 8015c18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015c1c:	485e      	ldr	r0, [pc, #376]	; (8015d98 <_vfiprintf_r+0x210>)
 8015c1e:	f7ea fae7 	bl	80001f0 <memchr>
 8015c22:	9b04      	ldr	r3, [sp, #16]
 8015c24:	bb78      	cbnz	r0, 8015c86 <_vfiprintf_r+0xfe>
 8015c26:	06d9      	lsls	r1, r3, #27
 8015c28:	bf44      	itt	mi
 8015c2a:	2220      	movmi	r2, #32
 8015c2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015c30:	071a      	lsls	r2, r3, #28
 8015c32:	bf44      	itt	mi
 8015c34:	222b      	movmi	r2, #43	; 0x2b
 8015c36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015c3a:	782a      	ldrb	r2, [r5, #0]
 8015c3c:	2a2a      	cmp	r2, #42	; 0x2a
 8015c3e:	d02a      	beq.n	8015c96 <_vfiprintf_r+0x10e>
 8015c40:	9a07      	ldr	r2, [sp, #28]
 8015c42:	46a8      	mov	r8, r5
 8015c44:	2000      	movs	r0, #0
 8015c46:	250a      	movs	r5, #10
 8015c48:	4641      	mov	r1, r8
 8015c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c4e:	3b30      	subs	r3, #48	; 0x30
 8015c50:	2b09      	cmp	r3, #9
 8015c52:	d969      	bls.n	8015d28 <_vfiprintf_r+0x1a0>
 8015c54:	b360      	cbz	r0, 8015cb0 <_vfiprintf_r+0x128>
 8015c56:	e024      	b.n	8015ca2 <_vfiprintf_r+0x11a>
 8015c58:	4b50      	ldr	r3, [pc, #320]	; (8015d9c <_vfiprintf_r+0x214>)
 8015c5a:	429c      	cmp	r4, r3
 8015c5c:	d101      	bne.n	8015c62 <_vfiprintf_r+0xda>
 8015c5e:	68b4      	ldr	r4, [r6, #8]
 8015c60:	e7a2      	b.n	8015ba8 <_vfiprintf_r+0x20>
 8015c62:	4b4f      	ldr	r3, [pc, #316]	; (8015da0 <_vfiprintf_r+0x218>)
 8015c64:	429c      	cmp	r4, r3
 8015c66:	bf08      	it	eq
 8015c68:	68f4      	ldreq	r4, [r6, #12]
 8015c6a:	e79d      	b.n	8015ba8 <_vfiprintf_r+0x20>
 8015c6c:	4621      	mov	r1, r4
 8015c6e:	4630      	mov	r0, r6
 8015c70:	f000 fa8c 	bl	801618c <__swsetup_r>
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d09d      	beq.n	8015bb4 <_vfiprintf_r+0x2c>
 8015c78:	f04f 30ff 	mov.w	r0, #4294967295
 8015c7c:	b01d      	add	sp, #116	; 0x74
 8015c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c82:	46a8      	mov	r8, r5
 8015c84:	e7a2      	b.n	8015bcc <_vfiprintf_r+0x44>
 8015c86:	4a44      	ldr	r2, [pc, #272]	; (8015d98 <_vfiprintf_r+0x210>)
 8015c88:	1a80      	subs	r0, r0, r2
 8015c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8015c8e:	4318      	orrs	r0, r3
 8015c90:	9004      	str	r0, [sp, #16]
 8015c92:	4645      	mov	r5, r8
 8015c94:	e7be      	b.n	8015c14 <_vfiprintf_r+0x8c>
 8015c96:	9a03      	ldr	r2, [sp, #12]
 8015c98:	1d11      	adds	r1, r2, #4
 8015c9a:	6812      	ldr	r2, [r2, #0]
 8015c9c:	9103      	str	r1, [sp, #12]
 8015c9e:	2a00      	cmp	r2, #0
 8015ca0:	db01      	blt.n	8015ca6 <_vfiprintf_r+0x11e>
 8015ca2:	9207      	str	r2, [sp, #28]
 8015ca4:	e004      	b.n	8015cb0 <_vfiprintf_r+0x128>
 8015ca6:	4252      	negs	r2, r2
 8015ca8:	f043 0302 	orr.w	r3, r3, #2
 8015cac:	9207      	str	r2, [sp, #28]
 8015cae:	9304      	str	r3, [sp, #16]
 8015cb0:	f898 3000 	ldrb.w	r3, [r8]
 8015cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8015cb6:	d10e      	bne.n	8015cd6 <_vfiprintf_r+0x14e>
 8015cb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8015cbe:	d138      	bne.n	8015d32 <_vfiprintf_r+0x1aa>
 8015cc0:	9b03      	ldr	r3, [sp, #12]
 8015cc2:	1d1a      	adds	r2, r3, #4
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	9203      	str	r2, [sp, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	bfb8      	it	lt
 8015ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8015cd0:	f108 0802 	add.w	r8, r8, #2
 8015cd4:	9305      	str	r3, [sp, #20]
 8015cd6:	4d33      	ldr	r5, [pc, #204]	; (8015da4 <_vfiprintf_r+0x21c>)
 8015cd8:	f898 1000 	ldrb.w	r1, [r8]
 8015cdc:	2203      	movs	r2, #3
 8015cde:	4628      	mov	r0, r5
 8015ce0:	f7ea fa86 	bl	80001f0 <memchr>
 8015ce4:	b140      	cbz	r0, 8015cf8 <_vfiprintf_r+0x170>
 8015ce6:	2340      	movs	r3, #64	; 0x40
 8015ce8:	1b40      	subs	r0, r0, r5
 8015cea:	fa03 f000 	lsl.w	r0, r3, r0
 8015cee:	9b04      	ldr	r3, [sp, #16]
 8015cf0:	4303      	orrs	r3, r0
 8015cf2:	f108 0801 	add.w	r8, r8, #1
 8015cf6:	9304      	str	r3, [sp, #16]
 8015cf8:	f898 1000 	ldrb.w	r1, [r8]
 8015cfc:	482a      	ldr	r0, [pc, #168]	; (8015da8 <_vfiprintf_r+0x220>)
 8015cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d02:	2206      	movs	r2, #6
 8015d04:	f108 0701 	add.w	r7, r8, #1
 8015d08:	f7ea fa72 	bl	80001f0 <memchr>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	d037      	beq.n	8015d80 <_vfiprintf_r+0x1f8>
 8015d10:	4b26      	ldr	r3, [pc, #152]	; (8015dac <_vfiprintf_r+0x224>)
 8015d12:	bb1b      	cbnz	r3, 8015d5c <_vfiprintf_r+0x1d4>
 8015d14:	9b03      	ldr	r3, [sp, #12]
 8015d16:	3307      	adds	r3, #7
 8015d18:	f023 0307 	bic.w	r3, r3, #7
 8015d1c:	3308      	adds	r3, #8
 8015d1e:	9303      	str	r3, [sp, #12]
 8015d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d22:	444b      	add	r3, r9
 8015d24:	9309      	str	r3, [sp, #36]	; 0x24
 8015d26:	e750      	b.n	8015bca <_vfiprintf_r+0x42>
 8015d28:	fb05 3202 	mla	r2, r5, r2, r3
 8015d2c:	2001      	movs	r0, #1
 8015d2e:	4688      	mov	r8, r1
 8015d30:	e78a      	b.n	8015c48 <_vfiprintf_r+0xc0>
 8015d32:	2300      	movs	r3, #0
 8015d34:	f108 0801 	add.w	r8, r8, #1
 8015d38:	9305      	str	r3, [sp, #20]
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	250a      	movs	r5, #10
 8015d3e:	4640      	mov	r0, r8
 8015d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d44:	3a30      	subs	r2, #48	; 0x30
 8015d46:	2a09      	cmp	r2, #9
 8015d48:	d903      	bls.n	8015d52 <_vfiprintf_r+0x1ca>
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d0c3      	beq.n	8015cd6 <_vfiprintf_r+0x14e>
 8015d4e:	9105      	str	r1, [sp, #20]
 8015d50:	e7c1      	b.n	8015cd6 <_vfiprintf_r+0x14e>
 8015d52:	fb05 2101 	mla	r1, r5, r1, r2
 8015d56:	2301      	movs	r3, #1
 8015d58:	4680      	mov	r8, r0
 8015d5a:	e7f0      	b.n	8015d3e <_vfiprintf_r+0x1b6>
 8015d5c:	ab03      	add	r3, sp, #12
 8015d5e:	9300      	str	r3, [sp, #0]
 8015d60:	4622      	mov	r2, r4
 8015d62:	4b13      	ldr	r3, [pc, #76]	; (8015db0 <_vfiprintf_r+0x228>)
 8015d64:	a904      	add	r1, sp, #16
 8015d66:	4630      	mov	r0, r6
 8015d68:	f3af 8000 	nop.w
 8015d6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015d70:	4681      	mov	r9, r0
 8015d72:	d1d5      	bne.n	8015d20 <_vfiprintf_r+0x198>
 8015d74:	89a3      	ldrh	r3, [r4, #12]
 8015d76:	065b      	lsls	r3, r3, #25
 8015d78:	f53f af7e 	bmi.w	8015c78 <_vfiprintf_r+0xf0>
 8015d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d7e:	e77d      	b.n	8015c7c <_vfiprintf_r+0xf4>
 8015d80:	ab03      	add	r3, sp, #12
 8015d82:	9300      	str	r3, [sp, #0]
 8015d84:	4622      	mov	r2, r4
 8015d86:	4b0a      	ldr	r3, [pc, #40]	; (8015db0 <_vfiprintf_r+0x228>)
 8015d88:	a904      	add	r1, sp, #16
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	f000 f888 	bl	8015ea0 <_printf_i>
 8015d90:	e7ec      	b.n	8015d6c <_vfiprintf_r+0x1e4>
 8015d92:	bf00      	nop
 8015d94:	08019a98 	.word	0x08019a98
 8015d98:	08019adc 	.word	0x08019adc
 8015d9c:	08019ab8 	.word	0x08019ab8
 8015da0:	08019a78 	.word	0x08019a78
 8015da4:	08019ae2 	.word	0x08019ae2
 8015da8:	08019ae6 	.word	0x08019ae6
 8015dac:	00000000 	.word	0x00000000
 8015db0:	08015b63 	.word	0x08015b63

08015db4 <_printf_common>:
 8015db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015db8:	4691      	mov	r9, r2
 8015dba:	461f      	mov	r7, r3
 8015dbc:	688a      	ldr	r2, [r1, #8]
 8015dbe:	690b      	ldr	r3, [r1, #16]
 8015dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	bfb8      	it	lt
 8015dc8:	4613      	movlt	r3, r2
 8015dca:	f8c9 3000 	str.w	r3, [r9]
 8015dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015dd2:	4606      	mov	r6, r0
 8015dd4:	460c      	mov	r4, r1
 8015dd6:	b112      	cbz	r2, 8015dde <_printf_common+0x2a>
 8015dd8:	3301      	adds	r3, #1
 8015dda:	f8c9 3000 	str.w	r3, [r9]
 8015dde:	6823      	ldr	r3, [r4, #0]
 8015de0:	0699      	lsls	r1, r3, #26
 8015de2:	bf42      	ittt	mi
 8015de4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015de8:	3302      	addmi	r3, #2
 8015dea:	f8c9 3000 	strmi.w	r3, [r9]
 8015dee:	6825      	ldr	r5, [r4, #0]
 8015df0:	f015 0506 	ands.w	r5, r5, #6
 8015df4:	d107      	bne.n	8015e06 <_printf_common+0x52>
 8015df6:	f104 0a19 	add.w	sl, r4, #25
 8015dfa:	68e3      	ldr	r3, [r4, #12]
 8015dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8015e00:	1a9b      	subs	r3, r3, r2
 8015e02:	42ab      	cmp	r3, r5
 8015e04:	dc28      	bgt.n	8015e58 <_printf_common+0xa4>
 8015e06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015e0a:	6822      	ldr	r2, [r4, #0]
 8015e0c:	3300      	adds	r3, #0
 8015e0e:	bf18      	it	ne
 8015e10:	2301      	movne	r3, #1
 8015e12:	0692      	lsls	r2, r2, #26
 8015e14:	d42d      	bmi.n	8015e72 <_printf_common+0xbe>
 8015e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e1a:	4639      	mov	r1, r7
 8015e1c:	4630      	mov	r0, r6
 8015e1e:	47c0      	blx	r8
 8015e20:	3001      	adds	r0, #1
 8015e22:	d020      	beq.n	8015e66 <_printf_common+0xb2>
 8015e24:	6823      	ldr	r3, [r4, #0]
 8015e26:	68e5      	ldr	r5, [r4, #12]
 8015e28:	f8d9 2000 	ldr.w	r2, [r9]
 8015e2c:	f003 0306 	and.w	r3, r3, #6
 8015e30:	2b04      	cmp	r3, #4
 8015e32:	bf08      	it	eq
 8015e34:	1aad      	subeq	r5, r5, r2
 8015e36:	68a3      	ldr	r3, [r4, #8]
 8015e38:	6922      	ldr	r2, [r4, #16]
 8015e3a:	bf0c      	ite	eq
 8015e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e40:	2500      	movne	r5, #0
 8015e42:	4293      	cmp	r3, r2
 8015e44:	bfc4      	itt	gt
 8015e46:	1a9b      	subgt	r3, r3, r2
 8015e48:	18ed      	addgt	r5, r5, r3
 8015e4a:	f04f 0900 	mov.w	r9, #0
 8015e4e:	341a      	adds	r4, #26
 8015e50:	454d      	cmp	r5, r9
 8015e52:	d11a      	bne.n	8015e8a <_printf_common+0xd6>
 8015e54:	2000      	movs	r0, #0
 8015e56:	e008      	b.n	8015e6a <_printf_common+0xb6>
 8015e58:	2301      	movs	r3, #1
 8015e5a:	4652      	mov	r2, sl
 8015e5c:	4639      	mov	r1, r7
 8015e5e:	4630      	mov	r0, r6
 8015e60:	47c0      	blx	r8
 8015e62:	3001      	adds	r0, #1
 8015e64:	d103      	bne.n	8015e6e <_printf_common+0xba>
 8015e66:	f04f 30ff 	mov.w	r0, #4294967295
 8015e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e6e:	3501      	adds	r5, #1
 8015e70:	e7c3      	b.n	8015dfa <_printf_common+0x46>
 8015e72:	18e1      	adds	r1, r4, r3
 8015e74:	1c5a      	adds	r2, r3, #1
 8015e76:	2030      	movs	r0, #48	; 0x30
 8015e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e7c:	4422      	add	r2, r4
 8015e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e86:	3302      	adds	r3, #2
 8015e88:	e7c5      	b.n	8015e16 <_printf_common+0x62>
 8015e8a:	2301      	movs	r3, #1
 8015e8c:	4622      	mov	r2, r4
 8015e8e:	4639      	mov	r1, r7
 8015e90:	4630      	mov	r0, r6
 8015e92:	47c0      	blx	r8
 8015e94:	3001      	adds	r0, #1
 8015e96:	d0e6      	beq.n	8015e66 <_printf_common+0xb2>
 8015e98:	f109 0901 	add.w	r9, r9, #1
 8015e9c:	e7d8      	b.n	8015e50 <_printf_common+0x9c>
	...

08015ea0 <_printf_i>:
 8015ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ea4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015ea8:	460c      	mov	r4, r1
 8015eaa:	7e09      	ldrb	r1, [r1, #24]
 8015eac:	b085      	sub	sp, #20
 8015eae:	296e      	cmp	r1, #110	; 0x6e
 8015eb0:	4617      	mov	r7, r2
 8015eb2:	4606      	mov	r6, r0
 8015eb4:	4698      	mov	r8, r3
 8015eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015eb8:	f000 80b3 	beq.w	8016022 <_printf_i+0x182>
 8015ebc:	d822      	bhi.n	8015f04 <_printf_i+0x64>
 8015ebe:	2963      	cmp	r1, #99	; 0x63
 8015ec0:	d036      	beq.n	8015f30 <_printf_i+0x90>
 8015ec2:	d80a      	bhi.n	8015eda <_printf_i+0x3a>
 8015ec4:	2900      	cmp	r1, #0
 8015ec6:	f000 80b9 	beq.w	801603c <_printf_i+0x19c>
 8015eca:	2958      	cmp	r1, #88	; 0x58
 8015ecc:	f000 8083 	beq.w	8015fd6 <_printf_i+0x136>
 8015ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ed4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015ed8:	e032      	b.n	8015f40 <_printf_i+0xa0>
 8015eda:	2964      	cmp	r1, #100	; 0x64
 8015edc:	d001      	beq.n	8015ee2 <_printf_i+0x42>
 8015ede:	2969      	cmp	r1, #105	; 0x69
 8015ee0:	d1f6      	bne.n	8015ed0 <_printf_i+0x30>
 8015ee2:	6820      	ldr	r0, [r4, #0]
 8015ee4:	6813      	ldr	r3, [r2, #0]
 8015ee6:	0605      	lsls	r5, r0, #24
 8015ee8:	f103 0104 	add.w	r1, r3, #4
 8015eec:	d52a      	bpl.n	8015f44 <_printf_i+0xa4>
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	6011      	str	r1, [r2, #0]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	da03      	bge.n	8015efe <_printf_i+0x5e>
 8015ef6:	222d      	movs	r2, #45	; 0x2d
 8015ef8:	425b      	negs	r3, r3
 8015efa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015efe:	486f      	ldr	r0, [pc, #444]	; (80160bc <_printf_i+0x21c>)
 8015f00:	220a      	movs	r2, #10
 8015f02:	e039      	b.n	8015f78 <_printf_i+0xd8>
 8015f04:	2973      	cmp	r1, #115	; 0x73
 8015f06:	f000 809d 	beq.w	8016044 <_printf_i+0x1a4>
 8015f0a:	d808      	bhi.n	8015f1e <_printf_i+0x7e>
 8015f0c:	296f      	cmp	r1, #111	; 0x6f
 8015f0e:	d020      	beq.n	8015f52 <_printf_i+0xb2>
 8015f10:	2970      	cmp	r1, #112	; 0x70
 8015f12:	d1dd      	bne.n	8015ed0 <_printf_i+0x30>
 8015f14:	6823      	ldr	r3, [r4, #0]
 8015f16:	f043 0320 	orr.w	r3, r3, #32
 8015f1a:	6023      	str	r3, [r4, #0]
 8015f1c:	e003      	b.n	8015f26 <_printf_i+0x86>
 8015f1e:	2975      	cmp	r1, #117	; 0x75
 8015f20:	d017      	beq.n	8015f52 <_printf_i+0xb2>
 8015f22:	2978      	cmp	r1, #120	; 0x78
 8015f24:	d1d4      	bne.n	8015ed0 <_printf_i+0x30>
 8015f26:	2378      	movs	r3, #120	; 0x78
 8015f28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f2c:	4864      	ldr	r0, [pc, #400]	; (80160c0 <_printf_i+0x220>)
 8015f2e:	e055      	b.n	8015fdc <_printf_i+0x13c>
 8015f30:	6813      	ldr	r3, [r2, #0]
 8015f32:	1d19      	adds	r1, r3, #4
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	6011      	str	r1, [r2, #0]
 8015f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f40:	2301      	movs	r3, #1
 8015f42:	e08c      	b.n	801605e <_printf_i+0x1be>
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	6011      	str	r1, [r2, #0]
 8015f48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f4c:	bf18      	it	ne
 8015f4e:	b21b      	sxthne	r3, r3
 8015f50:	e7cf      	b.n	8015ef2 <_printf_i+0x52>
 8015f52:	6813      	ldr	r3, [r2, #0]
 8015f54:	6825      	ldr	r5, [r4, #0]
 8015f56:	1d18      	adds	r0, r3, #4
 8015f58:	6010      	str	r0, [r2, #0]
 8015f5a:	0628      	lsls	r0, r5, #24
 8015f5c:	d501      	bpl.n	8015f62 <_printf_i+0xc2>
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	e002      	b.n	8015f68 <_printf_i+0xc8>
 8015f62:	0668      	lsls	r0, r5, #25
 8015f64:	d5fb      	bpl.n	8015f5e <_printf_i+0xbe>
 8015f66:	881b      	ldrh	r3, [r3, #0]
 8015f68:	4854      	ldr	r0, [pc, #336]	; (80160bc <_printf_i+0x21c>)
 8015f6a:	296f      	cmp	r1, #111	; 0x6f
 8015f6c:	bf14      	ite	ne
 8015f6e:	220a      	movne	r2, #10
 8015f70:	2208      	moveq	r2, #8
 8015f72:	2100      	movs	r1, #0
 8015f74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f78:	6865      	ldr	r5, [r4, #4]
 8015f7a:	60a5      	str	r5, [r4, #8]
 8015f7c:	2d00      	cmp	r5, #0
 8015f7e:	f2c0 8095 	blt.w	80160ac <_printf_i+0x20c>
 8015f82:	6821      	ldr	r1, [r4, #0]
 8015f84:	f021 0104 	bic.w	r1, r1, #4
 8015f88:	6021      	str	r1, [r4, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d13d      	bne.n	801600a <_printf_i+0x16a>
 8015f8e:	2d00      	cmp	r5, #0
 8015f90:	f040 808e 	bne.w	80160b0 <_printf_i+0x210>
 8015f94:	4665      	mov	r5, ip
 8015f96:	2a08      	cmp	r2, #8
 8015f98:	d10b      	bne.n	8015fb2 <_printf_i+0x112>
 8015f9a:	6823      	ldr	r3, [r4, #0]
 8015f9c:	07db      	lsls	r3, r3, #31
 8015f9e:	d508      	bpl.n	8015fb2 <_printf_i+0x112>
 8015fa0:	6923      	ldr	r3, [r4, #16]
 8015fa2:	6862      	ldr	r2, [r4, #4]
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	bfde      	ittt	le
 8015fa8:	2330      	movle	r3, #48	; 0x30
 8015faa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015fae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015fb2:	ebac 0305 	sub.w	r3, ip, r5
 8015fb6:	6123      	str	r3, [r4, #16]
 8015fb8:	f8cd 8000 	str.w	r8, [sp]
 8015fbc:	463b      	mov	r3, r7
 8015fbe:	aa03      	add	r2, sp, #12
 8015fc0:	4621      	mov	r1, r4
 8015fc2:	4630      	mov	r0, r6
 8015fc4:	f7ff fef6 	bl	8015db4 <_printf_common>
 8015fc8:	3001      	adds	r0, #1
 8015fca:	d14d      	bne.n	8016068 <_printf_i+0x1c8>
 8015fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015fd0:	b005      	add	sp, #20
 8015fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd6:	4839      	ldr	r0, [pc, #228]	; (80160bc <_printf_i+0x21c>)
 8015fd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015fdc:	6813      	ldr	r3, [r2, #0]
 8015fde:	6821      	ldr	r1, [r4, #0]
 8015fe0:	1d1d      	adds	r5, r3, #4
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	6015      	str	r5, [r2, #0]
 8015fe6:	060a      	lsls	r2, r1, #24
 8015fe8:	d50b      	bpl.n	8016002 <_printf_i+0x162>
 8015fea:	07ca      	lsls	r2, r1, #31
 8015fec:	bf44      	itt	mi
 8015fee:	f041 0120 	orrmi.w	r1, r1, #32
 8015ff2:	6021      	strmi	r1, [r4, #0]
 8015ff4:	b91b      	cbnz	r3, 8015ffe <_printf_i+0x15e>
 8015ff6:	6822      	ldr	r2, [r4, #0]
 8015ff8:	f022 0220 	bic.w	r2, r2, #32
 8015ffc:	6022      	str	r2, [r4, #0]
 8015ffe:	2210      	movs	r2, #16
 8016000:	e7b7      	b.n	8015f72 <_printf_i+0xd2>
 8016002:	064d      	lsls	r5, r1, #25
 8016004:	bf48      	it	mi
 8016006:	b29b      	uxthmi	r3, r3
 8016008:	e7ef      	b.n	8015fea <_printf_i+0x14a>
 801600a:	4665      	mov	r5, ip
 801600c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016010:	fb02 3311 	mls	r3, r2, r1, r3
 8016014:	5cc3      	ldrb	r3, [r0, r3]
 8016016:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801601a:	460b      	mov	r3, r1
 801601c:	2900      	cmp	r1, #0
 801601e:	d1f5      	bne.n	801600c <_printf_i+0x16c>
 8016020:	e7b9      	b.n	8015f96 <_printf_i+0xf6>
 8016022:	6813      	ldr	r3, [r2, #0]
 8016024:	6825      	ldr	r5, [r4, #0]
 8016026:	6961      	ldr	r1, [r4, #20]
 8016028:	1d18      	adds	r0, r3, #4
 801602a:	6010      	str	r0, [r2, #0]
 801602c:	0628      	lsls	r0, r5, #24
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	d501      	bpl.n	8016036 <_printf_i+0x196>
 8016032:	6019      	str	r1, [r3, #0]
 8016034:	e002      	b.n	801603c <_printf_i+0x19c>
 8016036:	066a      	lsls	r2, r5, #25
 8016038:	d5fb      	bpl.n	8016032 <_printf_i+0x192>
 801603a:	8019      	strh	r1, [r3, #0]
 801603c:	2300      	movs	r3, #0
 801603e:	6123      	str	r3, [r4, #16]
 8016040:	4665      	mov	r5, ip
 8016042:	e7b9      	b.n	8015fb8 <_printf_i+0x118>
 8016044:	6813      	ldr	r3, [r2, #0]
 8016046:	1d19      	adds	r1, r3, #4
 8016048:	6011      	str	r1, [r2, #0]
 801604a:	681d      	ldr	r5, [r3, #0]
 801604c:	6862      	ldr	r2, [r4, #4]
 801604e:	2100      	movs	r1, #0
 8016050:	4628      	mov	r0, r5
 8016052:	f7ea f8cd 	bl	80001f0 <memchr>
 8016056:	b108      	cbz	r0, 801605c <_printf_i+0x1bc>
 8016058:	1b40      	subs	r0, r0, r5
 801605a:	6060      	str	r0, [r4, #4]
 801605c:	6863      	ldr	r3, [r4, #4]
 801605e:	6123      	str	r3, [r4, #16]
 8016060:	2300      	movs	r3, #0
 8016062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016066:	e7a7      	b.n	8015fb8 <_printf_i+0x118>
 8016068:	6923      	ldr	r3, [r4, #16]
 801606a:	462a      	mov	r2, r5
 801606c:	4639      	mov	r1, r7
 801606e:	4630      	mov	r0, r6
 8016070:	47c0      	blx	r8
 8016072:	3001      	adds	r0, #1
 8016074:	d0aa      	beq.n	8015fcc <_printf_i+0x12c>
 8016076:	6823      	ldr	r3, [r4, #0]
 8016078:	079b      	lsls	r3, r3, #30
 801607a:	d413      	bmi.n	80160a4 <_printf_i+0x204>
 801607c:	68e0      	ldr	r0, [r4, #12]
 801607e:	9b03      	ldr	r3, [sp, #12]
 8016080:	4298      	cmp	r0, r3
 8016082:	bfb8      	it	lt
 8016084:	4618      	movlt	r0, r3
 8016086:	e7a3      	b.n	8015fd0 <_printf_i+0x130>
 8016088:	2301      	movs	r3, #1
 801608a:	464a      	mov	r2, r9
 801608c:	4639      	mov	r1, r7
 801608e:	4630      	mov	r0, r6
 8016090:	47c0      	blx	r8
 8016092:	3001      	adds	r0, #1
 8016094:	d09a      	beq.n	8015fcc <_printf_i+0x12c>
 8016096:	3501      	adds	r5, #1
 8016098:	68e3      	ldr	r3, [r4, #12]
 801609a:	9a03      	ldr	r2, [sp, #12]
 801609c:	1a9b      	subs	r3, r3, r2
 801609e:	42ab      	cmp	r3, r5
 80160a0:	dcf2      	bgt.n	8016088 <_printf_i+0x1e8>
 80160a2:	e7eb      	b.n	801607c <_printf_i+0x1dc>
 80160a4:	2500      	movs	r5, #0
 80160a6:	f104 0919 	add.w	r9, r4, #25
 80160aa:	e7f5      	b.n	8016098 <_printf_i+0x1f8>
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d1ac      	bne.n	801600a <_printf_i+0x16a>
 80160b0:	7803      	ldrb	r3, [r0, #0]
 80160b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80160b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160ba:	e76c      	b.n	8015f96 <_printf_i+0xf6>
 80160bc:	08019aed 	.word	0x08019aed
 80160c0:	08019afe 	.word	0x08019afe

080160c4 <_read_r>:
 80160c4:	b538      	push	{r3, r4, r5, lr}
 80160c6:	4c07      	ldr	r4, [pc, #28]	; (80160e4 <_read_r+0x20>)
 80160c8:	4605      	mov	r5, r0
 80160ca:	4608      	mov	r0, r1
 80160cc:	4611      	mov	r1, r2
 80160ce:	2200      	movs	r2, #0
 80160d0:	6022      	str	r2, [r4, #0]
 80160d2:	461a      	mov	r2, r3
 80160d4:	f7ea fca0 	bl	8000a18 <_read>
 80160d8:	1c43      	adds	r3, r0, #1
 80160da:	d102      	bne.n	80160e2 <_read_r+0x1e>
 80160dc:	6823      	ldr	r3, [r4, #0]
 80160de:	b103      	cbz	r3, 80160e2 <_read_r+0x1e>
 80160e0:	602b      	str	r3, [r5, #0]
 80160e2:	bd38      	pop	{r3, r4, r5, pc}
 80160e4:	2000b670 	.word	0x2000b670

080160e8 <__swbuf_r>:
 80160e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160ea:	460e      	mov	r6, r1
 80160ec:	4614      	mov	r4, r2
 80160ee:	4605      	mov	r5, r0
 80160f0:	b118      	cbz	r0, 80160fa <__swbuf_r+0x12>
 80160f2:	6983      	ldr	r3, [r0, #24]
 80160f4:	b90b      	cbnz	r3, 80160fa <__swbuf_r+0x12>
 80160f6:	f7ff f999 	bl	801542c <__sinit>
 80160fa:	4b21      	ldr	r3, [pc, #132]	; (8016180 <__swbuf_r+0x98>)
 80160fc:	429c      	cmp	r4, r3
 80160fe:	d12a      	bne.n	8016156 <__swbuf_r+0x6e>
 8016100:	686c      	ldr	r4, [r5, #4]
 8016102:	69a3      	ldr	r3, [r4, #24]
 8016104:	60a3      	str	r3, [r4, #8]
 8016106:	89a3      	ldrh	r3, [r4, #12]
 8016108:	071a      	lsls	r2, r3, #28
 801610a:	d52e      	bpl.n	801616a <__swbuf_r+0x82>
 801610c:	6923      	ldr	r3, [r4, #16]
 801610e:	b363      	cbz	r3, 801616a <__swbuf_r+0x82>
 8016110:	6923      	ldr	r3, [r4, #16]
 8016112:	6820      	ldr	r0, [r4, #0]
 8016114:	1ac0      	subs	r0, r0, r3
 8016116:	6963      	ldr	r3, [r4, #20]
 8016118:	b2f6      	uxtb	r6, r6
 801611a:	4283      	cmp	r3, r0
 801611c:	4637      	mov	r7, r6
 801611e:	dc04      	bgt.n	801612a <__swbuf_r+0x42>
 8016120:	4621      	mov	r1, r4
 8016122:	4628      	mov	r0, r5
 8016124:	f7ff fc72 	bl	8015a0c <_fflush_r>
 8016128:	bb28      	cbnz	r0, 8016176 <__swbuf_r+0x8e>
 801612a:	68a3      	ldr	r3, [r4, #8]
 801612c:	3b01      	subs	r3, #1
 801612e:	60a3      	str	r3, [r4, #8]
 8016130:	6823      	ldr	r3, [r4, #0]
 8016132:	1c5a      	adds	r2, r3, #1
 8016134:	6022      	str	r2, [r4, #0]
 8016136:	701e      	strb	r6, [r3, #0]
 8016138:	6963      	ldr	r3, [r4, #20]
 801613a:	3001      	adds	r0, #1
 801613c:	4283      	cmp	r3, r0
 801613e:	d004      	beq.n	801614a <__swbuf_r+0x62>
 8016140:	89a3      	ldrh	r3, [r4, #12]
 8016142:	07db      	lsls	r3, r3, #31
 8016144:	d519      	bpl.n	801617a <__swbuf_r+0x92>
 8016146:	2e0a      	cmp	r6, #10
 8016148:	d117      	bne.n	801617a <__swbuf_r+0x92>
 801614a:	4621      	mov	r1, r4
 801614c:	4628      	mov	r0, r5
 801614e:	f7ff fc5d 	bl	8015a0c <_fflush_r>
 8016152:	b190      	cbz	r0, 801617a <__swbuf_r+0x92>
 8016154:	e00f      	b.n	8016176 <__swbuf_r+0x8e>
 8016156:	4b0b      	ldr	r3, [pc, #44]	; (8016184 <__swbuf_r+0x9c>)
 8016158:	429c      	cmp	r4, r3
 801615a:	d101      	bne.n	8016160 <__swbuf_r+0x78>
 801615c:	68ac      	ldr	r4, [r5, #8]
 801615e:	e7d0      	b.n	8016102 <__swbuf_r+0x1a>
 8016160:	4b09      	ldr	r3, [pc, #36]	; (8016188 <__swbuf_r+0xa0>)
 8016162:	429c      	cmp	r4, r3
 8016164:	bf08      	it	eq
 8016166:	68ec      	ldreq	r4, [r5, #12]
 8016168:	e7cb      	b.n	8016102 <__swbuf_r+0x1a>
 801616a:	4621      	mov	r1, r4
 801616c:	4628      	mov	r0, r5
 801616e:	f000 f80d 	bl	801618c <__swsetup_r>
 8016172:	2800      	cmp	r0, #0
 8016174:	d0cc      	beq.n	8016110 <__swbuf_r+0x28>
 8016176:	f04f 37ff 	mov.w	r7, #4294967295
 801617a:	4638      	mov	r0, r7
 801617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801617e:	bf00      	nop
 8016180:	08019a98 	.word	0x08019a98
 8016184:	08019ab8 	.word	0x08019ab8
 8016188:	08019a78 	.word	0x08019a78

0801618c <__swsetup_r>:
 801618c:	4b32      	ldr	r3, [pc, #200]	; (8016258 <__swsetup_r+0xcc>)
 801618e:	b570      	push	{r4, r5, r6, lr}
 8016190:	681d      	ldr	r5, [r3, #0]
 8016192:	4606      	mov	r6, r0
 8016194:	460c      	mov	r4, r1
 8016196:	b125      	cbz	r5, 80161a2 <__swsetup_r+0x16>
 8016198:	69ab      	ldr	r3, [r5, #24]
 801619a:	b913      	cbnz	r3, 80161a2 <__swsetup_r+0x16>
 801619c:	4628      	mov	r0, r5
 801619e:	f7ff f945 	bl	801542c <__sinit>
 80161a2:	4b2e      	ldr	r3, [pc, #184]	; (801625c <__swsetup_r+0xd0>)
 80161a4:	429c      	cmp	r4, r3
 80161a6:	d10f      	bne.n	80161c8 <__swsetup_r+0x3c>
 80161a8:	686c      	ldr	r4, [r5, #4]
 80161aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161ae:	b29a      	uxth	r2, r3
 80161b0:	0715      	lsls	r5, r2, #28
 80161b2:	d42c      	bmi.n	801620e <__swsetup_r+0x82>
 80161b4:	06d0      	lsls	r0, r2, #27
 80161b6:	d411      	bmi.n	80161dc <__swsetup_r+0x50>
 80161b8:	2209      	movs	r2, #9
 80161ba:	6032      	str	r2, [r6, #0]
 80161bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161c0:	81a3      	strh	r3, [r4, #12]
 80161c2:	f04f 30ff 	mov.w	r0, #4294967295
 80161c6:	e03e      	b.n	8016246 <__swsetup_r+0xba>
 80161c8:	4b25      	ldr	r3, [pc, #148]	; (8016260 <__swsetup_r+0xd4>)
 80161ca:	429c      	cmp	r4, r3
 80161cc:	d101      	bne.n	80161d2 <__swsetup_r+0x46>
 80161ce:	68ac      	ldr	r4, [r5, #8]
 80161d0:	e7eb      	b.n	80161aa <__swsetup_r+0x1e>
 80161d2:	4b24      	ldr	r3, [pc, #144]	; (8016264 <__swsetup_r+0xd8>)
 80161d4:	429c      	cmp	r4, r3
 80161d6:	bf08      	it	eq
 80161d8:	68ec      	ldreq	r4, [r5, #12]
 80161da:	e7e6      	b.n	80161aa <__swsetup_r+0x1e>
 80161dc:	0751      	lsls	r1, r2, #29
 80161de:	d512      	bpl.n	8016206 <__swsetup_r+0x7a>
 80161e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161e2:	b141      	cbz	r1, 80161f6 <__swsetup_r+0x6a>
 80161e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161e8:	4299      	cmp	r1, r3
 80161ea:	d002      	beq.n	80161f2 <__swsetup_r+0x66>
 80161ec:	4630      	mov	r0, r6
 80161ee:	f7ff fc53 	bl	8015a98 <_free_r>
 80161f2:	2300      	movs	r3, #0
 80161f4:	6363      	str	r3, [r4, #52]	; 0x34
 80161f6:	89a3      	ldrh	r3, [r4, #12]
 80161f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80161fc:	81a3      	strh	r3, [r4, #12]
 80161fe:	2300      	movs	r3, #0
 8016200:	6063      	str	r3, [r4, #4]
 8016202:	6923      	ldr	r3, [r4, #16]
 8016204:	6023      	str	r3, [r4, #0]
 8016206:	89a3      	ldrh	r3, [r4, #12]
 8016208:	f043 0308 	orr.w	r3, r3, #8
 801620c:	81a3      	strh	r3, [r4, #12]
 801620e:	6923      	ldr	r3, [r4, #16]
 8016210:	b94b      	cbnz	r3, 8016226 <__swsetup_r+0x9a>
 8016212:	89a3      	ldrh	r3, [r4, #12]
 8016214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801621c:	d003      	beq.n	8016226 <__swsetup_r+0x9a>
 801621e:	4621      	mov	r1, r4
 8016220:	4630      	mov	r0, r6
 8016222:	f000 f845 	bl	80162b0 <__smakebuf_r>
 8016226:	89a2      	ldrh	r2, [r4, #12]
 8016228:	f012 0301 	ands.w	r3, r2, #1
 801622c:	d00c      	beq.n	8016248 <__swsetup_r+0xbc>
 801622e:	2300      	movs	r3, #0
 8016230:	60a3      	str	r3, [r4, #8]
 8016232:	6963      	ldr	r3, [r4, #20]
 8016234:	425b      	negs	r3, r3
 8016236:	61a3      	str	r3, [r4, #24]
 8016238:	6923      	ldr	r3, [r4, #16]
 801623a:	b953      	cbnz	r3, 8016252 <__swsetup_r+0xc6>
 801623c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016240:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016244:	d1ba      	bne.n	80161bc <__swsetup_r+0x30>
 8016246:	bd70      	pop	{r4, r5, r6, pc}
 8016248:	0792      	lsls	r2, r2, #30
 801624a:	bf58      	it	pl
 801624c:	6963      	ldrpl	r3, [r4, #20]
 801624e:	60a3      	str	r3, [r4, #8]
 8016250:	e7f2      	b.n	8016238 <__swsetup_r+0xac>
 8016252:	2000      	movs	r0, #0
 8016254:	e7f7      	b.n	8016246 <__swsetup_r+0xba>
 8016256:	bf00      	nop
 8016258:	20000020 	.word	0x20000020
 801625c:	08019a98 	.word	0x08019a98
 8016260:	08019ab8 	.word	0x08019ab8
 8016264:	08019a78 	.word	0x08019a78

08016268 <__swhatbuf_r>:
 8016268:	b570      	push	{r4, r5, r6, lr}
 801626a:	460e      	mov	r6, r1
 801626c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016270:	2900      	cmp	r1, #0
 8016272:	b096      	sub	sp, #88	; 0x58
 8016274:	4614      	mov	r4, r2
 8016276:	461d      	mov	r5, r3
 8016278:	da07      	bge.n	801628a <__swhatbuf_r+0x22>
 801627a:	2300      	movs	r3, #0
 801627c:	602b      	str	r3, [r5, #0]
 801627e:	89b3      	ldrh	r3, [r6, #12]
 8016280:	061a      	lsls	r2, r3, #24
 8016282:	d410      	bmi.n	80162a6 <__swhatbuf_r+0x3e>
 8016284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016288:	e00e      	b.n	80162a8 <__swhatbuf_r+0x40>
 801628a:	466a      	mov	r2, sp
 801628c:	f000 f850 	bl	8016330 <_fstat_r>
 8016290:	2800      	cmp	r0, #0
 8016292:	dbf2      	blt.n	801627a <__swhatbuf_r+0x12>
 8016294:	9a01      	ldr	r2, [sp, #4]
 8016296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801629a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801629e:	425a      	negs	r2, r3
 80162a0:	415a      	adcs	r2, r3
 80162a2:	602a      	str	r2, [r5, #0]
 80162a4:	e7ee      	b.n	8016284 <__swhatbuf_r+0x1c>
 80162a6:	2340      	movs	r3, #64	; 0x40
 80162a8:	2000      	movs	r0, #0
 80162aa:	6023      	str	r3, [r4, #0]
 80162ac:	b016      	add	sp, #88	; 0x58
 80162ae:	bd70      	pop	{r4, r5, r6, pc}

080162b0 <__smakebuf_r>:
 80162b0:	898b      	ldrh	r3, [r1, #12]
 80162b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162b4:	079d      	lsls	r5, r3, #30
 80162b6:	4606      	mov	r6, r0
 80162b8:	460c      	mov	r4, r1
 80162ba:	d507      	bpl.n	80162cc <__smakebuf_r+0x1c>
 80162bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80162c0:	6023      	str	r3, [r4, #0]
 80162c2:	6123      	str	r3, [r4, #16]
 80162c4:	2301      	movs	r3, #1
 80162c6:	6163      	str	r3, [r4, #20]
 80162c8:	b002      	add	sp, #8
 80162ca:	bd70      	pop	{r4, r5, r6, pc}
 80162cc:	ab01      	add	r3, sp, #4
 80162ce:	466a      	mov	r2, sp
 80162d0:	f7ff ffca 	bl	8016268 <__swhatbuf_r>
 80162d4:	9900      	ldr	r1, [sp, #0]
 80162d6:	4605      	mov	r5, r0
 80162d8:	4630      	mov	r0, r6
 80162da:	f7ff f977 	bl	80155cc <_malloc_r>
 80162de:	b948      	cbnz	r0, 80162f4 <__smakebuf_r+0x44>
 80162e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162e4:	059a      	lsls	r2, r3, #22
 80162e6:	d4ef      	bmi.n	80162c8 <__smakebuf_r+0x18>
 80162e8:	f023 0303 	bic.w	r3, r3, #3
 80162ec:	f043 0302 	orr.w	r3, r3, #2
 80162f0:	81a3      	strh	r3, [r4, #12]
 80162f2:	e7e3      	b.n	80162bc <__smakebuf_r+0xc>
 80162f4:	4b0d      	ldr	r3, [pc, #52]	; (801632c <__smakebuf_r+0x7c>)
 80162f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80162f8:	89a3      	ldrh	r3, [r4, #12]
 80162fa:	6020      	str	r0, [r4, #0]
 80162fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016300:	81a3      	strh	r3, [r4, #12]
 8016302:	9b00      	ldr	r3, [sp, #0]
 8016304:	6163      	str	r3, [r4, #20]
 8016306:	9b01      	ldr	r3, [sp, #4]
 8016308:	6120      	str	r0, [r4, #16]
 801630a:	b15b      	cbz	r3, 8016324 <__smakebuf_r+0x74>
 801630c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016310:	4630      	mov	r0, r6
 8016312:	f000 f81f 	bl	8016354 <_isatty_r>
 8016316:	b128      	cbz	r0, 8016324 <__smakebuf_r+0x74>
 8016318:	89a3      	ldrh	r3, [r4, #12]
 801631a:	f023 0303 	bic.w	r3, r3, #3
 801631e:	f043 0301 	orr.w	r3, r3, #1
 8016322:	81a3      	strh	r3, [r4, #12]
 8016324:	89a3      	ldrh	r3, [r4, #12]
 8016326:	431d      	orrs	r5, r3
 8016328:	81a5      	strh	r5, [r4, #12]
 801632a:	e7cd      	b.n	80162c8 <__smakebuf_r+0x18>
 801632c:	080153f5 	.word	0x080153f5

08016330 <_fstat_r>:
 8016330:	b538      	push	{r3, r4, r5, lr}
 8016332:	4c07      	ldr	r4, [pc, #28]	; (8016350 <_fstat_r+0x20>)
 8016334:	2300      	movs	r3, #0
 8016336:	4605      	mov	r5, r0
 8016338:	4608      	mov	r0, r1
 801633a:	4611      	mov	r1, r2
 801633c:	6023      	str	r3, [r4, #0]
 801633e:	f7ea fbb0 	bl	8000aa2 <_fstat>
 8016342:	1c43      	adds	r3, r0, #1
 8016344:	d102      	bne.n	801634c <_fstat_r+0x1c>
 8016346:	6823      	ldr	r3, [r4, #0]
 8016348:	b103      	cbz	r3, 801634c <_fstat_r+0x1c>
 801634a:	602b      	str	r3, [r5, #0]
 801634c:	bd38      	pop	{r3, r4, r5, pc}
 801634e:	bf00      	nop
 8016350:	2000b670 	.word	0x2000b670

08016354 <_isatty_r>:
 8016354:	b538      	push	{r3, r4, r5, lr}
 8016356:	4c06      	ldr	r4, [pc, #24]	; (8016370 <_isatty_r+0x1c>)
 8016358:	2300      	movs	r3, #0
 801635a:	4605      	mov	r5, r0
 801635c:	4608      	mov	r0, r1
 801635e:	6023      	str	r3, [r4, #0]
 8016360:	f7ea fbaf 	bl	8000ac2 <_isatty>
 8016364:	1c43      	adds	r3, r0, #1
 8016366:	d102      	bne.n	801636e <_isatty_r+0x1a>
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	b103      	cbz	r3, 801636e <_isatty_r+0x1a>
 801636c:	602b      	str	r3, [r5, #0]
 801636e:	bd38      	pop	{r3, r4, r5, pc}
 8016370:	2000b670 	.word	0x2000b670

08016374 <_init>:
 8016374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016376:	bf00      	nop
 8016378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801637a:	bc08      	pop	{r3}
 801637c:	469e      	mov	lr, r3
 801637e:	4770      	bx	lr

08016380 <_fini>:
 8016380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016382:	bf00      	nop
 8016384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016386:	bc08      	pop	{r3}
 8016388:	469e      	mov	lr, r3
 801638a:	4770      	bx	lr
