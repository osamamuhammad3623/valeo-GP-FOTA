
test_mcu_security.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000226a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b50  08022858  08022858  00032858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c3a8  0802c3a8  00040278  2**0
                  CONTENTS
  4 .ARM          00000008  0802c3a8  0802c3a8  0003c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c3b0  0802c3b0  00040278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c3b0  0802c3b0  0003c3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c3b4  0802c3b4  0003c3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0802c3b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040278  2**0
                  CONTENTS
 10 .bss          0000013c  20000278  20000278  00040278  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  00040278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007896f  00000000  00000000  000402a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000639d  00000000  00000000  000b8c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005898  00000000  00000000  000befb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005b30  00000000  00000000  000c4850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034259  00000000  00000000  000ca380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00056b67  00000000  00000000  000fe5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112714  00000000  00000000  00155140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00267854  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00019a44  00000000  00000000  002678a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000278 	.word	0x20000278
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08022840 	.word	0x08022840

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000027c 	.word	0x2000027c
 80001ec:	08022840 	.word	0x08022840

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <secure_boot_verify>:
/******************************************************************************/
/*************************** Functions Definitions ****************************/
/******************************************************************************/
/******************************************************************************/

uint8_t secure_boot_verify(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	f5ad 5d11 	sub.w	sp, sp, #9280	; 0x2440
 80005ca:	af02      	add	r7, sp, #8
	int8_t ret=0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80005d2:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 80005d6:	7013      	strb	r3, [r2, #0]

	/************** fetch needed data from memory****************/
	uint8_t rootIndex = *((char *)META_DATA_ADDRESS + ROOT_INDEX__METADATA_OFFSET)-'0';
 80005d8:	4bb3      	ldr	r3, [pc, #716]	; (80008a8 <secure_boot_verify+0x2e4>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3b30      	subs	r3, #48	; 0x30
 80005de:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80005e2:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 80005e6:	7013      	strb	r3, [r2, #0]
	uint32_t appSize = atoi((char *)META_DATA_ADDRESS+APP_SIZE__METADATA_OFFSET);
 80005e8:	48b0      	ldr	r0, [pc, #704]	; (80008ac <secure_boot_verify+0x2e8>)
 80005ea:	f020 fe2d 	bl	8021248 <atoi>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80005f4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80005f8:	6013      	str	r3, [r2, #0]

	const uint8_t* ptr_sbCert = (uint8_t*)(SB_CERT_ADDRESS);
 80005fa:	4bad      	ldr	r3, [pc, #692]	; (80008b0 <secure_boot_verify+0x2ec>)
 80005fc:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000600:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000604:	6013      	str	r3, [r2, #0]
	const uint8_t* ptr_rootCert = (uint8_t*)(ROOT_CERT_ADDRESS);
 8000606:	4bab      	ldr	r3, [pc, #684]	; (80008b4 <secure_boot_verify+0x2f0>)
 8000608:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 800060c:	f102 0220 	add.w	r2, r2, #32
 8000610:	6013      	str	r3, [r2, #0]

	uint32_t SB_cert_size = atoi((uint8_t *)CERTIFICATES_METADATA_ADDRESS + SB_CERT_SIZE_C_METADATA_OFFSET);
 8000612:	48a9      	ldr	r0, [pc, #676]	; (80008b8 <secure_boot_verify+0x2f4>)
 8000614:	f020 fe18 	bl	8021248 <atoi>
 8000618:	4603      	mov	r3, r0
 800061a:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 800061e:	f102 021c 	add.w	r2, r2, #28
 8000622:	6013      	str	r3, [r2, #0]
	uint32_t root_cert_size = atoi((uint8_t *)CERTIFICATES_METADATA_ADDRESS +ROOT_CERT_SIZE_C_METADATA_OFFSET);
 8000624:	48a5      	ldr	r0, [pc, #660]	; (80008bc <secure_boot_verify+0x2f8>)
 8000626:	f020 fe0f 	bl	8021248 <atoi>
 800062a:	4603      	mov	r3, r0
 800062c:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000630:	f102 0218 	add.w	r2, r2, #24
 8000634:	6013      	str	r3, [r2, #0]

	/*************** Root certificates Revocation*********************/
	uint8_t root_1_revoked = *((uint8_t *)ROOT_1_REVOCATION_ADDRESS);
 8000636:	4ba2      	ldr	r3, [pc, #648]	; (80008c0 <secure_boot_verify+0x2fc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 800063e:	f102 0217 	add.w	r2, r2, #23
 8000642:	7013      	strb	r3, [r2, #0]
	uint8_t root_2_revoked = *((uint8_t *)ROOT_2_REVOCATION_ADDRESS);
 8000644:	4b9f      	ldr	r3, [pc, #636]	; (80008c4 <secure_boot_verify+0x300>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 800064c:	f102 0216 	add.w	r2, r2, #22
 8000650:	7013      	strb	r3, [r2, #0]
	//still need Revisited
	if( (rootIndex != 1) && (rootIndex != 2) ){
 8000652:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000656:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d008      	beq.n	8000672 <secure_boot_verify+0xae>
 8000660:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000664:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d001      	beq.n	8000672 <secure_boot_verify+0xae>
			  return FAILED;
 800066e:	2301      	movs	r3, #1
 8000670:	e278      	b.n	8000b64 <secure_boot_verify+0x5a0>
    }else if(((rootIndex == 1) && (root_1_revoked == 0x00)) || ((rootIndex == 2) && (root_2_revoked == 0x00))){
 8000672:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000676:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d106      	bne.n	800068e <secure_boot_verify+0xca>
 8000680:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000684:	f103 0317 	add.w	r3, r3, #23
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00d      	beq.n	80006aa <secure_boot_verify+0xe6>
 800068e:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000692:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d108      	bne.n	80006ae <secure_boot_verify+0xea>
 800069c:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80006a0:	f103 0316 	add.w	r3, r3, #22
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <secure_boot_verify+0xea>
    	return FAILED;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e25a      	b.n	8000b64 <secure_boot_verify+0x5a0>
    }


	/*************** certificates verifications *********************/
	ret = Certificates_Verify(ptr_rootCert, ptr_sbCert, root_cert_size, SB_cert_size);
 80006ae:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80006b2:	f103 031c 	add.w	r3, r3, #28
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80006bc:	f102 0218 	add.w	r2, r2, #24
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	f507 5110 	add.w	r1, r7, #9216	; 0x2400
 80006c6:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80006ca:	6809      	ldr	r1, [r1, #0]
 80006cc:	f507 5010 	add.w	r0, r7, #9216	; 0x2400
 80006d0:	f100 0020 	add.w	r0, r0, #32
 80006d4:	6800      	ldr	r0, [r0, #0]
 80006d6:	f000 fa79 	bl	8000bcc <Certificates_Verify>
 80006da:	4603      	mov	r3, r0
 80006dc:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80006e0:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 80006e4:	7013      	strb	r3, [r2, #0]
	if (ret != SUCCEEDED){
 80006e6:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80006ea:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80006ee:	f993 3000 	ldrsb.w	r3, [r3]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <secure_boot_verify+0x136>
		return FAILED;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e234      	b.n	8000b64 <secure_boot_verify+0x5a0>
	/*****************************************************/
	/************* Check Anchor  *************************/
	/*****************************************************/

	RsaKey ROOT_pubKey ;
	ret = public_key_Extraction(ptr_rootCert,root_cert_size,&ROOT_pubKey);
 80006fa:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80006fe:	f103 0318 	add.w	r3, r3, #24
 8000702:	3b18      	subs	r3, #24
 8000704:	461a      	mov	r2, r3
 8000706:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800070a:	f103 0318 	add.w	r3, r3, #24
 800070e:	6819      	ldr	r1, [r3, #0]
 8000710:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000714:	f103 0320 	add.w	r3, r3, #32
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f000 fabd 	bl	8000c98 <public_key_Extraction>
 800071e:	4603      	mov	r3, r0
 8000720:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000724:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8000728:	7013      	strb	r3, [r2, #0]
	if (ret != SUCCEEDED){
 800072a:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800072e:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000732:	f993 3000 	ldrsb.w	r3, [r3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <secure_boot_verify+0x17a>
		return FAILED;
 800073a:	2301      	movs	r3, #1
 800073c:	e212      	b.n	8000b64 <secure_boot_verify+0x5a0>
	}


	//based on root index
	if(rootIndex == 1){
 800073e:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000742:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d138      	bne.n	80007be <secure_boot_verify+0x1fa>
		/*********** compare n value *************/
		ret = compare_keys((uint32_t *)expected_n_root_chain_1_public_key,(uint32_t *)ROOT_pubKey.n.dp,64);
 800074c:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000750:	f103 0318 	add.w	r3, r3, #24
 8000754:	3b18      	subs	r3, #24
 8000756:	330c      	adds	r3, #12
 8000758:	2240      	movs	r2, #64	; 0x40
 800075a:	4619      	mov	r1, r3
 800075c:	485a      	ldr	r0, [pc, #360]	; (80008c8 <secure_boot_verify+0x304>)
 800075e:	f000 fb09 	bl	8000d74 <compare_keys>
 8000762:	4603      	mov	r3, r0
 8000764:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000768:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 800076c:	7013      	strb	r3, [r2, #0]
		if (ret != SUCCEEDED){
 800076e:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000772:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000776:	f993 3000 	ldrsb.w	r3, [r3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <secure_boot_verify+0x1be>
			return FAILED;
 800077e:	2301      	movs	r3, #1
 8000780:	e1f0      	b.n	8000b64 <secure_boot_verify+0x5a0>
		}
		/*********** compare e value   ***********/
		ret = !((uint32_t)(ROOT_pubKey.e.dp[0]) == expected_e_root_chain_1_public_key);
 8000782:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8000786:	f103 0318 	add.w	r3, r3, #24
 800078a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800078e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8000792:	4b4e      	ldr	r3, [pc, #312]	; (80008cc <secure_boot_verify+0x308>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	429a      	cmp	r2, r3
 8000798:	bf14      	ite	ne
 800079a:	2301      	movne	r3, #1
 800079c:	2300      	moveq	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80007a4:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 80007a8:	7013      	strb	r3, [r2, #0]
		if (ret != SUCCEEDED){
 80007aa:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80007ae:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80007b2:	f993 3000 	ldrsb.w	r3, [r3]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d043      	beq.n	8000842 <secure_boot_verify+0x27e>
			return FAILED;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e1d2      	b.n	8000b64 <secure_boot_verify+0x5a0>
		}
	}else if(rootIndex == 2){
 80007be:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80007c2:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d138      	bne.n	800083e <secure_boot_verify+0x27a>
		/*********** compare n value **************/
		ret = compare_keys((uint32_t *)expected_n_root_chain_2_public_key,(uint32_t *)ROOT_pubKey.n.dp,64);
 80007cc:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80007d0:	f103 0318 	add.w	r3, r3, #24
 80007d4:	3b18      	subs	r3, #24
 80007d6:	330c      	adds	r3, #12
 80007d8:	2240      	movs	r2, #64	; 0x40
 80007da:	4619      	mov	r1, r3
 80007dc:	483c      	ldr	r0, [pc, #240]	; (80008d0 <secure_boot_verify+0x30c>)
 80007de:	f000 fac9 	bl	8000d74 <compare_keys>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80007e8:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 80007ec:	7013      	strb	r3, [r2, #0]
		if (ret != SUCCEEDED){
 80007ee:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80007f2:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80007f6:	f993 3000 	ldrsb.w	r3, [r3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <secure_boot_verify+0x23e>
			return FAILED;
 80007fe:	2301      	movs	r3, #1
 8000800:	e1b0      	b.n	8000b64 <secure_boot_verify+0x5a0>
		}
		/*********** compare e value   ***********/
		ret = !((uint32_t)(ROOT_pubKey.e.dp[0]) == expected_e_root_chain_2_public_key);
 8000802:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8000806:	f103 0318 	add.w	r3, r3, #24
 800080a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800080e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8000812:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <secure_boot_verify+0x310>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	429a      	cmp	r2, r3
 8000818:	bf14      	ite	ne
 800081a:	2301      	movne	r3, #1
 800081c:	2300      	moveq	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000824:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8000828:	7013      	strb	r3, [r2, #0]
		if (ret != SUCCEEDED){
 800082a:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800082e:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000832:	f993 3000 	ldrsb.w	r3, [r3]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <secure_boot_verify+0x27e>
			return FAILED;
 800083a:	2301      	movs	r3, #1
 800083c:	e192      	b.n	8000b64 <secure_boot_verify+0x5a0>
		}
	}else{
		return FAILED;
 800083e:	2301      	movs	r3, #1
 8000840:	e190      	b.n	8000b64 <secure_boot_verify+0x5a0>
	}


	/************** secure boot public key Extraction ****************/
	RsaKey SB_pubKey ;
	ret = public_key_Extraction(ptr_sbCert,SB_cert_size,&SB_pubKey);
 8000842:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000846:	3b34      	subs	r3, #52	; 0x34
 8000848:	461a      	mov	r2, r3
 800084a:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800084e:	f103 031c 	add.w	r3, r3, #28
 8000852:	6819      	ldr	r1, [r3, #0]
 8000854:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000858:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	f000 fa1b 	bl	8000c98 <public_key_Extraction>
 8000862:	4603      	mov	r3, r0
 8000864:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000868:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 800086c:	7013      	strb	r3, [r2, #0]
	if (ret != SUCCEEDED){
 800086e:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000872:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000876:	f993 3000 	ldrsb.w	r3, [r3]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <secure_boot_verify+0x2be>
		return FAILED;
 800087e:	2301      	movs	r3, #1
 8000880:	e170      	b.n	8000b64 <secure_boot_verify+0x5a0>
	}


	/************ signature verification ************/

	uint8_t *Meta_Data=(byte *)META_DATA_ADDRESS;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <secure_boot_verify+0x314>)
 8000884:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000888:	f102 0210 	add.w	r2, r2, #16
 800088c:	6013      	str	r3, [r2, #0]
	uint8_t signatureBuffer [256];
	uint32_t SignatureIndex = SIGNATURE_ADDRESS;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <secure_boot_verify+0x318>)
 8000890:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000894:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000898:	6013      	str	r3, [r2, #0]
	for(int i=0;i<256;i++){
 800089a:	2300      	movs	r3, #0
 800089c:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80008a0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e043      	b.n	8000930 <secure_boot_verify+0x36c>
 80008a8:	08041026 	.word	0x08041026
 80008ac:	08041014 	.word	0x08041014
 80008b0:	08040800 	.word	0x08040800
 80008b4:	08040000 	.word	0x08040000
 80008b8:	08041622 	.word	0x08041622
 80008bc:	0804160f 	.word	0x0804160f
 80008c0:	1fff7800 	.word	0x1fff7800
 80008c4:	1fff7820 	.word	0x1fff7820
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000100 	.word	0x20000100
 80008d0:	20000104 	.word	0x20000104
 80008d4:	20000204 	.word	0x20000204
 80008d8:	08041000 	.word	0x08041000
 80008dc:	08041400 	.word	0x08041400
		signatureBuffer [i]= *(uint8_t *)SignatureIndex;
 80008e0:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80008e4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	7819      	ldrb	r1, [r3, #0]
 80008ec:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80008f0:	f2a3 4234 	subw	r2, r3, #1076	; 0x434
 80008f4:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80008f8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	460a      	mov	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
		SignatureIndex++;
 8000904:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000908:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000914:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000918:	6013      	str	r3, [r2, #0]
	for(int i=0;i<256;i++){
 800091a:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800091e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 800092a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000934:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	ddd0      	ble.n	80008e0 <secure_boot_verify+0x31c>
	}
	ret=signature_verify(signatureBuffer,SIGNATURE_LENGTH, Meta_Data,META_DATA_LENGTH ,&SB_pubKey);
 800093e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000942:	3834      	subs	r0, #52	; 0x34
 8000944:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000948:	3b34      	subs	r3, #52	; 0x34
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2352      	movs	r3, #82	; 0x52
 800094e:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000952:	f102 0210 	add.w	r2, r2, #16
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095c:	f000 fa2f 	bl	8000dbe <signature_verify>
 8000960:	4603      	mov	r3, r0
 8000962:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000966:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 800096a:	7013      	strb	r3, [r2, #0]
	if (ret == SUCCEEDED){
 800096c:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000970:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000974:	f993 3000 	ldrsb.w	r3, [r3]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d14e      	bne.n	8000a1a <secure_boot_verify+0x456>
		printf("Signature Verified\n");
 800097c:	487c      	ldr	r0, [pc, #496]	; (8000b70 <secure_boot_verify+0x5ac>)
 800097e:	f020 fe47 	bl	8021610 <puts>
	}
	else{
		printf("Signature Failure\n");
		return FAILED;
	}
	wc_FreeRsaKey(&SB_pubKey);
 8000982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000986:	3b34      	subs	r3, #52	; 0x34
 8000988:	4618      	mov	r0, r3
 800098a:	f019 fb4c 	bl	801a026 <wc_FreeRsaKey>

	/**************** Threshold  ********************/

	uint8_t Major_Version = *((char *)META_DATA_ADDRESS+MAJOR_V_METADATA_OFFSET) - '0';
 800098e:	4b79      	ldr	r3, [pc, #484]	; (8000b74 <secure_boot_verify+0x5b0>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	3b30      	subs	r3, #48	; 0x30
 8000994:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000998:	f102 020f 	add.w	r2, r2, #15
 800099c:	7013      	strb	r3, [r2, #0]
	uint8_t Minor_Version = *((char *)META_DATA_ADDRESS+MINOR_V_METADATA_OFFSET) - '0';
 800099e:	4b76      	ldr	r3, [pc, #472]	; (8000b78 <secure_boot_verify+0x5b4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3b30      	subs	r3, #48	; 0x30
 80009a4:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80009a8:	f102 020e 	add.w	r2, r2, #14
 80009ac:	7013      	strb	r3, [r2, #0]
	uint8_t Patch_Version = *((char *)META_DATA_ADDRESS+PATCH_V_METADATA_OFFSET) - '0';
 80009ae:	4b73      	ldr	r3, [pc, #460]	; (8000b7c <secure_boot_verify+0x5b8>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	3b30      	subs	r3, #48	; 0x30
 80009b4:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80009b8:	f102 020d 	add.w	r2, r2, #13
 80009bc:	7013      	strb	r3, [r2, #0]


	uint8_t threshold_Major_Version = read_backup_reg(0x1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fafc 	bl	8000fbc <read_backup_reg>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80009ca:	f102 020c 	add.w	r2, r2, #12
 80009ce:	7013      	strb	r3, [r2, #0]
	uint8_t threshold_Minor_Version = read_backup_reg(0x2);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f000 faf3 	bl	8000fbc <read_backup_reg>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80009dc:	f102 020b 	add.w	r2, r2, #11
 80009e0:	7013      	strb	r3, [r2, #0]
	uint8_t threshold_Patch_Version = read_backup_reg(0x3);
 80009e2:	2003      	movs	r0, #3
 80009e4:	f000 faea 	bl	8000fbc <read_backup_reg>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80009ee:	f102 020a 	add.w	r2, r2, #10
 80009f2:	7013      	strb	r3, [r2, #0]

	byte threshold_approval=0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80009fa:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80009fe:	7013      	strb	r3, [r2, #0]

	if(Major_Version > threshold_Major_Version){
 8000a00:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a04:	f103 030f 	add.w	r3, r3, #15
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a0e:	f103 030c 	add.w	r3, r3, #12
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d90c      	bls.n	8000a32 <secure_boot_verify+0x46e>
 8000a18:	e004      	b.n	8000a24 <secure_boot_verify+0x460>
		printf("Signature Failure\n");
 8000a1a:	4859      	ldr	r0, [pc, #356]	; (8000b80 <secure_boot_verify+0x5bc>)
 8000a1c:	f020 fdf8 	bl	8021610 <puts>
		return FAILED;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e09f      	b.n	8000b64 <secure_boot_verify+0x5a0>
		//approved
		threshold_approval=SUCCEEDED;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000a2a:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000a2e:	7013      	strb	r3, [r2, #0]
 8000a30:	e051      	b.n	8000ad6 <secure_boot_verify+0x512>
	}
	else if(Major_Version == threshold_Major_Version){
 8000a32:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a36:	f103 030f 	add.w	r3, r3, #15
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a40:	f103 030c 	add.w	r3, r3, #12
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d13f      	bne.n	8000aca <secure_boot_verify+0x506>
		//check minor
		if(Minor_Version > threshold_Minor_Version){
 8000a4a:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a4e:	f103 030e 	add.w	r3, r3, #14
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a58:	f103 030b 	add.w	r3, r3, #11
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d906      	bls.n	8000a70 <secure_boot_verify+0x4ac>
			//approved
			threshold_approval=SUCCEEDED;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000a68:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000a6c:	7013      	strb	r3, [r2, #0]
 8000a6e:	e032      	b.n	8000ad6 <secure_boot_verify+0x512>
		}
		else if(Minor_Version == threshold_Minor_Version){
 8000a70:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a74:	f103 030e 	add.w	r3, r3, #14
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a7e:	f103 030b 	add.w	r3, r3, #11
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d119      	bne.n	8000abc <secure_boot_verify+0x4f8>
			//check patch
			if(Patch_Version >threshold_Patch_Version){
 8000a88:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a8c:	f103 030d 	add.w	r3, r3, #13
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000a96:	f103 030a 	add.w	r3, r3, #10
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d906      	bls.n	8000aae <secure_boot_verify+0x4ea>
				//approved
				threshold_approval=SUCCEEDED;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000aa6:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000aaa:	7013      	strb	r3, [r2, #0]
 8000aac:	e013      	b.n	8000ad6 <secure_boot_verify+0x512>
			}
			else{
				//Patch_Version < threshold_Patch_Version
				//denial
				threshold_approval=FAILED;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000ab4:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000ab8:	7013      	strb	r3, [r2, #0]
 8000aba:	e00c      	b.n	8000ad6 <secure_boot_verify+0x512>
			}
		}
		else{
			//Minor_Version < threshold_Minor_Version
			//denial
			threshold_approval=FAILED;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000ac2:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000ac6:	7013      	strb	r3, [r2, #0]
 8000ac8:	e005      	b.n	8000ad6 <secure_boot_verify+0x512>
		}
	}
	else{
		//Major_Version < threshold_Major_Version
		//denial
		threshold_approval=FAILED;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000ad0:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000ad4:	7013      	strb	r3, [r2, #0]
	}

	if(threshold_approval!=SUCCEEDED){
 8000ad6:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000ada:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <secure_boot_verify+0x524>
		return FAILED;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e03d      	b.n	8000b64 <secure_boot_verify+0x5a0>
	}



	/************* Hash  ***************/
	uint8_t *Hash_value_in_metatdata= (uint8_t*)(Meta_Data+APP_HASH__METADATA_OFFSET);
 8000ae8:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000aec:	f103 0310 	add.w	r3, r3, #16
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3332      	adds	r3, #50	; 0x32
 8000af4:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000af8:	f102 0204 	add.w	r2, r2, #4
 8000afc:	6013      	str	r3, [r2, #0]
	uint8_t *Start_Add_App = (uint8_t*)MAIN_APPLICATION_START_ADDRESS;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <secure_boot_verify+0x5c0>)
 8000b00:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000b04:	6013      	str	r3, [r2, #0]
	uint8_t *Hash_Result = CalculateDigest( Start_Add_App ,appSize );
 8000b06:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000b0a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	f000 f9f5 	bl	8000f04 <CalculateDigest>
 8000b1a:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 8000b1e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000b22:	6018      	str	r0, [r3, #0]
	ret = DigestCompare ( Hash_Result , Hash_value_in_metatdata);
 8000b24:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000b28:	f103 0304 	add.w	r3, r3, #4
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 8000b32:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	f000 fa24 	bl	8000f84 <DigestCompare>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000b42:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8000b46:	7013      	strb	r3, [r2, #0]
	if(ret!=SUCCEEDED){
 8000b48:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000b4c:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000b50:	f993 3000 	ldrsb.w	r3, [r3]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <secure_boot_verify+0x598>
		return FAILED;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e003      	b.n	8000b64 <secure_boot_verify+0x5a0>
	}
	printf("Hash Verified\n");
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <secure_boot_verify+0x5c4>)
 8000b5e:	f020 fd57 	bl	8021610 <puts>

	return SUCCEEDED;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	f507 5710 	add.w	r7, r7, #9216	; 0x2400
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	08022858 	.word	0x08022858
 8000b74:	08041008 	.word	0x08041008
 8000b78:	0804100a 	.word	0x0804100a
 8000b7c:	0804100c 	.word	0x0804100c
 8000b80:	0802286c 	.word	0x0802286c
 8000b84:	08060000 	.word	0x08060000
 8000b88:	08022880 	.word	0x08022880

08000b8c <jump_to_application>:

void jump_to_application(uint32_t start_addr){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop

	/* First, disable all IRQs */
	__disable_irq(); // ensure to __enable_irq() in the application main function

	// set vector table offset
	SCB->VTOR = (start_addr - 0x08000000);
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <jump_to_application+0x3c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ba0:	6093      	str	r3, [r2, #8]

	/* Get the main application start address */
	uint32_t jump_address = *(uint32_t *)(start_addr + 4);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	617b      	str	r3, [r7, #20]

	/* Set the main stack pointer to to the application start address */
	__set_MSP(*(uint32_t *)start_addr);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f383 8808 	msr	MSP, r3
}
 8000bb6:	bf00      	nop
	//__set_PSP(*(uint32_t *)start_addr);

	// Create function pointer for the main application
	void (*app_ptr)(void);
	app_ptr = (void *)(jump_address);
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]

	// Now jump to the main application
	app_ptr();
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4798      	blx	r3
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Certificates_Verify>:
/******************************************************************************/
/* \Description:
 * function to load and verify both the root certificate
 * and the secure boot certificate                                            */
/******************************************************************************/
static uint8_t Certificates_Verify( const uint8_t* ptr_rootCert, const uint8_t* ptr_sbCert,uint32_t rootCert_size,uint32_t SBCert_size){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
	WOLFSSL_CERT_MANAGER* cm = NULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
	int ret;
	uint32_t secure_boot_cert_size = SBCert_size;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	61bb      	str	r3, [r7, #24]
	uint32_t root_cert_size = rootCert_size;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	617b      	str	r3, [r7, #20]
	wolfSSL_Init();
 8000be6:	f006 fa91 	bl	800710c <wolfSSL_Init>

	if ((cm = wolfSSL_CertManagerNew()) == NULL) {
 8000bea:	f005 ffbb 	bl	8006b64 <wolfSSL_CertManagerNew>
 8000bee:	61f8      	str	r0, [r7, #28]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d104      	bne.n	8000c00 <Certificates_Verify+0x34>
		printf("cert manager new failed\n");
 8000bf6:	4823      	ldr	r0, [pc, #140]	; (8000c84 <Certificates_Verify+0xb8>)
 8000bf8:	f020 fd0a 	bl	8021610 <puts>
		return FAILED;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e03c      	b.n	8000c7a <Certificates_Verify+0xae>
	}

	ret = wolfSSL_CertManagerLoadCABuffer(cm, ptr_rootCert, root_cert_size, SSL_FILETYPE_DEFAULT);
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	2302      	movs	r3, #2
 8000c04:	68f9      	ldr	r1, [r7, #12]
 8000c06:	69f8      	ldr	r0, [r7, #28]
 8000c08:	f007 fb63 	bl	80082d2 <wolfSSL_CertManagerLoadCABuffer>
 8000c0c:	6138      	str	r0, [r7, #16]
	if (ret != WOLFSSL_SUCCESS) {
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d007      	beq.n	8000c24 <Certificates_Verify+0x58>
		printf("loading the ca chain failed\n");
 8000c14:	481c      	ldr	r0, [pc, #112]	; (8000c88 <Certificates_Verify+0xbc>)
 8000c16:	f020 fcfb 	bl	8021610 <puts>
		wolfSSL_CertManagerFree(cm);
 8000c1a:	69f8      	ldr	r0, [r7, #28]
 8000c1c:	f005 ffaa 	bl	8006b74 <wolfSSL_CertManagerFree>
		return FAILED;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e02a      	b.n	8000c7a <Certificates_Verify+0xae>
	}

	ret = wolfSSL_CertManagerVerifyBuffer(cm, ptr_rootCert, root_cert_size, SSL_FILETYPE_DEFAULT);
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	2302      	movs	r3, #2
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	69f8      	ldr	r0, [r7, #28]
 8000c2c:	f007 fc3a 	bl	80084a4 <wolfSSL_CertManagerVerifyBuffer>
 8000c30:	6138      	str	r0, [r7, #16]
	if (ret != WOLFSSL_SUCCESS) {
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d007      	beq.n	8000c48 <Certificates_Verify+0x7c>
		printf("could not verify certificate.\n");
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <Certificates_Verify+0xc0>)
 8000c3a:	f020 fce9 	bl	8021610 <puts>
		wolfSSL_CertManagerFree(cm);
 8000c3e:	69f8      	ldr	r0, [r7, #28]
 8000c40:	f005 ff98 	bl	8006b74 <wolfSSL_CertManagerFree>
		return FAILED;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e018      	b.n	8000c7a <Certificates_Verify+0xae>
	}else{
		printf("Verification successful on root cert!\n");
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <Certificates_Verify+0xc4>)
 8000c4a:	f020 fce1 	bl	8021610 <puts>
	}

	ret = wolfSSL_CertManagerVerifyBuffer(cm, ptr_sbCert, secure_boot_cert_size, SSL_FILETYPE_DEFAULT);
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	2302      	movs	r3, #2
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	69f8      	ldr	r0, [r7, #28]
 8000c56:	f007 fc25 	bl	80084a4 <wolfSSL_CertManagerVerifyBuffer>
 8000c5a:	6138      	str	r0, [r7, #16]
	if (ret != WOLFSSL_SUCCESS) {
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d007      	beq.n	8000c72 <Certificates_Verify+0xa6>
		printf("could not verify certificate.\n");
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <Certificates_Verify+0xc0>)
 8000c64:	f020 fcd4 	bl	8021610 <puts>
		wolfSSL_CertManagerFree(cm);
 8000c68:	69f8      	ldr	r0, [r7, #28]
 8000c6a:	f005 ff83 	bl	8006b74 <wolfSSL_CertManagerFree>
		return FAILED;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e003      	b.n	8000c7a <Certificates_Verify+0xae>
	}else{
		printf("Verification successful on secure boot cert!\n");
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <Certificates_Verify+0xc8>)
 8000c74:	f020 fccc 	bl	8021610 <puts>
	}

	return SUCCEEDED;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08022890 	.word	0x08022890
 8000c88:	080228a8 	.word	0x080228a8
 8000c8c:	080228c4 	.word	0x080228c4
 8000c90:	080228e4 	.word	0x080228e4
 8000c94:	0802290c 	.word	0x0802290c

08000c98 <public_key_Extraction>:
/******************************************************************************/
/* \Description:
 * function to extract the public key from a given certificate
 *  returns public key in RSA key Format                                      */
/******************************************************************************/
static uint8_t public_key_Extraction(const uint8_t* ptr_Cert,uint32_t Cert_size,RsaKey *pubKey){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]

	int ret =0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
	WOLFSSL_X509* x509cert;
	WOLFSSL_EVP_PKEY* pubKeyTmp;
	word32 idx = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]

	x509cert = wolfSSL_X509_load_certificate_buffer(ptr_Cert, Cert_size, WOLFSSL_FILETYPE_DEFAULT);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f009 fcd4 	bl	800a660 <wolfSSL_X509_load_certificate_buffer>
 8000cb8:	61b8      	str	r0, [r7, #24]
	if (x509cert == NULL) {
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10a      	bne.n	8000cd6 <public_key_Extraction+0x3e>
		printf("Failed to load cert, abort!\n");
 8000cc0:	4826      	ldr	r0, [pc, #152]	; (8000d5c <public_key_Extraction+0xc4>)
 8000cc2:	f020 fca5 	bl	8021610 <puts>
		wolfSSL_EVP_PKEY_free(pubKeyTmp);
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f004 fee1 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
		wolfSSL_X509_free(x509cert);
 8000ccc:	69b8      	ldr	r0, [r7, #24]
 8000cce:	f009 fb5a 	bl	800a386 <wolfSSL_X509_free>
		return FAILED;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e03d      	b.n	8000d52 <public_key_Extraction+0xba>
	}
	printf("Loaded cert successfully\n");
 8000cd6:	4822      	ldr	r0, [pc, #136]	; (8000d60 <public_key_Extraction+0xc8>)
 8000cd8:	f020 fc9a 	bl	8021610 <puts>

	pubKeyTmp = wolfSSL_X509_get_pubkey(x509cert);
 8000cdc:	69b8      	ldr	r0, [r7, #24]
 8000cde:	f009 fcd0 	bl	800a682 <wolfSSL_X509_get_pubkey>
 8000ce2:	6178      	str	r0, [r7, #20]
	if (pubKeyTmp == NULL) {
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10a      	bne.n	8000d00 <public_key_Extraction+0x68>
		printf("Failed to extract public key, abort!\n");
 8000cea:	481e      	ldr	r0, [pc, #120]	; (8000d64 <public_key_Extraction+0xcc>)
 8000cec:	f020 fc90 	bl	8021610 <puts>
		wolfSSL_EVP_PKEY_free(pubKeyTmp);
 8000cf0:	6978      	ldr	r0, [r7, #20]
 8000cf2:	f004 fecc 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
		wolfSSL_X509_free(x509cert);
 8000cf6:	69b8      	ldr	r0, [r7, #24]
 8000cf8:	f009 fb45 	bl	800a386 <wolfSSL_X509_free>
		return FAILED;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e028      	b.n	8000d52 <public_key_Extraction+0xba>
	}
	printf("Extracted public key successfully\n");
 8000d00:	4819      	ldr	r0, [pc, #100]	; (8000d68 <public_key_Extraction+0xd0>)
 8000d02:	f020 fc85 	bl	8021610 <puts>

	/* setup a key structure to receive the extracted key */
	wc_InitRsaKey(pubKey, NULL);
 8000d06:	2100      	movs	r1, #0
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f019 f97c 	bl	801a006 <wc_InitRsaKey>
	ret = wc_RsaPublicKeyDecode((byte*)pubKeyTmp->pkey.ptr, &idx, pubKey,
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	6958      	ldr	r0, [r3, #20]
			(word32) pubKeyTmp->pkey_sz);
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	68db      	ldr	r3, [r3, #12]
	ret = wc_RsaPublicKeyDecode((byte*)pubKeyTmp->pkey.ptr, &idx, pubKey,
 8000d16:	f107 0110 	add.w	r1, r7, #16
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	f00e f8d1 	bl	800eec2 <wc_RsaPublicKeyDecode>
 8000d20:	61f8      	str	r0, [r7, #28]
	if (ret != 0) {
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00a      	beq.n	8000d3e <public_key_Extraction+0xa6>
		printf("Failed to decode public key from pubKeyTmp, abort!\n");
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <public_key_Extraction+0xd4>)
 8000d2a:	f020 fc71 	bl	8021610 <puts>
		wolfSSL_EVP_PKEY_free(pubKeyTmp);
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f004 fead 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
		wolfSSL_X509_free(x509cert);
 8000d34:	69b8      	ldr	r0, [r7, #24]
 8000d36:	f009 fb26 	bl	800a386 <wolfSSL_X509_free>
		return FAILED;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e009      	b.n	8000d52 <public_key_Extraction+0xba>
	}
	printf("Successfully decoded public key\n");
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <public_key_Extraction+0xd8>)
 8000d40:	f020 fc66 	bl	8021610 <puts>
	wolfSSL_EVP_PKEY_free(pubKeyTmp);
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f004 fea2 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
	wolfSSL_X509_free(x509cert);
 8000d4a:	69b8      	ldr	r0, [r7, #24]
 8000d4c:	f009 fb1b 	bl	800a386 <wolfSSL_X509_free>
	return SUCCEEDED;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0802293c 	.word	0x0802293c
 8000d60:	08022958 	.word	0x08022958
 8000d64:	08022974 	.word	0x08022974
 8000d68:	0802299c 	.word	0x0802299c
 8000d6c:	080229c0 	.word	0x080229c0
 8000d70:	080229f4 	.word	0x080229f4

08000d74 <compare_keys>:

/******************************************************************************/
/* \Description:
 * function to compare two very long numbers                                  */
/******************************************************************************/
static uint8_t compare_keys(uint32_t *n_public_key_1,uint32_t *n_public_key_2,uint32_t size){
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]

	for(uint32_t i=0;i<size;i++){
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e010      	b.n	8000da8 <compare_keys+0x34>
		if(n_public_key_1[i] != n_public_key_2[i]){
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	440b      	add	r3, r1
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d001      	beq.n	8000da2 <compare_keys+0x2e>
			return FAILED;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e007      	b.n	8000db2 <compare_keys+0x3e>
	for(uint32_t i=0;i<size;i++){
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3ea      	bcc.n	8000d86 <compare_keys+0x12>
		}
	}
	return SUCCEEDED;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <signature_verify>:
/* \Description:
 * function to verify the signature,
 * given the data and the signature and the public key that required for decryption
 *                                                                            */
/******************************************************************************/
static uint8_t signature_verify(const uint8_t* signature, uint32_t sig_length, const uint8_t* metaData,uint32_t metadata_lengt, RsaKey *pubKey){
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b0be      	sub	sp, #248	; 0xf8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]

	Sha256         sha256;
	Sha256*        pSha256 = NULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	unsigned char  digest[WC_SHA256_DIGEST_SIZE];
	unsigned char  encSig[WC_SHA256_DIGEST_SIZE + 32];
	word32         encSigLen = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	unsigned char* decSig = NULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
	word32         decSigLen = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	int ret=0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	/* Calculate SHA-256 digest of message */

	ret = wc_InitSha256(&sha256);
 8000de8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000dec:	4618      	mov	r0, r3
 8000dee:	f01b f88b 	bl	801bf08 <wc_InitSha256>
 8000df2:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	if (ret == 0) {
 8000df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d111      	bne.n	8000e22 <signature_verify+0x64>
		pSha256 = &sha256;
 8000dfe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		ret = wc_Sha256Update(&sha256, metaData, metadata_lengt);   //size of() should be implemented but maybe -1, dep on the format of the meta data (array of hex or string)
 8000e06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f01a ffb3 	bl	801bd7a <wc_Sha256Update>
 8000e14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	}else{
		return FAILED;
	}

	if (ret == 0){
 8000e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d111      	bne.n	8000e44 <signature_verify+0x86>
 8000e20:	e001      	b.n	8000e26 <signature_verify+0x68>
		return FAILED;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e06a      	b.n	8000efc <signature_verify+0x13e>
		ret = wc_Sha256Final(&sha256, digest);
 8000e26:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f01b f83e 	bl	801beb2 <wc_Sha256Final>
 8000e36:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4


	/** using the hash function **/

	/* Encode digest with algorithm information as per PKCS#1.5 */
	if (ret == 0) {
 8000e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d116      	bne.n	8000e70 <signature_verify+0xb2>
 8000e42:	e001      	b.n	8000e48 <signature_verify+0x8a>
		return FAILED;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e059      	b.n	8000efc <signature_verify+0x13e>
		encSigLen = wc_EncodeSignature(encSig, digest, sizeof(digest), SHA256h);
 8000e48:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000e4c:	f107 0018 	add.w	r0, r7, #24
 8000e50:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8000e54:	2220      	movs	r2, #32
 8000e56:	f00f fc8c 	bl	8010772 <wc_EncodeSignature>
 8000e5a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
		if ((int)encSigLen < 0){
 8000e5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da06      	bge.n	8000e74 <signature_verify+0xb6>
			ret = (int)encSigLen;
 8000e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000e6e:	e001      	b.n	8000e74 <signature_verify+0xb6>
		}
	}else{
		return FAILED;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e043      	b.n	8000efc <signature_verify+0x13e>
	}


	/* Verify the signature by decrypting the value */
	if (ret == 0) {
 8000e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d113      	bne.n	8000ea4 <signature_verify+0xe6>
		decSigLen = wc_RsaSSL_VerifyInline(signature, sig_length, &decSig, pubKey);
 8000e7c:	f107 0214 	add.w	r2, r7, #20
 8000e80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f01a f962 	bl	801b150 <wc_RsaSSL_VerifyInline>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		if ((int)decSigLen < 0){
 8000e92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da06      	bge.n	8000ea8 <signature_verify+0xea>
			ret = (int)decSigLen;
 8000e9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000ea2:	e001      	b.n	8000ea8 <signature_verify+0xea>
		}
	}else{
		return FAILED;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e029      	b.n	8000efc <signature_verify+0x13e>
	}

	/* Check the decrypted result matches the encoded digest. */
	if (ret == 0 && encSigLen != decSigLen){
 8000ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d108      	bne.n	8000ec2 <signature_verify+0x104>
 8000eb0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000eb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d002      	beq.n	8000ec2 <signature_verify+0x104>
		/* failure */
		ret = FAILED;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	}

	if (ret == 0 && XMEMCMP(encSig, decSig, encSigLen) != 0){
 8000ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10d      	bne.n	8000ee6 <signature_verify+0x128>
 8000eca:	6979      	ldr	r1, [r7, #20]
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f020 f9f5 	bl	80212c4 <memcmp>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <signature_verify+0x128>
		/* failure */
		ret = FAILED;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	}

	/*free*/
	if (pSha256 != NULL){
 8000ee6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <signature_verify+0x138>
		wc_Sha256Free(pSha256);
 8000eee:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000ef2:	f01b f81a 	bl	801bf2a <wc_Sha256Free>
	}

	/* Report on the verification */
	return ret;
 8000ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000efa:	b2db      	uxtb	r3, r3

}
 8000efc:	4618      	mov	r0, r3
 8000efe:	37f8      	adds	r7, #248	; 0xf8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <CalculateDigest>:
/******************************************************************************/
/* \Description:
 * function to calculate the hash using SHA256 algorithm given the size
 * and the data to be hashed                                                  */
/******************************************************************************/
static uint8_t * CalculateDigest(const uint8_t* image , uint32_t image_size ){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0a0      	sub	sp, #128	; 0x80
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	/* Variables Declaration */
	wc_Sha256 sha256;
	static byte hash[WC_SHA256_DIGEST_SIZE];  //Hash value

	int ret = -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	67fb      	str	r3, [r7, #124]	; 0x7c

	//Initialization of SHA256
	ret = wc_InitSha256(&sha256);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f01a fff5 	bl	801bf08 <wc_InitSha256>
 8000f1e:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (ret != 0)
 8000f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <CalculateDigest+0x28>
	{
		printf("Failed to initialize SHA structure\n");
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <CalculateDigest+0x70>)
 8000f28:	f020 fb72 	bl	8021610 <puts>
	}

	//calculate digest API
	ret = wc_Sha256Update(&sha256, image , image_size);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f01a ff20 	bl	801bd7a <wc_Sha256Update>
 8000f3a:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (ret != 0){
 8000f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <CalculateDigest+0x46>
		printf("Failed to calculate the hash\n");
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <CalculateDigest+0x74>)
 8000f44:	f020 fb64 	bl	8021610 <puts>
 8000f48:	e009      	b.n	8000f5e <CalculateDigest+0x5a>
	}else if (ret == 0){
 8000f4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d106      	bne.n	8000f5e <CalculateDigest+0x5a>
		ret =  wc_Sha256Final(&sha256, hash);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4909      	ldr	r1, [pc, #36]	; (8000f7c <CalculateDigest+0x78>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f01a ffab 	bl	801beb2 <wc_Sha256Final>
 8000f5c:	67f8      	str	r0, [r7, #124]	; 0x7c
	}

	if (ret != 0){
 8000f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <CalculateDigest+0x66>
		printf("ERROR: Hash operation failed");
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <CalculateDigest+0x7c>)
 8000f66:	f020 facd 	bl	8021504 <iprintf>
	{
		/*
		 * Do nothing
		 */
	}
	return hash;
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <CalculateDigest+0x78>)
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3780      	adds	r7, #128	; 0x80
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08022a14 	.word	0x08022a14
 8000f78:	08022a38 	.word	0x08022a38
 8000f7c:	20000294 	.word	0x20000294
 8000f80:	08022a58 	.word	0x08022a58

08000f84 <DigestCompare>:
/******************************************************************************/
/* \Description:
 * function to compare two digest values                                      */
/******************************************************************************/
static uint8_t DigestCompare ( byte *Digest , byte *MetaDigest){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	int ret = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
	ret = memcmp(Digest,MetaDigest,32);
 8000f92:	2220      	movs	r2, #32
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f020 f994 	bl	80212c4 <memcmp>
 8000f9c:	60f8      	str	r0, [r7, #12]
	if(ret== 0){
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <DigestCompare+0x26>
		ret = SUCCEEDED;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e001      	b.n	8000fae <DigestCompare+0x2a>
	}else{
		ret = FAILED;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	b2db      	uxtb	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <read_backup_reg>:

uint8_t read_backup_reg(uint8_t reg) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, reg);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <read_backup_reg+0x20>)
 8000fcc:	f001 feac 	bl	8002d28 <HAL_RTCEx_BKUPRead>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b2db      	uxtb	r3, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200002d0 	.word	0x200002d0

08000fe0 <write_Attempt_Counter>:

void write_Attempt_Counter(uint32_t data) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 8000fe8:	f000 fea0 	bl	8001d2c <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, data);
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <write_Attempt_Counter+0x24>)
 8000ff2:	f001 fe7f 	bl	8002cf4 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 8000ff6:	f000 fead 	bl	8001d54 <HAL_PWR_DisableBkUpAccess>

}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002d0 	.word	0x200002d0

08001008 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_GPIO_Init+0x30>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <MX_GPIO_Init+0x30>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_GPIO_Init+0x30>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_IWDG_Init+0x2c>)
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <MX_IWDG_Init+0x30>)
 8001044:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_IWDG_Init+0x2c>)
 8001048:	2204      	movs	r2, #4
 800104a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_IWDG_Init+0x2c>)
 800104e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001052:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_IWDG_Init+0x2c>)
 8001056:	f000 fe27 	bl	8001ca8 <HAL_IWDG_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001060:	f000 f8ac 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200002b4 	.word	0x200002b4
 800106c:	40003000 	.word	0x40003000

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 fb13 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f833 	bl	80010e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_RTC_Init();
 800107e:	f000 f8f3 	bl	8001268 <MX_RTC_Init>

  	uint8_t Attempt_counter = read_backup_reg(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ff9a 	bl	8000fbc <read_backup_reg>
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  	Attempt_counter++;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	3301      	adds	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
	write_Attempt_Counter(Attempt_counter);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffa3 	bl	8000fe0 <write_Attempt_Counter>
	if(Attempt_counter > 3){
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d902      	bls.n	80010a6 <main+0x36>
		write_Attempt_Counter(0x00);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff9d 	bl	8000fe0 <write_Attempt_Counter>
		//continue in the main function
	}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f7ff ffaf 	bl	8001008 <MX_GPIO_Init>
  MX_RNG_Init();
 80010aa:	f000 f88d 	bl	80011c8 <MX_RNG_Init>
  MX_UART4_Init();
 80010ae:	f000 fa5b 	bl	8001568 <MX_UART4_Init>
  MX_IWDG_Init();
 80010b2:	f7ff ffc3 	bl	800103c <MX_IWDG_Init>

  /* USER CODE BEGIN 2 */

  int ret =FAILED;
 80010b6:	2301      	movs	r3, #1
 80010b8:	603b      	str	r3, [r7, #0]
  ret = secure_boot_verify();
 80010ba:	f7ff fa83 	bl	80005c4 <secure_boot_verify>
 80010be:	4603      	mov	r3, r0
 80010c0:	603b      	str	r3, [r7, #0]
  if(ret == SUCCEEDED){
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <main+0x60>
	  //jump to application
	  jump_to_application(MAIN_APPLICATION_START_ADDRESS);
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <main+0x6c>)
 80010ca:	f7ff fd5f 	bl	8000b8c <jump_to_application>
 80010ce:	e004      	b.n	80010da <main+0x6a>
  }else{
	  printf("%d\n",Attempt_counter);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <main+0x70>)
 80010d6:	f020 fa15 	bl	8021504 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010da:	e7fe      	b.n	80010da <main+0x6a>
 80010dc:	08060000 	.word	0x08060000
 80010e0:	08022a78 	.word	0x08022a78

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	; 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2230      	movs	r2, #48	; 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f020 f91e 	bl	8021334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <SystemClock_Config+0xd0>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <SystemClock_Config+0xd0>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <SystemClock_Config+0xd4>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <SystemClock_Config+0xd4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001144:	230a      	movs	r3, #10
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	2302      	movs	r3, #2
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001158:	2300      	movs	r3, #0
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800115c:	2310      	movs	r3, #16
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001160:	23c0      	movs	r3, #192	; 0xc0
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fe03 	bl	8001d7c <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800117c:	f000 f81e 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f866 	bl	800226c <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011a6:	f000 f809 	bl	80011bc <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	; 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_RNG_Init+0x20>)
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <MX_RNG_Init+0x24>)
 80011d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_RNG_Init+0x20>)
 80011d4:	f001 fbea 	bl	80029ac <HAL_RNG_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80011de:	f7ff ffed 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200002c0 	.word	0x200002c0
 80011ec:	50060800 	.word	0x50060800

080011f0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_RNG_MspInit+0x3c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10d      	bne.n	800121e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_RNG_MspInit+0x40>)
 8001208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_RNG_MspInit+0x40>)
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	6353      	str	r3, [r2, #52]	; 0x34
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_RNG_MspInit+0x40>)
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	50060800 	.word	0x50060800
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_RNG_MspDeInit>:

void HAL_RNG_MspDeInit(RNG_HandleTypeDef* rngHandle)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_RNG_MspDeInit+0x2c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d105      	bne.n	8001252 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_RNG_MspDeInit+0x30>)
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_RNG_MspDeInit+0x30>)
 800124c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001250:	6353      	str	r3, [r2, #52]	; 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	50060800 	.word	0x50060800
 8001264:	40023800 	.word	0x40023800

08001268 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_RTC_Init+0x44>)
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <MX_RTC_Init+0x48>)
 8001270:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_RTC_Init+0x44>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_RTC_Init+0x44>)
 800127a:	227f      	movs	r2, #127	; 0x7f
 800127c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_RTC_Init+0x44>)
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_RTC_Init+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_RTC_Init+0x44>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_RTC_Init+0x44>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_RTC_Init+0x44>)
 8001298:	f001 fc32 	bl	8002b00 <HAL_RTC_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80012a2:	f7ff ff8b 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200002d0 	.word	0x200002d0
 80012b0:	40002800 	.word	0x40002800

080012b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	; 0x38
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2230      	movs	r2, #48	; 0x30
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f020 f835 	bl	8021334 <memset>
  if(rtcHandle->Instance==RTC)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_RTC_MspInit+0x4c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d111      	bne.n	80012f8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012d4:	2320      	movs	r3, #32
 80012d6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 f9a2 	bl	800262c <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80012ee:	f7ff ff65 	bl	80011bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_RTC_MspInit+0x50>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012f8:	bf00      	nop
 80012fa:	3738      	adds	r7, #56	; 0x38
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40002800 	.word	0x40002800
 8001304:	42470e3c 	.word	0x42470e3c

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 f9ce 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <Custom_ITM_Sender>:

#define DEMCR *((volatile unsigned long*)0xE000EDFC)
#define ITM_SIMULUS_PORT0 *((volatile unsigned long*)0xE0000000)
#define ITM_TRACE_EN *((volatile unsigned long*)0xE0000E00)

void Custom_ITM_Sender(unsigned char data){
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1<<24);
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <Custom_ITM_Sender+0x48>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <Custom_ITM_Sender+0x48>)
 80013bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c0:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |=(1<<0);
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <Custom_ITM_Sender+0x4c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <Custom_ITM_Sender+0x4c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]
	while(!(ITM_SIMULUS_PORT0 & 1));
 80013ce:	bf00      	nop
 80013d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f8      	beq.n	80013d0 <Custom_ITM_Sender+0x24>
	ITM_SIMULUS_PORT0 =data;
 80013de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000edfc 	.word	0xe000edfc
 80013f8:	e0000e00 	.word	0xe0000e00

080013fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e00a      	b.n	8001424 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800140e:	f3af 8000 	nop.w
 8001412:	4601      	mov	r1, r0
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	b2ca      	uxtb	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	dbf0      	blt.n	800140e <_read+0x12>
  }

  return len;
 800142c:	687b      	ldr	r3, [r7, #4]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_write>:


__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	e009      	b.n	800145c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  Custom_ITM_Sender(*ptr++);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	60ba      	str	r2, [r7, #8]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ffab 	bl	80013ac <Custom_ITM_Sender>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3301      	adds	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	dbf1      	blt.n	8001448 <_write+0x12>

  }
  return len;
 8001464:	687b      	ldr	r3, [r7, #4]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_close>:

int _close(int file)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001496:	605a      	str	r2, [r3, #4]
  return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_isatty>:

int _isatty(int file)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f01f fea2 	bl	8021250 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20030000 	.word	0x20030000
 8001538:	00000400 	.word	0x00000400
 800153c:	200002f0 	.word	0x200002f0
 8001540:	200003b8 	.word	0x200003b8

08001544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_UART4_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <MX_UART4_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_UART4_Init+0x4c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_UART4_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_UART4_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_UART4_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_UART4_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_UART4_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_UART4_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_UART4_Init+0x4c>)
 80015a0:	f001 fbda 	bl	8002d58 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80015aa:	f7ff fe07 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002f4 	.word	0x200002f4
 80015b8:	40004c00 	.word	0x40004c00

080015bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12b      	bne.n	8001636 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001616:	2303      	movs	r3, #3
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001626:	2308      	movs	r3, #8
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_UART_MspInit+0x8c>)
 8001632:	f000 f98d 	bl	8001950 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40004c00 	.word	0x40004c00
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001652:	490e      	ldr	r1, [pc, #56]	; (800168c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001668:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001676:	f7ff ff65 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f01f fdef 	bl	802125c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff fcf7 	bl	8001070 <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001684:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001690:	0802c3b8 	.word	0x0802c3b8
  ldr r2, =_sbss
 8001694:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001698:	200003b4 	.word	0x200003b4

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f90d 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fe18 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f917 	bl	8001936 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 f8ed 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000208 	.word	0x20000208
 800173c:	20000210 	.word	0x20000210
 8001740:	2000020c 	.word	0x2000020c

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000210 	.word	0x20000210
 8001768:	20000338 	.word	0x20000338

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000338 	.word	0x20000338

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff47 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff5c 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffb0 	bl	80018a4 <SysTick_Config>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e177      	b.n	8001c5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8166 	bne.w	8001c56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80c0 	beq.w	8001c56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a65      	ldr	r2, [pc, #404]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a61      	ldr	r2, [pc, #388]	; (8001c78 <HAL_GPIO_Init+0x328>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_GPIO_Init+0x32c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d037      	beq.n	8001b8e <HAL_GPIO_Init+0x23e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <HAL_GPIO_Init+0x330>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d031      	beq.n	8001b8a <HAL_GPIO_Init+0x23a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d02b      	beq.n	8001b86 <HAL_GPIO_Init+0x236>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a55      	ldr	r2, [pc, #340]	; (8001c88 <HAL_GPIO_Init+0x338>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d025      	beq.n	8001b82 <HAL_GPIO_Init+0x232>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a54      	ldr	r2, [pc, #336]	; (8001c8c <HAL_GPIO_Init+0x33c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01f      	beq.n	8001b7e <HAL_GPIO_Init+0x22e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a53      	ldr	r2, [pc, #332]	; (8001c90 <HAL_GPIO_Init+0x340>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d019      	beq.n	8001b7a <HAL_GPIO_Init+0x22a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_GPIO_Init+0x344>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <HAL_GPIO_Init+0x348>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00d      	beq.n	8001b72 <HAL_GPIO_Init+0x222>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <HAL_GPIO_Init+0x34c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x21e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <HAL_GPIO_Init+0x350>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_GPIO_Init+0x21a>
 8001b66:	2309      	movs	r3, #9
 8001b68:	e012      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	e010      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b6e:	2308      	movs	r3, #8
 8001b70:	e00e      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b72:	2307      	movs	r3, #7
 8001b74:	e00c      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b76:	2306      	movs	r3, #6
 8001b78:	e00a      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	e008      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b82:	2303      	movs	r3, #3
 8001b84:	e004      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x240>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f002 0203 	and.w	r2, r2, #3
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba0:	4935      	ldr	r1, [pc, #212]	; (8001c78 <HAL_GPIO_Init+0x328>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd2:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c02:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_GPIO_Init+0x354>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	f67f ae84 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40021800 	.word	0x40021800
 8001c98:	40021c00 	.word	0x40021c00
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40022400 	.word	0x40022400
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e034      	b.n	8001d24 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f245 5255 	movw	r2, #21845	; 0x5555
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6852      	ldr	r2, [r2, #4]
 8001cd6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6892      	ldr	r2, [r2, #8]
 8001ce0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001ce2:	f7ff fd43 	bl	800176c <HAL_GetTick>
 8001ce6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001ce8:	e00f      	b.n	8001d0a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001cea:	f7ff fd3f 	bl	800176c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b31      	cmp	r3, #49	; 0x31
 8001cf6:	d908      	bls.n	8001d0a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e00c      	b.n	8001d24 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e8      	bne.n	8001cea <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_PWR_EnableBkUpAccess+0x20>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_PWR_EnableBkUpAccess+0x24>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	420e0020 	.word	0x420e0020
 8001d50:	40007000 	.word	0x40007000

08001d54 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_PWR_DisableBkUpAccess+0x20>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_PWR_DisableBkUpAccess+0x24>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	420e0020 	.word	0x420e0020
 8001d78:	40007000 	.word	0x40007000

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e267      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d075      	beq.n	8001e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d9a:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d00c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da6:	4b85      	ldr	r3, [pc, #532]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d112      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db2:	4b82      	ldr	r3, [pc, #520]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d05b      	beq.n	8001e84 <HAL_RCC_OscConfig+0x108>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d157      	bne.n	8001e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e242      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0x74>
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xb0>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x98>
 8001dfa:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6f      	ldr	r2, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a6c      	ldr	r2, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xb0>
 8001e14:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a68      	ldr	r2, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc9a 	bl	800176c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fc96 	bl	800176c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e207      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b5b      	ldr	r3, [pc, #364]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xc0>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fc86 	bl	800176c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fc82 	bl	800176c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1f3      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0xe8>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d063      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d11c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d116      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_RCC_OscConfig+0x152>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e1c7      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4937      	ldr	r1, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	e03a      	b.n	8001f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eec:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <HAL_RCC_OscConfig+0x244>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fc3b 	bl	800176c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fc37 	bl	800176c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e1a8      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4925      	ldr	r1, [pc, #148]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_OscConfig+0x244>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff fc1a 	bl	800176c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc16 	bl	800176c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e187      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d036      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d016      	beq.n	8001f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_RCC_OscConfig+0x248>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff fbfa 	bl	800176c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fbf6 	bl	800176c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e167      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_OscConfig+0x240>)
 8001f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x200>
 8001f9a:	e01b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_RCC_OscConfig+0x248>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fbe3 	bl	800176c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa8:	e00e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001faa:	f7ff fbdf 	bl	800176c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d907      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e150      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	42470000 	.word	0x42470000
 8001fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	4b88      	ldr	r3, [pc, #544]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8001fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ea      	bne.n	8001faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8097 	beq.w	8002110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe6:	4b81      	ldr	r3, [pc, #516]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b7d      	ldr	r3, [pc, #500]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a7c      	ldr	r2, [pc, #496]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200e:	2301      	movs	r3, #1
 8002010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b77      	ldr	r3, [pc, #476]	; (80021f0 <HAL_RCC_OscConfig+0x474>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201e:	4b74      	ldr	r3, [pc, #464]	; (80021f0 <HAL_RCC_OscConfig+0x474>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a73      	ldr	r2, [pc, #460]	; (80021f0 <HAL_RCC_OscConfig+0x474>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202a:	f7ff fb9f 	bl	800176c <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7ff fb9b 	bl	800176c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e10c      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x474>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x2ea>
 8002058:	4b64      	ldr	r3, [pc, #400]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a63      	ldr	r2, [pc, #396]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
 8002064:	e01c      	b.n	80020a0 <HAL_RCC_OscConfig+0x324>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b05      	cmp	r3, #5
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x30c>
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a5e      	ldr	r2, [pc, #376]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
 800207a:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a5b      	ldr	r2, [pc, #364]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0x324>
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	4a57      	ldr	r2, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6713      	str	r3, [r2, #112]	; 0x70
 8002094:	4b55      	ldr	r3, [pc, #340]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	4a54      	ldr	r2, [pc, #336]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800209a:	f023 0304 	bic.w	r3, r3, #4
 800209e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d015      	beq.n	80020d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff fb60 	bl	800176c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7ff fb5c 	bl	800176c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0cb      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	4b49      	ldr	r3, [pc, #292]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0ee      	beq.n	80020b0 <HAL_RCC_OscConfig+0x334>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff fb4a 	bl	800176c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7ff fb46 	bl	800176c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0b5      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f2:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ee      	bne.n	80020dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	4a38      	ldr	r2, [pc, #224]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a1 	beq.w	800225c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800211a:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	d05c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d141      	bne.n	80021b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b31      	ldr	r3, [pc, #196]	; (80021f4 <HAL_RCC_OscConfig+0x478>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fb1a 	bl	800176c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff fb16 	bl	800176c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e087      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69da      	ldr	r2, [r3, #28]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	019b      	lsls	r3, r3, #6
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	085b      	lsrs	r3, r3, #1
 8002172:	3b01      	subs	r3, #1
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	061b      	lsls	r3, r3, #24
 800217e:	491b      	ldr	r1, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x478>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff faef 	bl	800176c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff faeb 	bl	800176c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e05c      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x416>
 80021b0:	e054      	b.n	800225c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_RCC_OscConfig+0x478>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fad8 	bl	800176c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff fad4 	bl	800176c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e045      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_OscConfig+0x470>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x444>
 80021de:	e03d      	b.n	800225c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e038      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000
 80021f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x4ec>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d028      	beq.n	8002258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d121      	bne.n	8002258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d11a      	bne.n	8002258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800222e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002230:	4293      	cmp	r3, r2
 8002232:	d111      	bne.n	8002258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	3b01      	subs	r3, #1
 8002242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800

0800226c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0cc      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d90c      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b65      	ldr	r3, [pc, #404]	; (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b63      	ldr	r3, [pc, #396]	; (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b8      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a58      	ldr	r2, [pc, #352]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e4:	4b50      	ldr	r3, [pc, #320]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	494d      	ldr	r1, [pc, #308]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d044      	beq.n	800238c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d119      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07f      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d003      	beq.n	800232a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002326:	2b03      	cmp	r3, #3
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232a:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06f      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e067      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234a:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4934      	ldr	r1, [pc, #208]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800235c:	f7ff fa06 	bl	800176c <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7ff fa02 	bl	800176c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e04f      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 020c 	and.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	429a      	cmp	r2, r3
 800238a:	d1eb      	bne.n	8002364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d20c      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b22      	ldr	r3, [pc, #136]	; (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e032      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4916      	ldr	r1, [pc, #88]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023f2:	f000 f821 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	490a      	ldr	r1, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	5ccb      	ldrb	r3, [r1, r3]
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f966 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00
 8002428:	40023800 	.word	0x40023800
 800242c:	080294cc 	.word	0x080294cc
 8002430:	20000208 	.word	0x20000208
 8002434:	2000020c 	.word	0x2000020c

08002438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800243c:	b090      	sub	sp, #64	; 0x40
 800243e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d00d      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x40>
 800245c:	2b08      	cmp	r3, #8
 800245e:	f200 80a1 	bhi.w	80025a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x34>
 8002466:	2b04      	cmp	r3, #4
 8002468:	d003      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x3a>
 800246a:	e09b      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_GetSysClockFreq+0x184>)
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002470:	e09b      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002472:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002476:	e098      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002482:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d028      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	2200      	movs	r2, #0
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	627a      	str	r2, [r7, #36]	; 0x24
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024a0:	2100      	movs	r1, #0
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a4:	fb03 f201 	mul.w	r2, r3, r1
 80024a8:	2300      	movs	r3, #0
 80024aa:	fb00 f303 	mul.w	r3, r0, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	4a43      	ldr	r2, [pc, #268]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80024b2:	fba0 1202 	umull	r1, r2, r0, r2
 80024b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024b8:	460a      	mov	r2, r1
 80024ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80024bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024be:	4413      	add	r3, r2
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	2200      	movs	r2, #0
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	61fa      	str	r2, [r7, #28]
 80024ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024d2:	f7fd fef5 	bl	80002c0 <__aeabi_uldivmod>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4613      	mov	r3, r2
 80024dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024de:	e053      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e0:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	2200      	movs	r2, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	617a      	str	r2, [r7, #20]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024f2:	f04f 0b00 	mov.w	fp, #0
 80024f6:	4652      	mov	r2, sl
 80024f8:	465b      	mov	r3, fp
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	0159      	lsls	r1, r3, #5
 8002504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002508:	0150      	lsls	r0, r2, #5
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	ebb2 080a 	subs.w	r8, r2, sl
 8002512:	eb63 090b 	sbc.w	r9, r3, fp
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002522:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002526:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800252a:	ebb2 0408 	subs.w	r4, r2, r8
 800252e:	eb63 0509 	sbc.w	r5, r3, r9
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	00eb      	lsls	r3, r5, #3
 800253c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002540:	00e2      	lsls	r2, r4, #3
 8002542:	4614      	mov	r4, r2
 8002544:	461d      	mov	r5, r3
 8002546:	eb14 030a 	adds.w	r3, r4, sl
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	eb45 030b 	adc.w	r3, r5, fp
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255e:	4629      	mov	r1, r5
 8002560:	028b      	lsls	r3, r1, #10
 8002562:	4621      	mov	r1, r4
 8002564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002568:	4621      	mov	r1, r4
 800256a:	028a      	lsls	r2, r1, #10
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	2200      	movs	r2, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	60fa      	str	r2, [r7, #12]
 8002578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800257c:	f7fd fea0 	bl	80002c0 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4613      	mov	r3, r2
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetSysClockFreq+0x184>)
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3740      	adds	r7, #64	; 0x40
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	017d7840 	.word	0x017d7840

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000208 	.word	0x20000208

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025e0:	f7ff fff0 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	080294dc 	.word	0x080294dc

08002604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002608:	f7ff ffdc 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0b5b      	lsrs	r3, r3, #13
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	080294dc 	.word	0x080294dc

0800262c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800265c:	2b00      	cmp	r3, #0
 800265e:	d075      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002660:	4b91      	ldr	r3, [pc, #580]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002666:	f7ff f881 	bl	800176c <HAL_GetTick>
 800266a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800266e:	f7ff f87d 	bl	800176c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e189      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002680:	4b8a      	ldr	r3, [pc, #552]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	019a      	lsls	r2, r3, #6
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	071b      	lsls	r3, r3, #28
 80026a4:	4981      	ldr	r1, [pc, #516]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01f      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026b8:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	0f1b      	lsrs	r3, r3, #28
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	019a      	lsls	r2, r3, #6
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	431a      	orrs	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	071b      	lsls	r3, r3, #28
 80026d8:	4974      	ldr	r1, [pc, #464]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026e0:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e6:	f023 021f 	bic.w	r2, r3, #31
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	496e      	ldr	r1, [pc, #440]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	019a      	lsls	r2, r3, #6
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	071b      	lsls	r3, r3, #28
 8002718:	4964      	ldr	r1, [pc, #400]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002720:	4b61      	ldr	r3, [pc, #388]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002726:	f7ff f821 	bl	800176c <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800272e:	f7ff f81d 	bl	800176c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e129      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002740:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002760:	2b00      	cmp	r3, #0
 8002762:	d079      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800276a:	f7fe ffff 	bl	800176c <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002772:	f7fe fffb 	bl	800176c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e107      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002784:	4b49      	ldr	r3, [pc, #292]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800278c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002790:	d0ef      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d020      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800279e:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	0f1b      	lsrs	r3, r3, #28
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	019a      	lsls	r2, r3, #6
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	431a      	orrs	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	071b      	lsls	r3, r3, #28
 80027be:	493b      	ldr	r1, [pc, #236]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	0e1b      	lsrs	r3, r3, #24
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	019a      	lsls	r2, r3, #6
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	071b      	lsls	r3, r3, #28
 800280c:	4927      	ldr	r1, [pc, #156]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	4922      	ldr	r1, [pc, #136]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002830:	f7fe ff9c 	bl	800176c <HAL_GetTick>
 8002834:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002838:	f7fe ff98 	bl	800176c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0a4      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002856:	d1ef      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 808b 	beq.w	800297c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800288e:	f7fe ff6d 	bl	800176c <HAL_GetTick>
 8002892:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002894:	e010      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7fe ff69 	bl	800176c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d909      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e075      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80028a8:	42470068 	.word	0x42470068
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470070 	.word	0x42470070
 80028b4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028b8:	4b38      	ldr	r3, [pc, #224]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0e8      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02f      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d028      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028f8:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d114      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe ff2f 	bl	800176c <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe ff2b 	bl	800176c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e035      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002940:	d10d      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002956:	4912      	ldr	r1, [pc, #72]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	e005      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002964:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002968:	6093      	str	r3, [r2, #8]
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800296c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002976:	490a      	ldr	r1, [pc, #40]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002978:	4313      	orrs	r3, r2
 800297a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002990:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40007000 	.word	0x40007000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	42470e40 	.word	0x42470e40
 80029a8:	424711e0 	.word	0x424711e0

080029ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e01c      	b.n	80029f8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	795b      	ldrb	r3, [r3, #5]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fc0e 	bl	80011f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0204 	orr.w	r2, r2, #4
 80029e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e01c      	b.n	8002a4c <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 020c 	bic.w	r2, r2, #12
 8002a20:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a30:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fbfe 	bl	8001234 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	791b      	ldrb	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_RNG_GenerateRandomNumber+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e044      	b.n	8002af8 <HAL_RNG_GenerateRandomNumber+0xa4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	795b      	ldrb	r3, [r3, #5]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d133      	bne.n	8002ae6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a84:	f7fe fe72 	bl	800176c <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a8a:	e018      	b.n	8002abe <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a8c:	f7fe fe6e 	bl	800176c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d911      	bls.n	8002abe <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d00a      	beq.n	8002abe <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e01c      	b.n	8002af8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d1df      	bne.n	8002a8c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	715a      	strb	r2, [r3, #5]
 8002ae4:	e004      	b.n	8002af0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	711a      	strb	r2, [r3, #4]

  return status;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e066      	b.n	8002be4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7f5b      	ldrb	r3, [r3, #29]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fbc4 	bl	80012b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	22ca      	movs	r2, #202	; 0xca
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2253      	movs	r2, #83	; 0x53
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f87a 	bl	8002c3c <RTC_EnterInitMode>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d12c      	bne.n	8002bac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b64:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68d2      	ldr	r2, [r2, #12]
 8002b8c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6919      	ldr	r1, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f881 	bl	8002caa <RTC_ExitInitMode>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d113      	bne.n	8002bda <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c06:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c08:	f7fe fdb0 	bl	800176c <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c10:	f7fe fdac 	bl	800176c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1e:	d901      	bls.n	8002c24 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e007      	b.n	8002c34 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d122      	bne.n	8002ca0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c68:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6a:	f7fe fd7f 	bl	800176c <HAL_GetTick>
 8002c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c70:	e00c      	b.n	8002c8c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c72:	f7fe fd7b 	bl	800176c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c80:	d904      	bls.n	8002c8c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2204      	movs	r2, #4
 8002c86:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <RTC_EnterInitMode+0x64>
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d1e8      	bne.n	8002c72 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff89 	bl	8002bec <HAL_RTC_WaitForSynchro>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3350      	adds	r3, #80	; 0x50
 8002d0a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	601a      	str	r2, [r3, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3350      	adds	r3, #80	; 0x50
 8002d3c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e03f      	b.n	8002dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fc1c 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f829 	bl	8002df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b0c0      	sub	sp, #256	; 0x100
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	68d9      	ldr	r1, [r3, #12]
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	ea40 0301 	orr.w	r3, r0, r1
 8002e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e4c:	f021 010c 	bic.w	r1, r1, #12
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	6999      	ldr	r1, [r3, #24]
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	ea40 0301 	orr.w	r3, r0, r1
 8002e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b8f      	ldr	r3, [pc, #572]	; (80030c0 <UART_SetConfig+0x2cc>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d005      	beq.n	8002e94 <UART_SetConfig+0xa0>
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b8d      	ldr	r3, [pc, #564]	; (80030c4 <UART_SetConfig+0x2d0>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d104      	bne.n	8002e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e94:	f7ff fbb6 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8002e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e9c:	e003      	b.n	8002ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e9e:	f7ff fb9d 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8002ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb0:	f040 810c 	bne.w	80030cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	1891      	adds	r1, r2, r2
 8002ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ece:	415b      	adcs	r3, r3
 8002ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	eb12 0801 	adds.w	r8, r2, r1
 8002edc:	4629      	mov	r1, r5
 8002ede:	eb43 0901 	adc.w	r9, r3, r1
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef6:	4690      	mov	r8, r2
 8002ef8:	4699      	mov	r9, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	eb18 0303 	adds.w	r3, r8, r3
 8002f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f04:	462b      	mov	r3, r5
 8002f06:	eb49 0303 	adc.w	r3, r9, r3
 8002f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f22:	460b      	mov	r3, r1
 8002f24:	18db      	adds	r3, r3, r3
 8002f26:	653b      	str	r3, [r7, #80]	; 0x50
 8002f28:	4613      	mov	r3, r2
 8002f2a:	eb42 0303 	adc.w	r3, r2, r3
 8002f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f38:	f7fd f9c2 	bl	80002c0 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <UART_SetConfig+0x2d4>)
 8002f42:	fba3 2302 	umull	r2, r3, r3, r2
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	011c      	lsls	r4, r3, #4
 8002f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	1891      	adds	r1, r2, r2
 8002f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f64:	415b      	adcs	r3, r3
 8002f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f72:	4649      	mov	r1, r9
 8002f74:	eb43 0b01 	adc.w	fp, r3, r1
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f8c:	4692      	mov	sl, r2
 8002f8e:	469b      	mov	fp, r3
 8002f90:	4643      	mov	r3, r8
 8002f92:	eb1a 0303 	adds.w	r3, sl, r3
 8002f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	18db      	adds	r3, r3, r3
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	eb42 0303 	adc.w	r3, r2, r3
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fce:	f7fd f977 	bl	80002c0 <__aeabi_uldivmod>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <UART_SetConfig+0x2d4>)
 8002fda:	fba3 2301 	umull	r2, r3, r3, r1
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2264      	movs	r2, #100	; 0x64
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	1acb      	subs	r3, r1, r3
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <UART_SetConfig+0x2d4>)
 8002ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ffc:	441c      	add	r4, r3
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800300c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003010:	4642      	mov	r2, r8
 8003012:	464b      	mov	r3, r9
 8003014:	1891      	adds	r1, r2, r2
 8003016:	63b9      	str	r1, [r7, #56]	; 0x38
 8003018:	415b      	adcs	r3, r3
 800301a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003020:	4641      	mov	r1, r8
 8003022:	1851      	adds	r1, r2, r1
 8003024:	6339      	str	r1, [r7, #48]	; 0x30
 8003026:	4649      	mov	r1, r9
 8003028:	414b      	adcs	r3, r1
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003038:	4659      	mov	r1, fp
 800303a:	00cb      	lsls	r3, r1, #3
 800303c:	4651      	mov	r1, sl
 800303e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003042:	4651      	mov	r1, sl
 8003044:	00ca      	lsls	r2, r1, #3
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	4603      	mov	r3, r0
 800304c:	4642      	mov	r2, r8
 800304e:	189b      	adds	r3, r3, r2
 8003050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003054:	464b      	mov	r3, r9
 8003056:	460a      	mov	r2, r1
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800306c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003074:	460b      	mov	r3, r1
 8003076:	18db      	adds	r3, r3, r3
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
 800307a:	4613      	mov	r3, r2
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800308a:	f7fd f919 	bl	80002c0 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <UART_SetConfig+0x2d4>)
 8003094:	fba3 1302 	umull	r1, r3, r3, r2
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	2164      	movs	r1, #100	; 0x64
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	3332      	adds	r3, #50	; 0x32
 80030a6:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <UART_SetConfig+0x2d4>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	f003 0207 	and.w	r2, r3, #7
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4422      	add	r2, r4
 80030ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030bc:	e105      	b.n	80032ca <UART_SetConfig+0x4d6>
 80030be:	bf00      	nop
 80030c0:	40011000 	.word	0x40011000
 80030c4:	40011400 	.word	0x40011400
 80030c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030de:	4642      	mov	r2, r8
 80030e0:	464b      	mov	r3, r9
 80030e2:	1891      	adds	r1, r2, r2
 80030e4:	6239      	str	r1, [r7, #32]
 80030e6:	415b      	adcs	r3, r3
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ee:	4641      	mov	r1, r8
 80030f0:	1854      	adds	r4, r2, r1
 80030f2:	4649      	mov	r1, r9
 80030f4:	eb43 0501 	adc.w	r5, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	00eb      	lsls	r3, r5, #3
 8003102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003106:	00e2      	lsls	r2, r4, #3
 8003108:	4614      	mov	r4, r2
 800310a:	461d      	mov	r5, r3
 800310c:	4643      	mov	r3, r8
 800310e:	18e3      	adds	r3, r4, r3
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003114:	464b      	mov	r3, r9
 8003116:	eb45 0303 	adc.w	r3, r5, r3
 800311a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800312a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800313a:	4629      	mov	r1, r5
 800313c:	008b      	lsls	r3, r1, #2
 800313e:	4621      	mov	r1, r4
 8003140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003144:	4621      	mov	r1, r4
 8003146:	008a      	lsls	r2, r1, #2
 8003148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800314c:	f7fd f8b8 	bl	80002c0 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <UART_SetConfig+0x4e4>)
 8003156:	fba3 2302 	umull	r2, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	011c      	lsls	r4, r3, #4
 800315e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800316c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	1891      	adds	r1, r2, r2
 8003176:	61b9      	str	r1, [r7, #24]
 8003178:	415b      	adcs	r3, r3
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003180:	4641      	mov	r1, r8
 8003182:	1851      	adds	r1, r2, r1
 8003184:	6139      	str	r1, [r7, #16]
 8003186:	4649      	mov	r1, r9
 8003188:	414b      	adcs	r3, r1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003198:	4659      	mov	r1, fp
 800319a:	00cb      	lsls	r3, r1, #3
 800319c:	4651      	mov	r1, sl
 800319e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a2:	4651      	mov	r1, sl
 80031a4:	00ca      	lsls	r2, r1, #3
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	4642      	mov	r2, r8
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031b4:	464b      	mov	r3, r9
 80031b6:	460a      	mov	r2, r1
 80031b8:	eb42 0303 	adc.w	r3, r2, r3
 80031bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031d8:	4649      	mov	r1, r9
 80031da:	008b      	lsls	r3, r1, #2
 80031dc:	4641      	mov	r1, r8
 80031de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e2:	4641      	mov	r1, r8
 80031e4:	008a      	lsls	r2, r1, #2
 80031e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031ea:	f7fd f869 	bl	80002c0 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <UART_SetConfig+0x4e4>)
 80031f4:	fba3 1302 	umull	r1, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	2164      	movs	r1, #100	; 0x64
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	3332      	adds	r3, #50	; 0x32
 8003206:	4a34      	ldr	r2, [pc, #208]	; (80032d8 <UART_SetConfig+0x4e4>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003212:	441c      	add	r4, r3
 8003214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003218:	2200      	movs	r2, #0
 800321a:	673b      	str	r3, [r7, #112]	; 0x70
 800321c:	677a      	str	r2, [r7, #116]	; 0x74
 800321e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003222:	4642      	mov	r2, r8
 8003224:	464b      	mov	r3, r9
 8003226:	1891      	adds	r1, r2, r2
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	415b      	adcs	r3, r3
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003232:	4641      	mov	r1, r8
 8003234:	1851      	adds	r1, r2, r1
 8003236:	6039      	str	r1, [r7, #0]
 8003238:	4649      	mov	r1, r9
 800323a:	414b      	adcs	r3, r1
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800324a:	4659      	mov	r1, fp
 800324c:	00cb      	lsls	r3, r1, #3
 800324e:	4651      	mov	r1, sl
 8003250:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003254:	4651      	mov	r1, sl
 8003256:	00ca      	lsls	r2, r1, #3
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	4603      	mov	r3, r0
 800325e:	4642      	mov	r2, r8
 8003260:	189b      	adds	r3, r3, r2
 8003262:	66bb      	str	r3, [r7, #104]	; 0x68
 8003264:	464b      	mov	r3, r9
 8003266:	460a      	mov	r2, r1
 8003268:	eb42 0303 	adc.w	r3, r2, r3
 800326c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	663b      	str	r3, [r7, #96]	; 0x60
 8003278:	667a      	str	r2, [r7, #100]	; 0x64
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003286:	4649      	mov	r1, r9
 8003288:	008b      	lsls	r3, r1, #2
 800328a:	4641      	mov	r1, r8
 800328c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003290:	4641      	mov	r1, r8
 8003292:	008a      	lsls	r2, r1, #2
 8003294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003298:	f7fd f812 	bl	80002c0 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <UART_SetConfig+0x4e4>)
 80032a2:	fba3 1302 	umull	r1, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2164      	movs	r1, #100	; 0x64
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <UART_SetConfig+0x4e4>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4422      	add	r2, r4
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	bf00      	nop
 80032cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032d0:	46bd      	mov	sp, r7
 80032d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032d6:	bf00      	nop
 80032d8:	51eb851f 	.word	0x51eb851f

080032dc <ForceZero>:

#ifndef WOLFSSL_NO_FORCE_ZERO
/* This routine fills the first len bytes of the memory area pointed by mem
   with zeros. It ensures compiler optimizations doesn't skip it  */
WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 80032ea:	e004      	b.n	80032f6 <ForceZero+0x1a>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	60fa      	str	r2, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	603a      	str	r2, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f5      	bne.n	80032ec <ForceZero+0x10>
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <min>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    /* returns the smaller of a and b */
    WC_STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	4293      	cmp	r3, r2
 800331e:	bf28      	it	cs
 8003320:	4613      	movcs	r3, r2
    }
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <IsAtLeastTLSv1_3>:

    return 0;
}

int IsAtLeastTLSv1_3(const ProtocolVersion pv)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	80b8      	strh	r0, [r7, #4]
    int ret;
    ret = (pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_3_MINOR);
 8003336:	793b      	ldrb	r3, [r7, #4]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d104      	bne.n	8003346 <IsAtLeastTLSv1_3+0x18>
 800333c:	797b      	ldrb	r3, [r7, #5]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d901      	bls.n	8003346 <IsAtLeastTLSv1_3+0x18>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <IsAtLeastTLSv1_3+0x1a>
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
#ifdef WOLFSSL_DTLS13
    if (ret == 0 && pv.major == DTLS_MAJOR && pv.minor <= DTLSv1_3_MINOR)
        return 1;
#endif

    return ret;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <InitSSL_Method>:
}
#endif /* WOLFSSL_SESSION_EXPORT */


void InitSSL_Method(WOLFSSL_METHOD* method, ProtocolVersion pv)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	8039      	strh	r1, [r7, #0]
    method->version    = pv;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	461a      	mov	r2, r3
 8003366:	463b      	mov	r3, r7
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	8013      	strh	r3, [r2, #0]
    method->side       = WOLFSSL_CLIENT_END;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	709a      	strb	r2, [r3, #2]
    method->downgrade  = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	70da      	strb	r2, [r3, #3]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <InitSSL_Ctx>:
}
#endif /* OPENSSL_EXTRA || WOLFSSL_EITHER_SIDE */

/* Initialize SSL context, return 0 on success */
int InitSSL_Ctx(WOLFSSL_CTX* ctx, WOLFSSL_METHOD* method, void* heap)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]

    XMEMSET(ctx, 0, sizeof(WOLFSSL_CTX));
 8003394:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8003398:	2100      	movs	r1, #0
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f01d ffca 	bl	8021334 <memset>

    ctx->method   = method;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	601a      	str	r2, [r3, #0]
    ctx->refCount = 1;          /* so either CTX_free or SSL_free can release */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	60da      	str	r2, [r3, #12]
    ctx->heap     = ctx;        /* defaults to self */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	659a      	str	r2, [r3, #88]	; 0x58
    ctx->timeout  = WOLFSSL_SESSION_TIMEOUT;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }
    else
#endif /* WOLFSSL_DTLS */
    {
        /* current default: TLSv1_MINOR */
        ctx->minDowngrade = WOLFSSL_MIN_DOWNGRADE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2203      	movs	r2, #3
 80033c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }

    if (wc_InitMutex(&ctx->countMutex) < 0) {
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3308      	adds	r3, #8
 80033c8:	4618      	mov	r0, r3
 80033ca:	f01d fd93 	bl	8020ef4 <wc_InitMutex>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	da06      	bge.n	80033e2 <InitSSL_Ctx+0x5e>
        WOLFSSL_MSG("Mutex error on CTX init");
        ctx->err = CTX_INIT_MUTEX_E;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f46f 72ce 	mvn.w	r2, #412	; 0x19c
 80033da:	611a      	str	r2, [r3, #16]
        WOLFSSL_ERROR_VERBOSE(BAD_MUTEX_E);
        return BAD_MUTEX_E;
 80033dc:	f06f 0369 	mvn.w	r3, #105	; 0x69
 80033e0:	e0ca      	b.n	8003578 <InitSSL_Ctx+0x1f4>
    }

#ifndef NO_CERTS
    ctx->privateKeyDevId = INVALID_DEVID;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f06f 0201 	mvn.w	r2, #1
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
#ifndef NO_DH
    ctx->minDhKeySz  = MIN_DHKEY_SZ;
    ctx->maxDhKeySz  = MAX_DHKEY_SZ;
#endif
#ifndef NO_RSA
    ctx->minRsaKeySz = MIN_RSAKEY_SZ;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
#endif
#ifdef HAVE_ECC
    ctx->minEccKeySz  = MIN_ECCKEY_SZ;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	221c      	movs	r2, #28
 80033f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    ctx->eccTempKeySz = ECDHE_SIZE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
#endif /* HAVE_FALCON */
#ifdef HAVE_DILITHIUM
    ctx->minDilithiumKeySz = MIN_DILITHIUMKEY_SZ;
#endif /* HAVE_DILITHIUM */
#endif /* HAVE_PQC */
    ctx->verifyDepth = MAX_CHAIN_DEPTH;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2209      	movs	r2, #9
 8003406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef OPENSSL_EXTRA
    ctx->cbioFlag = WOLFSSL_CBIO_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        ctx->haveDilithiumSig = 1;     /* always on client side */
                                       /* server can turn on by loading key */
#endif /* HAVE_DILITHIUM */
#endif /* HAVE_PQC */
#ifdef HAVE_ECC
    if (method->side == WOLFSSL_CLIENT_END) {
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	789b      	ldrb	r3, [r3, #2]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d114      	bne.n	8003444 <InitSSL_Ctx+0xc0>
        ctx->haveECDSAsig  = 1;        /* always on client side */
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
        ctx->haveECC  = 1;             /* server turns on with ECC key cert */
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
        ctx->haveStaticECC = 1;        /* server can turn on by loading key */
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 800343c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003440:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e

#ifdef WOLFSSL_QNX_CAAM
    /* default to try using CAAM when built */
    ctx->devId = WOLFSSL_CAAM_DEVID;
#else
    ctx->devId = INVALID_DEVID;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f06f 0201 	mvn.w	r2, #1
 800344a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        ctx->dtlsMtuSz = MAX_MTU;
    #endif
#endif

#ifndef NO_CERTS
    ctx->cm = wolfSSL_CertManagerNew_ex(heap);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f003 fb58 	bl	8006b04 <wolfSSL_CertManagerNew_ex>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	649a      	str	r2, [r3, #72]	; 0x48
    if (ctx->cm == NULL) {
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <InitSSL_Ctx+0xe4>
        WOLFSSL_MSG("Bad Cert Manager New");
        WOLFSSL_ERROR_VERBOSE(BAD_CERT_MANAGER_ERROR);
        return BAD_CERT_MANAGER_ERROR;
 8003462:	f46f 73b3 	mvn.w	r3, #358	; 0x166
 8003466:	e087      	b.n	8003578 <InitSSL_Ctx+0x1f4>
    }
    #ifdef OPENSSL_EXTRA
    /* setup WOLFSSL_X509_STORE */
    ctx->x509_store.cm = ctx->cm;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    /* set pointer back to x509 store */
    ctx->cm->x509_store_p = &ctx->x509_store;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	32f4      	adds	r2, #244	; 0xf4
 800347a:	661a      	str	r2, [r3, #96]	; 0x60

    /* WOLFSSL_X509_VERIFY_PARAM */
    if ((ctx->param = (WOLFSSL_X509_VERIFY_PARAM*)XMALLOC(
 800347c:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8003480:	f015 fb94 	bl	8018bac <wolfSSL_Malloc>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <InitSSL_Ctx+0x118>
                           sizeof(WOLFSSL_X509_VERIFY_PARAM),
                           heap, DYNAMIC_TYPE_OPENSSL)) == NULL) {
        WOLFSSL_MSG("ctx->param memory error");
        return MEMORY_E;
 8003496:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800349a:	e06d      	b.n	8003578 <InitSSL_Ctx+0x1f4>
    }
    XMEMSET(ctx->param, 0, sizeof(WOLFSSL_X509_VERIFY_PARAM));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f01d ff43 	bl	8021334 <memset>
    /* WOLFSSL_X509_LOOKUP */
    if ((ctx->x509_store.lookup.dirs =
                            (WOLFSSL_BY_DIR*)XMALLOC(sizeof(WOLFSSL_BY_DIR),
 80034ae:	2008      	movs	r0, #8
 80034b0:	f015 fb7c 	bl	8018bac <wolfSSL_Malloc>
 80034b4:	4602      	mov	r2, r0
    if ((ctx->x509_store.lookup.dirs =
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d110      	bne.n	80034e8 <InitSSL_Ctx+0x164>
                            heap, DYNAMIC_TYPE_OPENSSL)) == NULL) {
        WOLFSSL_MSG("ctx-x509_store.lookup.dir memory allocation error");
        XFREE(ctx->param, heap, DYNAMIC_TYPE_OPENSSL);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <InitSSL_Ctx+0x156>
 80034d4:	6938      	ldr	r0, [r7, #16]
 80034d6:	f015 fb85 	bl	8018be4 <wolfSSL_Free>
        ctx->param = NULL;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        return MEMORY_E;
 80034e2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80034e6:	e047      	b.n	8003578 <InitSSL_Ctx+0x1f4>
    }
    XMEMSET(ctx->x509_store.lookup.dirs, 0, sizeof(WOLFSSL_BY_DIR));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80034ee:	2208      	movs	r2, #8
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f01d ff1e 	bl	8021334 <memset>
    if (wc_InitMutex(&ctx->x509_store.lookup.dirs->lock) != 0) {
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80034fe:	3304      	adds	r3, #4
 8003500:	4618      	mov	r0, r3
 8003502:	f01d fcf7 	bl	8020ef4 <wc_InitMutex>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01e      	beq.n	800354a <InitSSL_Ctx+0x1c6>
        WOLFSSL_MSG("Bad mutex init");
        XFREE(ctx->param, heap, DYNAMIC_TYPE_OPENSSL);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <InitSSL_Ctx+0x19c>
 800351a:	69b8      	ldr	r0, [r7, #24]
 800351c:	f015 fb62 	bl	8018be4 <wolfSSL_Free>
        ctx->param = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        XFREE(ctx->x509_store.lookup.dirs, heap, DYNAMIC_TYPE_OPENSSL);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <InitSSL_Ctx+0x1b8>
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f015 fb54 	bl	8018be4 <wolfSSL_Free>
        ctx->x509_store.lookup.dirs = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        WOLFSSL_ERROR_VERBOSE(BAD_MUTEX_E);
        return BAD_MUTEX_E;
 8003544:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8003548:	e016      	b.n	8003578 <InitSSL_Ctx+0x1f4>
    }
    #endif
#endif

#if defined(HAVE_EXTENDED_MASTER) && !defined(NO_WOLFSSL_CLIENT)
    if (method->side == WOLFSSL_CLIENT_END) {
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	789b      	ldrb	r3, [r3, #2]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10e      	bne.n	8003570 <InitSSL_Ctx+0x1ec>
        if ((method->version.major == SSLv3_MAJOR) &&
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d10a      	bne.n	8003570 <InitSSL_Ctx+0x1ec>
             (method->version.minor >= TLSv1_MINOR)) {
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	785b      	ldrb	r3, [r3, #1]
        if ((method->version.major == SSLv3_MAJOR) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <InitSSL_Ctx+0x1ec>

            ctx->haveEMS = 1;
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f892 3061 	ldrb.w	r3, [r2, #97]	; 0x61
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
     * Qt doesn't allow to use a cipher if it is not in the supported list.
     * Therefore, we need to enable PSK cipher at the beginning.
     */
    ctx->havePSK = 1;
#endif
    ctx->heap = heap; /* wolfSSL_CTX_load_static_memory sets */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	659a      	str	r2, [r3, #88]	; 0x58
    /* Let maxq10xx know what TLS version we are using. */
    ctx->devId = MAXQ_DEVICE_ID;
    maxq10xx_SetupPkCallbacks(ctx, &method->version);
#endif /* WOLFSSL_MAXQ10XX_TLS */

    return ret;
 8003576:	69fb      	ldr	r3, [r7, #28]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <SSL_CtxResourceFree>:
 * logic. A WOLFSSL_CTX can be assigned a static memory heap hint using
 * wolfSSL_CTX_load_static_memory after CTX creation, which means variables
 * allocated in InitSSL_Ctx were allocated from heap and should be free'd with
 * a NULL heap hint. */
void SSL_CtxResourceFree(WOLFSSL_CTX* ctx)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
#if defined(HAVE_CERTIFICATE_STATUS_REQUEST_V2) && \
                     defined(HAVE_TLS_EXTENSIONS) && !defined(NO_WOLFSSL_SERVER)
    int i;
#endif
    void* heapAtCTXInit = ctx->heap;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef HAVE_WOLF_EVENT
    wolfEventQueue_Free(&ctx->event_queue);
#endif /* HAVE_WOLF_EVENT */

    XFREE(ctx->method, heapAtCTXInit, DYNAMIC_TYPE_METHOD);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <SSL_CtxResourceFree+0x20>
 800359a:	6a38      	ldr	r0, [r7, #32]
 800359c:	f015 fb22 	bl	8018be4 <wolfSSL_Free>
    ctx->method = NULL;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

    if (ctx->suites) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <SSL_CtxResourceFree+0x46>
        XFREE(ctx->suites, ctx->heap, DYNAMIC_TYPE_SUITES);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <SSL_CtxResourceFree+0x40>
 80035ba:	69f8      	ldr	r0, [r7, #28]
 80035bc:	f015 fb12 	bl	8018be4 <wolfSSL_Free>
        ctx->suites = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
    XFREE(ctx->serverDH_P.buffer, ctx->heap, DYNAMIC_TYPE_PUBLIC_KEY);
    ctx->serverDH_P.buffer = NULL;
#endif /* !NO_DH */

#ifdef SINGLE_THREADED
    if (ctx->rng) {
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d010      	beq.n	80035f0 <SSL_CtxResourceFree+0x70>
        wc_FreeRng(ctx->rng);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f016 f95a 	bl	801988c <wc_FreeRng>
        XFREE(ctx->rng, ctx->heap, DYNAMIC_TYPE_RNG);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <SSL_CtxResourceFree+0x6a>
 80035e4:	69b8      	ldr	r0, [r7, #24]
 80035e6:	f015 fafd 	bl	8018be4 <wolfSSL_Free>
        ctx->rng = NULL;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	605a      	str	r2, [r3, #4]
    }
#endif /* SINGLE_THREADED */

#ifndef NO_CERTS
    if (ctx->privateKey != NULL && ctx->privateKey->buffer != NULL) {
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <SSL_CtxResourceFree+0x96>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <SSL_CtxResourceFree+0x96>
        ForceZero(ctx->privateKey->buffer, ctx->privateKey->length);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7ff fe63 	bl	80032dc <ForceZero>
    }
    FreeDer(&ctx->privateKey);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3334      	adds	r3, #52	; 0x34
 800361a:	4618      	mov	r0, r3
 800361c:	f00f fec8 	bl	80133b0 <FreeDer>
#ifdef OPENSSL_ALL
    wolfSSL_EVP_PKEY_free(ctx->privateKeyPKey);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	4618      	mov	r0, r3
 8003626:	f002 fa32 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
#endif
    FreeDer(&ctx->certificate);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3314      	adds	r3, #20
 800362e:	4618      	mov	r0, r3
 8003630:	f00f febe 	bl	80133b0 <FreeDer>
    #ifdef KEEP_OUR_CERT
        if (ctx->ourCert && ctx->ownOurCert) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <SSL_CtxResourceFree+0xd4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <SSL_CtxResourceFree+0xd4>
            wolfSSL_X509_free(ctx->ourCert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003648:	4618      	mov	r0, r3
 800364a:	f006 fe9c 	bl	800a386 <wolfSSL_X509_free>
            ctx->ourCert = NULL;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* KEEP_OUR_CERT */
    FreeDer(&ctx->certChain);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3318      	adds	r3, #24
 8003658:	4618      	mov	r0, r3
 800365a:	f00f fea9 	bl	80133b0 <FreeDer>
    wolfSSL_CertManagerFree(ctx->cm);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003662:	4618      	mov	r0, r3
 8003664:	f003 fa86 	bl	8006b74 <wolfSSL_CertManagerFree>
    ctx->cm = NULL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	649a      	str	r2, [r3, #72]	; 0x48
    #ifdef OPENSSL_ALL
        if (ctx->x509_store.objs != NULL) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <SSL_CtxResourceFree+0x10e>
            wolfSSL_sk_X509_OBJECT_pop_free(ctx->x509_store.objs, NULL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f007 fc62 	bl	800af4a <wolfSSL_sk_X509_OBJECT_pop_free>
            ctx->x509_store.objs = NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
    #endif
    #if defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER) || \
        defined(WOLFSSL_WPAS_SMALL)
        wolfSSL_X509_STORE_free(ctx->x509_store_pt);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003694:	4618      	mov	r0, r3
 8003696:	f007 fe89 	bl	800b3ac <wolfSSL_X509_STORE_free>
    #endif
    #if defined(OPENSSL_EXTRA) || defined(WOLFSSL_EXTRA) || defined(HAVE_LIGHTY)
        wolfSSL_sk_X509_NAME_pop_free(ctx->ca_names, NULL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f007 fbe8 	bl	800ae76 <wolfSSL_sk_X509_NAME_pop_free>
        ctx->ca_names = NULL;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	61da      	str	r2, [r3, #28]
    #endif
    #ifdef OPENSSL_EXTRA
        if (ctx->x509Chain) {
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <SSL_CtxResourceFree+0x146>
            wolfSSL_sk_X509_pop_free(ctx->x509Chain, NULL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f006 fe6e 	bl	800a39c <wolfSSL_sk_X509_pop_free>
            ctx->x509Chain = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
    #endif
#endif /* !NO_CERTS */

#ifdef HAVE_TLS_EXTENSIONS
#if !defined(NO_TLS)
    TLSX_FreeAll(ctx->extensions, ctx->heap);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f007 ffda 	bl	800b68c <TLSX_FreeAll>
#endif /* HAVE_CERTIFICATE_STATUS_REQUEST_V2 */
#endif /* !NO_WOLFSSL_SERVER */

#endif /* HAVE_TLS_EXTENSIONS */
#ifdef OPENSSL_EXTRA
    if (ctx->alpn_cli_protos) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <SSL_CtxResourceFree+0x17e>
        XFREE((void*)ctx->alpn_cli_protos, ctx->heap, DYNAMIC_TYPE_OPENSSL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <SSL_CtxResourceFree+0x176>
 80036f0:	6978      	ldr	r0, [r7, #20]
 80036f2:	f015 fa77 	bl	8018be4 <wolfSSL_Free>
        ctx->alpn_cli_protos = NULL;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }
    if (ctx->param) {
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <SSL_CtxResourceFree+0x1a4>
        XFREE(ctx->param, heapAtCTXInit, DYNAMIC_TYPE_OPENSSL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <SSL_CtxResourceFree+0x19c>
 8003716:	6938      	ldr	r0, [r7, #16]
 8003718:	f015 fa64 	bl	8018be4 <wolfSSL_Free>
        ctx->param = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    }

    if (ctx->x509_store.lookup.dirs) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <SSL_CtxResourceFree+0x1d0>
        if (ctx->x509_store.lookup.dirs->dir_entry) {
            wolfSSL_sk_BY_DIR_entry_free(ctx->x509_store.lookup.dirs->dir_entry);
        }

#endif
        wc_FreeMutex(&ctx->x509_store.lookup.dirs->lock);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003734:	3304      	adds	r3, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f01d fbe7 	bl	8020f0a <wc_FreeMutex>
        XFREE(ctx->x509_store.lookup.dirs, heapAtCTXInit, DYNAMIC_TYPE_OPENSSL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <SSL_CtxResourceFree+0x1d0>
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f015 fa4a 	bl	8018be4 <wolfSSL_Free>
        ctx->staticKELockInit = 0;
    }
    #endif
#endif
    (void)heapAtCTXInit;
}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <FreeSSL_Ctx>:
    }
}
#endif /* WOLFSSL_STATIC_MEMORY */

void FreeSSL_Ctx(WOLFSSL_CTX* ctx)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    int refCount;
    void* heap = ctx->heap;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	617b      	str	r3, [r7, #20]
        heap = NULL;
    }
#endif

    /* decrement CTX reference count */
    if ((refCount = SSL_CTX_RefCount(ctx, -1)) < 0) {
 8003766:	f04f 31ff 	mov.w	r1, #4294967295
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fbb3 	bl	8003ed6 <SSL_CTX_RefCount>
 8003770:	6138      	str	r0, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	da11      	bge.n	800379c <FreeSSL_Ctx+0x44>
        /* check error state, if mutex error code then mutex init failed but
         * CTX was still malloc'd */
        if (ctx->err == CTX_INIT_MUTEX_E) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f46f 72ce 	mvn.w	r2, #412	; 0x19c
 8003780:	4293      	cmp	r3, r2
 8003782:	d11f      	bne.n	80037c4 <FreeSSL_Ctx+0x6c>
            SSL_CtxResourceFree(ctx);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fefb 	bl	8003580 <SSL_CtxResourceFree>
            XFREE(ctx, heap, DYNAMIC_TYPE_CTX);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <FreeSSL_Ctx+0x6c>
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f015 fa25 	bl	8018be4 <wolfSSL_Free>
        #ifdef WOLFSSL_STATIC_MEMORY
            SSL_CtxResourceFreeStaticMem(heap);
        #endif
        }
        return;
 800379a:	e013      	b.n	80037c4 <FreeSSL_Ctx+0x6c>
    }

    if (refCount == 0) {
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d111      	bne.n	80037c6 <FreeSSL_Ctx+0x6e>
        WOLFSSL_MSG("CTX ref count down to 0, doing full free");

        SSL_CtxResourceFree(ctx);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff feec 	bl	8003580 <SSL_CtxResourceFree>
#if defined(HAVE_SESSION_TICKET) && !defined(NO_WOLFSSL_SERVER) && \
    !defined(WOLFSSL_NO_DEF_TICKET_ENC_CB)
        TicketEncCbCtx_Free(&ctx->ticketKeyCtx);
#endif
        wc_FreeMutex(&ctx->countMutex);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3308      	adds	r3, #8
 80037ac:	4618      	mov	r0, r3
 80037ae:	f01d fbac 	bl	8020f0a <wc_FreeMutex>
        XFREE(ctx, heap, DYNAMIC_TYPE_CTX);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <FreeSSL_Ctx+0x6e>
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f015 fa11 	bl	8018be4 <wolfSSL_Free>
 80037c2:	e000      	b.n	80037c6 <FreeSSL_Ctx+0x6e>
        return;
 80037c4:	bf00      	nop
    }
    else {
        WOLFSSL_MSG("CTX ref count not 0 yet, no free");
    }
    (void)heap; /* not used in some builds */
}
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <FreeCiphers>:
}


/* Free ciphers */
void FreeCiphers(WOLFSSL* ssl)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    XFREE(ssl->decrypt.des3, ssl->heap, DYNAMIC_TYPE_CIPHER);
#endif
#if defined(BUILD_AES) || defined(BUILD_AESGCM) /* See: InitKeys() in keys.c
                                                 * on addition of BUILD_AESGCM
                                                 * check (enc->aes, dec->aes) */
    wc_AesFree(ssl->encrypt.aes);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80037da:	4618      	mov	r0, r3
 80037dc:	f009 fe69 	bl	800d4b2 <wc_AesFree>
    wc_AesFree(ssl->decrypt.aes);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80037e6:	4618      	mov	r0, r3
 80037e8:	f009 fe63 	bl	800d4b2 <wc_AesFree>
    #if (defined(BUILD_AESGCM) || defined(HAVE_AESCCM)) && \
                                                      !defined(WOLFSSL_NO_TLS12)
        XFREE(ssl->decrypt.additional, ssl->heap, DYNAMIC_TYPE_AES_BUFFER);
        XFREE(ssl->encrypt.additional, ssl->heap, DYNAMIC_TYPE_AES_BUFFER);
    #endif
    XFREE(ssl->encrypt.aes, ssl->heap, DYNAMIC_TYPE_CIPHER);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <FreeCiphers+0x34>
 80037fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037fc:	f015 f9f2 	bl	8018be4 <wolfSSL_Free>
    XFREE(ssl->decrypt.aes, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <FreeCiphers+0x48>
 800380e:	6a38      	ldr	r0, [r7, #32]
 8003810:	f015 f9e8 	bl	8018be4 <wolfSSL_Free>
#endif
#ifdef CIPHER_NONCE
    XFREE(ssl->decrypt.nonce, ssl->heap, DYNAMIC_TYPE_AES_BUFFER);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <FreeCiphers+0x5c>
 8003822:	69f8      	ldr	r0, [r7, #28]
 8003824:	f015 f9de 	bl	8018be4 <wolfSSL_Free>
    XFREE(ssl->encrypt.nonce, ssl->heap, DYNAMIC_TYPE_AES_BUFFER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <FreeCiphers+0x70>
 8003836:	69b8      	ldr	r0, [r7, #24]
 8003838:	f015 f9d4 	bl	8018be4 <wolfSSL_Free>
#ifdef HAVE_CAMELLIA
    XFREE(ssl->encrypt.cam, ssl->heap, DYNAMIC_TYPE_CIPHER);
    XFREE(ssl->decrypt.cam, ssl->heap, DYNAMIC_TYPE_CIPHER);
#endif
#ifdef HAVE_CHACHA
    if (ssl->encrypt.chacha)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <FreeCiphers+0x88>
        ForceZero(ssl->encrypt.chacha, sizeof(ChaCha));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800384c:	2144      	movs	r1, #68	; 0x44
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fd44 	bl	80032dc <ForceZero>
    if (ssl->decrypt.chacha)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <FreeCiphers+0xa0>
        ForceZero(ssl->decrypt.chacha, sizeof(ChaCha));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003864:	2144      	movs	r1, #68	; 0x44
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fd38 	bl	80032dc <ForceZero>
    XFREE(ssl->encrypt.chacha, ssl->heap, DYNAMIC_TYPE_CIPHER);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <FreeCiphers+0xb4>
 800387a:	6978      	ldr	r0, [r7, #20]
 800387c:	f015 f9b2 	bl	8018be4 <wolfSSL_Free>
    XFREE(ssl->decrypt.chacha, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <FreeCiphers+0xc8>
 800388e:	6938      	ldr	r0, [r7, #16]
 8003890:	f015 f9a8 	bl	8018be4 <wolfSSL_Free>
#endif
#if defined(HAVE_POLY1305) && defined(HAVE_ONE_TIME_AUTH)
    if (ssl->auth.poly1305)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <FreeCiphers+0xe8>
        ForceZero(ssl->auth.poly1305, sizeof(Poly1305));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ac:	2150      	movs	r1, #80	; 0x50
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fd14 	bl	80032dc <ForceZero>
    XFREE(ssl->auth.poly1305, ssl->heap, DYNAMIC_TYPE_CIPHER);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <FreeCiphers+0x100>
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f015 f98c 	bl	8018be4 <wolfSSL_Free>
          ssl->heap, DYNAMIC_TYPE_CIPHER);
    ssl->dtlsRecordNumberEncrypt.chacha = NULL;
    ssl->dtlsRecordNumberDecrypt.chacha = NULL;
#endif /* HAVE_CHACHA */
#endif /* WOLFSSL_DTLS13 */
}
 80038cc:	bf00      	nop
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <AddSuiteHashSigAlgo>:
}
#endif /* USE_ECDSA_KEYSZ_HASH_ALGO */

static WC_INLINE void AddSuiteHashSigAlgo(Suites* suites, byte macAlgo,
    byte sigAlgo, int keySz, word16* inOutIdx)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	72fb      	strb	r3, [r7, #11]
 80038e2:	4613      	mov	r3, r2
 80038e4:	72bb      	strb	r3, [r7, #10]
    int addSigAlgo = 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
    }
#else
    (void)keySz;
#endif /* USE_ECDSA_KEYSZ_HASH_ALGO */

    if (addSigAlgo) {
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d059      	beq.n	80039a4 <AddSuiteHashSigAlgo+0xd0>
        }
        else
    #endif /* HAVE_DILITHIUM */
    #endif /* HAVE_PQC */
#ifdef WC_RSA_PSS
        if (sigAlgo == rsa_pss_sa_algo) {
 80038f0:	7abb      	ldrb	r3, [r7, #10]
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d13a      	bne.n	800396c <AddSuiteHashSigAlgo+0x98>
            /* RSA PSS is sig then mac */
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	7aba      	ldrb	r2, [r7, #10]
 8003902:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	3301      	adds	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	801a      	strh	r2, [r3, #0]
            suites->hashSigAlgo[*inOutIdx] = macAlgo;
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	7afa      	ldrb	r2, [r7, #11]
 800391e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	801a      	strh	r2, [r3, #0]
    #ifdef WOLFSSL_TLS13
            /* Add the certificate algorithm as well */
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	7aba      	ldrb	r2, [r7, #10]
 800393a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	3301      	adds	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	801a      	strh	r2, [r3, #0]
            suites->hashSigAlgo[*inOutIdx] = PSS_RSAE_TO_PSS_PSS(macAlgo);
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	4619      	mov	r1, r3
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	3305      	adds	r3, #5
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	440b      	add	r3, r1
 800395a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	801a      	strh	r2, [r3, #0]
            *inOutIdx += 1;
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
            *inOutIdx += 1;
        }
    }
}
 800396a:	e01b      	b.n	80039a4 <AddSuiteHashSigAlgo+0xd0>
            suites->hashSigAlgo[*inOutIdx] = macAlgo;
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	7afa      	ldrb	r2, [r7, #11]
 8003978:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	801a      	strh	r2, [r3, #0]
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	7aba      	ldrb	r2, [r7, #10]
 8003994:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	801a      	strh	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <InitSuitesHashSigAlgo>:

void InitSuitesHashSigAlgo(Suites* suites, int haveECDSAsig, int haveRSAsig,
                           int haveFalconSig, int haveDilithiumSig,
                           int haveAnon, int tls1_2, int keySz)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
    word16 idx = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	82fb      	strh	r3, [r7, #22]

    (void)tls1_2;
    (void)keySz;

#if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448)
    if (haveECDSAsig) {
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <InitSuitesHashSigAlgo+0x2a>
    #endif
    #ifdef WOLFSSL_SHA384
        AddSuiteHashSigAlgo(suites, sha384_mac, ecc_dsa_sa_algo, keySz, &idx);
    #endif
    #ifndef NO_SHA256
        AddSuiteHashSigAlgo(suites, sha256_mac, ecc_dsa_sa_algo, keySz, &idx);
 80039c8:	f107 0316 	add.w	r3, r7, #22
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	2203      	movs	r2, #3
 80039d2:	2104      	movs	r1, #4
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff ff7d 	bl	80038d4 <AddSuiteHashSigAlgo>
        AddSuiteHashSigAlgo(suites, no_mac, dilithium_aes_level5_sa_algo, keySz,
                            &idx);
#endif /* HAVE_DILITHIUM */
#endif /* HAVE_PQC */
    }
    if (haveRSAsig) {
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d014      	beq.n	8003a0a <InitSuitesHashSigAlgo+0x5a>
    #ifdef WC_RSA_PSS
        if (tls1_2) {
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <InitSuitesHashSigAlgo+0x48>
        #ifdef WOLFSSL_SHA384
            AddSuiteHashSigAlgo(suites, sha384_mac, rsa_pss_sa_algo, keySz,
                                                                          &idx);
        #endif
        #ifndef NO_SHA256
            AddSuiteHashSigAlgo(suites, sha256_mac, rsa_pss_sa_algo, keySz,
 80039e6:	f107 0316 	add.w	r3, r7, #22
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	2208      	movs	r2, #8
 80039f0:	2104      	movs	r1, #4
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff ff6e 	bl	80038d4 <AddSuiteHashSigAlgo>
    #endif
    #ifdef WOLFSSL_SHA384
        AddSuiteHashSigAlgo(suites, sha384_mac, rsa_sa_algo, keySz, &idx);
    #endif
    #ifndef NO_SHA256
        AddSuiteHashSigAlgo(suites, sha256_mac, rsa_sa_algo, keySz, &idx);
 80039f8:	f107 0316 	add.w	r3, r7, #22
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	2201      	movs	r2, #1
 8003a02:	2104      	movs	r1, #4
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff ff65 	bl	80038d4 <AddSuiteHashSigAlgo>
    }
#endif

    (void)haveAnon;
    (void)haveECDSAsig;
    suites->hashSigAlgoSz = idx;
 8003a0a:	8afa      	ldrh	r2, [r7, #22]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	805a      	strh	r2, [r3, #2]
}
 8003a10:	bf00      	nop
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <InitSuites>:
void InitSuites(Suites* suites, ProtocolVersion pv, int keySz, word16 haveRSA,
                word16 havePSK, word16 haveDH, word16 haveECDSAsig,
                word16 haveECC, word16 haveStaticRSA, word16 haveStaticECC,
                word16 haveFalconSig, word16 haveDilithiumSig, word16 haveAnon,
                word16 haveNull, int side)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b08f      	sub	sp, #60	; 0x3c
 8003a1c:	af04      	add	r7, sp, #16
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	8139      	strh	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	807b      	strh	r3, [r7, #2]
    word16 idx = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	84fb      	strh	r3, [r7, #38]	; 0x26
    int    tls    = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_MINOR;
 8003a2a:	7a3b      	ldrb	r3, [r7, #8]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d104      	bne.n	8003a3a <InitSuites+0x22>
 8003a30:	7a7b      	ldrb	r3, [r7, #9]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <InitSuites+0x22>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <InitSuites+0x24>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
    int    tls1_2 = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_2_MINOR;
 8003a3e:	7a3b      	ldrb	r3, [r7, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d104      	bne.n	8003a4e <InitSuites+0x36>
 8003a44:	7a7b      	ldrb	r3, [r7, #9]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <InitSuites+0x36>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <InitSuites+0x38>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_TLS13
    int    tls1_3 = IsAtLeastTLSv1_3(pv);
 8003a52:	68b8      	ldr	r0, [r7, #8]
 8003a54:	f7ff fc6b 	bl	800332e <IsAtLeastTLSv1_3>
 8003a58:	61b8      	str	r0, [r7, #24]
#endif
    int    dtls   = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
    int    haveRSAsig = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
    (void)haveAnon;   /* anon ciphers optional */
    (void)haveNull;
    (void)haveFalconSig;
    (void)haveDilithiumSig;

    if (suites == NULL) {
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03b      	beq.n	8003ae0 <InitSuites+0xc8>
        WOLFSSL_MSG("InitSuites pointer error");
        return;
    }

    if (suites->setSuites)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d138      	bne.n	8003ae4 <InitSuites+0xcc>
        suites->suites[idx++] = TLS_AES_256_GCM_SHA384;
    }
#endif

#ifdef BUILD_TLS_CHACHA20_POLY1305_SHA256
    if (tls1_3) {
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00f      	beq.n	8003a98 <InitSuites+0x80>
        suites->suites[idx++] = TLS13_BYTE;
 8003a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	84fa      	strh	r2, [r7, #38]	; 0x26
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	2213      	movs	r2, #19
 8003a86:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_CHACHA20_POLY1305_SHA256;
 8003a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	84fa      	strh	r2, [r7, #38]	; 0x26
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	2203      	movs	r2, #3
 8003a96:	711a      	strb	r2, [r3, #4]
    }
#endif

#endif /* !WOLFSSL_NO_TLS12 */

    suites->suiteSz = idx;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a9c:	801a      	strh	r2, [r3, #0]

    if (suites->hashSigAlgoSz == 0) {
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	885b      	ldrh	r3, [r3, #2]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d11f      	bne.n	8003ae6 <InitSuites+0xce>
        InitSuitesHashSigAlgo(suites, haveECDSAsig | haveECC,
 8003aa6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003aaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	ea42 0103 	orr.w	r1, r2, r3
 8003abc:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8003ac0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	9203      	str	r2, [sp, #12]
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	9202      	str	r2, [sp, #8]
 8003acc:	2200      	movs	r2, #0
 8003ace:	9201      	str	r2, [sp, #4]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f7ff ff69 	bl	80039b0 <InitSuitesHashSigAlgo>
 8003ade:	e002      	b.n	8003ae6 <InitSuites+0xce>
        return;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <InitSuites+0xce>
        return;      /* trust user settings, don't override */
 8003ae4:	bf00      	nop
                              haveRSAsig | haveRSA, haveFalconSig,
                              haveDilithiumSig, 0, tls1_2, keySz);
    }
}
 8003ae6:	372c      	adds	r7, #44	; 0x2c
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}

08003aec <InitX509Name>:
#endif /* !WOLFSSL_NO_TLS12 */

#ifndef NO_CERTS

void InitX509Name(WOLFSSL_X509_NAME* name, int dynamicFlag, void* heap)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
    (void)dynamicFlag;

    if (name != NULL) {
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d011      	beq.n	8003b22 <InitX509Name+0x36>
        XMEMSET(name, 0, sizeof(WOLFSSL_X509_NAME));
 8003afe:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8003b02:	2100      	movs	r1, #0
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f01d fc15 	bl	8021334 <memset>
        name->name        = name->staticName;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f103 020c 	add.w	r2, r3, #12
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]
        name->heap = heap;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
        name->dynamicName = 0;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
    }
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <FreeX509Name>:


void FreeX509Name(WOLFSSL_X509_NAME* name)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
    if (name != NULL) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d067      	beq.n	8003c08 <FreeX509Name+0xde>
        if (name->dynamicName) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <FreeX509Name+0x2e>
            XFREE(name->name, name->heap, DYNAMIC_TYPE_SUBJECT_CN);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <FreeX509Name+0x28>
 8003b4c:	68b8      	ldr	r0, [r7, #8]
 8003b4e:	f015 f849 	bl	8018be4 <wolfSSL_Free>
            name->name = NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
        }
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        {
            int i;
            for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e042      	b.n	8003be4 <FreeX509Name+0xba>
                if (name->entry[i].object != NULL)
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <FreeX509Name+0x66>
                    wolfSSL_ASN1_OBJECT_free(name->entry[i].object);
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f005 f9cc 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
                if (name->entry[i].value != NULL)
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00c      	beq.n	8003bc2 <FreeX509Name+0x98>
                    wolfSSL_ASN1_STRING_free(name->entry[i].value);
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f005 fa74 	bl	80090aa <wolfSSL_ASN1_STRING_free>
                XMEMSET(&name->entry[i], 0, sizeof(WOLFSSL_X509_NAME_ENTRY));
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	2214      	movs	r2, #20
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f01d fbab 	bl	8021334 <memset>
            for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b0f      	cmp	r3, #15
 8003be8:	ddb9      	ble.n	8003b5e <FreeX509Name+0x34>
            }
        }
#endif /* OPENSSL_EXTRA || OPENSSL_EXTRA_X509_SMALL */
#ifdef OPENSSL_ALL
        if (name->entries) {
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <FreeX509Name+0xde>
            wolfSSL_sk_X509_NAME_ENTRY_free(name->entries);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f007 f956 	bl	800aeac <wolfSSL_sk_X509_NAME_ENTRY_free>
            name->entries = NULL;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
        }
#endif
    }
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <InitX509>:


/* Initialize wolfSSL X509 type */
void InitX509(WOLFSSL_X509* x509, int dynamicFlag, void* heap)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
    if (x509 == NULL) {
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d023      	beq.n	8003c6a <InitX509+0x5a>
        WOLFSSL_MSG("Null parameter passed in!");
        return;
    }

    XMEMSET(x509, 0, sizeof(WOLFSSL_X509));
 8003c22:	f640 4268 	movw	r2, #3176	; 0xc68
 8003c26:	2100      	movs	r1, #0
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f01d fb83 	bl	8021334 <memset>

    x509->heap = heap;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    InitX509Name(&x509->issuer, 0, heap);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff53 	bl	8003aec <InitX509Name>
    InitX509Name(&x509->subject, 0, heap);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff4b 	bl	8003aec <InitX509Name>
    x509->dynamicMemory  = (byte)dynamicFlag;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
#if defined(OPENSSL_EXTRA_X509_SMALL) || defined(OPENSSL_EXTRA)
    x509->refCount = 1;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8003c68:	e000      	b.n	8003c6c <InitX509+0x5c>
        return;
 8003c6a:	bf00      	nop
#ifndef SINGLE_THREADED
    (void)wc_InitMutex(&x509->refMutex);
#endif
#endif
}
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <FreeX509>:


/* Free wolfSSL X509 type */
void FreeX509(WOLFSSL_X509* x509)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08e      	sub	sp, #56	; 0x38
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
    if (x509 == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8126 	beq.w	8003ece <FreeX509+0x25c>
        return;

    FreeX509Name(&x509->issuer);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff4e 	bl	8003b2a <FreeX509Name>
    FreeX509Name(&x509->subject);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff48 	bl	8003b2a <FreeX509Name>
    if (x509->pubKey.buffer) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <FreeX509+0x48>
        XFREE(x509->pubKey.buffer, x509->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <FreeX509+0x42>
 8003cae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cb0:	f014 ff98 	bl	8018be4 <wolfSSL_Free>
        x509->pubKey.buffer = NULL;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }
    FreeDer(&x509->derCert);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3390      	adds	r3, #144	; 0x90
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f00f fb76 	bl	80133b0 <FreeDer>
    XFREE(x509->sig.buffer, x509->heap, DYNAMIC_TYPE_SIGNATURE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <FreeX509+0x64>
 8003cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd2:	f014 ff87 	bl	8018be4 <wolfSSL_Free>
    x509->sig.buffer = NULL;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	66da      	str	r2, [r3, #108]	; 0x6c
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        if (x509->authKeyIdSrc != NULL) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <FreeX509+0x8a>
            XFREE(x509->authKeyIdSrc, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <FreeX509+0x9e>
 8003cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf6:	f014 ff75 	bl	8018be4 <wolfSSL_Free>
 8003cfa:	e009      	b.n	8003d10 <FreeX509+0x9e>
        }
        else {
            XFREE(x509->authKeyId, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <FreeX509+0x9e>
 8003d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d0c:	f014 ff6a 	bl	8018be4 <wolfSSL_Free>
        }
        x509->authKeyIdSrc = NULL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        x509->authKeyId = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        XFREE(x509->subjKeyId, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <FreeX509+0xc2>
 8003d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d30:	f014 ff58 	bl	8018be4 <wolfSSL_Free>
        x509->subjKeyId = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        if (x509->authInfo != NULL) {
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <FreeX509+0xf0>
            XFREE(x509->authInfo, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <FreeX509+0xe8>
 8003d54:	6a38      	ldr	r0, [r7, #32]
 8003d56:	f014 ff45 	bl	8018be4 <wolfSSL_Free>
            x509->authInfo = NULL;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        }
        if (x509->rawCRLInfo != NULL) {
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <FreeX509+0x116>
            XFREE(x509->rawCRLInfo, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <FreeX509+0x10e>
 8003d7a:	69f8      	ldr	r0, [r7, #28]
 8003d7c:	f014 ff32 	bl	8018be4 <wolfSSL_Free>
            x509->rawCRLInfo = NULL;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        }
        if (x509->CRLInfo != NULL) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <FreeX509+0x13c>
            XFREE(x509->CRLInfo, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <FreeX509+0x134>
 8003da0:	69b8      	ldr	r0, [r7, #24]
 8003da2:	f014 ff1f 	bl	8018be4 <wolfSSL_Free>
            x509->CRLInfo = NULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        }
        #if defined(OPENSSL_ALL) || defined(OPENSSL_EXTRA) || \
            defined(WOLFSSL_QT)
        if (x509->authInfoCaIssuer != NULL) {
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d009      	beq.n	8003dcc <FreeX509+0x15a>
            XFREE(x509->authInfoCaIssuer, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <FreeX509+0x15a>
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f014 ff0c 	bl	8018be4 <wolfSSL_Free>
        }
        if (x509->ext_sk != NULL) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <FreeX509+0x16e>
            wolfSSL_sk_X509_EXTENSION_pop_free(x509->ext_sk, NULL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f006 fbaf 	bl	800a53e <wolfSSL_sk_X509_EXTENSION_pop_free>
        }
        if (x509->ext_sk_full != NULL) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <FreeX509+0x182>
            wolfSSL_sk_X509_EXTENSION_pop_free(x509->ext_sk_full, NULL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f006 fba5 	bl	800a53e <wolfSSL_sk_X509_EXTENSION_pop_free>
        }
        #endif /* OPENSSL_ALL || WOLFSSL_QT */
        #ifdef OPENSSL_EXTRA
        /* Free serialNumber that was set by wolfSSL_X509_get_serialNumber */
        if (x509->serialNumber != NULL) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <FreeX509+0x194>
            wolfSSL_ASN1_INTEGER_free(x509->serialNumber);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f005 fa3f 	bl	8009284 <wolfSSL_ASN1_INTEGER_free>
        }
        #endif
        if (x509->extKeyUsageSrc != NULL) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <FreeX509+0x1ba>
            XFREE(x509->extKeyUsageSrc, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <FreeX509+0x1b2>
 8003e1e:	6938      	ldr	r0, [r7, #16]
 8003e20:	f014 fee0 	bl	8018be4 <wolfSSL_Free>
            x509->extKeyUsageSrc= NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }
    #endif /* OPENSSL_EXTRA || OPENSSL_EXTRA_X509_SMALL */
    #if defined(OPENSSL_ALL)
        if (x509->algor.algorithm) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <FreeX509+0x1d8>
            wolfSSL_ASN1_OBJECT_free(x509->algor.algorithm);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f005 f873 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
            x509->algor.algorithm = NULL;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        }
        if (x509->key.algor) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <FreeX509+0x1f6>
            wolfSSL_X509_ALGOR_free(x509->key.algor);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f006 fcf4 	bl	800a848 <wolfSSL_X509_ALGOR_free>
            x509->key.algor = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
        }
        if (x509->key.pkey) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <FreeX509+0x214>
            wolfSSL_EVP_PKEY_free(x509->key.pkey);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fe08 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
            x509->key.pkey = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
        }
        if (x509->subjAltNameSrc != NULL) {
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00d      	beq.n	8003eac <FreeX509+0x23a>
            XFREE(x509->subjAltNameSrc, x509->heap, DYNAMIC_TYPE_X509_EXT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <FreeX509+0x232>
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f014 fea0 	bl	8018be4 <wolfSSL_Free>
            x509->subjAltNameSrc= NULL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    #if defined(WOLFSSL_CERT_REQ) && defined(OPENSSL_ALL)
        if (x509->reqAttributes) {
            wolfSSL_sk_pop_free(x509->reqAttributes, NULL);
        }
    #endif /* WOLFSSL_CERT_REQ */
    if (x509->altNames) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <FreeX509+0x25e>
        FreeAltNames(x509->altNames, x509->heap);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f00b f8d1 	bl	800f068 <FreeAltNames>
        x509->altNames = NULL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	679a      	str	r2, [r3, #120]	; 0x78
 8003ecc:	e000      	b.n	8003ed0 <FreeX509+0x25e>
        return;
 8003ece:	bf00      	nop
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_ALL)
    #ifndef SINGLE_THREADED
        wc_FreeMutex(&x509->refMutex);
    #endif
    #endif
}
 8003ed0:	3738      	adds	r7, #56	; 0x38
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <SSL_CTX_RefCount>:
    return WOLFSSL_SUCCESS;
}

/* returns new reference count. Arg incr positive=up or negative=down */
int SSL_CTX_RefCount(WOLFSSL_CTX* ctx, int incr)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
    int refCount;

    if (ctx == NULL) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <SSL_CTX_RefCount+0x16>
        return BAD_FUNC_ARG;
 8003ee6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8003eea:	e020      	b.n	8003f2e <SSL_CTX_RefCount+0x58>
    }

    if (wc_LockMutex(&ctx->countMutex) != 0) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f01d f815 	bl	8020f20 <wc_LockMutex>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <SSL_CTX_RefCount+0x2c>
        WOLFSSL_MSG("Couldn't lock CTX count mutex");
        WOLFSSL_ERROR_VERBOSE(BAD_MUTEX_E);
        return BAD_MUTEX_E;
 8003efc:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8003f00:	e015      	b.n	8003f2e <SSL_CTX_RefCount+0x58>
    }

    ctx->refCount += incr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
    /* make sure refCount is never negative */
    if (ctx->refCount < 0) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da02      	bge.n	8003f1c <SSL_CTX_RefCount+0x46>
        ctx->refCount = 0;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]
    }
    refCount = ctx->refCount;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	60fb      	str	r3, [r7, #12]

    wc_UnLockMutex(&ctx->countMutex);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3308      	adds	r3, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f01d f805 	bl	8020f36 <wc_UnLockMutex>

    return refCount;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <FreeHandshakeHashes>:

    return ret;
}

void FreeHandshakeHashes(WOLFSSL* ssl)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
    if (ssl->hsHashes) {
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d011      	beq.n	8003f6a <FreeHandshakeHashes+0x34>
    #ifndef NO_SHA
        wc_ShaFree(&ssl->hsHashes->hashSha);
    #endif
#endif /* !NO_OLD_TLS */
    #ifndef NO_SHA256
        wc_Sha256Free(&ssl->hsHashes->hashSha256);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	3340      	adds	r3, #64	; 0x40
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f017 ffec 	bl	801bf2a <wc_Sha256Free>
            XFREE(ssl->hsHashes->messages, ssl->heap, DYNAMIC_TYPE_HASHES);
            ssl->hsHashes->messages = NULL;
         }
    #endif

        XFREE(ssl->hsHashes, ssl->heap, DYNAMIC_TYPE_HASHES);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <FreeHandshakeHashes+0x2e>
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f014 fe40 	bl	8018be4 <wolfSSL_Free>
        ssl->hsHashes = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	66da      	str	r2, [r3, #108]	; 0x6c
    }
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <FreeArrays>:
}


/* free use of temporary arrays */
void FreeArrays(WOLFSSL* ssl, int keep)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
    if (ssl->arrays) {
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d04e      	beq.n	8004022 <FreeArrays+0xb0>
        if (keep && !IsAtLeastTLSv1_3(ssl->version)) {
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01c      	beq.n	8003fc4 <FreeArrays+0x52>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 02a8 	ldr.w	r0, [r3, #680]	; 0x2a8
 8003f90:	f7ff f9cd 	bl	800332e <IsAtLeastTLSv1_3>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d114      	bne.n	8003fc4 <FreeArrays+0x52>
            /* keeps session id for user retrieval */
            XMEMCPY(ssl->session->sessionID, ssl->arrays->sessionID, ID_LEN);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8003fa0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	3354      	adds	r3, #84	; 0x54
 8003faa:	2220      	movs	r2, #32
 8003fac:	4619      	mov	r1, r3
 8003fae:	f01d f999 	bl	80212e4 <memcpy>
            ssl->session->sessionIDSz = ssl->arrays->sessionIDSz;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8003fbc:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 8003fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
        if (ssl->arrays->preMasterSecret) {
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d015      	beq.n	8003ffa <FreeArrays+0x88>
            ForceZero(ssl->arrays->preMasterSecret, ENCRYPT_LEN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff f97f 	bl	80032dc <ForceZero>
            XFREE(ssl->arrays->preMasterSecret, ssl->heap, DYNAMIC_TYPE_SECRET);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <FreeArrays+0x80>
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f014 fdf9 	bl	8018be4 <wolfSSL_Free>
            ssl->arrays->preMasterSecret = NULL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
        }
        XFREE(ssl->arrays->pendingMsg, ssl->heap, DYNAMIC_TYPE_ARRAYS);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <FreeArrays+0x9c>
 8004008:	6938      	ldr	r0, [r7, #16]
 800400a:	f014 fdeb 	bl	8018be4 <wolfSSL_Free>
        ssl->arrays->pendingMsg = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
        ForceZero(ssl->arrays, sizeof(Arrays)); /* clear arrays struct */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	21d8      	movs	r1, #216	; 0xd8
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff f95d 	bl	80032dc <ForceZero>
    }
    XFREE(ssl->arrays, ssl->heap, DYNAMIC_TYPE_ARRAYS);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <FreeArrays+0xc2>
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f014 fdd8 	bl	8018be4 <wolfSSL_Free>
    ssl->arrays = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <FreeKey>:

void FreeKey(WOLFSSL* ssl, int type, void** pKey)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
    if (ssl && pKey && *pKey) {
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d025      	beq.n	80040a0 <FreeKey+0x5e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d022      	beq.n	80040a0 <FreeKey+0x5e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01e      	beq.n	80040a0 <FreeKey+0x5e>
        switch (type) {
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b0a      	cmp	r3, #10
 8004066:	d003      	beq.n	8004070 <FreeKey+0x2e>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b25      	cmp	r3, #37	; 0x25
 800406c:	d006      	beq.n	800407c <FreeKey+0x3a>
            case DYNAMIC_TYPE_DH:
                wc_FreeDhKey((DhKey*)*pKey);
                break;
        #endif /* !NO_DH */
            default:
                break;
 800406e:	e00b      	b.n	8004088 <FreeKey+0x46>
                wc_FreeRsaKey((RsaKey*)*pKey);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f015 ffd6 	bl	801a026 <wc_FreeRsaKey>
                break;
 800407a:	e005      	b.n	8004088 <FreeKey+0x46>
                wc_ecc_free((ecc_key*)*pKey);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f013 f8bd 	bl	8017200 <wc_ecc_free>
                break;
 8004086:	bf00      	nop
        }
        XFREE(*pKey, ssl->heap, type);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <FreeKey+0x58>
 8004094:	6978      	ldr	r0, [r7, #20]
 8004096:	f014 fda5 	bl	8018be4 <wolfSSL_Free>

        /* Reset pointer */
        *pKey = NULL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
    }
}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <FreeAsyncCtx>:
}
#endif

#ifdef WOLFSSL_ASYNC_IO
void FreeAsyncCtx(WOLFSSL* ssl, byte freeAsync)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
    if (ssl->async != NULL) {
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d026      	beq.n	800410c <FreeAsyncCtx+0x64>
        if (ssl->async->freeArgs != NULL) {
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00f      	beq.n	80040ea <FreeAsyncCtx+0x42>
            ssl->async->freeArgs(ssl, ssl->async->args);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80040d8:	3204      	adds	r2, #4
 80040da:	4611      	mov	r1, r2
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
            ssl->async->freeArgs = NULL;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
        if (ssl->options.buildArgsSet) {
            FreeBuildMsgArgs(ssl, &ssl->async->buildArgs);
            ssl->options.buildArgsSet = 0;
        }
#endif
        if (freeAsync) {
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <FreeAsyncCtx+0x64>
            XFREE(ssl->async, ssl->heap, DYNAMIC_TYPE_ASYNC);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <FreeAsyncCtx+0x5c>
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f014 fd70 	bl	8018be4 <wolfSSL_Free>
            ssl->async = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        }
    }
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <FreeKeyExchange>:
#endif

void FreeKeyExchange(WOLFSSL* ssl)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
    /* Cleanup signature buffer */
    if (ssl->buffers.sig.buffer) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004122:	2b00      	cmp	r3, #0
 8004124:	d011      	beq.n	800414a <FreeKeyExchange+0x36>
        XFREE(ssl->buffers.sig.buffer, ssl->heap, DYNAMIC_TYPE_SIGNATURE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <FreeKeyExchange+0x26>
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f014 fd55 	bl	8018be4 <wolfSSL_Free>
        ssl->buffers.sig.buffer = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
        ssl->buffers.sig.length = 0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    }

    /* Cleanup digest buffer */
    if (ssl->buffers.digest.buffer) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d011      	beq.n	8004178 <FreeKeyExchange+0x64>
        XFREE(ssl->buffers.digest.buffer, ssl->heap, DYNAMIC_TYPE_DIGEST);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <FreeKeyExchange+0x54>
 8004162:	68b8      	ldr	r0, [r7, #8]
 8004164:	f014 fd3e 	bl	8018be4 <wolfSSL_Free>
        ssl->buffers.digest.buffer = NULL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
        ssl->buffers.digest.length = 0;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    }

    /* Free handshake key */
    FreeKey(ssl, ssl->hsType, &ssl->hsKey);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800417e:	4619      	mov	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	33a0      	adds	r3, #160	; 0xa0
 8004184:	461a      	mov	r2, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff ff5b 	bl	8004042 <FreeKey>

#ifndef NO_DH
    /* Free temp DH key */
    FreeKey(ssl, DYNAMIC_TYPE_DH, (void**)&ssl->buffers.serverDH_Key);
#endif
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <FreeSuites>:


/* Free up all memory used by Suites structure from WOLFSSL */
void FreeSuites(WOLFSSL* ssl)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
#ifdef SINGLE_THREADED
    if (ssl->options.ownSuites)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <FreeSuites+0x40>
#endif
    {
    #ifdef OPENSSL_ALL
        if (ssl->suites != NULL) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <FreeSuites+0x2e>
            /* Enough to free stack structure since WOLFSSL_CIPHER
             * isn't allocated separately. */
            wolfSSL_sk_SSL_CIPHER_free(ssl->suites->stack);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 fb41 	bl	8009844 <wolfSSL_sk_SSL_CIPHER_free>
        }
    #endif
        XFREE(ssl->suites, ssl->heap, DYNAMIC_TYPE_SUITES);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <FreeSuites+0x40>
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f014 fd08 	bl	8018be4 <wolfSSL_Free>
    }
    ssl->suites = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <SSL_ResourceFree>:


/* In case holding SSL object in array and don't want to free actual ssl */
void SSL_ResourceFree(WOLFSSL* ssl)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]

#ifdef HAVE_EX_DATA_CLEANUP_HOOKS
    wolfSSL_CRYPTO_cleanup_ex_data(&ssl->ex_data);
#endif

    FreeCiphers(ssl);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff faee 	bl	80037cc <FreeCiphers>
    FreeArrays(ssl, 0);
 80041f0:	2100      	movs	r1, #0
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff febd 	bl	8003f72 <FreeArrays>
    FreeKeyExchange(ssl);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff ff8b 	bl	8004114 <FreeKeyExchange>
#ifdef WOLFSSL_ASYNC_IO
    /* Cleanup async */
    FreeAsyncCtx(ssl, 1);
 80041fe:	2101      	movs	r1, #1
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff51 	bl	80040a8 <FreeAsyncCtx>
#endif
    if (ssl->options.weOwnRng) {
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <SSL_ResourceFree+0x50>
        wc_FreeRng(ssl->rng);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	4618      	mov	r0, r3
 800421c:	f015 fb36 	bl	801988c <wc_FreeRng>
        XFREE(ssl->rng, ssl->heap, DYNAMIC_TYPE_RNG);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <SSL_ResourceFree+0x50>
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	f014 fcd9 	bl	8018be4 <wolfSSL_Free>
    }
    FreeSuites(ssl);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff ffae 	bl	8004194 <FreeSuites>
    FreeHandshakeHashes(ssl);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fe7c 	bl	8003f36 <FreeHandshakeHashes>
    XFREE(ssl->buffers.domainName.buffer, ssl->heap, DYNAMIC_TYPE_DOMAIN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <SSL_ResourceFree+0x70>
 800424c:	6938      	ldr	r0, [r7, #16]
 800424e:	f014 fcc9 	bl	8018be4 <wolfSSL_Free>

    /* clear keys struct after session */
    ForceZero(&ssl->keys, sizeof(Keys));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8004258:	21dc      	movs	r1, #220	; 0xdc
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff f83e 	bl	80032dc <ForceZero>

#ifdef WOLFSSL_TLS13
    if (ssl->options.tls1_3) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 339e 	ldrb.w	r3, [r3, #926]	; 0x39e
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <SSL_ResourceFree+0xa6>
        ForceZero(&ssl->clientSecret, sizeof(ssl->clientSecret));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	330c      	adds	r3, #12
 8004274:	2130      	movs	r1, #48	; 0x30
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff f830 	bl	80032dc <ForceZero>
        ForceZero(&ssl->serverSecret, sizeof(ssl->serverSecret));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	333c      	adds	r3, #60	; 0x3c
 8004280:	2130      	movs	r1, #48	; 0x30
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff f82a 	bl	80032dc <ForceZero>
    }
#endif
#ifdef WOLFSSL_HAVE_TLS_UNIQUE
    ForceZero(&ssl->clientFinished, TLS_FINISHED_SZ_MAX);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800428e:	3304      	adds	r3, #4
 8004290:	2120      	movs	r1, #32
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f822 	bl	80032dc <ForceZero>
    ForceZero(&ssl->serverFinished, TLS_FINISHED_SZ_MAX);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800429e:	3304      	adds	r3, #4
 80042a0:	2120      	movs	r1, #32
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f81a 	bl	80032dc <ForceZero>
    ssl->serverFinished_len = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    ssl->clientFinished_len = 0;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        XFREE(ssl->buffers.serverDH_G.buffer, ssl->heap, DYNAMIC_TYPE_PUBLIC_KEY);
        XFREE(ssl->buffers.serverDH_P.buffer, ssl->heap, DYNAMIC_TYPE_PUBLIC_KEY);
    }
#endif /* !NO_DH */
#ifndef NO_CERTS
    ssl->keepCert = 0; /* make sure certificate is free'd */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    wolfSSL_UnloadCertsKeys(ssl);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f004 fb62 	bl	8008996 <wolfSSL_UnloadCertsKeys>
#endif
#ifndef NO_RSA
    FreeKey(ssl, DYNAMIC_TYPE_RSA, (void**)&ssl->peerRsaKey);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80042d8:	461a      	mov	r2, r3
 80042da:	210a      	movs	r1, #10
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff feb0 	bl	8004042 <FreeKey>
    ssl->peerRsaKeyPresent = 0;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#endif
#if defined(WOLFSSL_RENESAS_TSIP_TLS) || defined(WOLFSSL_RENESAS_SCEPROTECT)
    XFREE(ssl->peerSceTsipEncRsaKeyIndex, ssl->heap, DYNAMIC_TYPE_RSA);
    Renesas_cmn_Cleanup(ssl);
#endif
    if (ssl->buffers.inputBuffer.dynamicFlag)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <SSL_ResourceFree+0x11a>
        ShrinkInputBuffer(ssl, FORCED_FREE);
 80042f4:	2101      	movs	r1, #1
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f910 	bl	800451c <ShrinkInputBuffer>
    if (ssl->buffers.outputBuffer.dynamicFlag)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <SSL_ResourceFree+0x12a>
        ShrinkOutputBuffer(ssl);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8df 	bl	80044ca <ShrinkOutputBuffer>
#ifdef OPENSSL_EXTRA
#ifndef NO_BIO
    /* Don't free if there was/is a previous element in the chain.
     * This means that this BIO was part of a chain that will be
     * free'd separately. */
    if (ssl->biord != ssl->biowr)        /* only free write if different */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004318:	429a      	cmp	r2, r3
 800431a:	d010      	beq.n	800433e <SSL_ResourceFree+0x15c>
        if (ssl->biowr != NULL && ssl->biowr->prev == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <SSL_ResourceFree+0x15c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <SSL_ResourceFree+0x15c>
            wolfSSL_BIO_free(ssl->biowr);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004338:	4618      	mov	r0, r3
 800433a:	f005 fabe 	bl	80098ba <wolfSSL_BIO_free>
    if (ssl->biord != NULL && ssl->biord->prev == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <SSL_ResourceFree+0x17e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <SSL_ResourceFree+0x17e>
        wolfSSL_BIO_free(ssl->biord);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800435a:	4618      	mov	r0, r3
 800435c:	f005 faad 	bl	80098ba <wolfSSL_BIO_free>
    ssl->biowr = NULL;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
    ssl->biord = NULL;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
#endif
#ifdef HAVE_LIBZ
    FreeStreams(ssl);
#endif
#ifdef HAVE_ECC
    FreeKey(ssl, DYNAMIC_TYPE_ECC, (void**)&ssl->peerEccKey);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8004376:	461a      	mov	r2, r3
 8004378:	2125      	movs	r1, #37	; 0x25
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fe61 	bl	8004042 <FreeKey>
    ssl->peerEccKeyPresent = 0;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
    FreeKey(ssl, DYNAMIC_TYPE_ECC, (void**)&ssl->peerEccDsaKey);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800438e:	461a      	mov	r2, r3
 8004390:	2125      	movs	r1, #37	; 0x25
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fe55 	bl	8004042 <FreeKey>
    ssl->peerEccDsaKeyPresent = 0;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
#endif
#if defined(HAVE_ECC) || defined(HAVE_CURVE25519) ||defined(HAVE_CURVE448)
    {
        int dtype = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
    #ifdef HAVE_ECC
        dtype = DYNAMIC_TYPE_ECC;
 80043a4:	2325      	movs	r3, #37	; 0x25
 80043a6:	60fb      	str	r3, [r7, #12]
           )
        {
            dtype = DYNAMIC_TYPE_CURVE448;
        }
    #endif /* HAVE_CURVE448 */
        FreeKey(ssl, dtype, (void**)&ssl->eccTempKey);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 80043ae:	461a      	mov	r2, r3
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fe45 	bl	8004042 <FreeKey>
        ssl->eccTempKeyPresent = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
        XFREE(ssl->buffers.peerRsaKey.buffer, ssl->heap, DYNAMIC_TYPE_RSA);
    #endif /* NO_RSA */
#endif /* HAVE_PK_CALLBACKS */
#ifdef HAVE_TLS_EXTENSIONS
#if !defined(NO_TLS)
    TLSX_FreeAll(ssl->extensions, ssl->heap);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f007 f95a 	bl	800b68c <TLSX_FreeAll>
#ifdef HAVE_NETX
    if (ssl->nxCtx.nxPacket)
        nx_packet_release(ssl->nxCtx.nxPacket);
#endif
#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_WPAS_SMALL)
    if (ssl->x509_store_pt)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <SSL_ResourceFree+0x20c>
        wolfSSL_X509_STORE_free(ssl->x509_store_pt);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 80043e8:	4618      	mov	r0, r3
 80043ea:	f006 ffdf 	bl	800b3ac <wolfSSL_X509_STORE_free>
#endif
#ifdef KEEP_PEER_CERT
    FreeX509(&ssl->peerCert);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f203 4374 	addw	r3, r3, #1140	; 0x474
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fc3c 	bl	8003c72 <FreeX509>
#endif

    if (ssl->session != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <SSL_ResourceFree+0x234>
        wolfSSL_FreeSession(ssl->ctx, ssl->session);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f004 fdf4 	bl	8008ffe <wolfSSL_FreeSession>
    if (ssl->dupWrite) {
        FreeWriteDup(ssl);
    }
#endif
#ifdef OPENSSL_EXTRA
    if (ssl->param) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <SSL_ResourceFree+0x252>
        XFREE(ssl->param, ssl->heap, DYNAMIC_TYPE_OPENSSL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <SSL_ResourceFree+0x252>
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f014 fbd8 	bl	8018be4 <wolfSSL_Free>
    }
#endif /* WOLFSSL_STATIC_MEMORY */
#ifdef OPENSSL_EXTRA
    /* Enough to free stack structure since WOLFSSL_CIPHER
     * isn't allocated separately. */
    wolfSSL_sk_CIPHER_free(ssl->supportedCiphers);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800443e:	4618      	mov	r0, r3
 8004440:	f004 fe14 	bl	800906c <wolfSSL_sk_CIPHER_free>
    wolfSSL_sk_X509_pop_free(ssl->peerCertChain, NULL);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800444e:	2100      	movs	r1, #0
 8004450:	4618      	mov	r0, r3
 8004452:	f005 ffa3 	bl	800a39c <wolfSSL_sk_X509_pop_free>
    #ifdef KEEP_OUR_CERT
    wolfSSL_sk_X509_pop_free(ssl->ourCertChain, NULL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f005 ff9a 	bl	800a39c <wolfSSL_sk_X509_pop_free>
    #endif
#endif
#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_EXTRA) || defined(HAVE_LIGHTY)
    wolfSSL_sk_X509_NAME_pop_free(ssl->ca_names, NULL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f006 fcfe 	bl	800ae76 <wolfSSL_sk_X509_NAME_pop_free>
    ssl->ca_names = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004480:	461a      	mov	r2, r3
 8004482:	2300      	movs	r3, #0
 8004484:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    Dtls13FreeFsmResources(ssl);
#endif /* WOLFSSL_DTLS13 */
#ifdef WOLFSSL_QUIC
    wolfSSL_quic_free(ssl);
#endif
}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <FreeSSL>:
}


/* heap argument is the heap hint used when creating SSL */
void FreeSSL(WOLFSSL* ssl, void* heap)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
    WOLFSSL_CTX* ctx = ssl->ctx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]
    SSL_ResourceFree(ssl);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe9e 	bl	80041e2 <SSL_ResourceFree>
    XFREE(ssl, heap, DYNAMIC_TYPE_SSL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <FreeSSL+0x26>
 80044b0:	68b8      	ldr	r0, [r7, #8]
 80044b2:	f014 fb97 	bl	8018be4 <wolfSSL_Free>
    if (ctx)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <FreeSSL+0x32>
        FreeSSL_Ctx(ctx); /* will decrement and free underlying CTX if 0 */
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff f94b 	bl	8003758 <FreeSSL_Ctx>
    (void)heap;
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(ssl, sizeof(*ssl));
#endif
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <ShrinkOutputBuffer>:
}


/* Switch dynamic output buffer back to static, buffer is assumed clear */
void ShrinkOutputBuffer(WOLFSSL* ssl)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
    WOLFSSL_MSG("Shrinking output buffer");
    XFREE(ssl->buffers.outputBuffer.buffer - ssl->buffers.outputBuffer.offset,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 80044de:	425b      	negs	r3, r3
 80044e0:	4413      	add	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <ShrinkOutputBuffer+0x26>
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f014 fb7a 	bl	8018be4 <wolfSSL_Free>
          ssl->heap, DYNAMIC_TYPE_OUT_BUFFER);
    ssl->buffers.outputBuffer.buffer = ssl->buffers.outputBuffer.staticBuffer;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ssl->buffers.outputBuffer.bufferSize  = STATIC_BUFFER_LEN;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2205      	movs	r2, #5
 8004500:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    ssl->buffers.outputBuffer.dynamicFlag = 0;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    ssl->buffers.outputBuffer.offset      = 0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <ShrinkInputBuffer>:
/* forced free means cleaning up */
/* Be *CAREFUL* where this function is called. ProcessReply relies on
 * inputBuffer.idx *NOT* changing inside the ProcessReply function. ProcessReply
 * calls ShrinkInputBuffer itself when it is safe to do so. Don't overuse it. */
void ShrinkInputBuffer(WOLFSSL* ssl, int forcedFree)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
    int usedLength = ssl->buffers.inputBuffer.length -
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
                     ssl->buffers.inputBuffer.idx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
    int usedLength = ssl->buffers.inputBuffer.length -
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	60fb      	str	r3, [r7, #12]
    if (!forcedFree && (usedLength > STATIC_BUFFER_LEN ||
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <ShrinkInputBuffer+0x30>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b05      	cmp	r3, #5
 8004540:	dc51      	bgt.n	80045e6 <ShrinkInputBuffer+0xca>
            ssl->buffers.clearOutputBuffer.length > 0))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
    if (!forcedFree && (usedLength > STATIC_BUFFER_LEN ||
 8004548:	2b00      	cmp	r3, #0
 800454a:	d14c      	bne.n	80045e6 <ShrinkInputBuffer+0xca>
        return;

    WOLFSSL_MSG("Shrinking input buffer");

    if (!forcedFree && usedLength > 0) {
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d110      	bne.n	8004574 <ShrinkInputBuffer+0x58>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	dd0d      	ble.n	8004574 <ShrinkInputBuffer+0x58>
        XMEMCPY(ssl->buffers.inputBuffer.staticBuffer,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800456a:	4413      	add	r3, r2
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4619      	mov	r1, r3
 8004570:	f01c feb8 	bl	80212e4 <memcpy>
               ssl->buffers.inputBuffer.buffer + ssl->buffers.inputBuffer.idx,
               usedLength);
    }

    ForceZero(ssl->buffers.inputBuffer.buffer -
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
        ssl->buffers.inputBuffer.offset,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 31f5 	ldrb.w	r3, [r3, #501]	; 0x1f5
    ForceZero(ssl->buffers.inputBuffer.buffer -
 8004580:	425b      	negs	r3, r3
 8004582:	441a      	add	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7fe fea5 	bl	80032dc <ForceZero>
        ssl->buffers.inputBuffer.bufferSize);
    XFREE(ssl->buffers.inputBuffer.buffer - ssl->buffers.inputBuffer.offset,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 31f5 	ldrb.w	r3, [r3, #501]	; 0x1f5
 800459e:	425b      	negs	r3, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <ShrinkInputBuffer+0x94>
 80045aa:	68b8      	ldr	r0, [r7, #8]
 80045ac:	f014 fb1a 	bl	8018be4 <wolfSSL_Free>
          ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
    ssl->buffers.inputBuffer.buffer = ssl->buffers.inputBuffer.staticBuffer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    ssl->buffers.inputBuffer.bufferSize  = STATIC_BUFFER_LEN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2205      	movs	r2, #5
 80045c0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    ssl->buffers.inputBuffer.dynamicFlag = 0;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
    ssl->buffers.inputBuffer.offset      = 0;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
    ssl->buffers.inputBuffer.idx = 0;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    ssl->buffers.inputBuffer.length = usedLength;
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
 80045e4:	e000      	b.n	80045e8 <ShrinkInputBuffer+0xcc>
        return;
 80045e6:	bf00      	nop
}
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <MatchDomainName>:
   component or fragment but not multiple names, i.e.,
   *.z.com matches y.z.com but not x.y.z.com

   return 1 on success */
int MatchDomainName(const char* pattern, int len, const char* str)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
    int ret = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
    char p, s;

    if (pattern == NULL || str == NULL || len <= 0)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <MatchDomainName+0x22>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <MatchDomainName+0x22>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	dc7d      	bgt.n	800470e <MatchDomainName+0x11e>
        return 0;
 8004612:	2300      	movs	r3, #0
 8004614:	e08a      	b.n	800472c <MatchDomainName+0x13c>

    while (len > 0) {

        p = (char)XTOLOWER((unsigned char)*pattern++);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	60fa      	str	r2, [r7, #12]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	76bb      	strb	r3, [r7, #26]
 8004620:	7ebb      	ldrb	r3, [r7, #26]
 8004622:	3301      	adds	r3, #1
 8004624:	4a44      	ldr	r2, [pc, #272]	; (8004738 <MatchDomainName+0x148>)
 8004626:	4413      	add	r3, r2
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d102      	bne.n	8004638 <MatchDomainName+0x48>
 8004632:	7ebb      	ldrb	r3, [r7, #26]
 8004634:	3320      	adds	r3, #32
 8004636:	e000      	b.n	800463a <MatchDomainName+0x4a>
 8004638:	7ebb      	ldrb	r3, [r7, #26]
 800463a:	76fb      	strb	r3, [r7, #27]
        if (p == '\0')
 800463c:	7efb      	ldrb	r3, [r7, #27]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d069      	beq.n	8004716 <MatchDomainName+0x126>
            break;

        if (p == '*') {
 8004642:	7efb      	ldrb	r3, [r7, #27]
 8004644:	2b2a      	cmp	r3, #42	; 0x2a
 8004646:	d142      	bne.n	80046ce <MatchDomainName+0xde>
            while (--len > 0 &&
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	dd15      	ble.n	8004680 <MatchDomainName+0x90>
                (p = (char)XTOLOWER((unsigned char)*pattern++)) == '*') {
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	60fa      	str	r2, [r7, #12]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	763b      	strb	r3, [r7, #24]
 800465e:	7e3b      	ldrb	r3, [r7, #24]
 8004660:	3301      	adds	r3, #1
 8004662:	4a35      	ldr	r2, [pc, #212]	; (8004738 <MatchDomainName+0x148>)
 8004664:	4413      	add	r3, r2
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d102      	bne.n	8004676 <MatchDomainName+0x86>
 8004670:	7e3b      	ldrb	r3, [r7, #24]
 8004672:	3320      	adds	r3, #32
 8004674:	e000      	b.n	8004678 <MatchDomainName+0x88>
 8004676:	7e3b      	ldrb	r3, [r7, #24]
 8004678:	76fb      	strb	r3, [r7, #27]
            while (--len > 0 &&
 800467a:	7efb      	ldrb	r3, [r7, #27]
 800467c:	2b2a      	cmp	r3, #42	; 0x2a
 800467e:	d0e3      	beq.n	8004648 <MatchDomainName+0x58>
            }

            if (len == 0)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10e      	bne.n	80046a4 <MatchDomainName+0xb4>
                p = '\0';
 8004686:	2300      	movs	r3, #0
 8004688:	76fb      	strb	r3, [r7, #27]

            while ( (s = (char)XTOLOWER((unsigned char) *str)) != '\0') {
 800468a:	e00b      	b.n	80046a4 <MatchDomainName+0xb4>
                if (s == p)
 800468c:	7dba      	ldrb	r2, [r7, #22]
 800468e:	7efb      	ldrb	r3, [r7, #27]
 8004690:	429a      	cmp	r2, r3
 8004692:	d032      	beq.n	80046fa <MatchDomainName+0x10a>
                    break;
                if (s == '.')
 8004694:	7dbb      	ldrb	r3, [r7, #22]
 8004696:	2b2e      	cmp	r3, #46	; 0x2e
 8004698:	d101      	bne.n	800469e <MatchDomainName+0xae>
                    return 0;
 800469a:	2300      	movs	r3, #0
 800469c:	e046      	b.n	800472c <MatchDomainName+0x13c>
                str++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3301      	adds	r3, #1
 80046a2:	607b      	str	r3, [r7, #4]
            while ( (s = (char)XTOLOWER((unsigned char) *str)) != '\0') {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	75fb      	strb	r3, [r7, #23]
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	3301      	adds	r3, #1
 80046ae:	4a22      	ldr	r2, [pc, #136]	; (8004738 <MatchDomainName+0x148>)
 80046b0:	4413      	add	r3, r2
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d102      	bne.n	80046c2 <MatchDomainName+0xd2>
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	3320      	adds	r3, #32
 80046c0:	e000      	b.n	80046c4 <MatchDomainName+0xd4>
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	75bb      	strb	r3, [r7, #22]
 80046c6:	7dbb      	ldrb	r3, [r7, #22]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1df      	bne.n	800468c <MatchDomainName+0x9c>
 80046cc:	e016      	b.n	80046fc <MatchDomainName+0x10c>
            }
        }
        else {
            if (p != (char)XTOLOWER((unsigned char) *str))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	767b      	strb	r3, [r7, #25]
 80046d4:	7e7b      	ldrb	r3, [r7, #25]
 80046d6:	3301      	adds	r3, #1
 80046d8:	4a17      	ldr	r2, [pc, #92]	; (8004738 <MatchDomainName+0x148>)
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <MatchDomainName+0xfc>
 80046e6:	7e7b      	ldrb	r3, [r7, #25]
 80046e8:	3320      	adds	r3, #32
 80046ea:	e000      	b.n	80046ee <MatchDomainName+0xfe>
 80046ec:	7e7b      	ldrb	r3, [r7, #25]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	7efa      	ldrb	r2, [r7, #27]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d002      	beq.n	80046fc <MatchDomainName+0x10c>
                return 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e018      	b.n	800472c <MatchDomainName+0x13c>
                    break;
 80046fa:	bf00      	nop
        }


        if (len > 0) {
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dd05      	ble.n	800470e <MatchDomainName+0x11e>
            str++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3301      	adds	r3, #1
 8004706:	607b      	str	r3, [r7, #4]
            len--;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3b01      	subs	r3, #1
 800470c:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	dc80      	bgt.n	8004616 <MatchDomainName+0x26>
 8004714:	e000      	b.n	8004718 <MatchDomainName+0x128>
            break;
 8004716:	bf00      	nop
        }
    }

    if (*str == '\0' && len == 0) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <MatchDomainName+0x13a>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <MatchDomainName+0x13a>
        ret = 1; /* success */
 8004726:	2301      	movs	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
    }

    return ret;
 800472a:	69fb      	ldr	r3, [r7, #28]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3724      	adds	r7, #36	; 0x24
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	0802c20c 	.word	0x0802c20c

0800473c <CheckForAltNames>:
 * returns  1 : match was found.
 *          0 : no match found.
 *         -1 : No matches and wild pattern match failed.
 */
int CheckForAltNames(DecodedCert* dCert, const char* domain, int* checkCN)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
    int match = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
    DNS_entry* altName = NULL;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
    char *buf;
    word32 len;

    WOLFSSL_MSG("Checking AltNames");

    if (dCert)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <CheckForAltNames+0x20>
        altName = dCert->altNames;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	61bb      	str	r3, [r7, #24]

    if (checkCN != NULL) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03d      	beq.n	80047de <CheckForAltNames+0xa2>
        *checkCN = (altName == NULL) ? 1 : 0;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
    }

    while (altName) {
 8004774:	e033      	b.n	80047de <CheckForAltNames+0xa2>
        WOLFSSL_MSG("\tindividual AltName check");

#if defined(OPENSSL_ALL) || defined(WOLFSSL_IP_ALT_NAME)
        if (altName->type == ASN_IP_TYPE) {
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b07      	cmp	r3, #7
 800477c:	d107      	bne.n	800478e <CheckForAltNames+0x52>
            buf = altName->ipString;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	617b      	str	r3, [r7, #20]
            len = (word32)XSTRLEN(buf);
 8004784:	6978      	ldr	r0, [r7, #20]
 8004786:	f7fb fd3d 	bl	8000204 <strlen>
 800478a:	6138      	str	r0, [r7, #16]
 800478c:	e005      	b.n	800479a <CheckForAltNames+0x5e>
        }
        else
#endif /* OPENSSL_ALL || WOLFSSL_IP_ALT_NAME */
        {
            buf = altName->name;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	617b      	str	r3, [r7, #20]
            len = altName->len;
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	613b      	str	r3, [r7, #16]
        }

        if (MatchDomainName(buf, len, domain)) {
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4619      	mov	r1, r3
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f7ff ff25 	bl	80045f0 <MatchDomainName>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <CheckForAltNames+0x82>
            match = 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
            if (checkCN != NULL) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d017      	beq.n	80047e6 <CheckForAltNames+0xaa>
                *checkCN = 0;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
            }
            WOLFSSL_MSG("\tmatch found");
            break;
 80047bc:	e013      	b.n	80047e6 <CheckForAltNames+0xaa>
        }
        /* No matches and wild pattern match failed. */
        else if (buf && (len >=1) && (buf[0] == '*')) {
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <CheckForAltNames+0x9c>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d006      	beq.n	80047d8 <CheckForAltNames+0x9c>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b2a      	cmp	r3, #42	; 0x2a
 80047d0:	d102      	bne.n	80047d8 <CheckForAltNames+0x9c>
            match = -1;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295
 80047d6:	61fb      	str	r3, [r7, #28]
            WOLFSSL_MSG("\twildcard match failed");
        }

        altName = altName->next;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
    while (altName) {
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1c8      	bne.n	8004776 <CheckForAltNames+0x3a>
 80047e4:	e000      	b.n	80047e8 <CheckForAltNames+0xac>
            break;
 80047e6:	bf00      	nop
    }

    return match;
 80047e8:	69fb      	ldr	r3, [r7, #28]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <CheckHostName>:
 * domainName     The domain name.
 * domainNameLen  The length of the domain name.
 * returns DOMAIN_NAME_MISMATCH when no match found and 0 on success.
 */
int CheckHostName(DecodedCert* dCert, const char *domainName, size_t domainNameLen)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
    int checkCN;
    int ret = DOMAIN_NAME_MISMATCH;
 8004800:	4b12      	ldr	r3, [pc, #72]	; (800484c <CheckHostName+0x58>)
 8004802:	617b      	str	r3, [r7, #20]

    /* Assume name is NUL terminated. */
    (void)domainNameLen;

    if (CheckForAltNames(dCert, domainName, &checkCN) != 1) {
 8004804:	f107 0310 	add.w	r3, r7, #16
 8004808:	461a      	mov	r2, r3
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff95 	bl	800473c <CheckForAltNames>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <CheckHostName+0x28>
        WOLFSSL_MSG("DomainName match on alt names failed");
    }
    else {
        ret = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
    }

#ifndef WOLFSSL_HOSTNAME_VERIFY_ALT_NAME_ONLY
    if (checkCN == 1) {
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10e      	bne.n	8004840 <CheckHostName+0x4c>
        if (MatchDomainName(dCert->subjectCN, dCert->subjectCNLen,
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4619      	mov	r1, r3
 8004832:	f7ff fedd 	bl	80045f0 <MatchDomainName>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <CheckHostName+0x4c>
                            domainName) == 1) {
            ret = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
            WOLFSSL_MSG("DomainName match on common name failed");
        }
    }
#endif /* !WOLFSSL_HOSTNAME_VERIFY_ALT_NAME_ONLY */

    return ret;
 8004840:	697b      	ldr	r3, [r7, #20]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	fffffebe 	.word	0xfffffebe

08004850 <CheckIPAddr>:

int CheckIPAddr(DecodedCert* dCert, const char* ipasc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
    WOLFSSL_MSG("Checking IPAddr");

    return CheckHostName(dCert, ipasc, (size_t)XSTRLEN(ipasc));
 800485a:	6838      	ldr	r0, [r7, #0]
 800485c:	f7fb fcd2 	bl	8000204 <strlen>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ffc4 	bl	80047f4 <CheckHostName>
 800486c:	4603      	mov	r3, r0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <CopyDecodedName>:
#endif

#if defined(KEEP_PEER_CERT) || defined(SESSION_CERTS) || \
    defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
static void CopyDecodedName(WOLFSSL_X509_NAME* name, DecodedCert* dCert, int nameType)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
    if (nameType == SUBJECT) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d132      	bne.n	80048ee <CopyDecodedName+0x78>
        XSTRNCPY(name->name, dCert->subject, ASN_NAME_MAX);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f203 13d7 	addw	r3, r3, #471	; 0x1d7
 8004892:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004896:	4619      	mov	r1, r3
 8004898:	f01c ff1a 	bl	80216d0 <strncpy>
        name->name[ASN_NAME_MAX - 1] = '\0';
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f203 1349 	addw	r3, r3, #329	; 0x149
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
        name->sz = (int)XSTRLEN(name->name) + 1;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fb fca9 	bl	8000204 <strlen>
 80048b2:	4603      	mov	r3, r0
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	609a      	str	r2, [r3, #8]
#if defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX) || defined(HAVE_LIGHTY)
        name->rawLen = min(dCert->subjectRawLen, ASN_NAME_MAX);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80048c0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fd22 	bl	800330e <min>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        XMEMCPY(name->raw, dCert->subjectRaw, name->rawLen);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 80048e6:	461a      	mov	r2, r3
 80048e8:	f01c fcfc 	bl	80212e4 <memcpy>
        if (name->rawLen) {
            XMEMCPY(name->raw, dCert->issuerRaw, name->rawLen);
        }
#endif
    }
}
 80048ec:	e017      	b.n	800491e <CopyDecodedName+0xa8>
        XSTRNCPY(name->name, dCert->issuer, ASN_NAME_MAX);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	338d      	adds	r3, #141	; 0x8d
 80048f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80048fa:	4619      	mov	r1, r3
 80048fc:	f01c fee8 	bl	80216d0 <strncpy>
        name->name[ASN_NAME_MAX - 1] = '\0';
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f203 1349 	addw	r3, r3, #329	; 0x149
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
        name->sz = (int)XSTRLEN(name->name) + 1;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fb fc77 	bl	8000204 <strlen>
 8004916:	4603      	mov	r3, r0
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <CopyAdditionalAltNames>:
/* copies over additional alt names such as dirName
 * returns 0 on success
 */
static int CopyAdditionalAltNames(DNS_entry** to, DNS_entry* from, int type,
        void* heap)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	603b      	str	r3, [r7, #0]
    DNS_entry* cur = from;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	61fb      	str	r3, [r7, #28]

    if (to == NULL) {
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d149      	bne.n	80049d2 <CopyAdditionalAltNames+0xac>
        return BAD_FUNC_ARG;
 800493e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004942:	e04a      	b.n	80049da <CopyAdditionalAltNames+0xb4>
    }

    while (cur != NULL) {
        if (cur->type == type) {
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d13e      	bne.n	80049cc <CopyAdditionalAltNames+0xa6>
            DNS_entry* dnsEntry;
            int strLen = cur->len;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	61bb      	str	r3, [r7, #24]

            dnsEntry = AltNameNew(heap);
 8004954:	6838      	ldr	r0, [r7, #0]
 8004956:	f00a fbb4 	bl	800f0c2 <AltNameNew>
 800495a:	6178      	str	r0, [r7, #20]
            if (dnsEntry == NULL) {
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <CopyAdditionalAltNames+0x42>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 8004962:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004966:	e038      	b.n	80049da <CopyAdditionalAltNames+0xb4>
            }

            dnsEntry->type = type;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	605a      	str	r2, [r3, #4]
            dnsEntry->name = (char*)XMALLOC(strLen + 1, heap,
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	3301      	adds	r3, #1
 8004972:	4618      	mov	r0, r3
 8004974:	f014 f91a 	bl	8018bac <wolfSSL_Malloc>
 8004978:	4602      	mov	r2, r0
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	60da      	str	r2, [r3, #12]
                    DYNAMIC_TYPE_ALTNAME);
            if (dnsEntry->name == NULL) {
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <CopyAdditionalAltNames+0x76>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(dnsEntry, heap, DYNAMIC_TYPE_ALTNAME);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <CopyAdditionalAltNames+0x70>
 8004990:	6938      	ldr	r0, [r7, #16]
 8004992:	f014 f927 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 8004996:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800499a:	e01e      	b.n	80049da <CopyAdditionalAltNames+0xb4>
            }
            dnsEntry->len = strLen;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	609a      	str	r2, [r3, #8]
            XMEMCPY(dnsEntry->name, cur->name, strLen);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	68d8      	ldr	r0, [r3, #12]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4619      	mov	r1, r3
 80049ae:	f01c fc99 	bl	80212e4 <memcpy>
            dnsEntry->name[strLen] = '\0';
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	4413      	add	r3, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]

            dnsEntry->next = *to;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	601a      	str	r2, [r3, #0]
            *to = dnsEntry;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	601a      	str	r2, [r3, #0]
        }
        cur = cur->next;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	61fb      	str	r3, [r7, #28]
    while (cur != NULL) {
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1b5      	bne.n	8004944 <CopyAdditionalAltNames+0x1e>
    }
    return 0;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <CopyDecodedToX509>:

/* Copy parts X509 needs from Decoded cert, 0 on success */
/* The same DecodedCert cannot be copied to WOLFSSL_X509 twice otherwise the
 * altNames pointers could be free'd by second x509 still active by first */
int CopyDecodedToX509(WOLFSSL_X509* x509, DecodedCert* dCert)
{
 80049e2:	b590      	push	{r4, r7, lr}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
    int ret = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

    if (x509 == NULL || dCert == NULL ||
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <CopyDecodedToX509+0x24>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <CopyDecodedToX509+0x24>
        dCert->subjectCNLen < 0)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    if (x509 == NULL || dCert == NULL ||
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da03      	bge.n	8004a0e <CopyDecodedToX509+0x2c>
        return BAD_FUNC_ARG;
 8004a06:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004a0a:	f000 bc6b 	b.w	80052e4 <CopyDecodedToX509+0x902>

    if (x509->issuer.name == NULL || x509->subject.name == NULL) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <CopyDecodedToX509+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d103      	bne.n	8004a2a <CopyDecodedToX509+0x48>
        WOLFSSL_MSG("Either init was not called on X509 or programming error");
        WOLFSSL_ERROR_VERBOSE(BAD_FUNC_ARG);
        return BAD_FUNC_ARG;
 8004a22:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004a26:	f000 bc5d 	b.w	80052e4 <CopyDecodedToX509+0x902>
    }

    x509->version = dCert->version + 1;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]

    CopyDecodedName(&x509->issuer, dCert, ISSUER);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff ff19 	bl	8004876 <CopyDecodedName>
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
    if (dCert->issuerName != NULL) {
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <CopyDecodedToX509+0x82>
        wolfSSL_X509_set_issuer_name(x509,
                (WOLFSSL_X509_NAME*)dCert->issuerName);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        wolfSSL_X509_set_issuer_name(x509,
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f006 fb2e 	bl	800b0b8 <wolfSSL_X509_set_issuer_name>
        x509->issuer.x509 = x509;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
    }
#endif /* OPENSSL_EXTRA || OPENSSL_EXTRA_X509_SMALL */
    CopyDecodedName(&x509->subject, dCert, SUBJECT);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ff01 	bl	8004876 <CopyDecodedName>
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
    if (dCert->subjectName != NULL) {
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <CopyDecodedToX509+0xb2>
        wolfSSL_X509_set_subject_name(x509,
                (WOLFSSL_X509_NAME*)dCert->subjectName);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
        wolfSSL_X509_set_subject_name(x509,
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f006 fade 	bl	800b048 <wolfSSL_X509_set_subject_name>
        x509->subject.x509 = x509;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	f8c3 2ab8 	str.w	r2, [r3, #2744]	; 0xab8
    }
#endif /* OPENSSL_EXTRA || OPENSSL_EXTRA_X509_SMALL */

    XMEMCPY(x509->serial, dCert->serial, EXTERNAL_SERIAL_SIZE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f103 00ff 	add.w	r0, r3, #255	; 0xff
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f01c fc1e 	bl	80212e4 <memcpy>
    x509->serialSz = dCert->serialSz;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f8d3 2358 	ldr.w	r2, [r3, #856]	; 0x358
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	605a      	str	r2, [r3, #4]
    if (dCert->subjectCN && dCert->subjectCNLen < ASN_NAME_MAX) {
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01a      	beq.n	8004af2 <CopyDecodedToX509+0x110>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8004ac6:	da14      	bge.n	8004af2 <CopyDecodedToX509+0x110>
        XMEMCPY(x509->subjectCN, dCert->subjectCN, dCert->subjectCNLen);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f203 101f 	addw	r0, r3, #287	; 0x11f
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	461a      	mov	r2, r3
 8004adc:	f01c fc02 	bl	80212e4 <memcpy>
        x509->subjectCN[dCert->subjectCNLen] = '\0';
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
 8004af0:	e003      	b.n	8004afa <CopyDecodedToX509+0x118>
    }
    else
        x509->subjectCN[0] = '\0';
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            x509->hwSerialNumSz = 0;
    }
#endif /* WOLFSSL_SEP */
    {
        int minSz;
        if (dCert->beforeDateLen > 0) {
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	dd20      	ble.n	8004b46 <CopyDecodedToX509+0x164>
            minSz = min(dCert->beforeDate[1], MAX_DATE_SZ);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2120      	movs	r1, #32
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fbfc 	bl	800330e <min>
 8004b16:	4603      	mov	r3, r0
 8004b18:	60bb      	str	r3, [r7, #8]
            x509->notBefore.type = dCert->beforeDate[0];
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40
            x509->notBefore.length = minSz;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c
            XMEMCPY(x509->notBefore.data, &dCert->beforeDate[2], minSz);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f103 001c 	add.w	r0, r3, #28
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f01c fbd0 	bl	80212e4 <memcpy>
 8004b44:	e002      	b.n	8004b4c <CopyDecodedToX509+0x16a>
        }
        else
            x509->notBefore.length = 0;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (dCert->afterDateLen > 0) {
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	dd20      	ble.n	8004b98 <CopyDecodedToX509+0x1b6>
            minSz = min(dCert->afterDate[1], MAX_DATE_SZ);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2120      	movs	r1, #32
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fbd3 	bl	800330e <min>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	60bb      	str	r3, [r7, #8]
            x509->notAfter.type = dCert->afterDate[0];
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	669a      	str	r2, [r3, #104]	; 0x68
            x509->notAfter.length = minSz;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	665a      	str	r2, [r3, #100]	; 0x64
            XMEMCPY(x509->notAfter.data, &dCert->afterDate[2], minSz);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4619      	mov	r1, r3
 8004b92:	f01c fba7 	bl	80212e4 <memcpy>
 8004b96:	e002      	b.n	8004b9e <CopyDecodedToX509+0x1bc>
        }
        else
            x509->notAfter.length = 0;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
    }

    if (dCert->publicKey != NULL && dCert->pubKeySize != 0) {
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d07a      	beq.n	8004c9c <CopyDecodedToX509+0x2ba>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d076      	beq.n	8004c9c <CopyDecodedToX509+0x2ba>
        x509->pubKey.buffer = (byte*)XMALLOC(
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f013 fffa 	bl	8018bac <wolfSSL_Malloc>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	67da      	str	r2, [r3, #124]	; 0x7c
                        dCert->pubKeySize, x509->heap, DYNAMIC_TYPE_PUBLIC_KEY);
        if (x509->pubKey.buffer != NULL) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d014      	beq.n	8004bf0 <CopyDecodedToX509+0x20e>
            x509->pubKeyOID = dCert->keyOID;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            x509->pubKey.length = dCert->pubKeySize;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            XMEMCPY(x509->pubKey.buffer, dCert->publicKey, dCert->pubKeySize);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	461a      	mov	r2, r3
 8004bea:	f01c fb7b 	bl	80212e4 <memcpy>
 8004bee:	e002      	b.n	8004bf6 <CopyDecodedToX509+0x214>
        }
        else
            ret = MEMORY_E;
 8004bf0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004bf4:	60fb      	str	r3, [r7, #12]
#if defined(OPENSSL_ALL)
        if (ret == 0) {
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d14f      	bne.n	8004c9c <CopyDecodedToX509+0x2ba>
            x509->key.pubKeyOID = dCert->keyOID;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24

            if (!x509->key.algor) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <CopyDecodedToX509+0x23e>
                x509->key.algor = wolfSSL_X509_ALGOR_new();
 8004c12:	f005 fe05 	bl	800a820 <wolfSSL_X509_ALGOR_new>
 8004c16:	4602      	mov	r2, r0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
 8004c1e:	e006      	b.n	8004c2e <CopyDecodedToX509+0x24c>
            } else {
                wolfSSL_ASN1_OBJECT_free(x509->key.algor->algorithm);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f004 f97d 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
            }
            if (!x509->key.algor) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <CopyDecodedToX509+0x25e>
                ret = MEMORY_E;
 8004c38:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e014      	b.n	8004c6a <CopyDecodedToX509+0x288>
            } else {
                if (!(x509->key.algor->algorithm =
                    wolfSSL_OBJ_nid2obj(oid2nid(dCert->keyOID, oidKeyType)))) {
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2102      	movs	r1, #2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f004 ff06 	bl	8009a58 <oid2nid>
 8004c4c:	4602      	mov	r2, r0
                if (!(x509->key.algor->algorithm =
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 4c1c 	ldr.w	r4, [r3, #3100]	; 0xc1c
                    wolfSSL_OBJ_nid2obj(oid2nid(dCert->keyOID, oidKeyType)))) {
 8004c54:	4610      	mov	r0, r2
 8004c56:	f004 fcbf 	bl	80095d8 <wolfSSL_OBJ_nid2obj>
 8004c5a:	4603      	mov	r3, r0
                if (!(x509->key.algor->algorithm =
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d102      	bne.n	8004c6a <CopyDecodedToX509+0x288>
                    ret = PUBLIC_KEY_E;
 8004c64:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8004c68:	60fb      	str	r3, [r7, #12]
                    WOLFSSL_ERROR_VERBOSE(ret);
                }
            }

            wolfSSL_EVP_PKEY_free(x509->key.pkey);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 ff0c 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
            if (!(x509->key.pkey = wolfSSL_d2i_PUBKEY(NULL,
                                                      &dCert->publicKey,
 8004c76:	6839      	ldr	r1, [r7, #0]
                                                      dCert->pubKeySize))) {
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
            if (!(x509->key.pkey = wolfSSL_d2i_PUBKEY(NULL,
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f003 fd7e 	bl	8008780 <wolfSSL_d2i_PUBKEY>
 8004c84:	4602      	mov	r2, r0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <CopyDecodedToX509+0x2ba>
                ret = PUBLIC_KEY_E;
 8004c96:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8004c9a:	60fb      	str	r3, [r7, #12]
            }
        }
#endif
    }

    if (dCert->signature != NULL && dCert->sigLength != 0 &&
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d047      	beq.n	8004d36 <CopyDecodedToX509+0x354>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d043      	beq.n	8004d36 <CopyDecodedToX509+0x354>
            dCert->sigLength <= MAX_ENCODED_SIG_SZ) {
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
    if (dCert->signature != NULL && dCert->sigLength != 0 &&
 8004cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb6:	d83e      	bhi.n	8004d36 <CopyDecodedToX509+0x354>
        x509->sig.buffer = (byte*)XMALLOC(
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f013 ff75 	bl	8018bac <wolfSSL_Malloc>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	66da      	str	r2, [r3, #108]	; 0x6c
                          dCert->sigLength, x509->heap, DYNAMIC_TYPE_SIGNATURE);
        if (x509->sig.buffer == NULL) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <CopyDecodedToX509+0x2f6>
            ret = MEMORY_E;
 8004cd0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e012      	b.n	8004cfe <CopyDecodedToX509+0x31c>
        }
        else {
            XMEMCPY(x509->sig.buffer, dCert->signature, dCert->sigLength);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f01c fafc 	bl	80212e4 <memcpy>
            x509->sig.length = dCert->sigLength;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	671a      	str	r2, [r3, #112]	; 0x70
            x509->sigOID = dCert->signatureOID;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	675a      	str	r2, [r3, #116]	; 0x74
        }
#if defined(OPENSSL_ALL)
        wolfSSL_ASN1_OBJECT_free(x509->algor.algorithm);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8004d04:	4618      	mov	r0, r3
 8004d06:	f004 f90f 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
        if (!(x509->algor.algorithm =
                wolfSSL_OBJ_nid2obj(oid2nid(dCert->signatureOID, oidSigType)))) {
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f004 fea1 	bl	8009a58 <oid2nid>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f004 fc5d 	bl	80095d8 <wolfSSL_OBJ_nid2obj>
 8004d1e:	4602      	mov	r2, r0
        if (!(x509->algor.algorithm =
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <CopyDecodedToX509+0x354>
            ret = PUBLIC_KEY_E;
 8004d30:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8004d34:	60fb      	str	r3, [r7, #12]
#endif
    }

    /* if der contains original source buffer then store for potential
     * retrieval */
    if (dCert->source != NULL && dCert->maxIdx > 0) {
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d024      	beq.n	8004d8a <CopyDecodedToX509+0x3a8>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01f      	beq.n	8004d8a <CopyDecodedToX509+0x3a8>
        if (AllocDer(&x509->derCert, dCert->maxIdx, CERT_TYPE, x509->heap)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	f8d3 1330 	ldr.w	r1, [r3, #816]	; 0x330
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f00e fab1 	bl	80132c4 <AllocDer>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <CopyDecodedToX509+0x3a2>
                                                                         == 0) {
            XMEMCPY(x509->derCert->buffer, dCert->source, dCert->maxIdx);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f01c fab1 	bl	80212e4 <memcpy>
 8004d82:	e002      	b.n	8004d8a <CopyDecodedToX509+0x3a8>
        }
        else {
            ret = MEMORY_E;
 8004d84:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004d88:	60fb      	str	r3, [r7, #12]
        }
    }

    x509->altNames       = dCert->altNames;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	679a      	str	r2, [r3, #120]	; 0x78
    dCert->weOwnAltNames = 0;
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 8004d98:	f36f 1386 	bfc	r3, #6, #1
 8004d9c:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
#if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
    !defined(IGNORE_NAME_CONSTRAINTS)
    /* add copies of email names from dCert to X509 */
    if (CopyAdditionalAltNames(&x509->altNames, dCert->altEmailNames,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db0:	2201      	movs	r2, #1
 8004db2:	f7ff fdb8 	bl	8004926 <CopyAdditionalAltNames>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <CopyDecodedToX509+0x3e0>
                ASN_RFC822_TYPE, x509->heap) != 0) {
        return MEMORY_E;
 8004dbc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004dc0:	e290      	b.n	80052e4 <CopyDecodedToX509+0x902>
    }
#endif /* OPENSSL_EXTRA || OPENSSL_EXTRA_X509_SMALL */
#if defined(OPENSSL_EXTRA) && !defined(IGNORE_NAME_CONSTRAINTS)
    /* add copies of alternate directory names from dCert to X509 */
    if (CopyAdditionalAltNames(&x509->altNames, dCert->altDirNames,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	f7ff fda7 	bl	8004926 <CopyAdditionalAltNames>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <CopyDecodedToX509+0x402>
                ASN_DIR_TYPE, x509->heap) != 0) {
        return MEMORY_E;
 8004dde:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004de2:	e27f      	b.n	80052e4 <CopyDecodedToX509+0x902>
    }
#endif /* OPENSSL_EXTRA || OPENSSL_EXTRA_X509_SMALL */
    x509->altNamesNext   = x509->altNames;  /* index hint */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    x509->isCa = dCert->isCA;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8004df4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004df8:	b2d9      	uxtb	r1, r3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	f892 3099 	ldrb.w	r3, [r2, #153]	; 0x99
 8004e00:	f361 0300 	bfi	r3, r1, #0, #1
 8004e04:	f882 3099 	strb.w	r3, [r2, #153]	; 0x99
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
    x509->pathLength = dCert->pathLength;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    x509->keyUsage = dCert->extKeyUsage;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f8b3 23cc 	ldrh.w	r2, [r3, #972]	; 0x3cc
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

    x509->CRLdistSet = dCert->extCRLdistSet;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 8004e28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e2c:	b2d9      	uxtb	r1, r3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8004e34:	f361 0300 	bfi	r3, r1, #0, #1
 8004e38:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    x509->CRLdistCrit = dCert->extCRLdistCrit;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8004e42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e46:	b2d9      	uxtb	r1, r3
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8004e4e:	f361 0341 	bfi	r3, r1, #1, #1
 8004e52:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    if (dCert->extCrlInfoRaw != NULL && dCert->extCrlInfoRawSz > 0) {
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d029      	beq.n	8004eb4 <CopyDecodedToX509+0x4d2>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	dd24      	ble.n	8004eb4 <CopyDecodedToX509+0x4d2>
        x509->rawCRLInfo = (byte*)XMALLOC(dCert->extCrlInfoRawSz, x509->heap,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e70:	4618      	mov	r0, r3
 8004e72:	f013 fe9b 	bl	8018bac <wolfSSL_Malloc>
 8004e76:	4602      	mov	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            DYNAMIC_TYPE_X509_EXT);
        if (x509->rawCRLInfo != NULL) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d012      	beq.n	8004eae <CopyDecodedToX509+0x4cc>
            XMEMCPY(x509->rawCRLInfo, dCert->extCrlInfoRaw, dCert->extCrlInfoRawSz);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	f8d3 1378 	ldr.w	r1, [r3, #888]	; 0x378
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f01c fa22 	bl	80212e4 <memcpy>
            x509->rawCRLInfoSz = dCert->extCrlInfoRawSz;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f8d3 237c 	ldr.w	r2, [r3, #892]	; 0x37c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004eac:	e002      	b.n	8004eb4 <CopyDecodedToX509+0x4d2>
        }
        else {
            ret = MEMORY_E;
 8004eae:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004eb2:	60fb      	str	r3, [r7, #12]
        }
    }
    if (dCert->extCrlInfo != NULL && dCert->extCrlInfoSz > 0) {
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d029      	beq.n	8004f12 <CopyDecodedToX509+0x530>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dd24      	ble.n	8004f12 <CopyDecodedToX509+0x530>
        x509->CRLInfo = (byte*)XMALLOC(dCert->extCrlInfoSz, x509->heap,
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f013 fe6c 	bl	8018bac <wolfSSL_Malloc>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            DYNAMIC_TYPE_X509_EXT);
        if (x509->CRLInfo != NULL) {
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d012      	beq.n	8004f0c <CopyDecodedToX509+0x52a>
            XMEMCPY(x509->CRLInfo, dCert->extCrlInfo, dCert->extCrlInfoSz);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f01c f9f3 	bl	80212e4 <memcpy>
            x509->CRLInfoSz = dCert->extCrlInfoSz;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004f0a:	e002      	b.n	8004f12 <CopyDecodedToX509+0x530>
        }
        else {
            ret = MEMORY_E;
 8004f0c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004f10:	60fb      	str	r3, [r7, #12]
        }
    }
    x509->authInfoSet = dCert->extAuthInfoSet;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 8004f18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f1c:	b2d9      	uxtb	r1, r3
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8004f24:	f361 0382 	bfi	r3, r1, #2, #1
 8004f28:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    x509->authInfoCrit = dCert->extAuthInfoCrit;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8004f32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f36:	b2d9      	uxtb	r1, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8004f3e:	f361 03c3 	bfi	r3, r1, #3, #1
 8004f42:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    if (dCert->extAuthInfo != NULL && dCert->extAuthInfoSz > 0) {
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d029      	beq.n	8004fa4 <CopyDecodedToX509+0x5c2>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd24      	ble.n	8004fa4 <CopyDecodedToX509+0x5c2>
        x509->authInfo = (byte*)XMALLOC(dCert->extAuthInfoSz, x509->heap,
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8004f60:	4618      	mov	r0, r3
 8004f62:	f013 fe23 	bl	8018bac <wolfSSL_Malloc>
 8004f66:	4602      	mov	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                DYNAMIC_TYPE_X509_EXT);
        if (x509->authInfo != NULL) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d012      	beq.n	8004f9e <CopyDecodedToX509+0x5bc>
            XMEMCPY(x509->authInfo, dCert->extAuthInfo, dCert->extAuthInfoSz);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f8d3 1368 	ldr.w	r1, [r3, #872]	; 0x368
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f01c f9aa 	bl	80212e4 <memcpy>
            x509->authInfoSz = dCert->extAuthInfoSz;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004f9c:	e002      	b.n	8004fa4 <CopyDecodedToX509+0x5c2>
        }
        else {
            ret = MEMORY_E;
 8004f9e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004fa2:	60fb      	str	r3, [r7, #12]
        }
    }
    #if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
    if (dCert->extAuthInfoCaIssuer != NULL && dCert->extAuthInfoCaIssuerSz > 0) {
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d029      	beq.n	8005002 <CopyDecodedToX509+0x620>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dd24      	ble.n	8005002 <CopyDecodedToX509+0x620>
        x509->authInfoCaIssuer = (byte*)XMALLOC(dCert->extAuthInfoCaIssuerSz, x509->heap,
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f013 fdf4 	bl	8018bac <wolfSSL_Malloc>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                DYNAMIC_TYPE_X509_EXT);
        if (x509->authInfoCaIssuer != NULL) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d012      	beq.n	8004ffc <CopyDecodedToX509+0x61a>
            XMEMCPY(x509->authInfoCaIssuer, dCert->extAuthInfoCaIssuer, dCert->extAuthInfoCaIssuerSz);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f8d3 1370 	ldr.w	r1, [r3, #880]	; 0x370
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f01c f97b 	bl	80212e4 <memcpy>
            x509->authInfoCaIssuerSz = dCert->extAuthInfoCaIssuerSz;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f8d3 2374 	ldr.w	r2, [r3, #884]	; 0x374
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8004ffa:	e002      	b.n	8005002 <CopyDecodedToX509+0x620>
        }
        else {
            ret = MEMORY_E;
 8004ffc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8005000:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif
    x509->basicConstSet = dCert->extBasicConstSet;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 8005008:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800500c:	b2d9      	uxtb	r1, r3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 8005014:	f361 0341 	bfi	r3, r1, #1, #1
 8005018:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    x509->basicConstCrit = dCert->extBasicConstCrit;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8005022:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005026:	b2d9      	uxtb	r1, r3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 800502e:	f361 0382 	bfi	r3, r1, #2, #1
 8005032:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    x509->basicConstPlSet = dCert->pathLengthSet;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 800503c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005040:	b2d9      	uxtb	r1, r3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 8005048:	f361 03c3 	bfi	r3, r1, #3, #1
 800504c:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    x509->subjAltNameSet = dCert->extSubjAltNameSet;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 8005056:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800505a:	b2d9      	uxtb	r1, r3
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 8005062:	f361 1304 	bfi	r3, r1, #4, #1
 8005066:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    x509->subjAltNameCrit = dCert->extSubjAltNameCrit;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8005070:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005074:	b2d9      	uxtb	r1, r3
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 800507c:	f361 1345 	bfi	r3, r1, #5, #1
 8005080:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    x509->authKeyIdSet = dCert->extAuthKeyIdSet;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 800508a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800508e:	b2d9      	uxtb	r1, r3
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 8005096:	f361 1386 	bfi	r3, r1, #6, #1
 800509a:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    x509->authKeyIdCrit = dCert->extAuthKeyIdCrit;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 80050a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050a8:	b2d9      	uxtb	r1, r3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 80050b0:	f361 13c7 	bfi	r3, r1, #7, #1
 80050b4:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    if (dCert->extAuthKeyIdSrc != NULL && dCert->extAuthKeyIdSz != 0) {
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d029      	beq.n	8005116 <CopyDecodedToX509+0x734>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d024      	beq.n	8005116 <CopyDecodedToX509+0x734>
            }
            else
                ret = MEMORY_E;
        }
    #else
        x509->authKeyId = (byte*)XMALLOC(dCert->extAuthKeyIdSz, x509->heap,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f013 fd6a 	bl	8018bac <wolfSSL_Malloc>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                                         DYNAMIC_TYPE_X509_EXT);
        if (x509->authKeyId != NULL) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d012      	beq.n	8005110 <CopyDecodedToX509+0x72e>
            XMEMCPY(x509->authKeyId,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f8d3 13dc 	ldr.w	r1, [r3, #988]	; 0x3dc
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80050fc:	461a      	mov	r2, r3
 80050fe:	f01c f8f1 	bl	80212e4 <memcpy>
                                 dCert->extAuthKeyIdSrc, dCert->extAuthKeyIdSz);
            x509->authKeyIdSz = dCert->extAuthKeyIdSz;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f8d3 23e0 	ldr.w	r2, [r3, #992]	; 0x3e0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800510e:	e002      	b.n	8005116 <CopyDecodedToX509+0x734>
        }
    #endif
        else
            ret = MEMORY_E;
 8005110:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8005114:	60fb      	str	r3, [r7, #12]
    }
    x509->subjKeyIdSet = dCert->extSubjKeyIdSet;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 800511c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005120:	b2d9      	uxtb	r1, r3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8005128:	f361 13c7 	bfi	r3, r1, #7, #1
 800512c:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    x509->subjKeyIdCrit = dCert->extSubjKeyIdCrit;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f893 346b 	ldrb.w	r3, [r3, #1131]	; 0x46b
 8005136:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800513a:	b2d9      	uxtb	r1, r3
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	f892 30fd 	ldrb.w	r3, [r2, #253]	; 0xfd
 8005142:	f361 0300 	bfi	r3, r1, #0, #1
 8005146:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
    if (dCert->extSubjKeyIdSrc != NULL && dCert->extSubjKeyIdSz != 0) {
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d029      	beq.n	80051a8 <CopyDecodedToX509+0x7c6>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d024      	beq.n	80051a8 <CopyDecodedToX509+0x7c6>
        x509->subjKeyId = (byte*)XMALLOC(dCert->extSubjKeyIdSz, x509->heap,
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8005164:	4618      	mov	r0, r3
 8005166:	f013 fd21 	bl	8018bac <wolfSSL_Malloc>
 800516a:	4602      	mov	r2, r0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                                         DYNAMIC_TYPE_X509_EXT);
        if (x509->subjKeyId != NULL) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <CopyDecodedToX509+0x7c0>
            XMEMCPY(x509->subjKeyId,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f8d3 13e4 	ldr.w	r1, [r3, #996]	; 0x3e4
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800518e:	461a      	mov	r2, r3
 8005190:	f01c f8a8 	bl	80212e4 <memcpy>
                                 dCert->extSubjKeyIdSrc, dCert->extSubjKeyIdSz);
            x509->subjKeyIdSz = dCert->extSubjKeyIdSz;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f8d3 23e8 	ldr.w	r2, [r3, #1000]	; 0x3e8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80051a0:	e002      	b.n	80051a8 <CopyDecodedToX509+0x7c6>
        }
        else
            ret = MEMORY_E;
 80051a2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80051a6:	60fb      	str	r3, [r7, #12]
    }
    x509->keyUsageSet = dCert->extKeyUsageSet;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 80051ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051b2:	b2d9      	uxtb	r1, r3
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 80051ba:	f361 1304 	bfi	r3, r1, #4, #1
 80051be:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    x509->keyUsageCrit = dCert->extKeyUsageCrit;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f893 346b 	ldrb.w	r3, [r3, #1131]	; 0x46b
 80051c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80051cc:	b2d9      	uxtb	r1, r3
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 80051d4:	f361 1345 	bfi	r3, r1, #5, #1
 80051d8:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    if (dCert->extExtKeyUsageSrc != NULL && dCert->extExtKeyUsageSz > 0) {
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d042      	beq.n	800526c <CopyDecodedToX509+0x88a>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d03d      	beq.n	800526c <CopyDecodedToX509+0x88a>
        x509->extKeyUsageSrc = (byte*)XMALLOC(dCert->extExtKeyUsageSz,
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80051f6:	4618      	mov	r0, r3
 80051f8:	f013 fcd8 	bl	8018bac <wolfSSL_Malloc>
 80051fc:	4602      	mov	r2, r0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                x509->heap, DYNAMIC_TYPE_X509_EXT);
        if (x509->extKeyUsageSrc != NULL) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800520a:	2b00      	cmp	r3, #0
 800520c:	d02b      	beq.n	8005266 <CopyDecodedToX509+0x884>
            XMEMCPY(x509->extKeyUsageSrc, dCert->extExtKeyUsageSrc,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005220:	461a      	mov	r2, r3
 8005222:	f01c f85f 	bl	80212e4 <memcpy>
                                                       dCert->extExtKeyUsageSz);
            x509->extKeyUsage      = dCert->extExtKeyUsage;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f893 23ce 	ldrb.w	r2, [r3, #974]	; 0x3ce
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
            x509->extKeyUsageSz    = dCert->extExtKeyUsageSz;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
            x509->extKeyUsageCrit  = dCert->extExtKeyUsageCrit;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f893 346b 	ldrb.w	r3, [r3, #1131]	; 0x46b
 8005244:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005248:	b2d9      	uxtb	r1, r3
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8005250:	f361 1386 	bfi	r3, r1, #6, #1
 8005254:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            x509->extKeyUsageCount = dCert->extExtKeyUsageCount;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f8d3 23d8 	ldr.w	r2, [r3, #984]	; 0x3d8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005264:	e002      	b.n	800526c <CopyDecodedToX509+0x88a>
        }
        else {
            ret = MEMORY_E;
 8005266:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800526a:	60fb      	str	r3, [r7, #12]
        }
    }
    #ifndef IGNORE_NETSCAPE_CERT_TYPE
    x509->nsCertType = dCert->nsCertType;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
            x509->certPoliciesNb = dCert->extCertPoliciesNb;
        }
    #endif /* WOLFSSL_CERT_EXT */
#endif /* OPENSSL_EXTRA || OPENSSL_EXTRA_X509_SMALL */
#ifdef OPENSSL_ALL
    if (dCert->extSubjAltNameSrc != NULL && dCert->extSubjAltNameSz != 0) {
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800527e:	2b00      	cmp	r3, #0
 8005280:	d029      	beq.n	80052d6 <CopyDecodedToX509+0x8f4>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d024      	beq.n	80052d6 <CopyDecodedToX509+0x8f4>
        x509->subjAltNameSrc = (byte*)XMALLOC(dCert->extSubjAltNameSz, x509->heap,
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8005292:	4618      	mov	r0, r3
 8005294:	f013 fc8a 	bl	8018bac <wolfSSL_Malloc>
 8005298:	4602      	mov	r2, r0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                         DYNAMIC_TYPE_X509_EXT);
        if (x509->subjAltNameSrc != NULL) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d012      	beq.n	80052d0 <CopyDecodedToX509+0x8ee>
            XMEMCPY(x509->subjAltNameSrc,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f8d3 13ec 	ldr.w	r1, [r3, #1004]	; 0x3ec
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80052bc:	461a      	mov	r2, r3
 80052be:	f01c f811 	bl	80212e4 <memcpy>
                                 dCert->extSubjAltNameSrc, dCert->extSubjAltNameSz);
            x509->subjAltNameSz = dCert->extSubjAltNameSz;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	; 0x3f0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80052ce:	e002      	b.n	80052d6 <CopyDecodedToX509+0x8f4>
        }
        else
            ret = MEMORY_E;
 80052d0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80052d4:	60fb      	str	r3, [r7, #12]
    }
#endif
#if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448)
    x509->pkCurveOID = dCert->pkCurveOID;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f8d3 23f4 	ldr.w	r2, [r3, #1012]	; 0x3f4
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* HAVE_ECC || HAVE_CURVE25519 || HAVE_CURVE448 */

    return ret;
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd90      	pop	{r4, r7, pc}

080052ec <DoVerifyCallback>:
 * store->error_depth member to determine index (0=peer, >1 intermediates)
 */

int DoVerifyCallback(WOLFSSL_CERT_MANAGER* cm, WOLFSSL* ssl, int ret,
                                                        ProcPeerCertArgs* args)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b098      	sub	sp, #96	; 0x60
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
    int verify_ok = 0, use_cb = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052fe:	2300      	movs	r3, #0
 8005300:	65bb      	str	r3, [r7, #88]	; 0x58
    void *heap;

    if (cm == NULL) {
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <DoVerifyCallback+0x22>
        return BAD_FUNC_ARG;
 8005308:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800530c:	e290      	b.n	8005830 <DoVerifyCallback+0x544>
    }

    heap = (ssl != NULL) ? ssl->heap : cm->heap;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <DoVerifyCallback+0x30>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531a:	e001      	b.n	8005320 <DoVerifyCallback+0x34>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Determine if verify was okay */
    if (ret == 0) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <DoVerifyCallback+0x40>
        verify_ok = 1;
 8005328:	2301      	movs	r3, #1
 800532a:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Determine if verify callback should be used */
    if (ret != 0) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <DoVerifyCallback+0x60>
        if ((ssl != NULL) && (!ssl->options.verifyNone)) {
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <DoVerifyCallback+0x60>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f893 339d 	ldrb.w	r3, [r3, #925]	; 0x39d
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <DoVerifyCallback+0x60>
            use_cb = 1; /* always report errors */
 8005348:	2301      	movs	r3, #1
 800534a:	65bb      	str	r3, [r7, #88]	; 0x58
        use_cb = 1;
    }
#endif
#if defined(OPENSSL_EXTRA)
    /* Perform domain and IP check only for the leaf certificate */
    if (args->certIdx == 0) {
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d17e      	bne.n	8005452 <DoVerifyCallback+0x166>
        /* perform domain name check on the peer certificate */
        if (args->dCertInit && args->dCert && (ssl != NULL) &&
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d046      	beq.n	80053f2 <DoVerifyCallback+0x106>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d042      	beq.n	80053f2 <DoVerifyCallback+0x106>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d03f      	beq.n	80053f2 <DoVerifyCallback+0x106>
                ssl->param && ssl->param->hostName[0]) {
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
        if (args->dCertInit && args->dCert && (ssl != NULL) &&
 8005378:	2b00      	cmp	r3, #0
 800537a:	d03a      	beq.n	80053f2 <DoVerifyCallback+0x106>
                ssl->param && ssl->param->hostName[0]) {
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8005382:	7c1b      	ldrb	r3, [r3, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d034      	beq.n	80053f2 <DoVerifyCallback+0x106>
            /* If altNames names is present, then subject common name is ignored */
            if (args->dCert->altNames != NULL) {
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d012      	beq.n	80053b8 <DoVerifyCallback+0xcc>
                if (CheckForAltNames(args->dCert, ssl->param->hostName, NULL) != 1) {
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6898      	ldr	r0, [r3, #8]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800539c:	3310      	adds	r3, #16
 800539e:	2200      	movs	r2, #0
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7ff f9cb 	bl	800473c <CheckForAltNames>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d022      	beq.n	80053f2 <DoVerifyCallback+0x106>
                    if (ret == 0) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d11f      	bne.n	80053f2 <DoVerifyCallback+0x106>
                        ret = DOMAIN_NAME_MISMATCH;
 80053b2:	4b92      	ldr	r3, [pc, #584]	; (80055fc <DoVerifyCallback+0x310>)
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	e01c      	b.n	80053f2 <DoVerifyCallback+0x106>
                    }
                }
            }
        #ifndef WOLFSSL_HOSTNAME_VERIFY_ALT_NAME_ONLY
            else {
                if (args->dCert->subjectCN) {
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d016      	beq.n	80053f2 <DoVerifyCallback+0x106>
                    if (MatchDomainName(args->dCert->subjectCN,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
                                        args->dCert->subjectCNLen,
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
                    if (MatchDomainName(args->dCert->subjectCN,
 80053d0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
                                        ssl->param->hostName) == 0) {
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80053da:	3310      	adds	r3, #16
                    if (MatchDomainName(args->dCert->subjectCN,
 80053dc:	461a      	mov	r2, r3
 80053de:	f7ff f907 	bl	80045f0 <MatchDomainName>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <DoVerifyCallback+0x106>
                        if (ret == 0) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <DoVerifyCallback+0x106>
                            ret = DOMAIN_NAME_MISMATCH;
 80053ee:	4b83      	ldr	r3, [pc, #524]	; (80055fc <DoVerifyCallback+0x310>)
 80053f0:	607b      	str	r3, [r7, #4]
            }
        #endif /* !WOLFSSL_HOSTNAME_VERIFY_ALT_NAME_ONLY */
        }

        /* perform IP address check on the peer certificate */
        if ((args->dCertInit != 0) && (args->dCert != NULL) && (ssl != NULL) &&
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d027      	beq.n	8005452 <DoVerifyCallback+0x166>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d023      	beq.n	8005452 <DoVerifyCallback+0x166>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d020      	beq.n	8005452 <DoVerifyCallback+0x166>
            (ssl->param != NULL) && (XSTRLEN(ssl->param->ipasc) > 0)) {
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
        if ((args->dCertInit != 0) && (args->dCert != NULL) && (ssl != NULL) &&
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01b      	beq.n	8005452 <DoVerifyCallback+0x166>
            (ssl->param != NULL) && (XSTRLEN(ssl->param->ipasc) > 0)) {
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8005420:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d013      	beq.n	8005452 <DoVerifyCallback+0x166>
            if (CheckIPAddr(args->dCert, ssl->param->ipasc) != 0) {
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8005434:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7ff fa08 	bl	8004850 <CheckIPAddr>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <DoVerifyCallback+0x166>
                if (ret == 0) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <DoVerifyCallback+0x166>
                    ret = IPADDR_MISMATCH;
 800544c:	f46f 73a2 	mvn.w	r3, #324	; 0x144
 8005450:	607b      	str	r3, [r7, #4]
            }
        }
    }
#endif
    /* if verify callback has been set */
    if ((use_cb && (ssl != NULL) && ((ssl->verifyCallback != NULL)
 8005452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <DoVerifyCallback+0x188>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <DoVerifyCallback+0x188>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <DoVerifyCallback+0x192>
    #ifdef OPENSSL_ALL
        || (ssl->ctx->verifyCertCb != NULL)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <DoVerifyCallback+0x192>
    #endif
        ))
    #ifndef NO_WOLFSSL_CM_VERIFY
        || (cm->verifyCallback != NULL)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 81d8 	beq.w	800582e <DoVerifyCallback+0x542>
    #endif
        ) {
        int verifyFail = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	657b      	str	r3, [r7, #84]	; 0x54
    #ifdef WOLFSSL_SMALL_STACK
        WOLFSSL_X509_STORE_CTX* store;
        #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        WOLFSSL_X509* x509;
        #endif
        char* domain = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
        WOLFSSL_X509           x509[1];
        #endif
        char domain[ASN_NAME_MAX];
    #endif
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        int x509Free = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	653b      	str	r3, [r7, #80]	; 0x50
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        store = (WOLFSSL_X509_STORE_CTX*)XMALLOC(
 800548a:	2038      	movs	r0, #56	; 0x38
 800548c:	f013 fb8e 	bl	8018bac <wolfSSL_Malloc>
 8005490:	6438      	str	r0, [r7, #64]	; 0x40
            sizeof(WOLFSSL_X509_STORE_CTX), heap, DYNAMIC_TYPE_X509_STORE);
        if (store == NULL) {
 8005492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <DoVerifyCallback+0x1b2>
            return MEMORY_E;
 8005498:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800549c:	e1c8      	b.n	8005830 <DoVerifyCallback+0x544>
        }
        #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        x509 = (WOLFSSL_X509*)XMALLOC(sizeof(WOLFSSL_X509), heap,
 800549e:	f640 4068 	movw	r0, #3176	; 0xc68
 80054a2:	f013 fb83 	bl	8018bac <wolfSSL_Malloc>
 80054a6:	63f8      	str	r0, [r7, #60]	; 0x3c
            DYNAMIC_TYPE_X509);
        if (x509 == NULL) {
 80054a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <DoVerifyCallback+0x1d8>
            XFREE(store, heap, DYNAMIC_TYPE_X509_STORE);
 80054ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <DoVerifyCallback+0x1d2>
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f013 fb93 	bl	8018be4 <wolfSSL_Free>
            return MEMORY_E;
 80054be:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80054c2:	e1b5      	b.n	8005830 <DoVerifyCallback+0x544>
        }
        #endif
        domain = (char*)XMALLOC(ASN_NAME_MAX, heap, DYNAMIC_TYPE_STRING);
 80054c4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80054c8:	f013 fb70 	bl	8018bac <wolfSSL_Malloc>
 80054cc:	6478      	str	r0, [r7, #68]	; 0x44
        if (domain == NULL) {
 80054ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d112      	bne.n	80054fa <DoVerifyCallback+0x20e>
            XFREE(store, heap, DYNAMIC_TYPE_X509_STORE);
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <DoVerifyCallback+0x1f8>
 80054de:	69f8      	ldr	r0, [r7, #28]
 80054e0:	f013 fb80 	bl	8018be4 <wolfSSL_Free>
            #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
            XFREE(x509, heap, DYNAMIC_TYPE_X509);
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <DoVerifyCallback+0x208>
 80054ee:	69b8      	ldr	r0, [r7, #24]
 80054f0:	f013 fb78 	bl	8018be4 <wolfSSL_Free>
            #endif
            return MEMORY_E;
 80054f4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80054f8:	e19a      	b.n	8005830 <DoVerifyCallback+0x544>
        }
    #endif /* WOLFSSL_SMALL_STACK */

        XMEMSET(store, 0, sizeof(WOLFSSL_X509_STORE_CTX));
 80054fa:	2238      	movs	r2, #56	; 0x38
 80054fc:	2100      	movs	r1, #0
 80054fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005500:	f01b ff18 	bl	8021334 <memset>
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        XMEMSET(x509, 0, sizeof(WOLFSSL_X509));
 8005504:	f640 4268 	movw	r2, #3176	; 0xc68
 8005508:	2100      	movs	r1, #0
 800550a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800550c:	f01b ff12 	bl	8021334 <memset>
    #endif
        domain[0] = '\0';
 8005510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]

        /* build subject CN as string to return in store */
        if (args->dCertInit && args->dCert && args->dCert->subjectCN) {
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d026      	beq.n	8005574 <DoVerifyCallback+0x288>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d022      	beq.n	8005574 <DoVerifyCallback+0x288>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01c      	beq.n	8005574 <DoVerifyCallback+0x288>
            int subjectCNLen = args->dCert->subjectCNLen;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (subjectCNLen > ASN_NAME_MAX-1)
 8005544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005546:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800554a:	db02      	blt.n	8005552 <DoVerifyCallback+0x266>
                subjectCNLen = ASN_NAME_MAX-1;
 800554c:	f240 1349 	movw	r3, #329	; 0x149
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (subjectCNLen > 0) {
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	2b00      	cmp	r3, #0
 8005556:	dd0d      	ble.n	8005574 <DoVerifyCallback+0x288>
                XMEMCPY(domain, args->dCert->subjectCN, subjectCNLen);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005562:	4619      	mov	r1, r3
 8005564:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005566:	f01b febd 	bl	80212e4 <memcpy>
                domain[subjectCNLen] = '\0';
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800556e:	4413      	add	r3, r2
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
            }
        }

#ifndef OPENSSL_COMPATIBLE_DEFAULTS
        store->error = ret;
 8005574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	621a      	str	r2, [r3, #32]
#else
        store->error = GetX509Error(ret);
#endif
        store->error_depth = args->certIdx;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005580:	625a      	str	r2, [r3, #36]	; 0x24
        store->discardSessionCerts = 0;
 8005582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005584:	2200      	movs	r2, #0
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
        store->domain = domain;
 8005588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800558c:	615a      	str	r2, [r3, #20]
        if (ssl != NULL) {
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00f      	beq.n	80055b4 <DoVerifyCallback+0x2c8>
            if (ssl->verifyCbCtx != NULL) {
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <DoVerifyCallback+0x2ba>
                /* Use the WOLFSSL user context if set */
                store->userCtx = ssl->verifyCbCtx;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80055a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a2:	61da      	str	r2, [r3, #28]
 80055a4:	e009      	b.n	80055ba <DoVerifyCallback+0x2ce>
            }
            else {
                /* Else use the WOLFSSL_CTX user context */
                store->userCtx = ssl->ctx->verifyCbCtx;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80055ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b0:	61da      	str	r2, [r3, #28]
 80055b2:	e002      	b.n	80055ba <DoVerifyCallback+0x2ce>
            }
        }
        else {
            store->userCtx = cm;
 80055b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	61da      	str	r2, [r3, #28]
        }
        store->certs = args->certs;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
        store->totalCerts = args->totalCerts;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695a      	ldr	r2, [r3, #20]
 80055c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c
                != WOLFSSL_SUCCESS) {
            WOLFSSL_MSG("Failed to store ssl context in WOLFSSL_X509_STORE_CTX");
        }
    #endif

        if (ssl != NULL) {
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80a4 	beq.w	800571a <DoVerifyCallback+0x42e>
    #if defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER)
            store->store = SSL_STORE(ssl);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <DoVerifyCallback+0x2f8>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 80055e2:	e010      	b.n	8005606 <DoVerifyCallback+0x31a>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <DoVerifyCallback+0x314>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80055f8:	e005      	b.n	8005606 <DoVerifyCallback+0x31a>
 80055fa:	bf00      	nop
 80055fc:	fffffebe 	.word	0xfffffebe
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	33f4      	adds	r3, #244	; 0xf4
 8005606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005608:	6013      	str	r3, [r2, #0]
    #if defined(OPENSSL_EXTRA)
            store->depth = args->count;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005610:	619a      	str	r2, [r3, #24]
            store->param = (WOLFSSL_X509_VERIFY_PARAM*)XMALLOC(
 8005612:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8005616:	f013 fac9 	bl	8018bac <wolfSSL_Malloc>
 800561a:	4602      	mov	r2, r0
 800561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561e:	611a      	str	r2, [r3, #16]
                            sizeof(WOLFSSL_X509_VERIFY_PARAM),
                            heap, DYNAMIC_TYPE_OPENSSL);
            if (store->param == NULL) {
 8005620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11a      	bne.n	800565e <DoVerifyCallback+0x372>
        #ifdef WOLFSSL_SMALL_STACK
                XFREE(domain, heap, DYNAMIC_TYPE_STRING);
 8005628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562a:	63bb      	str	r3, [r7, #56]	; 0x38
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <DoVerifyCallback+0x34c>
 8005632:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005634:	f013 fad6 	bl	8018be4 <wolfSSL_Free>
            #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                XFREE(x509, heap, DYNAMIC_TYPE_X509);
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <DoVerifyCallback+0x35c>
 8005642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005644:	f013 face 	bl	8018be4 <wolfSSL_Free>
            #endif
                XFREE(store, heap, DYNAMIC_TYPE_X509_STORE);
 8005648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564a:	633b      	str	r3, [r7, #48]	; 0x30
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <DoVerifyCallback+0x36c>
 8005652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005654:	f013 fac6 	bl	8018be4 <wolfSSL_Free>
        #endif
                return MEMORY_E;
 8005658:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800565c:	e0e8      	b.n	8005830 <DoVerifyCallback+0x544>
            }
            XMEMSET(store->param, 0, sizeof(WOLFSSL_X509_VERIFY_PARAM));
 800565e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f01b fe63 	bl	8021334 <memset>
            /* Overwrite with non-default param values in SSL */
            if (ssl->param) {
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8005674:	2b00      	cmp	r3, #0
 8005676:	d02f      	beq.n	80056d8 <DoVerifyCallback+0x3ec>
                if (ssl->param->check_time)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	4313      	orrs	r3, r2
 8005684:	d008      	beq.n	8005698 <DoVerifyCallback+0x3ac>
                    store->param->check_time = ssl->param->check_time;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800568c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800568e:	6911      	ldr	r1, [r2, #16]
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	e9c1 2300 	strd	r2, r3, [r1]

                if (ssl->param->flags)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d006      	beq.n	80056b2 <DoVerifyCallback+0x3c6>
                    store->param->flags = ssl->param->flags;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 80056aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	68d2      	ldr	r2, [r2, #12]
 80056b0:	60da      	str	r2, [r3, #12]

                if (ssl->param->hostName[0])
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80056b8:	7c1b      	ldrb	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <DoVerifyCallback+0x3ec>
                    XMEMCPY(store->param->hostName, ssl->param->hostName,
 80056be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f103 0010 	add.w	r0, r3, #16
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80056cc:	3310      	adds	r3, #16
 80056ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d2:	4619      	mov	r1, r3
 80056d4:	f01b fe06 	bl	80212e4 <memcpy>
            }
    #endif /* defined(OPENSSL_EXTRA) */
    #endif /* defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER)*/
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        #ifdef KEEP_PEER_CERT
            if (args->certIdx == 0) {
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <DoVerifyCallback+0x400>
                store->current_cert = &ssl->peerCert; /* use existing X509 */
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f203 4274 	addw	r2, r3, #1140	; 0x474
 80056e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e8:	605a      	str	r2, [r3, #4]
 80056ea:	e016      	b.n	800571a <DoVerifyCallback+0x42e>
            }
            else
        #endif
            {
                InitX509(x509, 0, heap);
 80056ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ee:	2100      	movs	r1, #0
 80056f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056f2:	f7fe fa8d 	bl	8003c10 <InitX509>
                if (CopyDecodedToX509(x509, args->dCert) == 0) {
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056fe:	f7ff f970 	bl	80049e2 <CopyDecodedToX509>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <DoVerifyCallback+0x428>
                    store->current_cert = x509;
 8005708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800570c:	605a      	str	r2, [r3, #4]
                    x509Free = 1;
 800570e:	2301      	movs	r3, #1
 8005710:	653b      	str	r3, [r7, #80]	; 0x50
 8005712:	e002      	b.n	800571a <DoVerifyCallback+0x42e>
                }
                else {
                    FreeX509(x509);
 8005714:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005716:	f7fe faac 	bl	8003c72 <FreeX509>
            store->sesChain = &ssl->session->chain;
    #endif
        }
    #ifndef NO_WOLFSSL_CM_VERIFY
        /* non-zero return code indicates failure override */
        if (cm->verifyCallback != NULL) {
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <DoVerifyCallback+0x45c>
            store->userCtx = cm;
 8005722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	61da      	str	r2, [r3, #28]
            if (cm->verifyCallback(verify_ok, store)) {
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800572e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005730:	4798      	blx	r3
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <DoVerifyCallback+0x458>
                if (ret != 0) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <DoVerifyCallback+0x45c>
                    WOLFSSL_MSG("Verify CM callback overriding error!");
                    ret = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e001      	b.n	8005748 <DoVerifyCallback+0x45c>
                }
            }
            else {
                verifyFail = 1;
 8005744:	2301      	movs	r3, #1
 8005746:	657b      	str	r3, [r7, #84]	; 0x54
            }
        }
    #endif

        if (ssl != NULL) {
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d031      	beq.n	80057b2 <DoVerifyCallback+0x4c6>
    #ifdef OPENSSL_ALL
            /* non-zero return code indicates failure override */
            if (ssl->ctx->verifyCertCb) {
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d015      	beq.n	8005786 <DoVerifyCallback+0x49a>
                if (ssl->ctx->verifyCertCb(store, ssl->ctx->verifyCertCbArg)) {
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 800576a:	4611      	mov	r1, r2
 800576c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800576e:	4798      	blx	r3
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <DoVerifyCallback+0x496>
                    if (ret != 0) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <DoVerifyCallback+0x49a>
                        WOLFSSL_MSG("Verify Cert callback overriding error!");
                        ret = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e001      	b.n	8005786 <DoVerifyCallback+0x49a>
                    }
                }
                else {
                    verifyFail = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	657b      	str	r3, [r7, #84]	; 0x54
                }
            }
    #endif

            /* non-zero return code indicates failure override */
            if (ssl->verifyCallback) {
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <DoVerifyCallback+0x4c6>
                if (ssl->verifyCallback(verify_ok, store)) {
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005798:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800579a:	4798      	blx	r3
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <DoVerifyCallback+0x4c2>
                    if (ret != 0) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <DoVerifyCallback+0x4c6>
                        WOLFSSL_MSG("Verify callback overriding error!");
                        ret = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	607b      	str	r3, [r7, #4]
 80057ac:	e001      	b.n	80057b2 <DoVerifyCallback+0x4c6>
                    }
                }
                else {
                    verifyFail = 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	657b      	str	r3, [r7, #84]	; 0x54
                }
            }
        }

        if (verifyFail) {
 80057b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00c      	beq.n	80057d2 <DoVerifyCallback+0x4e6>
            /* induce error if one not present */
            if (ret == 0) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <DoVerifyCallback+0x4d8>
                ret = VERIFY_CERT_ERROR;
 80057be:	f46f 73a4 	mvn.w	r3, #328	; 0x148
 80057c2:	607b      	str	r3, [r7, #4]
                WOLFSSL_ERROR_VERBOSE(ret);
            }

            /* mark as verify error */
            args->verifyErr = 1;
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80057ca:	f043 0302 	orr.w	r3, r3, #2
 80057ce:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        }
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        if (x509Free) {
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <DoVerifyCallback+0x4f2>
            FreeX509(x509);
 80057d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057da:	f7fe fa4a 	bl	8003c72 <FreeX509>
            ssl->session->altChain.count = 0;
        #endif
        }
    #endif /* SESSION_CERTS */
#ifdef OPENSSL_EXTRA
        if ((ssl != NULL) && (store->param)) {
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00c      	beq.n	80057fe <DoVerifyCallback+0x512>
 80057e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <DoVerifyCallback+0x512>
            XFREE(store->param, heap, DYNAMIC_TYPE_OPENSSL);
 80057ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <DoVerifyCallback+0x512>
 80057f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057fa:	f013 f9f3 	bl	8018be4 <wolfSSL_Free>
        }
#endif
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(domain, heap, DYNAMIC_TYPE_STRING);
 80057fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <DoVerifyCallback+0x522>
 8005808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580a:	f013 f9eb 	bl	8018be4 <wolfSSL_Free>
        #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        XFREE(x509, heap, DYNAMIC_TYPE_X509);
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <DoVerifyCallback+0x532>
 8005818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800581a:	f013 f9e3 	bl	8018be4 <wolfSSL_Free>
        #endif
        XFREE(store, heap, DYNAMIC_TYPE_X509_STORE);
 800581e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <DoVerifyCallback+0x542>
 8005828:	6a38      	ldr	r0, [r7, #32]
 800582a:	f013 f9db 	bl	8018be4 <wolfSSL_Free>
    #endif
    }

    (void)heap;

    return ret;
 800582e:	687b      	ldr	r3, [r7, #4]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3760      	adds	r7, #96	; 0x60
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <ForceZero>:
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 8005846:	e004      	b.n	8005852 <ForceZero+0x1a>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	60fa      	str	r2, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	1e5a      	subs	r2, r3, #1
 8005856:	603a      	str	r2, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f5      	bne.n	8005848 <ForceZero+0x10>
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <c32to24>:
#endif /* !WOLFSSL_HAVE_MAX */

#ifndef WOLFSSL_NO_INT_ENCODE
/* converts a 32 bit integer to 24 bit */
WC_STATIC WC_INLINE void c32to24(word32 in, word24 out)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
    out[0] = (in >> 16) & 0xff;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	b2da      	uxtb	r2, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	701a      	strb	r2, [r3, #0]
    out[1] = (in >>  8) & 0xff;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0a1a      	lsrs	r2, r3, #8
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
    out[2] =  in & 0xff;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	3302      	adds	r3, #2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <MakeWordFromHash>:

#if defined(HAVE_SESSION_TICKET) || !defined(NO_CERTS) || \
    !defined(NO_SESSION_CACHE)
/* Make a word from the front of random hash */
WC_STATIC WC_INLINE word32 MakeWordFromHash(const byte* hashID)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
    return ((word32)hashID[0] << 24) | ((word32)hashID[1] << 16) |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	061a      	lsls	r2, r3, #24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3301      	adds	r3, #1
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	431a      	orrs	r2, r3
           ((word32)hashID[2] <<  8) |  (word32)hashID[3];
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3302      	adds	r3, #2
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	021b      	lsls	r3, r3, #8
    return ((word32)hashID[0] << 24) | ((word32)hashID[1] << 16) |
 80058c0:	4313      	orrs	r3, r2
           ((word32)hashID[2] <<  8) |  (word32)hashID[3];
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	3203      	adds	r2, #3
 80058c6:	7812      	ldrb	r2, [r2, #0]
 80058c8:	4313      	orrs	r3, r2
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <wolfSSL_EVP_PKEY_CTX_free>:
#if defined(OPENSSL_VERSION_NUMBER) && OPENSSL_VERSION_NUMBER >= 0x10100000L
void wolfSSL_EVP_PKEY_CTX_free(WOLFSSL_EVP_PKEY_CTX *ctx)
#else
int wolfSSL_EVP_PKEY_CTX_free(WOLFSSL_EVP_PKEY_CTX *ctx)
#endif
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
    if (ctx == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <wolfSSL_EVP_PKEY_CTX_free+0x12>
#if defined(OPENSSL_VERSION_NUMBER) && OPENSSL_VERSION_NUMBER >= 0x10100000L
     return;
#else
     return 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e01a      	b.n	800591e <wolfSSL_EVP_PKEY_CTX_free+0x48>
#endif
    WOLFSSL_ENTER("EVP_PKEY_CTX_free");
    if (ctx->pkey != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <wolfSSL_EVP_PKEY_CTX_free+0x24>
        wolfSSL_EVP_PKEY_free(ctx->pkey);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f8ca 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
    if (ctx->peerKey != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <wolfSSL_EVP_PKEY_CTX_free+0x36>
        wolfSSL_EVP_PKEY_free(ctx->peerKey);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f8c1 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
    XFREE(ctx, NULL, DYNAMIC_TYPE_PUBLIC_KEY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <wolfSSL_EVP_PKEY_CTX_free+0x46>
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f013 f964 	bl	8018be4 <wolfSSL_Free>
#if !defined(OPENSSL_VERSION_NUMBER) || OPENSSL_VERSION_NUMBER < 0x10100000L
    return WOLFSSL_SUCCESS;
 800591c:	2301      	movs	r3, #1
#endif
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <wolfSSL_EVP_init>:

    return NULL;
}

void wolfSSL_EVP_init(void)
{
 8005926:	b480      	push	{r7}
 8005928:	af00      	add	r7, sp, #0
    /* Does nothing. */
}
 800592a:	bf00      	nop
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <wolfSSL_EVP_MD_CTX_free>:
        }
        return ctx;
    }

    void wolfSSL_EVP_MD_CTX_free(WOLFSSL_EVP_MD_CTX *ctx)
    {
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
        if (ctx) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <wolfSSL_EVP_MD_CTX_free+0x24>
            WOLFSSL_ENTER("EVP_MD_CTX_free");
            wolfSSL_EVP_MD_CTX_cleanup(ctx);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f80c 	bl	8005960 <wolfSSL_EVP_MD_CTX_cleanup>
            XFREE(ctx, NULL, DYNAMIC_TYPE_OPENSSL);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <wolfSSL_EVP_MD_CTX_free+0x24>
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f013 f946 	bl	8018be4 <wolfSSL_Free>
        }
    }
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <wolfSSL_EVP_MD_CTX_cleanup>:
        WOLFSSL_ENTER("wolfSSL_EVP_enc_null");
        return EVP_NULL;
    }

    int wolfSSL_EVP_MD_CTX_cleanup(WOLFSSL_EVP_MD_CTX* ctx)
    {
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
        int ret = WOLFSSL_SUCCESS;
 8005968:	2301      	movs	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
        WOLFSSL_ENTER("EVP_MD_CTX_cleanup");
        if (ctx->pctx != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <wolfSSL_EVP_MD_CTX_cleanup+0x22>
            wolfSSL_EVP_PKEY_CTX_free(ctx->pctx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff ffaa 	bl	80058d6 <wolfSSL_EVP_PKEY_CTX_free>

        if (ctx->isHMAC) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <wolfSSL_EVP_MD_CTX_cleanup+0x36>
            wc_HmacFree(&ctx->hash.hmac);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4618      	mov	r0, r3
 8005990:	f012 fe90 	bl	80186b4 <wc_HmacFree>
 8005994:	e035      	b.n	8005a02 <wolfSSL_EVP_MD_CTX_cleanup+0xa2>
        }
        else {
            switch (ctx->macType) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800599c:	2b11      	cmp	r3, #17
 800599e:	d82c      	bhi.n	80059fa <wolfSSL_EVP_MD_CTX_cleanup+0x9a>
 80059a0:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <wolfSSL_EVP_MD_CTX_cleanup+0x48>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	080059fb 	.word	0x080059fb
 80059b0:	080059fb 	.word	0x080059fb
 80059b4:	08005a01 	.word	0x08005a01
 80059b8:	08005a01 	.word	0x08005a01
 80059bc:	08005a01 	.word	0x08005a01
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	08005a01 	.word	0x08005a01
 80059c8:	08005a01 	.word	0x08005a01
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	08005a01 	.word	0x08005a01
 80059d4:	08005a01 	.word	0x08005a01
 80059d8:	08005a01 	.word	0x08005a01
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	080059fb 	.word	0x080059fb
 80059e4:	080059fb 	.word	0x080059fb
 80059e8:	08005a01 	.word	0x08005a01
 80059ec:	08005a01 	.word	0x08005a01
                    wc_Sha224Free((wc_Sha224*)&ctx->hash.digest);
            #endif /* WOLFSSL_SHA224 */
                    break;
                case WC_HASH_TYPE_SHA256:
            #ifndef NO_SHA256
                    wc_Sha256Free((wc_Sha256*)&ctx->hash.digest);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f016 fa99 	bl	801bf2a <wc_Sha256Free>
            #endif /* !NO_SHA256 */
                    break;
 80059f8:	e003      	b.n	8005a02 <wolfSSL_EVP_MD_CTX_cleanup+0xa2>
            #endif
            #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE256)
                case WC_HASH_TYPE_SHAKE256:
            #endif
                default:
                    ret = WOLFSSL_FAILURE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
                    break;
 80059fe:	e000      	b.n	8005a02 <wolfSSL_EVP_MD_CTX_cleanup+0xa2>
                    break;
 8005a00:	bf00      	nop
            }
        }
        ForceZero(ctx, sizeof(*ctx));
 8005a02:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff ff16 	bl	8005838 <ForceZero>
        ctx->macType = WC_HASH_TYPE_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
        return ret;
 8005a14:	68fb      	ldr	r3, [r7, #12]
    }
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop

08005a20 <wolfSSL_EVP_PKEY_new>:

#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
/* Subset of OPENSSL_EXTRA for PKEY operations PKEY free is needed by the
 * subset of X509 API */

WOLFSSL_EVP_PKEY* wolfSSL_EVP_PKEY_new(void){
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
    return wolfSSL_EVP_PKEY_new_ex(NULL);
 8005a24:	2000      	movs	r0, #0
 8005a26:	f000 f803 	bl	8005a30 <wolfSSL_EVP_PKEY_new_ex>
 8005a2a:	4603      	mov	r3, r0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <wolfSSL_EVP_PKEY_new_ex>:

WOLFSSL_EVP_PKEY* wolfSSL_EVP_PKEY_new_ex(void* heap)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    WOLFSSL_EVP_PKEY* pkey;
    int ret;
    WOLFSSL_ENTER("wolfSSL_EVP_PKEY_new_ex");
    pkey = (WOLFSSL_EVP_PKEY*)XMALLOC(sizeof(WOLFSSL_EVP_PKEY), heap,
 8005a38:	2058      	movs	r0, #88	; 0x58
 8005a3a:	f013 f8b7 	bl	8018bac <wolfSSL_Malloc>
 8005a3e:	60f8      	str	r0, [r7, #12]
            DYNAMIC_TYPE_PUBLIC_KEY);
    if (pkey != NULL) {
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01e      	beq.n	8005a84 <wolfSSL_EVP_PKEY_new_ex+0x54>
        XMEMSET(pkey, 0, sizeof(WOLFSSL_EVP_PKEY));
 8005a46:	2258      	movs	r2, #88	; 0x58
 8005a48:	2100      	movs	r1, #0
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f01b fc72 	bl	8021334 <memset>
        pkey->heap = heap;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	601a      	str	r2, [r3, #0]
        pkey->type = WOLFSSL_EVP_PKEY_DEFAULT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	605a      	str	r2, [r3, #4]
            return NULL;
        }
#endif

#ifndef HAVE_FIPS
        ret = wc_InitRng_ex(&pkey->rng, heap, INVALID_DEVID);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3320      	adds	r3, #32
 8005a60:	f06f 0201 	mvn.w	r2, #1
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f013 fe66 	bl	8019738 <wc_InitRng_ex>
 8005a6c:	60b8      	str	r0, [r7, #8]
#else
        ret = wc_InitRng(&pkey->rng);
#endif
        pkey->references = 1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	611a      	str	r2, [r3, #16]
        if (ret != 0){
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <wolfSSL_EVP_PKEY_new_ex+0x54>
            wolfSSL_EVP_PKEY_free(pkey);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f807 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
            WOLFSSL_MSG("Issue initializing RNG");
            return NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e000      	b.n	8005a86 <wolfSSL_EVP_PKEY_new_ex+0x56>
    }
    else {
        WOLFSSL_MSG("memory failure");
    }

    return pkey;
 8005a84:	68fb      	ldr	r3, [r7, #12]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <wolfSSL_EVP_PKEY_free>:

void wolfSSL_EVP_PKEY_free(WOLFSSL_EVP_PKEY* key)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b088      	sub	sp, #32
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    int doFree = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
    WOLFSSL_ENTER("wolfSSL_EVP_PKEY_free");
    if (key != NULL) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80a4 	beq.w	8005bea <wolfSSL_EVP_PKEY_free+0x15c>
            WOLFSSL_MSG("Couldn't lock pkey mutex");
        }
        #endif

        /* only free if all references to it are done */
        key->references--;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	1e5a      	subs	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	611a      	str	r2, [r3, #16]
        if (key->references == 0) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <wolfSSL_EVP_PKEY_free+0x2a>
            doFree = 1;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
        }
        #ifndef SINGLE_THREADED
        wc_UnLockMutex(&key->refMutex);
        #endif

        if (doFree) {
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8095 	beq.w	8005bea <wolfSSL_EVP_PKEY_free+0x15c>
            wc_FreeRng(&key->rng);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3320      	adds	r3, #32
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f013 fee1 	bl	801988c <wc_FreeRng>

            if (key->pkey.ptr != NULL) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <wolfSSL_EVP_PKEY_free+0x5c>
                XFREE(key->pkey.ptr, key->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	61bb      	str	r3, [r7, #24]
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <wolfSSL_EVP_PKEY_free+0x56>
 8005ade:	69b8      	ldr	r0, [r7, #24]
 8005ae0:	f013 f880 	bl	8018be4 <wolfSSL_Free>
                key->pkey.ptr = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	615a      	str	r2, [r3, #20]
            }
            switch(key->type)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f240 420c 	movw	r2, #1036	; 0x40c
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d032      	beq.n	8005b5c <wolfSSL_EVP_PKEY_free+0xce>
 8005af6:	f240 420c 	movw	r2, #1036	; 0x40c
 8005afa:	4293      	cmp	r3, r2
 8005afc:	dc68      	bgt.n	8005bd0 <wolfSSL_EVP_PKEY_free+0x142>
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d002      	beq.n	8005b08 <wolfSSL_EVP_PKEY_free+0x7a>
 8005b02:	2b12      	cmp	r3, #18
 8005b04:	d015      	beq.n	8005b32 <wolfSSL_EVP_PKEY_free+0xa4>
                    }
                    break;
                #endif /* defined(WOLFSSL_CMAC) ... */

                default:
                    break;
 8005b06:	e063      	b.n	8005bd0 <wolfSSL_EVP_PKEY_free+0x142>
                    if (key->rsa != NULL && key->ownRsa == 1) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d061      	beq.n	8005bd4 <wolfSSL_EVP_PKEY_free+0x146>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d059      	beq.n	8005bd4 <wolfSSL_EVP_PKEY_free+0x146>
                        wolfSSL_RSA_free(key->rsa);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f892 	bl	8005c4e <wolfSSL_RSA_free>
                        key->rsa = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	619a      	str	r2, [r3, #24]
                    break;
 8005b30:	e050      	b.n	8005bd4 <wolfSSL_EVP_PKEY_free+0x146>
                    if (key->ecc != NULL && key->ownEcc == 1) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d04e      	beq.n	8005bd8 <wolfSSL_EVP_PKEY_free+0x14a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d046      	beq.n	8005bd8 <wolfSSL_EVP_PKEY_free+0x14a>
                        wolfSSL_EC_KEY_free(key->ecc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fce5 	bl	800651e <wolfSSL_EC_KEY_free>
                        key->ecc = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
                    break;
 8005b5a:	e03d      	b.n	8005bd8 <wolfSSL_EVP_PKEY_free+0x14a>
                    if (key->hkdfSalt != NULL) {
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <wolfSSL_EVP_PKEY_free+0xee>
                        XFREE(key->hkdfSalt, NULL, DYNAMIC_TYPE_SALT);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <wolfSSL_EVP_PKEY_free+0xe8>
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	f013 f837 	bl	8018be4 <wolfSSL_Free>
                        key->hkdfSalt = NULL;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	635a      	str	r2, [r3, #52]	; 0x34
                    if (key->hkdfKey != NULL) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <wolfSSL_EVP_PKEY_free+0x10e>
                        XFREE(key->hkdfKey, NULL, DYNAMIC_TYPE_KEY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <wolfSSL_EVP_PKEY_free+0x108>
 8005b90:	6938      	ldr	r0, [r7, #16]
 8005b92:	f013 f827 	bl	8018be4 <wolfSSL_Free>
                        key->hkdfKey = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	63da      	str	r2, [r3, #60]	; 0x3c
                    if (key->hkdfInfo != NULL) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <wolfSSL_EVP_PKEY_free+0x12e>
                        XFREE(key->hkdfInfo, NULL, DYNAMIC_TYPE_INFO);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <wolfSSL_EVP_PKEY_free+0x128>
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f013 f817 	bl	8018be4 <wolfSSL_Free>
                        key->hkdfInfo = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
                    key->hkdfSaltSz = 0;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
                    key->hkdfKeySz = 0;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
                    key->hkdfInfoSz = 0;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	649a      	str	r2, [r3, #72]	; 0x48
                    break;
 8005bce:	e004      	b.n	8005bda <wolfSSL_EVP_PKEY_free+0x14c>
                    break;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <wolfSSL_EVP_PKEY_free+0x14c>
                    break;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <wolfSSL_EVP_PKEY_free+0x14c>
                    break;
 8005bd8:	bf00      	nop
            #ifndef SINGLE_THREADED
            if (wc_FreeMutex(&key->refMutex) != 0) {
                WOLFSSL_MSG("Couldn't free pkey mutex");
            }
            #endif
            XFREE(key, key->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <wolfSSL_EVP_PKEY_free+0x15c>
 8005be4:	68b8      	ldr	r0, [r7, #8]
 8005be6:	f012 fffd 	bl	8018be4 <wolfSSL_Free>
        }
    }
}
 8005bea:	bf00      	nop
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <wolfSSL_RSA_get_default_method>:
 *
 * @return  Newly allocated wolfSSL RSA method on success.
 * @return  NULL on failure.
 */
const WOLFSSL_RSA_METHOD* wolfSSL_RSA_get_default_method(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
    static const WOLFSSL_RSA_METHOD wolfssl_rsa_meth = {
        0, /* No flags. */
        (char*)"wolfSSL RSA",
        0  /* Static definition. */
    };
    return &wolfssl_rsa_meth;
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <wolfSSL_RSA_get_default_method+0x10>)
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	08029bc0 	.word	0x08029bc0

08005c08 <wolfSSL_RSA_meth_free>:
/* Dispose of RSA method and allocated data.
 *
 * @param [in] meth  RSA method to free.
 */
void wolfSSL_RSA_meth_free(WOLFSSL_RSA_METHOD *meth)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
    /* Free method if available and dynamically allocated. */
    if ((meth != NULL) && meth->dynamic) {
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d017      	beq.n	8005c46 <wolfSSL_RSA_meth_free+0x3e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7a1b      	ldrb	r3, [r3, #8]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <wolfSSL_RSA_meth_free+0x3e>
        /* Name was duplicated and must be freed. */
        XFREE(meth->name, NULL, DYNAMIC_TYPE_OPENSSL);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <wolfSSL_RSA_meth_free+0x2e>
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f012 ffd7 	bl	8018be4 <wolfSSL_Free>
        /* Dispose of RSA method. */
        XFREE(meth, NULL, DYNAMIC_TYPE_OPENSSL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <wolfSSL_RSA_meth_free+0x3e>
 8005c40:	68b8      	ldr	r0, [r7, #8]
 8005c42:	f012 ffcf 	bl	8018be4 <wolfSSL_Free>
    }
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <wolfSSL_RSA_free>:
 * Cannot use rsa after this call.
 *
 * @param [in] rsa  RSA key to free.
 */
void wolfSSL_RSA_free(WOLFSSL_RSA* rsa)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b08a      	sub	sp, #40	; 0x28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
    int doFree = 1;
 8005c56:	2301      	movs	r3, #1
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24

    WOLFSSL_ENTER("wolfSSL_RSA_free");

    /* Validate parameter. */
    if (rsa == NULL) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <wolfSSL_RSA_free+0x16>
        doFree = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (doFree) {
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d016      	beq.n	8005c98 <wolfSSL_RSA_free+0x4a>
        int isZero;
        int err;

        /* Decrement reference count. */
        wolfSSL_RefDec(&rsa->ref, &isZero, &err);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	1e5a      	subs	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	2300      	movs	r3, #0
 8005c86:	60bb      	str	r3, [r7, #8]
        if (err == 0) {
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <wolfSSL_RSA_free+0x46>
            /* Continue if reference count is zero. */
            doFree = isZero;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
 8005c92:	e001      	b.n	8005c98 <wolfSSL_RSA_free+0x4a>
        }
        else {
            /* Didn't reference decrement so can't free. */
            doFree = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    if (doFree) {
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d074      	beq.n	8005d88 <wolfSSL_RSA_free+0x13a>
        void* heap = rsa->heap;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	623b      	str	r3, [r7, #32]

    #ifdef HAVE_EX_DATA_CLEANUP_HOOKS
        wolfSSL_CRYPTO_cleanup_ex_data(&rsa->ex_data);
    #endif

        if (rsa->internal != NULL) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d030      	beq.n	8005d0e <wolfSSL_RSA_free+0xc0>
        #if !defined(HAVE_FIPS) && !defined(HAVE_USER_RSA) && \
            !defined(HAVE_FAST_RSA) && defined(WC_RSA_BLINDING)
            /* Check if RNG is owned before freeing it. */
            if (rsa->ownRng) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01a      	beq.n	8005cf2 <wolfSSL_RSA_free+0xa4>
                WC_RNG* rng = ((RsaKey*)(rsa->internal))->rng;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005cc8:	61fb      	str	r3, [r7, #28]
                if ((rng != NULL) && (rng != wolfssl_get_global_rng())) {
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <wolfSSL_RSA_free+0xa4>
 8005cd0:	f001 fa06 	bl	80070e0 <wolfssl_get_global_rng>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00a      	beq.n	8005cf2 <wolfSSL_RSA_free+0xa4>
                    wc_FreeRng(rng);
 8005cdc:	69f8      	ldr	r0, [r7, #28]
 8005cde:	f013 fdd5 	bl	801988c <wc_FreeRng>
                    XFREE(rng, heap, DYNAMIC_TYPE_RNG);
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <wolfSSL_RSA_free+0xa4>
 8005cec:	69b8      	ldr	r0, [r7, #24]
 8005cee:	f012 ff79 	bl	8018be4 <wolfSSL_Free>
                }
                /* RNG isn't freed by wolfCrypt RSA free. */
            }
        #endif
            /* Dispose of allocated data in wolfCrypt RSA key. */
            wc_FreeRsaKey((RsaKey*)rsa->internal);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f014 f995 	bl	801a026 <wc_FreeRsaKey>
            /* Dispose of memory for wolfCrypt RSA key. */
            XFREE(rsa->internal, heap, DYNAMIC_TYPE_RSA);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <wolfSSL_RSA_free+0xc0>
 8005d08:	6978      	ldr	r0, [r7, #20]
 8005d0a:	f012 ff6b 	bl	8018be4 <wolfSSL_Free>
        }

        /* Dispose of external representation of RSA values. */
        wolfSSL_BN_clear_free(rsa->iqmp);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f004 faa1 	bl	800a25a <wolfSSL_BN_clear_free>
        wolfSSL_BN_clear_free(rsa->dmq1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f004 fa9c 	bl	800a25a <wolfSSL_BN_clear_free>
        wolfSSL_BN_clear_free(rsa->dmp1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f004 fa97 	bl	800a25a <wolfSSL_BN_clear_free>
        wolfSSL_BN_clear_free(rsa->q);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f004 fa92 	bl	800a25a <wolfSSL_BN_clear_free>
        wolfSSL_BN_clear_free(rsa->p);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f004 fa8d 	bl	800a25a <wolfSSL_BN_clear_free>
        wolfSSL_BN_clear_free(rsa->d);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f004 fa88 	bl	800a25a <wolfSSL_BN_clear_free>
        wolfSSL_BN_free(rsa->e);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f004 fa63 	bl	800a21a <wolfSSL_BN_free>
        wolfSSL_BN_free(rsa->n);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f004 fa5e 	bl	800a21a <wolfSSL_BN_free>

    #if defined(OPENSSL_EXTRA)
        if (rsa->meth) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <wolfSSL_RSA_free+0x122>
            wolfSSL_RSA_meth_free((WOLFSSL_RSA_METHOD*)rsa->meth);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ff4c 	bl	8005c08 <wolfSSL_RSA_meth_free>
        }
    #endif

        /* Set back to NULLs for safety. */
        ForceZero(rsa, sizeof(*rsa));
 8005d70:	213c      	movs	r1, #60	; 0x3c
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fd60 	bl	8005838 <ForceZero>

        XFREE(rsa, heap, DYNAMIC_TYPE_RSA);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <wolfSSL_RSA_free+0x13a>
 8005d82:	6938      	ldr	r0, [r7, #16]
 8005d84:	f012 ff2e 	bl	8018be4 <wolfSSL_Free>
        (void)heap;
    }
}
 8005d88:	bf00      	nop
 8005d8a:	3728      	adds	r7, #40	; 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <wolfSSL_RSA_new_ex>:
 * @param [in] devId  Device identifier value.
 * @return  RSA key on success.
 * @return  NULL on failure.
 */
WOLFSSL_RSA* wolfSSL_RSA_new_ex(void* heap, int devId)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
    WOLFSSL_RSA* rsa = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
    RsaKey* key = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
    int err = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]
    int rsaKeyInited = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	623b      	str	r3, [r7, #32]

    WOLFSSL_ENTER("wolfSSL_RSA_new");

    /* Allocate memory for new wolfCrypt RSA key. */
    key = (RsaKey*)XMALLOC(sizeof(RsaKey), heap, DYNAMIC_TYPE_RSA);
 8005daa:	f241 107c 	movw	r0, #4476	; 0x117c
 8005dae:	f012 fefd 	bl	8018bac <wolfSSL_Malloc>
 8005db2:	61b8      	str	r0, [r7, #24]
    if (key == NULL) {
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <wolfSSL_RSA_new_ex+0x34>
        WOLFSSL_ERROR_MSG("wolfSSL_RSA_new malloc RsaKey failure");
 8005dba:	4853      	ldr	r0, [pc, #332]	; (8005f08 <wolfSSL_RSA_new_ex+0x178>)
 8005dbc:	f012 feec 	bl	8018b98 <WOLFSSL_ERROR_MSG>
        err = 1;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	60bb      	str	r3, [r7, #8]
    }
    if (!err) {
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <wolfSSL_RSA_new_ex+0x52>
        /* Allocate memory for new RSA key. */
        rsa = (WOLFSSL_RSA*)XMALLOC(sizeof(WOLFSSL_RSA), heap,
 8005dca:	203c      	movs	r0, #60	; 0x3c
 8005dcc:	f012 feee 	bl	8018bac <wolfSSL_Malloc>
 8005dd0:	6278      	str	r0, [r7, #36]	; 0x24
            DYNAMIC_TYPE_RSA);
        if (rsa == NULL) {
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <wolfSSL_RSA_new_ex+0x52>
            WOLFSSL_ERROR_MSG("wolfSSL_RSA_new malloc WOLFSSL_RSA failure");
 8005dd8:	484c      	ldr	r0, [pc, #304]	; (8005f0c <wolfSSL_RSA_new_ex+0x17c>)
 8005dda:	f012 fedd 	bl	8018b98 <WOLFSSL_ERROR_MSG>
            err = 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	60bb      	str	r3, [r7, #8]
        }
    }
    if (!err) {
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d111      	bne.n	8005e0c <wolfSSL_RSA_new_ex+0x7c>
        /* Clear all fields of RSA key. */
        XMEMSET(rsa, 0, sizeof(WOLFSSL_RSA));
 8005de8:	223c      	movs	r2, #60	; 0x3c
 8005dea:	2100      	movs	r1, #0
 8005dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dee:	f01b faa1 	bl	8021334 <memset>
        /* Cache heap to use for all allocations. */
        rsa->heap = heap;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	621a      	str	r2, [r3, #32]
    #ifdef OPENSSL_EXTRA
        /* Always have a method set. */
        rsa->meth = wolfSSL_RSA_get_default_method();
 8005df8:	f7ff fefc 	bl	8005bf4 <wolfSSL_RSA_get_default_method>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	629a      	str	r2, [r3, #40]	; 0x28
    #endif

        /* Initialize reference counting. */
        wolfSSL_RefInit(&rsa->ref, &err);
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	2201      	movs	r2, #1
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
    }
    if (!err) {
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <wolfSSL_RSA_new_ex+0xa2>
        /* Initialize wolfCrypt RSA key. */
        if (wc_InitRsaKey_ex(key, heap, devId) != 0) {
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	69b8      	ldr	r0, [r7, #24]
 8005e18:	f014 f871 	bl	8019efe <wc_InitRsaKey_ex>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <wolfSSL_RSA_new_ex+0x9e>
            WOLFSSL_ERROR_MSG("InitRsaKey WOLFSSL_RSA failure");
 8005e22:	483b      	ldr	r0, [pc, #236]	; (8005f10 <wolfSSL_RSA_new_ex+0x180>)
 8005e24:	f012 feb8 	bl	8018b98 <WOLFSSL_ERROR_MSG>
            err = 1;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	e001      	b.n	8005e32 <wolfSSL_RSA_new_ex+0xa2>
        }
        else {
            rsaKeyInited = 1;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	623b      	str	r3, [r7, #32]
        }
    }
    #if !defined(HAVE_FIPS) && !defined(HAVE_USER_RSA) && \
        !defined(HAVE_FAST_RSA) && defined(WC_RSA_BLINDING)
    if (!err) {
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d139      	bne.n	8005eac <wolfSSL_RSA_new_ex+0x11c>
        WC_RNG* rng;

        /* Create a local RNG. */
        rng = (WC_RNG*)XMALLOC(sizeof(WC_RNG), heap, DYNAMIC_TYPE_RNG);
 8005e38:	2010      	movs	r0, #16
 8005e3a:	f012 feb7 	bl	8018bac <wolfSSL_Malloc>
 8005e3e:	61f8      	str	r0, [r7, #28]
        if ((rng != NULL) && (wc_InitRng_ex(rng, heap, devId) != 0)) {
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d011      	beq.n	8005e6a <wolfSSL_RSA_new_ex+0xda>
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	69f8      	ldr	r0, [r7, #28]
 8005e4c:	f013 fc74 	bl	8019738 <wc_InitRng_ex>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <wolfSSL_RSA_new_ex+0xda>
            WOLFSSL_MSG("InitRng failure, attempting to use global RNG");
            XFREE(rng, heap, DYNAMIC_TYPE_RNG);
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <wolfSSL_RSA_new_ex+0xd6>
 8005e60:	6978      	ldr	r0, [r7, #20]
 8005e62:	f012 febf 	bl	8018be4 <wolfSSL_Free>
            rng = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
        }

        rsa->ownRng = 1;
 8005e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8005e70:	f043 0304 	orr.w	r3, r3, #4
 8005e74:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        if (rng == NULL) {
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <wolfSSL_RSA_new_ex+0x102>
            /* Get the wolfSSL global RNG - not thread safe. */
            rng = wolfssl_get_global_rng();
 8005e7e:	f001 f92f 	bl	80070e0 <wolfssl_get_global_rng>
 8005e82:	61f8      	str	r0, [r7, #28]
            rsa->ownRng = 0;
 8005e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e86:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8005e8a:	f36f 0382 	bfc	r3, #2, #1
 8005e8e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        }
        if (rng == NULL) {
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <wolfSSL_RSA_new_ex+0x114>
            /* Couldn't create global either. */
            WOLFSSL_ERROR_MSG("wolfSSL_RSA_new no WC_RNG for blinding");
 8005e98:	481e      	ldr	r0, [pc, #120]	; (8005f14 <wolfSSL_RSA_new_ex+0x184>)
 8005e9a:	f012 fe7d 	bl	8018b98 <WOLFSSL_ERROR_MSG>
            err = 1;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	e003      	b.n	8005eac <wolfSSL_RSA_new_ex+0x11c>
        }
        else {
            /* Set the local or global RNG into the wolfCrypt RSA key. */
            (void)wc_RsaSetRNG(key, rng);
 8005ea4:	69f9      	ldr	r1, [r7, #28]
 8005ea6:	69b8      	ldr	r0, [r7, #24]
 8005ea8:	f015 fa44 	bl	801b334 <wc_RsaSetRNG>
            /* Won't fail as key and rng are not NULL. */
        }
    }
    #endif /* !HAVE_FIPS && !HAVE_USER_RSA && !HAVE_FAST_RSA &&
            * WC_RSA_BLINDING */
    if (!err) {
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <wolfSSL_RSA_new_ex+0x136>
        /* Set wolfCrypt RSA key into RSA key. */
        rsa->internal = key;
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24
        /* Data from external RSA key has not been set into internal one. */
        rsa->inSet = 0;
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8005ebe:	f36f 0300 	bfc	r3, #0, #1
 8005ec2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
    }

    if (err) {
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d017      	beq.n	8005efc <wolfSSL_RSA_new_ex+0x16c>
        /* Dispose of any allocated data on error. */
        /* No failure after RNG allocation - no need to free RNG. */
        if (rsaKeyInited) {
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <wolfSSL_RSA_new_ex+0x148>
            wc_FreeRsaKey(key);
 8005ed2:	69b8      	ldr	r0, [r7, #24]
 8005ed4:	f014 f8a7 	bl	801a026 <wc_FreeRsaKey>
        }
        XFREE(key, heap, DYNAMIC_TYPE_RSA);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <wolfSSL_RSA_new_ex+0x158>
 8005ee2:	6938      	ldr	r0, [r7, #16]
 8005ee4:	f012 fe7e 	bl	8018be4 <wolfSSL_Free>
        XFREE(rsa, heap, DYNAMIC_TYPE_RSA);
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <wolfSSL_RSA_new_ex+0x168>
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f012 fe76 	bl	8018be4 <wolfSSL_Free>
        /* Return NULL. */
        rsa = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return rsa;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3728      	adds	r7, #40	; 0x28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	08023034 	.word	0x08023034
 8005f0c:	0802305c 	.word	0x0802305c
 8005f10:	08023088 	.word	0x08023088
 8005f14:	080230a8 	.word	0x080230a8

08005f18 <wolfSSL_RSA_new>:
 *
 * @return  RSA key on success.
 * @return  NULL on failure.
 */
WOLFSSL_RSA* wolfSSL_RSA_new(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
    /* Call wolfSSL API to do work. */
    return wolfSSL_RSA_new_ex(NULL, INVALID_DEVID);
 8005f1c:	f06f 0101 	mvn.w	r1, #1
 8005f20:	2000      	movs	r0, #0
 8005f22:	f7ff ff35 	bl	8005d90 <wolfSSL_RSA_new_ex>
 8005f26:	4603      	mov	r3, r0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <wolfSSL_RSA_LoadDer_ex>:
 * @return  1 on success.
 * @return  -1 on failure.
 */
int wolfSSL_RSA_LoadDer_ex(WOLFSSL_RSA* rsa, const unsigned char* derBuf,
    int derSz, int opt)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
    int ret = 1;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
    int res;
    word32 idx = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
    word32 algId;

    WOLFSSL_ENTER("wolfSSL_RSA_LoadDer");

    /* Validate parameters. */
    if ((rsa == NULL) || (rsa->internal == NULL) || (derBuf == NULL) ||
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <wolfSSL_RSA_LoadDer_ex+0x30>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <wolfSSL_RSA_LoadDer_ex+0x30>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <wolfSSL_RSA_LoadDer_ex+0x30>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dc05      	bgt.n	8005f68 <wolfSSL_RSA_LoadDer_ex+0x3c>
            (derSz <= 0)) {
        WOLFSSL_ERROR_MSG("Bad function arguments");
 8005f5c:	4834      	ldr	r0, [pc, #208]	; (8006030 <wolfSSL_RSA_LoadDer_ex+0x104>)
 8005f5e:	f012 fe1b 	bl	8018b98 <WOLFSSL_ERROR_MSG>
        ret = -1;
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	61fb      	str	r3, [r7, #28]
    }

    if (ret == 1) {
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d11d      	bne.n	8005faa <wolfSSL_RSA_LoadDer_ex+0x7e>
        rsa->pkcs8HeaderSz = 0;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	861a      	strh	r2, [r3, #48]	; 0x30
        /* Check if input buffer has PKCS8 header. In the case that it does not
         * have a PKCS8 header then do not error out. */
        res = ToTraditionalInline_ex((const byte*)derBuf, &idx, (word32)derSz,
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	f107 0310 	add.w	r3, r7, #16
 8005f7a:	f107 0114 	add.w	r1, r7, #20
 8005f7e:	68b8      	ldr	r0, [r7, #8]
 8005f80:	f008 fdc0 	bl	800eb04 <ToTraditionalInline_ex>
 8005f84:	61b8      	str	r0, [r7, #24]
            &algId);
        if (res > 0) {
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	dd04      	ble.n	8005f96 <wolfSSL_RSA_LoadDer_ex+0x6a>
            /* Store size of PKCS#8 header for encoding. */
            WOLFSSL_MSG("Found PKCS8 header");
            rsa->pkcs8HeaderSz = (word16)idx;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	861a      	strh	r2, [r3, #48]	; 0x30
 8005f94:	e009      	b.n	8005faa <wolfSSL_RSA_LoadDer_ex+0x7e>
        }
        /* When decoding and not PKCS#8, return will be ASN_PARSE_E. */
        else if (res != ASN_PARSE_E) {
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8005f9c:	d005      	beq.n	8005faa <wolfSSL_RSA_LoadDer_ex+0x7e>
            /* Something went wrong while decoding. */
            WOLFSSL_ERROR_MSG("Unexpected error with trying to remove PKCS#8 "
 8005f9e:	4825      	ldr	r0, [pc, #148]	; (8006034 <wolfSSL_RSA_LoadDer_ex+0x108>)
 8005fa0:	f012 fdfa 	bl	8018b98 <WOLFSSL_ERROR_MSG>
                              "header");
            ret = -1;
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa8:	61fb      	str	r3, [r7, #28]
        }
    }
    if (ret == 1) {
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d125      	bne.n	8005ffc <wolfSSL_RSA_LoadDer_ex+0xd0>
        /* Decode private or public key data. */
        if (opt == WOLFSSL_RSA_LOAD_PRIVATE) {
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d109      	bne.n	8005fca <wolfSSL_RSA_LoadDer_ex+0x9e>
            res = wc_RsaPrivateKeyDecode(derBuf, &idx, (RsaKey*)rsa->internal,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f107 0114 	add.w	r1, r7, #20
 8005fc0:	68b8      	ldr	r0, [r7, #8]
 8005fc2:	f008 fd01 	bl	800e9c8 <wc_RsaPrivateKeyDecode>
 8005fc6:	61b8      	str	r0, [r7, #24]
 8005fc8:	e008      	b.n	8005fdc <wolfSSL_RSA_LoadDer_ex+0xb0>
                derSz);
        }
        else {
            res = wc_RsaPublicKeyDecode(derBuf, &idx, (RsaKey*)rsa->internal,
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f107 0114 	add.w	r1, r7, #20
 8005fd4:	68b8      	ldr	r0, [r7, #8]
 8005fd6:	f008 ff74 	bl	800eec2 <wc_RsaPublicKeyDecode>
 8005fda:	61b8      	str	r0, [r7, #24]
                derSz);
        }
        /* Check for error. */
        if (res < 0) {
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da0c      	bge.n	8005ffc <wolfSSL_RSA_LoadDer_ex+0xd0>
            if (opt == WOLFSSL_RSA_LOAD_PRIVATE) {
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d103      	bne.n	8005ff0 <wolfSSL_RSA_LoadDer_ex+0xc4>
                 WOLFSSL_ERROR_MSG("RsaPrivateKeyDecode failed");
 8005fe8:	4813      	ldr	r0, [pc, #76]	; (8006038 <wolfSSL_RSA_LoadDer_ex+0x10c>)
 8005fea:	f012 fdd5 	bl	8018b98 <WOLFSSL_ERROR_MSG>
 8005fee:	e002      	b.n	8005ff6 <wolfSSL_RSA_LoadDer_ex+0xca>
            }
            else {
                 WOLFSSL_ERROR_MSG("RsaPublicKeyDecode failed");
 8005ff0:	4812      	ldr	r0, [pc, #72]	; (800603c <wolfSSL_RSA_LoadDer_ex+0x110>)
 8005ff2:	f012 fdd1 	bl	8018b98 <WOLFSSL_ERROR_MSG>
            }
            WOLFSSL_ERROR_VERBOSE(res);
            ret = -1;
 8005ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffa:	61fb      	str	r3, [r7, #28]
        }
    }
    if (ret == 1) {
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d110      	bne.n	8006024 <wolfSSL_RSA_LoadDer_ex+0xf8>
        /* Set external RSA key data from wolfCrypt key. */
        if (SetRsaExternal(rsa) != 1) {
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f85c 	bl	80060c0 <SetRsaExternal>
 8006008:	4603      	mov	r3, r0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d003      	beq.n	8006016 <wolfSSL_RSA_LoadDer_ex+0xea>
            ret = -1;
 800600e:	f04f 33ff 	mov.w	r3, #4294967295
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	e006      	b.n	8006024 <wolfSSL_RSA_LoadDer_ex+0xf8>
        }
        else {
            rsa->inSet = 1;
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        }
    }

    return ret;
 8006024:	69fb      	ldr	r3, [r7, #28]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	08023104 	.word	0x08023104
 8006034:	0802311c 	.word	0x0802311c
 8006038:	08023154 	.word	0x08023154
 800603c:	08023170 	.word	0x08023170

08006040 <wolfssl_rsa_d2i>:
 * @return  NULL on failure.
 * @return  WOLFSSL_RSA object on success.
 */
static WOLFSSL_RSA* wolfssl_rsa_d2i(WOLFSSL_RSA** rsa, const unsigned char* in,
    long inSz, int opt)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
    WOLFSSL_RSA* ret = NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]

    if ((rsa != NULL) && (*rsa != NULL)) {
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <wolfssl_rsa_d2i+0x28>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <wolfssl_rsa_d2i+0x28>
        ret = *rsa;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e002      	b.n	800606e <wolfssl_rsa_d2i+0x2e>
    }
    else {
        ret = wolfSSL_RSA_new();
 8006068:	f7ff ff56 	bl	8005f18 <wolfSSL_RSA_new>
 800606c:	6178      	str	r0, [r7, #20]
    }
    if ((ret != NULL) && (wolfSSL_RSA_LoadDer_ex(ret, in, (int)inSz, opt)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <wolfssl_rsa_d2i+0x60>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	6978      	ldr	r0, [r7, #20]
 800607c:	f7ff ff56 	bl	8005f2c <wolfSSL_RSA_LoadDer_ex>
 8006080:	4603      	mov	r3, r0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d00c      	beq.n	80060a0 <wolfssl_rsa_d2i+0x60>
            != 1)) {
        if ((rsa == NULL) || (ret != *rsa)) {
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <wolfssl_rsa_d2i+0x56>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	429a      	cmp	r2, r3
 8006094:	d002      	beq.n	800609c <wolfssl_rsa_d2i+0x5c>
            wolfSSL_RSA_free(ret);
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f7ff fdd9 	bl	8005c4e <wolfSSL_RSA_free>
        }
        ret = NULL;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
    }

    if ((rsa != NULL) && (*rsa == NULL)) {
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d006      	beq.n	80060b4 <wolfssl_rsa_d2i+0x74>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <wolfssl_rsa_d2i+0x74>
        *rsa = ret;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	601a      	str	r2, [r3, #0]
    }
    return ret;
 80060b4:	697b      	ldr	r3, [r7, #20]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <SetRsaExternal>:
 * @param [in, out] rsa  RSA key.
 * @return  1 on success.
 * @return  0 on failure.
 */
int SetRsaExternal(WOLFSSL_RSA* rsa)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
    int ret = 1;
 80060c8:	2301      	movs	r3, #1
 80060ca:	60fb      	str	r3, [r7, #12]

    WOLFSSL_ENTER("SetRsaExternal");

    /* Validate parameters. */
    if ((rsa == NULL) || (rsa->internal == NULL)) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <SetRsaExternal+0x1a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <SetRsaExternal+0x26>
        WOLFSSL_ERROR_MSG("rsa key NULL error");
 80060da:	485f      	ldr	r0, [pc, #380]	; (8006258 <SetRsaExternal+0x198>)
 80060dc:	f012 fd5c 	bl	8018b98 <WOLFSSL_ERROR_MSG>
        ret = -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	60fb      	str	r3, [r7, #12]
    }

    if (ret == 1) {
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 80a2 	bne.w	8006232 <SetRsaExternal+0x172>
        RsaKey* key = (RsaKey*)rsa->internal;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	60bb      	str	r3, [r7, #8]

        /* Copy modulus. */
        ret = SetIndividualExternal(&rsa->n, &key->n);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f004 f81a 	bl	800a134 <SetIndividualExternal>
 8006100:	60f8      	str	r0, [r7, #12]
        if (ret != 1) {
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d002      	beq.n	800610e <SetRsaExternal+0x4e>
            WOLFSSL_ERROR_MSG("rsa n error");
 8006108:	4854      	ldr	r0, [pc, #336]	; (800625c <SetRsaExternal+0x19c>)
 800610a:	f012 fd45 	bl	8018b98 <WOLFSSL_ERROR_MSG>
        }
        if (ret == 1) {
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d10f      	bne.n	8006134 <SetRsaExternal+0x74>
            /* Copy public exponent. */
            ret = SetIndividualExternal(&rsa->e, &key->e);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	1d1a      	adds	r2, r3, #4
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f004 f807 	bl	800a134 <SetIndividualExternal>
 8006126:	60f8      	str	r0, [r7, #12]
            if (ret != 1) {
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d002      	beq.n	8006134 <SetRsaExternal+0x74>
                WOLFSSL_ERROR_MSG("rsa e error");
 800612e:	484c      	ldr	r0, [pc, #304]	; (8006260 <SetRsaExternal+0x1a0>)
 8006130:	f012 fd32 	bl	8018b98 <WOLFSSL_ERROR_MSG>
            }
        }

        if (key->type == RSA_PRIVATE) {
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800613e:	2b01      	cmp	r3, #1
 8006140:	d177      	bne.n	8006232 <SetRsaExternal+0x172>
            if (ret == 1) {
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d110      	bne.n	800616a <SetRsaExternal+0xaa>
                /* Copy private exponent. */
                ret = SetIndividualExternal(&rsa->d, &key->d);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f103 0208 	add.w	r2, r3, #8
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f003 ffec 	bl	800a134 <SetIndividualExternal>
 800615c:	60f8      	str	r0, [r7, #12]
                if (ret != 1) {
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d002      	beq.n	800616a <SetRsaExternal+0xaa>
                    WOLFSSL_ERROR_MSG("rsa d error");
 8006164:	483f      	ldr	r0, [pc, #252]	; (8006264 <SetRsaExternal+0x1a4>)
 8006166:	f012 fd17 	bl	8018b98 <WOLFSSL_ERROR_MSG>
                }
            }
            if (ret == 1) {
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d110      	bne.n	8006192 <SetRsaExternal+0xd2>
                /* Copy first prime. */
                ret = SetIndividualExternal(&rsa->p, &key->p);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f103 020c 	add.w	r2, r3, #12
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f203 6384 	addw	r3, r3, #1668	; 0x684
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f003 ffd8 	bl	800a134 <SetIndividualExternal>
 8006184:	60f8      	str	r0, [r7, #12]
                if (ret != 1) {
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d002      	beq.n	8006192 <SetRsaExternal+0xd2>
                    WOLFSSL_ERROR_MSG("rsa p error");
 800618c:	4836      	ldr	r0, [pc, #216]	; (8006268 <SetRsaExternal+0x1a8>)
 800618e:	f012 fd03 	bl	8018b98 <WOLFSSL_ERROR_MSG>
                }
            }
            if (ret == 1) {
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d110      	bne.n	80061ba <SetRsaExternal+0xfa>
                /* Copy second prime. */
                ret = SetIndividualExternal(&rsa->q, &key->q);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f103 0210 	add.w	r2, r3, #16
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f003 ffc4 	bl	800a134 <SetIndividualExternal>
 80061ac:	60f8      	str	r0, [r7, #12]
                if (ret != 1) {
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d002      	beq.n	80061ba <SetRsaExternal+0xfa>
                    WOLFSSL_ERROR_MSG("rsa q error");
 80061b4:	482d      	ldr	r0, [pc, #180]	; (800626c <SetRsaExternal+0x1ac>)
 80061b6:	f012 fcef 	bl	8018b98 <WOLFSSL_ERROR_MSG>
                }
            }
        #ifndef RSA_LOW_MEM
            if (ret == 1) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d110      	bne.n	80061e2 <SetRsaExternal+0x122>
                /* Copy d mod p-1. */
                ret = SetIndividualExternal(&rsa->dmp1, &key->dP);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f103 0214 	add.w	r2, r3, #20
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f003 ffb0 	bl	800a134 <SetIndividualExternal>
 80061d4:	60f8      	str	r0, [r7, #12]
                if (ret != 1) {
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d002      	beq.n	80061e2 <SetRsaExternal+0x122>
                    WOLFSSL_ERROR_MSG("rsa dP error");
 80061dc:	4824      	ldr	r0, [pc, #144]	; (8006270 <SetRsaExternal+0x1b0>)
 80061de:	f012 fcdb 	bl	8018b98 <WOLFSSL_ERROR_MSG>
                }
            }
            if (ret == 1) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d110      	bne.n	800620a <SetRsaExternal+0x14a>
                /* Copy d mod q-1. */
                ret = SetIndividualExternal(&rsa->dmq1, &key->dQ);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f103 0218 	add.w	r2, r3, #24
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f003 ff9c 	bl	800a134 <SetIndividualExternal>
 80061fc:	60f8      	str	r0, [r7, #12]
                if (ret != 1) {
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d002      	beq.n	800620a <SetRsaExternal+0x14a>
                    WOLFSSL_ERROR_MSG("rsa dq error");
 8006204:	481b      	ldr	r0, [pc, #108]	; (8006274 <SetRsaExternal+0x1b4>)
 8006206:	f012 fcc7 	bl	8018b98 <WOLFSSL_ERROR_MSG>
                }
            }
            if (ret == 1) {
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d110      	bne.n	8006232 <SetRsaExternal+0x172>
                /* Copy 1/q mod p. */
                ret = SetIndividualExternal(&rsa->iqmp, &key->u);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 021c 	add.w	r2, r3, #28
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f003 ff88 	bl	800a134 <SetIndividualExternal>
 8006224:	60f8      	str	r0, [r7, #12]
                if (ret != 1) {
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d002      	beq.n	8006232 <SetRsaExternal+0x172>
                    WOLFSSL_ERROR_MSG("rsa u error");
 800622c:	4812      	ldr	r0, [pc, #72]	; (8006278 <SetRsaExternal+0x1b8>)
 800622e:	f012 fcb3 	bl	8018b98 <WOLFSSL_ERROR_MSG>
                }
            }
        #endif /* !RSA_LOW_MEM */
        }
    }
    if (ret == 1) {
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d107      	bne.n	8006248 <SetRsaExternal+0x188>
        /* External values set. */
        rsa->exSet = 1;
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800623e:	f043 0302 	orr.w	r3, r3, #2
 8006242:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8006246:	e001      	b.n	800624c <SetRsaExternal+0x18c>
    }
    else {
        /* Return 0 on failure. */
        ret = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 800624c:	68fb      	ldr	r3, [r7, #12]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	08023260 	.word	0x08023260
 800625c:	08023274 	.word	0x08023274
 8006260:	08023280 	.word	0x08023280
 8006264:	0802328c 	.word	0x0802328c
 8006268:	08023298 	.word	0x08023298
 800626c:	080232a4 	.word	0x080232a4
 8006270:	080232b0 	.word	0x080232b0
 8006274:	080232c0 	.word	0x080232c0
 8006278:	080232d0 	.word	0x080232d0

0800627c <SetECPointExternal>:
    return 1;
}

/* EC_POINT WolfSSL -> OpenSSL */
static int SetECPointExternal(WOLFSSL_EC_POINT *p)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    ecc_point* point;

    WOLFSSL_ENTER("SetECPointExternal");

    if (p == NULL || p->internal == NULL) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <SetECPointExternal+0x16>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <SetECPointExternal+0x1c>
        WOLFSSL_MSG("ECPoint NULL error");
        return -1;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	e030      	b.n	80062fa <SetECPointExternal+0x7e>
    }

    point = (ecc_point*)p->internal;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	60fb      	str	r3, [r7, #12]

    if (SetIndividualExternal(&p->X, point->x) != 1) {
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f003 ff44 	bl	800a134 <SetIndividualExternal>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d002      	beq.n	80062b8 <SetECPointExternal+0x3c>
        WOLFSSL_MSG("ecc point X error");
        return -1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e020      	b.n	80062fa <SetECPointExternal+0x7e>
    }

    if (SetIndividualExternal(&p->Y, point->y) != 1) {
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f003 ff36 	bl	800a134 <SetIndividualExternal>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d002      	beq.n	80062d4 <SetECPointExternal+0x58>
        WOLFSSL_MSG("ecc point Y error");
        return -1;
 80062ce:	f04f 33ff 	mov.w	r3, #4294967295
 80062d2:	e012      	b.n	80062fa <SetECPointExternal+0x7e>
    }

    if (SetIndividualExternal(&p->Z, point->z) != 1) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f103 0208 	add.w	r2, r3, #8
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f003 ff27 	bl	800a134 <SetIndividualExternal>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d002      	beq.n	80062f2 <SetECPointExternal+0x76>
        WOLFSSL_MSG("ecc point Z error");
        return -1;
 80062ec:	f04f 33ff 	mov.w	r3, #4294967295
 80062f0:	e003      	b.n	80062fa <SetECPointExternal+0x7e>
    }

    p->exSet = 1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	745a      	strb	r2, [r3, #17]

    return 1;
 80062f8:	2301      	movs	r3, #1
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <SetECKeyExternal>:


/* EC_KEY wolfSSL -> OpenSSL */
int SetECKeyExternal(WOLFSSL_EC_KEY* eckey)
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
    ecc_key* key;

    WOLFSSL_ENTER("SetECKeyExternal");

    if (eckey == NULL || eckey->internal == NULL) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <SetECKeyExternal+0x16>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <SetECKeyExternal+0x1c>
        WOLFSSL_MSG("ec key NULL error");
        return -1;
 800631a:	f04f 33ff 	mov.w	r3, #4294967295
 800631e:	e05d      	b.n	80063dc <SetECKeyExternal+0xd8>
    }

    key = (ecc_key*)eckey->internal;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	60fb      	str	r3, [r7, #12]

    /* set group (OID, nid and idx) */
    eckey->group->curve_oid = ecc_sets[key->idx].oidSum;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4a2e      	ldr	r2, [pc, #184]	; (80063e4 <SetECKeyExternal+0xe0>)
 800632c:	2134      	movs	r1, #52	; 0x34
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	4413      	add	r3, r2
 8006334:	332c      	adds	r3, #44	; 0x2c
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	609a      	str	r2, [r3, #8]
    eckey->group->curve_nid = EccEnumToNID(ecc_sets[key->idx].id);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4a28      	ldr	r2, [pc, #160]	; (80063e4 <SetECKeyExternal+0xe0>)
 8006344:	2134      	movs	r1, #52	; 0x34
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	4413      	add	r3, r2
 800634c:	3304      	adds	r3, #4
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681c      	ldr	r4, [r3, #0]
 8006354:	4610      	mov	r0, r2
 8006356:	f009 f98f 	bl	800f678 <EccEnumToNID>
 800635a:	4603      	mov	r3, r0
 800635c:	6063      	str	r3, [r4, #4]
    eckey->group->curve_idx = key->idx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	6852      	ldr	r2, [r2, #4]
 8006366:	601a      	str	r2, [r3, #0]

    if (eckey->pub_key->internal != NULL) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01a      	beq.n	80063a8 <SetECKeyExternal+0xa4>
        /* set the internal public key */
        if (wc_ecc_copy_point(&key->pubkey,
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f103 0218 	add.w	r2, r3, #24
                             (ecc_point*)eckey->pub_key->internal) != MP_OKAY) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
        if (wc_ecc_copy_point(&key->pubkey,
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f010 fca7 	bl	8016cd4 <wc_ecc_copy_point>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <SetECKeyExternal+0x8e>
            WOLFSSL_MSG("SetECKeyExternal ecc_copy_point failed");
            return -1;
 800638c:	f04f 33ff 	mov.w	r3, #4294967295
 8006390:	e024      	b.n	80063dc <SetECKeyExternal+0xd8>
        }

        /* set the external pubkey (point) */
        if (SetECPointExternal(eckey->pub_key) != 1) {
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff ff70 	bl	800627c <SetECPointExternal>
 800639c:	4603      	mov	r3, r0
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <SetECKeyExternal+0xa4>
            WOLFSSL_MSG("SetECKeyExternal SetECPointExternal failed");
            return -1;
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295
 80063a6:	e019      	b.n	80063dc <SetECKeyExternal+0xd8>
        }
    }

    /* set the external privkey */
    if (key->type == ECC_PRIVATEKEY) {
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d10f      	bne.n	80063d0 <SetECKeyExternal+0xcc>
        if (SetIndividualExternal(&eckey->priv_key, &key->k) != 1) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f103 0208 	add.w	r2, r3, #8
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f003 feb8 	bl	800a134 <SetIndividualExternal>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d002      	beq.n	80063d0 <SetECKeyExternal+0xcc>
            WOLFSSL_MSG("ec priv key error");
            return -1;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	e005      	b.n	80063dc <SetECKeyExternal+0xd8>
        }
    }

    eckey->exSet = 1;
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7e13      	ldrb	r3, [r2, #24]
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	7613      	strb	r3, [r2, #24]

    return 1;
 80063da:	2301      	movs	r3, #1
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd90      	pop	{r4, r7, pc}
 80063e4:	0802bf1c 	.word	0x0802bf1c

080063e8 <InitwolfSSL_ECKey>:
    }
    return 0;
}

static void InitwolfSSL_ECKey(WOLFSSL_EC_KEY* key)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    if (key) {
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <InitwolfSSL_ECKey+0x40>
        key->group    = NULL;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
        key->pub_key  = NULL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	605a      	str	r2, [r3, #4]
        key->priv_key = NULL;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	609a      	str	r2, [r3, #8]
        key->internal = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	60da      	str	r2, [r3, #12]
        key->inSet    = 0;
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	7e13      	ldrb	r3, [r2, #24]
 8006412:	f36f 0300 	bfc	r3, #0, #1
 8006416:	7613      	strb	r3, [r2, #24]
        key->exSet    = 0;
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	7e13      	ldrb	r3, [r2, #24]
 800641c:	f36f 0341 	bfc	r3, #1, #1
 8006420:	7613      	strb	r3, [r2, #24]
        key->form     = POINT_CONVERSION_UNCOMPRESSED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	751a      	strb	r2, [r3, #20]
    }
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <wolfSSL_EC_KEY_new_ex>:

WOLFSSL_EC_KEY *wolfSSL_EC_KEY_new_ex(void* heap, int devId)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
    WOLFSSL_EC_KEY *external;
    WOLFSSL_ENTER("wolfSSL_EC_KEY_new");

    external = (WOLFSSL_EC_KEY*)XMALLOC(sizeof(WOLFSSL_EC_KEY), heap,
 800643e:	2020      	movs	r0, #32
 8006440:	f012 fbb4 	bl	8018bac <wolfSSL_Malloc>
 8006444:	60f8      	str	r0, [r7, #12]
                                        DYNAMIC_TYPE_ECC);
    if (external == NULL) {
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <wolfSSL_EC_KEY_new_ex+0x1c>
        WOLFSSL_MSG("wolfSSL_EC_KEY_new malloc WOLFSSL_EC_KEY failure");
        return NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	e058      	b.n	8006502 <wolfSSL_EC_KEY_new_ex+0xce>
    }
    XMEMSET(external, 0, sizeof(WOLFSSL_EC_KEY));
 8006450:	2220      	movs	r2, #32
 8006452:	2100      	movs	r1, #0
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f01a ff6d 	bl	8021334 <memset>
    external->heap = heap;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	611a      	str	r2, [r3, #16]

    InitwolfSSL_ECKey(external);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff ffc1 	bl	80063e8 <InitwolfSSL_ECKey>

    external->refCount = 1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	61da      	str	r2, [r3, #28]
        XFREE(external, heap, DYNAMIC_TYPE_ECC);
        return NULL;
    }
#endif

    external->internal = (ecc_key*)XMALLOC(sizeof(ecc_key), heap,
 800646c:	f44f 7051 	mov.w	r0, #836	; 0x344
 8006470:	f012 fb9c 	bl	8018bac <wolfSSL_Malloc>
 8006474:	4602      	mov	r2, r0
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	60da      	str	r2, [r3, #12]
                                           DYNAMIC_TYPE_ECC);
    if (external->internal == NULL) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d032      	beq.n	80064e8 <wolfSSL_EC_KEY_new_ex+0xb4>
        WOLFSSL_MSG("wolfSSL_EC_KEY_new malloc ecc key failure");
        goto error;
    }
    XMEMSET(external->internal, 0, sizeof(ecc_key));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f44f 7251 	mov.w	r2, #836	; 0x344
 800648a:	2100      	movs	r1, #0
 800648c:	4618      	mov	r0, r3
 800648e:	f01a ff51 	bl	8021334 <memset>

    if (wc_ecc_init_ex((ecc_key*)external->internal, heap, devId) != 0) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4618      	mov	r0, r3
 800649c:	f010 fe57 	bl	801714e <wc_ecc_init_ex>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d122      	bne.n	80064ec <wolfSSL_EC_KEY_new_ex+0xb8>
        WOLFSSL_MSG("wolfSSL_EC_KEY_new init ecc key failure");
        goto error;
    }

    /* Group unknown at creation */
    external->group = wolfSSL_EC_GROUP_new_by_curve_name(NID_undef);
 80064a6:	2000      	movs	r0, #0
 80064a8:	f000 f894 	bl	80065d4 <wolfSSL_EC_GROUP_new_by_curve_name>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]
    if (external->group == NULL) {
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01a      	beq.n	80064f0 <wolfSSL_EC_KEY_new_ex+0xbc>
        WOLFSSL_MSG("wolfSSL_EC_KEY_new malloc WOLFSSL_EC_GROUP failure");
        goto error;
    }

    /* public key */
    external->pub_key = wolfSSL_EC_POINT_new(external->group);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f99a 	bl	80067f8 <wolfSSL_EC_POINT_new>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]
    if (external->pub_key == NULL) {
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d010      	beq.n	80064f4 <wolfSSL_EC_KEY_new_ex+0xc0>
        WOLFSSL_MSG("wolfSSL_EC_POINT_new failure");
        goto error;
    }

    /* private key */
    external->priv_key = wolfSSL_BN_new();
 80064d2:	f003 fe7c 	bl	800a1ce <wolfSSL_BN_new>
 80064d6:	4602      	mov	r2, r0
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	609a      	str	r2, [r3, #8]
    if (external->priv_key == NULL) {
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <wolfSSL_EC_KEY_new_ex+0xc4>
        WOLFSSL_MSG("wolfSSL_BN_new failure");
        goto error;
    }

    return external;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	e00c      	b.n	8006502 <wolfSSL_EC_KEY_new_ex+0xce>
        goto error;
 80064e8:	bf00      	nop
 80064ea:	e006      	b.n	80064fa <wolfSSL_EC_KEY_new_ex+0xc6>
        goto error;
 80064ec:	bf00      	nop
 80064ee:	e004      	b.n	80064fa <wolfSSL_EC_KEY_new_ex+0xc6>
        goto error;
 80064f0:	bf00      	nop
 80064f2:	e002      	b.n	80064fa <wolfSSL_EC_KEY_new_ex+0xc6>
        goto error;
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <wolfSSL_EC_KEY_new_ex+0xc6>
        goto error;
 80064f8:	bf00      	nop
error:
    wolfSSL_EC_KEY_free(external);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f80f 	bl	800651e <wolfSSL_EC_KEY_free>
    return NULL;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <wolfSSL_EC_KEY_new>:

WOLFSSL_EC_KEY *wolfSSL_EC_KEY_new(void)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	af00      	add	r7, sp, #0
    return wolfSSL_EC_KEY_new_ex(NULL, INVALID_DEVID);
 800650e:	f06f 0101 	mvn.w	r1, #1
 8006512:	2000      	movs	r0, #0
 8006514:	f7ff ff8e 	bl	8006434 <wolfSSL_EC_KEY_new_ex>
 8006518:	4603      	mov	r3, r0
}
 800651a:	4618      	mov	r0, r3
 800651c:	bd80      	pop	{r7, pc}

0800651e <wolfSSL_EC_KEY_free>:

void wolfSSL_EC_KEY_free(WOLFSSL_EC_KEY *key)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b086      	sub	sp, #24
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
    int doFree = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]

    WOLFSSL_ENTER("wolfSSL_EC_KEY_free");

    if (key != NULL) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d03e      	beq.n	80065ae <wolfSSL_EC_KEY_free+0x90>
        void* heap = key->heap;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	613b      	str	r3, [r7, #16]
            return;
        }
    #endif

        /* only free if all references to it are done */
        key->refCount--;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	1e5a      	subs	r2, r3, #1
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	61da      	str	r2, [r3, #28]
        if (key->refCount == 0) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <wolfSSL_EC_KEY_free+0x2e>
            doFree = 1;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
        }
    #ifndef SINGLE_THREADED
        wc_UnLockMutex(&key->refMutex);
    #endif

        if (doFree == 0) {
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d02c      	beq.n	80065ac <wolfSSL_EC_KEY_free+0x8e>

    #ifndef SINGLE_THREADED
        wc_FreeMutex(&key->refMutex);
    #endif

        if (key->internal != NULL) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00d      	beq.n	8006576 <wolfSSL_EC_KEY_free+0x58>
            wc_ecc_free((ecc_key*)key->internal);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	4618      	mov	r0, r3
 8006560:	f010 fe4e 	bl	8017200 <wc_ecc_free>
            XFREE(key->internal, heap, DYNAMIC_TYPE_ECC);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <wolfSSL_EC_KEY_free+0x58>
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f012 fb37 	bl	8018be4 <wolfSSL_Free>
        }
        wolfSSL_BN_free(key->priv_key);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4618      	mov	r0, r3
 800657c:	f003 fe4d 	bl	800a21a <wolfSSL_BN_free>
        wolfSSL_EC_POINT_free(key->pub_key);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 f966 	bl	8006856 <wolfSSL_EC_POINT_free>
        wolfSSL_EC_GROUP_free(key->group);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 f810 	bl	80065b4 <wolfSSL_EC_GROUP_free>
        InitwolfSSL_ECKey(key); /* set back to NULLs for safety */
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ff27 	bl	80063e8 <InitwolfSSL_ECKey>

        XFREE(key, heap, DYNAMIC_TYPE_ECC);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <wolfSSL_EC_KEY_free+0x90>
 80065a4:	68b8      	ldr	r0, [r7, #8]
 80065a6:	f012 fb1d 	bl	8018be4 <wolfSSL_Free>
 80065aa:	e000      	b.n	80065ae <wolfSSL_EC_KEY_free+0x90>
            return;
 80065ac:	bf00      	nop
        (void)heap;
        /* key = NULL, don't try to access or double free it */
    }
}
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <wolfSSL_EC_GROUP_free>:
    }
    return 0;
}

void wolfSSL_EC_GROUP_free(WOLFSSL_EC_GROUP *group)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_EC_GROUP_free");

    XFREE(group, NULL, DYNAMIC_TYPE_ECC);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <wolfSSL_EC_GROUP_free+0x18>
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f012 fb0c 	bl	8018be4 <wolfSSL_Free>
    /* group = NULL, don't try to access or double free it */
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <wolfSSL_EC_GROUP_new_by_curve_name>:
}
#endif /* OPENSSL_EXTRA */

#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_WPAS_SMALL)
WOLFSSL_EC_GROUP *wolfSSL_EC_GROUP_new_by_curve_name(int nid)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
    int x, eccEnum;

    WOLFSSL_ENTER("wolfSSL_EC_GROUP_new_by_curve_name");

    /* curve group */
    g = (WOLFSSL_EC_GROUP*)XMALLOC(sizeof(WOLFSSL_EC_GROUP), NULL,
 80065dc:	200c      	movs	r0, #12
 80065de:	f012 fae5 	bl	8018bac <wolfSSL_Malloc>
 80065e2:	6138      	str	r0, [r7, #16]
                                    DYNAMIC_TYPE_ECC);
    if (g == NULL) {
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <wolfSSL_EC_GROUP_new_by_curve_name+0x1a>
        WOLFSSL_MSG("wolfSSL_EC_GROUP_new_by_curve_name malloc failure");
        return NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e03d      	b.n	800666a <wolfSSL_EC_GROUP_new_by_curve_name+0x96>
    }
    XMEMSET(g, 0, sizeof(WOLFSSL_EC_GROUP));
 80065ee:	220c      	movs	r2, #12
 80065f0:	2100      	movs	r1, #0
 80065f2:	6938      	ldr	r0, [r7, #16]
 80065f4:	f01a fe9e 	bl	8021334 <memset>

    /* set the nid of the curve */
    g->curve_nid = nid;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	605a      	str	r2, [r3, #4]
    g->curve_idx = -1;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	601a      	str	r2, [r3, #0]

    /* If NID passed in is OpenSSL type, convert it to ecc_curve_id enum */
    eccEnum = NIDToEccEnum(nid);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f836 	bl	8006678 <NIDToEccEnum>
 800660c:	60f8      	str	r0, [r7, #12]
    if (eccEnum != -1) {
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d028      	beq.n	8006668 <wolfSSL_EC_GROUP_new_by_curve_name+0x94>
        /* search and set the corresponding internal curve idx */
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e01c      	b.n	8006656 <wolfSSL_EC_GROUP_new_by_curve_name+0x82>
            if (ecc_sets[x].id == eccEnum) {
 800661c:	4a15      	ldr	r2, [pc, #84]	; (8006674 <wolfSSL_EC_GROUP_new_by_curve_name+0xa0>)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2134      	movs	r1, #52	; 0x34
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	429a      	cmp	r2, r3
 8006630:	d10e      	bne.n	8006650 <wolfSSL_EC_GROUP_new_by_curve_name+0x7c>
                g->curve_idx = x;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	601a      	str	r2, [r3, #0]
                g->curve_oid = ecc_sets[x].oidSum;
 8006638:	4a0e      	ldr	r2, [pc, #56]	; (8006674 <wolfSSL_EC_GROUP_new_by_curve_name+0xa0>)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2134      	movs	r1, #52	; 0x34
 800663e:	fb01 f303 	mul.w	r3, r1, r3
 8006642:	4413      	add	r3, r2
 8006644:	332c      	adds	r3, #44	; 0x2c
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	609a      	str	r2, [r3, #8]
                break;
 800664e:	e00b      	b.n	8006668 <wolfSSL_EC_GROUP_new_by_curve_name+0x94>
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3301      	adds	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	4a07      	ldr	r2, [pc, #28]	; (8006674 <wolfSSL_EC_GROUP_new_by_curve_name+0xa0>)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2134      	movs	r1, #52	; 0x34
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1d9      	bne.n	800661c <wolfSSL_EC_GROUP_new_by_curve_name+0x48>
            }
        }
    }

    return g;
 8006668:	693b      	ldr	r3, [r7, #16]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	0802bf1c 	.word	0x0802bf1c

08006678 <NIDToEccEnum>:

/* Converts OpenSSL NID value of ECC curves to the associated enum values in
   ecc_curve_id, used by ecc_sets[].*/
int NIDToEccEnum(int n)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("NIDToEccEnum()");

    switch(n) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f240 32a5 	movw	r2, #933	; 0x3a5
 8006686:	4293      	cmp	r3, r2
 8006688:	f300 80ad 	bgt.w	80067e6 <NIDToEccEnum+0x16e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006692:	dc08      	bgt.n	80066a6 <NIDToEccEnum+0x2e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f5b3 7fd1 	cmp.w	r3, #418	; 0x1a2
 800669a:	dc65      	bgt.n	8006768 <NIDToEccEnum+0xf0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 80066a2:	dc45      	bgt.n	8006730 <NIDToEccEnum+0xb8>
 80066a4:	e09f      	b.n	80067e6 <NIDToEccEnum+0x16e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f2a3 3399 	subw	r3, r3, #921	; 0x399
 80066ac:	2b0c      	cmp	r3, #12
 80066ae:	f200 809a 	bhi.w	80067e6 <NIDToEccEnum+0x16e>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <NIDToEccEnum+0x40>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080067cb 	.word	0x080067cb
 80066bc:	080067e7 	.word	0x080067e7
 80066c0:	080067cf 	.word	0x080067cf
 80066c4:	080067e7 	.word	0x080067e7
 80066c8:	080067d3 	.word	0x080067d3
 80066cc:	080067e7 	.word	0x080067e7
 80066d0:	080067d7 	.word	0x080067d7
 80066d4:	080067e7 	.word	0x080067e7
 80066d8:	080067db 	.word	0x080067db
 80066dc:	080067e7 	.word	0x080067e7
 80066e0:	080067df 	.word	0x080067df
 80066e4:	080067e7 	.word	0x080067e7
 80066e8:	080067e3 	.word	0x080067e3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d877      	bhi.n	80067e6 <NIDToEccEnum+0x16e>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <NIDToEccEnum+0x84>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006797 	.word	0x08006797
 8006700:	0800679b 	.word	0x0800679b
 8006704:	0800679f 	.word	0x0800679f
 8006708:	080067a3 	.word	0x080067a3
 800670c:	080067bb 	.word	0x080067bb
 8006710:	080067a7 	.word	0x080067a7
 8006714:	080067ab 	.word	0x080067ab
 8006718:	080067bf 	.word	0x080067bf
 800671c:	080067c3 	.word	0x080067c3
 8006720:	080067af 	.word	0x080067af
 8006724:	080067c7 	.word	0x080067c7
 8006728:	080067b3 	.word	0x080067b3
 800672c:	080067b7 	.word	0x080067b7
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f2a3 1399 	subw	r3, r3, #409	; 0x199
 8006736:	2b09      	cmp	r3, #9
 8006738:	d855      	bhi.n	80067e6 <NIDToEccEnum+0x16e>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <NIDToEccEnum+0xc8>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	0800677b 	.word	0x0800677b
 8006744:	0800677f 	.word	0x0800677f
 8006748:	08006783 	.word	0x08006783
 800674c:	08006787 	.word	0x08006787
 8006750:	0800678b 	.word	0x0800678b
 8006754:	080067e7 	.word	0x080067e7
 8006758:	08006793 	.word	0x08006793
 800675c:	080067e7 	.word	0x080067e7
 8006760:	080067e7 	.word	0x080067e7
 8006764:	0800678f 	.word	0x0800678f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f5b3 7f33 	cmp.w	r3, #716	; 0x2cc
 800676e:	dc3a      	bgt.n	80067e6 <NIDToEccEnum+0x16e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8006776:	dab9      	bge.n	80066ec <NIDToEccEnum+0x74>
 8006778:	e035      	b.n	80067e6 <NIDToEccEnum+0x16e>
        case NID_X9_62_prime192v1:
            return ECC_SECP192R1;
 800677a:	2301      	movs	r3, #1
 800677c:	e035      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_X9_62_prime192v2:
            return ECC_PRIME192V2;
 800677e:	2302      	movs	r3, #2
 8006780:	e033      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_X9_62_prime192v3:
            return ECC_PRIME192V3;
 8006782:	2303      	movs	r3, #3
 8006784:	e031      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_X9_62_prime239v1:
            return ECC_PRIME239V1;
 8006786:	2304      	movs	r3, #4
 8006788:	e02f      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_X9_62_prime239v2:
            return ECC_PRIME239V2;
 800678a:	2305      	movs	r3, #5
 800678c:	e02d      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_X9_62_prime239v3:
            return ECC_PRIME239V3;
 800678e:	2306      	movs	r3, #6
 8006790:	e02b      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_X9_62_prime256v1:
            return ECC_SECP256R1;
 8006792:	2307      	movs	r3, #7
 8006794:	e029      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp112r1:
            return ECC_SECP112R1;
 8006796:	2308      	movs	r3, #8
 8006798:	e027      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp112r2:
            return ECC_SECP112R2;
 800679a:	2309      	movs	r3, #9
 800679c:	e025      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp128r1:
            return ECC_SECP128R1;
 800679e:	230a      	movs	r3, #10
 80067a0:	e023      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp128r2:
            return ECC_SECP128R2;
 80067a2:	230b      	movs	r3, #11
 80067a4:	e021      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp160r1:
            return ECC_SECP160R1;
 80067a6:	230c      	movs	r3, #12
 80067a8:	e01f      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp160r2:
            return ECC_SECP160R2;
 80067aa:	230d      	movs	r3, #13
 80067ac:	e01d      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp224r1:
            return ECC_SECP224R1;
 80067ae:	230e      	movs	r3, #14
 80067b0:	e01b      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp384r1:
            return ECC_SECP384R1;
 80067b2:	230f      	movs	r3, #15
 80067b4:	e019      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp521r1:
            return ECC_SECP521R1;
 80067b6:	2310      	movs	r3, #16
 80067b8:	e017      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp160k1:
            return ECC_SECP160K1;
 80067ba:	2311      	movs	r3, #17
 80067bc:	e015      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp192k1:
            return ECC_SECP192K1;
 80067be:	2312      	movs	r3, #18
 80067c0:	e013      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp224k1:
            return ECC_SECP224K1;
 80067c2:	2313      	movs	r3, #19
 80067c4:	e011      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_secp256k1:
            return ECC_SECP256K1;
 80067c6:	2314      	movs	r3, #20
 80067c8:	e00f      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_brainpoolP160r1:
            return ECC_BRAINPOOLP160R1;
 80067ca:	2315      	movs	r3, #21
 80067cc:	e00d      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_brainpoolP192r1:
            return ECC_BRAINPOOLP192R1;
 80067ce:	2316      	movs	r3, #22
 80067d0:	e00b      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_brainpoolP224r1:
            return ECC_BRAINPOOLP224R1;
 80067d2:	2317      	movs	r3, #23
 80067d4:	e009      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_brainpoolP256r1:
            return ECC_BRAINPOOLP256R1;
 80067d6:	2318      	movs	r3, #24
 80067d8:	e007      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_brainpoolP320r1:
            return ECC_BRAINPOOLP320R1;
 80067da:	2319      	movs	r3, #25
 80067dc:	e005      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_brainpoolP384r1:
            return ECC_BRAINPOOLP384R1;
 80067de:	231a      	movs	r3, #26
 80067e0:	e003      	b.n	80067ea <NIDToEccEnum+0x172>
        case NID_brainpoolP512r1:
            return ECC_BRAINPOOLP512R1;
 80067e2:	231b      	movs	r3, #27
 80067e4:	e001      	b.n	80067ea <NIDToEccEnum+0x172>
        default:
            WOLFSSL_MSG("NID not found");
            return -1;
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop

080067f8 <wolfSSL_EC_POINT_new>:
            == MP_OKAY ? 1 : 0;
}
#endif /* USE_ECC_B_PARAM && !(FIPS_VERSION <= 2) */

WOLFSSL_EC_POINT *wolfSSL_EC_POINT_new(const WOLFSSL_EC_GROUP *group)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
    WOLFSSL_EC_POINT *p;

    WOLFSSL_ENTER("wolfSSL_EC_POINT_new");

    if (group == NULL) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <wolfSSL_EC_POINT_new+0x12>
        WOLFSSL_MSG("wolfSSL_EC_POINT_new NULL error");
        return NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	e021      	b.n	800684e <wolfSSL_EC_POINT_new+0x56>
    }

    p = (WOLFSSL_EC_POINT *)XMALLOC(sizeof(WOLFSSL_EC_POINT), NULL,
 800680a:	2014      	movs	r0, #20
 800680c:	f012 f9ce 	bl	8018bac <wolfSSL_Malloc>
 8006810:	60f8      	str	r0, [r7, #12]
                                    DYNAMIC_TYPE_ECC);
    if (p == NULL) {
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <wolfSSL_EC_POINT_new+0x24>
        WOLFSSL_MSG("wolfSSL_EC_POINT_new malloc ecc point failure");
        return NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	e018      	b.n	800684e <wolfSSL_EC_POINT_new+0x56>
    }
    XMEMSET(p, 0, sizeof(WOLFSSL_EC_POINT));
 800681c:	2214      	movs	r2, #20
 800681e:	2100      	movs	r1, #0
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f01a fd87 	bl	8021334 <memset>

    p->internal = wc_ecc_new_point();
 8006826:	f010 fa17 	bl	8016c58 <wc_ecc_new_point>
 800682a:	4602      	mov	r2, r0
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	60da      	str	r2, [r3, #12]
    if (p->internal == NULL) {
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <wolfSSL_EC_POINT_new+0x54>
        WOLFSSL_MSG("ecc_new_point failure");
        XFREE(p, NULL, DYNAMIC_TYPE_ECC);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <wolfSSL_EC_POINT_new+0x50>
 8006842:	68b8      	ldr	r0, [r7, #8]
 8006844:	f012 f9ce 	bl	8018be4 <wolfSSL_Free>
        return NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <wolfSSL_EC_POINT_new+0x56>
    }

    return p;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <wolfSSL_EC_POINT_free>:
}
#endif /* OPENSSL_EXTRA */

#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
void wolfSSL_EC_POINT_free(WOLFSSL_EC_POINT *p)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_EC_POINT_free");

    if (p != NULL) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d032      	beq.n	80068ca <wolfSSL_EC_POINT_free+0x74>
        if (p->internal != NULL) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <wolfSSL_EC_POINT_free+0x26>
            wc_ecc_del_point((ecc_point*)p->internal);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4618      	mov	r0, r3
 8006872:	f010 fa23 	bl	8016cbc <wc_ecc_del_point>
            p->internal = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	60da      	str	r2, [r3, #12]
        }

        wolfSSL_BN_free(p->X);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f003 fcca 	bl	800a21a <wolfSSL_BN_free>
        wolfSSL_BN_free(p->Y);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	f003 fcc5 	bl	800a21a <wolfSSL_BN_free>
        wolfSSL_BN_free(p->Z);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4618      	mov	r0, r3
 8006896:	f003 fcc0 	bl	800a21a <wolfSSL_BN_free>
        p->X = NULL;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
        p->Y = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	605a      	str	r2, [r3, #4]
        p->Z = NULL;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	609a      	str	r2, [r3, #8]
        p->inSet = p->exSet = 0;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	745a      	strb	r2, [r3, #17]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7c5a      	ldrb	r2, [r3, #17]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	741a      	strb	r2, [r3, #16]

        XFREE(p, NULL, DYNAMIC_TYPE_ECC);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <wolfSSL_EC_POINT_free+0x74>
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f012 f98d 	bl	8018be4 <wolfSSL_Free>
        /* p = NULL, don't try to access or double free it */
    }
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <wolfSSL_EC_KEY_LoadDer_ex>:
                                     WOLFSSL_EC_KEY_LOAD_PRIVATE);
}

int wolfSSL_EC_KEY_LoadDer_ex(WOLFSSL_EC_KEY* key, const unsigned char* derBuf,
                              int derSz, int opt)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b088      	sub	sp, #32
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	603b      	str	r3, [r7, #0]
    int ret;
    word32 idx = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61bb      	str	r3, [r7, #24]
    word32 algId;

    WOLFSSL_ENTER("wolfSSL_EC_KEY_LoadDer");

    if (key == NULL || key->internal == NULL || derBuf == NULL || derSz <= 0) {
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <wolfSSL_EC_KEY_LoadDer_ex+0x2c>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <wolfSSL_EC_KEY_LoadDer_ex+0x2c>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <wolfSSL_EC_KEY_LoadDer_ex+0x2c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dc02      	bgt.n	8006904 <wolfSSL_EC_KEY_LoadDer_ex+0x32>
        WOLFSSL_MSG("Bad function arguments");
        return -1;
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006902:	e045      	b.n	8006990 <wolfSSL_EC_KEY_LoadDer_ex+0xbe>
    }

    key->pkcs8HeaderSz = 0;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	82da      	strh	r2, [r3, #22]

    /* Check if input buffer has PKCS8 header. In the case that it does not
     * have a PKCS8 header then do not error out. */
    if ((ret = ToTraditionalInline_ex((const byte*)derBuf, &idx, (word32)derSz,
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	f107 0314 	add.w	r3, r7, #20
 8006910:	f107 0118 	add.w	r1, r7, #24
 8006914:	68b8      	ldr	r0, [r7, #8]
 8006916:	f008 f8f5 	bl	800eb04 <ToTraditionalInline_ex>
 800691a:	61f8      	str	r0, [r7, #28]
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dd04      	ble.n	800692c <wolfSSL_EC_KEY_LoadDer_ex+0x5a>
                                                                 &algId)) > 0) {
        WOLFSSL_MSG("Found PKCS8 header");
        key->pkcs8HeaderSz = (word16)idx;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	82da      	strh	r2, [r3, #22]
 800692a:	e006      	b.n	800693a <wolfSSL_EC_KEY_LoadDer_ex+0x68>
    }
    else {
        if (ret != ASN_PARSE_E) {
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8006932:	d002      	beq.n	800693a <wolfSSL_EC_KEY_LoadDer_ex+0x68>
            WOLFSSL_MSG("Unexpected error with trying to remove PKCS8 header");
            return -1;
 8006934:	f04f 33ff 	mov.w	r3, #4294967295
 8006938:	e02a      	b.n	8006990 <wolfSSL_EC_KEY_LoadDer_ex+0xbe>
        }
    }

    if (opt == WOLFSSL_EC_KEY_LOAD_PRIVATE) {
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d109      	bne.n	8006954 <wolfSSL_EC_KEY_LoadDer_ex+0x82>
        ret = wc_EccPrivateKeyDecode(derBuf, &idx, (ecc_key*)key->internal,
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f107 0118 	add.w	r1, r7, #24
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f00d fbc9 	bl	80140e2 <wc_EccPrivateKeyDecode>
 8006950:	61f8      	str	r0, [r7, #28]
 8006952:	e008      	b.n	8006966 <wolfSSL_EC_KEY_LoadDer_ex+0x94>
                                     derSz);
    }
    else {
        ret = wc_EccPublicKeyDecode(derBuf, &idx, (ecc_key*)key->internal,
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f107 0118 	add.w	r1, r7, #24
 800695e:	68b8      	ldr	r0, [r7, #8]
 8006960:	f00d fd19 	bl	8014396 <wc_EccPublicKeyDecode>
 8006964:	61f8      	str	r0, [r7, #28]
                                    derSz);
    }
    if (ret < 0) {
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	2b00      	cmp	r3, #0
 800696a:	da02      	bge.n	8006972 <wolfSSL_EC_KEY_LoadDer_ex+0xa0>
            WOLFSSL_MSG("wc_EccPrivateKeyDecode failed");
        }
        else {
            WOLFSSL_MSG("wc_EccPublicKeyDecode failed");
        }
        return -1;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	e00e      	b.n	8006990 <wolfSSL_EC_KEY_LoadDer_ex+0xbe>
    }

    if (SetECKeyExternal(key) != 1) {
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fcc6 	bl	8006304 <SetECKeyExternal>
 8006978:	4603      	mov	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d002      	beq.n	8006984 <wolfSSL_EC_KEY_LoadDer_ex+0xb2>
        WOLFSSL_MSG("SetECKeyExternal failed");
        return -1;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	e005      	b.n	8006990 <wolfSSL_EC_KEY_LoadDer_ex+0xbe>
    }

    key->inSet = 1;
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	7e13      	ldrb	r3, [r2, #24]
 8006988:	f043 0301 	orr.w	r3, r3, #1
 800698c:	7613      	strb	r3, [r2, #24]

    return 1;
 800698e:	2301      	movs	r3, #1
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <wolfSSL_CTX_new_ex>:
   WOLFSSL_METHOD pointer passed in is given to ctx to manage.
   This function frees the passed in WOLFSSL_METHOD struct on failure and on
   success is freed when ctx is freed.
 */
WOLFSSL_CTX* wolfSSL_CTX_new_ex(WOLFSSL_METHOD* method, void* heap)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
    WOLFSSL_CTX* ctx = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]

    WOLFSSL_ENTER("wolfSSL_CTX_new_ex");

    if (initRefCount == 0) {
 80069a6:	4b20      	ldr	r3, [pc, #128]	; (8006a28 <wolfSSL_CTX_new_ex+0x90>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d112      	bne.n	80069d4 <wolfSSL_CTX_new_ex+0x3c>
        /* user no longer forced to call Init themselves */
        int ret = wolfSSL_Init();
 80069ae:	f000 fbad 	bl	800710c <wolfSSL_Init>
 80069b2:	61b8      	str	r0, [r7, #24]
        if (ret != WOLFSSL_SUCCESS) {
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d00c      	beq.n	80069d4 <wolfSSL_CTX_new_ex+0x3c>
            WOLFSSL_MSG("wolfSSL_Init failed");
            WOLFSSL_LEAVE("WOLFSSL_CTX_new", 0);
            if (method != NULL) {
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <wolfSSL_CTX_new_ex+0x38>
                XFREE(method, heap, DYNAMIC_TYPE_METHOD);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <wolfSSL_CTX_new_ex+0x38>
 80069ca:	6978      	ldr	r0, [r7, #20]
 80069cc:	f012 f90a 	bl	8018be4 <wolfSSL_Free>
            }
            return NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e024      	b.n	8006a1e <wolfSSL_CTX_new_ex+0x86>
        }
    }

    if (method == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <wolfSSL_CTX_new_ex+0x46>
        return ctx;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	e01f      	b.n	8006a1e <wolfSSL_CTX_new_ex+0x86>

    ctx = (WOLFSSL_CTX*)XMALLOC(sizeof(WOLFSSL_CTX), heap, DYNAMIC_TYPE_CTX);
 80069de:	f44f 709e 	mov.w	r0, #316	; 0x13c
 80069e2:	f012 f8e3 	bl	8018bac <wolfSSL_Malloc>
 80069e6:	61f8      	str	r0, [r7, #28]
    if (ctx) {
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00e      	beq.n	8006a0c <wolfSSL_CTX_new_ex+0x74>
        int ret;

        ret = InitSSL_Ctx(ctx, method, heap);
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	69f8      	ldr	r0, [r7, #28]
 80069f4:	f7fc fcc6 	bl	8003384 <InitSSL_Ctx>
 80069f8:	60f8      	str	r0, [r7, #12]
    #ifdef WOLFSSL_STATIC_MEMORY
        if (heap != NULL) {
            ctx->onHeapHint = 1; /* free the memory back to heap when done */
        }
    #endif
        if (ret < 0) {
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da0d      	bge.n	8006a1c <wolfSSL_CTX_new_ex+0x84>
            WOLFSSL_MSG("Init CTX failed");
            wolfSSL_CTX_free(ctx);
 8006a00:	69f8      	ldr	r0, [r7, #28]
 8006a02:	f000 f820 	bl	8006a46 <wolfSSL_CTX_free>
            ctx = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	e007      	b.n	8006a1c <wolfSSL_CTX_new_ex+0x84>
        }
#endif
    }
    else {
        WOLFSSL_MSG("Alloc CTX failed, method freed");
        XFREE(method, heap, DYNAMIC_TYPE_METHOD);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <wolfSSL_CTX_new_ex+0x84>
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f012 f8e4 	bl	8018be4 <wolfSSL_Free>
        }
    }
#endif

    WOLFSSL_LEAVE("WOLFSSL_CTX_new", 0);
    return ctx;
 8006a1c:	69fb      	ldr	r3, [r7, #28]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3720      	adds	r7, #32
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	2000034c 	.word	0x2000034c

08006a2c <wolfSSL_CTX_new>:


WOLFSSL_ABI
WOLFSSL_CTX* wolfSSL_CTX_new(WOLFSSL_METHOD* method)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_HEAP_TEST
    /* if testing the heap hint then set top level CTX to have test value */
    return wolfSSL_CTX_new_ex(method, (void*)WOLFSSL_HEAP_TEST);
#else
    return wolfSSL_CTX_new_ex(method, NULL);
 8006a34:	2100      	movs	r1, #0
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ffae 	bl	8006998 <wolfSSL_CTX_new_ex>
 8006a3c:	4603      	mov	r3, r0
#endif
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <wolfSSL_CTX_free>:
    return ((refCount > 1) ? WOLFSSL_SUCCESS : WOLFSSL_FAILURE);
}

WOLFSSL_ABI
void wolfSSL_CTX_free(WOLFSSL_CTX* ctx)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("SSL_CTX_free");
    if (ctx) {
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <wolfSSL_CTX_free+0x14>
            wc_SrpTerm(ctx->srp);
            XFREE(ctx->srp, ctx->heap, DYNAMIC_TYPE_SRP);
            ctx->srp = NULL;
        }
#endif
        FreeSSL_Ctx(ctx);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fc fe7f 	bl	8003758 <FreeSSL_Ctx>
    }

    WOLFSSL_LEAVE("SSL_CTX_free", 0);
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <wolfSSL_free>:
}


WOLFSSL_ABI
void wolfSSL_free(WOLFSSL* ssl)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("SSL_free");
    if (ssl)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <wolfSSL_free+0x1c>
        FreeSSL(ssl, ssl->ctx->heap);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fd fd09 	bl	8004490 <FreeSSL>
    WOLFSSL_LEAVE("SSL_free", 0);
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <wolfSSL_CTX_GetDevId>:
}

/* helpers to get device id and heap */
WOLFSSL_ABI
int wolfSSL_CTX_GetDevId(WOLFSSL_CTX* ctx, WOLFSSL* ssl)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
    int devId = INVALID_DEVID;
 8006a90:	f06f 0301 	mvn.w	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
    if (ssl != NULL)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <wolfSSL_CTX_GetDevId+0x22>
        devId = ssl->devId;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006aa6:	60fb      	str	r3, [r7, #12]
    if (ctx != NULL && devId == INVALID_DEVID)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <wolfSSL_CTX_GetDevId+0x38>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f113 0f02 	cmn.w	r3, #2
 8006ab4:	d103      	bne.n	8006abe <wolfSSL_CTX_GetDevId+0x38>
        devId = ctx->devId;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8006abc:	60fb      	str	r3, [r7, #12]
    return devId;
 8006abe:	68fb      	ldr	r3, [r7, #12]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <wolfSSL_CTX_GetHeap>:
void* wolfSSL_CTX_GetHeap(WOLFSSL_CTX* ctx, WOLFSSL* ssl)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
    void* heap = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
    if (ctx != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <wolfSSL_CTX_GetHeap+0x1c>
        heap = ctx->heap;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e006      	b.n	8006af6 <wolfSSL_CTX_GetHeap+0x2a>
    else if (ssl != NULL)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <wolfSSL_CTX_GetHeap+0x2a>
        heap = ssl->heap;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af4:	60fb      	str	r3, [r7, #12]
    return heap;
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <wolfSSL_CertManagerNew_ex>:
        cm = ctx->cm;
    return cm;
}

WOLFSSL_CERT_MANAGER* wolfSSL_CertManagerNew_ex(void* heap)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
    WOLFSSL_CERT_MANAGER* cm;

    WOLFSSL_ENTER("wolfSSL_CertManagerNew");

    cm = (WOLFSSL_CERT_MANAGER*) XMALLOC(sizeof(WOLFSSL_CERT_MANAGER), heap,
 8006b0c:	2068      	movs	r0, #104	; 0x68
 8006b0e:	f012 f84d 	bl	8018bac <wolfSSL_Malloc>
 8006b12:	60f8      	str	r0, [r7, #12]
                                         DYNAMIC_TYPE_CERT_MANAGER);
    if (cm) {
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01f      	beq.n	8006b5a <wolfSSL_CertManagerNew_ex+0x56>
        XMEMSET(cm, 0, sizeof(WOLFSSL_CERT_MANAGER));
 8006b1a:	2268      	movs	r2, #104	; 0x68
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f01a fc08 	bl	8021334 <memset>
        cm->refCount = 1;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	665a      	str	r2, [r3, #100]	; 0x64

        if (wc_InitMutex(&cm->caLock) != 0) {
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3354      	adds	r3, #84	; 0x54
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f01a f9e0 	bl	8020ef4 <wc_InitMutex>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d004      	beq.n	8006b44 <wolfSSL_CertManagerNew_ex+0x40>
            WOLFSSL_MSG("Bad mutex init");
            wolfSSL_CertManagerFree(cm);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f81a 	bl	8006b74 <wolfSSL_CertManagerFree>
            return NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e00b      	b.n	8006b5c <wolfSSL_CertManagerNew_ex+0x58>
        }
        #endif

        /* set default minimum key size allowed */
        #ifndef NO_RSA
            cm->minRsaKeySz = MIN_RSAKEY_SZ;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        #endif
        #ifdef HAVE_ECC
            cm->minEccKeySz = MIN_ECCKEY_SZ;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	221c      	movs	r2, #28
 8006b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        #ifdef HAVE_DILITHIUM
            cm->minDilithiumKeySz = MIN_DILITHIUMKEY_SZ;
        #endif /* HAVE_DILITHIUM */
        #endif /* HAVE_PQC */

            cm->heap = heap;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return cm;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <wolfSSL_CertManagerNew>:


WOLFSSL_CERT_MANAGER* wolfSSL_CertManagerNew(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
    return wolfSSL_CertManagerNew_ex(NULL);
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7ff ffcb 	bl	8006b04 <wolfSSL_CertManagerNew_ex>
 8006b6e:	4603      	mov	r3, r0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <wolfSSL_CertManagerFree>:


void wolfSSL_CertManagerFree(WOLFSSL_CERT_MANAGER* cm)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
    int doFree = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
    WOLFSSL_ENTER("wolfSSL_CertManagerFree");

    if (cm) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d021      	beq.n	8006bca <wolfSSL_CertManagerFree+0x56>
        #ifndef SINGLE_THREADED
        if (wc_LockMutex(&cm->refMutex) != 0) {
            WOLFSSL_MSG("Couldn't lock cm mutex");
        }
        #endif
        cm->refCount--;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b8a:	1e5a      	subs	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	665a      	str	r2, [r3, #100]	; 0x64
        if (cm->refCount == 0)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <wolfSSL_CertManagerFree+0x28>
            doFree = 1;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
        #ifndef SINGLE_THREADED
        wc_UnLockMutex(&cm->refMutex);
        #endif
        if (doFree) {
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d013      	beq.n	8006bca <wolfSSL_CertManagerFree+0x56>
                 defined(HAVE_CERTIFICATE_STATUS_REQUEST_V2))
                if (cm->ocsp_stapling)
                    FreeOCSP(cm->ocsp_stapling, 1);
            #endif
            #endif
            FreeSignerTable(cm->caTable, CA_TABLE_SIZE, cm->heap);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	461a      	mov	r2, r3
 8006baa:	210b      	movs	r1, #11
 8006bac:	f00c fb10 	bl	80131d0 <FreeSignerTable>
            wc_FreeMutex(&cm->caLock);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3354      	adds	r3, #84	; 0x54
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f01a f9a8 	bl	8020f0a <wc_FreeMutex>
            #ifndef SINGLE_THREADED
            if (wc_FreeMutex(&cm->refMutex) != 0) {
                WOLFSSL_MSG("Couldn't free refMutex mutex");
            }
            #endif
            XFREE(cm, cm->heap, DYNAMIC_TYPE_CERT_MANAGER);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <wolfSSL_CertManagerFree+0x56>
 8006bc4:	68b8      	ldr	r0, [r7, #8]
 8006bc6:	f012 f80d 	bl	8018be4 <wolfSSL_Free>
        }
    }

}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HashSigner>:

#ifndef NO_CERTS

/* hash is the SHA digest of name, just use first 32 bits as hash */
static WC_INLINE word32 HashSigner(const byte* hash)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
    return MakeWordFromHash(hash) % CA_TABLE_SIZE;
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fe fe5f 	bl	80058a0 <MakeWordFromHash>
 8006be2:	4601      	mov	r1, r0
 8006be4:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <HashSigner+0x30>)
 8006be6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bea:	08da      	lsrs	r2, r3, #3
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	1aca      	subs	r2, r1, r3
 8006bf8:	4613      	mov	r3, r2
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	ba2e8ba3 	.word	0xba2e8ba3

08006c08 <AlreadySigner>:


/* does CA already exist on signer list */
int AlreadySigner(WOLFSSL_CERT_MANAGER* cm, byte* hash)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
    Signer* signers;
    int     ret = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
    word32  row;

    if (cm == NULL || hash == NULL) {
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <AlreadySigner+0x1a>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <AlreadySigner+0x1e>
        return ret;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	e02d      	b.n	8006c82 <AlreadySigner+0x7a>
    }

    row = HashSigner(hash);
 8006c26:	6838      	ldr	r0, [r7, #0]
 8006c28:	f7ff ffd4 	bl	8006bd4 <HashSigner>
 8006c2c:	60f8      	str	r0, [r7, #12]

    if (wc_LockMutex(&cm->caLock) != 0) {
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3354      	adds	r3, #84	; 0x54
 8006c32:	4618      	mov	r0, r3
 8006c34:	f01a f974 	bl	8020f20 <wc_LockMutex>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <AlreadySigner+0x3a>
        return ret;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	e01f      	b.n	8006c82 <AlreadySigner+0x7a>
    }
    signers = cm->caTable[row];
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	617b      	str	r3, [r7, #20]
    while (signers) {
 8006c4c:	e010      	b.n	8006c70 <AlreadySigner+0x68>
        byte* subjectHash;

    #ifndef NO_SKID
        subjectHash = signers->subjectKeyIdHash;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	3344      	adds	r3, #68	; 0x44
 8006c52:	60bb      	str	r3, [r7, #8]
    #else
        subjectHash = signers->subjectNameHash;
    #endif

        if (XMEMCMP(hash, subjectHash, SIGNER_DIGEST_SIZE) == 0) {
 8006c54:	2220      	movs	r2, #32
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	6838      	ldr	r0, [r7, #0]
 8006c5a:	f01a fb33 	bl	80212c4 <memcmp>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <AlreadySigner+0x62>
            ret = 1; /* success */
 8006c64:	2301      	movs	r3, #1
 8006c66:	613b      	str	r3, [r7, #16]
            break;
 8006c68:	e005      	b.n	8006c76 <AlreadySigner+0x6e>
        }
        signers = signers->next;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c6e:	617b      	str	r3, [r7, #20]
    while (signers) {
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1eb      	bne.n	8006c4e <AlreadySigner+0x46>
    }
    wc_UnLockMutex(&cm->caLock);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3354      	adds	r3, #84	; 0x54
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f01a f95b 	bl	8020f36 <wc_UnLockMutex>

    return ret;
 8006c80:	693b      	ldr	r3, [r7, #16]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <GetCA>:
#endif /* WOLFSSL_TRUST_PEER_CERT */


/* return CA if found, otherwise NULL */
Signer* GetCA(void* vp, byte* hash)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b088      	sub	sp, #32
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
    WOLFSSL_CERT_MANAGER* cm = (WOLFSSL_CERT_MANAGER*)vp;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	617b      	str	r3, [r7, #20]
    Signer* ret = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61fb      	str	r3, [r7, #28]
    Signer* signers;
    word32  row = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]

    if (cm == NULL || hash == NULL)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <GetCA+0x22>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <GetCA+0x26>
        return NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e02d      	b.n	8006d0c <GetCA+0x82>

    row = HashSigner(hash);
 8006cb0:	6838      	ldr	r0, [r7, #0]
 8006cb2:	f7ff ff8f 	bl	8006bd4 <HashSigner>
 8006cb6:	6138      	str	r0, [r7, #16]

    if (wc_LockMutex(&cm->caLock) != 0)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	3354      	adds	r3, #84	; 0x54
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f01a f92f 	bl	8020f20 <wc_LockMutex>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <GetCA+0x42>
        return ret;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	e01f      	b.n	8006d0c <GetCA+0x82>

    signers = cm->caTable[row];
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd4:	61bb      	str	r3, [r7, #24]
    while (signers) {
 8006cd6:	e010      	b.n	8006cfa <GetCA+0x70>
        byte* subjectHash;
        #ifndef NO_SKID
            subjectHash = signers->subjectKeyIdHash;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	3344      	adds	r3, #68	; 0x44
 8006cdc:	60fb      	str	r3, [r7, #12]
        #else
            subjectHash = signers->subjectNameHash;
        #endif
        if (XMEMCMP(hash, subjectHash, SIGNER_DIGEST_SIZE) == 0) {
 8006cde:	2220      	movs	r2, #32
 8006ce0:	68f9      	ldr	r1, [r7, #12]
 8006ce2:	6838      	ldr	r0, [r7, #0]
 8006ce4:	f01a faee 	bl	80212c4 <memcmp>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <GetCA+0x6a>
            ret = signers;
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	61fb      	str	r3, [r7, #28]
            break;
 8006cf2:	e005      	b.n	8006d00 <GetCA+0x76>
        }
        signers = signers->next;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf8:	61bb      	str	r3, [r7, #24]
    while (signers) {
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1eb      	bne.n	8006cd8 <GetCA+0x4e>
    }
    wc_UnLockMutex(&cm->caLock);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3354      	adds	r3, #84	; 0x54
 8006d04:	4618      	mov	r0, r3
 8006d06:	f01a f916 	bl	8020f36 <wc_UnLockMutex>

    return ret;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <GetCAByName>:


#ifndef NO_SKID
/* return CA if found, otherwise NULL. Walk through hash table. */
Signer* GetCAByName(void* vp, byte* hash)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
    WOLFSSL_CERT_MANAGER* cm = (WOLFSSL_CERT_MANAGER*)vp;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60bb      	str	r3, [r7, #8]
    Signer* ret = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]
    Signer* signers;
    word32  row;

    if (cm == NULL)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <GetCAByName+0x1c>
        return NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e036      	b.n	8006d9e <GetCAByName+0x8a>

    if (wc_LockMutex(&cm->caLock) != 0)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	3354      	adds	r3, #84	; 0x54
 8006d34:	4618      	mov	r0, r3
 8006d36:	f01a f8f3 	bl	8020f20 <wc_LockMutex>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <GetCAByName+0x30>
        return ret;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	e02c      	b.n	8006d9e <GetCAByName+0x8a>

    for (row = 0; row < CA_TABLE_SIZE && ret == NULL; row++) {
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e01d      	b.n	8006d86 <GetCAByName+0x72>
        signers = cm->caTable[row];
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	613b      	str	r3, [r7, #16]
        while (signers && ret == NULL) {
 8006d54:	e00e      	b.n	8006d74 <GetCAByName+0x60>
            if (XMEMCMP(hash, signers->subjectNameHash,
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	3324      	adds	r3, #36	; 0x24
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6838      	ldr	r0, [r7, #0]
 8006d60:	f01a fab0 	bl	80212c4 <memcmp>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <GetCAByName+0x5a>
                        SIGNER_DIGEST_SIZE) == 0) {
                ret = signers;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	617b      	str	r3, [r7, #20]
            }
            signers = signers->next;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d72:	613b      	str	r3, [r7, #16]
        while (signers && ret == NULL) {
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <GetCAByName+0x6c>
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0ea      	beq.n	8006d56 <GetCAByName+0x42>
    for (row = 0; row < CA_TABLE_SIZE && ret == NULL; row++) {
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b0a      	cmp	r3, #10
 8006d8a:	d802      	bhi.n	8006d92 <GetCAByName+0x7e>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0db      	beq.n	8006d4a <GetCAByName+0x36>
        }
    }
    wc_UnLockMutex(&cm->caLock);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3354      	adds	r3, #84	; 0x54
 8006d96:	4618      	mov	r0, r3
 8006d98:	f01a f8cd 	bl	8020f36 <wc_UnLockMutex>

    return ret;
 8006d9c:	697b      	ldr	r3, [r7, #20]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <AddCA>:

/* owns der, internal now uses too */
/* type flag ids from user or from chain received during verify
   don't allow chain ones to be added w/o isCA extension */
int AddCA(WOLFSSL_CERT_MANAGER* cm, DerBuffer** pDer, int type, int verify)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08c      	sub	sp, #48	; 0x30
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
    int         ret;
    Signer*     signer = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
    word32      row;
    byte*       subjectHash;
#ifdef WOLFSSL_SMALL_STACK
    DecodedCert* cert = NULL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
#else
    DecodedCert  cert[1];
#endif
    DerBuffer*   der = *pDer;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	623b      	str	r3, [r7, #32]

    WOLFSSL_MSG("Adding a CA");

    if (cm == NULL) {
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d105      	bne.n	8006dd6 <AddCA+0x2e>
        FreeDer(pDer);
 8006dca:	68b8      	ldr	r0, [r7, #8]
 8006dcc:	f00c faf0 	bl	80133b0 <FreeDer>
        return BAD_FUNC_ARG;
 8006dd0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8006dd4:	e17e      	b.n	80070d4 <AddCA+0x32c>
    }

#ifdef WOLFSSL_SMALL_STACK
    cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), NULL,
 8006dd6:	f240 406c 	movw	r0, #1132	; 0x46c
 8006dda:	f011 fee7 	bl	8018bac <wolfSSL_Malloc>
 8006dde:	6278      	str	r0, [r7, #36]	; 0x24
                                 DYNAMIC_TYPE_DCERT);
    if (cert == NULL) {
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d105      	bne.n	8006df2 <AddCA+0x4a>
        FreeDer(pDer);
 8006de6:	68b8      	ldr	r0, [r7, #8]
 8006de8:	f00c fae2 	bl	80133b0 <FreeDer>
        return MEMORY_E;
 8006dec:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8006df0:	e170      	b.n	80070d4 <AddCA+0x32c>
    }
#endif

    InitDecodedCert(cert, der->buffer, der->length, cm->heap);
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	6819      	ldr	r1, [r3, #0]
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e00:	f008 f8f9 	bl	800eff6 <InitDecodedCert>
    ret = ParseCert(cert, CA_TYPE, verify, cm);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	2105      	movs	r1, #5
 8006e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e0c:	f00b fe95 	bl	8012b3a <ParseCert>
 8006e10:	62f8      	str	r0, [r7, #44]	; 0x2c
    WOLFSSL_MSG("\tParsed new CA");

#ifndef NO_SKID
    subjectHash = cert->extSubjKeyId;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006e18:	61fb      	str	r3, [r7, #28]
#else
    subjectHash = cert->subjectHash;
#endif

    /* check CA key size */
    if (verify) {
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d032      	beq.n	8006e86 <AddCA+0xde>
        switch (cert->keyOID) {
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f240 228e 	movw	r2, #654	; 0x28e
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00b      	beq.n	8006e44 <AddCA+0x9c>
 8006e2c:	f240 228e 	movw	r2, #654	; 0x28e
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d82a      	bhi.n	8006e8a <AddCA+0xe2>
 8006e34:	f240 2206 	movw	r2, #518	; 0x206
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d014      	beq.n	8006e66 <AddCA+0xbe>
 8006e3c:	f240 2285 	movw	r2, #645	; 0x285
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d122      	bne.n	8006e8a <AddCA+0xe2>
        #ifndef NO_RSA
            #ifdef WC_RSA_PSS
            case RSAPSSk:
            #endif
            case RSAk:
                if (cm->minRsaKeySz < 0 ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	db07      	blt.n	8006e5e <AddCA+0xb6>
                                   cert->pubKeySize < (word16)cm->minRsaKeySz) {
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	f9b2 205a 	ldrsh.w	r2, [r2, #90]	; 0x5a
 8006e58:	b292      	uxth	r2, r2
                if (cm->minRsaKeySz < 0 ||
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d217      	bcs.n	8006e8e <AddCA+0xe6>
                    ret = RSA_KEY_SIZE_E;
 8006e5e:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    WOLFSSL_MSG("\tCA RSA key size error");
                }
                break;
 8006e64:	e013      	b.n	8006e8e <AddCA+0xe6>
        #endif /* !NO_RSA */
            #ifdef HAVE_ECC
            case ECDSAk:
                if (cm->minEccKeySz < 0 ||
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	db07      	blt.n	8006e80 <AddCA+0xd8>
                                   cert->pubKeySize < (word16)cm->minEccKeySz) {
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f9b2 205c 	ldrsh.w	r2, [r2, #92]	; 0x5c
 8006e7a:	b292      	uxth	r2, r2
                if (cm->minEccKeySz < 0 ||
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d208      	bcs.n	8006e92 <AddCA+0xea>
                    ret = ECC_KEY_SIZE_E;
 8006e80:	4b96      	ldr	r3, [pc, #600]	; (80070dc <AddCA+0x334>)
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
                    WOLFSSL_MSG("\tCA ECC key size error");
                }
                break;
 8006e84:	e005      	b.n	8006e92 <AddCA+0xea>

            default:
                WOLFSSL_MSG("\tNo key size check done on CA");
                break; /* no size check if key type is not in switch */
        }
    }
 8006e86:	bf00      	nop
 8006e88:	e004      	b.n	8006e94 <AddCA+0xec>
                break; /* no size check if key type is not in switch */
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <AddCA+0xec>
                break;
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <AddCA+0xec>
                break;
 8006e92:	bf00      	nop

    if (ret == 0 && cert->isCA == 0 && type != WOLFSSL_USER_CA) {
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10e      	bne.n	8006eb8 <AddCA+0x110>
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <AddCA+0x110>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d003      	beq.n	8006eb8 <AddCA+0x110>
        WOLFSSL_MSG("\tCan't add as CA if not actually one");
        ret = NOT_CA_ERROR;
 8006eb0:	f46f 73b2 	mvn.w	r3, #356	; 0x164
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eb6:	e039      	b.n	8006f2c <AddCA+0x184>
    }
#ifndef ALLOW_INVALID_CERTSIGN
    else if (ret == 0 && cert->isCA == 1 && type != WOLFSSL_USER_CA &&
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d11d      	bne.n	8006efa <AddCA+0x152>
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d015      	beq.n	8006efa <AddCA+0x152>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d012      	beq.n	8006efa <AddCA+0x152>
        !cert->selfSigned && (cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) == 0) {
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	b2db      	uxtb	r3, r3
    else if (ret == 0 && cert->isCA == 1 && type != WOLFSSL_USER_CA &&
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <AddCA+0x152>
        !cert->selfSigned && (cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) == 0) {
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	f8b3 33cc 	ldrh.w	r3, [r3, #972]	; 0x3cc
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <AddCA+0x152>
        /* Intermediate CA certs are required to have the keyCertSign
        * extension set. User loaded root certs are not. */
        WOLFSSL_MSG("\tDoesn't have key usage certificate signing");
        ret = NOT_CA_ERROR;
 8006ef2:	f46f 73b2 	mvn.w	r3, #356	; 0x164
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef8:	e018      	b.n	8006f2c <AddCA+0x184>
    }
#endif
    else if (ret == 0 && AlreadySigner(cm, subjectHash)) {
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <AddCA+0x166>
 8006f00:	69f9      	ldr	r1, [r7, #28]
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fe80 	bl	8006c08 <AlreadySigner>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10e      	bne.n	8006f2c <AddCA+0x184>
        WOLFSSL_MSG("\tAlready have this CA, not adding again");
        (void)ret;
    }
    else if (ret == 0) {
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <AddCA+0x184>
        /* take over signer parts */
        signer = MakeSigner(cm->heap);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f00c f90d 	bl	8013138 <MakeSigner>
 8006f1e:	62b8      	str	r0, [r7, #40]	; 0x28
        if (!signer)
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <AddCA+0x184>
            ret = MEMORY_ERROR;
 8006f26:	f46f 7397 	mvn.w	r3, #302	; 0x12e
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (ret == 0 && signer != NULL) {
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 80b0 	bne.w	8007094 <AddCA+0x2ec>
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 80ac 	beq.w	8007094 <AddCA+0x2ec>
        ret = AllocDer(&signer->derCert, der->length, der->type, NULL);
    }
    if (ret == 0 && signer != NULL) {
        XMEMCPY(signer->derCert->buffer, der->buffer, der->length);
    #endif
        signer->keyOID         = cert->keyOID;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	605a      	str	r2, [r3, #4]
        if (cert->pubKeyStored) {
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <AddCA+0x1b4>
            signer->publicKey      = cert->publicKey;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	611a      	str	r2, [r3, #16]
            signer->pubKeySize     = cert->pubKeySize;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	601a      	str	r2, [r3, #0]
        }
        if (cert->subjectCNStored) {
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <AddCA+0x1d8>
            signer->nameLen        = cert->subjectCNLen;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	615a      	str	r2, [r3, #20]
            signer->name           = cert->subjectCN;
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	619a      	str	r2, [r3, #24]
        }
        signer->pathLength     = cert->pathLength;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	72da      	strb	r2, [r3, #11]
        signer->maxPathLen     = cert->maxPathLen;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	f893 23c9 	ldrb.w	r2, [r3, #969]	; 0x3c9
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	729a      	strb	r2, [r3, #10]
        signer->pathLengthSet  = cert->pathLengthSet;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8006f9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006f9e:	b2d9      	uxtb	r1, r3
 8006fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa2:	7b13      	ldrb	r3, [r2, #12]
 8006fa4:	f361 0300 	bfi	r3, r1, #0, #1
 8006fa8:	7313      	strb	r3, [r2, #12]
        signer->selfSigned     = cert->selfSigned;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8006fb0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006fb4:	b2d9      	uxtb	r1, r3
 8006fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb8:	7b13      	ldrb	r3, [r2, #12]
 8006fba:	f361 0341 	bfi	r3, r1, #1, #1
 8006fbe:	7313      	strb	r3, [r2, #12]
    #ifndef IGNORE_NAME_CONSTRAINTS
        signer->permittedNames = cert->permittedNames;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	61da      	str	r2, [r3, #28]
        signer->excludedNames  = cert->excludedNames;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	621a      	str	r2, [r3, #32]
    #endif
    #ifndef NO_SKID
        XMEMCPY(signer->subjectKeyIdHash, cert->extSubjKeyId,
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006fdc:	2220      	movs	r2, #32
 8006fde:	4619      	mov	r1, r3
 8006fe0:	f01a f980 	bl	80212e4 <memcpy>
                SIGNER_DIGEST_SIZE);
    #endif
        XMEMCPY(signer->subjectNameHash, cert->subjectHash,
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	3340      	adds	r3, #64	; 0x40
 8006fee:	2220      	movs	r2, #32
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f01a f977 	bl	80212e4 <memcpy>
                SIGNER_DIGEST_SIZE);
    #ifdef HAVE_OCSP
        XMEMCPY(signer->subjectKeyHash, cert->subjectKeyHash,
                KEYID_SIZE);
    #endif
        signer->keyUsage = cert->extKeyUsageSet ? cert->extKeyUsage
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8006ffc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <AddCA+0x266>
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	f8b3 23cc 	ldrh.w	r2, [r3, #972]	; 0x3cc
 800700c:	e001      	b.n	8007012 <AddCA+0x26a>
 800700e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	811a      	strh	r2, [r3, #8]
                                                : 0xFFFF;
        signer->next    = NULL; /* If Key Usage not set, all uses valid. */
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	2200      	movs	r2, #0
 800701a:	665a      	str	r2, [r3, #100]	; 0x64
        cert->publicKey = 0;    /* in case lock fails don't free here.   */
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
        cert->subjectCN = 0;
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	2200      	movs	r2, #0
 8007026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    #ifndef IGNORE_NAME_CONSTRAINTS
        cert->permittedNames = NULL;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	2200      	movs	r2, #0
 800702e:	639a      	str	r2, [r3, #56]	; 0x38
        cert->excludedNames = NULL;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	2200      	movs	r2, #0
 8007034:	63da      	str	r2, [r3, #60]	; 0x3c
    #endif

    #ifndef NO_SKID
        row = HashSigner(signer->subjectKeyIdHash);
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	3344      	adds	r3, #68	; 0x44
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fdca 	bl	8006bd4 <HashSigner>
 8007040:	61b8      	str	r0, [r7, #24]
    #else
        row = HashSigner(signer->subjectNameHash);
    #endif

        if (wc_LockMutex(&cm->caLock) == 0) {
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3354      	adds	r3, #84	; 0x54
 8007046:	4618      	mov	r0, r3
 8007048:	f019 ff6a 	bl	8020f20 <wc_LockMutex>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d11d      	bne.n	800708e <AddCA+0x2e6>
            signer->next = cm->caTable[row];
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	665a      	str	r2, [r3, #100]	; 0x64
            cm->caTable[row] = signer;   /* takes ownership */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            wc_UnLockMutex(&cm->caLock);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3354      	adds	r3, #84	; 0x54
 800706c:	4618      	mov	r0, r3
 800706e:	f019 ff62 	bl	8020f36 <wc_UnLockMutex>
            if (cm->caCacheCallback)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00c      	beq.n	8007094 <AddCA+0x2ec>
                cm->caCacheCallback(der->buffer, (int)der->length, type);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	6a3a      	ldr	r2, [r7, #32]
 8007080:	6810      	ldr	r0, [r2, #0]
 8007082:	6a3a      	ldr	r2, [r7, #32]
 8007084:	6892      	ldr	r2, [r2, #8]
 8007086:	4611      	mov	r1, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4798      	blx	r3
 800708c:	e002      	b.n	8007094 <AddCA+0x2ec>
        }
        else {
            WOLFSSL_MSG("\tCA Mutex Lock failed");
            ret = BAD_MUTEX_E;
 800708e:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }
#endif /* TSIP or SCE */

    WOLFSSL_MSG("\tFreeing Parsed CA");
    FreeDecodedCert(cert);
 8007094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007096:	f008 f84d 	bl	800f134 <FreeDecodedCert>
    if (ret != 0 && signer != NULL)
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <AddCA+0x30a>
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <AddCA+0x30a>
        FreeSigner(signer, cm->heap);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	4619      	mov	r1, r3
 80070ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ae:	f00c f858 	bl	8013162 <FreeSigner>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(cert, NULL, DYNAMIC_TYPE_DCERT);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <AddCA+0x31a>
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	f011 fd91 	bl	8018be4 <wolfSSL_Free>
#endif
    WOLFSSL_MSG("\tFreeing der CA");
    FreeDer(pDer);
 80070c2:	68b8      	ldr	r0, [r7, #8]
 80070c4:	f00c f974 	bl	80133b0 <FreeDer>
    WOLFSSL_MSG("\t\tOK Freeing der CA");

    WOLFSSL_LEAVE("AddCA", ret);

    return ret == 0 ? WOLFSSL_SUCCESS : ret;
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <AddCA+0x32a>
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	e000      	b.n	80070d4 <AddCA+0x32c>
 80070d2:	2301      	movs	r3, #1
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	fffffe66 	.word	0xfffffe66

080070e0 <wolfssl_get_global_rng>:
    #if defined(OPENSSL_EXTRA) && defined(HAVE_HASHDRBG)
    static WOLFSSL_DRBG_CTX* gDrbgDefCtx = NULL;
    #endif

    WC_RNG* wolfssl_get_global_rng(void)
    {
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
        WC_RNG* ret = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]

        if (initGlobalRNG == 0)
 80070ea:	4b06      	ldr	r3, [pc, #24]	; (8007104 <wolfssl_get_global_rng+0x24>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <wolfssl_get_global_rng+0x16>
            WOLFSSL_MSG("Global RNG no Init");
        else
            ret = &globalRNG;
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <wolfssl_get_global_rng+0x28>)
 80070f4:	607b      	str	r3, [r7, #4]

        return ret;
 80070f6:	687b      	ldr	r3, [r7, #4]
    }
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000368 	.word	0x20000368
 8007108:	20000358 	.word	0x20000358

0800710c <wolfSSL_Init>:
}
#endif

WOLFSSL_ABI
int wolfSSL_Init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
    int ret = WOLFSSL_SUCCESS;
 8007112:	2301      	movs	r3, #1
 8007114:	607b      	str	r3, [r7, #4]
            return ret;
        else
            ret = WOLFSSL_SUCCESS;
    #endif

    if (initRefCount == 0) {
 8007116:	4b33      	ldr	r3, [pc, #204]	; (80071e4 <wolfSSL_Init+0xd8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d13f      	bne.n	800719e <wolfSSL_Init+0x92>
        /* Initialize crypto for use with TLS connection */
        if (wolfCrypt_Init() != 0) {
 800711e:	f019 fe55 	bl	8020dcc <wolfCrypt_Init>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <wolfSSL_Init+0x22>
            WOLFSSL_MSG("Bad wolfCrypt Init");
            ret = WC_INIT_E;
 8007128:	f06f 03e3 	mvn.w	r3, #227	; 0xe3
 800712c:	607b      	str	r3, [r7, #4]
        }

#ifdef HAVE_GLOBAL_RNG
        if (ret == WOLFSSL_SUCCESS) {
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d10c      	bne.n	800714e <wolfSSL_Init+0x42>
            if (wc_InitMutex(&globalRNGMutex) != 0) {
 8007134:	482c      	ldr	r0, [pc, #176]	; (80071e8 <wolfSSL_Init+0xdc>)
 8007136:	f019 fedd 	bl	8020ef4 <wc_InitMutex>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <wolfSSL_Init+0x3c>
                WOLFSSL_MSG("Bad Init Mutex rng");
                ret = BAD_MUTEX_E;
 8007140:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	e002      	b.n	800714e <wolfSSL_Init+0x42>
            }
            else {
                globalRNGMutex_valid = 1;
 8007148:	4b28      	ldr	r3, [pc, #160]	; (80071ec <wolfSSL_Init+0xe0>)
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]
        wc_SetSeed_Cb(wc_GenerateSeed);
    #endif

#ifdef OPENSSL_EXTRA
    #ifndef WOLFSSL_NO_OPENSSL_RAND_CB
        if ((ret == WOLFSSL_SUCCESS) && (wolfSSL_RAND_InitMutex() != 0)) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d107      	bne.n	8007164 <wolfSSL_Init+0x58>
 8007154:	f004 f86a 	bl	800b22c <wolfSSL_RAND_InitMutex>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <wolfSSL_Init+0x58>
            ret = BAD_MUTEX_E;
 800715e:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8007162:	607b      	str	r3, [r7, #4]
        }
    #endif
        if ((ret == WOLFSSL_SUCCESS) &&
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d109      	bne.n	800717e <wolfSSL_Init+0x72>
            (wolfSSL_RAND_seed(NULL, 0) != WOLFSSL_SUCCESS)) {
 800716a:	2100      	movs	r1, #0
 800716c:	2000      	movs	r0, #0
 800716e:	f004 f8a1 	bl	800b2b4 <wolfSSL_RAND_seed>
 8007172:	4603      	mov	r3, r0
        if ((ret == WOLFSSL_SUCCESS) &&
 8007174:	2b01      	cmp	r3, #1
 8007176:	d002      	beq.n	800717e <wolfSSL_Init+0x72>
            WOLFSSL_MSG("wolfSSL_RAND_Seed failed");
            ret = WC_INIT_E;
 8007178:	f06f 03e3 	mvn.w	r3, #227	; 0xe3
 800717c:	607b      	str	r3, [r7, #4]
                clisession_mutex_valid = 1;
            }
        }
    #endif
#endif
        if (ret == WOLFSSL_SUCCESS) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10c      	bne.n	800719e <wolfSSL_Init+0x92>
            if (wc_InitMutex(&count_mutex) != 0) {
 8007184:	481a      	ldr	r0, [pc, #104]	; (80071f0 <wolfSSL_Init+0xe4>)
 8007186:	f019 feb5 	bl	8020ef4 <wc_InitMutex>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <wolfSSL_Init+0x8c>
                WOLFSSL_MSG("Bad Init Mutex count");
                ret = BAD_MUTEX_E;
 8007190:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8007194:	607b      	str	r3, [r7, #4]
 8007196:	e002      	b.n	800719e <wolfSSL_Init+0x92>
            }
            else {
                count_mutex_valid = 1;
 8007198:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <wolfSSL_Init+0xe8>)
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]
            ret = WC_INIT_E;
        }
#endif
    }

    if (ret == WOLFSSL_SUCCESS) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d111      	bne.n	80071c8 <wolfSSL_Init+0xbc>
        if (wc_LockMutex(&count_mutex) != 0) {
 80071a4:	4812      	ldr	r0, [pc, #72]	; (80071f0 <wolfSSL_Init+0xe4>)
 80071a6:	f019 febb 	bl	8020f20 <wc_LockMutex>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <wolfSSL_Init+0xac>
            WOLFSSL_MSG("Bad Lock Mutex count");
            ret = BAD_MUTEX_E;
 80071b0:	f06f 0369 	mvn.w	r3, #105	; 0x69
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	e007      	b.n	80071c8 <wolfSSL_Init+0xbc>
        }
        else {
            initRefCount++;
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <wolfSSL_Init+0xd8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <wolfSSL_Init+0xd8>)
 80071c0:	6013      	str	r3, [r2, #0]
            wc_UnLockMutex(&count_mutex);
 80071c2:	480b      	ldr	r0, [pc, #44]	; (80071f0 <wolfSSL_Init+0xe4>)
 80071c4:	f019 feb7 	bl	8020f36 <wc_UnLockMutex>
        }
    }

    if (ret != WOLFSSL_SUCCESS) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d004      	beq.n	80071d8 <wolfSSL_Init+0xcc>
        initRefCount = 1; /* Force cleanup */
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <wolfSSL_Init+0xd8>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
        (void)wolfSSL_Cleanup(); /* Ignore any error from cleanup */
 80071d4:	f001 fae6 	bl	80087a4 <wolfSSL_Cleanup>
    }

    return ret;
 80071d8:	687b      	ldr	r3, [r7, #4]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000034c 	.word	0x2000034c
 80071e8:	2000036c 	.word	0x2000036c
 80071ec:	20000370 	.word	0x20000370
 80071f0:	20000350 	.word	0x20000350
 80071f4:	20000354 	.word	0x20000354

080071f8 <ProcessUserChain>:

/* process user cert chain to pass during the handshake */
static int ProcessUserChain(WOLFSSL_CTX* ctx, const unsigned char* buff,
                         long sz, int format, int type, WOLFSSL* ssl,
                         long* used, EncryptedInfo* info, int verify)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b098      	sub	sp, #96	; 0x60
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	64fb      	str	r3, [r7, #76]	; 0x4c
    void* heap = wolfSSL_CTX_GetHeap(ctx, ssl);
 800720a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff fc5d 	bl	8006acc <wolfSSL_CTX_GetHeap>
 8007212:	6338      	str	r0, [r7, #48]	; 0x30
#ifdef WOLFSSL_TLS13
    int cnt = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	64bb      	str	r3, [r7, #72]	; 0x48
#endif

    if ((type == CA_TYPE) && (ctx == NULL)) {
 8007218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800721a:	2b05      	cmp	r3, #5
 800721c:	d105      	bne.n	800722a <ProcessUserChain+0x32>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <ProcessUserChain+0x32>
        WOLFSSL_MSG("Need context for CA load");
        return BAD_FUNC_ARG;
 8007224:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8007228:	e155      	b.n	80074d6 <ProcessUserChain+0x2de>
    }

    /* we may have a user cert chain, try to consume */
    if ((type == CERT_TYPE || type == CA_TYPE) && (info->consumed < sz)) {
 800722a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <ProcessUserChain+0x40>
 8007230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007232:	2b05      	cmp	r3, #5
 8007234:	f040 814e 	bne.w	80074d4 <ProcessUserChain+0x2dc>
 8007238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	429a      	cmp	r2, r3
 8007240:	f340 8148 	ble.w	80074d4 <ProcessUserChain+0x2dc>
    #ifdef WOLFSSL_SMALL_STACK
        byte   staticBuffer[1];                 /* force heap usage */
    #else
        byte   staticBuffer[FILE_BUFFER_SIZE];  /* tmp chain buffer */
    #endif
        byte*  chainBuffer = staticBuffer;
 8007244:	f107 031c 	add.w	r3, r7, #28
 8007248:	647b      	str	r3, [r7, #68]	; 0x44
        int    dynamicBuffer = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	643b      	str	r3, [r7, #64]	; 0x40
        word32 bufferSz;
        long   consumed = info->consumed;
 800724e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
        word32 idx = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	63bb      	str	r3, [r7, #56]	; 0x38
        int    gotOne = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate max possible size, including max headers */
        bufferSz = (word32)(sz - consumed) + (CERT_HEADER_SZ * MAX_CHAIN_DEPTH);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	331b      	adds	r3, #27
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (bufferSz > sizeof(staticBuffer)) {
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	2b01      	cmp	r3, #1
 800726a:	f240 80d1 	bls.w	8007410 <ProcessUserChain+0x218>
            WOLFSSL_MSG("Growing Tmp Chain Buffer");
            /* will shrink to actual size */
            chainBuffer = (byte*)XMALLOC(bufferSz, heap, DYNAMIC_TYPE_FILE);
 800726e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007270:	f011 fc9c 	bl	8018bac <wolfSSL_Malloc>
 8007274:	6478      	str	r0, [r7, #68]	; 0x44
            if (chainBuffer == NULL) {
 8007276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <ProcessUserChain+0x8a>
                return MEMORY_E;
 800727c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8007280:	e129      	b.n	80074d6 <ProcessUserChain+0x2de>
            }
            dynamicBuffer = 1;
 8007282:	2301      	movs	r3, #1
 8007284:	643b      	str	r3, [r7, #64]	; 0x40
        }

        WOLFSSL_MSG("Processing Cert Chain");
        while (consumed < sz) {
 8007286:	e0c3      	b.n	8007410 <ProcessUserChain+0x218>
            DerBuffer* part = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]
            word32 remain = (word32)(sz - consumed);
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28
            info->consumed = 0;
 8007294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]

            if (format == WOLFSSL_FILETYPE_PEM) {
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d111      	bne.n	80072c4 <ProcessUserChain+0xcc>
            #ifdef WOLFSSL_PEM_TO_DER
                ret = PemToDer(buff + consumed, remain, type, &part,
 80072a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	18d0      	adds	r0, r2, r3
 80072a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a8:	f107 0218 	add.w	r2, r7, #24
 80072ac:	2300      	movs	r3, #0
 80072ae:	9302      	str	r3, [sp, #8]
 80072b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	4613      	mov	r3, r2
 80072ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072bc:	f00c fb30 	bl	8013920 <PemToDer>
 80072c0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80072c2:	e036      	b.n	8007332 <ProcessUserChain+0x13a>
            #else
                ret = NOT_COMPILED_IN;
            #endif
            }
            else {
                int length = remain;
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	617b      	str	r3, [r7, #20]
                if (format == WOLFSSL_FILETYPE_ASN1) {
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d116      	bne.n	80072fc <ProcessUserChain+0x104>
                    /* get length of der (read sequence) */
                    word32 inOutIdx = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	613b      	str	r3, [r7, #16]
                    if (GetSequence(buff + consumed, &inOutIdx, &length,
 80072d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	18d0      	adds	r0, r2, r3
 80072d8:	f107 0214 	add.w	r2, r7, #20
 80072dc:	f107 0110 	add.w	r1, r7, #16
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	f006 fa9f 	bl	800d824 <GetSequence>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da02      	bge.n	80072f2 <ProcessUserChain+0xfa>
                            remain) < 0) {
                        ret = ASN_NO_PEM_HEADER;
 80072ec:	f06f 03a1 	mvn.w	r3, #161	; 0xa1
 80072f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    }
                    length += inOutIdx; /* include leading sequence */
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	461a      	mov	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4413      	add	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
                }
                info->consumed = length;
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007300:	601a      	str	r2, [r3, #0]
                if (ret == 0) {
 8007302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d114      	bne.n	8007332 <ProcessUserChain+0x13a>
                    ret = AllocDer(&part, length, type, heap);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4619      	mov	r1, r3
 800730c:	f107 0018 	add.w	r0, r7, #24
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007314:	f00b ffd6 	bl	80132c4 <AllocDer>
 8007318:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (ret == 0) {
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <ProcessUserChain+0x13a>
                        XMEMCPY(part->buffer, buff + consumed, length);
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4413      	add	r3, r2
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4619      	mov	r1, r3
 800732e:	f019 ffd9 	bl	80212e4 <memcpy>
                    }
                }
            }
            if (ret == 0) {
 8007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d14f      	bne.n	80073d8 <ProcessUserChain+0x1e0>
                gotOne = 1;
 8007338:	2301      	movs	r3, #1
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef WOLFSSL_TLS13
                cnt++;
 800733c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733e:	3301      	adds	r3, #1
 8007340:	64bb      	str	r3, [r7, #72]	; 0x48
#endif
                if ((idx + part->length + CERT_HEADER_SZ) > bufferSz) {
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	4413      	add	r3, r2
 800734a:	3303      	adds	r3, #3
 800734c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734e:	429a      	cmp	r2, r3
 8007350:	d203      	bcs.n	800735a <ProcessUserChain+0x162>
                    WOLFSSL_MSG("   Cert Chain bigger than buffer. "
                                "Consider increasing MAX_CHAIN_DEPTH");
                    ret = BUFFER_E;
 8007352:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007358:	e028      	b.n	80073ac <ProcessUserChain+0x1b4>
                }
                else {
                    c32to24(part->length, &chainBuffer[idx]);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	6898      	ldr	r0, [r3, #8]
 800735e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	4413      	add	r3, r2
 8007364:	4619      	mov	r1, r3
 8007366:	f7fe fa80 	bl	800586a <c32to24>
                    idx += CERT_HEADER_SZ;
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	3303      	adds	r3, #3
 800736e:	63bb      	str	r3, [r7, #56]	; 0x38
                    XMEMCPY(&chainBuffer[idx], part->buffer, part->length);
 8007370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	18d0      	adds	r0, r2, r3
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	461a      	mov	r2, r3
 8007380:	f019 ffb0 	bl	80212e4 <memcpy>
                    idx += part->length;
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800738a:	4413      	add	r3, r2
 800738c:	63bb      	str	r3, [r7, #56]	; 0x38
                    consumed  += info->consumed;
 800738e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007394:	4413      	add	r3, r2
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (used)
 8007398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <ProcessUserChain+0x1b4>
                        *used += info->consumed;
 800739e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	441a      	add	r2, r3
 80073a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073aa:	601a      	str	r2, [r3, #0]
                }

                /* add CA's to certificate manager */
                if (ret == 0 && type == CA_TYPE) {
 80073ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d112      	bne.n	80073d8 <ProcessUserChain+0x1e0>
 80073b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d10f      	bne.n	80073d8 <ProcessUserChain+0x1e0>
                    /* verify CA unless user set to no verify */
                    ret = AddCA(ctx->cm, &part, WOLFSSL_USER_CA, verify);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80073bc:	f107 0118 	add.w	r1, r7, #24
 80073c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c2:	2201      	movs	r2, #1
 80073c4:	f7ff fcf0 	bl	8006da8 <AddCA>
 80073c8:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (ret == WOLFSSL_SUCCESS) {
 80073ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <ProcessUserChain+0x1dc>
                        ret = 0; /* converted success case */
 80073d0:	2300      	movs	r3, #0
 80073d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                    }
                    gotOne = 0; /* don't exit loop for CA type */
 80073d4:	2300      	movs	r3, #0
 80073d6:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            FreeDer(&part);
 80073d8:	f107 0318 	add.w	r3, r7, #24
 80073dc:	4618      	mov	r0, r3
 80073de:	f00b ffe7 	bl	80133b0 <FreeDer>

            if (ret == ASN_NO_PEM_HEADER && gotOne) {
 80073e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e4:	f113 0fa2 	cmn.w	r3, #162	; 0xa2
 80073e8:	d102      	bne.n	80073f0 <ProcessUserChain+0x1f8>
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d115      	bne.n	800741c <ProcessUserChain+0x224>
                WOLFSSL_MSG("We got one good cert, so stuff at end ok");
                break;
            }

            if (ret < 0) {
 80073f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	da0c      	bge.n	8007410 <ProcessUserChain+0x218>
                WOLFSSL_MSG("   Error in Cert in Chain");
                if (dynamicBuffer)
 80073f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <ProcessUserChain+0x214>
                    XFREE(chainBuffer, heap, DYNAMIC_TYPE_FILE);
 80073fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <ProcessUserChain+0x214>
 8007406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007408:	f011 fbec 	bl	8018be4 <wolfSSL_Free>
                return ret;
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
                return MEMORY_E;
 800740e:	e062      	b.n	80074d6 <ProcessUserChain+0x2de>
        while (consumed < sz) {
 8007410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	f6ff af37 	blt.w	8007288 <ProcessUserChain+0x90>
 800741a:	e000      	b.n	800741e <ProcessUserChain+0x226>
                break;
 800741c:	bf00      	nop
            WOLFSSL_MSG("   Consumed another Cert in Chain");
        }
        WOLFSSL_MSG("Finished Processing Cert Chain");

        /* only retain actual size used */
        ret = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (idx > 0) {
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	2b00      	cmp	r3, #0
 8007426:	d04a      	beq.n	80074be <ProcessUserChain+0x2c6>
            if (ssl) {
 8007428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d028      	beq.n	8007480 <ProcessUserChain+0x288>
                if (ssl->buffers.weOwnCertChain) {
 800742e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007430:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8007434:	2b00      	cmp	r3, #0
 8007436:	d005      	beq.n	8007444 <ProcessUserChain+0x24c>
                    FreeDer(&ssl->buffers.certChain);
 8007438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800743a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800743e:	4618      	mov	r0, r3
 8007440:	f00b ffb6 	bl	80133b0 <FreeDer>
                }
                ret = AllocDer(&ssl->buffers.certChain, idx, type, heap);
 8007444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007446:	f503 7015 	add.w	r0, r3, #596	; 0x254
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800744e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007450:	f00b ff38 	bl	80132c4 <AllocDer>
 8007454:	64f8      	str	r0, [r7, #76]	; 0x4c
                if (ret == 0) {
 8007456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10c      	bne.n	8007476 <ProcessUserChain+0x27e>
                    XMEMCPY(ssl->buffers.certChain->buffer, chainBuffer,
 800745c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800745e:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007468:	4618      	mov	r0, r3
 800746a:	f019 ff3b 	bl	80212e4 <memcpy>
                            idx);
                    ssl->buffers.weOwnCertChain = 1;
 800746e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007470:	2201      	movs	r2, #1
 8007472:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
                }
            #ifdef WOLFSSL_TLS13
                ssl->buffers.certChainCnt = cnt;
 8007476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800747a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800747e:	e01e      	b.n	80074be <ProcessUserChain+0x2c6>
            #endif
            } else if (ctx) {
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d01b      	beq.n	80074be <ProcessUserChain+0x2c6>
                FreeDer(&ctx->certChain);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3318      	adds	r3, #24
 800748a:	4618      	mov	r0, r3
 800748c:	f00b ff90 	bl	80133b0 <FreeDer>
                ret = AllocDer(&ctx->certChain, idx, type, heap);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f103 0018 	add.w	r0, r3, #24
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800749a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800749c:	f00b ff12 	bl	80132c4 <AllocDer>
 80074a0:	64f8      	str	r0, [r7, #76]	; 0x4c
                if (ret == 0) {
 80074a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d107      	bne.n	80074b8 <ProcessUserChain+0x2c0>
                    XMEMCPY(ctx->certChain->buffer, chainBuffer, idx);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074b2:	4618      	mov	r0, r3
 80074b4:	f019 ff16 	bl	80212e4 <memcpy>
                }
            #ifdef WOLFSSL_TLS13
                ctx->certChainCnt = cnt;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
            #endif
            }
        }

        if (dynamicBuffer)
 80074be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <ProcessUserChain+0x2dc>
            XFREE(chainBuffer, heap, DYNAMIC_TYPE_FILE);
 80074c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c6:	623b      	str	r3, [r7, #32]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <ProcessUserChain+0x2dc>
 80074ce:	6a38      	ldr	r0, [r7, #32]
 80074d0:	f011 fb88 	bl	8018be4 <wolfSSL_Free>
    }

    return ret;
 80074d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3750      	adds	r7, #80	; 0x50
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <ProcessBufferTryDecode>:

static int ProcessBufferTryDecode(WOLFSSL_CTX* ctx, WOLFSSL* ssl, DerBuffer* der,
    int* keySz, word32* idx, int* resetSuites, int* keyFormat, void* heap, int devId)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08c      	sub	sp, #48	; 0x30
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    (void)heap;
    (void)devId;

    if (ctx == NULL && ssl == NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <ProcessBufferTryDecode+0x24>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <ProcessBufferTryDecode+0x24>
        return BAD_FUNC_ARG;
 80074fe:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8007502:	e137      	b.n	8007774 <ProcessBufferTryDecode+0x294>
    if (!der || !keySz || !idx || !resetSuites || !keyFormat)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <ProcessBufferTryDecode+0x42>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d008      	beq.n	8007522 <ProcessBufferTryDecode+0x42>
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <ProcessBufferTryDecode+0x42>
 8007516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <ProcessBufferTryDecode+0x42>
 800751c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <ProcessBufferTryDecode+0x48>
        return BAD_FUNC_ARG;
 8007522:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8007526:	e125      	b.n	8007774 <ProcessBufferTryDecode+0x294>

#ifndef NO_RSA
    if ((*keyFormat == 0 || *keyFormat == RSAk)) {
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <ProcessBufferTryDecode+0x5e>
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f240 2285 	movw	r2, #645	; 0x285
 8007538:	4293      	cmp	r3, r2
 800753a:	f040 8085 	bne.w	8007648 <ProcessBufferTryDecode+0x168>
    #else
        RsaKey  key[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        key = (RsaKey*)XMALLOC(sizeof(RsaKey), heap, DYNAMIC_TYPE_RSA);
 800753e:	f241 107c 	movw	r0, #4476	; 0x117c
 8007542:	f011 fb33 	bl	8018bac <wolfSSL_Malloc>
 8007546:	62b8      	str	r0, [r7, #40]	; 0x28
        if (key == NULL)
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d102      	bne.n	8007554 <ProcessBufferTryDecode+0x74>
            return MEMORY_E;
 800754e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8007552:	e10f      	b.n	8007774 <ProcessBufferTryDecode+0x294>
    #endif

        ret = wc_InitRsaKey_ex(key, heap, devId);
 8007554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755a:	f012 fcd0 	bl	8019efe <wc_InitRsaKey_ex>
 800755e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret == 0) {
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d163      	bne.n	800762e <ProcessBufferTryDecode+0x14e>
            *idx = 0;
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
            ret = wc_RsaPrivateKeyDecode(der->buffer, idx, key, der->length);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007578:	f007 fa26 	bl	800e9c8 <wc_RsaPrivateKeyDecode>
 800757c:	62f8      	str	r0, [r7, #44]	; 0x2c
                /* if using crypto or PK callbacks, try public key decode */
                *idx = 0;
                ret = wc_RsaPublicKeyDecode(der->buffer, idx, key, der->length);
            }
        #endif
            if (ret != 0) {
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <ProcessBufferTryDecode+0xaa>
                !defined(HAVE_ED448) && !defined(HAVE_PQC)
                WOLFSSL_MSG("RSA decode failed and other algorithms "
                            "not enabled to try");
                ret = WOLFSSL_BAD_FILE;
            #else
                ret = 0; /* continue trying other algorithms */
 8007584:	2300      	movs	r3, #0
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007588:	e04e      	b.n	8007628 <ProcessBufferTryDecode+0x148>
            #endif
            }
            else {
                /* check that the size of the RSA key is enough */
                int minRsaSz = ssl ? ssl->options.minRsaKeySz :
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <ProcessBufferTryDecode+0xb8>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f9b3 33b2 	ldrsh.w	r3, [r3, #946]	; 0x3b2
 8007596:	e002      	b.n	800759e <ProcessBufferTryDecode+0xbe>
                    ctx->minRsaKeySz;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
                int minRsaSz = ssl ? ssl->options.minRsaKeySz :
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
                *keySz = wc_RsaEncryptSize((RsaKey*)key);
 80075a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a2:	f013 feb3 	bl	801b30c <wc_RsaEncryptSize>
 80075a6:	4602      	mov	r2, r0
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]
                if (*keySz < minRsaSz) {
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b2:	429a      	cmp	r2, r3
 80075b4:	dd02      	ble.n	80075bc <ProcessBufferTryDecode+0xdc>
                    ret = RSA_KEY_SIZE_E;
 80075b6:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    WOLFSSL_MSG("Private Key size too small");
                }

                if (ssl) {
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00d      	beq.n	80075de <ProcessBufferTryDecode+0xfe>
                    ssl->buffers.keyType = rsa_sa_algo;
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	f892 3248 	ldrb.w	r3, [r2, #584]	; 0x248
 80075c8:	2101      	movs	r1, #1
 80075ca:	f361 0305 	bfi	r3, r1, #0, #6
 80075ce:	f882 3248 	strb.w	r3, [r2, #584]	; 0x248
                    ssl->buffers.keySz = *keySz;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80075dc:	e00b      	b.n	80075f6 <ProcessBufferTryDecode+0x116>
                }
                else {
                    ctx->privateKeyType = rsa_sa_algo;
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80075e4:	2101      	movs	r1, #1
 80075e6:	f361 0305 	bfi	r3, r1, #0, #6
 80075ea:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                    ctx->privateKeySz = *keySz;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	63da      	str	r2, [r3, #60]	; 0x3c
                }

                *keyFormat = RSAk;
 80075f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f8:	f240 2285 	movw	r2, #645	; 0x285
 80075fc:	601a      	str	r2, [r3, #0]

                if (ssl && ssl->options.side == WOLFSSL_SERVER_END) {
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d011      	beq.n	8007628 <ProcessBufferTryDecode+0x148>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800760a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <ProcessBufferTryDecode+0x148>
                    ssl->options.haveStaticECC = 0;
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 800761a:	f36f 1345 	bfc	r3, #5, #1
 800761e:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
                    *resetSuites = 1;
 8007622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007624:	2201      	movs	r2, #1
 8007626:	601a      	str	r2, [r3, #0]
                }
            }

            wc_FreeRsaKey(key);
 8007628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762a:	f012 fcfc 	bl	801a026 <wc_FreeRsaKey>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(key, heap, DYNAMIC_TYPE_RSA);
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <ProcessBufferTryDecode+0x15e>
 8007638:	6a38      	ldr	r0, [r7, #32]
 800763a:	f011 fad3 	bl	8018be4 <wolfSSL_Free>
    #endif
        if (ret != 0)
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <ProcessBufferTryDecode+0x168>
            return ret;
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	e095      	b.n	8007774 <ProcessBufferTryDecode+0x294>
    }
#endif
#ifdef HAVE_ECC
    if ((*keyFormat == 0 || *keyFormat == ECDSAk)) {
 8007648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d006      	beq.n	800765e <ProcessBufferTryDecode+0x17e>
 8007650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f240 2206 	movw	r2, #518	; 0x206
 8007658:	4293      	cmp	r3, r2
 800765a:	f040 808a 	bne.w	8007772 <ProcessBufferTryDecode+0x292>
    #else
        ecc_key  key[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        key = (ecc_key*)XMALLOC(sizeof(ecc_key), heap, DYNAMIC_TYPE_ECC);
 800765e:	f44f 7051 	mov.w	r0, #836	; 0x344
 8007662:	f011 faa3 	bl	8018bac <wolfSSL_Malloc>
 8007666:	61f8      	str	r0, [r7, #28]
        if (key == NULL)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <ProcessBufferTryDecode+0x194>
            return MEMORY_E;
 800766e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8007672:	e07f      	b.n	8007774 <ProcessBufferTryDecode+0x294>
    #endif

        if (wc_ecc_init_ex(key, heap, devId) == 0) {
 8007674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007678:	69f8      	ldr	r0, [r7, #28]
 800767a:	f00f fd68 	bl	801714e <wc_ecc_init_ex>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d169      	bne.n	8007758 <ProcessBufferTryDecode+0x278>
            *idx = 0;
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
            ret = wc_EccPrivateKeyDecode(der->buffer, idx, key, der->length);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007696:	f00c fd24 	bl	80140e2 <wc_EccPrivateKeyDecode>
 800769a:	62f8      	str	r0, [r7, #44]	; 0x2c
                /* if using crypto or PK callbacks, try public key decode */
                *idx = 0;
                ret = wc_EccPublicKeyDecode(der->buffer, idx, key, der->length);
            }
        #endif
            if (ret == 0) {
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d155      	bne.n	800774e <ProcessBufferTryDecode+0x26e>
                /* check for minimum ECC key size and then free */
                int minKeySz = ssl ? ssl->options.minEccKeySz :
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <ProcessBufferTryDecode+0x1d0>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f9b3 33b4 	ldrsh.w	r3, [r3, #948]	; 0x3b4
 80076ae:	e002      	b.n	80076b6 <ProcessBufferTryDecode+0x1d6>
                                                        ctx->minEccKeySz;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
                int minKeySz = ssl ? ssl->options.minEccKeySz :
 80076b6:	61bb      	str	r3, [r7, #24]
                *keySz = wc_ecc_size(key);
 80076b8:	69f8      	ldr	r0, [r7, #28]
 80076ba:	f010 fec0 	bl	801843e <wc_ecc_size>
 80076be:	4602      	mov	r2, r0
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	601a      	str	r2, [r3, #0]
                if (*keySz < minKeySz) {
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	dd01      	ble.n	80076d2 <ProcessBufferTryDecode+0x1f2>
                    WOLFSSL_MSG("ECC private key too small");
                    ret = ECC_KEY_SIZE_E;
 80076ce:	4b2b      	ldr	r3, [pc, #172]	; (800777c <ProcessBufferTryDecode+0x29c>)
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

                *keyFormat = ECDSAk;
 80076d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d4:	f240 2206 	movw	r2, #518	; 0x206
 80076d8:	601a      	str	r2, [r3, #0]
                if (ssl) {
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d014      	beq.n	800770a <ProcessBufferTryDecode+0x22a>
                    ssl->options.haveStaticECC = 1;
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 80076e6:	f043 0320 	orr.w	r3, r3, #32
 80076ea:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
                    ssl->buffers.keyType = ecc_dsa_sa_algo;
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	f892 3248 	ldrb.w	r3, [r2, #584]	; 0x248
 80076f4:	2103      	movs	r1, #3
 80076f6:	f361 0305 	bfi	r3, r1, #0, #6
 80076fa:	f882 3248 	strb.w	r3, [r2, #584]	; 0x248
                    ssl->buffers.keySz = *keySz;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8007708:	e012      	b.n	8007730 <ProcessBufferTryDecode+0x250>
                }
                else {
                    ctx->haveStaticECC = 1;
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8007710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007714:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
                    ctx->privateKeyType = ecc_dsa_sa_algo;
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800771e:	2103      	movs	r1, #3
 8007720:	f361 0305 	bfi	r3, r1, #0, #6
 8007724:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                    ctx->privateKeySz = *keySz;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	63da      	str	r2, [r3, #60]	; 0x3c
                }

                if (ssl && ssl->options.side == WOLFSSL_SERVER_END) {
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <ProcessBufferTryDecode+0x272>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800773c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <ProcessBufferTryDecode+0x272>
                    *resetSuites = 1;
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	e001      	b.n	8007752 <ProcessBufferTryDecode+0x272>
                }
            }
            else {
                ret = 0; /* continue trying other algorithms */
 800774e:	2300      	movs	r3, #0
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            wc_ecc_free(key);
 8007752:	69f8      	ldr	r0, [r7, #28]
 8007754:	f00f fd54 	bl	8017200 <wc_ecc_free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(key, heap, DYNAMIC_TYPE_ECC);
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <ProcessBufferTryDecode+0x288>
 8007762:	6978      	ldr	r0, [r7, #20]
 8007764:	f011 fa3e 	bl	8018be4 <wolfSSL_Free>
    #endif
        if (ret != 0)
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <ProcessBufferTryDecode+0x292>
            return ret;
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	e000      	b.n	8007774 <ProcessBufferTryDecode+0x294>
            return ret;
        }
    }
#endif /* HAVE_DILITHIUM */
#endif /* HAVE_PQC */
    return ret;
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007774:	4618      	mov	r0, r3
 8007776:	3730      	adds	r7, #48	; 0x30
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	fffffe66 	.word	0xfffffe66

08007780 <ProcessBuffer>:
   used tracks bytes consumed, userChain specifies a user cert chain
   to pass during the handshake */
int ProcessBuffer(WOLFSSL_CTX* ctx, const unsigned char* buff,
                         long sz, int format, int type, WOLFSSL* ssl,
                         long* used, int userChain, int verify)
{
 8007780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007782:	b0ab      	sub	sp, #172	; 0xac
 8007784:	af0c      	add	r7, sp, #48	; 0x30
 8007786:	6278      	str	r0, [r7, #36]	; 0x24
 8007788:	6239      	str	r1, [r7, #32]
 800778a:	61fa      	str	r2, [r7, #28]
 800778c:	61bb      	str	r3, [r7, #24]
    DerBuffer*    der = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
    int           ret = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	677b      	str	r3, [r7, #116]	; 0x74
    int           done = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	673b      	str	r3, [r7, #112]	; 0x70
    int           keyFormat = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	643b      	str	r3, [r7, #64]	; 0x40
    int           resetSuites = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    void*         heap = wolfSSL_CTX_GetHeap(ctx, ssl);
 80077a2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80077a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077a8:	f7ff f990 	bl	8006acc <wolfSSL_CTX_GetHeap>
 80077ac:	66f8      	str	r0, [r7, #108]	; 0x6c
    int           devId = wolfSSL_CTX_GetDevId(ctx, ssl);
 80077ae:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80077b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077b4:	f7ff f967 	bl	8006a86 <wolfSSL_CTX_GetDevId>
 80077b8:	66b8      	str	r0, [r7, #104]	; 0x68
    word32        idx = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63bb      	str	r3, [r7, #56]	; 0x38
    int           keySz = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined(WOLFSSL_ENCRYPTED_KEYS) && !defined(NO_PWDBASED)) || \
     defined(HAVE_PKCS8)
    word32        algId = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif
#ifdef WOLFSSL_SMALL_STACK
    EncryptedInfo* info = NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	667b      	str	r3, [r7, #100]	; 0x64

    (void)devId;
    (void)idx;
    (void)keySz;

    if (used)
 80077ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <ProcessBuffer+0x5a>
        *used = sz;     /* used bytes default to sz, PEM chain may shorten*/
 80077d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	601a      	str	r2, [r3, #0]

    /* check args */
    if (format != WOLFSSL_FILETYPE_ASN1 && format != WOLFSSL_FILETYPE_PEM)
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d006      	beq.n	80077ee <ProcessBuffer+0x6e>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d003      	beq.n	80077ee <ProcessBuffer+0x6e>
        return WOLFSSL_BAD_FILETYPE;
 80077e6:	f06f 0304 	mvn.w	r3, #4
 80077ea:	f000 bd14 	b.w	8008216 <ProcessBuffer+0xa96>

    if (ctx == NULL && ssl == NULL)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <ProcessBuffer+0x84>
 80077f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <ProcessBuffer+0x84>
        return BAD_FUNC_ARG;
 80077fc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8007800:	f000 bd09 	b.w	8008216 <ProcessBuffer+0xa96>

#ifdef WOLFSSL_SMALL_STACK
    info = (EncryptedInfo*)XMALLOC(sizeof(EncryptedInfo), heap,
 8007804:	20dc      	movs	r0, #220	; 0xdc
 8007806:	f011 f9d1 	bl	8018bac <wolfSSL_Malloc>
 800780a:	6678      	str	r0, [r7, #100]	; 0x64
                                   DYNAMIC_TYPE_ENCRYPTEDINFO);
    if (info == NULL)
 800780c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <ProcessBuffer+0x9a>
        return MEMORY_E;
 8007812:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8007816:	f000 bcfe 	b.w	8008216 <ProcessBuffer+0xa96>
#endif

    XMEMSET(info, 0, sizeof(EncryptedInfo));
 800781a:	22dc      	movs	r2, #220	; 0xdc
 800781c:	2100      	movs	r1, #0
 800781e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007820:	f019 fd88 	bl	8021334 <memset>
        info->passwd_cb       = ctx->passwd_cb;
        info->passwd_userdata = ctx->passwd_userdata;
    }
#endif

    if (format == WOLFSSL_FILETYPE_PEM) {
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d111      	bne.n	800784e <ProcessBuffer+0xce>
    #ifdef WOLFSSL_PEM_TO_DER
        ret = PemToDer(buff, sz, type, &der, heap, info, &keyFormat);
 800782a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800782e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007832:	9302      	str	r3, [sp, #8]
 8007834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007842:	69f9      	ldr	r1, [r7, #28]
 8007844:	6a38      	ldr	r0, [r7, #32]
 8007846:	f00c f86b 	bl	8013920 <PemToDer>
 800784a:	6778      	str	r0, [r7, #116]	; 0x74
 800784c:	e061      	b.n	8007912 <ProcessBuffer+0x192>
        ret = NOT_COMPILED_IN;
    #endif
    }
    else {
        /* ASN1 (DER) */
        int length = (int)sz;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (format == WOLFSSL_FILETYPE_ASN1) {
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d12a      	bne.n	80078ae <ProcessBuffer+0x12e>
            /* get length of der (read sequence or octet string) */
            word32 inOutIdx = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
            if (GetSequence(buff, &inOutIdx, &length, (word32)sz) >= 0) {
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007862:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007866:	6a38      	ldr	r0, [r7, #32]
 8007868:	f005 ffdc 	bl	800d824 <GetSequence>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	db05      	blt.n	800787e <ProcessBuffer+0xfe>
                length += inOutIdx; /* include leading sequence */
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	461a      	mov	r2, r3
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	4413      	add	r3, r2
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787c:	e017      	b.n	80078ae <ProcessBuffer+0x12e>
            }
            /* get length using octect string (allowed for private key types) */
            else if (type == PRIVATEKEY_TYPE &&
 800787e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007882:	2b01      	cmp	r3, #1
 8007884:	d110      	bne.n	80078a8 <ProcessBuffer+0x128>
                    GetOctetString(buff, &inOutIdx, &length, (word32)sz) >= 0) {
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800788c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007890:	6a38      	ldr	r0, [r7, #32]
 8007892:	f006 f892 	bl	800d9ba <GetOctetString>
 8007896:	4603      	mov	r3, r0
            else if (type == PRIVATEKEY_TYPE &&
 8007898:	2b00      	cmp	r3, #0
 800789a:	db05      	blt.n	80078a8 <ProcessBuffer+0x128>
                length += inOutIdx; /* include leading oct string */
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	461a      	mov	r2, r3
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	4413      	add	r3, r2
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a6:	e002      	b.n	80078ae <ProcessBuffer+0x12e>
            }
            else {
                ret = ASN_PARSE_E;
 80078a8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80078ac:	677b      	str	r3, [r7, #116]	; 0x74
            }
        }

        info->consumed = length;
 80078ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b2:	601a      	str	r2, [r3, #0]

        if (ret == 0) {
 80078b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d12b      	bne.n	8007912 <ProcessBuffer+0x192>
            ret = AllocDer(&der, (word32)length, type, heap);
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	4619      	mov	r1, r3
 80078be:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80078c8:	f00b fcfc 	bl	80132c4 <AllocDer>
 80078cc:	6778      	str	r0, [r7, #116]	; 0x74
            if (ret == 0) {
 80078ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <ProcessBuffer+0x162>
                XMEMCPY(der->buffer, buff, length);
 80078d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078da:	6a39      	ldr	r1, [r7, #32]
 80078dc:	4618      	mov	r0, r3
 80078de:	f019 fd01 	bl	80212e4 <memcpy>
            }

        #ifdef HAVE_PKCS8
            /* if private key try and remove PKCS8 header */
            if (type == PRIVATEKEY_TYPE) {
 80078e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d113      	bne.n	8007912 <ProcessBuffer+0x192>
                if ((ret = ToTraditional_ex(der->buffer, der->length,
 80078ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078f6:	4619      	mov	r1, r3
 80078f8:	f007 f9be 	bl	800ec78 <ToTraditional_ex>
 80078fc:	6778      	str	r0, [r7, #116]	; 0x74
 80078fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007900:	2b00      	cmp	r3, #0
 8007902:	dd04      	ble.n	800790e <ProcessBuffer+0x18e>
                                                                 &algId)) > 0) {
                    /* Found PKCS8 header */
                    /* ToTraditional_ex moves buff and returns adjusted length */
                    der->length = ret;
 8007904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007906:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007908:	609a      	str	r2, [r3, #8]
                    keyFormat = algId;
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	643b      	str	r3, [r7, #64]	; 0x40
                }
                ret = 0; /* failures should be ignored */
 800790e:	2300      	movs	r3, #0
 8007910:	677b      	str	r3, [r7, #116]	; 0x74
            }
        #endif
        }
    }

    if (used) {
 8007912:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <ProcessBuffer+0x1a4>
        *used = info->consumed;
 800791a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007922:	601a      	str	r2, [r3, #0]
    }

    /* process user chain */
    if (ret >= 0) {
 8007924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007926:	2b00      	cmp	r3, #0
 8007928:	db33      	blt.n	8007992 <ProcessBuffer+0x212>
        /* Chain should have server cert first, then intermediates, then root.
         * First certificate in chain is processed below after ProcessUserChain
         *   and is loaded into ssl->buffers.certificate.
         * Remainder are processed using ProcessUserChain and are loaded into
         *   ssl->buffers.certChain. */
        if (userChain) {
 800792a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d02f      	beq.n	8007992 <ProcessBuffer+0x212>
            ret = ProcessUserChain(ctx, buff, sz, format, type, ssl, used, info,
 8007932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007936:	9304      	str	r3, [sp, #16]
 8007938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800793a:	9303      	str	r3, [sp, #12]
 800793c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007940:	9302      	str	r3, [sp, #8]
 8007942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	6a39      	ldr	r1, [r7, #32]
 8007954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007956:	f7ff fc4f 	bl	80071f8 <ProcessUserChain>
 800795a:	6778      	str	r0, [r7, #116]	; 0x74
                                   verify);
            if (ret == ASN_NO_PEM_HEADER) { /* Additional chain is optional */
 800795c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795e:	f113 0fa2 	cmn.w	r3, #162	; 0xa2
 8007962:	d116      	bne.n	8007992 <ProcessBuffer+0x212>
                unsigned long pemErr;
                CLEAR_ASN_NO_PEM_HEADER_ERROR(pemErr);
 8007964:	f001 ff7a 	bl	800985c <wolfSSL_ERR_peek_last_error>
 8007968:	6638      	str	r0, [r7, #96]	; 0x60
 800796a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800796c:	f001 fcae 	bl	80092cc <wolfSSL_ERR_GET_LIB>
 8007970:	4603      	mov	r3, r0
 8007972:	2b09      	cmp	r3, #9
 8007974:	d10b      	bne.n	800798e <ProcessBuffer+0x20e>
 8007976:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007978:	f001 fce4 	bl	8009344 <wolfSSL_ERR_GET_REASON>
 800797c:	4603      	mov	r3, r0
 800797e:	f240 122d 	movw	r2, #301	; 0x12d
 8007982:	4293      	cmp	r3, r2
 8007984:	d103      	bne.n	800798e <ProcessBuffer+0x20e>
 8007986:	f04f 30ff 	mov.w	r0, #4294967295
 800798a:	f011 f85f 	bl	8018a4c <wc_RemoveErrorNode>
                ret = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	677b      	str	r3, [r7, #116]	; 0x74
            }
        }
    }

    /* info is only used for private key with DER or PEM, so free now */
    if (ret < 0 || type != PRIVATEKEY_TYPE) {
 8007992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007994:	2b00      	cmp	r3, #0
 8007996:	db03      	blt.n	80079a0 <ProcessBuffer+0x220>
 8007998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800799c:	2b01      	cmp	r3, #1
 800799e:	d007      	beq.n	80079b0 <ProcessBuffer+0x230>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(info, heap, DYNAMIC_TYPE_ENCRYPTEDINFO);
 80079a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <ProcessBuffer+0x230>
 80079aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80079ac:	f011 f91a 	bl	8018be4 <wolfSSL_Free>
    #endif
    }

    /* check for error */
    if (ret < 0) {
 80079b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da06      	bge.n	80079c4 <ProcessBuffer+0x244>
        FreeDer(&der);
 80079b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079ba:	4618      	mov	r0, r3
 80079bc:	f00b fcf8 	bl	80133b0 <FreeDer>
        done = 1;
 80079c0:	2301      	movs	r3, #1
 80079c2:	673b      	str	r3, [r7, #112]	; 0x70
    }

    if (done == 1) {
 80079c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	f000 80c6 	beq.w	8007b58 <ProcessBuffer+0x3d8>
        /* No operation, just skip the next section */
    }
    /* Handle DER owner */
    else if (type == CA_TYPE) {
 80079cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079d0:	2b05      	cmp	r3, #5
 80079d2:	d118      	bne.n	8007a06 <ProcessBuffer+0x286>
        if (ctx == NULL) {
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d108      	bne.n	80079ec <ProcessBuffer+0x26c>
            WOLFSSL_MSG("Need context for CA load");
            FreeDer(&der);
 80079da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079de:	4618      	mov	r0, r3
 80079e0:	f00b fce6 	bl	80133b0 <FreeDer>
            return BAD_FUNC_ARG;
 80079e4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80079e8:	f000 bc15 	b.w	8008216 <ProcessBuffer+0xa96>
        }
        /* verify CA unless user set to no verify */
        ret = AddCA(ctx->cm, &der, WOLFSSL_USER_CA, verify);
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80079f0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80079f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079f8:	2201      	movs	r2, #1
 80079fa:	f7ff f9d5 	bl	8006da8 <AddCA>
 80079fe:	6778      	str	r0, [r7, #116]	; 0x74
        done = 1;
 8007a00:	2301      	movs	r3, #1
 8007a02:	673b      	str	r3, [r7, #112]	; 0x70
 8007a04:	e0a8      	b.n	8007b58 <ProcessBuffer+0x3d8>
            WOLFSSL_MSG("Error adding trusted peer");
        }
        done = 1;
    }
#endif /* WOLFSSL_TRUST_PEER_CERT */
    else if (type == CERT_TYPE) {
 8007a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d14f      	bne.n	8007aae <ProcessBuffer+0x32e>
        if (ssl != NULL) {
 8007a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d02f      	beq.n	8007a76 <ProcessBuffer+0x2f6>
             /* Make sure previous is free'd */
            if (ssl->buffers.weOwnCert) {
 8007a16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a1a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d017      	beq.n	8007a52 <ProcessBuffer+0x2d2>
                FreeDer(&ssl->buffers.certificate);
 8007a22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a26:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f00b fcc0 	bl	80133b0 <FreeDer>
            #ifdef KEEP_OUR_CERT
                wolfSSL_X509_free(ssl->ourCert);
 8007a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 fca2 	bl	800a386 <wolfSSL_X509_free>
                ssl->ourCert = NULL;
 8007a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            #endif
            }
            ssl->buffers.certificate = der;
 8007a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a58:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        #ifdef KEEP_OUR_CERT
            ssl->keepCert = 1; /* hold cert for ssl lifetime */
 8007a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
        #endif
            ssl->buffers.weOwnCert = 1;
 8007a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8007a74:	e070      	b.n	8007b58 <ProcessBuffer+0x3d8>
        }
        else if (ctx != NULL) {
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d06d      	beq.n	8007b58 <ProcessBuffer+0x3d8>
            FreeDer(&ctx->certificate); /* Make sure previous is free'd */
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	3314      	adds	r3, #20
 8007a80:	4618      	mov	r0, r3
 8007a82:	f00b fc95 	bl	80133b0 <FreeDer>
        #ifdef KEEP_OUR_CERT
            if (ctx->ourCert) {
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <ProcessBuffer+0x326>
                if (ctx->ownOurCert)
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <ProcessBuffer+0x320>
                    wolfSSL_X509_free(ctx->ourCert);
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f002 fc73 	bl	800a386 <wolfSSL_X509_free>
                ctx->ourCert = NULL;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	64da      	str	r2, [r3, #76]	; 0x4c
            }
        #endif
            ctx->certificate = der;
 8007aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	615a      	str	r2, [r3, #20]
 8007aac:	e054      	b.n	8007b58 <ProcessBuffer+0x3d8>
        }
    }
    else if (type == PRIVATEKEY_TYPE) {
 8007aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d148      	bne.n	8007b48 <ProcessBuffer+0x3c8>
        if (ssl != NULL) {
 8007ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d025      	beq.n	8007b0a <ProcessBuffer+0x38a>
             /* Make sure previous is free'd */
            if (ssl->buffers.weOwnKey) {
 8007abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ac2:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d014      	beq.n	8007af4 <ProcessBuffer+0x374>
                ForceZero(ssl->buffers.key->buffer, ssl->buffers.key->length);
 8007aca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ace:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ad8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f7fd fea9 	bl	8005838 <ForceZero>
                FreeDer(&ssl->buffers.key);
 8007ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007aea:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8007aee:	4618      	mov	r0, r3
 8007af0:	f00b fc5e 	bl	80133b0 <FreeDer>
            }
            ssl->buffers.key = der;
 8007af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007afa:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
#ifdef WOLFSSL_CHECK_MEM_ZERO
            wc_MemZero_Add("SSL Buffers key", der->buffer, der->length);
#endif
            ssl->buffers.weOwnKey = 1;
 8007afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8007b08:	e026      	b.n	8007b58 <ProcessBuffer+0x3d8>
        }
        else if (ctx != NULL) {
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d023      	beq.n	8007b58 <ProcessBuffer+0x3d8>
            if (ctx->privateKey != NULL && ctx->privateKey->buffer != NULL) {
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <ProcessBuffer+0x3b6>
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <ProcessBuffer+0x3b6>
                ForceZero(ctx->privateKey->buffer, ctx->privateKey->length);
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f7fd fe81 	bl	8005838 <ForceZero>
            }
            FreeDer(&ctx->privateKey);
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	3334      	adds	r3, #52	; 0x34
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f00b fc38 	bl	80133b0 <FreeDer>
            ctx->privateKey = der;
 8007b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	635a      	str	r2, [r3, #52]	; 0x34
 8007b46:	e007      	b.n	8007b58 <ProcessBuffer+0x3d8>
            wc_MemZero_Add("CTX private key", der->buffer, der->length);
#endif
        }
    }
    else {
        FreeDer(&der);
 8007b48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f00b fc2f 	bl	80133b0 <FreeDer>
        return WOLFSSL_BAD_CERTTYPE;
 8007b52:	f06f 0307 	mvn.w	r3, #7
 8007b56:	e35e      	b.n	8008216 <ProcessBuffer+0xa96>
    }

    if (done == 1) {
 8007b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	f000 82b6 	beq.w	80080cc <ProcessBuffer+0x94c>
        /* No operation, just skip the next section */
    }
    else if (type == PRIVATEKEY_TYPE) {
 8007b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d142      	bne.n	8007bee <ProcessBuffer+0x46e>
        ret = ProcessBufferTryDecode(ctx, ssl, der, &keySz, &idx, &resetSuites,
 8007b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b6a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8007b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b74:	9303      	str	r3, [sp, #12]
 8007b76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b90:	f7ff fca6 	bl	80074e0 <ProcessBufferTryDecode>
 8007b94:	6778      	str	r0, [r7, #116]	; 0x74
                &resetSuites, &keyFormat, heap, devId);
        }
    #endif /* WOLFSSL_ENCRYPTED_KEYS && !NO_PWDBASED */

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(info, heap, DYNAMIC_TYPE_ENCRYPTEDINFO);
 8007b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <ProcessBuffer+0x426>
 8007ba0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007ba2:	f011 f81f 	bl	8018be4 <wolfSSL_Free>
    #endif

        if (ret != 0)
 8007ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <ProcessBuffer+0x430>
            return ret;
 8007bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bae:	e332      	b.n	8008216 <ProcessBuffer+0xa96>
        if (keyFormat == 0) {
 8007bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 828a 	bne.w	80080cc <ProcessBuffer+0x94c>
#ifdef OPENSSL_EXTRA
            /* Reaching this point probably means that the
             * decryption password is wrong */
            if (info->passwd_cb)
 8007bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <ProcessBuffer+0x454>
                EVPerr(0, EVP_R_BAD_DECRYPT);
 8007bc0:	f641 2313 	movw	r3, #6675	; 0x1a13
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	4bbf      	ldr	r3, [pc, #764]	; (8007ec4 <ProcessBuffer+0x744>)
 8007bc8:	f240 1291 	movw	r2, #401	; 0x191
 8007bcc:	2100      	movs	r1, #0
 8007bce:	200b      	movs	r0, #11
 8007bd0:	f000 ffb4 	bl	8008b3c <wolfSSL_ERR_put_error>
#endif
            WOLFSSL_ERROR(WOLFSSL_BAD_FILE);
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	4bba      	ldr	r3, [pc, #744]	; (8007ec4 <ProcessBuffer+0x744>)
 8007bda:	f641 2215 	movw	r2, #6677	; 0x1a15
 8007bde:	49ba      	ldr	r1, [pc, #744]	; (8007ec8 <ProcessBuffer+0x748>)
 8007be0:	f06f 0003 	mvn.w	r0, #3
 8007be4:	f010 ff8c 	bl	8018b00 <WOLFSSL_ERROR_LINE>
            return WOLFSSL_BAD_FILE;
 8007be8:	f06f 0303 	mvn.w	r3, #3
 8007bec:	e313      	b.n	8008216 <ProcessBuffer+0xa96>
        }

        (void)devId;
    }
    else if (type == CERT_TYPE) {
 8007bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f040 826a 	bne.w	80080cc <ProcessBuffer+0x94c>
    #ifdef WOLF_PRIVATE_KEY_ID
        int keyType = 0;
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), heap,
 8007bf8:	f240 406c 	movw	r0, #1132	; 0x46c
 8007bfc:	f010 ffd6 	bl	8018bac <wolfSSL_Malloc>
 8007c00:	65b8      	str	r0, [r7, #88]	; 0x58
                                     DYNAMIC_TYPE_DCERT);
        if (cert == NULL)
 8007c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <ProcessBuffer+0x48e>
            return MEMORY_E;
 8007c08:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8007c0c:	e303      	b.n	8008216 <ProcessBuffer+0xa96>
    #endif

        WOLFSSL_MSG("Checking cert signature type");
        InitDecodedCert(cert, der->buffer, der->length, heap);
 8007c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c10:	6819      	ldr	r1, [r3, #0]
 8007c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007c1a:	f007 f9ec 	bl	800eff6 <InitDecodedCert>

        if (DecodeToKey(cert, 0) < 0) {
 8007c1e:	2100      	movs	r1, #0
 8007c20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007c22:	f008 fb9a 	bl	801035a <DecodeToKey>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da0d      	bge.n	8007c48 <ProcessBuffer+0x4c8>
            WOLFSSL_MSG("Decode to key failed");
            FreeDecodedCert(cert);
 8007c2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007c2e:	f007 fa81 	bl	800f134 <FreeDecodedCert>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(cert, heap, DYNAMIC_TYPE_DCERT);
 8007c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c34:	653b      	str	r3, [r7, #80]	; 0x50
 8007c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <ProcessBuffer+0x4c2>
 8007c3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007c3e:	f010 ffd1 	bl	8018be4 <wolfSSL_Free>
        #endif
            return WOLFSSL_BAD_FILE;
 8007c42:	f06f 0303 	mvn.w	r3, #3
 8007c46:	e2e6      	b.n	8008216 <ProcessBuffer+0xa96>
        }

        if (ssl && ssl->options.side == WOLFSSL_SERVER_END) {
 8007c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <ProcessBuffer+0x4e6>
 8007c50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c54:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8007c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <ProcessBuffer+0x4e6>
            resetSuites = 1;
 8007c62:	2301      	movs	r3, #1
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (ssl && ssl->ctx->haveECDSAsig) {
 8007c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <ProcessBuffer+0x512>
 8007c6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <ProcessBuffer+0x512>
            WOLFSSL_MSG("SSL layer setting cert, CTX had ECDSA, turning off");
            ssl->options.haveECDSAsig = 0;   /* may turn back on next */
 8007c82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c86:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 8007c8a:	f36f 1304 	bfc	r3, #4, #1
 8007c8e:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
        }

        switch (cert->signatureOID) {
 8007c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f240 220e 	movw	r2, #526	; 0x20e
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	f200 80d3 	bhi.w	8007e46 <ProcessBuffer+0x6c6>
 8007ca0:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8007ca4:	f080 8087 	bcs.w	8007db6 <ProcessBuffer+0x636>
 8007ca8:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8007cac:	f080 8080 	bcs.w	8007db0 <ProcessBuffer+0x630>
 8007cb0:	2bd5      	cmp	r3, #213	; 0xd5
 8007cb2:	f0c0 80c8 	bcc.w	8007e46 <ProcessBuffer+0x6c6>
 8007cb6:	3bd5      	subs	r3, #213	; 0xd5
 8007cb8:	2b3a      	cmp	r3, #58	; 0x3a
 8007cba:	f200 80c4 	bhi.w	8007e46 <ProcessBuffer+0x6c6>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <ProcessBuffer+0x544>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007e17 	.word	0x08007e17
 8007cc8:	08007e47 	.word	0x08007e47
 8007ccc:	08007e47 	.word	0x08007e47
 8007cd0:	08007e17 	.word	0x08007e17
 8007cd4:	08007e17 	.word	0x08007e17
 8007cd8:	08007e47 	.word	0x08007e47
 8007cdc:	08007e47 	.word	0x08007e47
 8007ce0:	08007e17 	.word	0x08007e17
 8007ce4:	08007e17 	.word	0x08007e17
 8007ce8:	08007e47 	.word	0x08007e47
 8007cec:	08007e47 	.word	0x08007e47
 8007cf0:	08007e17 	.word	0x08007e17
 8007cf4:	08007e47 	.word	0x08007e47
 8007cf8:	08007e47 	.word	0x08007e47
 8007cfc:	08007e47 	.word	0x08007e47
 8007d00:	08007e47 	.word	0x08007e47
 8007d04:	08007e47 	.word	0x08007e47
 8007d08:	08007e47 	.word	0x08007e47
 8007d0c:	08007e47 	.word	0x08007e47
 8007d10:	08007e47 	.word	0x08007e47
 8007d14:	08007e47 	.word	0x08007e47
 8007d18:	08007e47 	.word	0x08007e47
 8007d1c:	08007e47 	.word	0x08007e47
 8007d20:	08007e47 	.word	0x08007e47
 8007d24:	08007e47 	.word	0x08007e47
 8007d28:	08007e47 	.word	0x08007e47
 8007d2c:	08007e47 	.word	0x08007e47
 8007d30:	08007e47 	.word	0x08007e47
 8007d34:	08007e47 	.word	0x08007e47
 8007d38:	08007e47 	.word	0x08007e47
 8007d3c:	08007e47 	.word	0x08007e47
 8007d40:	08007e47 	.word	0x08007e47
 8007d44:	08007e47 	.word	0x08007e47
 8007d48:	08007e47 	.word	0x08007e47
 8007d4c:	08007e47 	.word	0x08007e47
 8007d50:	08007e47 	.word	0x08007e47
 8007d54:	08007e47 	.word	0x08007e47
 8007d58:	08007e47 	.word	0x08007e47
 8007d5c:	08007e47 	.word	0x08007e47
 8007d60:	08007e47 	.word	0x08007e47
 8007d64:	08007e47 	.word	0x08007e47
 8007d68:	08007e47 	.word	0x08007e47
 8007d6c:	08007e47 	.word	0x08007e47
 8007d70:	08007db7 	.word	0x08007db7
 8007d74:	08007db7 	.word	0x08007db7
 8007d78:	08007e47 	.word	0x08007e47
 8007d7c:	08007e47 	.word	0x08007e47
 8007d80:	08007e47 	.word	0x08007e47
 8007d84:	08007e47 	.word	0x08007e47
 8007d88:	08007e47 	.word	0x08007e47
 8007d8c:	08007e47 	.word	0x08007e47
 8007d90:	08007e47 	.word	0x08007e47
 8007d94:	08007e47 	.word	0x08007e47
 8007d98:	08007e47 	.word	0x08007e47
 8007d9c:	08007e47 	.word	0x08007e47
 8007da0:	08007de7 	.word	0x08007de7
 8007da4:	08007e47 	.word	0x08007e47
 8007da8:	08007e47 	.word	0x08007e47
 8007dac:	08007de7 	.word	0x08007de7
 8007db0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8007db4:	d147      	bne.n	8007e46 <ProcessBuffer+0x6c6>
            case CTC_SHA384wECDSA:
            case CTC_SHA512wECDSA:
            case CTC_ED25519:
            case CTC_ED448:
                WOLFSSL_MSG("ECDSA/ED25519/ED448 cert signature");
                if (ssl)
 8007db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <ProcessBuffer+0x650>
                    ssl->options.haveECDSAsig = 1;
 8007dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dc2:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 8007dc6:	f043 0310 	orr.w	r3, r3, #16
 8007dca:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
                else if (ctx)
                    ctx->haveECDSAsig = 1;
                break;
 8007dce:	e03c      	b.n	8007e4a <ProcessBuffer+0x6ca>
                else if (ctx)
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d039      	beq.n	8007e4a <ProcessBuffer+0x6ca>
                    ctx->haveECDSAsig = 1;
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd8:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8007ddc:	f043 0308 	orr.w	r3, r3, #8
 8007de0:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
                break;
 8007de4:	e031      	b.n	8007e4a <ProcessBuffer+0x6ca>
            case CTC_FALCON_LEVEL1:
            case CTC_FALCON_LEVEL5:
                WOLFSSL_MSG("Falcon cert signature");
                if (ssl)
 8007de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <ProcessBuffer+0x680>
                    ssl->options.haveFalconSig = 1;
 8007dee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007df2:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 8007df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfa:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
                else if (ctx)
                    ctx->haveFalconSig = 1;
                break;
 8007dfe:	e026      	b.n	8007e4e <ProcessBuffer+0x6ce>
                else if (ctx)
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d023      	beq.n	8007e4e <ProcessBuffer+0x6ce>
                    ctx->haveFalconSig = 1;
 8007e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e08:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8007e0c:	f043 0310 	orr.w	r3, r3, #16
 8007e10:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
                break;
 8007e14:	e01b      	b.n	8007e4e <ProcessBuffer+0x6ce>
            case CTC_DILITHIUM_LEVEL5:
            case CTC_DILITHIUM_AES_LEVEL2:
            case CTC_DILITHIUM_AES_LEVEL3:
            case CTC_DILITHIUM_AES_LEVEL5:
                WOLFSSL_MSG("Dilithium cert signature");
                if (ssl)
 8007e16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d008      	beq.n	8007e30 <ProcessBuffer+0x6b0>
                    ssl->options.haveDilithiumSig = 1;
 8007e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e22:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 8007e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2a:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
                else if (ctx)
                    ctx->haveDilithiumSig = 1;
                break;
 8007e2e:	e010      	b.n	8007e52 <ProcessBuffer+0x6d2>
                else if (ctx)
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00d      	beq.n	8007e52 <ProcessBuffer+0x6d2>
                    ctx->haveDilithiumSig = 1;
 8007e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e38:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8007e3c:	f043 0320 	orr.w	r3, r3, #32
 8007e40:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
                break;
 8007e44:	e005      	b.n	8007e52 <ProcessBuffer+0x6d2>
            default:
                WOLFSSL_MSG("Not ECDSA cert signature");
                break;
 8007e46:	bf00      	nop
 8007e48:	e004      	b.n	8007e54 <ProcessBuffer+0x6d4>
                break;
 8007e4a:	bf00      	nop
 8007e4c:	e002      	b.n	8007e54 <ProcessBuffer+0x6d4>
                break;
 8007e4e:	bf00      	nop
 8007e50:	e000      	b.n	8007e54 <ProcessBuffer+0x6d4>
                break;
 8007e52:	bf00      	nop
        }

    #if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448) || \
        (defined(HAVE_PQC) && defined(HAVE_LIBOQS)) || !defined(NO_RSA)
        if (ssl) {
 8007e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d037      	beq.n	8007ecc <ProcessBuffer+0x74c>
        #if defined(HAVE_ECC) || defined(HAVE_ED25519) || \
            (defined(HAVE_CURVE448) && defined(HAVE_ED448))
            ssl->pkCurveOID = cert->pkCurveOID;
 8007e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e5e:	f8d3 23f4 	ldr.w	r2, [r3, #1012]	; 0x3f4
 8007e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e66:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
        #endif
        #ifndef WC_STRICT_SIG
            if (cert->keyOID == ECDSAk) {
 8007e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f240 2206 	movw	r2, #518	; 0x206
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d108      	bne.n	8007e88 <ProcessBuffer+0x708>
                ssl->options.haveECC = 1;
 8007e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e7a:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 8007e7e:	f043 0304 	orr.w	r3, r3, #4
 8007e82:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
 8007e86:	e053      	b.n	8007f30 <ProcessBuffer+0x7b0>
            }
            #ifndef NO_RSA
            else if (cert->keyOID == RSAk) {
 8007e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f240 2285 	movw	r2, #645	; 0x285
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d108      	bne.n	8007ea6 <ProcessBuffer+0x726>
                ssl->options.haveRSA = 1;
 8007e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e98:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 8007e9c:	f043 0302 	orr.w	r3, r3, #2
 8007ea0:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
 8007ea4:	e044      	b.n	8007f30 <ProcessBuffer+0x7b0>
            }
            #ifdef WC_RSA_PSS
            else if (cert->keyOID == RSAPSSk) {
 8007ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f240 228e 	movw	r2, #654	; 0x28e
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d13e      	bne.n	8007f30 <ProcessBuffer+0x7b0>
                ssl->options.haveRSA = 1;
 8007eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007eb6:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
 8007eba:	f043 0302 	orr.w	r3, r3, #2
 8007ebe:	f882 339f 	strb.w	r3, [r2, #927]	; 0x39f
 8007ec2:	e035      	b.n	8007f30 <ProcessBuffer+0x7b0>
 8007ec4:	080237c0 	.word	0x080237c0
 8007ec8:	08029bcc 	.word	0x08029bcc
            #endif /* HAVE_PQC */
        #else
            ssl->options.haveECC = ssl->options.haveECDSAsig;
        #endif
        }
        else if (ctx) {
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d02e      	beq.n	8007f30 <ProcessBuffer+0x7b0>
        #if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448)
            ctx->pkCurveOID = cert->pkCurveOID;
 8007ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ed4:	f8d3 23f4 	ldr.w	r2, [r3, #1012]	; 0x3f4
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        #endif
        #ifndef WC_STRICT_SIG
            if (cert->keyOID == ECDSAk) {
 8007ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f240 2206 	movw	r2, #518	; 0x206
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d107      	bne.n	8007efa <ProcessBuffer+0x77a>
                ctx->haveECC = 1;
 8007eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eec:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8007ef0:	f043 0302 	orr.w	r3, r3, #2
 8007ef4:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
 8007ef8:	e01a      	b.n	8007f30 <ProcessBuffer+0x7b0>
            }
            #ifndef NO_RSA
            else if (cert->keyOID == RSAk) {
 8007efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	f240 2285 	movw	r2, #645	; 0x285
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d107      	bne.n	8007f16 <ProcessBuffer+0x796>
                ctx->haveRSA = 1;
 8007f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f08:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
 8007f14:	e00c      	b.n	8007f30 <ProcessBuffer+0x7b0>
            }
            #ifdef WC_RSA_PSS
            else if (cert->keyOID == RSAPSSk) {
 8007f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f240 228e 	movw	r2, #654	; 0x28e
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d106      	bne.n	8007f30 <ProcessBuffer+0x7b0>
                ctx->haveRSA = 1;
 8007f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f24:	f892 305e 	ldrb.w	r3, [r2, #94]	; 0x5e
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	f882 305e 	strb.w	r3, [r2, #94]	; 0x5e
        #endif
        }
    #endif

        /* check key size of cert unless specified not to */
        switch (cert->keyOID) {
 8007f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f240 228e 	movw	r2, #654	; 0x28e
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00d      	beq.n	8007f58 <ProcessBuffer+0x7d8>
 8007f3c:	f240 228e 	movw	r2, #654	; 0x28e
 8007f40:	4293      	cmp	r3, r2
 8007f42:	f200 80ac 	bhi.w	800809e <ProcessBuffer+0x91e>
 8007f46:	f240 2206 	movw	r2, #518	; 0x206
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d05f      	beq.n	800800e <ProcessBuffer+0x88e>
 8007f4e:	f240 2285 	movw	r2, #645	; 0x285
 8007f52:	4293      	cmp	r3, r2
 8007f54:	f040 80a3 	bne.w	800809e <ProcessBuffer+0x91e>
            case RSAk:
            #ifdef WOLF_PRIVATE_KEY_ID
                keyType = rsa_sa_algo;
            #endif
                /* Determine RSA key size by parsing public key */
                idx = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	63bb      	str	r3, [r7, #56]	; 0x38
                ret = wc_RsaPublicKeyDecode_ex(cert->publicKey, &idx,
 8007f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9302      	str	r3, [sp, #8]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	2300      	movs	r3, #0
 8007f78:	f006 feaf 	bl	800ecda <wc_RsaPublicKeyDecode_ex>
 8007f7c:	6778      	str	r0, [r7, #116]	; 0x74
                    cert->pubKeySize, NULL, (word32*)&keySz, NULL, NULL);
                if (ret < 0)
 8007f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f2c0 808e 	blt.w	80080a2 <ProcessBuffer+0x922>
                    break;

                if (ssl && !ssl->options.verifyNone) {
 8007f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01e      	beq.n	8007fcc <ProcessBuffer+0x84c>
 8007f8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f92:	f893 339d 	ldrb.w	r3, [r3, #925]	; 0x39d
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d115      	bne.n	8007fcc <ProcessBuffer+0x84c>
                    if (ssl->options.minRsaKeySz < 0 ||
 8007fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fa4:	f9b3 33b2 	ldrsh.w	r3, [r3, #946]	; 0x3b2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	db0b      	blt.n	8007fc4 <ProcessBuffer+0x844>
                          keySz < (int)ssl->options.minRsaKeySz ||
 8007fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fb0:	f9b3 33b2 	ldrsh.w	r3, [r3, #946]	; 0x3b2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                    if (ssl->options.minRsaKeySz < 0 ||
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	dc03      	bgt.n	8007fc4 <ProcessBuffer+0x844>
                          keySz > (RSA_MAX_SIZE / 8)) {
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                          keySz < (int)ssl->options.minRsaKeySz ||
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc2:	dd22      	ble.n	800800a <ProcessBuffer+0x88a>
                        ret = RSA_KEY_SIZE_E;
 8007fc4:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 8007fc8:	677b      	str	r3, [r7, #116]	; 0x74
                    if (ssl->options.minRsaKeySz < 0 ||
 8007fca:	e01e      	b.n	800800a <ProcessBuffer+0x88a>
                        WOLFSSL_MSG("Certificate RSA key size too small");
                    }
                }
                else if (ctx && !ctx->verifyNone) {
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d069      	beq.n	80080a6 <ProcessBuffer+0x926>
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d161      	bne.n	80080a6 <ProcessBuffer+0x926>
                    if (ctx->minRsaKeySz < 0 ||
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	db0a      	blt.n	8008002 <ProcessBuffer+0x882>
                            keySz < (int)ctx->minRsaKeySz ||
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                    if (ctx->minRsaKeySz < 0 ||
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	dc03      	bgt.n	8008002 <ProcessBuffer+0x882>
                            keySz > (RSA_MAX_SIZE / 8)) {
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                            keySz < (int)ctx->minRsaKeySz ||
 8007ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008000:	dd51      	ble.n	80080a6 <ProcessBuffer+0x926>
                        ret = RSA_KEY_SIZE_E;
 8008002:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 8008006:	677b      	str	r3, [r7, #116]	; 0x74
                        WOLFSSL_MSG("Certificate RSA key size too small");
                    }
                }
                break;
 8008008:	e04d      	b.n	80080a6 <ProcessBuffer+0x926>
                    if (ssl->options.minRsaKeySz < 0 ||
 800800a:	bf00      	nop
                break;
 800800c:	e04b      	b.n	80080a6 <ProcessBuffer+0x926>
            case ECDSAk:
            #ifdef WOLF_PRIVATE_KEY_ID
                keyType = ecc_dsa_sa_algo;
            #endif
                /* Determine ECC key size based on curve */
                keySz = wc_ecc_get_curve_size_from_id(
 800800e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008010:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8008014:	2200      	movs	r2, #0
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f010 fa27 	bl	801846c <wc_ecc_get_oid>
 800801e:	4603      	mov	r3, r0
 8008020:	4618      	mov	r0, r3
 8008022:	f00e fef7 	bl	8016e14 <wc_ecc_get_curve_size_from_id>
 8008026:	4603      	mov	r3, r0
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
                    wc_ecc_get_oid(cert->pkCurveOID, NULL, NULL));

                if (ssl && !ssl->options.verifyNone) {
 800802a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800802e:	2b00      	cmp	r3, #0
 8008030:	d019      	beq.n	8008066 <ProcessBuffer+0x8e6>
 8008032:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008036:	f893 339d 	ldrb.w	r3, [r3, #925]	; 0x39d
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d110      	bne.n	8008066 <ProcessBuffer+0x8e6>
                    if (ssl->options.minEccKeySz < 0 ||
 8008044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008048:	f9b3 33b4 	ldrsh.w	r3, [r3, #948]	; 0x3b4
 800804c:	2b00      	cmp	r3, #0
 800804e:	db07      	blt.n	8008060 <ProcessBuffer+0x8e0>
                          keySz < (int)ssl->options.minEccKeySz) {
 8008050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008054:	f9b3 33b4 	ldrsh.w	r3, [r3, #948]	; 0x3b4
 8008058:	461a      	mov	r2, r3
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                    if (ssl->options.minEccKeySz < 0 ||
 800805c:	429a      	cmp	r2, r3
 800805e:	dd1c      	ble.n	800809a <ProcessBuffer+0x91a>
                        ret = ECC_KEY_SIZE_E;
 8008060:	4b6f      	ldr	r3, [pc, #444]	; (8008220 <ProcessBuffer+0xaa0>)
 8008062:	677b      	str	r3, [r7, #116]	; 0x74
                    if (ssl->options.minEccKeySz < 0 ||
 8008064:	e019      	b.n	800809a <ProcessBuffer+0x91a>
                        WOLFSSL_MSG("Certificate ECC key size error");
                    }
                }
                else if (ctx && !ctx->verifyNone) {
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01e      	beq.n	80080aa <ProcessBuffer+0x92a>
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d116      	bne.n	80080aa <ProcessBuffer+0x92a>
                    if (ctx->minEccKeySz < 0 ||
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8008082:	2b00      	cmp	r3, #0
 8008084:	db06      	blt.n	8008094 <ProcessBuffer+0x914>
                                  keySz < (int)ctx->minEccKeySz) {
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 800808c:	461a      	mov	r2, r3
 800808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                    if (ctx->minEccKeySz < 0 ||
 8008090:	429a      	cmp	r2, r3
 8008092:	dd0a      	ble.n	80080aa <ProcessBuffer+0x92a>
                        ret = ECC_KEY_SIZE_E;
 8008094:	4b62      	ldr	r3, [pc, #392]	; (8008220 <ProcessBuffer+0xaa0>)
 8008096:	677b      	str	r3, [r7, #116]	; 0x74
                        WOLFSSL_MSG("Certificate ECC key size error");
                    }
                }
                break;
 8008098:	e007      	b.n	80080aa <ProcessBuffer+0x92a>
                    if (ssl->options.minEccKeySz < 0 ||
 800809a:	bf00      	nop
                break;
 800809c:	e005      	b.n	80080aa <ProcessBuffer+0x92a>
        #endif /* HAVE_DILITHIUM */
        #endif /* HAVE_PQC */

            default:
                WOLFSSL_MSG("No key size check done on certificate");
                break; /* do no check if not a case for the key */
 800809e:	bf00      	nop
 80080a0:	e004      	b.n	80080ac <ProcessBuffer+0x92c>
                    break;
 80080a2:	bf00      	nop
 80080a4:	e002      	b.n	80080ac <ProcessBuffer+0x92c>
                break;
 80080a6:	bf00      	nop
 80080a8:	e000      	b.n	80080ac <ProcessBuffer+0x92c>
                break;
 80080aa:	bf00      	nop
            ctx->privateKeyType = keyType;
            ctx->privateKeySz = keySz;
        }
    #endif

        FreeDecodedCert(cert);
 80080ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80080ae:	f007 f841 	bl	800f134 <FreeDecodedCert>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(cert, heap, DYNAMIC_TYPE_DCERT);
 80080b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080b4:	657b      	str	r3, [r7, #84]	; 0x54
 80080b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <ProcessBuffer+0x942>
 80080bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80080be:	f010 fd91 	bl	8018be4 <wolfSSL_Free>
    #endif

        if (ret != 0) {
 80080c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <ProcessBuffer+0x94c>
            done = 1;
 80080c8:	2301      	movs	r3, #1
 80080ca:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }

    if (done == 1) {
 80080cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d124      	bne.n	800811c <ProcessBuffer+0x99c>
    #if !defined(NO_WOLFSSL_CM_VERIFY) && (!defined(NO_WOLFSSL_CLIENT) || \
                                           !defined(WOLFSSL_NO_CLIENT_AUTH))
        if ((type == CA_TYPE) || (type == CERT_TYPE)) {
 80080d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	d003      	beq.n	80080e2 <ProcessBuffer+0x962>
 80080da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d11a      	bne.n	8008118 <ProcessBuffer+0x998>
            /* Call to over-ride status */
            if ((ctx != NULL) && (ctx->cm != NULL) &&
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d017      	beq.n	8008118 <ProcessBuffer+0x998>
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d013      	beq.n	8008118 <ProcessBuffer+0x998>
                (ctx->cm->verifyCallback != NULL)) {
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if ((ctx != NULL) && (ctx->cm != NULL) &&
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <ProcessBuffer+0x998>
                ret = CM_VerifyBuffer_ex(ctx->cm, buff,
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80080fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008100:	2b01      	cmp	r3, #1
 8008102:	d001      	beq.n	8008108 <ProcessBuffer+0x988>
 8008104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008106:	e000      	b.n	800810a <ProcessBuffer+0x98a>
 8008108:	2300      	movs	r3, #0
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	6a39      	ldr	r1, [r7, #32]
 8008112:	f000 f913 	bl	800833c <CM_VerifyBuffer_ex>
 8008116:	6778      	str	r0, [r7, #116]	; 0x74
                        sz, format, (ret == WOLFSSL_SUCCESS ? 0 : ret));
            }
        }
    #endif /* NO_WOLFSSL_CM_VERIFY */

        return ret;
 8008118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800811a:	e07c      	b.n	8008216 <ProcessBuffer+0xa96>
    }


    if (ssl && resetSuites) {
 800811c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008120:	2b00      	cmp	r3, #0
 8008122:	d077      	beq.n	8008214 <ProcessBuffer+0xa94>
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d074      	beq.n	8008214 <ProcessBuffer+0xa94>
        word16 havePSK = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        word16 haveRSA = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        if (ssl->options.havePSK) {
            havePSK = 1;
        }
        #endif
        #ifndef NO_RSA
            haveRSA = 1;
 8008136:	2301      	movs	r3, #1
 8008138:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        #endif
            keySz = ssl->buffers.keySz;
 800813c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008140:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8008144:	637b      	str	r3, [r7, #52]	; 0x34

        /* let's reset suites */
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 8008146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008150:	613a      	str	r2, [r7, #16]
                   havePSK, ssl->options.haveDH, ssl->options.haveECDSAsig,
 8008152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008156:	f893 339f 	ldrb.w	r3, [r3, #927]	; 0x39f
 800815a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800815e:	b2db      	uxtb	r3, r3
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 8008160:	b29b      	uxth	r3, r3
 8008162:	60fb      	str	r3, [r7, #12]
                   havePSK, ssl->options.haveDH, ssl->options.haveECDSAsig,
 8008164:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008168:	f892 239f 	ldrb.w	r2, [r2, #927]	; 0x39f
 800816c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8008170:	b2d2      	uxtb	r2, r2
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 8008172:	b292      	uxth	r2, r2
                   ssl->options.haveECC, TRUE, ssl->options.haveStaticECC,
 8008174:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008178:	f891 139f 	ldrb.w	r1, [r1, #927]	; 0x39f
 800817c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8008180:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 8008182:	b288      	uxth	r0, r1
                   ssl->options.haveECC, TRUE, ssl->options.haveStaticECC,
 8008184:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008188:	f891 139f 	ldrb.w	r1, [r1, #927]	; 0x39f
 800818c:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8008190:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 8008192:	b28c      	uxth	r4, r1
                   ssl->options.haveFalconSig, ssl->options.haveDilithiumSig,
 8008194:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008198:	f891 139f 	ldrb.w	r1, [r1, #927]	; 0x39f
 800819c:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80081a0:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 80081a2:	b28d      	uxth	r5, r1
                   ssl->options.haveFalconSig, ssl->options.haveDilithiumSig,
 80081a4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80081a8:	f891 139f 	ldrb.w	r1, [r1, #927]	; 0x39f
 80081ac:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80081b0:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 80081b2:	b28e      	uxth	r6, r1
                   ssl->options.haveAnon, TRUE, ssl->options.side);
 80081b4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80081b8:	f891 13a1 	ldrb.w	r1, [r1, #929]	; 0x3a1
 80081bc:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80081c0:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 80081c2:	b289      	uxth	r1, r1
 80081c4:	60b9      	str	r1, [r7, #8]
                   ssl->options.haveAnon, TRUE, ssl->options.side);
 80081c6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80081ca:	f891 139c 	ldrb.w	r1, [r1, #924]	; 0x39c
 80081ce:	f3c1 1181 	ubfx	r1, r1, #6, #2
 80081d2:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 80081d4:	f8b7 c048 	ldrh.w	ip, [r7, #72]	; 0x48
 80081d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081dc:	607b      	str	r3, [r7, #4]
 80081de:	910a      	str	r1, [sp, #40]	; 0x28
 80081e0:	f04f 0e01 	mov.w	lr, #1
 80081e4:	4671      	mov	r1, lr
 80081e6:	9109      	str	r1, [sp, #36]	; 0x24
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	9108      	str	r1, [sp, #32]
 80081ec:	9607      	str	r6, [sp, #28]
 80081ee:	9506      	str	r5, [sp, #24]
 80081f0:	9405      	str	r4, [sp, #20]
 80081f2:	2401      	movs	r4, #1
 80081f4:	9404      	str	r4, [sp, #16]
 80081f6:	9003      	str	r0, [sp, #12]
 80081f8:	9202      	str	r2, [sp, #8]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4663      	mov	r3, ip
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	f8d1 12a8 	ldr.w	r1, [r1, #680]	; 0x2a8
 800820e:	6978      	ldr	r0, [r7, #20]
 8008210:	f7fb fc02 	bl	8003a18 <InitSuites>
    }

    return WOLFSSL_SUCCESS;
 8008214:	2301      	movs	r3, #1
}
 8008216:	4618      	mov	r0, r3
 8008218:	377c      	adds	r7, #124	; 0x7c
 800821a:	46bd      	mov	sp, r7
 800821c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821e:	bf00      	nop
 8008220:	fffffe66 	.word	0xfffffe66

08008224 <ProcessChainBuffer>:


/* CA PEM file for verification, may have multiple/chain certs to process */
static int ProcessChainBuffer(WOLFSSL_CTX* ctx, const unsigned char* buff,
                        long sz, int format, int type, WOLFSSL* ssl, int verify)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08e      	sub	sp, #56	; 0x38
 8008228:	af06      	add	r7, sp, #24
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	603b      	str	r3, [r7, #0]
    long used   = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	61fb      	str	r3, [r7, #28]
    int  ret    = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
    int  gotOne = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]

    WOLFSSL_MSG("Processing CA PEM file");
    while (used < sz) {
 800823e:	e02d      	b.n	800829c <ProcessChainBuffer+0x78>
        long consumed = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]

        ret = ProcessBuffer(ctx, buff + used, sz - used, format, type, ssl,
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	18d1      	adds	r1, r2, r3
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	1ad2      	subs	r2, r2, r3
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	2300      	movs	r3, #0
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	f107 0310 	add.w	r3, r7, #16
 800825c:	9302      	str	r3, [sp, #8]
 800825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff fa89 	bl	8007780 <ProcessBuffer>
 800826e:	61b8      	str	r0, [r7, #24]
                            &consumed, 0, verify);

        if (ret < 0) {
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	da0c      	bge.n	8008290 <ProcessChainBuffer+0x6c>
                used += info.consumed;
                continue;
            }
#endif

            if (consumed > 0) { /* Made progress in file */
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	dd14      	ble.n	80082a6 <ProcessChainBuffer+0x82>
                WOLFSSL_ERROR(ret);
 800827c:	2300      	movs	r3, #0
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <ProcessChainBuffer+0x98>)
 8008282:	f641 32d0 	movw	r2, #7120	; 0x1bd0
 8008286:	490e      	ldr	r1, [pc, #56]	; (80082c0 <ProcessChainBuffer+0x9c>)
 8008288:	69b8      	ldr	r0, [r7, #24]
 800828a:	f010 fc39 	bl	8018b00 <WOLFSSL_ERROR_LINE>
 800828e:	e001      	b.n	8008294 <ProcessChainBuffer+0x70>
                break;
            }
        }
        else {
            WOLFSSL_MSG("   Processed a CA");
            gotOne = 1;
 8008290:	2301      	movs	r3, #1
 8008292:	617b      	str	r3, [r7, #20]
        }
        used += consumed;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	61fb      	str	r3, [r7, #28]
    while (used < sz) {
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	dbcd      	blt.n	8008240 <ProcessChainBuffer+0x1c>
 80082a4:	e000      	b.n	80082a8 <ProcessChainBuffer+0x84>
                break;
 80082a6:	bf00      	nop
    }

    if (gotOne) {
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <ProcessChainBuffer+0x8e>
        WOLFSSL_MSG("Processed at least one valid CA. Other stuff OK");
        return WOLFSSL_SUCCESS;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <ProcessChainBuffer+0x90>
    }
    return ret;
 80082b2:	69bb      	ldr	r3, [r7, #24]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	080237c0 	.word	0x080237c0
 80082c0:	08029bdc 	.word	0x08029bdc

080082c4 <cm_pick_method>:


static WC_INLINE WOLFSSL_METHOD* cm_pick_method(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
        #elif !defined(NO_OLD_TLS)
            return wolfTLSv1_1_client_method();
        #elif !defined(WOLFSSL_NO_TLS12)
            return wolfTLSv1_2_client_method();
        #elif defined(WOLFSSL_TLS13)
            return wolfTLSv1_3_client_method();
 80082c8:	f003 fa96 	bl	800b7f8 <wolfTLSv1_3_client_method>
 80082cc:	4603      	mov	r3, r0
            return NULL;
        #endif
    #else
        return NULL;
    #endif
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <wolfSSL_CertManagerLoadCABuffer>:


/* like load verify locations, 1 for success, < 0 for error */
int wolfSSL_CertManagerLoadCABuffer(WOLFSSL_CERT_MANAGER* cm,
                                   const unsigned char* in, long sz, int format)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
    int ret = WOLFSSL_FATAL_ERROR;
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295
 80082e4:	617b      	str	r3, [r7, #20]
    WOLFSSL_CTX* tmp;

    WOLFSSL_ENTER("wolfSSL_CertManagerLoadCABuffer");

    if (cm == NULL) {
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <wolfSSL_CertManagerLoadCABuffer+0x1e>
        WOLFSSL_MSG("No CertManager error");
        return ret;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	e021      	b.n	8008334 <wolfSSL_CertManagerLoadCABuffer+0x62>
    }
    tmp = wolfSSL_CTX_new(cm_pick_method());
 80082f0:	f7ff ffe8 	bl	80082c4 <cm_pick_method>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fb98 	bl	8006a2c <wolfSSL_CTX_new>
 80082fc:	6138      	str	r0, [r7, #16]

    if (tmp == NULL) {
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <wolfSSL_CertManagerLoadCABuffer+0x36>
        WOLFSSL_MSG("CTX new failed");
        return ret;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	e015      	b.n	8008334 <wolfSSL_CertManagerLoadCABuffer+0x62>
    }

    /* for tmp use */
    wolfSSL_CertManagerFree(tmp->cm);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fc31 	bl	8006b74 <wolfSSL_CertManagerFree>
    tmp->cm = cm;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	649a      	str	r2, [r3, #72]	; 0x48

    ret = wolfSSL_CTX_load_verify_buffer(tmp, in, sz, format);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	68b9      	ldr	r1, [r7, #8]
 800831e:	6938      	ldr	r0, [r7, #16]
 8008320:	f000 fb23 	bl	800896a <wolfSSL_CTX_load_verify_buffer>
 8008324:	6178      	str	r0, [r7, #20]

    /* don't loose our good one */
    tmp->cm = NULL;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2200      	movs	r2, #0
 800832a:	649a      	str	r2, [r3, #72]	; 0x48
    wolfSSL_CTX_free(tmp);
 800832c:	6938      	ldr	r0, [r7, #16]
 800832e:	f7fe fb8a 	bl	8006a46 <wolfSSL_CTX_free>

    return ret;
 8008332:	697b      	ldr	r3, [r7, #20]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <CM_VerifyBuffer_ex>:

#if !defined(NO_WOLFSSL_CLIENT) || !defined(WOLFSSL_NO_CLIENT_AUTH)
/* Verify the certificate, WOLFSSL_SUCCESS for ok, < 0 for error */
int CM_VerifyBuffer_ex(WOLFSSL_CERT_MANAGER* cm, const byte* buff,
                                    long sz, int format, int err_val)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b092      	sub	sp, #72	; 0x48
 8008340:	af04      	add	r7, sp, #16
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
    DerBuffer* der = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]
#endif

    WOLFSSL_ENTER("wolfSSL_CertManagerVerifyBuffer");

#ifdef WOLFSSL_SMALL_STACK
    cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), cm->heap,
 8008352:	f240 406c 	movw	r0, #1132	; 0x46c
 8008356:	f010 fc29 	bl	8018bac <wolfSSL_Malloc>
 800835a:	6338      	str	r0, [r7, #48]	; 0x30
                                 DYNAMIC_TYPE_DCERT);
    if (cert == NULL)
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <CM_VerifyBuffer_ex+0x2c>
        return MEMORY_E;
 8008362:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8008366:	e099      	b.n	800849c <CM_VerifyBuffer_ex+0x160>
#endif

    if (format == WOLFSSL_FILETYPE_PEM) {
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d12b      	bne.n	80083c6 <CM_VerifyBuffer_ex+0x8a>
#ifdef WOLFSSL_PEM_TO_DER
        ret = PemToDer(buff, sz, CERT_TYPE, &der, cm->heap, NULL, NULL);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	f107 0218 	add.w	r2, r7, #24
 8008376:	2100      	movs	r1, #0
 8008378:	9102      	str	r1, [sp, #8]
 800837a:	2100      	movs	r1, #0
 800837c:	9101      	str	r1, [sp, #4]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	4613      	mov	r3, r2
 8008382:	2200      	movs	r2, #0
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	68b8      	ldr	r0, [r7, #8]
 8008388:	f00b faca 	bl	8013920 <PemToDer>
 800838c:	6378      	str	r0, [r7, #52]	; 0x34
        if (ret != 0) {
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00e      	beq.n	80083b2 <CM_VerifyBuffer_ex+0x76>
            FreeDer(&der);
 8008394:	f107 0318 	add.w	r3, r7, #24
 8008398:	4618      	mov	r0, r3
 800839a:	f00b f809 	bl	80133b0 <FreeDer>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(cert, cm->heap, DYNAMIC_TYPE_DCERT);
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <CM_VerifyBuffer_ex+0x72>
 80083a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083aa:	f010 fc1b 	bl	8018be4 <wolfSSL_Free>
        #endif
            return ret;
 80083ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b0:	e074      	b.n	800849c <CM_VerifyBuffer_ex+0x160>
        }
        InitDecodedCert(cert, der->buffer, der->length, cm->heap);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c0:	f006 fe19 	bl	800eff6 <InitDecodedCert>
 80083c4:	e006      	b.n	80083d4 <CM_VerifyBuffer_ex+0x98>
#else
        ret = NOT_COMPILED_IN;
#endif
    }
    else {
        InitDecodedCert(cert, buff, (word32)sz, cm->heap);
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083d0:	f006 fe11 	bl	800eff6 <InitDecodedCert>
    }

    if (ret == 0)
 80083d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <CM_VerifyBuffer_ex+0xac>
        ret = ParseCertRelative(cert, CERT_TYPE, 1, cm);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	2100      	movs	r1, #0
 80083e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083e2:	f00a fc20 	bl	8012c26 <ParseCertRelative>
 80083e6:	6378      	str	r0, [r7, #52]	; 0x34
        ret = CheckCertCRL(cm->crl, cert);
#endif

#ifndef NO_WOLFSSL_CM_VERIFY
    /* if verify callback has been set */
    if (cm->verifyCallback) {
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d03f      	beq.n	8008470 <CM_VerifyBuffer_ex+0x134>
        buffer certBuf;
    #ifdef WOLFSSL_SMALL_STACK
        ProcPeerCertArgs* args;
        args = (ProcPeerCertArgs*)XMALLOC(
 80083f0:	2028      	movs	r0, #40	; 0x28
 80083f2:	f010 fbdb 	bl	8018bac <wolfSSL_Malloc>
 80083f6:	62b8      	str	r0, [r7, #40]	; 0x28
            sizeof(ProcPeerCertArgs), cm->heap, DYNAMIC_TYPE_TMP_BUFFER);
        if (args == NULL) {
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <CM_VerifyBuffer_ex+0xd8>
            XFREE(cert, cm->heap, DYNAMIC_TYPE_DCERT);
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	623b      	str	r3, [r7, #32]
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <CM_VerifyBuffer_ex+0xd2>
 8008408:	6a38      	ldr	r0, [r7, #32]
 800840a:	f010 fbeb 	bl	8018be4 <wolfSSL_Free>
            return MEMORY_E;
 800840e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8008412:	e043      	b.n	800849c <CM_VerifyBuffer_ex+0x160>
        }
    #else
        ProcPeerCertArgs  args[1];
    #endif

        certBuf.buffer = (byte*)buff;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	613b      	str	r3, [r7, #16]
        certBuf.length = (unsigned int)sz;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	617b      	str	r3, [r7, #20]
        XMEMSET(args, 0, sizeof(ProcPeerCertArgs));
 800841c:	2228      	movs	r2, #40	; 0x28
 800841e:	2100      	movs	r1, #0
 8008420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008422:	f018 ff87 	bl	8021334 <memset>

        args->totalCerts = 1;
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	2201      	movs	r2, #1
 800842a:	615a      	str	r2, [r3, #20]
        args->certs = &certBuf;
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	f107 0210 	add.w	r2, r7, #16
 8008432:	601a      	str	r2, [r3, #0]
        args->dCert = cert;
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008438:	609a      	str	r2, [r3, #8]
        args->dCertInit = 1;
 800843a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800843c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8008440:	f043 0304 	orr.w	r3, r3, #4
 8008444:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        if (err_val != 0) {
 8008448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <CM_VerifyBuffer_ex+0x116>
            ret = err_val;
 800844e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
        }
        ret = DoVerifyCallback(cm, NULL, ret, args);
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008456:	2100      	movs	r1, #0
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7fc ff47 	bl	80052ec <DoVerifyCallback>
 800845e:	6378      	str	r0, [r7, #52]	; 0x34
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(args, cm->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <CM_VerifyBuffer_ex+0x134>
 800846a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800846c:	f010 fbba 	bl	8018be4 <wolfSSL_Free>
    }
#else
    (void)err_val;
#endif

    FreeDecodedCert(cert);
 8008470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008472:	f006 fe5f 	bl	800f134 <FreeDecodedCert>
    FreeDer(&der);
 8008476:	f107 0318 	add.w	r3, r7, #24
 800847a:	4618      	mov	r0, r3
 800847c:	f00a ff98 	bl	80133b0 <FreeDer>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(cert, cm->heap, DYNAMIC_TYPE_DCERT);
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	61fb      	str	r3, [r7, #28]
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <CM_VerifyBuffer_ex+0x154>
 800848a:	69f8      	ldr	r0, [r7, #28]
 800848c:	f010 fbaa 	bl	8018be4 <wolfSSL_Free>
#endif

    return ret == 0 ? WOLFSSL_SUCCESS : ret;
 8008490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <CM_VerifyBuffer_ex+0x15e>
 8008496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008498:	e000      	b.n	800849c <CM_VerifyBuffer_ex+0x160>
 800849a:	2301      	movs	r3, #1
}
 800849c:	4618      	mov	r0, r3
 800849e:	3738      	adds	r7, #56	; 0x38
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <wolfSSL_CertManagerVerifyBuffer>:

/* Verify the certificate, WOLFSSL_SUCCESS for ok, < 0 for error */
int wolfSSL_CertManagerVerifyBuffer(WOLFSSL_CERT_MANAGER* cm, const byte* buff,
                                    long sz, int format)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
    return CM_VerifyBuffer_ex(cm, buff, sz, format, 0);
 80084b2:	2300      	movs	r3, #0
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff ff3d 	bl	800833c <CM_VerifyBuffer_ex>
 80084c2:	4603      	mov	r3, r0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <d2iGenericKey>:

#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_WPAS_SMALL)

static WOLFSSL_EVP_PKEY* d2iGenericKey(WOLFSSL_EVP_PKEY** out,
    const unsigned char** in, long inSz, int priv)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b090      	sub	sp, #64	; 0x40
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]

    WOLFSSL_EVP_PKEY* pkey = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    const unsigned char* mem;
    long memSz = inSz;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	633b      	str	r3, [r7, #48]	; 0x30

    WOLFSSL_ENTER("d2iGenericKey");

    if (in == NULL || *in == NULL || inSz < 0) {
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d006      	beq.n	80084f6 <d2iGenericKey+0x2a>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <d2iGenericKey+0x2a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da01      	bge.n	80084fa <d2iGenericKey+0x2e>
        WOLFSSL_MSG("Bad argument");
        return NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e13e      	b.n	8008778 <d2iGenericKey+0x2ac>
    }
    mem = *in;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if !defined(NO_RSA)
    {
        word32 keyIdx = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	61bb      	str	r3, [r7, #24]
        int isRsaKey;
    #ifdef WOLFSSL_SMALL_STACK
        RsaKey *rsa = (RsaKey*)XMALLOC(sizeof(RsaKey), NULL, DYNAMIC_TYPE_RSA);
 8008504:	f241 107c 	movw	r0, #4476	; 0x117c
 8008508:	f010 fb50 	bl	8018bac <wolfSSL_Malloc>
 800850c:	62b8      	str	r0, [r7, #40]	; 0x28
        if (rsa == NULL)
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <d2iGenericKey+0x4c>
            return NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	e12f      	b.n	8008778 <d2iGenericKey+0x2ac>
    #else
        RsaKey rsa[1];
    #endif
        XMEMSET(rsa, 0, sizeof(RsaKey));
 8008518:	f241 127c 	movw	r2, #4476	; 0x117c
 800851c:	2100      	movs	r1, #0
 800851e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008520:	f018 ff08 	bl	8021334 <memset>

        /* test if RSA key */
        if (priv)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d015      	beq.n	8008556 <d2iGenericKey+0x8a>
            isRsaKey = wc_InitRsaKey(rsa, NULL) == 0 &&
 800852a:	2100      	movs	r1, #0
 800852c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800852e:	f011 fd6a 	bl	801a006 <wc_InitRsaKey>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10b      	bne.n	8008550 <d2iGenericKey+0x84>
                wc_RsaPrivateKeyDecode(mem, &keyIdx, rsa, (word32)memSz) == 0;
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f107 0118 	add.w	r1, r7, #24
 800853e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008542:	f006 fa41 	bl	800e9c8 <wc_RsaPrivateKeyDecode>
 8008546:	4603      	mov	r3, r0
            isRsaKey = wc_InitRsaKey(rsa, NULL) == 0 &&
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <d2iGenericKey+0x84>
 800854c:	2301      	movs	r3, #1
 800854e:	e000      	b.n	8008552 <d2iGenericKey+0x86>
 8008550:	2300      	movs	r3, #0
 8008552:	63bb      	str	r3, [r7, #56]	; 0x38
 8008554:	e014      	b.n	8008580 <d2iGenericKey+0xb4>
        else
            isRsaKey = wc_InitRsaKey(rsa, NULL) == 0 &&
 8008556:	2100      	movs	r1, #0
 8008558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855a:	f011 fd54 	bl	801a006 <wc_InitRsaKey>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <d2iGenericKey+0xb0>
                wc_RsaPublicKeyDecode(mem, &keyIdx, rsa, (word32)memSz) == 0;
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	f107 0118 	add.w	r1, r7, #24
 800856a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800856c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800856e:	f006 fca8 	bl	800eec2 <wc_RsaPublicKeyDecode>
 8008572:	4603      	mov	r3, r0
            isRsaKey = wc_InitRsaKey(rsa, NULL) == 0 &&
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <d2iGenericKey+0xb0>
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <d2iGenericKey+0xb2>
 800857c:	2300      	movs	r3, #0
 800857e:	63bb      	str	r3, [r7, #56]	; 0x38
        wc_FreeRsaKey(rsa);
 8008580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008582:	f011 fd50 	bl	801a026 <wc_FreeRsaKey>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(rsa, NULL, DYNAMIC_TYPE_RSA);
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <d2iGenericKey+0xca>
 8008590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008592:	f010 fb27 	bl	8018be4 <wolfSSL_Free>
    #endif

        if (isRsaKey) {
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d049      	beq.n	8008630 <d2iGenericKey+0x164>
            pkey = wolfSSL_EVP_PKEY_new();
 800859c:	f7fd fa40 	bl	8005a20 <wolfSSL_EVP_PKEY_new>
 80085a0:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (pkey != NULL) {
 80085a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d043      	beq.n	8008630 <d2iGenericKey+0x164>
                pkey->pkey_sz = keyIdx;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	461a      	mov	r2, r3
 80085ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ae:	60da      	str	r2, [r3, #12]
                pkey->pkey.ptr = (char*)XMALLOC(memSz, NULL,
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	4618      	mov	r0, r3
 80085b4:	f010 fafa 	bl	8018bac <wolfSSL_Malloc>
 80085b8:	4602      	mov	r2, r0
 80085ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085bc:	615a      	str	r2, [r3, #20]
                        priv ? DYNAMIC_TYPE_PRIVATE_KEY :
                               DYNAMIC_TYPE_PUBLIC_KEY);
                if (pkey->pkey.ptr == NULL) {
 80085be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <d2iGenericKey+0x104>
                    wolfSSL_EVP_PKEY_free(pkey);
 80085c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085c8:	f7fd fa61 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	e0d3      	b.n	8008778 <d2iGenericKey+0x2ac>
                }
                XMEMCPY(pkey->pkey.ptr, mem, keyIdx);
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085d8:	4618      	mov	r0, r3
 80085da:	f018 fe83 	bl	80212e4 <memcpy>
                pkey->type = EVP_PKEY_RSA;
 80085de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e0:	2210      	movs	r2, #16
 80085e2:	605a      	str	r2, [r3, #4]
                if (out != NULL) {
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <d2iGenericKey+0x124>
                    *out = pkey;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085ee:	601a      	str	r2, [r3, #0]
                }

                pkey->ownRsa = 1;
 80085f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085f2:	f892 3056 	ldrb.w	r3, [r2, #86]	; 0x56
 80085f6:	f043 0308 	orr.w	r3, r3, #8
 80085fa:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
                pkey->rsa = wolfssl_rsa_d2i(NULL, mem, inSz,
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <d2iGenericKey+0x13c>
 8008604:	2301      	movs	r3, #1
 8008606:	e000      	b.n	800860a <d2iGenericKey+0x13e>
 8008608:	2302      	movs	r3, #2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800860e:	2000      	movs	r0, #0
 8008610:	f7fd fd16 	bl	8006040 <wolfssl_rsa_d2i>
 8008614:	4602      	mov	r2, r0
 8008616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008618:	619a      	str	r2, [r3, #24]
                    priv ? WOLFSSL_RSA_LOAD_PRIVATE : WOLFSSL_RSA_LOAD_PUBLIC);
                if (pkey->rsa == NULL) {
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <d2iGenericKey+0x160>
                    wolfSSL_EVP_PKEY_free(pkey);
 8008622:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008624:	f7fd fa33 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	e0a5      	b.n	8008778 <d2iGenericKey+0x2ac>
                }

                return pkey;
 800862c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862e:	e0a3      	b.n	8008778 <d2iGenericKey+0x2ac>
    }
    #endif /* NO_RSA */

    #if defined(HAVE_ECC) && defined(OPENSSL_EXTRA)
    {
        word32  keyIdx = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
        int     isEccKey;
    #ifdef WOLFSSL_SMALL_STACK
        ecc_key *ecc = (ecc_key*)XMALLOC(sizeof(ecc_key), NULL, DYNAMIC_TYPE_ECC);
 8008634:	f44f 7051 	mov.w	r0, #836	; 0x344
 8008638:	f010 fab8 	bl	8018bac <wolfSSL_Malloc>
 800863c:	6238      	str	r0, [r7, #32]
        if (ecc == NULL)
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <d2iGenericKey+0x17c>
            return NULL;
 8008644:	2300      	movs	r3, #0
 8008646:	e097      	b.n	8008778 <d2iGenericKey+0x2ac>
    #else
        ecc_key ecc[1];
    #endif
        XMEMSET(ecc, 0, sizeof(ecc_key));
 8008648:	f44f 7251 	mov.w	r2, #836	; 0x344
 800864c:	2100      	movs	r1, #0
 800864e:	6a38      	ldr	r0, [r7, #32]
 8008650:	f018 fe70 	bl	8021334 <memset>

        if (priv)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d014      	beq.n	8008684 <d2iGenericKey+0x1b8>
            isEccKey = wc_ecc_init(ecc) == 0 &&
 800865a:	6a38      	ldr	r0, [r7, #32]
 800865c:	f00e fdc1 	bl	80171e2 <wc_ecc_init>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10b      	bne.n	800867e <d2iGenericKey+0x1b2>
                wc_EccPrivateKeyDecode(mem, &keyIdx, ecc, (word32)memSz) == 0;
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f107 0114 	add.w	r1, r7, #20
 800866c:	6a3a      	ldr	r2, [r7, #32]
 800866e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008670:	f00b fd37 	bl	80140e2 <wc_EccPrivateKeyDecode>
 8008674:	4603      	mov	r3, r0
            isEccKey = wc_ecc_init(ecc) == 0 &&
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <d2iGenericKey+0x1b2>
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <d2iGenericKey+0x1b4>
 800867e:	2300      	movs	r3, #0
 8008680:	637b      	str	r3, [r7, #52]	; 0x34
 8008682:	e013      	b.n	80086ac <d2iGenericKey+0x1e0>
        else
            isEccKey = wc_ecc_init(ecc) == 0 &&
 8008684:	6a38      	ldr	r0, [r7, #32]
 8008686:	f00e fdac 	bl	80171e2 <wc_ecc_init>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10b      	bne.n	80086a8 <d2iGenericKey+0x1dc>
                wc_EccPublicKeyDecode(mem, &keyIdx, ecc, (word32)memSz) == 0;
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	f107 0114 	add.w	r1, r7, #20
 8008696:	6a3a      	ldr	r2, [r7, #32]
 8008698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800869a:	f00b fe7c 	bl	8014396 <wc_EccPublicKeyDecode>
 800869e:	4603      	mov	r3, r0
            isEccKey = wc_ecc_init(ecc) == 0 &&
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <d2iGenericKey+0x1dc>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <d2iGenericKey+0x1de>
 80086a8:	2300      	movs	r3, #0
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
        wc_ecc_free(ecc);
 80086ac:	6a38      	ldr	r0, [r7, #32]
 80086ae:	f00e fda7 	bl	8017200 <wc_ecc_free>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(ecc, NULL, DYNAMIC_TYPE_ECC);
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <d2iGenericKey+0x1f6>
 80086bc:	69f8      	ldr	r0, [r7, #28]
 80086be:	f010 fa91 	bl	8018be4 <wolfSSL_Free>
    #endif

        if (isEccKey) {
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d056      	beq.n	8008776 <d2iGenericKey+0x2aa>
            pkey = wolfSSL_EVP_PKEY_new();
 80086c8:	f7fd f9aa 	bl	8005a20 <wolfSSL_EVP_PKEY_new>
 80086cc:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (pkey != NULL) {
 80086ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d050      	beq.n	8008776 <d2iGenericKey+0x2aa>
                pkey->pkey_sz = keyIdx;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086da:	60da      	str	r2, [r3, #12]
                pkey->pkey.ptr = (char*)XMALLOC(keyIdx, NULL,
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	4618      	mov	r0, r3
 80086e0:	f010 fa64 	bl	8018bac <wolfSSL_Malloc>
 80086e4:	4602      	mov	r2, r0
 80086e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e8:	615a      	str	r2, [r3, #20]
                        priv ? DYNAMIC_TYPE_PRIVATE_KEY :
                               DYNAMIC_TYPE_PUBLIC_KEY);
                if (pkey->pkey.ptr == NULL) {
 80086ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d104      	bne.n	80086fc <d2iGenericKey+0x230>
                    wolfSSL_EVP_PKEY_free(pkey);
 80086f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086f4:	f7fd f9cb 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	e03d      	b.n	8008778 <d2iGenericKey+0x2ac>
                }
                XMEMCPY(pkey->pkey.ptr, mem, keyIdx);
 80086fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008704:	4618      	mov	r0, r3
 8008706:	f018 fded 	bl	80212e4 <memcpy>
                pkey->type = EVP_PKEY_EC;
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	2212      	movs	r2, #18
 800870e:	605a      	str	r2, [r3, #4]
                if (out != NULL) {
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <d2iGenericKey+0x250>
                    *out = pkey;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800871a:	601a      	str	r2, [r3, #0]
                }

                pkey->ownEcc = 1;
 800871c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800871e:	f892 3056 	ldrb.w	r3, [r2, #86]	; 0x56
 8008722:	f043 0302 	orr.w	r3, r3, #2
 8008726:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
                pkey->ecc = wolfSSL_EC_KEY_new();
 800872a:	f7fd feee 	bl	800650a <wolfSSL_EC_KEY_new>
 800872e:	4602      	mov	r2, r0
 8008730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008732:	61da      	str	r2, [r3, #28]
                if (pkey->ecc == NULL) {
 8008734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d104      	bne.n	8008746 <d2iGenericKey+0x27a>
                    wolfSSL_EVP_PKEY_free(pkey);
 800873c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800873e:	f7fd f9a6 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	e018      	b.n	8008778 <d2iGenericKey+0x2ac>
                }

                if (wolfSSL_EC_KEY_LoadDer_ex(pkey->ecc,
 8008746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008748:	69d8      	ldr	r0, [r3, #28]
                        (const unsigned char*)pkey->pkey.ptr,
 800874a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874c:	6959      	ldr	r1, [r3, #20]
                if (wolfSSL_EC_KEY_LoadDer_ex(pkey->ecc,
 800874e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <d2iGenericKey+0x290>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <d2iGenericKey+0x292>
 800875c:	2302      	movs	r3, #2
 800875e:	f7fe f8b8 	bl	80068d2 <wolfSSL_EC_KEY_LoadDer_ex>
 8008762:	4603      	mov	r3, r0
 8008764:	2b01      	cmp	r3, #1
 8008766:	d004      	beq.n	8008772 <d2iGenericKey+0x2a6>
                        pkey->pkey_sz, priv ? WOLFSSL_RSA_LOAD_PRIVATE
                                            : WOLFSSL_RSA_LOAD_PUBLIC) != 1) {
                    wolfSSL_EVP_PKEY_free(pkey);
 8008768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800876a:	f7fd f990 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	e002      	b.n	8008778 <d2iGenericKey+0x2ac>
                }

                return pkey;
 8008772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008774:	e000      	b.n	8008778 <d2iGenericKey+0x2ac>

    if (pkey == NULL) {
        WOLFSSL_MSG("wolfSSL_d2i_PUBKEY couldn't determine key type");
    }

    return pkey;
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 8008778:	4618      	mov	r0, r3
 800877a:	3740      	adds	r7, #64	; 0x40
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <wolfSSL_d2i_PUBKEY>:
 * returns a pointer to a new WOLFSSL_EVP_PKEY structure on success and NULL
 *         on fail
 */
WOLFSSL_EVP_PKEY* wolfSSL_d2i_PUBKEY(WOLFSSL_EVP_PKEY** out,
                                     const unsigned char** in, long inSz)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_d2i_PUBKEY");
    return d2iGenericKey(out, in, inSz, 0);
 800878c:	2300      	movs	r3, #0
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff fe9a 	bl	80084cc <d2iGenericKey>
 8008798:	4603      	mov	r3, r0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <wolfSSL_Cleanup>:

#endif /* NO_HANDSHAKE_DONE_CB */

WOLFSSL_ABI
int wolfSSL_Cleanup(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
    int ret = WOLFSSL_SUCCESS; /* Only the first error will be returned */
 80087aa:	2301      	movs	r3, #1
 80087ac:	607b      	str	r3, [r7, #4]
    int release = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	603b      	str	r3, [r7, #0]
    int i;
#endif

    WOLFSSL_ENTER("wolfSSL_Cleanup");

    if (initRefCount == 0)
 80087b2:	4b3e      	ldr	r3, [pc, #248]	; (80088ac <wolfSSL_Cleanup+0x108>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <wolfSSL_Cleanup+0x1a>
        return ret;  /* possibly no init yet, but not failure either way */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	e072      	b.n	80088a4 <wolfSSL_Cleanup+0x100>

    if ((count_mutex_valid == 1) && (wc_LockMutex(&count_mutex) != 0)) {
 80087be:	4b3c      	ldr	r3, [pc, #240]	; (80088b0 <wolfSSL_Cleanup+0x10c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d108      	bne.n	80087d8 <wolfSSL_Cleanup+0x34>
 80087c6:	483b      	ldr	r0, [pc, #236]	; (80088b4 <wolfSSL_Cleanup+0x110>)
 80087c8:	f018 fbaa 	bl	8020f20 <wc_LockMutex>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <wolfSSL_Cleanup+0x34>
        WOLFSSL_MSG("Bad Lock Mutex count");
        ret = BAD_MUTEX_E;
 80087d2:	f06f 0369 	mvn.w	r3, #105	; 0x69
 80087d6:	607b      	str	r3, [r7, #4]
    }

    release = initRefCount-- == 1;
 80087d8:	4b34      	ldr	r3, [pc, #208]	; (80088ac <wolfSSL_Cleanup+0x108>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	1e5a      	subs	r2, r3, #1
 80087de:	4933      	ldr	r1, [pc, #204]	; (80088ac <wolfSSL_Cleanup+0x108>)
 80087e0:	600a      	str	r2, [r1, #0]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	bf0c      	ite	eq
 80087e6:	2301      	moveq	r3, #1
 80087e8:	2300      	movne	r3, #0
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	603b      	str	r3, [r7, #0]
    if (initRefCount < 0)
 80087ee:	4b2f      	ldr	r3, [pc, #188]	; (80088ac <wolfSSL_Cleanup+0x108>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da02      	bge.n	80087fc <wolfSSL_Cleanup+0x58>
        initRefCount = 0;
 80087f6:	4b2d      	ldr	r3, [pc, #180]	; (80088ac <wolfSSL_Cleanup+0x108>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]

    if (count_mutex_valid == 1) {
 80087fc:	4b2c      	ldr	r3, [pc, #176]	; (80088b0 <wolfSSL_Cleanup+0x10c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d102      	bne.n	800880a <wolfSSL_Cleanup+0x66>
        wc_UnLockMutex(&count_mutex);
 8008804:	482b      	ldr	r0, [pc, #172]	; (80088b4 <wolfSSL_Cleanup+0x110>)
 8008806:	f018 fb96 	bl	8020f36 <wc_UnLockMutex>
    }

    if (!release)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <wolfSSL_Cleanup+0x70>
        return ret;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	e047      	b.n	80088a4 <wolfSSL_Cleanup+0x100>

#ifdef OPENSSL_EXTRA
    if (bn_one) {
 8008814:	4b28      	ldr	r3, [pc, #160]	; (80088b8 <wolfSSL_Cleanup+0x114>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <wolfSSL_Cleanup+0x88>
        wolfSSL_BN_free(bn_one);
 800881c:	4b26      	ldr	r3, [pc, #152]	; (80088b8 <wolfSSL_Cleanup+0x114>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fcfa 	bl	800a21a <wolfSSL_BN_free>
        bn_one = NULL;
 8008826:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <wolfSSL_Cleanup+0x114>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
    }
    clisession_mutex_valid = 0;
    #endif
#endif /* !NO_SESSION_CACHE */

    if ((count_mutex_valid == 1) && (wc_FreeMutex(&count_mutex) != 0)) {
 800882c:	4b20      	ldr	r3, [pc, #128]	; (80088b0 <wolfSSL_Cleanup+0x10c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d10b      	bne.n	800884c <wolfSSL_Cleanup+0xa8>
 8008834:	481f      	ldr	r0, [pc, #124]	; (80088b4 <wolfSSL_Cleanup+0x110>)
 8008836:	f018 fb68 	bl	8020f0a <wc_FreeMutex>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <wolfSSL_Cleanup+0xa8>
        if (ret == WOLFSSL_SUCCESS)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d102      	bne.n	800884c <wolfSSL_Cleanup+0xa8>
            ret = BAD_MUTEX_E;
 8008846:	f06f 0369 	mvn.w	r3, #105	; 0x69
 800884a:	607b      	str	r3, [r7, #4]
    }
    count_mutex_valid = 0;
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <wolfSSL_Cleanup+0x10c>)
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]

#ifdef OPENSSL_EXTRA
    wolfSSL_RAND_Cleanup();
 8008852:	f002 fd63 	bl	800b31c <wolfSSL_RAND_Cleanup>
#endif

    if (wolfCrypt_Cleanup() != 0) {
 8008856:	f018 fae1 	bl	8020e1c <wolfCrypt_Cleanup>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <wolfSSL_Cleanup+0xc8>
        WOLFSSL_MSG("Error with wolfCrypt_Cleanup call");
        if (ret == WOLFSSL_SUCCESS)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d102      	bne.n	800886c <wolfSSL_Cleanup+0xc8>
            ret = WC_CLEANUP_E;
 8008866:	f06f 03f0 	mvn.w	r3, #240	; 0xf0
 800886a:	607b      	str	r3, [r7, #4]
            ret = WC_CLEANUP_E;
    }
#endif

#ifdef HAVE_GLOBAL_RNG
    if ((globalRNGMutex_valid == 1) && (wc_FreeMutex(&globalRNGMutex) != 0)) {
 800886c:	4b13      	ldr	r3, [pc, #76]	; (80088bc <wolfSSL_Cleanup+0x118>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d10b      	bne.n	800888c <wolfSSL_Cleanup+0xe8>
 8008874:	4812      	ldr	r0, [pc, #72]	; (80088c0 <wolfSSL_Cleanup+0x11c>)
 8008876:	f018 fb48 	bl	8020f0a <wc_FreeMutex>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <wolfSSL_Cleanup+0xe8>
        if (ret == WOLFSSL_SUCCESS)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d102      	bne.n	800888c <wolfSSL_Cleanup+0xe8>
            ret = BAD_MUTEX_E;
 8008886:	f06f 0369 	mvn.w	r3, #105	; 0x69
 800888a:	607b      	str	r3, [r7, #4]
    }
    globalRNGMutex_valid = 0;
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <wolfSSL_Cleanup+0x118>)
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]

    #if defined(OPENSSL_EXTRA) && defined(HAVE_HASHDRBG)
    wolfSSL_FIPS_drbg_free(gDrbgDefCtx);
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <wolfSSL_Cleanup+0x120>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f002 fe06 	bl	800b4a8 <wolfSSL_FIPS_drbg_free>
    gDrbgDefCtx = NULL;
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <wolfSSL_Cleanup+0x120>)
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]
    #endif
#endif

    return ret;
 80088a2:	687b      	ldr	r3, [r7, #4]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2000034c 	.word	0x2000034c
 80088b0:	20000354 	.word	0x20000354
 80088b4:	20000350 	.word	0x20000350
 80088b8:	2000033c 	.word	0x2000033c
 80088bc:	20000370 	.word	0x20000370
 80088c0:	2000036c 	.word	0x2000036c
 80088c4:	20000374 	.word	0x20000374

080088c8 <ClientSessionToSession>:
    #endif /* SESSION_STATS */

#else  /* NO_SESSION_CACHE */

WOLFSSL_SESSION* ClientSessionToSession(const WOLFSSL_SESSION* session)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
    return (WOLFSSL_SESSION*)session;
 80088d0:	687b      	ldr	r3, [r7, #4]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <wolfSSL_CTX_load_verify_buffer_ex>:

    int wolfSSL_CTX_load_verify_buffer_ex(WOLFSSL_CTX* ctx,
                                         const unsigned char* in,
                                         long sz, int format, int userChain,
                                         word32 flags)
    {
 80088de:	b580      	push	{r7, lr}
 80088e0:	b08c      	sub	sp, #48	; 0x30
 80088e2:	af06      	add	r7, sp, #24
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
 80088ea:	603b      	str	r3, [r7, #0]
        int verify;
        int ret = WOLFSSL_FAILURE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]

        WOLFSSL_ENTER("wolfSSL_CTX_load_verify_buffer_ex");

        verify = GET_VERIFY_SETTING_CTX(ctx);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <wolfSSL_CTX_load_verify_buffer_ex+0x28>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <wolfSSL_CTX_load_verify_buffer_ex+0x2c>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <wolfSSL_CTX_load_verify_buffer_ex+0x2e>
 800890a:	2300      	movs	r3, #0
 800890c:	617b      	str	r3, [r7, #20]
        if (flags & WOLFSSL_LOAD_FLAG_DATE_ERR_OKAY)
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <wolfSSL_CTX_load_verify_buffer_ex+0x3e>
            verify = VERIFY_SKIP_DATE;
 8008918:	2305      	movs	r3, #5
 800891a:	617b      	str	r3, [r7, #20]

        if (format == WOLFSSL_FILETYPE_PEM)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d10d      	bne.n	800893e <wolfSSL_CTX_load_verify_buffer_ex+0x60>
            ret = ProcessChainBuffer(ctx, in, sz, format, CA_TYPE, NULL,
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	9302      	str	r3, [sp, #8]
 8008926:	2300      	movs	r3, #0
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2305      	movs	r3, #5
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7ff fc75 	bl	8008224 <ProcessChainBuffer>
 800893a:	6138      	str	r0, [r7, #16]
 800893c:	e010      	b.n	8008960 <wolfSSL_CTX_load_verify_buffer_ex+0x82>
                                      verify);
        else
            ret = ProcessBuffer(ctx, in, sz, format, CA_TYPE, NULL, NULL,
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	9303      	str	r3, [sp, #12]
 8008946:	2300      	movs	r3, #0
 8008948:	9302      	str	r3, [sp, #8]
 800894a:	2300      	movs	r3, #0
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	2305      	movs	r3, #5
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7fe ff11 	bl	8007780 <ProcessBuffer>
 800895e:	6138      	str	r0, [r7, #16]
        if (ret == WOLFSSL_SUCCESS)
            ret = wolfSSL_CTX_trust_peer_buffer(ctx, in, sz, format);
#endif

        WOLFSSL_LEAVE("wolfSSL_CTX_load_verify_buffer_ex", ret);
        return ret;
 8008960:	693b      	ldr	r3, [r7, #16]
    }
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <wolfSSL_CTX_load_verify_buffer>:

    /* wolfSSL extension allows DER files to be loaded from buffers as well */
    int wolfSSL_CTX_load_verify_buffer(WOLFSSL_CTX* ctx,
                                       const unsigned char* in,
                                       long sz, int format)
    {
 800896a:	b580      	push	{r7, lr}
 800896c:	b086      	sub	sp, #24
 800896e:	af02      	add	r7, sp, #8
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
 8008976:	603b      	str	r3, [r7, #0]
        return wolfSSL_CTX_load_verify_buffer_ex(ctx, in, sz, format, 0,
 8008978:	2300      	movs	r3, #0
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	2300      	movs	r3, #0
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff ffa9 	bl	80088de <wolfSSL_CTX_load_verify_buffer_ex>
 800898c:	4603      	mov	r3, r0
            WOLFSSL_LOAD_VERIFY_DEFAULT_FLAGS);
    }
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <wolfSSL_UnloadCertsKeys>:


    /* unload any certs or keys that SSL owns, leave CTX as is
       WOLFSSL_SUCCESS on ok */
    int wolfSSL_UnloadCertsKeys(WOLFSSL* ssl)
    {
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
        if (ssl == NULL) {
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d102      	bne.n	80089aa <wolfSSL_UnloadCertsKeys+0x14>
            WOLFSSL_MSG("Null function arg");
            return BAD_FUNC_ARG;
 80089a4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80089a8:	e04f      	b.n	8008a4a <wolfSSL_UnloadCertsKeys+0xb4>
        }

        if (ssl->buffers.weOwnCert && !ssl->keepCert) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01f      	beq.n	80089f4 <wolfSSL_UnloadCertsKeys+0x5e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ba:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d118      	bne.n	80089f4 <wolfSSL_UnloadCertsKeys+0x5e>
            WOLFSSL_MSG("Unloading cert");
            FreeDer(&ssl->buffers.certificate);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80089c8:	4618      	mov	r0, r3
 80089ca:	f00a fcf1 	bl	80133b0 <FreeDer>
            #ifdef KEEP_OUR_CERT
            wolfSSL_X509_free(ssl->ourCert);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 fcd4 	bl	800a386 <wolfSSL_X509_free>
            ssl->ourCert = NULL;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e4:	461a      	mov	r2, r3
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            #endif
            ssl->buffers.weOwnCert = 0;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        if (ssl->buffers.weOwnCertChain) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <wolfSSL_UnloadCertsKeys+0x7c>
            WOLFSSL_MSG("Unloading cert chain");
            FreeDer(&ssl->buffers.certChain);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8008a04:	4618      	mov	r0, r3
 8008a06:	f00a fcd3 	bl	80133b0 <FreeDer>
            ssl->buffers.weOwnCertChain = 0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
        }

        if (ssl->buffers.weOwnKey) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d015      	beq.n	8008a48 <wolfSSL_UnloadCertsKeys+0xb2>
            WOLFSSL_MSG("Unloading key");
            ForceZero(ssl->buffers.key->buffer, ssl->buffers.key->length);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fc ff02 	bl	8005838 <ForceZero>
            FreeDer(&ssl->buffers.key);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f00a fcb8 	bl	80133b0 <FreeDer>
            ssl->buffers.weOwnKey = 0;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
        }

        return WOLFSSL_SUCCESS;
 8008a48:	2301      	movs	r3, #1
    }
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <wolfSSL_ERR_sys_func>:
    static const char WOLFSSL_SYS_SETSOCKOPT_T[]    = "setsockopt";
    static const char WOLFSSL_SYS_SOCKET_T[]        = "socket";

    /* switch with int mapped to function name for compatibility */
    static const char* wolfSSL_ERR_sys_func(int fun)
    {
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
        switch (fun) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b0f      	cmp	r3, #15
 8008a60:	d842      	bhi.n	8008ae8 <wolfSSL_ERR_sys_func+0x94>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <wolfSSL_ERR_sys_func+0x14>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008aa9 	.word	0x08008aa9
 8008a6c:	08008aad 	.word	0x08008aad
 8008a70:	08008ab1 	.word	0x08008ab1
 8008a74:	08008ab5 	.word	0x08008ab5
 8008a78:	08008ab9 	.word	0x08008ab9
 8008a7c:	08008abd 	.word	0x08008abd
 8008a80:	08008ac1 	.word	0x08008ac1
 8008a84:	08008ac5 	.word	0x08008ac5
 8008a88:	08008ac9 	.word	0x08008ac9
 8008a8c:	08008acd 	.word	0x08008acd
 8008a90:	08008ad1 	.word	0x08008ad1
 8008a94:	08008ad5 	.word	0x08008ad5
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008add 	.word	0x08008add
 8008aa0:	08008ae1 	.word	0x08008ae1
 8008aa4:	08008ae5 	.word	0x08008ae5
            case WOLFSSL_SYS_ACCEPT:      return WOLFSSL_SYS_ACCEPT_T;
 8008aa8:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <wolfSSL_ERR_sys_func+0xa4>)
 8008aaa:	e01e      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_BIND:        return WOLFSSL_SYS_BIND_T;
 8008aac:	4b13      	ldr	r3, [pc, #76]	; (8008afc <wolfSSL_ERR_sys_func+0xa8>)
 8008aae:	e01c      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_CONNECT:     return WOLFSSL_SYS_CONNECT_T;
 8008ab0:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <wolfSSL_ERR_sys_func+0xac>)
 8008ab2:	e01a      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_FOPEN:       return WOLFSSL_SYS_FOPEN_T;
 8008ab4:	4b13      	ldr	r3, [pc, #76]	; (8008b04 <wolfSSL_ERR_sys_func+0xb0>)
 8008ab6:	e018      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_FREAD:       return WOLFSSL_SYS_FREAD_T;
 8008ab8:	4b13      	ldr	r3, [pc, #76]	; (8008b08 <wolfSSL_ERR_sys_func+0xb4>)
 8008aba:	e016      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_GETADDRINFO: return WOLFSSL_SYS_GETADDRINFO_T;
 8008abc:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <wolfSSL_ERR_sys_func+0xb8>)
 8008abe:	e014      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_GETSOCKOPT:  return WOLFSSL_SYS_GETSOCKOPT_T;
 8008ac0:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <wolfSSL_ERR_sys_func+0xbc>)
 8008ac2:	e012      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_GETSOCKNAME: return WOLFSSL_SYS_GETSOCKNAME_T;
 8008ac4:	4b13      	ldr	r3, [pc, #76]	; (8008b14 <wolfSSL_ERR_sys_func+0xc0>)
 8008ac6:	e010      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_GETHOSTBYNAME: return WOLFSSL_SYS_GETHOSTBYNAME_T;
 8008ac8:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <wolfSSL_ERR_sys_func+0xc4>)
 8008aca:	e00e      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_GETNAMEINFO: return WOLFSSL_SYS_GETNAMEINFO_T;
 8008acc:	4b13      	ldr	r3, [pc, #76]	; (8008b1c <wolfSSL_ERR_sys_func+0xc8>)
 8008ace:	e00c      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_GETSERVBYNAME: return WOLFSSL_SYS_GETSERVBYNAME_T;
 8008ad0:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <wolfSSL_ERR_sys_func+0xcc>)
 8008ad2:	e00a      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_IOCTLSOCKET: return WOLFSSL_SYS_IOCTLSOCKET_T;
 8008ad4:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <wolfSSL_ERR_sys_func+0xd0>)
 8008ad6:	e008      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_LISTEN:      return WOLFSSL_SYS_LISTEN_T;
 8008ad8:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <wolfSSL_ERR_sys_func+0xd4>)
 8008ada:	e006      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_OPENDIR:     return WOLFSSL_SYS_OPENDIR_T;
 8008adc:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <wolfSSL_ERR_sys_func+0xd8>)
 8008ade:	e004      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_SETSOCKOPT:  return WOLFSSL_SYS_SETSOCKOPT_T;
 8008ae0:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <wolfSSL_ERR_sys_func+0xdc>)
 8008ae2:	e002      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            case WOLFSSL_SYS_SOCKET:      return WOLFSSL_SYS_SOCKET_T;
 8008ae4:	4b13      	ldr	r3, [pc, #76]	; (8008b34 <wolfSSL_ERR_sys_func+0xe0>)
 8008ae6:	e000      	b.n	8008aea <wolfSSL_ERR_sys_func+0x96>
            default:
                return "NULL";
 8008ae8:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <wolfSSL_ERR_sys_func+0xe4>)
        }
    }
 8008aea:	4618      	mov	r0, r3
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	08029528 	.word	0x08029528
 8008afc:	08029530 	.word	0x08029530
 8008b00:	08029538 	.word	0x08029538
 8008b04:	08029540 	.word	0x08029540
 8008b08:	08029548 	.word	0x08029548
 8008b0c:	08029550 	.word	0x08029550
 8008b10:	0802955c 	.word	0x0802955c
 8008b14:	08029568 	.word	0x08029568
 8008b18:	08029574 	.word	0x08029574
 8008b1c:	08029584 	.word	0x08029584
 8008b20:	08029590 	.word	0x08029590
 8008b24:	080295a0 	.word	0x080295a0
 8008b28:	080295ac 	.word	0x080295ac
 8008b2c:	080295b4 	.word	0x080295b4
 8008b30:	080295bc 	.word	0x080295bc
 8008b34:	080295c8 	.word	0x080295c8
 8008b38:	08023838 	.word	0x08023838

08008b3c <wolfSSL_ERR_put_error>:
#endif /* DEBUG_WOLFSSL */


    void wolfSSL_ERR_put_error(int lib, int fun, int err, const char* file,
            int line)
    {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
        (void)fun;
        (void)file;
        (void)line;
        WOLFSSL_ERROR(err);
        #else
        WOLFSSL_ERROR_LINE(err, wolfSSL_ERR_sys_func(fun), (unsigned int)line,
 8008b4a:	68b8      	ldr	r0, [r7, #8]
 8008b4c:	f7ff ff82 	bl	8008a54 <wolfSSL_ERR_sys_func>
 8008b50:	4601      	mov	r1, r0
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	2300      	movs	r3, #0
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f00f ffd0 	bl	8018b00 <WOLFSSL_ERROR_LINE>
            file, NULL);
        #endif
        (void)lib;
    }
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <wolfSSL_sk_new_node>:
#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_WPAS_SMALL)

/* create a generic wolfSSL stack node
 * returns a new WOLFSSL_STACK structure on success */
WOLFSSL_STACK* wolfSSL_sk_new_node(void* heap)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
    WOLFSSL_STACK* sk;
    WOLFSSL_ENTER("wolfSSL_sk_new_node");

    sk = (WOLFSSL_STACK*)XMALLOC(sizeof(WOLFSSL_STACK), heap,
 8008b70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b74:	f010 f81a 	bl	8018bac <wolfSSL_Malloc>
 8008b78:	60f8      	str	r0, [r7, #12]
                                                          DYNAMIC_TYPE_OPENSSL);
    if (sk != NULL) {
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d009      	beq.n	8008b94 <wolfSSL_sk_new_node+0x2c>
        XMEMSET(sk, 0, sizeof(*sk));
 8008b80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b84:	2100      	movs	r1, #0
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f018 fbd4 	bl	8021334 <memset>
        sk->heap = heap;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    }

    return sk;
 8008b94:	68fb      	ldr	r3, [r7, #12]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <compare_WOLFSSL_CIPHER>:

#if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
static WC_INLINE int compare_WOLFSSL_CIPHER(
    WOLFSSL_CIPHER *a,
    WOLFSSL_CIPHER *b)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
    if ((a->cipherSuite0 == b->cipherSuite0) &&
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d131      	bne.n	8008c18 <compare_WOLFSSL_CIPHER+0x7a>
        (a->cipherSuite == b->cipherSuite) &&
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	785a      	ldrb	r2, [r3, #1]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	785b      	ldrb	r3, [r3, #1]
    if ((a->cipherSuite0 == b->cipherSuite0) &&
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d12b      	bne.n	8008c18 <compare_WOLFSSL_CIPHER+0x7a>
        (a->ssl == b->ssl) &&
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
        (a->cipherSuite == b->cipherSuite) &&
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d125      	bne.n	8008c18 <compare_WOLFSSL_CIPHER+0x7a>
        (XMEMCMP(a->description, b->description, sizeof a->description) == 0) &&
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f103 0008 	add.w	r0, r3, #8
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	22ff      	movs	r2, #255	; 0xff
 8008bd8:	4619      	mov	r1, r3
 8008bda:	f018 fb73 	bl	80212c4 <memcmp>
 8008bde:	4603      	mov	r3, r0
        (a->ssl == b->ssl) &&
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d119      	bne.n	8008c18 <compare_WOLFSSL_CIPHER+0x7a>
        (a->offset == b->offset) &&
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        (XMEMCMP(a->description, b->description, sizeof a->description) == 0) &&
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d111      	bne.n	8008c18 <compare_WOLFSSL_CIPHER+0x7a>
        (a->in_stack == b->in_stack) &&
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
        (a->offset == b->offset) &&
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d109      	bne.n	8008c18 <compare_WOLFSSL_CIPHER+0x7a>
        (a->bits == b->bits))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
        (a->in_stack == b->in_stack) &&
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d101      	bne.n	8008c18 <compare_WOLFSSL_CIPHER+0x7a>
        return 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e001      	b.n	8008c1c <compare_WOLFSSL_CIPHER+0x7e>
    else
        return -1;
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <wolfSSL_sk_push>:
#endif /* OPENSSL_ALL || WOLFSSL_QT */


/* return 1 on success 0 on fail */
int wolfSSL_sk_push(WOLFSSL_STACK* sk, const void *data)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b0c8      	sub	sp, #288	; 0x120
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c32:	6018      	str	r0, [r3, #0]
 8008c34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008c3c:	6019      	str	r1, [r3, #0]
#if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
    WOLFSSL_CIPHER ciph;
#endif
    WOLFSSL_ENTER("wolfSSL_sk_push");

    if (!sk) {
 8008c3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <wolfSSL_sk_push+0x2c>
        return WOLFSSL_FAILURE;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e166      	b.n	8008f1e <wolfSSL_sk_push+0x2fa>
    }

    /* Check if empty data */
    switch (sk->type) {
 8008c50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d14d      	bne.n	8008cfe <wolfSSL_sk_push+0xda>
        case STACK_TYPE_CIPHER:
#if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
            /* check if entire struct is zero */
            XMEMSET(&ciph, 0, sizeof(WOLFSSL_CIPHER));
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f018 fb61 	bl	8021334 <memset>
            if (compare_WOLFSSL_CIPHER(&sk->data.cipher, &ciph) == 0) {
 8008c72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	f107 0208 	add.w	r2, r7, #8
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7ff ff8a 	bl	8008b9e <compare_WOLFSSL_CIPHER>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d16f      	bne.n	8008d70 <wolfSSL_sk_push+0x14c>
                sk->data.cipher = *(WOLFSSL_CIPHER*)data;
 8008c90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008c9e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008ca2:	6812      	ldr	r2, [r2, #0]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008cac:	4618      	mov	r0, r3
 8008cae:	f018 fb19 	bl	80212e4 <memcpy>
                sk->num = 1;
 8008cb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
                if (sk->hash_fn) {
 8008cc0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d014      	beq.n	8008cfa <wolfSSL_sk_push+0xd6>
                    sk->hash = sk->hash_fn(&sk->data.cipher);
 8008cd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cd4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008ce0:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	320c      	adds	r2, #12
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
 8008cec:	4602      	mov	r2, r0
 8008cee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008cf2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	609a      	str	r2, [r3, #8]
                }
                return WOLFSSL_SUCCESS;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e10f      	b.n	8008f1e <wolfSSL_sk_push+0x2fa>
        case STACK_TYPE_X509_OBJ:
        case STACK_TYPE_DIST_POINT:
        case STACK_TYPE_X509_CRL:
        default:
            /* All other types are pointers */
            if (!sk->data.generic) {
 8008cfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d132      	bne.n	8008d74 <wolfSSL_sk_push+0x150>
                sk->data.generic = (void*)data;
 8008d0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008d1c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008d20:	6812      	ldr	r2, [r2, #0]
 8008d22:	60da      	str	r2, [r3, #12]
                sk->num = 1;
 8008d24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
#ifdef OPENSSL_ALL
                if (sk->hash_fn) {
 8008d32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d014      	beq.n	8008d6c <wolfSSL_sk_push+0x148>
                    sk->hash = sk->hash_fn(sk->data.generic);
 8008d42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008d52:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	68d2      	ldr	r2, [r2, #12]
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4798      	blx	r3
 8008d5e:	4602      	mov	r2, r0
 8008d60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	609a      	str	r2, [r3, #8]
                }
#endif
                return WOLFSSL_SUCCESS;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e0d6      	b.n	8008f1e <wolfSSL_sk_push+0x2fa>
            break;
 8008d70:	bf00      	nop
 8008d72:	e000      	b.n	8008d76 <wolfSSL_sk_push+0x152>
            }
            break;
 8008d74:	bf00      	nop
    }

    /* stack already has value(s) create a new node and add more */
    node = wolfSSL_sk_new_node(sk->heap);
 8008d76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff feef 	bl	8008b68 <wolfSSL_sk_new_node>
 8008d8a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
    if (!node) {
 8008d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <wolfSSL_sk_push+0x176>
        WOLFSSL_MSG("Memory error");
        return WOLFSSL_FAILURE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e0c1      	b.n	8008f1e <wolfSSL_sk_push+0x2fa>
    }

    /* push new x509 onto head of stack */
    node->next      = sk->next;
 8008d9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008d9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8008da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008dac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    node->type      = sk->type;
 8008db0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008db4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 8008dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008dc2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    sk->next        = node;
 8008dc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008dca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008dd4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    sk->num        += 1;
 8008dd8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ddc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008dea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	601a      	str	r2, [r3, #0]

#ifdef OPENSSL_ALL
    node->hash_fn = sk->hash_fn;
 8008df2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008df6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008e02:	605a      	str	r2, [r3, #4]
    node->hash = sk->hash;
 8008e04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008e14:	609a      	str	r2, [r3, #8]
    sk->hash = 0;
 8008e16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2200      	movs	r2, #0
 8008e22:	609a      	str	r2, [r3, #8]
#endif
    switch (sk->type) {
 8008e24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d13d      	bne.n	8008eb2 <wolfSSL_sk_push+0x28e>
        case STACK_TYPE_CIPHER:
#if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
            node->data.cipher = sk->data.cipher;
 8008e36:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008e3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f102 000c 	add.w	r0, r2, #12
 8008e48:	330c      	adds	r3, #12
 8008e4a:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008e4e:	4619      	mov	r1, r3
 8008e50:	f018 fa48 	bl	80212e4 <memcpy>
            sk->data.cipher = *(WOLFSSL_CIPHER*)data;
 8008e54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008e62:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008e66:	6812      	ldr	r2, [r2, #0]
 8008e68:	330c      	adds	r3, #12
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008e70:	4618      	mov	r0, r3
 8008e72:	f018 fa37 	bl	80212e4 <memcpy>
            if (sk->hash_fn) {
 8008e76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d047      	beq.n	8008f16 <wolfSSL_sk_push+0x2f2>
                sk->hash = sk->hash_fn(&sk->data.cipher);
 8008e86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008e96:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	320c      	adds	r2, #12
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	4798      	blx	r3
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ea8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	609a      	str	r2, [r3, #8]
            }
            break;
 8008eb0:	e031      	b.n	8008f16 <wolfSSL_sk_push+0x2f2>
        case STACK_TYPE_X509_OBJ:
        case STACK_TYPE_DIST_POINT:
        case STACK_TYPE_X509_CRL:
        default:
            /* All other types are pointers */
            node->data.generic = sk->data.generic;
 8008eb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008eb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ec2:	60da      	str	r2, [r3, #12]
            sk->data.generic = (void*)data;
 8008ec4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ec8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008ed2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008ed6:	6812      	ldr	r2, [r2, #0]
 8008ed8:	60da      	str	r2, [r3, #12]
#ifdef OPENSSL_ALL
            if (sk->hash_fn) {
 8008eda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ede:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d017      	beq.n	8008f1a <wolfSSL_sk_push+0x2f6>
                sk->hash = sk->hash_fn(sk->data.generic);
 8008eea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008eee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008efa:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	68d2      	ldr	r2, [r2, #12]
 8008f02:	4610      	mov	r0, r2
 8008f04:	4798      	blx	r3
 8008f06:	4602      	mov	r2, r0
 8008f08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008f0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	609a      	str	r2, [r3, #8]
            }
#endif
            break;
 8008f14:	e001      	b.n	8008f1a <wolfSSL_sk_push+0x2f6>
            break;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <wolfSSL_sk_push+0x2f8>
            break;
 8008f1a:	bf00      	nop
    }

    return WOLFSSL_SUCCESS;
 8008f1c:	2301      	movs	r3, #1
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <wolfSSL_ASN1_OBJECT_free>:


#if !defined(NO_ASN) && (defined(OPENSSL_EXTRA) || \
        defined(OPENSSL_EXTRA_X509_SMALL))
void wolfSSL_ASN1_OBJECT_free(WOLFSSL_ASN1_OBJECT* obj)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
    if (obj == NULL) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d032      	beq.n	8008f9c <wolfSSL_ASN1_OBJECT_free+0x74>
        return;
    }
    if ((obj->obj != NULL) && ((obj->dynamic & WOLFSSL_ASN1_DYNAMIC_DATA) != 0)) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d012      	beq.n	8008f64 <wolfSSL_ASN1_OBJECT_free+0x3c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <wolfSSL_ASN1_OBJECT_free+0x3c>
#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_MSG("Freeing ASN1 data");
#endif
        XFREE((void*)obj->obj, obj->heap, DYNAMIC_TYPE_ASN1);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <wolfSSL_ASN1_OBJECT_free+0x36>
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f00f fe43 	bl	8018be4 <wolfSSL_Free>
        obj->obj = NULL;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	605a      	str	r2, [r3, #4]
    }
    #if defined(WOLFSSL_QT) || defined(OPENSSL_ALL)
    if (obj->pathlen != NULL) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d007      	beq.n	8008f7c <wolfSSL_ASN1_OBJECT_free+0x54>
        wolfSSL_ASN1_INTEGER_free(obj->pathlen);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f987 	bl	8009284 <wolfSSL_ASN1_INTEGER_free>
        obj->pathlen = NULL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif
    if ((obj->dynamic & WOLFSSL_ASN1_DYNAMIC) != 0) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <wolfSSL_ASN1_OBJECT_free+0x76>
#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_MSG("Freeing ASN1 OBJECT");
#endif
        XFREE(obj, NULL, DYNAMIC_TYPE_ASN1);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <wolfSSL_ASN1_OBJECT_free+0x76>
 8008f94:	68b8      	ldr	r0, [r7, #8]
 8008f96:	f00f fe25 	bl	8018be4 <wolfSSL_Free>
 8008f9a:	e000      	b.n	8008f9e <wolfSSL_ASN1_OBJECT_free+0x76>
        return;
 8008f9c:	bf00      	nop
    }
}
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <wolfSSL_ASN1_OBJECT_new>:

WOLFSSL_ASN1_OBJECT* wolfSSL_ASN1_OBJECT_new(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
    WOLFSSL_ASN1_OBJECT* obj;

    obj = (WOLFSSL_ASN1_OBJECT*)XMALLOC(sizeof(WOLFSSL_ASN1_OBJECT), NULL,
 8008faa:	f44f 7088 	mov.w	r0, #272	; 0x110
 8008fae:	f00f fdfd 	bl	8018bac <wolfSSL_Malloc>
 8008fb2:	6078      	str	r0, [r7, #4]
                                        DYNAMIC_TYPE_ASN1);
    if (obj == NULL) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <wolfSSL_ASN1_OBJECT_new+0x1a>
        return NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e01b      	b.n	8008ff6 <wolfSSL_ASN1_OBJECT_new+0x52>
    }

    XMEMSET(obj, 0, sizeof(WOLFSSL_ASN1_OBJECT));
 8008fbe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f018 f9b5 	bl	8021334 <memset>
    obj->d.ia5 = &(obj->d.ia5_internal);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#if defined(WOLFSSL_QT) || defined(OPENSSL_ALL)
    obj->d.iPAddress = &(obj->d.iPAddress_internal);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
    obj->dynamic |= WOLFSSL_ASN1_DYNAMIC;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008fe8:	f043 0301 	orr.w	r3, r3, #1
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return obj;
 8008ff4:	687b      	ldr	r3, [r7, #4]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <wolfSSL_FreeSession>:
    return NULL;
#endif /* HAVE_EXT_CACHE */
}

void wolfSSL_FreeSession(WOLFSSL_CTX* ctx, WOLFSSL_SESSION* session)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
    session = ClientSessionToSession(session);
 8009008:	6838      	ldr	r0, [r7, #0]
 800900a:	f7ff fc5d 	bl	80088c8 <ClientSessionToSession>
 800900e:	6038      	str	r0, [r7, #0]
    if (session == NULL)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d026      	beq.n	8009064 <wolfSSL_FreeSession+0x66>

    (void)ctx;

    /* refCount will always be 1 or more if created externally.
     * Internal cache sessions don't initialize a refMutex. */
    if (session->refCount > 0) {
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	dd09      	ble.n	8009032 <wolfSSL_FreeSession+0x34>
        if (wc_LockMutex(&session->refMutex) != 0) {
            WOLFSSL_MSG("Failed to lock session mutex");
            return;
        }
#endif
        if (session->refCount > 1) {
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	2b01      	cmp	r3, #1
 8009024:	dd05      	ble.n	8009032 <wolfSSL_FreeSession+0x34>
            session->refCount--;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	1e5a      	subs	r2, r3, #1
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	605a      	str	r2, [r3, #4]
#ifndef SINGLE_THREADED
            wc_UnLockMutex(&session->refMutex);
#endif
            return;
 8009030:	e019      	b.n	8009066 <wolfSSL_FreeSession+0x68>
#ifdef HAVE_EX_DATA_CLEANUP_HOOKS
    wolfSSL_CRYPTO_cleanup_ex_data(&session->ex_data);
#endif

    /* Make sure masterSecret is zeroed. */
    ForceZero(session->masterSecret, SECRET_LEN);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	335d      	adds	r3, #93	; 0x5d
 8009036:	2130      	movs	r1, #48	; 0x30
 8009038:	4618      	mov	r0, r3
 800903a:	f7fc fbfd 	bl	8005838 <ForceZero>
    /* Session ID is sensitive information too. */
    ForceZero(session->sessionID, ID_LEN);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	333c      	adds	r3, #60	; 0x3c
 8009042:	2120      	movs	r1, #32
 8009044:	4618      	mov	r0, r3
 8009046:	f7fc fbf7 	bl	8005838 <ForceZero>

    if (session->type == WOLFSSL_SESSION_TYPE_HEAP) {
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d109      	bne.n	8009066 <wolfSSL_FreeSession+0x68>
        XFREE(session, session->heap, DYNAMIC_TYPE_SESSION);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <wolfSSL_FreeSession+0x68>
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f00f fdc1 	bl	8018be4 <wolfSSL_Free>
 8009062:	e000      	b.n	8009066 <wolfSSL_FreeSession+0x68>
        return;
 8009064:	bf00      	nop
    }
}
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <wolfSSL_sk_CIPHER_free>:
/* Free the structure for WOLFSSL_CIPHER stack
 *
 * sk  stack to free nodes in
 */
void wolfSSL_sk_CIPHER_free(WOLF_STACK_OF(WOLFSSL_CIPHER)* sk)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_sk_CIPHER_free");

    wolfSSL_sk_free(sk);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9f1 	bl	800945c <wolfSSL_sk_free>
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <wolfSSL_ASN1_STRING_new>:
    /* Creates a new WOLFSSL_ASN1_STRING structure.
     *
     * returns a pointer to the new structure created on success or NULL if fail
     */
    WOLFSSL_ASN1_STRING* wolfSSL_ASN1_STRING_new(void)
    {
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0

#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_ASN1_STRING_new");
#endif

        asn1 = (WOLFSSL_ASN1_STRING*)XMALLOC(sizeof(WOLFSSL_ASN1_STRING), NULL,
 8009088:	2058      	movs	r0, #88	; 0x58
 800908a:	f00f fd8f 	bl	8018bac <wolfSSL_Malloc>
 800908e:	6078      	str	r0, [r7, #4]
                DYNAMIC_TYPE_OPENSSL);
        if (asn1 != NULL) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <wolfSSL_ASN1_STRING_new+0x1e>
            XMEMSET(asn1, 0, sizeof(WOLFSSL_ASN1_STRING));
 8009096:	2258      	movs	r2, #88	; 0x58
 8009098:	2100      	movs	r1, #0
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f018 f94a 	bl	8021334 <memset>
        }

        return asn1; /* no check for null because error case is returning null*/
 80090a0:	687b      	ldr	r3, [r7, #4]
    }
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <wolfSSL_ASN1_STRING_free>:
    }


    /* used to free a WOLFSSL_ASN1_STRING structure */
    void wolfSSL_ASN1_STRING_free(WOLFSSL_ASN1_STRING* asn1)
    {
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_ASN1_STRING_free");
#endif

        if (asn1 != NULL) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d020      	beq.n	80090fa <wolfSSL_ASN1_STRING_free+0x50>
            if (asn1->length > 0 && asn1->data != NULL && asn1->isDynamic) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd14      	ble.n	80090ea <wolfSSL_ASN1_STRING_free+0x40>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d010      	beq.n	80090ea <wolfSSL_ASN1_STRING_free+0x40>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d008      	beq.n	80090ea <wolfSSL_ASN1_STRING_free+0x40>
                XFREE(asn1->data, NULL, DYNAMIC_TYPE_OPENSSL);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <wolfSSL_ASN1_STRING_free+0x40>
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f00f fd7d 	bl	8018be4 <wolfSSL_Free>
            }
            XFREE(asn1, NULL, DYNAMIC_TYPE_OPENSSL);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60bb      	str	r3, [r7, #8]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <wolfSSL_ASN1_STRING_free+0x50>
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f00f fd75 	bl	8018be4 <wolfSSL_Free>
        }
    }
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <wolfSSL_ASN1_STRING_type_new>:
     * type is the type of set when WOLFSSL_ASN1_STRING is created
     *
     * returns a pointer to the new structure created on success or NULL if fail
     */
    WOLFSSL_ASN1_STRING* wolfSSL_ASN1_STRING_type_new(int type)
    {
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]

#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_ASN1_STRING_type_new");
#endif

        asn1 = wolfSSL_ASN1_STRING_new();
 800910a:	f7ff ffba 	bl	8009082 <wolfSSL_ASN1_STRING_new>
 800910e:	60f8      	str	r0, [r7, #12]
        if (asn1 == NULL) {
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <wolfSSL_ASN1_STRING_type_new+0x18>
            return NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	e003      	b.n	8009122 <wolfSSL_ASN1_STRING_type_new+0x20>
        }
        asn1->type = type;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	645a      	str	r2, [r3, #68]	; 0x44

        return asn1;
 8009120:	68fb      	ldr	r3, [r7, #12]
    }
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <wolfSSL_ASN1_STRING_type>:
*
* RETURNS:
* returns the type set for <asn1>. Otherwise, returns WOLFSSL_FAILURE.
*/
    int wolfSSL_ASN1_STRING_type(const WOLFSSL_ASN1_STRING* asn1)
    {
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]

#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_ASN1_STRING_type");
#endif

        if (asn1 == NULL) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <wolfSSL_ASN1_STRING_type+0x12>
            return WOLFSSL_FAILURE;
 8009138:	2300      	movs	r3, #0
 800913a:	e001      	b.n	8009140 <wolfSSL_ASN1_STRING_type+0x16>
        }

        return asn1->type;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <wolfSSL_ASN1_STRING_set>:
    /* if dataSz is negative then use XSTRLEN to find length of data
     * return WOLFSSL_SUCCESS on success and WOLFSSL_FAILURE on failure */
    /* `data` can be NULL and only buffer will be allocated */
    int wolfSSL_ASN1_STRING_set(WOLFSSL_ASN1_STRING* asn1, const void* data,
            int dataSz)
    {
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]

#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_ASN1_STRING_set");
#endif

        if (asn1 == NULL || (data == NULL && dataSz < 0)) {
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <wolfSSL_ASN1_STRING_set+0x1e>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <wolfSSL_ASN1_STRING_set+0x22>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	da01      	bge.n	800916e <wolfSSL_ASN1_STRING_set+0x22>
            return WOLFSSL_FAILURE;
 800916a:	2300      	movs	r3, #0
 800916c:	e064      	b.n	8009238 <wolfSSL_ASN1_STRING_set+0xec>
        }

        if (dataSz < 0) {
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	da05      	bge.n	8009180 <wolfSSL_ASN1_STRING_set+0x34>
            sz = (int)XSTRLEN((const char*)data);
 8009174:	68b8      	ldr	r0, [r7, #8]
 8009176:	f7f7 f845 	bl	8000204 <strlen>
 800917a:	4603      	mov	r3, r0
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e001      	b.n	8009184 <wolfSSL_ASN1_STRING_set+0x38>
        }
        else {
            sz = dataSz;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	617b      	str	r3, [r7, #20]
        }

        if (sz < 0) {
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b00      	cmp	r3, #0
 8009188:	da01      	bge.n	800918e <wolfSSL_ASN1_STRING_set+0x42>
            return WOLFSSL_FAILURE;
 800918a:	2300      	movs	r3, #0
 800918c:	e054      	b.n	8009238 <wolfSSL_ASN1_STRING_set+0xec>
        }

        /* free any existing data before copying */
        if (asn1->data != NULL && asn1->isDynamic) {
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d013      	beq.n	80091be <wolfSSL_ASN1_STRING_set+0x72>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00b      	beq.n	80091be <wolfSSL_ASN1_STRING_set+0x72>
            XFREE(asn1->data, NULL, DYNAMIC_TYPE_OPENSSL);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	613b      	str	r3, [r7, #16]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <wolfSSL_ASN1_STRING_set+0x6c>
 80091b2:	6938      	ldr	r0, [r7, #16]
 80091b4:	f00f fd16 	bl	8018be4 <wolfSSL_Free>
            asn1->data = NULL;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        if (sz + 1 > CTC_NAME_SIZE) { /* account for null char */
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b3f      	cmp	r3, #63	; 0x3f
 80091c2:	dd15      	ble.n	80091f0 <wolfSSL_ASN1_STRING_set+0xa4>
            /* create new data buffer and copy over */
            asn1->data = (char*)XMALLOC(sz + 1, NULL, DYNAMIC_TYPE_OPENSSL);
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	3301      	adds	r3, #1
 80091c8:	4618      	mov	r0, r3
 80091ca:	f00f fcef 	bl	8018bac <wolfSSL_Malloc>
 80091ce:	4602      	mov	r2, r0
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	64da      	str	r2, [r3, #76]	; 0x4c
            if (asn1->data == NULL) {
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <wolfSSL_ASN1_STRING_set+0x94>
                return WOLFSSL_FAILURE;
 80091dc:	2300      	movs	r3, #0
 80091de:	e02b      	b.n	8009238 <wolfSSL_ASN1_STRING_set+0xec>
            }
            asn1->isDynamic = 1;
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 80091ee:	e00f      	b.n	8009210 <wolfSSL_ASN1_STRING_set+0xc4>
        }
        else {
            XMEMSET(asn1->strData, 0, CTC_NAME_SIZE);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2240      	movs	r2, #64	; 0x40
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f018 f89c 	bl	8021334 <memset>
            asn1->data = asn1->strData;
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	64da      	str	r2, [r3, #76]	; 0x4c
            asn1->isDynamic = 0;
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8009208:	f36f 0300 	bfc	r3, #0, #1
 800920c:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
        }
        if (data != NULL) {
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <wolfSSL_ASN1_STRING_set+0xe4>
            XMEMCPY(asn1->data, data, sz);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	4618      	mov	r0, r3
 8009220:	f018 f860 	bl	80212e4 <memcpy>
            asn1->data[sz] = '\0';
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	4413      	add	r3, r2
 800922c:	2200      	movs	r2, #0
 800922e:	701a      	strb	r2, [r3, #0]
        }
        asn1->length = sz;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	641a      	str	r2, [r3, #64]	; 0x40

        return WOLFSSL_SUCCESS;
 8009236:	2301      	movs	r3, #1
    }
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <wolfSSL_ASN1_STRING_data>:
        } else {
            return NULL;
        }
    }
    unsigned char* wolfSSL_ASN1_STRING_data(WOLFSSL_ASN1_STRING* asn)
    {
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_ASN1_STRING_data");
#endif

        if (asn) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <wolfSSL_ASN1_STRING_data+0x14>
            return (unsigned char*)asn->data;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009252:	e000      	b.n	8009256 <wolfSSL_ASN1_STRING_data+0x16>
        }
        else {
            return NULL;
 8009254:	2300      	movs	r3, #0
        }
    }
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <wolfSSL_ASN1_STRING_length>:


    int wolfSSL_ASN1_STRING_length(WOLFSSL_ASN1_STRING* asn)
    {
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_ASN1_STRING_length");
#endif

        if (asn) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <wolfSSL_ASN1_STRING_length+0x14>
            return asn->length;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	e000      	b.n	8009278 <wolfSSL_ASN1_STRING_length+0x16>
        }
        else {
            return 0;
 8009276:	2300      	movs	r3, #0
        }
    }
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <wolfSSL_ASN1_INTEGER_free>:
}


/* free's internal elements of WOLFSSL_ASN1_INTEGER and free's "in" itself */
void wolfSSL_ASN1_INTEGER_free(WOLFSSL_ASN1_INTEGER* in)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
    if (in != NULL) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d018      	beq.n	80092c4 <wolfSSL_ASN1_INTEGER_free+0x40>
        if (in->isDynamic) {
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d008      	beq.n	80092b4 <wolfSSL_ASN1_INTEGER_free+0x30>
            XFREE(in->data, NULL, DYNAMIC_TYPE_OPENSSL);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <wolfSSL_ASN1_INTEGER_free+0x30>
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f00f fc98 	bl	8018be4 <wolfSSL_Free>
        }
        XFREE(in, NULL, DYNAMIC_TYPE_OPENSSL);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	60bb      	str	r3, [r7, #8]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <wolfSSL_ASN1_INTEGER_free+0x40>
 80092be:	68b8      	ldr	r0, [r7, #8]
 80092c0:	f00f fc90 	bl	8018be4 <wolfSSL_Free>
    }
}
 80092c4:	bf00      	nop
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <wolfSSL_ERR_GET_LIB>:

    return wolfSSL_ERR_peek_error_line_data(NULL, NULL, NULL, NULL);
}

int wolfSSL_ERR_GET_LIB(unsigned long err)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    unsigned long value;

    value = (err & 0xFFFFFFL);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092da:	60fb      	str	r3, [r7, #12]
    switch (value) {
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80092e2:	d828      	bhi.n	8009336 <wolfSSL_ERR_GET_LIB+0x6a>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80092ea:	d820      	bhi.n	800932e <wolfSSL_ERR_GET_LIB+0x62>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80092f2:	d018      	beq.n	8009326 <wolfSSL_ERR_GET_LIB+0x5a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80092fa:	d81c      	bhi.n	8009336 <wolfSSL_ERR_GET_LIB+0x6a>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f240 1231 	movw	r2, #305	; 0x131
 8009302:	4293      	cmp	r3, r2
 8009304:	d015      	beq.n	8009332 <wolfSSL_ERR_GET_LIB+0x66>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800930c:	d213      	bcs.n	8009336 <wolfSSL_ERR_GET_LIB+0x6a>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2ba2      	cmp	r3, #162	; 0xa2
 8009312:	d00a      	beq.n	800932a <wolfSSL_ERR_GET_LIB+0x5e>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2ba2      	cmp	r3, #162	; 0xa2
 8009318:	d30d      	bcc.n	8009336 <wolfSSL_ERR_GET_LIB+0x6a>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009320:	2b03      	cmp	r3, #3
 8009322:	d808      	bhi.n	8009336 <wolfSSL_ERR_GET_LIB+0x6a>
 8009324:	e001      	b.n	800932a <wolfSSL_ERR_GET_LIB+0x5e>
    case -SSL_R_HTTP_REQUEST:
        return ERR_LIB_SSL;
 8009326:	2314      	movs	r3, #20
 8009328:	e006      	b.n	8009338 <wolfSSL_ERR_GET_LIB+0x6c>
    case -ASN_NO_PEM_HEADER:
    case PEM_R_NO_START_LINE:
    case PEM_R_PROBLEMS_GETTING_PASSWORD:
    case PEM_R_BAD_PASSWORD_READ:
    case PEM_R_BAD_DECRYPT:
        return ERR_LIB_PEM;
 800932a:	2309      	movs	r3, #9
 800932c:	e004      	b.n	8009338 <wolfSSL_ERR_GET_LIB+0x6c>
    case EVP_R_BAD_DECRYPT:
    case EVP_R_BN_DECODE_ERROR:
    case EVP_R_DECODE_ERROR:
    case EVP_R_PRIVATE_KEY_DECODE_ERROR:
        return ERR_LIB_EVP;
 800932e:	230b      	movs	r3, #11
 8009330:	e002      	b.n	8009338 <wolfSSL_ERR_GET_LIB+0x6c>
    case ASN1_R_HEADER_TOO_LONG:
        return ERR_LIB_ASN1;
 8009332:	230c      	movs	r3, #12
 8009334:	e000      	b.n	8009338 <wolfSSL_ERR_GET_LIB+0x6c>
    default:
        return 0;
 8009336:	2300      	movs	r3, #0
    }
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <wolfSSL_ERR_GET_REASON>:
 * error values are typically negative.
 *
 * Returns the error reason
 */
int wolfSSL_ERR_GET_REASON(unsigned long err)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
    int ret = (int)err;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]
    WOLFSSL_ENTER("wolfSSL_ERR_GET_REASON");

#if defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX) || defined(WOLFSSL_HAPROXY)
    /* Nginx looks for this error to know to stop parsing certificates.
     * Same for HAProxy. */
    if (err == ((ERR_LIB_PEM << 24) | PEM_R_NO_START_LINE)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <wolfSSL_ERR_GET_REASON+0x5c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d004      	beq.n	8009362 <wolfSSL_ERR_GET_REASON+0x1e>
        || (err & 0xFFFFFFL) == -ASN_NO_PEM_HEADER)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800935e:	2ba2      	cmp	r3, #162	; 0xa2
 8009360:	d102      	bne.n	8009368 <wolfSSL_ERR_GET_REASON+0x24>
        return PEM_R_NO_START_LINE;
 8009362:	f240 132d 	movw	r3, #301	; 0x12d
 8009366:	e015      	b.n	8009394 <wolfSSL_ERR_GET_REASON+0x50>
    if (err == ((ERR_LIB_SSL << 24) | -SSL_R_HTTP_REQUEST))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <wolfSSL_ERR_GET_REASON+0x60>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d101      	bne.n	8009374 <wolfSSL_ERR_GET_REASON+0x30>
        return SSL_R_HTTP_REQUEST;
 8009370:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <wolfSSL_ERR_GET_REASON+0x64>)
 8009372:	e00f      	b.n	8009394 <wolfSSL_ERR_GET_REASON+0x50>
    if (err == ((ERR_LIB_ASN1 << 24) | ASN1_R_HEADER_TOO_LONG))
        return ASN1_R_HEADER_TOO_LONG;
#endif

    /* check if error value is in range of wolfSSL errors */
    ret = 0 - ret; /* setting as negative value */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	425b      	negs	r3, r3
 8009378:	60fb      	str	r3, [r7, #12]
    /* wolfCrypt range is less than MAX (-100)
       wolfSSL range is MIN (-300) and lower */
    if (ret < MAX_CODE_E && ret > MIN_CODE_E) {
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8009380:	da05      	bge.n	800938e <wolfSSL_ERR_GET_REASON+0x4a>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8009388:	dd01      	ble.n	800938e <wolfSSL_ERR_GET_REASON+0x4a>
        return ret;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	e002      	b.n	8009394 <wolfSSL_ERR_GET_REASON+0x50>
    }
    else {
        WOLFSSL_MSG("Not in range of typical error values");
        ret = (int)err;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8009392:	68fb      	ldr	r3, [r7, #12]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	0900012d 	.word	0x0900012d
 80093a4:	14000132 	.word	0x14000132
 80093a8:	fffffece 	.word	0xfffffece

080093ac <wolfSSL_ASN1_TYPE_free>:
 * Free WOLFSSL_ASN1_TYPE and all its members.
 *
 * @param at Object to free
 */
void wolfSSL_ASN1_TYPE_free(WOLFSSL_ASN1_TYPE* at)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
    if (at) {
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d04b      	beq.n	8009452 <wolfSSL_ASN1_TYPE_free+0xa6>
        switch (at->type) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3b06      	subs	r3, #6
 80093c0:	2b16      	cmp	r3, #22
 80093c2:	d83d      	bhi.n	8009440 <wolfSSL_ASN1_TYPE_free+0x94>
 80093c4:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <wolfSSL_ASN1_TYPE_free+0x20>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	08009429 	.word	0x08009429
 80093d0:	08009441 	.word	0x08009441
 80093d4:	08009441 	.word	0x08009441
 80093d8:	08009441 	.word	0x08009441
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009441 	.word	0x08009441
 80093e4:	08009435 	.word	0x08009435
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009441 	.word	0x08009441
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009435 	.word	0x08009435
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009441 	.word	0x08009441
 8009400:	08009435 	.word	0x08009435
 8009404:	08009435 	.word	0x08009435
 8009408:	08009441 	.word	0x08009441
 800940c:	08009435 	.word	0x08009435
 8009410:	08009441 	.word	0x08009441
 8009414:	08009441 	.word	0x08009441
 8009418:	08009441 	.word	0x08009441
 800941c:	08009441 	.word	0x08009441
 8009420:	08009441 	.word	0x08009441
 8009424:	08009435 	.word	0x08009435
            case V_ASN1_OBJECT:
                wolfSSL_ASN1_OBJECT_free(at->value.object);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fd7b 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
                break;
 8009432:	e006      	b.n	8009442 <wolfSSL_ASN1_TYPE_free+0x96>
            case V_ASN1_PRINTABLESTRING:
            case V_ASN1_T61STRING:
            case V_ASN1_IA5STRING:
            case V_ASN1_UNIVERSALSTRING:
            case V_ASN1_SEQUENCE:
                wolfSSL_ASN1_STRING_free(at->value.asn1_string);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff fe36 	bl	80090aa <wolfSSL_ASN1_STRING_free>
                break;
 800943e:	e000      	b.n	8009442 <wolfSSL_ASN1_TYPE_free+0x96>
            default:
                WOLFSSL_MSG("Unknown or unsupported ASN1_TYPE");
                break;
 8009440:	bf00      	nop
        }
        XFREE(at, NULL, DYNAMIC_TYPE_OPENSSL);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <wolfSSL_ASN1_TYPE_free+0xa6>
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f00f fbc9 	bl	8018be4 <wolfSSL_Free>
    }
}
 8009452:	bf00      	nop
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop

0800945c <wolfSSL_sk_free>:
    return NULL;
}

/* Free the just the stack structure */
void wolfSSL_sk_free(WOLFSSL_STACK* sk)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_sk_free");

    while (sk != NULL) {
 8009464:	e00d      	b.n	8009482 <wolfSSL_sk_free+0x26>
        WOLFSSL_STACK* next = sk->next;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800946c:	60fb      	str	r3, [r7, #12]
        XFREE(sk, NULL, DYNAMIC_TYPE_OPENSSL);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60bb      	str	r3, [r7, #8]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <wolfSSL_sk_free+0x22>
 8009478:	68b8      	ldr	r0, [r7, #8]
 800947a:	f00f fbb3 	bl	8018be4 <wolfSSL_Free>
        sk = next;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	607b      	str	r3, [r7, #4]
    while (sk != NULL) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1ee      	bne.n	8009466 <wolfSSL_sk_free+0xa>
    }
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <wolfSSL_sk_pop_free>:
}

/* Free all nodes in a stack including the pushed objects */
void wolfSSL_sk_pop_free(WOLF_STACK_OF(WOLFSSL_ASN1_OBJECT)* sk,
                                                       wolfSSL_sk_freefunc func)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
    WOLFSSL_ENTER("wolfSSL_sk_pop_free");

    if (sk == NULL) {
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d07b      	beq.n	800959c <wolfSSL_sk_pop_free+0x108>
    */
    if (sk->type == STACK_TYPE_ACCESS_DESCRIPTION) {
        func = (wolfSSL_sk_freefunc)wolfSSL_ACCESS_DESCRIPTION_free;
    }
    #endif
    if (func == NULL) {
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d155      	bne.n	8009556 <wolfSSL_sk_pop_free+0xc2>
        switch(sk->type) {
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80094b0:	2b12      	cmp	r3, #18
 80094b2:	d852      	bhi.n	800955a <wolfSSL_sk_pop_free+0xc6>
 80094b4:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <wolfSSL_sk_pop_free+0x28>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	0800950f 	.word	0x0800950f
 80094c0:	08009527 	.word	0x08009527
 80094c4:	08009551 	.word	0x08009551
 80094c8:	0800951b 	.word	0x0800951b
 80094cc:	0800952d 	.word	0x0800952d
 80094d0:	0800955b 	.word	0x0800955b
 80094d4:	08009509 	.word	0x08009509
 80094d8:	0800953f 	.word	0x0800953f
 80094dc:	0800955b 	.word	0x0800955b
 80094e0:	08009533 	.word	0x08009533
 80094e4:	08009545 	.word	0x08009545
 80094e8:	0800954b 	.word	0x0800954b
 80094ec:	0800955b 	.word	0x0800955b
 80094f0:	0800955b 	.word	0x0800955b
 80094f4:	08009515 	.word	0x08009515
 80094f8:	08009521 	.word	0x08009521
 80094fc:	0800955b 	.word	0x0800955b
 8009500:	08009539 	.word	0x08009539
 8009504:	0800955b 	.word	0x0800955b
            case STACK_TYPE_ACCESS_DESCRIPTION:
            #if defined(OPENSSL_ALL)
                func = (wolfSSL_sk_freefunc)wolfSSL_ACCESS_DESCRIPTION_free;
 8009508:	4b26      	ldr	r3, [pc, #152]	; (80095a4 <wolfSSL_sk_pop_free+0x110>)
 800950a:	603b      	str	r3, [r7, #0]
            #endif
                break;
 800950c:	e026      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_X509:
                func = (wolfSSL_sk_freefunc)wolfSSL_X509_free;
 800950e:	4b26      	ldr	r3, [pc, #152]	; (80095a8 <wolfSSL_sk_pop_free+0x114>)
 8009510:	603b      	str	r3, [r7, #0]
                break;
 8009512:	e023      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_X509_OBJ:
            #ifdef OPENSSL_ALL
                func = (wolfSSL_sk_freefunc)wolfSSL_X509_OBJECT_free;
 8009514:	4b25      	ldr	r3, [pc, #148]	; (80095ac <wolfSSL_sk_pop_free+0x118>)
 8009516:	603b      	str	r3, [r7, #0]
            #endif
                break;
 8009518:	e020      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_OBJ:
                func = (wolfSSL_sk_freefunc)wolfSSL_ASN1_OBJECT_free;
 800951a:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <wolfSSL_sk_pop_free+0x11c>)
 800951c:	603b      	str	r3, [r7, #0]
                break;
 800951e:	e01d      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_DIST_POINT:
            #ifdef OPENSSL_EXTRA
                func = (wolfSSL_sk_freefunc)wolfSSL_DIST_POINT_free;
 8009520:	4b24      	ldr	r3, [pc, #144]	; (80095b4 <wolfSSL_sk_pop_free+0x120>)
 8009522:	603b      	str	r3, [r7, #0]
            #endif
                break;
 8009524:	e01a      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_GEN_NAME:
                func = (wolfSSL_sk_freefunc)wolfSSL_GENERAL_NAME_free;
 8009526:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <wolfSSL_sk_pop_free+0x124>)
 8009528:	603b      	str	r3, [r7, #0]
                break;
 800952a:	e017      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_STRING:
            #if defined(WOLFSSL_NGINX) || defined(WOLFSSL_HAPROXY) || \
                defined(OPENSSL_EXTRA) || defined(OPENSSL_ALL)
                func = (wolfSSL_sk_freefunc)wolfSSL_WOLFSSL_STRING_free;
 800952c:	4b23      	ldr	r3, [pc, #140]	; (80095bc <wolfSSL_sk_pop_free+0x128>)
 800952e:	603b      	str	r3, [r7, #0]
            #endif
                break;
 8009530:	e014      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_X509_NAME:
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) \
                && !defined(WOLFCRYPT_ONLY)
                func = (wolfSSL_sk_freefunc)wolfSSL_X509_NAME_free;
 8009532:	4b23      	ldr	r3, [pc, #140]	; (80095c0 <wolfSSL_sk_pop_free+0x12c>)
 8009534:	603b      	str	r3, [r7, #0]
            #endif
                break;
 8009536:	e011      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_X509_NAME_ENTRY:
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) \
                && !defined(WOLFCRYPT_ONLY)
                func = (wolfSSL_sk_freefunc)wolfSSL_X509_NAME_ENTRY_free;
 8009538:	4b22      	ldr	r3, [pc, #136]	; (80095c4 <wolfSSL_sk_pop_free+0x130>)
 800953a:	603b      	str	r3, [r7, #0]
            #endif
                break;
 800953c:	e00e      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_X509_EXT:
            #if defined(OPENSSL_ALL) || defined(OPENSSL_EXTRA)
                func = (wolfSSL_sk_freefunc)wolfSSL_X509_EXTENSION_free;
 800953e:	4b22      	ldr	r3, [pc, #136]	; (80095c8 <wolfSSL_sk_pop_free+0x134>)
 8009540:	603b      	str	r3, [r7, #0]
            #endif
                break;
 8009542:	e00b      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
                func = (wolfSSL_sk_freefunc)wolfSSL_X509_ATTRIBUTE_free;
            #endif
                break;
            case STACK_TYPE_CONF_VALUE:
            #if defined(OPENSSL_ALL)
                func = (wolfSSL_sk_freefunc)wolfSSL_X509V3_conf_free;
 8009544:	4b21      	ldr	r3, [pc, #132]	; (80095cc <wolfSSL_sk_pop_free+0x138>)
 8009546:	603b      	str	r3, [r7, #0]
            #endif
                break;
 8009548:	e008      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_X509_INFO:
            #if defined(OPENSSL_ALL)
                func = (wolfSSL_sk_freefunc)wolfSSL_X509_INFO_free;
 800954a:	4b21      	ldr	r3, [pc, #132]	; (80095d0 <wolfSSL_sk_pop_free+0x13c>)
 800954c:	603b      	str	r3, [r7, #0]
            #endif
                break;
 800954e:	e005      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_BIO:
#if !defined(NO_BIO) && defined(OPENSSL_EXTRA)
                func = (wolfSSL_sk_freefunc)wolfSSL_BIO_vfree;
 8009550:	4b20      	ldr	r3, [pc, #128]	; (80095d4 <wolfSSL_sk_pop_free+0x140>)
 8009552:	603b      	str	r3, [r7, #0]
#endif
                break;
 8009554:	e002      	b.n	800955c <wolfSSL_sk_pop_free+0xc8>
            case STACK_TYPE_CIPHER:
            case STACK_TYPE_NULL:
            default:
                break;
        }
    }
 8009556:	bf00      	nop
 8009558:	e01c      	b.n	8009594 <wolfSSL_sk_pop_free+0x100>
                break;
 800955a:	bf00      	nop

    while (sk != NULL) {
 800955c:	e01a      	b.n	8009594 <wolfSSL_sk_pop_free+0x100>
        WOLFSSL_STACK* next = sk->next;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009564:	60fb      	str	r3, [r7, #12]

        if (func != NULL) {
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <wolfSSL_sk_pop_free+0xec>
            if (sk->type != STACK_TYPE_CIPHER)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8009572:	2b05      	cmp	r3, #5
 8009574:	d004      	beq.n	8009580 <wolfSSL_sk_pop_free+0xec>
                func(sk->data.generic);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	4610      	mov	r0, r2
 800957e:	4798      	blx	r3
        }
        XFREE(sk, NULL, DYNAMIC_TYPE_OPENSSL);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60bb      	str	r3, [r7, #8]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <wolfSSL_sk_pop_free+0xfc>
 800958a:	68b8      	ldr	r0, [r7, #8]
 800958c:	f00f fb2a 	bl	8018be4 <wolfSSL_Free>
        sk = next;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	607b      	str	r3, [r7, #4]
    while (sk != NULL) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e1      	bne.n	800955e <wolfSSL_sk_pop_free+0xca>
 800959a:	e000      	b.n	800959e <wolfSSL_sk_pop_free+0x10a>
        return;
 800959c:	bf00      	nop
    }
}
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	0800a3b7 	.word	0x0800a3b7
 80095a8:	0800a387 	.word	0x0800a387
 80095ac:	0800af13 	.word	0x0800af13
 80095b0:	08008f29 	.word	0x08008f29
 80095b4:	0800a43d 	.word	0x0800a43d
 80095b8:	0800a513 	.word	0x0800a513
 80095bc:	08009895 	.word	0x08009895
 80095c0:	0800a883 	.word	0x0800a883
 80095c4:	0800a903 	.word	0x0800a903
 80095c8:	0800a28b 	.word	0x0800a28b
 80095cc:	0800b189 	.word	0x0800b189
 80095d0:	0800aec3 	.word	0x0800aec3
 80095d4:	08009a43 	.word	0x08009a43

080095d8 <wolfSSL_OBJ_nid2obj>:
     * returns a pointer to a new WOLFSSL_ASN1_OBJECT struct on success and NULL
     *         on fail
     */

    WOLFSSL_ASN1_OBJECT* wolfSSL_OBJ_nid2obj(int id)
    {
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
        return wolfSSL_OBJ_nid2obj_ex(id, NULL);
 80095e0:	2100      	movs	r1, #0
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f806 	bl	80095f4 <wolfSSL_OBJ_nid2obj_ex>
 80095e8:	4603      	mov	r3, r0
    }
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <wolfSSL_OBJ_nid2obj_ex>:


    WOLFSSL_LOCAL WOLFSSL_ASN1_OBJECT* wolfSSL_OBJ_nid2obj_ex(int id,
                                                WOLFSSL_ASN1_OBJECT* arg_obj)
    {
 80095f4:	b590      	push	{r4, r7, lr}
 80095f6:	b097      	sub	sp, #92	; 0x5c
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
        word32 oidSz = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	63bb      	str	r3, [r7, #56]	; 0x38
        int nid = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	657b      	str	r3, [r7, #84]	; 0x54
        const byte* oid;
        word32 type = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	653b      	str	r3, [r7, #80]	; 0x50
        WOLFSSL_ASN1_OBJECT* obj = arg_obj;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	64fb      	str	r3, [r7, #76]	; 0x4c
        byte objBuf[MAX_OID_SZ + MAX_LENGTH_SZ + 1]; /* +1 for object tag */
        word32 objSz = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	64bb      	str	r3, [r7, #72]	; 0x48
        const char* sName = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_OBJ_nid2obj()");
#endif

        for (i = 0; i < (int)WOLFSSL_OBJECT_INFO_SZ; i++) {
 8009616:	2300      	movs	r3, #0
 8009618:	643b      	str	r3, [r7, #64]	; 0x40
 800961a:	e02e      	b.n	800967a <wolfSSL_OBJ_nid2obj_ex+0x86>
            if (wolfssl_object_info[i].nid == id) {
 800961c:	497b      	ldr	r1, [pc, #492]	; (800980c <wolfSSL_OBJ_nid2obj_ex+0x218>)
 800961e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	429a      	cmp	r2, r3
 8009630:	d120      	bne.n	8009674 <wolfSSL_OBJ_nid2obj_ex+0x80>
                nid = id;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	657b      	str	r3, [r7, #84]	; 0x54
                id = wolfssl_object_info[i].id;
 8009636:	4975      	ldr	r1, [pc, #468]	; (800980c <wolfSSL_OBJ_nid2obj_ex+0x218>)
 8009638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	3304      	adds	r3, #4
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	607b      	str	r3, [r7, #4]
                sName = wolfssl_object_info[i].sName;
 800964a:	4970      	ldr	r1, [pc, #448]	; (800980c <wolfSSL_OBJ_nid2obj_ex+0x218>)
 800964c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	330c      	adds	r3, #12
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	647b      	str	r3, [r7, #68]	; 0x44
                type = wolfssl_object_info[i].type;
 800965e:	496b      	ldr	r1, [pc, #428]	; (800980c <wolfSSL_OBJ_nid2obj_ex+0x218>)
 8009660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	3308      	adds	r3, #8
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	653b      	str	r3, [r7, #80]	; 0x50
                break;
 8009672:	e005      	b.n	8009680 <wolfSSL_OBJ_nid2obj_ex+0x8c>
        for (i = 0; i < (int)WOLFSSL_OBJECT_INFO_SZ; i++) {
 8009674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009676:	3301      	adds	r3, #1
 8009678:	643b      	str	r3, [r7, #64]	; 0x40
 800967a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967c:	2b4b      	cmp	r3, #75	; 0x4b
 800967e:	ddcd      	ble.n	800961c <wolfSSL_OBJ_nid2obj_ex+0x28>
            }
        }
        if (i == (int)WOLFSSL_OBJECT_INFO_SZ) {
 8009680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009682:	2b4c      	cmp	r3, #76	; 0x4c
 8009684:	d101      	bne.n	800968a <wolfSSL_OBJ_nid2obj_ex+0x96>
            WOLFSSL_MSG("NID not in table");
        #ifdef WOLFSSL_QT
            sName = NULL;
            type = id;
        #else
            return NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	e0bc      	b.n	8009804 <wolfSSL_OBJ_nid2obj_ex+0x210>
        #endif
        }

    #ifdef HAVE_ECC
         if (type == 0 && wc_ecc_get_oid(id, &oid, &oidSz) > 0) {
 800968a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10c      	bne.n	80096aa <wolfSSL_OBJ_nid2obj_ex+0xb6>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009696:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800969a:	4618      	mov	r0, r3
 800969c:	f00e fee6 	bl	801846c <wc_ecc_get_oid>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dd01      	ble.n	80096aa <wolfSSL_OBJ_nid2obj_ex+0xb6>
             type = oidCurveType;
 80096a6:	2303      	movs	r3, #3
 80096a8:	653b      	str	r3, [r7, #80]	; 0x50
         }
    #endif /* HAVE_ECC */

        if (sName != NULL) {
 80096aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d007      	beq.n	80096c0 <wolfSSL_OBJ_nid2obj_ex+0xcc>
            if (XSTRLEN(sName) > WOLFSSL_MAX_SNAME - 1) {
 80096b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80096b2:	f7f6 fda7 	bl	8000204 <strlen>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b27      	cmp	r3, #39	; 0x27
 80096ba:	d901      	bls.n	80096c0 <wolfSSL_OBJ_nid2obj_ex+0xcc>
                WOLFSSL_MSG("Attempted short name is too large");
                return NULL;
 80096bc:	2300      	movs	r3, #0
 80096be:	e0a1      	b.n	8009804 <wolfSSL_OBJ_nid2obj_ex+0x210>
            }
        }

        oid = OidFromId(id, type, &oidSz);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80096c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096c8:	4618      	mov	r0, r3
 80096ca:	f004 fc1b 	bl	800df04 <OidFromId>
 80096ce:	4603      	mov	r3, r0
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34

        /* set object ID to buffer */
        if (obj == NULL){
 80096d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d107      	bne.n	80096e8 <wolfSSL_OBJ_nid2obj_ex+0xf4>
            obj = wolfSSL_ASN1_OBJECT_new();
 80096d8:	f7ff fc64 	bl	8008fa4 <wolfSSL_ASN1_OBJECT_new>
 80096dc:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (obj == NULL) {
 80096de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <wolfSSL_OBJ_nid2obj_ex+0xf4>
                WOLFSSL_MSG("Issue creating WOLFSSL_ASN1_OBJECT struct");
                return NULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	e08d      	b.n	8009804 <wolfSSL_OBJ_nid2obj_ex+0x210>
            }
        }
        obj->nid     = nid;
 80096e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096ec:	639a      	str	r2, [r3, #56]	; 0x38
        obj->type    = id;
 80096ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	631a      	str	r2, [r3, #48]	; 0x30
        obj->grp     = type;
 80096f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f8:	635a      	str	r2, [r3, #52]	; 0x34

        obj->sName[0] = '\0';
 80096fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fc:	2200      	movs	r2, #0
 80096fe:	721a      	strb	r2, [r3, #8]
        if (sName != NULL) {
 8009700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <wolfSSL_OBJ_nid2obj_ex+0x12a>
            XMEMCPY(obj->sName, (char*)sName, XSTRLEN((char*)sName));
 8009706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009708:	f103 0408 	add.w	r4, r3, #8
 800970c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800970e:	f7f6 fd79 	bl	8000204 <strlen>
 8009712:	4603      	mov	r3, r0
 8009714:	461a      	mov	r2, r3
 8009716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009718:	4620      	mov	r0, r4
 800971a:	f017 fde3 	bl	80212e4 <memcpy>
        }

        objBuf[0] = ASN_OBJECT_ID; objSz++;
 800971e:	2306      	movs	r3, #6
 8009720:	733b      	strb	r3, [r7, #12]
 8009722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009724:	3301      	adds	r3, #1
 8009726:	64bb      	str	r3, [r7, #72]	; 0x48
        objSz += SetLength(oidSz, objBuf + 1);
 8009728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800972a:	f107 030c 	add.w	r3, r7, #12
 800972e:	3301      	adds	r3, #1
 8009730:	4619      	mov	r1, r3
 8009732:	4610      	mov	r0, r2
 8009734:	f006 fec7 	bl	80104c6 <SetLength>
 8009738:	4602      	mov	r2, r0
 800973a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800973c:	4413      	add	r3, r2
 800973e:	64bb      	str	r3, [r7, #72]	; 0x48
        if (oidSz) {
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00c      	beq.n	8009760 <wolfSSL_OBJ_nid2obj_ex+0x16c>
            XMEMCPY(objBuf + objSz, oid, oidSz);
 8009746:	f107 020c 	add.w	r2, r7, #12
 800974a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974c:	4413      	add	r3, r2
 800974e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009752:	4618      	mov	r0, r3
 8009754:	f017 fdc6 	bl	80212e4 <memcpy>
            objSz     += oidSz;
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800975c:	4413      	add	r3, r2
 800975e:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        if (obj->objSz == 0 || objSz != obj->objSz) {
 8009760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <wolfSSL_OBJ_nid2obj_ex+0x17e>
 8009768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800976e:	429a      	cmp	r2, r3
 8009770:	d03e      	beq.n	80097f0 <wolfSSL_OBJ_nid2obj_ex+0x1fc>
            obj->objSz = objSz;
 8009772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009776:	63da      	str	r2, [r3, #60]	; 0x3c
            if(((obj->dynamic & WOLFSSL_ASN1_DYNAMIC_DATA) != 0) ||
 8009778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800977e:	f003 0302 	and.w	r3, r3, #2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d103      	bne.n	800978e <wolfSSL_OBJ_nid2obj_ex+0x19a>
                                                           (obj->obj == NULL)) {
 8009786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009788:	685b      	ldr	r3, [r3, #4]
            if(((obj->dynamic & WOLFSSL_ASN1_DYNAMIC_DATA) != 0) ||
 800978a:	2b00      	cmp	r3, #0
 800978c:	d127      	bne.n	80097de <wolfSSL_OBJ_nid2obj_ex+0x1ea>
                if (obj->obj != NULL)
 800978e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d008      	beq.n	80097a8 <wolfSSL_OBJ_nid2obj_ex+0x1b4>
                    XFREE((byte*)obj->obj, NULL, DYNAMIC_TYPE_ASN1);
 8009796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800979c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <wolfSSL_OBJ_nid2obj_ex+0x1b4>
 80097a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80097a4:	f00f fa1e 	bl	8018be4 <wolfSSL_Free>
                obj->obj = (byte*)XMALLOC(obj->objSz, NULL, DYNAMIC_TYPE_ASN1);
 80097a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ac:	4618      	mov	r0, r3
 80097ae:	f00f f9fd 	bl	8018bac <wolfSSL_Malloc>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b6:	605a      	str	r2, [r3, #4]
                if (obj->obj == NULL) {
 80097b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d104      	bne.n	80097ca <wolfSSL_OBJ_nid2obj_ex+0x1d6>
                    wolfSSL_ASN1_OBJECT_free(obj);
 80097c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80097c2:	f7ff fbb1 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
                    return NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	e01c      	b.n	8009804 <wolfSSL_OBJ_nid2obj_ex+0x210>
                }
                obj->dynamic |= WOLFSSL_ASN1_DYNAMIC_DATA ;
 80097ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80097d0:	f043 0302 	orr.w	r3, r3, #2
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80097dc:	e008      	b.n	80097f0 <wolfSSL_OBJ_nid2obj_ex+0x1fc>
            }
            else {
                obj->dynamic &= ~WOLFSSL_ASN1_DYNAMIC_DATA ;
 80097de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80097e4:	f023 0302 	bic.w	r3, r3, #2
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            }
        }
        XMEMCPY((byte*)obj->obj, objBuf, obj->objSz);
 80097f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f2:	6858      	ldr	r0, [r3, #4]
 80097f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097f8:	f107 030c 	add.w	r3, r7, #12
 80097fc:	4619      	mov	r1, r3
 80097fe:	f017 fd71 	bl	80212e4 <memcpy>

        (void)type;

        return obj;
 8009802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 8009804:	4618      	mov	r0, r3
 8009806:	375c      	adds	r7, #92	; 0x5c
 8009808:	46bd      	mov	sp, r7
 800980a:	bd90      	pop	{r4, r7, pc}
 800980c:	080295d0 	.word	0x080295d0

08009810 <wolfSSL_X509_NAME_ENTRY_get_object>:
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL) || \
    defined(HAVE_LIGHTY) || defined(WOLFSSL_MYSQL_COMPATIBLE) || \
    defined(HAVE_STUNNEL) || defined(WOLFSSL_NGINX) || \
    defined(HAVE_POCO_LIB) || defined(WOLFSSL_HAPROXY)
    WOLFSSL_ASN1_OBJECT * wolfSSL_X509_NAME_ENTRY_get_object(WOLFSSL_X509_NAME_ENTRY *ne)
    {
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_X509_NAME_ENTRY_get_object");
#endif
        if (ne == NULL) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <wolfSSL_X509_NAME_ENTRY_get_object+0x12>
            return NULL;
 800981e:	2300      	movs	r3, #0
 8009820:	e00c      	b.n	800983c <wolfSSL_X509_NAME_ENTRY_get_object+0x2c>
        }

        ne->object = wolfSSL_OBJ_nid2obj_ex(ne->nid, ne->object);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689a      	ldr	r2, [r3, #8]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7ff fee1 	bl	80095f4 <wolfSSL_OBJ_nid2obj_ex>
 8009832:	4602      	mov	r2, r0
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	601a      	str	r2, [r3, #0]

        return ne->object;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
    }
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <wolfSSL_sk_SSL_CIPHER_free>:
    return WOLFSSL_FATAL_ERROR;
}

/* free's all nodes in the stack and there data */
void wolfSSL_sk_SSL_CIPHER_free(WOLF_STACK_OF(WOLFSSL_CIPHER)* sk)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_sk_SSL_CIPHER_free");
    wolfSSL_sk_free(sk);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fe05 	bl	800945c <wolfSSL_sk_free>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <wolfSSL_ERR_peek_last_error>:
        return 0;
    return ConstantCompare((const byte*)a, (const byte*)b, (int)size);
}

unsigned long wolfSSL_ERR_peek_last_error(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0

#ifdef WOLFSSL_HAVE_ERROR_QUEUE
    {
        int ret;

        if ((ret = wc_PeekErrorNode(-1, NULL, NULL, NULL)) < 0) {
 8009862:	2300      	movs	r3, #0
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	f00e ffc0 	bl	80187f0 <wc_PeekErrorNode>
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da01      	bge.n	800987c <wolfSSL_ERR_peek_last_error+0x20>
            WOLFSSL_MSG("Issue peeking at error node in queue");
            return 0;
 8009878:	2300      	movs	r3, #0
 800987a:	e005      	b.n	8009888 <wolfSSL_ERR_peek_last_error+0x2c>
        }
        if (ret == -ASN_NO_PEM_HEADER)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2ba2      	cmp	r3, #162	; 0xa2
 8009880:	d101      	bne.n	8009886 <wolfSSL_ERR_peek_last_error+0x2a>
            return (ERR_LIB_PEM << 24) | PEM_R_NO_START_LINE;
 8009882:	4b03      	ldr	r3, [pc, #12]	; (8009890 <wolfSSL_ERR_peek_last_error+0x34>)
 8009884:	e000      	b.n	8009888 <wolfSSL_ERR_peek_last_error+0x2c>
    #if defined(WOLFSSL_PYTHON)
        if (ret == ASN1_R_HEADER_TOO_LONG)
            return (ERR_LIB_ASN1 << 24) | ASN1_R_HEADER_TOO_LONG;
    #endif
        return (unsigned long)ret;
 8009886:	687b      	ldr	r3, [r7, #4]
    }
#else
    return (unsigned long)(0 - NOT_COMPILED_IN);
#endif
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	0900012d 	.word	0x0900012d

08009894 <wolfSSL_WOLFSSL_STRING_free>:

    return ret;
}

void wolfSSL_WOLFSSL_STRING_free(WOLFSSL_STRING s)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_WOLFSSL_STRING_free");

    if (s != NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <wolfSSL_WOLFSSL_STRING_free+0x1e>
        XFREE(s, NULL, DYNAMIC_TYPE_OPENSSL);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <wolfSSL_WOLFSSL_STRING_free+0x1e>
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f00f f999 	bl	8018be4 <wolfSSL_Free>
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <wolfSSL_BIO_free>:
     * Note : If the flag BIO_NOCLOSE is set then freeing memory buffers is up
     *        to the application.
     * Returns 1 on success, 0 on failure
     */
    int wolfSSL_BIO_free(WOLFSSL_BIO* bio)
    {
 80098ba:	b590      	push	{r4, r7, lr}
 80098bc:	b08b      	sub	sp, #44	; 0x2c
 80098be:	af02      	add	r7, sp, #8
 80098c0:	6078      	str	r0, [r7, #4]
        int ret;
    #if defined(OPENSSL_ALL) || defined(OPENSSL_EXTRA)
        int doFree = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	61fb      	str	r3, [r7, #28]
    #endif

        /* unchain?, doesn't matter in goahead since from free all */
        WOLFSSL_ENTER("wolfSSL_BIO_free");
        if (bio) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 80b5 	beq.w	8009a38 <wolfSSL_BIO_free+0x17e>

            if (bio->infoCb) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d010      	beq.n	80098f8 <wolfSSL_BIO_free+0x3e>
                /* info callback is called before free */
                ret = (int)bio->infoCb(bio, WOLFSSL_BIO_CB_FREE, NULL, 0, 0, 1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80098da:	2301      	movs	r3, #1
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	2300      	movs	r3, #0
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	2300      	movs	r3, #0
 80098e4:	2200      	movs	r2, #0
 80098e6:	2101      	movs	r1, #1
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	47a0      	blx	r4
 80098ec:	61b8      	str	r0, [r7, #24]
                if (ret <= 0) {
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dc01      	bgt.n	80098f8 <wolfSSL_BIO_free+0x3e>
                    return ret;
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	e0a0      	b.n	8009a3a <wolfSSL_BIO_free+0x180>
                return WOLFSSL_FAILURE;
            }
            #endif

            /* only free if all references to it are done */
            bio->refCount--;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fc:	1e5a      	subs	r2, r3, #1
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	651a      	str	r2, [r3, #80]	; 0x50
            if (bio->refCount == 0) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <wolfSSL_BIO_free+0x54>
                doFree = 1;
 800990a:	2301      	movs	r3, #1
 800990c:	61fb      	str	r3, [r7, #28]

            #ifndef SINGLE_THREADED
            wc_UnLockMutex(&bio->refMutex);
            #endif

            if (!doFree) {
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <wolfSSL_BIO_free+0x5e>
                /* return success if BIO ref count is not 1 yet */
                return WOLFSSL_SUCCESS;
 8009914:	2301      	movs	r3, #1
 8009916:	e090      	b.n	8009a3a <wolfSSL_BIO_free+0x180>
        #ifdef HAVE_EX_DATA_CLEANUP_HOOKS
            wolfSSL_CRYPTO_cleanup_ex_data(&bio->ex_data);
        #endif

            /* call custom set free callback */
            if (bio->method && bio->method->freeCb) {
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00b      	beq.n	8009938 <wolfSSL_BIO_free+0x7e>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <wolfSSL_BIO_free+0x7e>
                bio->method->freeCb(bio);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
            }

            /* remove from pair by setting the paired bios pair to NULL */
            if (bio->pair != NULL) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <wolfSSL_BIO_free+0x8e>
                bio->pair->pair = NULL;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	2200      	movs	r2, #0
 8009946:	611a      	str	r2, [r3, #16]
            }

            if (bio->ip != NULL) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d008      	beq.n	8009962 <wolfSSL_BIO_free+0xa8>
                XFREE(bio->ip, bio->heap, DYNAMIC_TYPE_OPENSSL);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	617b      	str	r3, [r7, #20]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <wolfSSL_BIO_free+0xa8>
 800995c:	6978      	ldr	r0, [r7, #20]
 800995e:	f00f f941 	bl	8018be4 <wolfSSL_Free>
            }

            if (bio->shutdown) {
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00d      	beq.n	800998e <wolfSSL_BIO_free+0xd4>
                if (bio->type == WOLFSSL_BIO_SSL && bio->ptr)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009978:	2b03      	cmp	r3, #3
 800997a:	d108      	bne.n	800998e <wolfSSL_BIO_free+0xd4>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d004      	beq.n	800998e <wolfSSL_BIO_free+0xd4>
                    wolfSSL_free((WOLFSSL*)bio->ptr);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	4618      	mov	r0, r3
 800998a:	f7fd f86a 	bl	8006a62 <wolfSSL_free>
                }
            #endif
            }
        #endif

            if (bio->shutdown != BIO_NOCLOSE) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d038      	beq.n	8009a10 <wolfSSL_BIO_free+0x156>
                if (bio->type == WOLFSSL_BIO_MEMORY && bio->ptr != NULL) {
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d127      	bne.n	80099f8 <wolfSSL_BIO_free+0x13e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d023      	beq.n	80099f8 <wolfSSL_BIO_free+0x13e>
                    if (bio->mem_buf != NULL) {
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d013      	beq.n	80099e0 <wolfSSL_BIO_free+0x126>
                        if (bio->mem_buf->data != (char*)bio->ptr) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d018      	beq.n	80099f8 <wolfSSL_BIO_free+0x13e>
                            XFREE(bio->ptr, bio->heap, DYNAMIC_TYPE_OPENSSL);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <wolfSSL_BIO_free+0x11e>
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f00f f906 	bl	8018be4 <wolfSSL_Free>
                            bio->ptr = NULL;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	619a      	str	r2, [r3, #24]
 80099de:	e00b      	b.n	80099f8 <wolfSSL_BIO_free+0x13e>
                        }
                    }
                    else {
                        XFREE(bio->ptr, bio->heap, DYNAMIC_TYPE_OPENSSL);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	613b      	str	r3, [r7, #16]
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <wolfSSL_BIO_free+0x138>
 80099ec:	6938      	ldr	r0, [r7, #16]
 80099ee:	f00f f8f9 	bl	8018be4 <wolfSSL_Free>
                        bio->ptr = NULL;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	619a      	str	r2, [r3, #24]
                    }
                }
                if (bio->mem_buf != NULL) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d007      	beq.n	8009a10 <wolfSSL_BIO_free+0x156>
                    wolfSSL_BUF_MEM_free(bio->mem_buf);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 fb96 	bl	800b136 <wolfSSL_BUF_MEM_free>
                    bio->mem_buf = NULL;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
                }
            }

            if (bio->type == WOLFSSL_BIO_MD) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009a16:	2b08      	cmp	r3, #8
 8009a18:	d104      	bne.n	8009a24 <wolfSSL_BIO_free+0x16a>
                wolfSSL_EVP_MD_CTX_free((WOLFSSL_EVP_MD_CTX*)bio->ptr);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fb ff88 	bl	8005934 <wolfSSL_EVP_MD_CTX_free>
            }

            XFREE(bio, 0, DYNAMIC_TYPE_OPENSSL);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	60bb      	str	r3, [r7, #8]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <wolfSSL_BIO_free+0x17a>
 8009a2e:	68b8      	ldr	r0, [r7, #8]
 8009a30:	f00f f8d8 	bl	8018be4 <wolfSSL_Free>
            return WOLFSSL_SUCCESS;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <wolfSSL_BIO_free+0x180>
        }
        return WOLFSSL_FAILURE;
 8009a38:	2300      	movs	r3, #0
    }
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3724      	adds	r7, #36	; 0x24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd90      	pop	{r4, r7, pc}

08009a42 <wolfSSL_BIO_vfree>:

    /* like BIO_free, but no return value */
    void wolfSSL_BIO_vfree(WOLFSSL_BIO* bio)
    {
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
        wolfSSL_BIO_free(bio);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff ff35 	bl	80098ba <wolfSSL_BIO_free>
    }
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <oid2nid>:
    /* MSVC warns without the cast */
    return (word32)-1;
}

int oid2nid(word32 oid, int grp)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
    size_t i;
    /* get OID type */
    switch (grp) {
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b0e      	cmp	r3, #14
 8009a66:	f200 833c 	bhi.w	800a0e2 <oid2nid+0x68a>
 8009a6a:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <oid2nid+0x18>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009aad 	.word	0x08009aad
 8009a74:	08009acd 	.word	0x08009acd
 8009a78:	08009bb3 	.word	0x08009bb3
 8009a7c:	08009bd1 	.word	0x08009bd1
 8009a80:	08009ea3 	.word	0x08009ea3
 8009a84:	0800a0e3 	.word	0x0800a0e3
 8009a88:	08009ed9 	.word	0x08009ed9
 8009a8c:	08009fd9 	.word	0x08009fd9
 8009a90:	08009fef 	.word	0x08009fef
 8009a94:	08009ff9 	.word	0x08009ff9
 8009a98:	0800a003 	.word	0x0800a003
 8009a9c:	0800a039 	.word	0x0800a039
 8009aa0:	0800a06d 	.word	0x0800a06d
 8009aa4:	0800a0a7 	.word	0x0800a0a7
 8009aa8:	0800a047 	.word	0x0800a047
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8009ab2:	d008      	beq.n	8009ac6 <oid2nid+0x6e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f240 12a1 	movw	r2, #417	; 0x1a1
 8009aba:	4293      	cmp	r3, r2
 8009abc:	f040 82f8 	bne.w	800a0b0 <oid2nid+0x658>
            #ifndef NO_SHA
                case SHAh:
                    return NID_sha1;
            #endif
                case SHA224h:
                    return NID_sha224;
 8009ac0:	f240 23a3 	movw	r3, #675	; 0x2a3
 8009ac4:	e32d      	b.n	800a122 <oid2nid+0x6ca>
            #ifndef NO_SHA256
                case SHA256h:
                    return NID_sha256;
 8009ac6:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8009aca:	e32a      	b.n	800a122 <oid2nid+0x6ca>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f240 220e 	movw	r2, #526	; 0x20e
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d840      	bhi.n	8009b58 <oid2nid+0x100>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8009adc:	d224      	bcs.n	8009b28 <oid2nid+0xd0>
                case CTC_SHA3_512wECDSA:
                    return NID_ecdsa_with_SHA3_512;
                #endif
            #endif /* HAVE_ECC */
            }
            break;
 8009ade:	e2e9      	b.n	800a0b4 <oid2nid+0x65c>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f2a3 2386 	subw	r3, r3, #646	; 0x286
 8009ae6:	2b0c      	cmp	r3, #12
 8009ae8:	f200 82e4 	bhi.w	800a0b4 <oid2nid+0x65c>
 8009aec:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <oid2nid+0x9c>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b71 	.word	0x08009b71
 8009af8:	0800a0b5 	.word	0x0800a0b5
 8009afc:	08009b75 	.word	0x08009b75
 8009b00:	08009b79 	.word	0x08009b79
 8009b04:	0800a0b5 	.word	0x0800a0b5
 8009b08:	0800a0b5 	.word	0x0800a0b5
 8009b0c:	0800a0b5 	.word	0x0800a0b5
 8009b10:	0800a0b5 	.word	0x0800a0b5
 8009b14:	0800a0b5 	.word	0x0800a0b5
 8009b18:	08009b83 	.word	0x08009b83
 8009b1c:	08009b89 	.word	0x08009b89
 8009b20:	08009b8f 	.word	0x08009b8f
 8009b24:	08009b7d 	.word	0x08009b7d
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8009b2e:	2b06      	cmp	r3, #6
 8009b30:	f200 82c0 	bhi.w	800a0b4 <oid2nid+0x65c>
 8009b34:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <oid2nid+0xe4>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b95 	.word	0x08009b95
 8009b40:	0800a0b5 	.word	0x0800a0b5
 8009b44:	0800a0b5 	.word	0x0800a0b5
 8009b48:	08009b9b 	.word	0x08009b9b
 8009b4c:	08009ba1 	.word	0x08009ba1
 8009b50:	08009ba7 	.word	0x08009ba7
 8009b54:	08009bad 	.word	0x08009bad
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f240 2292 	movw	r2, #658	; 0x292
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	f200 82a8 	bhi.w	800a0b4 <oid2nid+0x65c>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f240 2286 	movw	r2, #646	; 0x286
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d2b8      	bcs.n	8009ae0 <oid2nid+0x88>
 8009b6e:	e2a1      	b.n	800a0b4 <oid2nid+0x65c>
                    return NID_md2WithRSAEncryption;
 8009b70:	2309      	movs	r3, #9
 8009b72:	e2d6      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_md5WithRSAEncryption;
 8009b74:	2363      	movs	r3, #99	; 0x63
 8009b76:	e2d4      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_sha1WithRSAEncryption;
 8009b78:	2341      	movs	r3, #65	; 0x41
 8009b7a:	e2d2      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_sha224WithRSAEncryption;
 8009b7c:	f240 239f 	movw	r3, #671	; 0x29f
 8009b80:	e2cf      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_sha256WithRSAEncryption;
 8009b82:	f44f 7327 	mov.w	r3, #668	; 0x29c
 8009b86:	e2cc      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_sha384WithRSAEncryption;
 8009b88:	f240 239d 	movw	r3, #669	; 0x29d
 8009b8c:	e2c9      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_sha512WithRSAEncryption;
 8009b8e:	f240 239e 	movw	r3, #670	; 0x29e
 8009b92:	e2c6      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_ecdsa_with_SHA1;
 8009b94:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8009b98:	e2c3      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_ecdsa_with_SHA224;
 8009b9a:	f240 3319 	movw	r3, #793	; 0x319
 8009b9e:	e2c0      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_ecdsa_with_SHA256;
 8009ba0:	f240 331a 	movw	r3, #794	; 0x31a
 8009ba4:	e2bd      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_ecdsa_with_SHA384;
 8009ba6:	f240 331b 	movw	r3, #795	; 0x31b
 8009baa:	e2ba      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_ecdsa_with_SHA512;
 8009bac:	f44f 7347 	mov.w	r3, #796	; 0x31c
 8009bb0:	e2b7      	b.n	800a122 <oid2nid+0x6ca>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f240 2206 	movw	r2, #518	; 0x206
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d007      	beq.n	8009bcc <oid2nid+0x174>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f240 2285 	movw	r2, #645	; 0x285
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	f040 8278 	bne.w	800a0b8 <oid2nid+0x660>
                case DSAk:
                    return NID_dsa;
            #endif /* NO_DSA */
            #ifndef NO_RSA
                case RSAk:
                    return NID_rsaEncryption;
 8009bc8:	2310      	movs	r3, #16
 8009bca:	e2aa      	b.n	800a122 <oid2nid+0x6ca>
            #endif /* NO_RSA */
            #ifdef HAVE_ECC
                case ECDSAk:
                    return NID_X9_62_id_ecPublicKey;
 8009bcc:	2312      	movs	r3, #18
 8009bce:	e2a8      	b.n	800a122 <oid2nid+0x6ca>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2bd3      	cmp	r3, #211	; 0xd3
 8009bd4:	f200 8108 	bhi.w	8009de8 <oid2nid+0x390>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b62      	cmp	r3, #98	; 0x62
 8009bdc:	d218      	bcs.n	8009c10 <oid2nid+0x1b8>
            case ECC_BRAINPOOLP384R1_OID:
                return NID_brainpoolP384r1;
            case ECC_BRAINPOOLP512R1_OID:
                return NID_brainpoolP512r1;
            }
            break;
 8009bde:	e26d      	b.n	800a0bc <oid2nid+0x664>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8009be6:	2b06      	cmp	r3, #6
 8009be8:	f200 8268 	bhi.w	800a0bc <oid2nid+0x664>
 8009bec:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <oid2nid+0x19c>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009e01 	.word	0x08009e01
 8009bf8:	08009e07 	.word	0x08009e07
 8009bfc:	08009e0d 	.word	0x08009e0d
 8009c00:	08009e13 	.word	0x08009e13
 8009c04:	08009e19 	.word	0x08009e19
 8009c08:	08009e1f 	.word	0x08009e1f
 8009c0c:	08009e25 	.word	0x08009e25
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3b62      	subs	r3, #98	; 0x62
 8009c14:	2b71      	cmp	r3, #113	; 0x71
 8009c16:	f200 8251 	bhi.w	800a0bc <oid2nid+0x664>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <oid2nid+0x1c8>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009e79 	.word	0x08009e79
 8009c24:	0800a0bd 	.word	0x0800a0bd
 8009c28:	08009e7f 	.word	0x08009e7f
 8009c2c:	0800a0bd 	.word	0x0800a0bd
 8009c30:	08009e85 	.word	0x08009e85
 8009c34:	0800a0bd 	.word	0x0800a0bd
 8009c38:	08009e8b 	.word	0x08009e8b
 8009c3c:	0800a0bd 	.word	0x0800a0bd
 8009c40:	08009e91 	.word	0x08009e91
 8009c44:	0800a0bd 	.word	0x0800a0bd
 8009c48:	08009e97 	.word	0x08009e97
 8009c4c:	0800a0bd 	.word	0x0800a0bd
 8009c50:	08009e9d 	.word	0x08009e9d
 8009c54:	0800a0bd 	.word	0x0800a0bd
 8009c58:	0800a0bd 	.word	0x0800a0bd
 8009c5c:	0800a0bd 	.word	0x0800a0bd
 8009c60:	0800a0bd 	.word	0x0800a0bd
 8009c64:	0800a0bd 	.word	0x0800a0bd
 8009c68:	0800a0bd 	.word	0x0800a0bd
 8009c6c:	0800a0bd 	.word	0x0800a0bd
 8009c70:	0800a0bd 	.word	0x0800a0bd
 8009c74:	0800a0bd 	.word	0x0800a0bd
 8009c78:	0800a0bd 	.word	0x0800a0bd
 8009c7c:	0800a0bd 	.word	0x0800a0bd
 8009c80:	0800a0bd 	.word	0x0800a0bd
 8009c84:	0800a0bd 	.word	0x0800a0bd
 8009c88:	0800a0bd 	.word	0x0800a0bd
 8009c8c:	0800a0bd 	.word	0x0800a0bd
 8009c90:	0800a0bd 	.word	0x0800a0bd
 8009c94:	0800a0bd 	.word	0x0800a0bd
 8009c98:	0800a0bd 	.word	0x0800a0bd
 8009c9c:	0800a0bd 	.word	0x0800a0bd
 8009ca0:	0800a0bd 	.word	0x0800a0bd
 8009ca4:	0800a0bd 	.word	0x0800a0bd
 8009ca8:	0800a0bd 	.word	0x0800a0bd
 8009cac:	0800a0bd 	.word	0x0800a0bd
 8009cb0:	0800a0bd 	.word	0x0800a0bd
 8009cb4:	0800a0bd 	.word	0x0800a0bd
 8009cb8:	0800a0bd 	.word	0x0800a0bd
 8009cbc:	0800a0bd 	.word	0x0800a0bd
 8009cc0:	0800a0bd 	.word	0x0800a0bd
 8009cc4:	0800a0bd 	.word	0x0800a0bd
 8009cc8:	0800a0bd 	.word	0x0800a0bd
 8009ccc:	0800a0bd 	.word	0x0800a0bd
 8009cd0:	0800a0bd 	.word	0x0800a0bd
 8009cd4:	0800a0bd 	.word	0x0800a0bd
 8009cd8:	0800a0bd 	.word	0x0800a0bd
 8009cdc:	0800a0bd 	.word	0x0800a0bd
 8009ce0:	0800a0bd 	.word	0x0800a0bd
 8009ce4:	0800a0bd 	.word	0x0800a0bd
 8009ce8:	0800a0bd 	.word	0x0800a0bd
 8009cec:	0800a0bd 	.word	0x0800a0bd
 8009cf0:	0800a0bd 	.word	0x0800a0bd
 8009cf4:	0800a0bd 	.word	0x0800a0bd
 8009cf8:	0800a0bd 	.word	0x0800a0bd
 8009cfc:	0800a0bd 	.word	0x0800a0bd
 8009d00:	0800a0bd 	.word	0x0800a0bd
 8009d04:	0800a0bd 	.word	0x0800a0bd
 8009d08:	0800a0bd 	.word	0x0800a0bd
 8009d0c:	0800a0bd 	.word	0x0800a0bd
 8009d10:	0800a0bd 	.word	0x0800a0bd
 8009d14:	0800a0bd 	.word	0x0800a0bd
 8009d18:	0800a0bd 	.word	0x0800a0bd
 8009d1c:	0800a0bd 	.word	0x0800a0bd
 8009d20:	0800a0bd 	.word	0x0800a0bd
 8009d24:	0800a0bd 	.word	0x0800a0bd
 8009d28:	0800a0bd 	.word	0x0800a0bd
 8009d2c:	0800a0bd 	.word	0x0800a0bd
 8009d30:	0800a0bd 	.word	0x0800a0bd
 8009d34:	0800a0bd 	.word	0x0800a0bd
 8009d38:	0800a0bd 	.word	0x0800a0bd
 8009d3c:	0800a0bd 	.word	0x0800a0bd
 8009d40:	0800a0bd 	.word	0x0800a0bd
 8009d44:	0800a0bd 	.word	0x0800a0bd
 8009d48:	0800a0bd 	.word	0x0800a0bd
 8009d4c:	0800a0bd 	.word	0x0800a0bd
 8009d50:	0800a0bd 	.word	0x0800a0bd
 8009d54:	0800a0bd 	.word	0x0800a0bd
 8009d58:	0800a0bd 	.word	0x0800a0bd
 8009d5c:	0800a0bd 	.word	0x0800a0bd
 8009d60:	0800a0bd 	.word	0x0800a0bd
 8009d64:	0800a0bd 	.word	0x0800a0bd
 8009d68:	0800a0bd 	.word	0x0800a0bd
 8009d6c:	0800a0bd 	.word	0x0800a0bd
 8009d70:	08009e2b 	.word	0x08009e2b
 8009d74:	08009e31 	.word	0x08009e31
 8009d78:	08009e43 	.word	0x08009e43
 8009d7c:	08009e61 	.word	0x08009e61
 8009d80:	08009e73 	.word	0x08009e73
 8009d84:	0800a0bd 	.word	0x0800a0bd
 8009d88:	0800a0bd 	.word	0x0800a0bd
 8009d8c:	0800a0bd 	.word	0x0800a0bd
 8009d90:	0800a0bd 	.word	0x0800a0bd
 8009d94:	0800a0bd 	.word	0x0800a0bd
 8009d98:	0800a0bd 	.word	0x0800a0bd
 8009d9c:	0800a0bd 	.word	0x0800a0bd
 8009da0:	0800a0bd 	.word	0x0800a0bd
 8009da4:	0800a0bd 	.word	0x0800a0bd
 8009da8:	0800a0bd 	.word	0x0800a0bd
 8009dac:	0800a0bd 	.word	0x0800a0bd
 8009db0:	0800a0bd 	.word	0x0800a0bd
 8009db4:	0800a0bd 	.word	0x0800a0bd
 8009db8:	0800a0bd 	.word	0x0800a0bd
 8009dbc:	0800a0bd 	.word	0x0800a0bd
 8009dc0:	0800a0bd 	.word	0x0800a0bd
 8009dc4:	0800a0bd 	.word	0x0800a0bd
 8009dc8:	08009e37 	.word	0x08009e37
 8009dcc:	08009e3d 	.word	0x08009e3d
 8009dd0:	08009e49 	.word	0x08009e49
 8009dd4:	08009e67 	.word	0x08009e67
 8009dd8:	08009e6d 	.word	0x08009e6d
 8009ddc:	08009e4f 	.word	0x08009e4f
 8009de0:	08009e55 	.word	0x08009e55
 8009de4:	08009e5b 	.word	0x08009e5b
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f240 220e 	movw	r2, #526	; 0x20e
 8009dee:	4293      	cmp	r3, r2
 8009df0:	f200 8164 	bhi.w	800a0bc <oid2nid+0x664>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8009dfa:	f4bf aef1 	bcs.w	8009be0 <oid2nid+0x188>
 8009dfe:	e15d      	b.n	800a0bc <oid2nid+0x664>
                return NID_X9_62_prime192v1;
 8009e00:	f240 1399 	movw	r3, #409	; 0x199
 8009e04:	e18d      	b.n	800a122 <oid2nid+0x6ca>
                return NID_X9_62_prime192v2;
 8009e06:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8009e0a:	e18a      	b.n	800a122 <oid2nid+0x6ca>
                return NID_X9_62_prime192v3;
 8009e0c:	f240 139b 	movw	r3, #411	; 0x19b
 8009e10:	e187      	b.n	800a122 <oid2nid+0x6ca>
                return NID_X9_62_prime239v1;
 8009e12:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8009e16:	e184      	b.n	800a122 <oid2nid+0x6ca>
                return NID_X9_62_prime239v2;
 8009e18:	f240 139d 	movw	r3, #413	; 0x19d
 8009e1c:	e181      	b.n	800a122 <oid2nid+0x6ca>
                return NID_X9_62_prime239v3;
 8009e1e:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 8009e22:	e17e      	b.n	800a122 <oid2nid+0x6ca>
                return NID_X9_62_prime256v1;
 8009e24:	f240 139f 	movw	r3, #415	; 0x19f
 8009e28:	e17b      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp112r1;
 8009e2a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8009e2e:	e178      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp112r2;
 8009e30:	f240 23c1 	movw	r3, #705	; 0x2c1
 8009e34:	e175      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp128r1;
 8009e36:	f240 23c2 	movw	r3, #706	; 0x2c2
 8009e3a:	e172      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp128r2;
 8009e3c:	f240 23c3 	movw	r3, #707	; 0x2c3
 8009e40:	e16f      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp160r1;
 8009e42:	f240 23c5 	movw	r3, #709	; 0x2c5
 8009e46:	e16c      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp160r2;
 8009e48:	f240 23c6 	movw	r3, #710	; 0x2c6
 8009e4c:	e169      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp224r1;
 8009e4e:	f240 23c9 	movw	r3, #713	; 0x2c9
 8009e52:	e166      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp384r1;
 8009e54:	f240 23cb 	movw	r3, #715	; 0x2cb
 8009e58:	e163      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp521r1;
 8009e5a:	f44f 7333 	mov.w	r3, #716	; 0x2cc
 8009e5e:	e160      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp160k1;
 8009e60:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 8009e64:	e15d      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp192k1;
 8009e66:	f240 23c7 	movw	r3, #711	; 0x2c7
 8009e6a:	e15a      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp224k1;
 8009e6c:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8009e70:	e157      	b.n	800a122 <oid2nid+0x6ca>
                return NID_secp256k1;
 8009e72:	f240 23ca 	movw	r3, #714	; 0x2ca
 8009e76:	e154      	b.n	800a122 <oid2nid+0x6ca>
                return NID_brainpoolP160r1;
 8009e78:	f240 3399 	movw	r3, #921	; 0x399
 8009e7c:	e151      	b.n	800a122 <oid2nid+0x6ca>
                return NID_brainpoolP192r1;
 8009e7e:	f240 339b 	movw	r3, #923	; 0x39b
 8009e82:	e14e      	b.n	800a122 <oid2nid+0x6ca>
                return NID_brainpoolP224r1;
 8009e84:	f240 339d 	movw	r3, #925	; 0x39d
 8009e88:	e14b      	b.n	800a122 <oid2nid+0x6ca>
                return NID_brainpoolP256r1;
 8009e8a:	f240 339f 	movw	r3, #927	; 0x39f
 8009e8e:	e148      	b.n	800a122 <oid2nid+0x6ca>
                return NID_brainpoolP320r1;
 8009e90:	f240 33a1 	movw	r3, #929	; 0x3a1
 8009e94:	e145      	b.n	800a122 <oid2nid+0x6ca>
                return NID_brainpoolP384r1;
 8009e96:	f240 33a3 	movw	r3, #931	; 0x3a3
 8009e9a:	e142      	b.n	800a122 <oid2nid+0x6ca>
                return NID_brainpoolP512r1;
 8009e9c:	f240 33a5 	movw	r3, #933	; 0x3a5
 8009ea0:	e13f      	b.n	800a122 <oid2nid+0x6ca>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8009ea8:	d013      	beq.n	8009ed2 <oid2nid+0x47a>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8009eb0:	f200 8106 	bhi.w	800a0c0 <oid2nid+0x668>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8009eba:	d004      	beq.n	8009ec6 <oid2nid+0x46e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8009ec2:	d003      	beq.n	8009ecc <oid2nid+0x474>
                    return NID_des;
                case DES3b:
                    return NID_des3;
            #endif
            }
            break;
 8009ec4:	e0fc      	b.n	800a0c0 <oid2nid+0x668>
                    return AES128CBCb;
 8009ec6:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8009eca:	e12a      	b.n	800a122 <oid2nid+0x6ca>
                    return AES192CBCb;
 8009ecc:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8009ed0:	e127      	b.n	800a122 <oid2nid+0x6ca>
                    return AES256CBCb;
 8009ed2:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
 8009ed6:	e124      	b.n	800a122 <oid2nid+0x6ca>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b45      	cmp	r3, #69	; 0x45
 8009edc:	d06c      	beq.n	8009fb8 <oid2nid+0x560>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b45      	cmp	r3, #69	; 0x45
 8009ee2:	f0c0 80ef 	bcc.w	800a0c4 <oid2nid+0x66c>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2ba8      	cmp	r3, #168	; 0xa8
 8009eea:	f200 80eb 	bhi.w	800a0c4 <oid2nid+0x66c>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b80      	cmp	r3, #128	; 0x80
 8009ef2:	f0c0 80e7 	bcc.w	800a0c4 <oid2nid+0x66c>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3b80      	subs	r3, #128	; 0x80
 8009efa:	2b28      	cmp	r3, #40	; 0x28
 8009efc:	f200 80e2 	bhi.w	800a0c4 <oid2nid+0x66c>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <oid2nid+0x4b0>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009fc1 	.word	0x08009fc1
 8009f0c:	08009fc9 	.word	0x08009fc9
 8009f10:	0800a0c5 	.word	0x0800a0c5
 8009f14:	08009fb1 	.word	0x08009fb1
 8009f18:	0800a0c5 	.word	0x0800a0c5
 8009f1c:	08009fad 	.word	0x08009fad
 8009f20:	0800a0c5 	.word	0x0800a0c5
 8009f24:	0800a0c5 	.word	0x0800a0c5
 8009f28:	0800a0c5 	.word	0x0800a0c5
 8009f2c:	0800a0c5 	.word	0x0800a0c5
 8009f30:	0800a0c5 	.word	0x0800a0c5
 8009f34:	0800a0c5 	.word	0x0800a0c5
 8009f38:	0800a0c5 	.word	0x0800a0c5
 8009f3c:	0800a0c5 	.word	0x0800a0c5
 8009f40:	0800a0c5 	.word	0x0800a0c5
 8009f44:	0800a0c5 	.word	0x0800a0c5
 8009f48:	08009fcd 	.word	0x08009fcd
 8009f4c:	08009fb5 	.word	0x08009fb5
 8009f50:	08009fd1 	.word	0x08009fd1
 8009f54:	0800a0c5 	.word	0x0800a0c5
 8009f58:	0800a0c5 	.word	0x0800a0c5
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	0800a0c5 	.word	0x0800a0c5
 8009f64:	08009fd5 	.word	0x08009fd5
 8009f68:	0800a0c5 	.word	0x0800a0c5
 8009f6c:	0800a0c5 	.word	0x0800a0c5
 8009f70:	0800a0c5 	.word	0x0800a0c5
 8009f74:	0800a0c5 	.word	0x0800a0c5
 8009f78:	0800a0c5 	.word	0x0800a0c5
 8009f7c:	0800a0c5 	.word	0x0800a0c5
 8009f80:	0800a0c5 	.word	0x0800a0c5
 8009f84:	0800a0c5 	.word	0x0800a0c5
 8009f88:	0800a0c5 	.word	0x0800a0c5
 8009f8c:	0800a0c5 	.word	0x0800a0c5
 8009f90:	0800a0c5 	.word	0x0800a0c5
 8009f94:	0800a0c5 	.word	0x0800a0c5
 8009f98:	0800a0c5 	.word	0x0800a0c5
 8009f9c:	0800a0c5 	.word	0x0800a0c5
 8009fa0:	0800a0c5 	.word	0x0800a0c5
 8009fa4:	0800a0c5 	.word	0x0800a0c5
 8009fa8:	08009fc5 	.word	0x08009fc5

        /* oidCertExtType */
        case oidCertExtType:
            switch (oid) {
                case BASIC_CA_OID:
                    return NID_basic_constraints;
 8009fac:	2385      	movs	r3, #133	; 0x85
 8009fae:	e0b8      	b.n	800a122 <oid2nid+0x6ca>
                case ALT_NAMES_OID:
                    return NID_subject_alt_name;
 8009fb0:	2383      	movs	r3, #131	; 0x83
 8009fb2:	e0b6      	b.n	800a122 <oid2nid+0x6ca>
                case CRL_DIST_OID:
                    return NID_crl_distribution_points;
 8009fb4:	2391      	movs	r3, #145	; 0x91
 8009fb6:	e0b4      	b.n	800a122 <oid2nid+0x6ca>
                case AUTH_INFO_OID:
                    return NID_info_access;
 8009fb8:	2345      	movs	r3, #69	; 0x45
 8009fba:	e0b2      	b.n	800a122 <oid2nid+0x6ca>
                case AUTH_KEY_OID:
                    return NID_authority_key_identifier;
 8009fbc:	2395      	movs	r3, #149	; 0x95
 8009fbe:	e0b0      	b.n	800a122 <oid2nid+0x6ca>
                case SUBJ_KEY_OID:
                    return NID_subject_key_identifier;
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	e0ae      	b.n	800a122 <oid2nid+0x6ca>
                case INHIBIT_ANY_OID:
                    return NID_inhibit_any_policy;
 8009fc4:	23a8      	movs	r3, #168	; 0xa8
 8009fc6:	e0ac      	b.n	800a122 <oid2nid+0x6ca>
                case KEY_USAGE_OID:
                    return NID_key_usage;
 8009fc8:	2381      	movs	r3, #129	; 0x81
 8009fca:	e0aa      	b.n	800a122 <oid2nid+0x6ca>
                case NAME_CONS_OID:
                    return NID_name_constraints;
 8009fcc:	2390      	movs	r3, #144	; 0x90
 8009fce:	e0a8      	b.n	800a122 <oid2nid+0x6ca>
                case CERT_POLICY_OID:
                    return NID_certificate_policies;
 8009fd0:	2392      	movs	r3, #146	; 0x92
 8009fd2:	e0a6      	b.n	800a122 <oid2nid+0x6ca>
                case EXT_KEY_USAGE_OID:
                    return NID_ext_key_usage;
 8009fd4:	2397      	movs	r3, #151	; 0x97
 8009fd6:	e0a4      	b.n	800a122 <oid2nid+0x6ca>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b74      	cmp	r3, #116	; 0x74
 8009fdc:	d003      	beq.n	8009fe6 <oid2nid+0x58e>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b75      	cmp	r3, #117	; 0x75
 8009fe2:	d002      	beq.n	8009fea <oid2nid+0x592>
                case AIA_OCSP_OID:
                    return NID_ad_OCSP;
                case AIA_CA_ISSUER_OID:
                    return NID_ad_ca_issuers;
            }
            break;
 8009fe4:	e07d      	b.n	800a0e2 <oid2nid+0x68a>
                    return NID_ad_OCSP;
 8009fe6:	23b2      	movs	r3, #178	; 0xb2
 8009fe8:	e09b      	b.n	800a122 <oid2nid+0x6ca>
                    return NID_ad_ca_issuers;
 8009fea:	23b3      	movs	r3, #179	; 0xb3
 8009fec:	e099      	b.n	800a122 <oid2nid+0x6ca>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b92      	cmp	r3, #146	; 0x92
 8009ff2:	d169      	bne.n	800a0c8 <oid2nid+0x670>

        /* oidCertPolicyType */
        case oidCertPolicyType:
            switch (oid) {
                case CP_ANY_OID:
                    return NID_any_policy;
 8009ff4:	234b      	movs	r3, #75	; 0x4b
 8009ff6:	e094      	b.n	800a122 <oid2nid+0x6ca>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b4f      	cmp	r3, #79	; 0x4f
 8009ffc:	d166      	bne.n	800a0cc <oid2nid+0x674>

        /* oidCertAltNameType */
        case oidCertAltNameType:
            switch (oid) {
                case HW_NAME_OID:
                    return NID_hw_name_oid;
 8009ffe:	2349      	movs	r3, #73	; 0x49
 800a000:	e08f      	b.n	800a122 <oid2nid+0x6ca>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b97      	cmp	r3, #151	; 0x97
 800a006:	d00f      	beq.n	800a028 <oid2nid+0x5d0>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b97      	cmp	r3, #151	; 0x97
 800a00c:	d860      	bhi.n	800a0d0 <oid2nid+0x678>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b4f      	cmp	r3, #79	; 0x4f
 800a012:	d00f      	beq.n	800a034 <oid2nid+0x5dc>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b4f      	cmp	r3, #79	; 0x4f
 800a018:	d85a      	bhi.n	800a0d0 <oid2nid+0x678>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b47      	cmp	r3, #71	; 0x47
 800a01e:	d005      	beq.n	800a02c <oid2nid+0x5d4>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b48      	cmp	r3, #72	; 0x48
 800a024:	d004      	beq.n	800a030 <oid2nid+0x5d8>
                case EKU_CLIENT_AUTH_OID:
                    return EKU_CLIENT_AUTH_OID;
                case EKU_OCSP_SIGN_OID:
                    return EKU_OCSP_SIGN_OID;
            }
            break;
 800a026:	e053      	b.n	800a0d0 <oid2nid+0x678>
                    return NID_anyExtendedKeyUsage;
 800a028:	234c      	movs	r3, #76	; 0x4c
 800a02a:	e07a      	b.n	800a122 <oid2nid+0x6ca>
                    return EKU_SERVER_AUTH_OID;
 800a02c:	2347      	movs	r3, #71	; 0x47
 800a02e:	e078      	b.n	800a122 <oid2nid+0x6ca>
                    return EKU_CLIENT_AUTH_OID;
 800a030:	2348      	movs	r3, #72	; 0x48
 800a032:	e076      	b.n	800a122 <oid2nid+0x6ca>
                    return EKU_OCSP_SIGN_OID;
 800a034:	234f      	movs	r3, #79	; 0x4f
 800a036:	e074      	b.n	800a122 <oid2nid+0x6ca>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 800a03e:	d149      	bne.n	800a0d4 <oid2nid+0x67c>

        /* oidKdfType */
        case oidKdfType:
            switch (oid) {
                case PBKDF2_OID:
                    return PBKDF2_OID;
 800a040:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a044:	e06d      	b.n	800a122 <oid2nid+0x6ca>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d00d      	beq.n	800a068 <oid2nid+0x610>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d842      	bhi.n	800a0d8 <oid2nid+0x680>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d003      	beq.n	800a060 <oid2nid+0x608>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d002      	beq.n	800a064 <oid2nid+0x60c>
                case PBE_SHA1_DES:
                    return PBE_SHA1_DES;
                case PBE_SHA1_DES3:
                    return PBE_SHA1_DES3;
            }
            break;
 800a05e:	e03b      	b.n	800a0d8 <oid2nid+0x680>
                    return PBE_SHA1_RC4_128;
 800a060:	2301      	movs	r3, #1
 800a062:	e05e      	b.n	800a122 <oid2nid+0x6ca>
                    return PBE_SHA1_DES;
 800a064:	2302      	movs	r3, #2
 800a066:	e05c      	b.n	800a122 <oid2nid+0x6ca>
                    return PBE_SHA1_DES3;
 800a068:	2303      	movs	r3, #3
 800a06a:	e05a      	b.n	800a122 <oid2nid+0x6ca>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f240 12c9 	movw	r2, #457	; 0x1c9
 800a072:	4293      	cmp	r3, r2
 800a074:	d014      	beq.n	800a0a0 <oid2nid+0x648>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f5b3 7fe5 	cmp.w	r3, #458	; 0x1ca
 800a07c:	d22e      	bcs.n	800a0dc <oid2nid+0x684>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f240 12a1 	movw	r2, #417	; 0x1a1
 800a084:	4293      	cmp	r3, r2
 800a086:	d005      	beq.n	800a094 <oid2nid+0x63c>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f240 12b5 	movw	r2, #437	; 0x1b5
 800a08e:	4293      	cmp	r3, r2
 800a090:	d003      	beq.n	800a09a <oid2nid+0x642>
            #ifdef WOLFSSL_AES_256
                case AES256_WRAP:
                    return AES256_WRAP;
            #endif
            }
            break;
 800a092:	e023      	b.n	800a0dc <oid2nid+0x684>
                    return AES128_WRAP;
 800a094:	f240 13a1 	movw	r3, #417	; 0x1a1
 800a098:	e043      	b.n	800a122 <oid2nid+0x6ca>
                    return AES192_WRAP;
 800a09a:	f240 13b5 	movw	r3, #437	; 0x1b5
 800a09e:	e040      	b.n	800a122 <oid2nid+0x6ca>
                    return AES256_WRAP;
 800a0a0:	f240 13c9 	movw	r3, #457	; 0x1c9
 800a0a4:	e03d      	b.n	800a122 <oid2nid+0x6ca>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2bbd      	cmp	r3, #189	; 0xbd
 800a0aa:	d119      	bne.n	800a0e0 <oid2nid+0x688>
                case dhSinglePass_stdDH_sha224kdf_scheme:
                    return dhSinglePass_stdDH_sha224kdf_scheme;
                #endif
                #ifndef NO_SHA256
                case dhSinglePass_stdDH_sha256kdf_scheme:
                    return dhSinglePass_stdDH_sha256kdf_scheme;
 800a0ac:	23bd      	movs	r3, #189	; 0xbd
 800a0ae:	e038      	b.n	800a122 <oid2nid+0x6ca>
            break;
 800a0b0:	bf00      	nop
 800a0b2:	e016      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0b4:	bf00      	nop
 800a0b6:	e014      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0b8:	bf00      	nop
 800a0ba:	e012      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0bc:	bf00      	nop
 800a0be:	e010      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0c0:	bf00      	nop
 800a0c2:	e00e      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0c4:	bf00      	nop
 800a0c6:	e00c      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0c8:	bf00      	nop
 800a0ca:	e00a      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0cc:	bf00      	nop
 800a0ce:	e008      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0d0:	bf00      	nop
 800a0d2:	e006      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0d4:	bf00      	nop
 800a0d6:	e004      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0d8:	bf00      	nop
 800a0da:	e002      	b.n	800a0e2 <oid2nid+0x68a>
            break;
 800a0dc:	bf00      	nop
 800a0de:	e000      	b.n	800a0e2 <oid2nid+0x68a>
                #ifdef WOLFSSL_SHA512
                case dhSinglePass_stdDH_sha512kdf_scheme:
                    return dhSinglePass_stdDH_sha512kdf_scheme;
                #endif
            }
            break;
 800a0e0:	bf00      	nop

        default:
            WOLFSSL_MSG("NID not in table");
    }
    /* If not found in above switch then try the table */
    for (i = 0; i < WOLFSSL_OBJECT_INFO_SZ; i++) {
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60fb      	str	r3, [r7, #12]
 800a0e6:	e017      	b.n	800a118 <oid2nid+0x6c0>
        if (wolfssl_object_info[i].id == (int)oid) {
 800a0e8:	4911      	ldr	r1, [pc, #68]	; (800a130 <oid2nid+0x6d8>)
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d108      	bne.n	800a112 <oid2nid+0x6ba>
            return wolfssl_object_info[i].nid;
 800a100:	490b      	ldr	r1, [pc, #44]	; (800a130 <oid2nid+0x6d8>)
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	440b      	add	r3, r1
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	e007      	b.n	800a122 <oid2nid+0x6ca>
    for (i = 0; i < WOLFSSL_OBJECT_INFO_SZ; i++) {
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3301      	adds	r3, #1
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b4b      	cmp	r3, #75	; 0x4b
 800a11c:	d9e4      	bls.n	800a0e8 <oid2nid+0x690>
        }
    }

    return -1;
 800a11e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	080295d0 	.word	0x080295d0

0800a134 <SetIndividualExternal>:
/* when calling SetIndividualExternal, mpi should be cleared by caller if no
 * longer used. ie mp_free(mpi). This is to free data when fastmath is
 * disabled since a copy of mpi is made by this function and placed into bn.
 */
int SetIndividualExternal(WOLFSSL_BIGNUM** bn, mp_int* mpi)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
    byte dynamic = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	73fb      	strb	r3, [r7, #15]

#ifdef WOLFSSL_DEBUG_OPENSSL
    WOLFSSL_MSG("Entering SetIndividualExternal");
#endif

    if (mpi == NULL || bn == NULL) {
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SetIndividualExternal+0x1a>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d102      	bne.n	800a154 <SetIndividualExternal+0x20>
        WOLFSSL_MSG("mpi NULL error");
        return WOLFSSL_FATAL_ERROR;
 800a14e:	f04f 33ff 	mov.w	r3, #4294967295
 800a152:	e027      	b.n	800a1a4 <SetIndividualExternal+0x70>
    }

    if (*bn == NULL) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10d      	bne.n	800a178 <SetIndividualExternal+0x44>
        *bn = wolfSSL_BN_new();
 800a15c:	f000 f837 	bl	800a1ce <wolfSSL_BN_new>
 800a160:	4602      	mov	r2, r0
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
        if (*bn == NULL) {
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <SetIndividualExternal+0x40>
            WOLFSSL_MSG("SetIndividualExternal alloc failed");
            return WOLFSSL_FATAL_ERROR;
 800a16e:	f04f 33ff 	mov.w	r3, #4294967295
 800a172:	e017      	b.n	800a1a4 <SetIndividualExternal+0x70>
        }
        dynamic = 1;
 800a174:	2301      	movs	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]
    }

    if (mp_copy(mpi, (mp_int*)((*bn)->internal)) != MP_OKAY) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	4619      	mov	r1, r3
 800a180:	6838      	ldr	r0, [r7, #0]
 800a182:	f016 faba 	bl	80206fa <mp_copy>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <SetIndividualExternal+0x6e>
        WOLFSSL_MSG("mp_copy error");
        if (dynamic == 1) {
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d104      	bne.n	800a19c <SetIndividualExternal+0x68>
            wolfSSL_BN_free(*bn);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f83f 	bl	800a21a <wolfSSL_BN_free>
        }
        return WOLFSSL_FATAL_ERROR;
 800a19c:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a0:	e000      	b.n	800a1a4 <SetIndividualExternal+0x70>
    }

    return WOLFSSL_SUCCESS;
 800a1a2:	2301      	movs	r3, #1
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <InitwolfSSL_BigNum>:


static void InitwolfSSL_BigNum(WOLFSSL_BIGNUM* bn)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
    if (bn)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <InitwolfSSL_BigNum+0x1a>
        XMEMSET(bn, 0, sizeof(WOLFSSL_BIGNUM));
 800a1ba:	f44f 720d 	mov.w	r2, #564	; 0x234
 800a1be:	2100      	movs	r1, #0
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f017 f8b7 	bl	8021334 <memset>
}
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <wolfSSL_BN_new>:


WOLFSSL_BIGNUM* wolfSSL_BN_new(void)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
        WOLFSSL_MSG("wolfSSL_BN_new malloc mpi failure");
        return NULL;
    }
#endif

    external = (WOLFSSL_BIGNUM*) XMALLOC(sizeof(WOLFSSL_BIGNUM), NULL,
 800a1d4:	f44f 700d 	mov.w	r0, #564	; 0x234
 800a1d8:	f00e fce8 	bl	8018bac <wolfSSL_Malloc>
 800a1dc:	6078      	str	r0, [r7, #4]
                                        DYNAMIC_TYPE_BIGINT);
    if (external == NULL) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <wolfSSL_BN_new+0x1a>
        WOLFSSL_MSG("wolfSSL_BN_new malloc WOLFSSL_BIGNUM failure");
#if !defined(USE_FAST_MATH) || defined(HAVE_WOLF_BIGINT)
        XFREE(mpi, NULL, DYNAMIC_TYPE_BIGINT);
#endif
        return NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e014      	b.n	800a212 <wolfSSL_BN_new+0x44>
    }

#if defined(USE_FAST_MATH) && !defined(HAVE_WOLF_BIGINT)
    mpi = &external->fp;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	603b      	str	r3, [r7, #0]
#endif

    InitwolfSSL_BigNum(external);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff ffdc 	bl	800a1ac <InitwolfSSL_BigNum>
    if (mp_init(mpi) != MP_OKAY) {
 800a1f4:	6838      	ldr	r0, [r7, #0]
 800a1f6:	f016 f83b 	bl	8020270 <mp_init>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d004      	beq.n	800a20a <wolfSSL_BN_new+0x3c>
        wolfSSL_BN_free(external);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f80a 	bl	800a21a <wolfSSL_BN_free>
        return NULL;
 800a206:	2300      	movs	r3, #0
 800a208:	e003      	b.n	800a212 <wolfSSL_BN_new+0x44>
    }
    external->internal = mpi;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	605a      	str	r2, [r3, #4]

    return external;
 800a210:	687b      	ldr	r3, [r7, #4]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <wolfSSL_BN_free>:
    bn->internal = (void *)&bn->fp;
}
#endif

void wolfSSL_BN_free(WOLFSSL_BIGNUM* bn)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_DEBUG_OPENSSL
    WOLFSSL_MSG("wolfSSL_BN_free");
#endif
    if (bn) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d014      	beq.n	800a252 <wolfSSL_BN_free+0x38>
        if (bn->internal) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d008      	beq.n	800a242 <wolfSSL_BN_free+0x28>
            mp_int* bni = (mp_int*)bn->internal;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	60fb      	str	r3, [r7, #12]
            mp_free(bni);
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f016 f8af 	bl	802039a <mp_free>
#if !defined(USE_FAST_MATH) || defined(HAVE_WOLF_BIGINT)
            XFREE(bn->internal, NULL, DYNAMIC_TYPE_BIGINT);
#endif
            bn->internal = NULL;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	605a      	str	r2, [r3, #4]
        }
        XFREE(bn, NULL, DYNAMIC_TYPE_BIGINT);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60bb      	str	r3, [r7, #8]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d002      	beq.n	800a252 <wolfSSL_BN_free+0x38>
 800a24c:	68b8      	ldr	r0, [r7, #8]
 800a24e:	f00e fcc9 	bl	8018be4 <wolfSSL_Free>
        /* bn = NULL, don't try to access or double free it */
    }

}
 800a252:	bf00      	nop
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <wolfSSL_BN_clear_free>:

void wolfSSL_BN_clear_free(WOLFSSL_BIGNUM* bn)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_DEBUG_OPENSSL
    WOLFSSL_MSG("wolfSSL_BN_clear_free");
#endif
    if (bn) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00c      	beq.n	800a282 <wolfSSL_BN_clear_free+0x28>
        if (bn->internal) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <wolfSSL_BN_clear_free+0x22>
            mp_int* bni = (mp_int*)bn->internal;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	60fb      	str	r3, [r7, #12]
            mp_forcezero(bni);
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f016 f86b 	bl	8020352 <mp_forcezero>
        }
        wolfSSL_BN_free(bn);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff ffcc 	bl	800a21a <wolfSSL_BN_free>
    }
}
 800a282:	bf00      	nop
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <wolfSSL_X509_EXTENSION_free>:

    return newExt;
}

void wolfSSL_X509_EXTENSION_free(WOLFSSL_X509_EXTENSION* x)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b09a      	sub	sp, #104	; 0x68
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
    WOLFSSL_ASN1_STRING asn1;
    WOLFSSL_ENTER("wolfSSL_X509_EXTENSION_free");
    if (x == NULL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d044      	beq.n	800a322 <wolfSSL_X509_EXTENSION_free+0x98>
        return;

    if (x->obj != NULL) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d013      	beq.n	800a2c8 <wolfSSL_X509_EXTENSION_free+0x3e>
        if (x->obj->pathlen != NULL) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <wolfSSL_X509_EXTENSION_free+0x34>
            wolfSSL_ASN1_INTEGER_free(x->obj->pathlen);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe ffe7 	bl	8009284 <wolfSSL_ASN1_INTEGER_free>
            x->obj->pathlen = NULL;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	645a      	str	r2, [r3, #68]	; 0x44
        }
        wolfSSL_ASN1_OBJECT_free(x->obj);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fe30 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
    }

    asn1 = x->value;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f107 0008 	add.w	r0, r7, #8
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	2258      	movs	r2, #88	; 0x58
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f017 f806 	bl	80212e4 <memcpy>
    if (asn1.length > 0 && asn1.data != NULL && asn1.isDynamic)
 800a2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd11      	ble.n	800a302 <wolfSSL_X509_EXTENSION_free+0x78>
 800a2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00e      	beq.n	800a302 <wolfSSL_X509_EXTENSION_free+0x78>
 800a2e4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d007      	beq.n	800a302 <wolfSSL_X509_EXTENSION_free+0x78>
        XFREE(asn1.data, NULL, DYNAMIC_TYPE_OPENSSL);
 800a2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f4:	667b      	str	r3, [r7, #100]	; 0x64
 800a2f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <wolfSSL_X509_EXTENSION_free+0x78>
 800a2fc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a2fe:	f00e fc71 	bl	8018be4 <wolfSSL_Free>

    wolfSSL_sk_pop_free(x->ext_sk, NULL);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a308:	2100      	movs	r1, #0
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff f8c2 	bl	8009494 <wolfSSL_sk_pop_free>

    XFREE(x, NULL, DYNAMIC_TYPE_X509_EXT);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	663b      	str	r3, [r7, #96]	; 0x60
 800a314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <wolfSSL_X509_EXTENSION_free+0x9a>
 800a31a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a31c:	f00e fc62 	bl	8018be4 <wolfSSL_Free>
 800a320:	e000      	b.n	800a324 <wolfSSL_X509_EXTENSION_free+0x9a>
        return;
 800a322:	bf00      	nop
}
 800a324:	3768      	adds	r7, #104	; 0x68
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <ExternalFreeX509>:
    defined(OPENSSL_EXTRA)  || defined(OPENSSL_EXTRA_X509_SMALL)

/* user externally called free X509, if dynamic go ahead with free, otherwise
 * don't */
static void ExternalFreeX509(WOLFSSL_X509* x509)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
#if defined(OPENSSL_EXTRA_X509_SMALL) || defined(OPENSSL_EXTRA)
    int doFree = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
#endif

    WOLFSSL_ENTER("ExternalFreeX509");
    if (x509) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d020      	beq.n	800a37e <ExternalFreeX509+0x54>
#ifdef HAVE_EX_DATA_CLEANUP_HOOKS
        wolfSSL_CRYPTO_cleanup_ex_data(&x509->ex_data);
#endif
        if (x509->dynamicMemory) {
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01b      	beq.n	800a37e <ExternalFreeX509+0x54>
            if (wc_LockMutex(&x509->refMutex) != 0) {
                WOLFSSL_MSG("Couldn't lock x509 mutex");
            }
        #endif
            /* only free if all references to it are done */
            x509->refCount--;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a34c:	1e5a      	subs	r2, r3, #1
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            if (x509->refCount == 0)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <ExternalFreeX509+0x38>
                doFree = 1;
 800a35e:	2301      	movs	r3, #1
 800a360:	60fb      	str	r3, [r7, #12]
            wc_UnLockMutex(&x509->refMutex);
        #endif
        #endif /* OPENSSL_EXTRA_X509_SMALL || OPENSSL_EXTRA */

        #if defined(OPENSSL_EXTRA_X509_SMALL) || defined(OPENSSL_EXTRA)
            if (doFree)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00a      	beq.n	800a37e <ExternalFreeX509+0x54>
        #endif /* OPENSSL_EXTRA_X509_SMALL || OPENSSL_EXTRA */
            {
                FreeX509(x509);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7f9 fc82 	bl	8003c72 <FreeX509>
                XFREE(x509, x509->heap, DYNAMIC_TYPE_X509);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <ExternalFreeX509+0x54>
 800a378:	68b8      	ldr	r0, [r7, #8]
 800a37a:	f00e fc33 	bl	8018be4 <wolfSSL_Free>
            }
        } else {
            WOLFSSL_MSG("free called on non dynamic object, not freeing");
        }
    }
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <wolfSSL_X509_free>:

/* Frees an external WOLFSSL_X509 structure */
WOLFSSL_ABI
void wolfSSL_X509_free(WOLFSSL_X509* x509)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_FreeX509");
    ExternalFreeX509(x509);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff ffcb 	bl	800a32a <ExternalFreeX509>
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <wolfSSL_sk_X509_pop_free>:
 * sk  stack to free nodes in
 * f   X509 free function
 */
void wolfSSL_sk_X509_pop_free(STACK_OF(WOLFSSL_X509)* sk,
    void (*f) (WOLFSSL_X509*))
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
    WOLFSSL_ENTER("wolfSSL_sk_X509_pop_free");
    wolfSSL_sk_pop_free(sk, (wolfSSL_sk_freefunc)f);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff f873 	bl	8009494 <wolfSSL_sk_pop_free>
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <wolfSSL_ACCESS_DESCRIPTION_free>:
    wolfSSL_sk_ACCESS_DESCRIPTION_pop_free(sk, f);
}


void wolfSSL_ACCESS_DESCRIPTION_free(WOLFSSL_ACCESS_DESCRIPTION* a)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_ACCESS_DESCRIPTION_free");
    if (a == NULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d01a      	beq.n	800a3fa <wolfSSL_ACCESS_DESCRIPTION_free+0x44>
        return;

    if (a->method)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <wolfSSL_ACCESS_DESCRIPTION_free+0x20>
        wolfSSL_ASN1_OBJECT_free(a->method);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe fda9 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
    if (a->location)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d004      	beq.n	800a3e8 <wolfSSL_ACCESS_DESCRIPTION_free+0x32>
        wolfSSL_GENERAL_NAME_free(a->location);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f895 	bl	800a512 <wolfSSL_GENERAL_NAME_free>
    XFREE(a, NULL, DYNAMIC_TYPE_X509_EXT);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d004      	beq.n	800a3fc <wolfSSL_ACCESS_DESCRIPTION_free+0x46>
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f00e fbf6 	bl	8018be4 <wolfSSL_Free>
 800a3f8:	e000      	b.n	800a3fc <wolfSSL_ACCESS_DESCRIPTION_free+0x46>
        return;
 800a3fa:	bf00      	nop

    /* a = NULL, don't try to a or double free it */
}
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <wolfSSL_DIST_POINT_NAME_free>:
}
#endif /* OPENSSL_EXTRA || WOLFSSL_WPAS_SMALL */

#ifdef OPENSSL_EXTRA
static void wolfSSL_DIST_POINT_NAME_free(WOLFSSL_DIST_POINT_NAME* dpn)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
    if (dpn != NULL) {
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d011      	beq.n	800a434 <wolfSSL_DIST_POINT_NAME_free+0x32>
        if (dpn->name.fullname != NULL) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d005      	beq.n	800a424 <wolfSSL_DIST_POINT_NAME_free+0x22>
            wolfSSL_sk_X509_pop_free(dpn->name.fullname, NULL);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff ffbc 	bl	800a39c <wolfSSL_sk_X509_pop_free>
        }
        XFREE(dpn, NULL, DYNAMIC_TYPE_OPENSSL);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <wolfSSL_DIST_POINT_NAME_free+0x32>
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f00e fbd8 	bl	8018be4 <wolfSSL_Free>
    }
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <wolfSSL_DIST_POINT_free>:


/* Frees DIST_POINT objects.
*/
void wolfSSL_DIST_POINT_free(WOLFSSL_DIST_POINT* dp)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_DIST_POINT_free");
    if (dp != NULL) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00c      	beq.n	800a464 <wolfSSL_DIST_POINT_free+0x28>
        wolfSSL_DIST_POINT_NAME_free(dp->distpoint);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff ffd7 	bl	800a402 <wolfSSL_DIST_POINT_NAME_free>
        XFREE(dp, NULL, DYNAMIC_TYPE_OPENSSL);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <wolfSSL_DIST_POINT_free+0x28>
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f00e fbc0 	bl	8018be4 <wolfSSL_Free>
    }
}
 800a464:	bf00      	nop
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <wolfSSL_GENERAL_NAME_type_free>:
#endif /* OPENSSL_EXTRA */

#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_WPAS_SMALL)
/* free's the internal type for the general name */
static void wolfSSL_GENERAL_NAME_type_free(WOLFSSL_GENERAL_NAME* name)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
    if (name != NULL) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d047      	beq.n	800a50a <wolfSSL_GENERAL_NAME_type_free+0x9e>
        if (name->d.dNSName != NULL) {
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d007      	beq.n	800a492 <wolfSSL_GENERAL_NAME_type_free+0x26>
            wolfSSL_ASN1_STRING_free(name->d.dNSName);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fe0f 	bl	80090aa <wolfSSL_ASN1_STRING_free>
            name->d.dNSName = NULL;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	605a      	str	r2, [r3, #4]
        }
        if (name->d.dirn != NULL) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d007      	beq.n	800a4aa <wolfSSL_GENERAL_NAME_type_free+0x3e>
            wolfSSL_X509_NAME_free(name->d.dirn);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f9ef 	bl	800a882 <wolfSSL_X509_NAME_free>
            name->d.dirn = NULL;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	605a      	str	r2, [r3, #4]
        }
        if (name->d.uniformResourceIdentifier != NULL) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d007      	beq.n	800a4c2 <wolfSSL_GENERAL_NAME_type_free+0x56>
            wolfSSL_ASN1_STRING_free(name->d.uniformResourceIdentifier);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fdf7 	bl	80090aa <wolfSSL_ASN1_STRING_free>
            name->d.uniformResourceIdentifier = NULL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	605a      	str	r2, [r3, #4]
        }
        if (name->d.iPAddress != NULL) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d007      	beq.n	800a4da <wolfSSL_GENERAL_NAME_type_free+0x6e>
            wolfSSL_ASN1_STRING_free(name->d.iPAddress);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fdeb 	bl	80090aa <wolfSSL_ASN1_STRING_free>
            name->d.iPAddress = NULL;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	605a      	str	r2, [r3, #4]
        }
        if (name->d.registeredID != NULL) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d007      	beq.n	800a4f2 <wolfSSL_GENERAL_NAME_type_free+0x86>
            wolfSSL_ASN1_OBJECT_free(name->d.registeredID);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fd1e 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
            name->d.registeredID = NULL;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	605a      	str	r2, [r3, #4]
        }
        if (name->d.ia5 != NULL) {
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d007      	beq.n	800a50a <wolfSSL_GENERAL_NAME_type_free+0x9e>
            wolfSSL_ASN1_STRING_free(name->d.ia5);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fdd3 	bl	80090aa <wolfSSL_ASN1_STRING_free>
            name->d.ia5 = NULL;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	605a      	str	r2, [r3, #4]
        }
    }
}
 800a50a:	bf00      	nop
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <wolfSSL_GENERAL_NAME_free>:


/* Frees GENERAL_NAME objects.
*/
void wolfSSL_GENERAL_NAME_free(WOLFSSL_GENERAL_NAME* name)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_GENERAL_NAME_Free");
    if (name != NULL) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <wolfSSL_GENERAL_NAME_free+0x24>
        wolfSSL_GENERAL_NAME_type_free(name);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff ffa3 	bl	800a46c <wolfSSL_GENERAL_NAME_type_free>
        XFREE(name, NULL, DYNAMIC_TYPE_OPENSSL);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <wolfSSL_GENERAL_NAME_free+0x24>
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f00e fb57 	bl	8018be4 <wolfSSL_Free>
    }
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <wolfSSL_sk_X509_EXTENSION_pop_free>:

/* frees all of the nodes and the values in stack */
void wolfSSL_sk_X509_EXTENSION_pop_free(
        WOLF_STACK_OF(WOLFSSL_X509_EXTENSION)* sk,
        void (*f) (WOLFSSL_X509_EXTENSION*))
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
    wolfSSL_sk_pop_free(sk, (wolfSSL_sk_freefunc)f);
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7fe ffa2 	bl	8009494 <wolfSSL_sk_pop_free>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <loadX509orX509REQFromBuffer>:
}
#endif /* !NO_FILESYSTEM */

static WOLFSSL_X509* loadX509orX509REQFromBuffer(
    const unsigned char* buf, int sz, int format, int type)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08e      	sub	sp, #56	; 0x38
 800a55c:	af04      	add	r7, sp, #16
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]

    int ret;
    WOLFSSL_X509* x509 = NULL;
 800a566:	2300      	movs	r3, #0
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
    DerBuffer* der = NULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	617b      	str	r3, [r7, #20]

    WOLFSSL_ENTER("wolfSSL_X509_load_certificate_ex");

    if (format == WOLFSSL_FILETYPE_PEM) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d115      	bne.n	800a5a0 <loadX509orX509REQFromBuffer+0x48>
    #ifdef WOLFSSL_PEM_TO_DER
        if (PemToDer(buf, sz, type, &der, NULL, NULL, NULL) != 0) {
 800a574:	f107 0314 	add.w	r3, r7, #20
 800a578:	2200      	movs	r2, #0
 800a57a:	9202      	str	r2, [sp, #8]
 800a57c:	2200      	movs	r2, #0
 800a57e:	9201      	str	r2, [sp, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	9200      	str	r2, [sp, #0]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f009 f9c9 	bl	8013920 <PemToDer>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d017      	beq.n	800a5c4 <loadX509orX509REQFromBuffer+0x6c>
            FreeDer(&der);
 800a594:	f107 0314 	add.w	r3, r7, #20
 800a598:	4618      	mov	r0, r3
 800a59a:	f008 ff09 	bl	80133b0 <FreeDer>
 800a59e:	e011      	b.n	800a5c4 <loadX509orX509REQFromBuffer+0x6c>
    #else
        ret = NOT_COMPILED_IN;
    #endif
    }
    else {
        ret = AllocDer(&der, (word32)sz, type, NULL);
 800a5a0:	68b9      	ldr	r1, [r7, #8]
 800a5a2:	f107 0014 	add.w	r0, r7, #20
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	f008 fe8b 	bl	80132c4 <AllocDer>
 800a5ae:	6238      	str	r0, [r7, #32]
        if (ret == 0) {
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <loadX509orX509REQFromBuffer+0x6c>
            XMEMCPY(der->buffer, buf, sz);
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	68f9      	ldr	r1, [r7, #12]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f016 fe90 	bl	80212e4 <memcpy>
        }
    }

    /* At this point we want `der` to have the certificate in DER format */
    /* ready to be decoded. */
    if (der != NULL && der->buffer != NULL) {
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d045      	beq.n	800a656 <loadX509orX509REQFromBuffer+0xfe>
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d041      	beq.n	800a656 <loadX509orX509REQFromBuffer+0xfe>
    #else
        DecodedCert  cert[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), NULL,
 800a5d2:	f240 406c 	movw	r0, #1132	; 0x46c
 800a5d6:	f00e fae9 	bl	8018bac <wolfSSL_Malloc>
 800a5da:	61f8      	str	r0, [r7, #28]
                                     DYNAMIC_TYPE_DCERT);
        if (cert != NULL)
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d034      	beq.n	800a64c <loadX509orX509REQFromBuffer+0xf4>
    #endif
        {
            InitDecodedCert(cert, der->buffer, der->length, NULL);
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	6819      	ldr	r1, [r3, #0]
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	69f8      	ldr	r0, [r7, #28]
 800a5ee:	f004 fd02 	bl	800eff6 <InitDecodedCert>
            if (ParseCertRelative(cert, type, 0, NULL) == 0) {
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	69f8      	ldr	r0, [r7, #28]
 800a5fa:	f008 fb14 	bl	8012c26 <ParseCertRelative>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d118      	bne.n	800a636 <loadX509orX509REQFromBuffer+0xde>
                x509 = (WOLFSSL_X509*)XMALLOC(sizeof(WOLFSSL_X509), NULL,
 800a604:	f640 4068 	movw	r0, #3176	; 0xc68
 800a608:	f00e fad0 	bl	8018bac <wolfSSL_Malloc>
 800a60c:	6278      	str	r0, [r7, #36]	; 0x24
                                                             DYNAMIC_TYPE_X509);
                if (x509 != NULL) {
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	2b00      	cmp	r3, #0
 800a612:	d010      	beq.n	800a636 <loadX509orX509REQFromBuffer+0xde>
                    InitX509(x509, 1, NULL);
 800a614:	2200      	movs	r2, #0
 800a616:	2101      	movs	r1, #1
 800a618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a61a:	f7f9 faf9 	bl	8003c10 <InitX509>
                    if (CopyDecodedToX509(x509, cert) != 0) {
 800a61e:	69f9      	ldr	r1, [r7, #28]
 800a620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a622:	f7fa f9de 	bl	80049e2 <CopyDecodedToX509>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d004      	beq.n	800a636 <loadX509orX509REQFromBuffer+0xde>
                        wolfSSL_X509_free(x509);
 800a62c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a62e:	f7ff feaa 	bl	800a386 <wolfSSL_X509_free>
                        x509 = NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }

            FreeDecodedCert(cert);
 800a636:	69f8      	ldr	r0, [r7, #28]
 800a638:	f004 fd7c 	bl	800f134 <FreeDecodedCert>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(cert, NULL, DYNAMIC_TYPE_DCERT);
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	61bb      	str	r3, [r7, #24]
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <loadX509orX509REQFromBuffer+0xf4>
 800a646:	69b8      	ldr	r0, [r7, #24]
 800a648:	f00e facc 	bl	8018be4 <wolfSSL_Free>
        #endif
        }

        FreeDer(&der);
 800a64c:	f107 0314 	add.w	r3, r7, #20
 800a650:	4618      	mov	r0, r3
 800a652:	f008 fead 	bl	80133b0 <FreeDer>
    }

    return x509;
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3728      	adds	r7, #40	; 0x28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <wolfSSL_X509_load_certificate_buffer>:

WOLFSSL_X509* wolfSSL_X509_load_certificate_buffer(
    const unsigned char* buf, int sz, int format)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
    return loadX509orX509REQFromBuffer(buf, sz,
 800a66c:	2300      	movs	r3, #0
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff ff70 	bl	800a558 <loadX509orX509REQFromBuffer>
 800a678:	4603      	mov	r3, r0
            format, CERT_TYPE);
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <wolfSSL_X509_get_pubkey>:
/* Creates a new WOLFSSL_EVP_PKEY structure that has the public key from x509
 *
 * returns a pointer to the created WOLFSSL_EVP_PKEY on success and NULL on fail
 */
WOLFSSL_EVP_PKEY* wolfSSL_X509_get_pubkey(WOLFSSL_X509* x509)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b086      	sub	sp, #24
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
    WOLFSSL_EVP_PKEY* key = NULL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
    int ret;

    (void)ret;

    WOLFSSL_ENTER("X509_get_pubkey");
    if (x509 != NULL) {
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 80c0 	beq.w	800a816 <wolfSSL_X509_get_pubkey+0x194>
        key = wolfSSL_EVP_PKEY_new_ex(x509->heap);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fb f9c7 	bl	8005a30 <wolfSSL_EVP_PKEY_new_ex>
 800a6a2:	6178      	str	r0, [r7, #20]
        if (key != NULL) {
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80b5 	beq.w	800a816 <wolfSSL_X509_get_pubkey+0x194>
            if (x509->pubKeyOID == RSAk) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6b2:	f240 2285 	movw	r2, #645	; 0x285
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d103      	bne.n	800a6c2 <wolfSSL_X509_get_pubkey+0x40>
                key->type = EVP_PKEY_RSA;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2210      	movs	r2, #16
 800a6be:	605a      	str	r2, [r3, #4]
 800a6c0:	e00d      	b.n	800a6de <wolfSSL_X509_get_pubkey+0x5c>
            }
            else if (x509->pubKeyOID == DSAk) {
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c8:	f240 2203 	movw	r2, #515	; 0x203
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d103      	bne.n	800a6d8 <wolfSSL_X509_get_pubkey+0x56>
                key->type = EVP_PKEY_DSA;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2211      	movs	r2, #17
 800a6d4:	605a      	str	r2, [r3, #4]
 800a6d6:	e002      	b.n	800a6de <wolfSSL_X509_get_pubkey+0x5c>
            }
            else {
                key->type = EVP_PKEY_EC;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2212      	movs	r2, #18
 800a6dc:	605a      	str	r2, [r3, #4]
            }
            key->save_type = 0;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	609a      	str	r2, [r3, #8]
            key->pkey.ptr = (char*)XMALLOC(
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f00e fa5e 	bl	8018bac <wolfSSL_Malloc>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	615a      	str	r2, [r3, #20]
                        x509->pubKey.length, x509->heap,
                                                       DYNAMIC_TYPE_PUBLIC_KEY);
            if (key->pkey.ptr == NULL) {
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d104      	bne.n	800a708 <wolfSSL_X509_get_pubkey+0x86>
                wolfSSL_EVP_PKEY_free(key);
 800a6fe:	6978      	ldr	r0, [r7, #20]
 800a700:	f7fb f9c5 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                return NULL;
 800a704:	2300      	movs	r3, #0
 800a706:	e087      	b.n	800a818 <wolfSSL_X509_get_pubkey+0x196>
            }
            XMEMCPY(key->pkey.ptr, x509->pubKey.buffer, x509->pubKey.length);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	6958      	ldr	r0, [r3, #20]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a716:	461a      	mov	r2, r3
 800a718:	f016 fde4 	bl	80212e4 <memcpy>
            key->pkey_sz = x509->pubKey.length;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a722:	461a      	mov	r2, r3
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	60da      	str	r2, [r3, #12]

            #ifdef HAVE_ECC
                key->pkey_curve = (int)x509->pkCurveOID;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a72e:	461a      	mov	r2, r3
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	651a      	str	r2, [r3, #80]	; 0x50
            #endif /* HAVE_ECC */

            /* decode RSA key */
            #ifndef NO_RSA
            if (key->type == EVP_PKEY_RSA) {
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	2b10      	cmp	r3, #16
 800a73a:	d125      	bne.n	800a788 <wolfSSL_X509_get_pubkey+0x106>
                key->ownRsa = 1;
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	f892 3056 	ldrb.w	r3, [r2, #86]	; 0x56
 800a742:	f043 0308 	orr.w	r3, r3, #8
 800a746:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
                key->rsa = wolfSSL_RSA_new();
 800a74a:	f7fb fbe5 	bl	8005f18 <wolfSSL_RSA_new>
 800a74e:	4602      	mov	r2, r0
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	619a      	str	r2, [r3, #24]
                if (key->rsa == NULL) {
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d104      	bne.n	800a766 <wolfSSL_X509_get_pubkey+0xe4>
                    wolfSSL_EVP_PKEY_free(key);
 800a75c:	6978      	ldr	r0, [r7, #20]
 800a75e:	f7fb f996 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	e058      	b.n	800a818 <wolfSSL_X509_get_pubkey+0x196>
                }

                if (wolfSSL_RSA_LoadDer_ex(key->rsa,
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	6998      	ldr	r0, [r3, #24]
                            (const unsigned char*)key->pkey.ptr, key->pkey_sz,
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	6959      	ldr	r1, [r3, #20]
                if (wolfSSL_RSA_LoadDer_ex(key->rsa,
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	2302      	movs	r3, #2
 800a774:	f7fb fbda 	bl	8005f2c <wolfSSL_RSA_LoadDer_ex>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d004      	beq.n	800a788 <wolfSSL_X509_get_pubkey+0x106>
                            WOLFSSL_RSA_LOAD_PUBLIC) != WOLFSSL_SUCCESS) {
                    wolfSSL_EVP_PKEY_free(key);
 800a77e:	6978      	ldr	r0, [r7, #20]
 800a780:	f7fb f985 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 800a784:	2300      	movs	r3, #0
 800a786:	e047      	b.n	800a818 <wolfSSL_X509_get_pubkey+0x196>
            }
            #endif /* NO_RSA */

            /* decode ECC key */
            #if defined(HAVE_ECC) && defined(OPENSSL_EXTRA)
            if (key->type == EVP_PKEY_EC) {
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	2b12      	cmp	r3, #18
 800a78e:	d142      	bne.n	800a816 <wolfSSL_X509_get_pubkey+0x194>
                word32 idx = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]

                key->ownEcc = 1;
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	f892 3056 	ldrb.w	r3, [r2, #86]	; 0x56
 800a79a:	f043 0302 	orr.w	r3, r3, #2
 800a79e:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
                key->ecc = wolfSSL_EC_KEY_new();
 800a7a2:	f7fb feb2 	bl	800650a <wolfSSL_EC_KEY_new>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	61da      	str	r2, [r3, #28]
                if (key->ecc == NULL || key->ecc->internal == NULL) {
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <wolfSSL_X509_get_pubkey+0x13c>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d104      	bne.n	800a7c8 <wolfSSL_X509_get_pubkey+0x146>
                    wolfSSL_EVP_PKEY_free(key);
 800a7be:	6978      	ldr	r0, [r7, #20]
 800a7c0:	f7fb f965 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e027      	b.n	800a818 <wolfSSL_X509_get_pubkey+0x196>
                }

                /* not using wolfSSL_EC_KEY_LoadDer because public key in x509
                 * is in the format of x963 (no sequence at start of buffer) */
                ret = wc_EccPublicKeyDecode((const unsigned char*)key->pkey.ptr,
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	6958      	ldr	r0, [r3, #20]
                                            &idx, (ecc_key*)key->ecc->internal,
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	68da      	ldr	r2, [r3, #12]
                                            key->pkey_sz);
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	68db      	ldr	r3, [r3, #12]
                ret = wc_EccPublicKeyDecode((const unsigned char*)key->pkey.ptr,
 800a7d6:	f107 010c 	add.w	r1, r7, #12
 800a7da:	f009 fddc 	bl	8014396 <wc_EccPublicKeyDecode>
 800a7de:	6138      	str	r0, [r7, #16]
                if (ret < 0) {
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	da04      	bge.n	800a7f0 <wolfSSL_X509_get_pubkey+0x16e>
                    WOLFSSL_ERROR_VERBOSE(ret);
                    WOLFSSL_MSG("wc_EccPublicKeyDecode failed");
                    wolfSSL_EVP_PKEY_free(key);
 800a7e6:	6978      	ldr	r0, [r7, #20]
 800a7e8:	f7fb f951 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e013      	b.n	800a818 <wolfSSL_X509_get_pubkey+0x196>
                }

                if (SetECKeyExternal(key->ecc) != WOLFSSL_SUCCESS) {
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fb fd85 	bl	8006304 <SetECKeyExternal>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d004      	beq.n	800a80a <wolfSSL_X509_get_pubkey+0x188>
                    WOLFSSL_MSG("SetECKeyExternal failed");
                    wolfSSL_EVP_PKEY_free(key);
 800a800:	6978      	ldr	r0, [r7, #20]
 800a802:	f7fb f944 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
                    return NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	e006      	b.n	800a818 <wolfSSL_X509_get_pubkey+0x196>
                }

                key->ecc->inSet = 1;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	69da      	ldr	r2, [r3, #28]
 800a80e:	7e13      	ldrb	r3, [r2, #24]
 800a810:	f043 0301 	orr.w	r3, r3, #1
 800a814:	7613      	strb	r3, [r2, #24]
                }
            }
            #endif /* NO_DSA */
        }
    }
    return key;
 800a816:	697b      	ldr	r3, [r7, #20]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <wolfSSL_X509_ALGOR_new>:
#ifdef OPENSSL_EXTRA

#if defined(OPENSSL_ALL) || defined(WOLFSSL_APACHE_HTTPD) \
    || defined(WOLFSSL_HAPROXY) || defined(WOLFSSL_WPAS)
WOLFSSL_X509_ALGOR* wolfSSL_X509_ALGOR_new(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
    WOLFSSL_X509_ALGOR* ret;
    ret = (WOLFSSL_X509_ALGOR*)XMALLOC(sizeof(WOLFSSL_X509_ALGOR), NULL,
 800a826:	2008      	movs	r0, #8
 800a828:	f00e f9c0 	bl	8018bac <wolfSSL_Malloc>
 800a82c:	6078      	str	r0, [r7, #4]
                                       DYNAMIC_TYPE_OPENSSL);
    if (ret) {
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d004      	beq.n	800a83e <wolfSSL_X509_ALGOR_new+0x1e>
        XMEMSET(ret, 0, sizeof(WOLFSSL_X509_ALGOR));
 800a834:	2208      	movs	r2, #8
 800a836:	2100      	movs	r1, #0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f016 fd7b 	bl	8021334 <memset>
    }
    return ret;
 800a83e:	687b      	ldr	r3, [r7, #4]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <wolfSSL_X509_ALGOR_free>:

void wolfSSL_X509_ALGOR_free(WOLFSSL_X509_ALGOR *alg)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
    if (alg) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d011      	beq.n	800a87a <wolfSSL_X509_ALGOR_free+0x32>
        wolfSSL_ASN1_OBJECT_free(alg->algorithm);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fb64 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
        wolfSSL_ASN1_TYPE_free(alg->parameter);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe fda1 	bl	80093ac <wolfSSL_ASN1_TYPE_free>
        XFREE(alg, NULL, DYNAMIC_TYPE_OPENSSL);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <wolfSSL_X509_ALGOR_free+0x32>
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f00e f9b5 	bl	8018be4 <wolfSSL_Free>
    }
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <wolfSSL_X509_NAME_free>:
}
#endif

#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
    void wolfSSL_X509_NAME_free(WOLFSSL_X509_NAME *name)
    {
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
        WOLFSSL_ENTER("wolfSSL_X509_NAME_free");
        FreeX509Name(name);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7f9 f94d 	bl	8003b2a <FreeX509Name>
        XFREE(name, NULL, DYNAMIC_TYPE_X509);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <wolfSSL_X509_NAME_free+0x1e>
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f00e f9a2 	bl	8018be4 <wolfSSL_Free>
    }
 800a8a0:	bf00      	nop
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <wolfSSL_X509_NAME_new>:
    /* Malloc's a new WOLFSSL_X509_NAME structure
     *
     * returns NULL on failure, otherwise returns a new structure.
     */
    WOLFSSL_X509_NAME* wolfSSL_X509_NAME_new(void)
    {
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
        WOLFSSL_X509_NAME* name;

        WOLFSSL_ENTER("wolfSSL_X509_NAME_new");

        name = (WOLFSSL_X509_NAME*)XMALLOC(sizeof(WOLFSSL_X509_NAME), NULL,
 800a8ae:	f240 40d4 	movw	r0, #1236	; 0x4d4
 800a8b2:	f00e f97b 	bl	8018bac <wolfSSL_Malloc>
 800a8b6:	6078      	str	r0, [r7, #4]
                DYNAMIC_TYPE_X509);
        if (name != NULL) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <wolfSSL_X509_NAME_new+0x20>
            InitX509Name(name, 1, NULL);
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7f9 f912 	bl	8003aec <InitX509Name>
        }
        return name;
 800a8c8:	687b      	ldr	r3, [r7, #4]
    }
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <wolfSSL_X509_PKEY_free>:
#endif /* !NO_BIO */


    /* free up all memory used by "xPkey" passed in */
    static void wolfSSL_X509_PKEY_free(WOLFSSL_X509_PKEY* xPkey)
    {
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
        if (xPkey != NULL) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00c      	beq.n	800a8fa <wolfSSL_X509_PKEY_free+0x28>
            wolfSSL_EVP_PKEY_free(xPkey->dec_pkey);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fb f8d2 	bl	8005a8e <wolfSSL_EVP_PKEY_free>
            XFREE(xPkey, xPkey->heap, DYNAMIC_TYPE_KEY);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <wolfSSL_X509_PKEY_free+0x28>
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f00e f975 	bl	8018be4 <wolfSSL_Free>
        }
    }
 800a8fa:	bf00      	nop
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <wolfSSL_X509_NAME_ENTRY_free>:
    }
#endif /* !NO_BIO */
#endif /* OPENSSL_ALL */

    void wolfSSL_X509_NAME_ENTRY_free(WOLFSSL_X509_NAME_ENTRY* ne)
    {
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
        WOLFSSL_ENTER("wolfSSL_X509_NAME_ENTRY_free");
        if (ne != NULL) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d015      	beq.n	800a93c <wolfSSL_X509_NAME_ENTRY_free+0x3a>
            wolfSSL_ASN1_OBJECT_free(ne->object);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe fb07 	bl	8008f28 <wolfSSL_ASN1_OBJECT_free>
            if (ne->value != NULL) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <wolfSSL_X509_NAME_ENTRY_free+0x2a>
                wolfSSL_ASN1_STRING_free(ne->value);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fbbf 	bl	80090aa <wolfSSL_ASN1_STRING_free>
            }
            XFREE(ne, NULL, DYNAMIC_TYPE_NAME_ENTRY);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <wolfSSL_X509_NAME_ENTRY_free+0x3a>
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f00e f954 	bl	8018be4 <wolfSSL_Free>
        }
    }
 800a93c:	bf00      	nop
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <wolfSSL_X509_NAME_ENTRY_new>:


    WOLFSSL_X509_NAME_ENTRY* wolfSSL_X509_NAME_ENTRY_new(void)
    {
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
        WOLFSSL_X509_NAME_ENTRY* ne;

        ne = (WOLFSSL_X509_NAME_ENTRY*)XMALLOC(sizeof(WOLFSSL_X509_NAME_ENTRY),
 800a94a:	2014      	movs	r0, #20
 800a94c:	f00e f92e 	bl	8018bac <wolfSSL_Malloc>
 800a950:	6078      	str	r0, [r7, #4]
                NULL, DYNAMIC_TYPE_NAME_ENTRY);
        if (ne != NULL) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <wolfSSL_X509_NAME_ENTRY_new+0x1e>
            XMEMSET(ne, 0, sizeof(WOLFSSL_X509_NAME_ENTRY));
 800a958:	2214      	movs	r2, #20
 800a95a:	2100      	movs	r1, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f016 fce9 	bl	8021334 <memset>
        }

        return ne;
 800a962:	687b      	ldr	r3, [r7, #4]
    }
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <wolfSSL_X509_NAME_ENTRY_create_by_NID>:
     * returns a pointer to WOLFSSL_X509_NAME_ENTRY on success and NULL on fail
     */
    WOLFSSL_X509_NAME_ENTRY* wolfSSL_X509_NAME_ENTRY_create_by_NID(
            WOLFSSL_X509_NAME_ENTRY** out, int nid, int type,
            const unsigned char* data, int dataSz)
    {
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]

#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_X509_NAME_ENTRY_create_by_NID()");
#endif

        if (!data) {
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x18>
            WOLFSSL_MSG("Bad parameter");
            return NULL;
 800a980:	2300      	movs	r3, #0
 800a982:	e03c      	b.n	800a9fe <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x92>
        }

        if (out == NULL || *out == NULL) {
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x26>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10e      	bne.n	800a9b0 <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x44>
            ne = wolfSSL_X509_NAME_ENTRY_new();
 800a992:	f7ff ffd7 	bl	800a944 <wolfSSL_X509_NAME_ENTRY_new>
 800a996:	6178      	str	r0, [r7, #20]
            if (ne == NULL) {
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x36>
                return NULL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e02d      	b.n	800a9fe <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x92>
            }
            if (out != NULL) {
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d006      	beq.n	800a9b6 <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x4a>
                *out = ne;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	601a      	str	r2, [r3, #0]
            if (out != NULL) {
 800a9ae:	e002      	b.n	800a9b6 <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x4a>
            }
        }
        else {
            ne = *out;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	617b      	str	r3, [r7, #20]
        }

        ne->nid = nid;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	609a      	str	r2, [r3, #8]
        ne->object = wolfSSL_OBJ_nid2obj_ex(nid, ne->object);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	68b8      	ldr	r0, [r7, #8]
 800a9c4:	f7fe fe16 	bl	80095f4 <wolfSSL_OBJ_nid2obj_ex>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	601a      	str	r2, [r3, #0]
        ne->value = wolfSSL_ASN1_STRING_type_new(type);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7fe fb97 	bl	8009102 <wolfSSL_ASN1_STRING_type_new>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	605a      	str	r2, [r3, #4]
        if (ne->value != NULL) {
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00c      	beq.n	800a9fc <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x90>
            if (wolfSSL_ASN1_STRING_set(ne->value, (const void*)data, dataSz)
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	6a3a      	ldr	r2, [r7, #32]
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe fbae 	bl	800914c <wolfSSL_ASN1_STRING_set>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d102      	bne.n	800a9fc <wolfSSL_X509_NAME_ENTRY_create_by_NID+0x90>
                    == WOLFSSL_SUCCESS) {
                ne->set = 1;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	60da      	str	r2, [r3, #12]
            }
        }

        return ne;
 800a9fc:	697b      	ldr	r3, [r7, #20]
    }
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <AddAllEntry>:
     * since number of entries is small, a brute force search is used here
     * returns the number of entries added
     */
    static int AddAllEntry(WOLFSSL_X509_NAME* name, char* fullName,
            int fullNameSz, int* idx)
    {
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08a      	sub	sp, #40	; 0x28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
        int i;
        int ret = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	623b      	str	r3, [r7, #32]

        for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1e:	e079      	b.n	800ab14 <AddAllEntry+0x10c>
            if (name->entry[i].set) {
 800aa20:	68f9      	ldr	r1, [r7, #12]
 800aa22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	440b      	add	r3, r1
 800aa2e:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d06a      	beq.n	800ab0e <AddAllEntry+0x106>
                WOLFSSL_ASN1_OBJECT* obj;

                int sz;
                unsigned char* data;

                e = &name->entry[i];
 800aa38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	61fb      	str	r3, [r7, #28]
                obj = wolfSSL_X509_NAME_ENTRY_get_object(e);
 800aa4c:	69f8      	ldr	r0, [r7, #28]
 800aa4e:	f7fe fedf 	bl	8009810 <wolfSSL_X509_NAME_ENTRY_get_object>
 800aa52:	61b8      	str	r0, [r7, #24]
                if (obj == NULL) {
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d102      	bne.n	800aa60 <AddAllEntry+0x58>
                    return BAD_FUNC_ARG;
 800aa5a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800aa5e:	e05d      	b.n	800ab1c <AddAllEntry+0x114>
                }

                XMEMCPY(fullName + *idx, "/", 1); *idx = *idx + 1;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	461a      	mov	r2, r3
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4413      	add	r3, r2
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	492d      	ldr	r1, [pc, #180]	; (800ab24 <AddAllEntry+0x11c>)
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f016 fc38 	bl	80212e4 <memcpy>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	601a      	str	r2, [r3, #0]
                sz = (int)XSTRLEN(obj->sName);
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	3308      	adds	r3, #8
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7f5 fbbe 	bl	8000204 <strlen>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	617b      	str	r3, [r7, #20]
                XMEMCPY(fullName + *idx, obj->sName, sz);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	1898      	adds	r0, r3, r2
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	3308      	adds	r3, #8
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f016 fc21 	bl	80212e4 <memcpy>
                *idx += sz;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	441a      	add	r2, r3
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	601a      	str	r2, [r3, #0]
                XMEMCPY(fullName + *idx, "=", 1); *idx = *idx + 1;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	4413      	add	r3, r2
 800aab8:	2201      	movs	r2, #1
 800aaba:	491b      	ldr	r1, [pc, #108]	; (800ab28 <AddAllEntry+0x120>)
 800aabc:	4618      	mov	r0, r3
 800aabe:	f016 fc11 	bl	80212e4 <memcpy>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	601a      	str	r2, [r3, #0]

                data = wolfSSL_ASN1_STRING_data(e->value);
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fe fbb5 	bl	8009240 <wolfSSL_ASN1_STRING_data>
 800aad6:	6138      	str	r0, [r7, #16]
                if (data != NULL) {
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d014      	beq.n	800ab08 <AddAllEntry+0x100>
                    sz = (int)XSTRLEN((const char*)data);
 800aade:	6938      	ldr	r0, [r7, #16]
 800aae0:	f7f5 fb90 	bl	8000204 <strlen>
 800aae4:	4603      	mov	r3, r0
 800aae6:	617b      	str	r3, [r7, #20]
                    XMEMCPY(fullName + *idx, data, sz);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	6939      	ldr	r1, [r7, #16]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f016 fbf4 	bl	80212e4 <memcpy>
                    *idx += sz;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	441a      	add	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	601a      	str	r2, [r3, #0]
                }

                ret++;
 800ab08:	6a3b      	ldr	r3, [r7, #32]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	623b      	str	r3, [r7, #32]
        for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	3301      	adds	r3, #1
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	2b0f      	cmp	r3, #15
 800ab18:	dd82      	ble.n	800aa20 <AddAllEntry+0x18>
            }
        }
        (void)fullNameSz;
        return ret;
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
    }
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3728      	adds	r7, #40	; 0x28
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	08024508 	.word	0x08024508
 800ab28:	0802450c 	.word	0x0802450c

0800ab2c <RebuildFullName>:


    /* Converts a list of entries in WOLFSSL_X509_NAME struct into a string
     * returns 0 on success */
    static int RebuildFullName(WOLFSSL_X509_NAME* name)
    {
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08c      	sub	sp, #48	; 0x30
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
        int totalLen = 0, i, idx, entryCount = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab38:	2300      	movs	r3, #0
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
        char* fullName;

        if (name == NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d102      	bne.n	800ab48 <RebuildFullName+0x1c>
            return BAD_FUNC_ARG;
 800ab42:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ab46:	e080      	b.n	800ac4a <RebuildFullName+0x11e>

        for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800ab48:	2300      	movs	r3, #0
 800ab4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab4c:	e035      	b.n	800abba <RebuildFullName+0x8e>
            if (name->entry[i].set) {
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d026      	beq.n	800abb4 <RebuildFullName+0x88>
                WOLFSSL_X509_NAME_ENTRY* e;
                WOLFSSL_ASN1_OBJECT* obj;

                e = &name->entry[i];
 800ab66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	4413      	add	r3, r2
 800ab78:	617b      	str	r3, [r7, #20]
                obj = wolfSSL_X509_NAME_ENTRY_get_object(e);
 800ab7a:	6978      	ldr	r0, [r7, #20]
 800ab7c:	f7fe fe48 	bl	8009810 <wolfSSL_X509_NAME_ENTRY_get_object>
 800ab80:	6138      	str	r0, [r7, #16]
                if (obj == NULL)
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d102      	bne.n	800ab8e <RebuildFullName+0x62>
                    return BAD_FUNC_ARG;
 800ab88:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ab8c:	e05d      	b.n	800ac4a <RebuildFullName+0x11e>

                totalLen += (int)XSTRLEN(obj->sName) + 2;/*+2 for '/' and '=' */
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	3308      	adds	r3, #8
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7f5 fb36 	bl	8000204 <strlen>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab9e:	4413      	add	r3, r2
 800aba0:	62fb      	str	r3, [r7, #44]	; 0x2c
                totalLen += wolfSSL_ASN1_STRING_length(e->value);
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe fb5b 	bl	8009262 <wolfSSL_ASN1_STRING_length>
 800abac:	4602      	mov	r2, r0
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	4413      	add	r3, r2
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	3301      	adds	r3, #1
 800abb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	2b0f      	cmp	r3, #15
 800abbe:	ddc6      	ble.n	800ab4e <RebuildFullName+0x22>
            }
        }

        fullName = (char*)XMALLOC(totalLen + 1, name->heap, DYNAMIC_TYPE_X509);
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc2:	3301      	adds	r3, #1
 800abc4:	4618      	mov	r0, r3
 800abc6:	f00d fff1 	bl	8018bac <wolfSSL_Malloc>
 800abca:	6238      	str	r0, [r7, #32]
        if (fullName == NULL)
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d102      	bne.n	800abd8 <RebuildFullName+0xac>
            return MEMORY_E;
 800abd2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800abd6:	e038      	b.n	800ac4a <RebuildFullName+0x11e>

        idx = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]
        entryCount = AddAllEntry(name, fullName, totalLen, &idx);
 800abdc:	f107 030c 	add.w	r3, r7, #12
 800abe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abe2:	6a39      	ldr	r1, [r7, #32]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff ff0f 	bl	800aa08 <AddAllEntry>
 800abea:	6278      	str	r0, [r7, #36]	; 0x24
        if (entryCount < 0) {
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da09      	bge.n	800ac06 <RebuildFullName+0xda>
            XFREE(fullName, name->heap, DYNAMIC_TYPE_X509);
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <RebuildFullName+0xd6>
 800abfc:	69b8      	ldr	r0, [r7, #24]
 800abfe:	f00d fff1 	bl	8018be4 <wolfSSL_Free>
            return entryCount;
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	e021      	b.n	800ac4a <RebuildFullName+0x11e>
        }

        if (name->dynamicName) {
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d008      	beq.n	800ac20 <RebuildFullName+0xf4>
            XFREE(name->name, name->heap, DYNAMIC_TYPE_X509);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	61fb      	str	r3, [r7, #28]
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d002      	beq.n	800ac20 <RebuildFullName+0xf4>
 800ac1a:	69f8      	ldr	r0, [r7, #28]
 800ac1c:	f00d ffe2 	bl	8018be4 <wolfSSL_Free>
        }
        fullName[idx] = '\0';
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	461a      	mov	r2, r3
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	4413      	add	r3, r2
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
        name->name = fullName;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a3a      	ldr	r2, [r7, #32]
 800ac30:	601a      	str	r2, [r3, #0]
        name->dynamicName = 1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	605a      	str	r2, [r3, #4]
        name->sz = idx + 1; /* size includes null terminator */
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	609a      	str	r2, [r3, #8]
        name->entrySz = entryCount;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac44:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

        return 0;
 800ac48:	2300      	movs	r3, #0
    }
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3730      	adds	r7, #48	; 0x30
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <wolfSSL_X509_NAME_add_entry>:
    /* Copies entry into name. With it being copied freeing entry becomes the
     * callers responsibility.
     * returns 1 for success and 0 for error */
    int wolfSSL_X509_NAME_add_entry(WOLFSSL_X509_NAME* name,
            WOLFSSL_X509_NAME_ENTRY* entry, int idx, int set)
    {
 800ac52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac54:	b08b      	sub	sp, #44	; 0x2c
 800ac56:	af02      	add	r7, sp, #8
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	603b      	str	r3, [r7, #0]
        WOLFSSL_X509_NAME_ENTRY* current = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	617b      	str	r3, [r7, #20]

#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_X509_NAME_add_entry()");
#endif

        if (name == NULL || entry == NULL || entry->value == NULL) {
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d006      	beq.n	800ac78 <wolfSSL_X509_NAME_add_entry+0x26>
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <wolfSSL_X509_NAME_add_entry+0x26>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <wolfSSL_X509_NAME_add_entry+0x2a>
            WOLFSSL_MSG("NULL argument passed in");
            return WOLFSSL_FAILURE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e091      	b.n	800ada0 <wolfSSL_X509_NAME_add_entry+0x14e>
        }

        if (idx >= 0) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	db07      	blt.n	800ac92 <wolfSSL_X509_NAME_add_entry+0x40>
            /* place in specific index */

            if (idx >= MAX_NAME_ENTRIES) {
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b0f      	cmp	r3, #15
 800ac86:	dd01      	ble.n	800ac8c <wolfSSL_X509_NAME_add_entry+0x3a>
                WOLFSSL_MSG("Error index to insert entry is larger than array");
                return WOLFSSL_FAILURE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	e089      	b.n	800ada0 <wolfSSL_X509_NAME_add_entry+0x14e>
            }
            i = idx;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	61bb      	str	r3, [r7, #24]
 800ac90:	e01b      	b.n	800acca <wolfSSL_X509_NAME_add_entry+0x78>
        }
        else {
            /* iterate through and find first open spot */
            for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800ac92:	2300      	movs	r3, #0
 800ac94:	61bb      	str	r3, [r7, #24]
 800ac96:	e00e      	b.n	800acb6 <wolfSSL_X509_NAME_add_entry+0x64>
                if (name->entry[i].set != 1) { /* not set so overwritten */
 800ac98:	68f9      	ldr	r1, [r7, #12]
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	440b      	add	r3, r1
 800aca6:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d106      	bne.n	800acbe <wolfSSL_X509_NAME_add_entry+0x6c>
            for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	3301      	adds	r3, #1
 800acb4:	61bb      	str	r3, [r7, #24]
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b0f      	cmp	r3, #15
 800acba:	dded      	ble.n	800ac98 <wolfSSL_X509_NAME_add_entry+0x46>
 800acbc:	e000      	b.n	800acc0 <wolfSSL_X509_NAME_add_entry+0x6e>
                    WOLFSSL_MSG("Found place for name entry");
                    break;
 800acbe:	bf00      	nop
                }
            }

            if (i == MAX_NAME_ENTRIES) {
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	2b10      	cmp	r3, #16
 800acc4:	d101      	bne.n	800acca <wolfSSL_X509_NAME_add_entry+0x78>
                WOLFSSL_MSG("No spot found for name entry");
                return WOLFSSL_FAILURE;
 800acc6:	2300      	movs	r3, #0
 800acc8:	e06a      	b.n	800ada0 <wolfSSL_X509_NAME_add_entry+0x14e>
            }
        }

        current = &name->entry[i];
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	4413      	add	r3, r2
 800acdc:	617b      	str	r3, [r7, #20]
        if (current->set == 0)
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d106      	bne.n	800acf4 <wolfSSL_X509_NAME_add_entry+0xa2>
            name->entrySz++;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

        if (wolfSSL_X509_NAME_ENTRY_create_by_NID(&current,
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	689c      	ldr	r4, [r3, #8]
                            entry->nid,
                            wolfSSL_ASN1_STRING_type(entry->value),
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	685b      	ldr	r3, [r3, #4]
        if (wolfSSL_X509_NAME_ENTRY_create_by_NID(&current,
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fa14 	bl	800912a <wolfSSL_ASN1_STRING_type>
 800ad02:	4605      	mov	r5, r0
                            wolfSSL_ASN1_STRING_data(entry->value),
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fa99 	bl	8009240 <wolfSSL_ASN1_STRING_data>
 800ad0e:	4606      	mov	r6, r0
        if (wolfSSL_X509_NAME_ENTRY_create_by_NID(&current,
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe faa4 	bl	8009262 <wolfSSL_ASN1_STRING_length>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f107 0014 	add.w	r0, r7, #20
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4633      	mov	r3, r6
 800ad24:	462a      	mov	r2, r5
 800ad26:	4621      	mov	r1, r4
 800ad28:	f7ff fe20 	bl	800a96c <wolfSSL_X509_NAME_ENTRY_create_by_NID>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d01b      	beq.n	800ad6a <wolfSSL_X509_NAME_add_entry+0x118>
                            wolfSSL_ASN1_STRING_length(entry->value)) != NULL)
        {
            ret = WOLFSSL_SUCCESS;
 800ad32:	2301      	movs	r3, #1
 800ad34:	61fb      	str	r3, [r7, #28]
        #ifdef OPENSSL_ALL
            if (name->entries == NULL) {
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <wolfSSL_X509_NAME_add_entry+0xfc>
                name->entries = wolfSSL_sk_X509_NAME_new(NULL);
 800ad40:	2000      	movs	r0, #0
 800ad42:	f000 f884 	bl	800ae4e <wolfSSL_sk_X509_NAME_new>
 800ad46:	4602      	mov	r2, r0
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
            }
            if (wolfSSL_sk_X509_NAME_ENTRY_push(name->entries, current
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	4611      	mov	r1, r2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 f899 	bl	800ae90 <wolfSSL_sk_X509_NAME_ENTRY_push>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d004      	beq.n	800ad6e <wolfSSL_X509_NAME_add_entry+0x11c>
                                                         ) != WOLFSSL_SUCCESS) {
                ret = WOLFSSL_FAILURE;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61fb      	str	r3, [r7, #28]
 800ad68:	e001      	b.n	800ad6e <wolfSSL_X509_NAME_add_entry+0x11c>
            }
        #endif
        }
        else {
            ret = WOLFSSL_FAILURE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	61fb      	str	r3, [r7, #28]
        }

        if (ret != WOLFSSL_SUCCESS) {
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d00c      	beq.n	800ad8e <wolfSSL_X509_NAME_add_entry+0x13c>
            WOLFSSL_MSG("Error adding the name entry");
            if (current->set == 0)
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d106      	bne.n	800ad8a <wolfSSL_X509_NAME_add_entry+0x138>
                name->entrySz--;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800ad82:	1e5a      	subs	r2, r3, #1
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
            return WOLFSSL_FAILURE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e008      	b.n	800ada0 <wolfSSL_X509_NAME_add_entry+0x14e>
        }

        if (RebuildFullName(name) != 0)
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7ff fecc 	bl	800ab2c <RebuildFullName>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <wolfSSL_X509_NAME_add_entry+0x14c>
            return WOLFSSL_FAILURE;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e000      	b.n	800ada0 <wolfSSL_X509_NAME_add_entry+0x14e>

        (void)set;
        return WOLFSSL_SUCCESS;
 800ad9e:	2301      	movs	r3, #1
    }
 800ada0:	4618      	mov	r0, r3
 800ada2:	3724      	adds	r7, #36	; 0x24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ada8 <wolfSSL_X509_NAME_add_entry_by_NID>:
    }

    int wolfSSL_X509_NAME_add_entry_by_NID(WOLFSSL_X509_NAME *name, int nid,
                                           int type, const unsigned char *bytes,
                                           int len, int loc, int set)
    {
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af02      	add	r7, sp, #8
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
        int ret;
        WOLFSSL_X509_NAME_ENTRY* entry;
        WOLFSSL_ENTER("wolfSSL_X509_NAME_add_entry_by_NID");
        entry = wolfSSL_X509_NAME_ENTRY_create_by_NID(NULL, nid, type, bytes,
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	2000      	movs	r0, #0
 800adc2:	f7ff fdd3 	bl	800a96c <wolfSSL_X509_NAME_ENTRY_create_by_NID>
 800adc6:	6178      	str	r0, [r7, #20]
                len);
        if (entry == NULL)
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <wolfSSL_X509_NAME_add_entry_by_NID+0x2a>
            return WOLFSSL_FAILURE;
 800adce:	2300      	movs	r3, #0
 800add0:	e00a      	b.n	800ade8 <wolfSSL_X509_NAME_add_entry_by_NID+0x40>
        ret = wolfSSL_X509_NAME_add_entry(name, entry, loc, set);
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add6:	6979      	ldr	r1, [r7, #20]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7ff ff3a 	bl	800ac52 <wolfSSL_X509_NAME_add_entry>
 800adde:	6138      	str	r0, [r7, #16]
        wolfSSL_X509_NAME_ENTRY_free(entry);
 800ade0:	6978      	ldr	r0, [r7, #20]
 800ade2:	f7ff fd8e 	bl	800a902 <wolfSSL_X509_NAME_ENTRY_free>
        return ret;
 800ade6:	693b      	ldr	r3, [r7, #16]
    }
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <wolfSSL_X509_NAME_get_entry>:

    /* returns a pointer to the internal entry at location 'loc' on success,
     * a null pointer is returned in fail cases */
    WOLFSSL_X509_NAME_ENTRY *wolfSSL_X509_NAME_get_entry(
                                             WOLFSSL_X509_NAME *name, int loc)
    {
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
#ifdef WOLFSSL_DEBUG_OPENSSL
        WOLFSSL_ENTER("wolfSSL_X509_NAME_get_entry");
#endif

        if (name == NULL) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <wolfSSL_X509_NAME_get_entry+0x14>
            return NULL;
 800ae00:	2300      	movs	r3, #0
 800ae02:	e01e      	b.n	800ae42 <wolfSSL_X509_NAME_get_entry+0x52>
        }

        if (loc < 0 || loc >= MAX_NAME_ENTRIES) {
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	db02      	blt.n	800ae10 <wolfSSL_X509_NAME_get_entry+0x20>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b0f      	cmp	r3, #15
 800ae0e:	dd01      	ble.n	800ae14 <wolfSSL_X509_NAME_get_entry+0x24>
            WOLFSSL_MSG("Bad argument");
            return NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	e016      	b.n	800ae42 <wolfSSL_X509_NAME_get_entry+0x52>
        }

        if (name->entry[loc].set) {
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d009      	beq.n	800ae40 <wolfSSL_X509_NAME_get_entry+0x50>
            *  updating "set" by position + 1. "plus 1" means to avoid "not set"
            *  zero.
            */
            name->entry[loc].set = loc + 1;
#endif
            return &name->entry[loc];
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4413      	add	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	e000      	b.n	800ae42 <wolfSSL_X509_NAME_get_entry+0x52>
        }
        else {
            return NULL;
 800ae40:	2300      	movs	r3, #0
        }
    }
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <wolfSSL_sk_X509_NAME_new>:
        defined(HAVE_LIGHTY) || defined(WOLFSSL_HAPROXY) || \
        defined(WOLFSSL_OPENSSH) || defined(HAVE_SBLIM_SFCB)

WOLF_STACK_OF(WOLFSSL_X509_NAME)* wolfSSL_sk_X509_NAME_new(
        WOLF_SK_COMPARE_CB(WOLFSSL_X509_NAME, cb))
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b084      	sub	sp, #16
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
    WOLFSSL_STACK* sk;
    (void)cb;

    WOLFSSL_ENTER("wolfSSL_sk_X509_NAME_new");

    sk = wolfSSL_sk_new_node(NULL);
 800ae56:	2000      	movs	r0, #0
 800ae58:	f7fd fe86 	bl	8008b68 <wolfSSL_sk_new_node>
 800ae5c:	60f8      	str	r0, [r7, #12]
    if (sk != NULL) {
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <wolfSSL_sk_X509_NAME_new+0x1e>
        sk->type = STACK_TYPE_X509_NAME;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2209      	movs	r2, #9
 800ae68:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    }

    return sk;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <wolfSSL_sk_X509_NAME_pop_free>:
    return name;
}

void wolfSSL_sk_X509_NAME_pop_free(WOLF_STACK_OF(WOLFSSL_X509_NAME)* sk,
    void (*f) (WOLFSSL_X509_NAME*))
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	6039      	str	r1, [r7, #0]
    WOLFSSL_ENTER("wolfSSL_sk_X509_NAME_pop_free");
    wolfSSL_sk_pop_free(sk, (wolfSSL_sk_freefunc)f);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7fe fb06 	bl	8009494 <wolfSSL_sk_pop_free>
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <wolfSSL_sk_X509_NAME_ENTRY_push>:
    return sk;
}

int wolfSSL_sk_X509_NAME_ENTRY_push(WOLF_STACK_OF(WOLFSSL_X509_NAME_ENTRY)* sk,
    WOLFSSL_X509_NAME_ENTRY* name_entry)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
    return wolfSSL_sk_push(sk, name_entry);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7fd fec1 	bl	8008c24 <wolfSSL_sk_push>
 800aea2:	4603      	mov	r3, r0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <wolfSSL_sk_X509_NAME_ENTRY_free>:
        return BAD_FUNC_ARG;
    return (int)sk->num;
}

void wolfSSL_sk_X509_NAME_ENTRY_free(WOLF_STACK_OF(WOLFSSL_X509_NAME_ENTRY)* sk)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
    wolfSSL_sk_free(sk);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7fe fad1 	bl	800945c <wolfSSL_sk_free>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <wolfSSL_X509_INFO_free>:
    }
    return info;
}

void wolfSSL_X509_INFO_free(WOLFSSL_X509_INFO* info)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
    if (info == NULL)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01c      	beq.n	800af0a <wolfSSL_X509_INFO_free+0x48>
        return;

    if (info->x509) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d007      	beq.n	800aee8 <wolfSSL_X509_INFO_free+0x26>
        wolfSSL_X509_free(info->x509);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fa52 	bl	800a386 <wolfSSL_X509_free>
        info->x509 = NULL;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
    if (info->crl) {
        wolfSSL_X509_CRL_free(info->crl);
        info->crl = NULL;
    }
#endif
    wolfSSL_X509_PKEY_free(info->x_pkey);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff fcf0 	bl	800a8d2 <wolfSSL_X509_PKEY_free>
    info->x_pkey = NULL;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	609a      	str	r2, [r3, #8]

    XFREE(info, NULL, DYNAMIC_TYPE_X509);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d004      	beq.n	800af0c <wolfSSL_X509_INFO_free+0x4a>
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f00d fe6e 	bl	8018be4 <wolfSSL_Free>
 800af08:	e000      	b.n	800af0c <wolfSSL_X509_INFO_free+0x4a>
        return;
 800af0a:	bf00      	nop
}
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <wolfSSL_X509_OBJECT_free>:
        XMEMSET(ret, 0, sizeof(WOLFSSL_X509_OBJECT));
    return ret;
}

void wolfSSL_X509_OBJECT_free(WOLFSSL_X509_OBJECT *obj)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("wolfSSL_X509_OBJECT_free");
    if (obj != NULL) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d010      	beq.n	800af42 <wolfSSL_X509_OBJECT_free+0x30>
        if (obj->type == WOLFSSL_X509_LU_X509) {
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d104      	bne.n	800af32 <wolfSSL_X509_OBJECT_free+0x20>
            wolfSSL_X509_free(obj->data.x509);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff fa2a 	bl	800a386 <wolfSSL_X509_free>
        else {
            /* We don't free as this will point to
             * store->cm->crl which we don't own */
            WOLFSSL_MSG("Not free'ing CRL in WOLFSSL_X509_OBJECT");
        }
        XFREE(obj, NULL, DYNAMIC_TYPE_OPENSSL);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60fb      	str	r3, [r7, #12]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <wolfSSL_X509_OBJECT_free+0x30>
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f00d fe51 	bl	8018be4 <wolfSSL_Free>
    }
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <wolfSSL_sk_X509_OBJECT_pop_free>:
    wolfSSL_sk_free(s);
}

void wolfSSL_sk_X509_OBJECT_pop_free(WOLFSSL_STACK* s,
        void (*f) (WOLFSSL_X509_OBJECT*))
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b082      	sub	sp, #8
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
    WOLFSSL_ENTER("wolfSSL_sk_X509_OBJECT_pop_free");
    wolfSSL_sk_pop_free(s, (wolfSSL_sk_freefunc)f);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7fe fa9c 	bl	8009494 <wolfSSL_sk_pop_free>
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <wolfSSL_X509_NAME_copy>:
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
/* unlike wolfSSL_X509_NAME_dup this does not malloc a duplicate, only deep
 * copy. "to" is expected to be a fresh blank name, if not pointers could be
 * lost */
int wolfSSL_X509_NAME_copy(WOLFSSL_X509_NAME* from, WOLFSSL_X509_NAME* to)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
    int i;
    WOLFSSL_X509_NAME_ENTRY* ne;

    WOLFSSL_ENTER("wolfSSL_X509_NAME_copy");

    if (from == NULL || to == NULL) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <wolfSSL_X509_NAME_copy+0x16>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <wolfSSL_X509_NAME_copy+0x1c>
        WOLFSSL_MSG("NULL parameter");
        return BAD_FUNC_ARG;
 800af7a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800af7e:	e05f      	b.n	800b040 <wolfSSL_X509_NAME_copy+0xdc>
    }

#if defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX) || defined(HAVE_LIGHTY)
    if (from->rawLen > 0) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800af86:	2b00      	cmp	r3, #0
 800af88:	dd1a      	ble.n	800afc0 <wolfSSL_X509_NAME_copy+0x5c>
        if (from->rawLen > ASN_NAME_MAX) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800af90:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800af94:	dd02      	ble.n	800af9c <wolfSSL_X509_NAME_copy+0x38>
            WOLFSSL_MSG("Bad raw size");
            return BAD_FUNC_ARG;
 800af96:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800af9a:	e051      	b.n	800b040 <wolfSSL_X509_NAME_copy+0xdc>
        }
        XMEMCPY(to->raw, from->raw, from->rawLen);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f503 715f 	add.w	r1, r3, #892	; 0x37c
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800afae:	461a      	mov	r2, r3
 800afb0:	f016 f998 	bl	80212e4 <memcpy>
        to->rawLen = from->rawLen;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
    }
#endif

    if (from->dynamicName) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d010      	beq.n	800afea <wolfSSL_X509_NAME_copy+0x86>
        to->name = (char*)XMALLOC(from->sz, to->heap, DYNAMIC_TYPE_SUBJECT_CN);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	4618      	mov	r0, r3
 800afce:	f00d fded 	bl	8018bac <wolfSSL_Malloc>
 800afd2:	4602      	mov	r2, r0
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	601a      	str	r2, [r3, #0]
        if (to->name == NULL)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <wolfSSL_X509_NAME_copy+0x80>
            return WOLFSSL_FAILURE;
 800afe0:	2300      	movs	r3, #0
 800afe2:	e02d      	b.n	800b040 <wolfSSL_X509_NAME_copy+0xdc>
        to->dynamicName = 1;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2201      	movs	r2, #1
 800afe8:	605a      	str	r2, [r3, #4]
    }
    XMEMCPY(to->name, from->name, from->sz);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6819      	ldr	r1, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f016 f974 	bl	80212e4 <memcpy>
    to->sz = from->sz;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	609a      	str	r2, [r3, #8]

    for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800b004:	2300      	movs	r3, #0
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	e010      	b.n	800b02c <wolfSSL_X509_NAME_copy+0xc8>
        ne = wolfSSL_X509_NAME_get_entry(from, i);
 800b00a:	68f9      	ldr	r1, [r7, #12]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff feef 	bl	800adf0 <wolfSSL_X509_NAME_get_entry>
 800b012:	60b8      	str	r0, [r7, #8]
        if (ne != NULL)
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <wolfSSL_X509_NAME_copy+0xc2>
            wolfSSL_X509_NAME_add_entry(to, ne, i, 1);
 800b01a:	2301      	movs	r3, #1
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	6838      	ldr	r0, [r7, #0]
 800b022:	f7ff fe16 	bl	800ac52 <wolfSSL_X509_NAME_add_entry>
    for (i = 0; i < MAX_NAME_ENTRIES; i++) {
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3301      	adds	r3, #1
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2b0f      	cmp	r3, #15
 800b030:	ddeb      	ble.n	800b00a <wolfSSL_X509_NAME_copy+0xa6>
    }
    to->entrySz = from->entrySz;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    return WOLFSSL_SUCCESS;
 800b03e:	2301      	movs	r3, #1
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <wolfSSL_X509_set_subject_name>:


/* copies over information from "name" to the "cert" subject name
 * returns WOLFSSL_SUCCESS on success */
int wolfSSL_X509_set_subject_name(WOLFSSL_X509 *cert, WOLFSSL_X509_NAME *name)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
    WOLFSSL_ENTER("X509_set_subject_name");
    if (cert == NULL || name == NULL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <wolfSSL_X509_set_subject_name+0x16>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <wolfSSL_X509_set_subject_name+0x1a>
        return WOLFSSL_FAILURE;
 800b05e:	2300      	movs	r3, #0
 800b060:	e026      	b.n	800b0b0 <wolfSSL_X509_set_subject_name+0x68>

    FreeX509Name(&cert->subject);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 800b068:	4618      	mov	r0, r3
 800b06a:	f7f8 fd5e 	bl	8003b2a <FreeX509Name>
    InitX509Name(&cert->subject, 0, cert->heap);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f503 60e8 	add.w	r0, r3, #1856	; 0x740
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b07a:	461a      	mov	r2, r3
 800b07c:	2100      	movs	r1, #0
 800b07e:	f7f8 fd35 	bl	8003aec <InitX509Name>

    if (wolfSSL_X509_NAME_copy(name, &cert->subject) != WOLFSSL_SUCCESS) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 800b088:	4619      	mov	r1, r3
 800b08a:	6838      	ldr	r0, [r7, #0]
 800b08c:	f7ff ff6a 	bl	800af64 <wolfSSL_X509_NAME_copy>
 800b090:	4603      	mov	r3, r0
 800b092:	2b01      	cmp	r3, #1
 800b094:	d007      	beq.n	800b0a6 <wolfSSL_X509_set_subject_name+0x5e>
        FreeX509Name(&cert->subject);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7f8 fd44 	bl	8003b2a <FreeX509Name>
        return WOLFSSL_FAILURE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e004      	b.n	800b0b0 <wolfSSL_X509_set_subject_name+0x68>
    }

    cert->subject.x509 = cert;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	f8c3 2ab8 	str.w	r2, [r3, #2744]	; 0xab8
    return WOLFSSL_SUCCESS;
 800b0ae:	2301      	movs	r3, #1
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <wolfSSL_X509_set_issuer_name>:


/* copies over information from "name" to the "cert" issuer name
 * returns WOLFSSL_SUCCESS on success */
int wolfSSL_X509_set_issuer_name(WOLFSSL_X509 *cert, WOLFSSL_X509_NAME *name)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
    WOLFSSL_ENTER("X509_set_issuer_name");
    if (cert == NULL || name == NULL)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <wolfSSL_X509_set_issuer_name+0x16>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <wolfSSL_X509_set_issuer_name+0x1a>
        return WOLFSSL_FAILURE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e02d      	b.n	800b12e <wolfSSL_X509_set_issuer_name+0x76>

    FreeX509Name(&cert->issuer);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7f8 fd26 	bl	8003b2a <FreeX509Name>
    InitX509Name(&cert->issuer, 0, cert->heap);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	f7f8 fcfd 	bl	8003aec <InitX509Name>

    if (wolfSSL_X509_NAME_copy(name, &cert->issuer) != WOLFSSL_SUCCESS) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6838      	ldr	r0, [r7, #0]
 800b0fc:	f7ff ff32 	bl	800af64 <wolfSSL_X509_NAME_copy>
 800b100:	4603      	mov	r3, r0
 800b102:	2b01      	cmp	r3, #1
 800b104:	d007      	beq.n	800b116 <wolfSSL_X509_set_issuer_name+0x5e>
        FreeX509Name(&cert->issuer);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f8 fd0c 	bl	8003b2a <FreeX509Name>
        return WOLFSSL_FAILURE;
 800b112:	2300      	movs	r3, #0
 800b114:	e00b      	b.n	800b12e <wolfSSL_X509_set_issuer_name+0x76>
    }

    cert->issuer.x509 = cert;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
    cert->issuerSet = 1;
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 800b124:	f043 0301 	orr.w	r3, r3, #1
 800b128:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe

    return WOLFSSL_SUCCESS;
 800b12c:	2301      	movs	r3, #1
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <wolfSSL_BUF_MEM_free>:

    return (int)len;
}

void wolfSSL_BUF_MEM_free(WOLFSSL_BUF_MEM* buf)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
    if (buf) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d01d      	beq.n	800b180 <wolfSSL_BUF_MEM_free+0x4a>
        if (buf->data) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <wolfSSL_BUF_MEM_free+0x2e>
            XFREE(buf->data, NULL, DYNAMIC_TYPE_OPENSSL);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <wolfSSL_BUF_MEM_free+0x28>
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f00d fd43 	bl	8018be4 <wolfSSL_Free>
            buf->data = NULL;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
        }
        buf->max = 0;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	609a      	str	r2, [r3, #8]
        buf->length = 0;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	605a      	str	r2, [r3, #4]
        XFREE(buf, NULL, DYNAMIC_TYPE_OPENSSL);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	60bb      	str	r3, [r7, #8]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <wolfSSL_BUF_MEM_free+0x4a>
 800b17a:	68b8      	ldr	r0, [r7, #8]
 800b17c:	f00d fd32 	bl	8018be4 <wolfSSL_Free>
    }
}
 800b180:	bf00      	nop
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <wolfSSL_X509V3_conf_free>:
        XFREE(conf, NULL, DYNAMIC_TYPE_OPENSSL);
    }
}

void wolfSSL_X509V3_conf_free(WOLFSSL_CONF_VALUE *val)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08a      	sub	sp, #40	; 0x28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
    WOLF_STACK_OF(WOLFSSL_CONF_VALUE) *sk = NULL;
 800b190:	2300      	movs	r3, #0
 800b192:	627b      	str	r3, [r7, #36]	; 0x24

    if (val) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d044      	beq.n	800b224 <wolfSSL_X509V3_conf_free+0x9c>
        if (val->name) {
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d016      	beq.n	800b1d0 <wolfSSL_X509V3_conf_free+0x48>
            /* Not a section. Don't free section as it is a shared pointer. */
            XFREE(val->name, NULL, DYNAMIC_TYPE_OPENSSL);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <wolfSSL_X509V3_conf_free+0x2c>
 800b1ae:	6978      	ldr	r0, [r7, #20]
 800b1b0:	f00d fd18 	bl	8018be4 <wolfSSL_Free>
            if (val->value)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d02b      	beq.n	800b214 <wolfSSL_X509V3_conf_free+0x8c>
                XFREE(val->value, NULL, DYNAMIC_TYPE_OPENSSL);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	613b      	str	r3, [r7, #16]
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d025      	beq.n	800b214 <wolfSSL_X509V3_conf_free+0x8c>
 800b1c8:	6938      	ldr	r0, [r7, #16]
 800b1ca:	f00d fd0b 	bl	8018be4 <wolfSSL_Free>
 800b1ce:	e021      	b.n	800b214 <wolfSSL_X509V3_conf_free+0x8c>
        }
        else {
            /* Section so val->value is a stack */
            if (val->section)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <wolfSSL_X509V3_conf_free+0x62>
                XFREE(val->section, NULL, DYNAMIC_TYPE_OPENSSL);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	623b      	str	r3, [r7, #32]
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <wolfSSL_X509V3_conf_free+0x62>
 800b1e4:	6a38      	ldr	r0, [r7, #32]
 800b1e6:	f00d fcfd 	bl	8018be4 <wolfSSL_Free>
            /* Only free the stack structures. The contained conf values
             * will be freed in wolfSSL_NCONF_free */
            sk = (WOLF_STACK_OF(WOLFSSL_CONF_VALUE)*)val->value;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	627b      	str	r3, [r7, #36]	; 0x24
            while (sk) {
 800b1f0:	e00d      	b.n	800b20e <wolfSSL_X509V3_conf_free+0x86>
                WOLF_STACK_OF(WOLFSSL_CONF_VALUE) *tmp = sk->next;
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b1f8:	61fb      	str	r3, [r7, #28]
                XFREE(sk, NULL, DYNAMIC_TYPE_OPENSSL);
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fc:	61bb      	str	r3, [r7, #24]
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <wolfSSL_X509V3_conf_free+0x82>
 800b204:	69b8      	ldr	r0, [r7, #24]
 800b206:	f00d fced 	bl	8018be4 <wolfSSL_Free>
                sk = tmp;
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
            while (sk) {
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1ee      	bne.n	800b1f2 <wolfSSL_X509V3_conf_free+0x6a>
            }
        }
        XFREE(val, NULL, DYNAMIC_TYPE_OPENSSL);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <wolfSSL_X509V3_conf_free+0x9c>
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f00d fce0 	bl	8018be4 <wolfSSL_Free>
    }
}
 800b224:	bf00      	nop
 800b226:	3728      	adds	r7, #40	; 0x28
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <wolfSSL_RAND_InitMutex>:
 * START OF RAND API
 ******************************************************************************/

#if defined(OPENSSL_EXTRA) && !defined(WOLFSSL_NO_OPENSSL_RAND_CB)
static int wolfSSL_RAND_InitMutex(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
    if (gRandMethodsInit == 0) {
 800b230:	4b09      	ldr	r3, [pc, #36]	; (800b258 <wolfSSL_RAND_InitMutex+0x2c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10b      	bne.n	800b250 <wolfSSL_RAND_InitMutex+0x24>
        if (wc_InitMutex(&gRandMethodMutex) != 0) {
 800b238:	4808      	ldr	r0, [pc, #32]	; (800b25c <wolfSSL_RAND_InitMutex+0x30>)
 800b23a:	f015 fe5b 	bl	8020ef4 <wc_InitMutex>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <wolfSSL_RAND_InitMutex+0x1e>
            WOLFSSL_MSG("Bad Init Mutex rand methods");
            return BAD_MUTEX_E;
 800b244:	f06f 0369 	mvn.w	r3, #105	; 0x69
 800b248:	e003      	b.n	800b252 <wolfSSL_RAND_InitMutex+0x26>
        }
        gRandMethodsInit = 1;
 800b24a:	4b03      	ldr	r3, [pc, #12]	; (800b258 <wolfSSL_RAND_InitMutex+0x2c>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	601a      	str	r2, [r3, #0]
    }
    return 0;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20000344 	.word	0x20000344
 800b25c:	20000348 	.word	0x20000348

0800b260 <wolfSSL_RAND_Init>:
/* Checks if the global RNG has been created. If not then one is created.
 *
 * Returns WOLFSSL_SUCCESS when no error is encountered.
 */
int wolfSSL_RAND_Init(void)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
    int ret = WOLFSSL_FAILURE;
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
#ifdef HAVE_GLOBAL_RNG
    if (wc_LockMutex(&globalRNGMutex) == 0) {
 800b26a:	480f      	ldr	r0, [pc, #60]	; (800b2a8 <wolfSSL_RAND_Init+0x48>)
 800b26c:	f015 fe58 	bl	8020f20 <wc_LockMutex>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d112      	bne.n	800b29c <wolfSSL_RAND_Init+0x3c>
        if (initGlobalRNG == 0) {
 800b276:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <wolfSSL_RAND_Init+0x4c>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10b      	bne.n	800b296 <wolfSSL_RAND_Init+0x36>
            ret = wc_InitRng(&globalRNG);
 800b27e:	480c      	ldr	r0, [pc, #48]	; (800b2b0 <wolfSSL_RAND_Init+0x50>)
 800b280:	f00e fa48 	bl	8019714 <wc_InitRng>
 800b284:	6078      	str	r0, [r7, #4]
            if (ret == 0) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <wolfSSL_RAND_Init+0x36>
                initGlobalRNG = 1;
 800b28c:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <wolfSSL_RAND_Init+0x4c>)
 800b28e:	2201      	movs	r2, #1
 800b290:	601a      	str	r2, [r3, #0]
                ret = WOLFSSL_SUCCESS;
 800b292:	2301      	movs	r3, #1
 800b294:	607b      	str	r3, [r7, #4]
            }
        }
        wc_UnLockMutex(&globalRNGMutex);
 800b296:	4804      	ldr	r0, [pc, #16]	; (800b2a8 <wolfSSL_RAND_Init+0x48>)
 800b298:	f015 fe4d 	bl	8020f36 <wc_UnLockMutex>
    }
#endif
    return ret;
 800b29c:	687b      	ldr	r3, [r7, #4]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	2000036c 	.word	0x2000036c
 800b2ac:	20000368 	.word	0x20000368
 800b2b0:	20000358 	.word	0x20000358

0800b2b4 <wolfSSL_RAND_seed>:


/* WOLFSSL_SUCCESS on ok */
int wolfSSL_RAND_seed(const void* seed, int len)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
#ifndef WOLFSSL_NO_OPENSSL_RAND_CB
    if (wolfSSL_RAND_InitMutex() == 0 && wc_LockMutex(&gRandMethodMutex) == 0) {
 800b2be:	f7ff ffb5 	bl	800b22c <wolfSSL_RAND_InitMutex>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d11d      	bne.n	800b304 <wolfSSL_RAND_seed+0x50>
 800b2c8:	4812      	ldr	r0, [pc, #72]	; (800b314 <wolfSSL_RAND_seed+0x60>)
 800b2ca:	f015 fe29 	bl	8020f20 <wc_LockMutex>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d117      	bne.n	800b304 <wolfSSL_RAND_seed+0x50>
        if (gRandMethods && gRandMethods->seed) {
 800b2d4:	4b10      	ldr	r3, [pc, #64]	; (800b318 <wolfSSL_RAND_seed+0x64>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d010      	beq.n	800b2fe <wolfSSL_RAND_seed+0x4a>
 800b2dc:	4b0e      	ldr	r3, [pc, #56]	; (800b318 <wolfSSL_RAND_seed+0x64>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00b      	beq.n	800b2fe <wolfSSL_RAND_seed+0x4a>
            int ret = gRandMethods->seed(seed, len);
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <wolfSSL_RAND_seed+0x64>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	4798      	blx	r3
 800b2f2:	60f8      	str	r0, [r7, #12]
            wc_UnLockMutex(&gRandMethodMutex);
 800b2f4:	4807      	ldr	r0, [pc, #28]	; (800b314 <wolfSSL_RAND_seed+0x60>)
 800b2f6:	f015 fe1e 	bl	8020f36 <wc_UnLockMutex>
            return ret;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	e005      	b.n	800b30a <wolfSSL_RAND_seed+0x56>
        }
        wc_UnLockMutex(&gRandMethodMutex);
 800b2fe:	4805      	ldr	r0, [pc, #20]	; (800b314 <wolfSSL_RAND_seed+0x60>)
 800b300:	f015 fe19 	bl	8020f36 <wc_UnLockMutex>
    (void)seed;
    (void)len;
#endif

    /* Make sure global shared RNG (globalRNG) is initialized */
    return wolfSSL_RAND_Init();
 800b304:	f7ff ffac 	bl	800b260 <wolfSSL_RAND_Init>
 800b308:	4603      	mov	r3, r0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20000348 	.word	0x20000348
 800b318:	20000340 	.word	0x20000340

0800b31c <wolfSSL_RAND_Cleanup>:
}

#endif /* !FREERTOS_TCP */

void wolfSSL_RAND_Cleanup(void)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	af00      	add	r7, sp, #0
#ifndef WOLFSSL_NO_OPENSSL_RAND_CB
    if (wolfSSL_RAND_InitMutex() == 0 && wc_LockMutex(&gRandMethodMutex) == 0) {
 800b320:	f7ff ff84 	bl	800b22c <wolfSSL_RAND_InitMutex>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d115      	bne.n	800b356 <wolfSSL_RAND_Cleanup+0x3a>
 800b32a:	481a      	ldr	r0, [pc, #104]	; (800b394 <wolfSSL_RAND_Cleanup+0x78>)
 800b32c:	f015 fdf8 	bl	8020f20 <wc_LockMutex>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10f      	bne.n	800b356 <wolfSSL_RAND_Cleanup+0x3a>
        if (gRandMethods && gRandMethods->cleanup)
 800b336:	4b18      	ldr	r3, [pc, #96]	; (800b398 <wolfSSL_RAND_Cleanup+0x7c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d008      	beq.n	800b350 <wolfSSL_RAND_Cleanup+0x34>
 800b33e:	4b16      	ldr	r3, [pc, #88]	; (800b398 <wolfSSL_RAND_Cleanup+0x7c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d003      	beq.n	800b350 <wolfSSL_RAND_Cleanup+0x34>
            gRandMethods->cleanup();
 800b348:	4b13      	ldr	r3, [pc, #76]	; (800b398 <wolfSSL_RAND_Cleanup+0x7c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	4798      	blx	r3
        wc_UnLockMutex(&gRandMethodMutex);
 800b350:	4810      	ldr	r0, [pc, #64]	; (800b394 <wolfSSL_RAND_Cleanup+0x78>)
 800b352:	f015 fdf0 	bl	8020f36 <wc_UnLockMutex>
    }

    if (wc_FreeMutex(&gRandMethodMutex) == 0)
 800b356:	480f      	ldr	r0, [pc, #60]	; (800b394 <wolfSSL_RAND_Cleanup+0x78>)
 800b358:	f015 fdd7 	bl	8020f0a <wc_FreeMutex>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d102      	bne.n	800b368 <wolfSSL_RAND_Cleanup+0x4c>
        gRandMethodsInit = 0;
 800b362:	4b0e      	ldr	r3, [pc, #56]	; (800b39c <wolfSSL_RAND_Cleanup+0x80>)
 800b364:	2200      	movs	r2, #0
 800b366:	601a      	str	r2, [r3, #0]
#endif
#ifdef HAVE_GLOBAL_RNG
    if (wc_LockMutex(&globalRNGMutex) == 0) {
 800b368:	480d      	ldr	r0, [pc, #52]	; (800b3a0 <wolfSSL_RAND_Cleanup+0x84>)
 800b36a:	f015 fdd9 	bl	8020f20 <wc_LockMutex>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10c      	bne.n	800b38e <wolfSSL_RAND_Cleanup+0x72>
        if (initGlobalRNG) {
 800b374:	4b0b      	ldr	r3, [pc, #44]	; (800b3a4 <wolfSSL_RAND_Cleanup+0x88>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <wolfSSL_RAND_Cleanup+0x6c>
            wc_FreeRng(&globalRNG);
 800b37c:	480a      	ldr	r0, [pc, #40]	; (800b3a8 <wolfSSL_RAND_Cleanup+0x8c>)
 800b37e:	f00e fa85 	bl	801988c <wc_FreeRng>
            initGlobalRNG = 0;
 800b382:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <wolfSSL_RAND_Cleanup+0x88>)
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]
        }
        wc_UnLockMutex(&globalRNGMutex);
 800b388:	4805      	ldr	r0, [pc, #20]	; (800b3a0 <wolfSSL_RAND_Cleanup+0x84>)
 800b38a:	f015 fdd4 	bl	8020f36 <wc_UnLockMutex>
    }
#endif
}
 800b38e:	bf00      	nop
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20000348 	.word	0x20000348
 800b398:	20000340 	.word	0x20000340
 800b39c:	20000344 	.word	0x20000344
 800b3a0:	2000036c 	.word	0x2000036c
 800b3a4:	20000368 	.word	0x20000368
 800b3a8:	20000358 	.word	0x20000358

0800b3ac <wolfSSL_X509_STORE_free>:

    return NULL;
}

void wolfSSL_X509_STORE_free(WOLFSSL_X509_STORE* store)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
    int doFree = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	617b      	str	r3, [r7, #20]
    if (store != NULL && store->isDynamic) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d055      	beq.n	800b46a <wolfSSL_X509_STORE_free+0xbe>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d051      	beq.n	800b46a <wolfSSL_X509_STORE_free+0xbe>
#ifndef SINGLE_THREADED
        if (wc_LockMutex(&store->refMutex) != 0) {
            WOLFSSL_MSG("Couldn't lock store mutex");
        }
#endif
        store->refCount--;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ca:	1e5a      	subs	r2, r3, #1
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (store->refCount == 0)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <wolfSSL_X509_STORE_free+0x30>
            doFree = 1;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	617b      	str	r3, [r7, #20]
#ifndef SINGLE_THREADED
        wc_UnLockMutex(&store->refMutex);
#endif

        if (doFree) {
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d043      	beq.n	800b46a <wolfSSL_X509_STORE_free+0xbe>
#ifdef HAVE_EX_DATA_CLEANUP_HOOKS
            wolfSSL_CRYPTO_cleanup_ex_data(&store->ex_data);
#endif
            if (store->cm != NULL) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d007      	beq.n	800b3fa <wolfSSL_X509_STORE_free+0x4e>
                wolfSSL_CertManagerFree(store->cm);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fb fbc0 	bl	8006b74 <wolfSSL_CertManagerFree>
                store->cm = NULL;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	605a      	str	r2, [r3, #4]
            }
#ifdef OPENSSL_ALL
            if (store->objs != NULL) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <wolfSSL_X509_STORE_free+0x62>
                wolfSSL_sk_X509_OBJECT_pop_free(store->objs, NULL);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	2100      	movs	r1, #0
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff fd9e 	bl	800af4a <wolfSSL_sk_X509_OBJECT_pop_free>
            }
#endif
#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_WPAS_SMALL)
            if (store->param != NULL) {
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00b      	beq.n	800b42e <wolfSSL_X509_STORE_free+0x82>
                XFREE(store->param, NULL, DYNAMIC_TYPE_OPENSSL);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <wolfSSL_X509_STORE_free+0x7c>
 800b422:	6938      	ldr	r0, [r7, #16]
 800b424:	f00d fbde 	bl	8018be4 <wolfSSL_Free>
                store->param = NULL;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	619a      	str	r2, [r3, #24]
            }

            if (store->lookup.dirs != NULL) {
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d011      	beq.n	800b45a <wolfSSL_X509_STORE_free+0xae>
#if defined(OPENSSL_ALL) && !defined(NO_FILESYSTEM) && !defined(NO_WOLFSSL_DIR)
                if (store->lookup.dirs->dir_entry) {
                    wolfSSL_sk_BY_DIR_entry_free(store->lookup.dirs->dir_entry);
                }
#endif
                wc_FreeMutex(&store->lookup.dirs->lock);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f015 fd64 	bl	8020f0a <wc_FreeMutex>
                XFREE(store->lookup.dirs, NULL, DYNAMIC_TYPE_OPENSSL);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <wolfSSL_X509_STORE_free+0xa8>
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f00d fbc8 	bl	8018be4 <wolfSSL_Free>
                store->lookup.dirs = NULL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	611a      	str	r2, [r3, #16]
            }
#endif
            XFREE(store, NULL, DYNAMIC_TYPE_X509_STORE);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60bb      	str	r3, [r7, #8]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <wolfSSL_X509_STORE_free+0xbe>
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	f00d fbbd 	bl	8018be4 <wolfSSL_Free>
        }
    }
}
 800b46a:	bf00      	nop
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <wolfSSL_FIPS_drbg_uninstantiate>:
    (void)adin;
    (void)adinlen;
    return ret;
}
int wolfSSL_FIPS_drbg_uninstantiate(WOLFSSL_DRBG_CTX *ctx)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
    if (ctx != NULL && ctx->rng != NULL) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00e      	beq.n	800b49e <wolfSSL_FIPS_drbg_uninstantiate+0x2c>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <wolfSSL_FIPS_drbg_uninstantiate+0x2c>
    #if !defined(HAVE_SELFTEST) && (!defined(HAVE_FIPS) || \
        (defined(HAVE_FIPS) && FIPS_VERSION_GE(5,0)))
        wc_rng_free(ctx->rng);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f00e f924 	bl	80196da <wc_rng_free>
    #else
        wc_FreeRng(ctx->rng);
        XFREE(ctx->rng, NULL, DYNAMIC_TYPE_RNG);
    #endif
        ctx->rng = NULL;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
        ctx->status = DRBG_STATUS_UNINITIALISED;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	61da      	str	r2, [r3, #28]
    }
    return WOLFSSL_SUCCESS;
 800b49e:	2301      	movs	r3, #1
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <wolfSSL_FIPS_drbg_free>:
void wolfSSL_FIPS_drbg_free(WOLFSSL_DRBG_CTX *ctx)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
    if (ctx != NULL) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d012      	beq.n	800b4dc <wolfSSL_FIPS_drbg_free+0x34>
        /* As saftey check if free'ing the default drbg, then mark global NULL.
         * Technically the user should not call free on the default drbg. */
        if (ctx == gDrbgDefCtx) {
 800b4b6:	4b0b      	ldr	r3, [pc, #44]	; (800b4e4 <wolfSSL_FIPS_drbg_free+0x3c>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d102      	bne.n	800b4c6 <wolfSSL_FIPS_drbg_free+0x1e>
            gDrbgDefCtx = NULL;
 800b4c0:	4b08      	ldr	r3, [pc, #32]	; (800b4e4 <wolfSSL_FIPS_drbg_free+0x3c>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
        }
        wolfSSL_FIPS_drbg_uninstantiate(ctx);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff ffd3 	bl	800b472 <wolfSSL_FIPS_drbg_uninstantiate>
        XFREE(ctx, NULL, DYNAMIC_TYPE_OPENSSL);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	60fb      	str	r3, [r7, #12]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <wolfSSL_FIPS_drbg_free+0x34>
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f00d fb84 	bl	8018be4 <wolfSSL_Free>
    }
}
 800b4dc:	bf00      	nop
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20000374 	.word	0x20000374

0800b4e8 <MakeTLSv1_3>:
/* The TLS v1.3 protocol version.
 *
 * returns the protocol version data for TLS v1.3.
 */
ProtocolVersion MakeTLSv1_3(void)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
    ProtocolVersion pv;
    pv.major = SSLv3_MAJOR;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	703b      	strb	r3, [r7, #0]
    pv.minor = TLSv1_3_MINOR;
 800b4f2:	2304      	movs	r3, #4
 800b4f4:	707b      	strb	r3, [r7, #1]

    return pv;
 800b4f6:	883b      	ldrh	r3, [r7, #0]
 800b4f8:	80bb      	strh	r3, [r7, #4]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	793a      	ldrb	r2, [r7, #4]
 800b4fe:	f362 0307 	bfi	r3, r2, #0, #8
 800b502:	797a      	ldrb	r2, [r7, #5]
 800b504:	f362 230f 	bfi	r3, r2, #8, #8
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <TLSX_SNI_Free>:
    return sni;
}

/** Releases a SNI object. */
static void TLSX_SNI_Free(SNI* sni, void* heap)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
    if (sni) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d015      	beq.n	800b550 <TLSX_SNI_Free+0x3c>
        switch (sni->type) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d109      	bne.n	800b540 <TLSX_SNI_Free+0x2c>
            case WOLFSSL_SNI_HOST_NAME:
                XFREE(sni->data.host_name, heap, DYNAMIC_TYPE_TLSX);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <TLSX_SNI_Free+0x2a>
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f00d fb53 	bl	8018be4 <wolfSSL_Free>
            break;
 800b53e:	bf00      	nop
        }

        XFREE(sni, heap, DYNAMIC_TYPE_TLSX);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	60bb      	str	r3, [r7, #8]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <TLSX_SNI_Free+0x3c>
 800b54a:	68b8      	ldr	r0, [r7, #8]
 800b54c:	f00d fb4a 	bl	8018be4 <wolfSSL_Free>
    }
    (void)heap;
}
 800b550:	bf00      	nop
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <TLSX_SNI_FreeAll>:

/** Releases all SNI objects in the provided list. */
static void TLSX_SNI_FreeAll(SNI* list, void* heap)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
    SNI* sni;

    while ((sni = list)) {
 800b562:	e006      	b.n	800b572 <TLSX_SNI_FreeAll+0x1a>
        list = sni->next;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	607b      	str	r3, [r7, #4]
        TLSX_SNI_Free(sni, heap);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff ffd1 	bl	800b514 <TLSX_SNI_Free>
    while ((sni = list)) {
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1f3      	bne.n	800b564 <TLSX_SNI_FreeAll+0xc>
    }
}
 800b57c:	bf00      	nop
 800b57e:	bf00      	nop
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <TLSX_SupportedCurve_FreeAll>:

    return 0;
}

static void TLSX_SupportedCurve_FreeAll(SupportedCurve* list, void* heap)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
    SupportedCurve* curve;

    while ((curve = list)) {
 800b590:	e00a      	b.n	800b5a8 <TLSX_SupportedCurve_FreeAll+0x22>
        list = curve->next;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	607b      	str	r3, [r7, #4]
        XFREE(curve, heap, DYNAMIC_TYPE_TLSX);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	60bb      	str	r3, [r7, #8]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <TLSX_SupportedCurve_FreeAll+0x22>
 800b5a2:	68b8      	ldr	r0, [r7, #8]
 800b5a4:	f00d fb1e 	bl	8018be4 <wolfSSL_Free>
    while ((curve = list)) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1ef      	bne.n	800b592 <TLSX_SupportedCurve_FreeAll+0xc>
    }
    (void)heap;
}
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <TLSX_PointFormat_FreeAll>:

static void TLSX_PointFormat_FreeAll(PointFormat* list, void* heap)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
    PointFormat* point;

    while ((point = list)) {
 800b5c6:	e00a      	b.n	800b5de <TLSX_PointFormat_FreeAll+0x22>
        list = point->next;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	607b      	str	r3, [r7, #4]
        XFREE(point, heap, DYNAMIC_TYPE_TLSX);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	60bb      	str	r3, [r7, #8]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <TLSX_PointFormat_FreeAll+0x22>
 800b5d8:	68b8      	ldr	r0, [r7, #8]
 800b5da:	f00d fb03 	bl	8018be4 <wolfSSL_Free>
    while ((point = list)) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	60fb      	str	r3, [r7, #12]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1ef      	bne.n	800b5c8 <TLSX_PointFormat_FreeAll+0xc>
    }
    (void)heap;
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <TLSX_KeyShare_FreeAll>:
 *
 * list  The linked list of key share entry objects.
 * heap  The heap used for allocation.
 */
static void TLSX_KeyShare_FreeAll(KeyShareEntry* list, void* heap)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b088      	sub	sp, #32
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
    KeyShareEntry* current;

    while ((current = list) != NULL) {
 800b5fc:	e03b      	b.n	800b676 <TLSX_KeyShare_FreeAll+0x84>
        list = current->next;
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	607b      	str	r3, [r7, #4]
        if (WOLFSSL_NAMED_GROUP_IS_FFHDE(current->group)) {
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	2bff      	cmp	r3, #255	; 0xff
 800b60a:	d904      	bls.n	800b616 <TLSX_KeyShare_FreeAll+0x24>
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b614:	d30c      	bcc.n	800b630 <TLSX_KeyShare_FreeAll+0x3e>
#ifndef NO_DH
            wc_FreeDhKey((DhKey*)current->key);
#endif
        }
        else if (current->group == WOLFSSL_ECC_X25519) {
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	2b1d      	cmp	r3, #29
 800b61c:	d008      	beq.n	800b630 <TLSX_KeyShare_FreeAll+0x3e>
#ifdef HAVE_CURVE25519
            wc_curve25519_free((curve25519_key*)current->key);
#endif
        }
        else if (current->group == WOLFSSL_ECC_X448) {
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	2b1e      	cmp	r3, #30
 800b624:	d004      	beq.n	800b630 <TLSX_KeyShare_FreeAll+0x3e>
            ForceZero((byte*)current->key, current->keyLen);
        }
#endif
        else {
#ifdef HAVE_ECC
            wc_ecc_free((ecc_key*)current->key);
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f00b fde8 	bl	8017200 <wc_ecc_free>
#endif
        }
        XFREE(current->key, heap, DYNAMIC_TYPE_PRIVATE_KEY);
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	61bb      	str	r3, [r7, #24]
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <TLSX_KeyShare_FreeAll+0x50>
 800b63c:	69b8      	ldr	r0, [r7, #24]
 800b63e:	f00d fad1 	bl	8018be4 <wolfSSL_Free>
    #if !defined(NO_DH) && (!defined(NO_CERTS) || !defined(NO_PSK))
        XFREE(current->privKey, heap, DYNAMIC_TYPE_PRIVATE_KEY);
    #endif
        XFREE(current->pubKey, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <TLSX_KeyShare_FreeAll+0x62>
 800b64e:	6978      	ldr	r0, [r7, #20]
 800b650:	f00d fac8 	bl	8018be4 <wolfSSL_Free>
        XFREE(current->ke, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <TLSX_KeyShare_FreeAll+0x74>
 800b660:	6938      	ldr	r0, [r7, #16]
 800b662:	f00d fabf 	bl	8018be4 <wolfSSL_Free>
        XFREE(current, heap, DYNAMIC_TYPE_TLSX);
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <TLSX_KeyShare_FreeAll+0x84>
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f00d fab7 	bl	8018be4 <wolfSSL_Free>
    while ((current = list) != NULL) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	61fb      	str	r3, [r7, #28]
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1be      	bne.n	800b5fe <TLSX_KeyShare_FreeAll+0xc>
    }

    (void)heap;
}
 800b680:	bf00      	nop
 800b682:	bf00      	nop
 800b684:	3720      	adds	r7, #32
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <TLSX_FreeAll>:
    }
}

/** Releases all extensions in the provided list. */
void TLSX_FreeAll(TLSX* list, void* heap)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
    TLSX* extension;

    while ((extension = list)) {
 800b696:	e0a3      	b.n	800b7e0 <TLSX_FreeAll+0x154>
        list = extension->next;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	607b      	str	r3, [r7, #4]

        switch (extension->type) {
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	2b33      	cmp	r3, #51	; 0x33
 800b6a4:	dc70      	bgt.n	800b788 <TLSX_FreeAll+0xfc>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f2c0 808f 	blt.w	800b7ca <TLSX_FreeAll+0x13e>
 800b6ac:	2b33      	cmp	r3, #51	; 0x33
 800b6ae:	f200 808c 	bhi.w	800b7ca <TLSX_FreeAll+0x13e>
 800b6b2:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <TLSX_FreeAll+0x2c>)
 800b6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b8:	0800b793 	.word	0x0800b793
 800b6bc:	0800b7cb 	.word	0x0800b7cb
 800b6c0:	0800b7cb 	.word	0x0800b7cb
 800b6c4:	0800b7cb 	.word	0x0800b7cb
 800b6c8:	0800b7cb 	.word	0x0800b7cb
 800b6cc:	0800b7cb 	.word	0x0800b7cb
 800b6d0:	0800b7cb 	.word	0x0800b7cb
 800b6d4:	0800b7cb 	.word	0x0800b7cb
 800b6d8:	0800b7cb 	.word	0x0800b7cb
 800b6dc:	0800b7cb 	.word	0x0800b7cb
 800b6e0:	0800b7a1 	.word	0x0800b7a1
 800b6e4:	0800b7af 	.word	0x0800b7af
 800b6e8:	0800b7cb 	.word	0x0800b7cb
 800b6ec:	0800b7cb 	.word	0x0800b7cb
 800b6f0:	0800b7cb 	.word	0x0800b7cb
 800b6f4:	0800b7cb 	.word	0x0800b7cb
 800b6f8:	0800b7cb 	.word	0x0800b7cb
 800b6fc:	0800b7cb 	.word	0x0800b7cb
 800b700:	0800b7cb 	.word	0x0800b7cb
 800b704:	0800b7cb 	.word	0x0800b7cb
 800b708:	0800b7cb 	.word	0x0800b7cb
 800b70c:	0800b7cb 	.word	0x0800b7cb
 800b710:	0800b7cb 	.word	0x0800b7cb
 800b714:	0800b7cb 	.word	0x0800b7cb
 800b718:	0800b7cb 	.word	0x0800b7cb
 800b71c:	0800b7cb 	.word	0x0800b7cb
 800b720:	0800b7cb 	.word	0x0800b7cb
 800b724:	0800b7cb 	.word	0x0800b7cb
 800b728:	0800b7cb 	.word	0x0800b7cb
 800b72c:	0800b7cb 	.word	0x0800b7cb
 800b730:	0800b7cb 	.word	0x0800b7cb
 800b734:	0800b7cb 	.word	0x0800b7cb
 800b738:	0800b7cb 	.word	0x0800b7cb
 800b73c:	0800b7cb 	.word	0x0800b7cb
 800b740:	0800b7cb 	.word	0x0800b7cb
 800b744:	0800b7cb 	.word	0x0800b7cb
 800b748:	0800b7cb 	.word	0x0800b7cb
 800b74c:	0800b7cb 	.word	0x0800b7cb
 800b750:	0800b7cb 	.word	0x0800b7cb
 800b754:	0800b7cb 	.word	0x0800b7cb
 800b758:	0800b7cb 	.word	0x0800b7cb
 800b75c:	0800b7cb 	.word	0x0800b7cb
 800b760:	0800b7cb 	.word	0x0800b7cb
 800b764:	0800b7cb 	.word	0x0800b7cb
 800b768:	0800b7cb 	.word	0x0800b7cb
 800b76c:	0800b7cb 	.word	0x0800b7cb
 800b770:	0800b7cb 	.word	0x0800b7cb
 800b774:	0800b7cb 	.word	0x0800b7cb
 800b778:	0800b7cb 	.word	0x0800b7cb
 800b77c:	0800b7cb 	.word	0x0800b7cb
 800b780:	0800b7cb 	.word	0x0800b7cb
 800b784:	0800b7bd 	.word	0x0800b7bd
 800b788:	f64f 7201 	movw	r2, #65281	; 0xff01
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d01e      	beq.n	800b7ce <TLSX_FreeAll+0x142>
            CID_FREE((byte*)extension->data, heap);
            break;
#endif /* WOLFSSL_DTLS_CID */

            default:
                break;
 800b790:	e01b      	b.n	800b7ca <TLSX_FreeAll+0x13e>
                SNI_FREE_ALL((SNI*)extension->data, heap);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff fedd 	bl	800b558 <TLSX_SNI_FreeAll>
                break;
 800b79e:	e017      	b.n	800b7d0 <TLSX_FreeAll+0x144>
                EC_FREE_ALL((SupportedCurve*)extension->data, heap);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff feed 	bl	800b586 <TLSX_SupportedCurve_FreeAll>
                break;
 800b7ac:	e010      	b.n	800b7d0 <TLSX_FreeAll+0x144>
                PF_FREE_ALL((PointFormat*)extension->data, heap);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7ff ff01 	bl	800b5bc <TLSX_PointFormat_FreeAll>
                break;
 800b7ba:	e009      	b.n	800b7d0 <TLSX_FreeAll+0x144>
                KS_FREE_ALL((KeyShareEntry*)extension->data, heap);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff ff15 	bl	800b5f2 <TLSX_KeyShare_FreeAll>
                break;
 800b7c8:	e002      	b.n	800b7d0 <TLSX_FreeAll+0x144>
                break;
 800b7ca:	bf00      	nop
 800b7cc:	e000      	b.n	800b7d0 <TLSX_FreeAll+0x144>
                break;
 800b7ce:	bf00      	nop
        }

        XFREE(extension, heap, DYNAMIC_TYPE_TLSX);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	60bb      	str	r3, [r7, #8]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <TLSX_FreeAll+0x154>
 800b7da:	68b8      	ldr	r0, [r7, #8]
 800b7dc:	f00d fa02 	bl	8018be4 <wolfSSL_Free>
    while ((extension = list)) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f47f af56 	bne.w	800b698 <TLSX_FreeAll+0xc>
    }

    (void)heap;
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop

0800b7f8 <wolfTLSv1_3_client_method>:
     *
     * returns the method data for a TLS v1.3 client.
     */
    WOLFSSL_ABI
    WOLFSSL_METHOD* wolfTLSv1_3_client_method(void)
    {
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
        return wolfTLSv1_3_client_method_ex(NULL);
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f000 f803 	bl	800b808 <wolfTLSv1_3_client_method_ex>
 800b802:	4603      	mov	r3, r0
    }
 800b804:	4618      	mov	r0, r3
 800b806:	bd80      	pop	{r7, pc}

0800b808 <wolfTLSv1_3_client_method_ex>:
     *
     * heap  The heap used for allocation.
     * returns the method data for a TLS v1.3 client.
     */
    WOLFSSL_METHOD* wolfTLSv1_3_client_method_ex(void* heap)
    {
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
        WOLFSSL_METHOD* method = (WOLFSSL_METHOD*)
                                 XMALLOC(sizeof(WOLFSSL_METHOD), heap,
 800b810:	2004      	movs	r0, #4
 800b812:	f00d f9cb 	bl	8018bac <wolfSSL_Malloc>
 800b816:	60f8      	str	r0, [r7, #12]
                                         DYNAMIC_TYPE_METHOD);
        (void)heap;
        WOLFSSL_ENTER("TLSv1_3_client_method_ex");
        if (method)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d007      	beq.n	800b82e <wolfTLSv1_3_client_method_ex+0x26>
            InitSSL_Method(method, MakeTLSv1_3());
 800b81e:	f7ff fe63 	bl	800b4e8 <MakeTLSv1_3>
 800b822:	4603      	mov	r3, r0
 800b824:	813b      	strh	r3, [r7, #8]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7f7 fd95 	bl	8003358 <InitSSL_Method>
        return method;
 800b82e:	68fb      	ldr	r3, [r7, #12]
    }
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <rotlFixed>:
    {
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	f1c3 0320 	rsb	r3, r3, #32
 800b84a:	fa62 f303 	ror.w	r3, r2, r3
    }
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <ByteReverseWord32>:
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	0a1b      	lsrs	r3, r3, #8
 800b866:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	021b      	lsls	r3, r3, #8
 800b86e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800b872:	4313      	orrs	r3, r2
 800b874:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 800b876:	2110      	movs	r1, #16
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff ffdd 	bl	800b838 <rotlFixed>
 800b87e:	4603      	mov	r3, r0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <ByteReverseWords>:
{
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
        count = byteCount/(word32)sizeof(word32);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	089b      	lsrs	r3, r3, #2
 800b898:	613b      	str	r3, [r7, #16]
        for (i = 0; i < count; i++)
 800b89a:	2300      	movs	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e010      	b.n	800b8c2 <ByteReverseWords+0x3a>
            out[i] = ByteReverseWord32(in[i]);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	6819      	ldr	r1, [r3, #0]
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	18d4      	adds	r4, r2, r3
 800b8b2:	4608      	mov	r0, r1
 800b8b4:	f7ff ffd1 	bl	800b85a <ByteReverseWord32>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	6023      	str	r3, [r4, #0]
        for (i = 0; i < count; i++)
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d3ea      	bcc.n	800b8a0 <ByteReverseWords+0x18>
}
 800b8ca:	bf00      	nop
 800b8cc:	bf00      	nop
 800b8ce:	371c      	adds	r7, #28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd90      	pop	{r4, r7, pc}

0800b8d4 <XorWords>:
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
    for (i = 0; i < n; i++) r[i] ^= a[i];
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	e012      	b.n	800b90c <XorWords+0x38>
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	6819      	ldr	r1, [r3, #0]
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	4403      	add	r3, r0
 800b902:	404a      	eors	r2, r1
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	3301      	adds	r3, #1
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d3e8      	bcc.n	800b8e6 <XorWords+0x12>
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <xorbuf>:
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b088      	sub	sp, #32
 800b926:	af00      	add	r7, sp, #0
 800b928:	60f8      	str	r0, [r7, #12]
 800b92a:	60b9      	str	r1, [r7, #8]
 800b92c:	607a      	str	r2, [r7, #4]
    if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	431a      	orrs	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4313      	orrs	r3, r2
 800b938:	f003 0303 	and.w	r3, r3, #3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d107      	bne.n	800b950 <xorbuf+0x2e>
        XorWords( (wolfssl_word*)buf,
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	089b      	lsrs	r3, r3, #2
 800b944:	461a      	mov	r2, r3
 800b946:	68b9      	ldr	r1, [r7, #8]
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f7ff ffc3 	bl	800b8d4 <XorWords>
}
 800b94e:	e01b      	b.n	800b988 <xorbuf+0x66>
        byte*       b = (byte*)buf;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	61bb      	str	r3, [r7, #24]
        const byte* m = (const byte*)mask;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	617b      	str	r3, [r7, #20]
        for (i = 0; i < count; i++) b[i] ^= m[i];
 800b958:	2300      	movs	r3, #0
 800b95a:	61fb      	str	r3, [r7, #28]
 800b95c:	e010      	b.n	800b980 <xorbuf+0x5e>
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	4413      	add	r3, r2
 800b964:	7819      	ldrb	r1, [r3, #0]
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	4413      	add	r3, r2
 800b96c:	781a      	ldrb	r2, [r3, #0]
 800b96e:	69b8      	ldr	r0, [r7, #24]
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	4403      	add	r3, r0
 800b974:	404a      	eors	r2, r1
 800b976:	b2d2      	uxtb	r2, r2
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	3301      	adds	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	69fa      	ldr	r2, [r7, #28]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	429a      	cmp	r2, r3
 800b986:	d3ea      	bcc.n	800b95e <xorbuf+0x3c>
}
 800b988:	bf00      	nop
 800b98a:	3720      	adds	r7, #32
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <ForceZero>:
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 800b99e:	e004      	b.n	800b9aa <ForceZero+0x1a>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	60fa      	str	r2, [r7, #12]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	1e5a      	subs	r2, r3, #1
 800b9ae:	603a      	str	r2, [r7, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1f5      	bne.n	800b9a0 <ForceZero+0x10>
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <PreFetchTd>:

#ifndef WC_NO_CACHE_RESISTANT
#ifndef WOLFSSL_AES_SMALL_TABLES
/* load 4 Td Tables into cache by cache line stride */
static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTd(void)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
    word32 x = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]
    int i,j;

    for (i = 0; i < 4; i++) {
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60bb      	str	r3, [r7, #8]
 800b9d2:	e015      	b.n	800ba00 <PreFetchTd+0x3c>
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	607b      	str	r3, [r7, #4]
 800b9d8:	e00c      	b.n	800b9f4 <PreFetchTd+0x30>
            x &= Td[i][j];
 800b9da:	490e      	ldr	r1, [pc, #56]	; (800ba14 <PreFetchTd+0x50>)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	021a      	lsls	r2, r3, #8
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	607b      	str	r3, [r7, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2bff      	cmp	r3, #255	; 0xff
 800b9f8:	ddef      	ble.n	800b9da <PreFetchTd+0x16>
    for (i = 0; i < 4; i++) {
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60bb      	str	r3, [r7, #8]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	dde6      	ble.n	800b9d4 <PreFetchTd+0x10>
        }
    }
    return x;
 800ba06:	68fb      	ldr	r3, [r7, #12]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	0802ac18 	.word	0x0802ac18

0800ba18 <PreFetchTd4>:
#endif

/* load Td Table4 into cache by cache line stride */
static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTd4(void)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
    word32 x = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
    int i;

    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
 800ba22:	2300      	movs	r3, #0
 800ba24:	603b      	str	r3, [r7, #0]
 800ba26:	e00a      	b.n	800ba3e <PreFetchTd4+0x26>
        x &= (word32)Td4[i];
 800ba28:	4a0a      	ldr	r2, [pc, #40]	; (800ba54 <PreFetchTd4+0x3c>)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	461a      	mov	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4013      	ands	r3, r2
 800ba36:	607b      	str	r3, [r7, #4]
    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	3320      	adds	r3, #32
 800ba3c:	603b      	str	r3, [r7, #0]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2bff      	cmp	r3, #255	; 0xff
 800ba42:	ddf1      	ble.n	800ba28 <PreFetchTd4+0x10>
    }
    return x;
 800ba44:	687b      	ldr	r3, [r7, #4]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	0802bc18 	.word	0x0802bc18

0800ba58 <wc_AesDecrypt>:
#endif

/* Software AES - ECB Decrypt */
static WARN_UNUSED_RESULT int wc_AesDecrypt(
    Aes* aes, const byte* inBlock, byte* outBlock)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08e      	sub	sp, #56	; 0x38
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
    word32 s0, s1, s2, s3;
    word32 t0, t1, t2, t3;
    word32 r = aes->rounds >> 1;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba6a:	085b      	lsrs	r3, r3, #1
 800ba6c:	627b      	str	r3, [r7, #36]	; 0x24
    const word32* rk = aes->key;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	623b      	str	r3, [r7, #32]

    if (r > 7 || r == 0) {
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	2b07      	cmp	r3, #7
 800ba76:	d802      	bhi.n	800ba7e <wc_AesDecrypt+0x26>
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d103      	bne.n	800ba86 <wc_AesDecrypt+0x2e>
        WOLFSSL_ERROR_VERBOSE(KEYUSAGE_E);
        return KEYUSAGE_E;
 800ba7e:	f06f 03e1 	mvn.w	r3, #225	; 0xe1
 800ba82:	f001 b8ce 	b.w	800cc22 <wc_AesDecrypt+0x11ca>
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	681b      	ldr	r3, [r3, #0]

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 800ba8a:	61fb      	str	r3, [r7, #28]
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	61bb      	str	r3, [r7, #24]
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	3308      	adds	r3, #8
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	617b      	str	r3, [r7, #20]
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	330c      	adds	r3, #12
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	613b      	str	r3, [r7, #16]

#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff fed7 	bl	800b85a <ByteReverseWord32>
 800baac:	4603      	mov	r3, r0
 800baae:	61fb      	str	r3, [r7, #28]
    s1 = ByteReverseWord32(s1);
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff fed1 	bl	800b85a <ByteReverseWord32>
 800bab8:	4603      	mov	r3, r0
 800baba:	61bb      	str	r3, [r7, #24]
    s2 = ByteReverseWord32(s2);
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff fecb 	bl	800b85a <ByteReverseWord32>
 800bac4:	4603      	mov	r3, r0
 800bac6:	617b      	str	r3, [r7, #20]
    s3 = ByteReverseWord32(s3);
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff fec5 	bl	800b85a <ByteReverseWord32>
 800bad0:	4603      	mov	r3, r0
 800bad2:	613b      	str	r3, [r7, #16]
#endif

    s0 ^= rk[0];
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	4053      	eors	r3, r2
 800badc:	61fb      	str	r3, [r7, #28]
    s1 ^= rk[1];
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	3304      	adds	r3, #4
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	4053      	eors	r3, r2
 800bae8:	61bb      	str	r3, [r7, #24]
    s2 ^= rk[2];
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	3308      	adds	r3, #8
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	4053      	eors	r3, r2
 800baf4:	617b      	str	r3, [r7, #20]
    s3 ^= rk[3];
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	330c      	adds	r3, #12
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	4053      	eors	r3, r2
 800bb00:	613b      	str	r3, [r7, #16]

#ifndef WOLFSSL_AES_SMALL_TABLES
#ifndef WC_NO_CACHE_RESISTANT
    s0 |= PreFetchTd();
 800bb02:	f7ff ff5f 	bl	800b9c4 <PreFetchTd>
 800bb06:	4602      	mov	r2, r0
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	61fb      	str	r3, [r7, #28]
    s2 = Td[0][GETBYTE(t2, 3)] ^ Td[1][GETBYTE(t1, 2)] ^            \
         Td[2][GETBYTE(t0, 1)] ^ Td[3][GETBYTE(t3, 0)] ^ rk[(o)+2]; \
    s3 = Td[0][GETBYTE(t3, 3)] ^ Td[1][GETBYTE(t2, 2)] ^            \
         Td[2][GETBYTE(t1, 1)] ^ Td[3][GETBYTE(t0, 0)] ^ rk[(o)+3]

                       DEC_ROUND_T_S( 0);
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	0e1b      	lsrs	r3, r3, #24
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	461a      	mov	r2, r3
 800bb16:	4bb6      	ldr	r3, [pc, #728]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	0c1b      	lsrs	r3, r3, #16
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	49b3      	ldr	r1, [pc, #716]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bb28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb2c:	405a      	eors	r2, r3
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	0a1b      	lsrs	r3, r3, #8
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	49ae      	ldr	r1, [pc, #696]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bb3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb3e:	405a      	eors	r2, r3
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	49aa      	ldr	r1, [pc, #680]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb46:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bb4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb4e:	405a      	eors	r2, r3
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	3310      	adds	r3, #16
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4053      	eors	r3, r2
 800bb58:	637b      	str	r3, [r7, #52]	; 0x34
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	0e1b      	lsrs	r3, r3, #24
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	461a      	mov	r2, r3
 800bb62:	4ba3      	ldr	r3, [pc, #652]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	0c1b      	lsrs	r3, r3, #16
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	49a0      	ldr	r1, [pc, #640]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bb74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb78:	405a      	eors	r2, r3
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	0a1b      	lsrs	r3, r3, #8
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	499b      	ldr	r1, [pc, #620]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bb86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb8a:	405a      	eors	r2, r3
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	4997      	ldr	r1, [pc, #604]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bb92:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bb96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb9a:	405a      	eors	r2, r3
 800bb9c:	6a3b      	ldr	r3, [r7, #32]
 800bb9e:	3314      	adds	r3, #20
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4053      	eors	r3, r2
 800bba4:	633b      	str	r3, [r7, #48]	; 0x30
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	0e1b      	lsrs	r3, r3, #24
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	461a      	mov	r2, r3
 800bbae:	4b90      	ldr	r3, [pc, #576]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bbb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	0c1b      	lsrs	r3, r3, #16
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	498d      	ldr	r1, [pc, #564]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bbbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bbc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bbc4:	405a      	eors	r2, r3
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	0a1b      	lsrs	r3, r3, #8
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	4988      	ldr	r1, [pc, #544]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bbce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bbd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bbd6:	405a      	eors	r2, r3
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	4984      	ldr	r1, [pc, #528]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bbde:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bbe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bbe6:	405a      	eors	r2, r3
 800bbe8:	6a3b      	ldr	r3, [r7, #32]
 800bbea:	3318      	adds	r3, #24
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4053      	eors	r3, r2
 800bbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	0e1b      	lsrs	r3, r3, #24
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4b7d      	ldr	r3, [pc, #500]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bbfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	0c1b      	lsrs	r3, r3, #16
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	497a      	ldr	r1, [pc, #488]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bc0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc10:	405a      	eors	r2, r3
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	0a1b      	lsrs	r3, r3, #8
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	4975      	ldr	r1, [pc, #468]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bc1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc22:	405a      	eors	r2, r3
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	4971      	ldr	r1, [pc, #452]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc2a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bc2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc32:	405a      	eors	r2, r3
 800bc34:	6a3b      	ldr	r3, [r7, #32]
 800bc36:	331c      	adds	r3, #28
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4053      	eors	r3, r2
 800bc3c:	62bb      	str	r3, [r7, #40]	; 0x28
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 800bc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc40:	0e1b      	lsrs	r3, r3, #24
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	461a      	mov	r2, r3
 800bc46:	4b6a      	ldr	r3, [pc, #424]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4e:	0c1b      	lsrs	r3, r3, #16
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	4967      	ldr	r1, [pc, #412]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bc58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc5c:	405a      	eors	r2, r3
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	0a1b      	lsrs	r3, r3, #8
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	4962      	ldr	r1, [pc, #392]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bc6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc6e:	405a      	eors	r2, r3
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	495e      	ldr	r1, [pc, #376]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc76:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bc7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc7e:	405a      	eors	r2, r3
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	3320      	adds	r3, #32
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4053      	eors	r3, r2
 800bc88:	61fb      	str	r3, [r7, #28]
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	0e1b      	lsrs	r3, r3, #24
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	461a      	mov	r2, r3
 800bc92:	4b57      	ldr	r3, [pc, #348]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bc94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc9a:	0c1b      	lsrs	r3, r3, #16
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	4954      	ldr	r1, [pc, #336]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bca0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bca8:	405a      	eors	r2, r3
 800bcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcac:	0a1b      	lsrs	r3, r3, #8
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	494f      	ldr	r1, [pc, #316]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bcb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bcb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bcba:	405a      	eors	r2, r3
 800bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	494b      	ldr	r1, [pc, #300]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bcc2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bcc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bcca:	405a      	eors	r2, r3
 800bccc:	6a3b      	ldr	r3, [r7, #32]
 800bcce:	3324      	adds	r3, #36	; 0x24
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4053      	eors	r3, r2
 800bcd4:	61bb      	str	r3, [r7, #24]
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	0e1b      	lsrs	r3, r3, #24
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	461a      	mov	r2, r3
 800bcde:	4b44      	ldr	r3, [pc, #272]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bce0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	0c1b      	lsrs	r3, r3, #16
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	4941      	ldr	r1, [pc, #260]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bcec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bcf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bcf4:	405a      	eors	r2, r3
 800bcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf8:	0a1b      	lsrs	r3, r3, #8
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	493c      	ldr	r1, [pc, #240]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bcfe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd06:	405a      	eors	r2, r3
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	4938      	ldr	r1, [pc, #224]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd0e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bd12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd16:	405a      	eors	r2, r3
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	3328      	adds	r3, #40	; 0x28
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4053      	eors	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	0e1b      	lsrs	r3, r3, #24
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	0c1b      	lsrs	r3, r3, #16
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	492e      	ldr	r1, [pc, #184]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bd3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd40:	405a      	eors	r2, r3
 800bd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd44:	0a1b      	lsrs	r3, r3, #8
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	4929      	ldr	r1, [pc, #164]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd52:	405a      	eors	r2, r3
 800bd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	4925      	ldr	r1, [pc, #148]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd5a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bd5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd62:	405a      	eors	r2, r3
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	332c      	adds	r3, #44	; 0x2c
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4053      	eors	r3, r2
 800bd6c:	613b      	str	r3, [r7, #16]
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	0e1b      	lsrs	r3, r3, #24
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	461a      	mov	r2, r3
 800bd76:	4b1e      	ldr	r3, [pc, #120]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	0c1b      	lsrs	r3, r3, #16
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	491b      	ldr	r1, [pc, #108]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bd88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd8c:	405a      	eors	r2, r3
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	0a1b      	lsrs	r3, r3, #8
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	4916      	ldr	r1, [pc, #88]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bd96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd9e:	405a      	eors	r2, r3
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	4912      	ldr	r1, [pc, #72]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bda6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bdaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bdae:	405a      	eors	r2, r3
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	3330      	adds	r3, #48	; 0x30
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4053      	eors	r3, r2
 800bdb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	0e1b      	lsrs	r3, r3, #24
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4b0b      	ldr	r3, [pc, #44]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bdc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	0c1b      	lsrs	r3, r3, #16
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	4908      	ldr	r1, [pc, #32]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bdd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bdd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bdd8:	405a      	eors	r2, r3
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	0a1b      	lsrs	r3, r3, #8
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	4903      	ldr	r1, [pc, #12]	; (800bdf0 <wc_AesDecrypt+0x398>)
 800bde2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bde6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bdea:	405a      	eors	r2, r3
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	e001      	b.n	800bdf4 <wc_AesDecrypt+0x39c>
 800bdf0:	0802ac18 	.word	0x0802ac18
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	49b6      	ldr	r1, [pc, #728]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bdf8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bdfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be00:	405a      	eors	r2, r3
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	3334      	adds	r3, #52	; 0x34
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4053      	eors	r3, r2
 800be0a:	633b      	str	r3, [r7, #48]	; 0x30
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	0e1b      	lsrs	r3, r3, #24
 800be10:	b2db      	uxtb	r3, r3
 800be12:	461a      	mov	r2, r3
 800be14:	4bae      	ldr	r3, [pc, #696]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	0c1b      	lsrs	r3, r3, #16
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	49ab      	ldr	r1, [pc, #684]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be2a:	405a      	eors	r2, r3
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	0a1b      	lsrs	r3, r3, #8
 800be30:	b2db      	uxtb	r3, r3
 800be32:	49a7      	ldr	r1, [pc, #668]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800be38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be3c:	405a      	eors	r2, r3
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	49a3      	ldr	r1, [pc, #652]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be44:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800be48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be4c:	405a      	eors	r2, r3
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	3338      	adds	r3, #56	; 0x38
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4053      	eors	r3, r2
 800be56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	0e1b      	lsrs	r3, r3, #24
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	461a      	mov	r2, r3
 800be60:	4b9b      	ldr	r3, [pc, #620]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	0c1b      	lsrs	r3, r3, #16
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	4998      	ldr	r1, [pc, #608]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be76:	405a      	eors	r2, r3
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	0a1b      	lsrs	r3, r3, #8
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	4994      	ldr	r1, [pc, #592]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800be84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be88:	405a      	eors	r2, r3
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	4990      	ldr	r1, [pc, #576]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800be90:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800be94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be98:	405a      	eors	r2, r3
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	333c      	adds	r3, #60	; 0x3c
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4053      	eors	r3, r2
 800bea2:	62bb      	str	r3, [r7, #40]	; 0x28
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
 800bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea6:	0e1b      	lsrs	r3, r3, #24
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	461a      	mov	r2, r3
 800beac:	4b88      	ldr	r3, [pc, #544]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800beae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800beb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb4:	0c1b      	lsrs	r3, r3, #16
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	4985      	ldr	r1, [pc, #532]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800beba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bec2:	405a      	eors	r2, r3
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	0a1b      	lsrs	r3, r3, #8
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	4981      	ldr	r1, [pc, #516]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800becc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bed0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bed4:	405a      	eors	r2, r3
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	497d      	ldr	r1, [pc, #500]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bedc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bee0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bee4:	405a      	eors	r2, r3
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	3340      	adds	r3, #64	; 0x40
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4053      	eors	r3, r2
 800beee:	61fb      	str	r3, [r7, #28]
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	0e1b      	lsrs	r3, r3, #24
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	461a      	mov	r2, r3
 800bef8:	4b75      	ldr	r3, [pc, #468]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800befa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800befe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf00:	0c1b      	lsrs	r3, r3, #16
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	4972      	ldr	r1, [pc, #456]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bf0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bf0e:	405a      	eors	r2, r3
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	496e      	ldr	r1, [pc, #440]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bf1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bf20:	405a      	eors	r2, r3
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	496a      	ldr	r1, [pc, #424]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bf2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bf30:	405a      	eors	r2, r3
 800bf32:	6a3b      	ldr	r3, [r7, #32]
 800bf34:	3344      	adds	r3, #68	; 0x44
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4053      	eors	r3, r2
 800bf3a:	61bb      	str	r3, [r7, #24]
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	0e1b      	lsrs	r3, r3, #24
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	4b62      	ldr	r3, [pc, #392]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	0c1b      	lsrs	r3, r3, #16
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	495f      	ldr	r1, [pc, #380]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bf56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bf5a:	405a      	eors	r2, r3
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	0a1b      	lsrs	r3, r3, #8
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	495b      	ldr	r1, [pc, #364]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bf68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bf6c:	405a      	eors	r2, r3
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	4957      	ldr	r1, [pc, #348]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bf78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bf7c:	405a      	eors	r2, r3
 800bf7e:	6a3b      	ldr	r3, [r7, #32]
 800bf80:	3348      	adds	r3, #72	; 0x48
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4053      	eors	r3, r2
 800bf86:	617b      	str	r3, [r7, #20]
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	0e1b      	lsrs	r3, r3, #24
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	4b4f      	ldr	r3, [pc, #316]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	0c1b      	lsrs	r3, r3, #16
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	494c      	ldr	r1, [pc, #304]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bf9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bfa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bfa6:	405a      	eors	r2, r3
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	4948      	ldr	r1, [pc, #288]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bfb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bfb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bfb8:	405a      	eors	r2, r3
 800bfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	4944      	ldr	r1, [pc, #272]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bfc0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bfc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bfc8:	405a      	eors	r2, r3
 800bfca:	6a3b      	ldr	r3, [r7, #32]
 800bfcc:	334c      	adds	r3, #76	; 0x4c
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4053      	eors	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	0e1b      	lsrs	r3, r3, #24
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	4b3c      	ldr	r3, [pc, #240]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bfde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	0c1b      	lsrs	r3, r3, #16
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	4939      	ldr	r1, [pc, #228]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bfea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bfee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bff2:	405a      	eors	r2, r3
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	4935      	ldr	r1, [pc, #212]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800bffc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c004:	405a      	eors	r2, r3
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	4931      	ldr	r1, [pc, #196]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c00c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c010:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c014:	405a      	eors	r2, r3
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	3350      	adds	r3, #80	; 0x50
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4053      	eors	r3, r2
 800c01e:	637b      	str	r3, [r7, #52]	; 0x34
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	0e1b      	lsrs	r3, r3, #24
 800c024:	b2db      	uxtb	r3, r3
 800c026:	461a      	mov	r2, r3
 800c028:	4b29      	ldr	r3, [pc, #164]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c02a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	0c1b      	lsrs	r3, r3, #16
 800c032:	b2db      	uxtb	r3, r3
 800c034:	4926      	ldr	r1, [pc, #152]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c036:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c03a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c03e:	405a      	eors	r2, r3
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	0a1b      	lsrs	r3, r3, #8
 800c044:	b2db      	uxtb	r3, r3
 800c046:	4922      	ldr	r1, [pc, #136]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c048:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c04c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c050:	405a      	eors	r2, r3
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	491e      	ldr	r1, [pc, #120]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c058:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c05c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c060:	405a      	eors	r2, r3
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	3354      	adds	r3, #84	; 0x54
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4053      	eors	r3, r2
 800c06a:	633b      	str	r3, [r7, #48]	; 0x30
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	0e1b      	lsrs	r3, r3, #24
 800c070:	b2db      	uxtb	r3, r3
 800c072:	461a      	mov	r2, r3
 800c074:	4b16      	ldr	r3, [pc, #88]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c076:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	0c1b      	lsrs	r3, r3, #16
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	4913      	ldr	r1, [pc, #76]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c082:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c086:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c08a:	405a      	eors	r2, r3
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	0a1b      	lsrs	r3, r3, #8
 800c090:	b2db      	uxtb	r3, r3
 800c092:	490f      	ldr	r1, [pc, #60]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c094:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c098:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c09c:	405a      	eors	r2, r3
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	490b      	ldr	r1, [pc, #44]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c0a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c0a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0ac:	405a      	eors	r2, r3
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	3358      	adds	r3, #88	; 0x58
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4053      	eors	r3, r2
 800c0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	0e1b      	lsrs	r3, r3, #24
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	4b03      	ldr	r3, [pc, #12]	; (800c0d0 <wc_AesDecrypt+0x678>)
 800c0c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	0c1b      	lsrs	r3, r3, #16
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	e002      	b.n	800c0d4 <wc_AesDecrypt+0x67c>
 800c0ce:	bf00      	nop
 800c0d0:	0802ac18 	.word	0x0802ac18
 800c0d4:	49b6      	ldr	r1, [pc, #728]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c0d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c0da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0de:	405a      	eors	r2, r3
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	0a1b      	lsrs	r3, r3, #8
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	49b2      	ldr	r1, [pc, #712]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c0e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c0ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0f0:	405a      	eors	r2, r3
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	49ae      	ldr	r1, [pc, #696]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c0f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c0fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c100:	405a      	eors	r2, r3
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	335c      	adds	r3, #92	; 0x5c
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4053      	eors	r3, r2
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	0e1b      	lsrs	r3, r3, #24
 800c110:	b2db      	uxtb	r3, r3
 800c112:	461a      	mov	r2, r3
 800c114:	4ba6      	ldr	r3, [pc, #664]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c116:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	0c1b      	lsrs	r3, r3, #16
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	49a3      	ldr	r1, [pc, #652]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c122:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c126:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c12a:	405a      	eors	r2, r3
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	0a1b      	lsrs	r3, r3, #8
 800c130:	b2db      	uxtb	r3, r3
 800c132:	499f      	ldr	r1, [pc, #636]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c134:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c138:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c13c:	405a      	eors	r2, r3
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	b2db      	uxtb	r3, r3
 800c142:	499b      	ldr	r1, [pc, #620]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c144:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c14c:	405a      	eors	r2, r3
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	3360      	adds	r3, #96	; 0x60
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4053      	eors	r3, r2
 800c156:	61fb      	str	r3, [r7, #28]
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	0e1b      	lsrs	r3, r3, #24
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	461a      	mov	r2, r3
 800c160:	4b93      	ldr	r3, [pc, #588]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c162:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c168:	0c1b      	lsrs	r3, r3, #16
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	4990      	ldr	r1, [pc, #576]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c16e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c172:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c176:	405a      	eors	r2, r3
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	0a1b      	lsrs	r3, r3, #8
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	498c      	ldr	r1, [pc, #560]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c180:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c184:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c188:	405a      	eors	r2, r3
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	4988      	ldr	r1, [pc, #544]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c190:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c198:	405a      	eors	r2, r3
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	3364      	adds	r3, #100	; 0x64
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4053      	eors	r3, r2
 800c1a2:	61bb      	str	r3, [r7, #24]
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a6:	0e1b      	lsrs	r3, r3, #24
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	4b80      	ldr	r3, [pc, #512]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c1ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	0c1b      	lsrs	r3, r3, #16
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	497d      	ldr	r1, [pc, #500]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c1ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c1be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1c2:	405a      	eors	r2, r3
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c6:	0a1b      	lsrs	r3, r3, #8
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	4979      	ldr	r1, [pc, #484]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c1cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c1d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1d4:	405a      	eors	r2, r3
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	4975      	ldr	r1, [pc, #468]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c1dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c1e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c1e4:	405a      	eors	r2, r3
 800c1e6:	6a3b      	ldr	r3, [r7, #32]
 800c1e8:	3368      	adds	r3, #104	; 0x68
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4053      	eors	r3, r2
 800c1ee:	617b      	str	r3, [r7, #20]
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	0e1b      	lsrs	r3, r3, #24
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	4b6d      	ldr	r3, [pc, #436]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c1fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	0c1b      	lsrs	r3, r3, #16
 800c202:	b2db      	uxtb	r3, r3
 800c204:	496a      	ldr	r1, [pc, #424]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c206:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c20a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c20e:	405a      	eors	r2, r3
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	0a1b      	lsrs	r3, r3, #8
 800c214:	b2db      	uxtb	r3, r3
 800c216:	4966      	ldr	r1, [pc, #408]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c218:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c21c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c220:	405a      	eors	r2, r3
 800c222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c224:	b2db      	uxtb	r3, r3
 800c226:	4962      	ldr	r1, [pc, #392]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c228:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c22c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c230:	405a      	eors	r2, r3
 800c232:	6a3b      	ldr	r3, [r7, #32]
 800c234:	336c      	adds	r3, #108	; 0x6c
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4053      	eors	r3, r2
 800c23a:	613b      	str	r3, [r7, #16]
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	0e1b      	lsrs	r3, r3, #24
 800c240:	b2db      	uxtb	r3, r3
 800c242:	461a      	mov	r2, r3
 800c244:	4b5a      	ldr	r3, [pc, #360]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	0c1b      	lsrs	r3, r3, #16
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	4957      	ldr	r1, [pc, #348]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c252:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c25a:	405a      	eors	r2, r3
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	0a1b      	lsrs	r3, r3, #8
 800c260:	b2db      	uxtb	r3, r3
 800c262:	4953      	ldr	r1, [pc, #332]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c264:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c26c:	405a      	eors	r2, r3
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	b2db      	uxtb	r3, r3
 800c272:	494f      	ldr	r1, [pc, #316]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c274:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c27c:	405a      	eors	r2, r3
 800c27e:	6a3b      	ldr	r3, [r7, #32]
 800c280:	3370      	adds	r3, #112	; 0x70
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4053      	eors	r3, r2
 800c286:	637b      	str	r3, [r7, #52]	; 0x34
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	0e1b      	lsrs	r3, r3, #24
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	461a      	mov	r2, r3
 800c290:	4b47      	ldr	r3, [pc, #284]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	0c1b      	lsrs	r3, r3, #16
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	4944      	ldr	r1, [pc, #272]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c29e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c2a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2a6:	405a      	eors	r2, r3
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	0a1b      	lsrs	r3, r3, #8
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	4940      	ldr	r1, [pc, #256]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c2b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c2b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2b8:	405a      	eors	r2, r3
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	493c      	ldr	r1, [pc, #240]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c2c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c2c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2c8:	405a      	eors	r2, r3
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	3374      	adds	r3, #116	; 0x74
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4053      	eors	r3, r2
 800c2d2:	633b      	str	r3, [r7, #48]	; 0x30
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	0e1b      	lsrs	r3, r3, #24
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	461a      	mov	r2, r3
 800c2dc:	4b34      	ldr	r3, [pc, #208]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c2de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	0c1b      	lsrs	r3, r3, #16
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	4931      	ldr	r1, [pc, #196]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c2ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c2ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2f2:	405a      	eors	r2, r3
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	0a1b      	lsrs	r3, r3, #8
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	492d      	ldr	r1, [pc, #180]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c2fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c304:	405a      	eors	r2, r3
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	4929      	ldr	r1, [pc, #164]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c30c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c310:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c314:	405a      	eors	r2, r3
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	3378      	adds	r3, #120	; 0x78
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4053      	eors	r3, r2
 800c31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	0e1b      	lsrs	r3, r3, #24
 800c324:	b2db      	uxtb	r3, r3
 800c326:	461a      	mov	r2, r3
 800c328:	4b21      	ldr	r3, [pc, #132]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c32a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	0c1b      	lsrs	r3, r3, #16
 800c332:	b2db      	uxtb	r3, r3
 800c334:	491e      	ldr	r1, [pc, #120]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c336:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c33a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c33e:	405a      	eors	r2, r3
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	0a1b      	lsrs	r3, r3, #8
 800c344:	b2db      	uxtb	r3, r3
 800c346:	491a      	ldr	r1, [pc, #104]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c348:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c34c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c350:	405a      	eors	r2, r3
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	b2db      	uxtb	r3, r3
 800c356:	4916      	ldr	r1, [pc, #88]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c358:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c35c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c360:	405a      	eors	r2, r3
 800c362:	6a3b      	ldr	r3, [r7, #32]
 800c364:	337c      	adds	r3, #124	; 0x7c
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4053      	eors	r3, r2
 800c36a:	62bb      	str	r3, [r7, #40]	; 0x28
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
 800c36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36e:	0e1b      	lsrs	r3, r3, #24
 800c370:	b2db      	uxtb	r3, r3
 800c372:	461a      	mov	r2, r3
 800c374:	4b0e      	ldr	r3, [pc, #56]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	0c1b      	lsrs	r3, r3, #16
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	490b      	ldr	r1, [pc, #44]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c382:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c38a:	405a      	eors	r2, r3
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	b2db      	uxtb	r3, r3
 800c392:	4907      	ldr	r1, [pc, #28]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c394:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c39c:	405a      	eors	r2, r3
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	4903      	ldr	r1, [pc, #12]	; (800c3b0 <wc_AesDecrypt+0x958>)
 800c3a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c3a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c3ac:	405a      	eors	r2, r3
 800c3ae:	e001      	b.n	800c3b4 <wc_AesDecrypt+0x95c>
 800c3b0:	0802ac18 	.word	0x0802ac18
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	3380      	adds	r3, #128	; 0x80
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4053      	eors	r3, r2
 800c3bc:	61fb      	str	r3, [r7, #28]
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	0e1b      	lsrs	r3, r3, #24
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4bb6      	ldr	r3, [pc, #728]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c3c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ce:	0c1b      	lsrs	r3, r3, #16
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	49b3      	ldr	r1, [pc, #716]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c3d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c3d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c3dc:	405a      	eors	r2, r3
 800c3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e0:	0a1b      	lsrs	r3, r3, #8
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	49ae      	ldr	r1, [pc, #696]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c3e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c3ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c3ee:	405a      	eors	r2, r3
 800c3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	49aa      	ldr	r1, [pc, #680]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c3f6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c3fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c3fe:	405a      	eors	r2, r3
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	3384      	adds	r3, #132	; 0x84
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4053      	eors	r3, r2
 800c408:	61bb      	str	r3, [r7, #24]
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	0e1b      	lsrs	r3, r3, #24
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	461a      	mov	r2, r3
 800c412:	4ba3      	ldr	r3, [pc, #652]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	0c1b      	lsrs	r3, r3, #16
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	49a0      	ldr	r1, [pc, #640]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c420:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c428:	405a      	eors	r2, r3
 800c42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42c:	0a1b      	lsrs	r3, r3, #8
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	499b      	ldr	r1, [pc, #620]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c432:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c436:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c43a:	405a      	eors	r2, r3
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	4997      	ldr	r1, [pc, #604]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c442:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c44a:	405a      	eors	r2, r3
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	3388      	adds	r3, #136	; 0x88
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4053      	eors	r3, r2
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c458:	0e1b      	lsrs	r3, r3, #24
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	461a      	mov	r2, r3
 800c45e:	4b90      	ldr	r3, [pc, #576]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c460:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	0c1b      	lsrs	r3, r3, #16
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	498d      	ldr	r1, [pc, #564]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c46c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c470:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c474:	405a      	eors	r2, r3
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	0a1b      	lsrs	r3, r3, #8
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	4988      	ldr	r1, [pc, #544]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c47e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c482:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c486:	405a      	eors	r2, r3
 800c488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	4984      	ldr	r1, [pc, #528]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c48e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c496:	405a      	eors	r2, r3
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	338c      	adds	r3, #140	; 0x8c
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4053      	eors	r3, r2
 800c4a0:	613b      	str	r3, [r7, #16]
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	0e1b      	lsrs	r3, r3, #24
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	4b7d      	ldr	r3, [pc, #500]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c4ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	0c1b      	lsrs	r3, r3, #16
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	497a      	ldr	r1, [pc, #488]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c4b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c4bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4c0:	405a      	eors	r2, r3
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	0a1b      	lsrs	r3, r3, #8
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	4975      	ldr	r1, [pc, #468]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c4ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c4ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4d2:	405a      	eors	r2, r3
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	4971      	ldr	r1, [pc, #452]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c4da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c4de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4e2:	405a      	eors	r2, r3
 800c4e4:	6a3b      	ldr	r3, [r7, #32]
 800c4e6:	3390      	adds	r3, #144	; 0x90
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4053      	eors	r3, r2
 800c4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	0e1b      	lsrs	r3, r3, #24
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	4b6a      	ldr	r3, [pc, #424]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c4f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	0c1b      	lsrs	r3, r3, #16
 800c500:	b2db      	uxtb	r3, r3
 800c502:	4967      	ldr	r1, [pc, #412]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c504:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c508:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c50c:	405a      	eors	r2, r3
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	0a1b      	lsrs	r3, r3, #8
 800c512:	b2db      	uxtb	r3, r3
 800c514:	4962      	ldr	r1, [pc, #392]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c516:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c51a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c51e:	405a      	eors	r2, r3
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	495e      	ldr	r1, [pc, #376]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c526:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c52a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c52e:	405a      	eors	r2, r3
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	3394      	adds	r3, #148	; 0x94
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4053      	eors	r3, r2
 800c538:	633b      	str	r3, [r7, #48]	; 0x30
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	0e1b      	lsrs	r3, r3, #24
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	461a      	mov	r2, r3
 800c542:	4b57      	ldr	r3, [pc, #348]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c544:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	0c1b      	lsrs	r3, r3, #16
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	4954      	ldr	r1, [pc, #336]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c550:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c554:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c558:	405a      	eors	r2, r3
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	0a1b      	lsrs	r3, r3, #8
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	494f      	ldr	r1, [pc, #316]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c562:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c566:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c56a:	405a      	eors	r2, r3
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	494b      	ldr	r1, [pc, #300]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c572:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c57a:	405a      	eors	r2, r3
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	3398      	adds	r3, #152	; 0x98
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4053      	eors	r3, r2
 800c584:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	0e1b      	lsrs	r3, r3, #24
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	461a      	mov	r2, r3
 800c58e:	4b44      	ldr	r3, [pc, #272]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c590:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	0c1b      	lsrs	r3, r3, #16
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	4941      	ldr	r1, [pc, #260]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c59c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c5a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5a4:	405a      	eors	r2, r3
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	0a1b      	lsrs	r3, r3, #8
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	493c      	ldr	r1, [pc, #240]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c5ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c5b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5b6:	405a      	eors	r2, r3
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	4938      	ldr	r1, [pc, #224]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c5be:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c5c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5c6:	405a      	eors	r2, r3
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	339c      	adds	r3, #156	; 0x9c
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4053      	eors	r3, r2
 800c5d0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (r > 5) {
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	2b05      	cmp	r3, #5
 800c5d6:	f240 826a 	bls.w	800caae <wc_AesDecrypt+0x1056>
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 800c5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5dc:	0e1b      	lsrs	r3, r3, #24
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	4b2f      	ldr	r3, [pc, #188]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c5e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	0c1b      	lsrs	r3, r3, #16
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	492c      	ldr	r1, [pc, #176]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c5f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c5f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5f8:	405a      	eors	r2, r3
 800c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fc:	0a1b      	lsrs	r3, r3, #8
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	4927      	ldr	r1, [pc, #156]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c602:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c606:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c60a:	405a      	eors	r2, r3
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	4923      	ldr	r1, [pc, #140]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c612:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c616:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c61a:	405a      	eors	r2, r3
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	33a0      	adds	r3, #160	; 0xa0
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4053      	eors	r3, r2
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	0e1b      	lsrs	r3, r3, #24
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	461a      	mov	r2, r3
 800c62e:	4b1c      	ldr	r3, [pc, #112]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c636:	0c1b      	lsrs	r3, r3, #16
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	4919      	ldr	r1, [pc, #100]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c63c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c640:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c644:	405a      	eors	r2, r3
 800c646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c648:	0a1b      	lsrs	r3, r3, #8
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	4914      	ldr	r1, [pc, #80]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c64e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c656:	405a      	eors	r2, r3
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	4910      	ldr	r1, [pc, #64]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c65e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c666:	405a      	eors	r2, r3
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	33a4      	adds	r3, #164	; 0xa4
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4053      	eors	r3, r2
 800c670:	61bb      	str	r3, [r7, #24]
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	0e1b      	lsrs	r3, r3, #24
 800c676:	b2db      	uxtb	r3, r3
 800c678:	461a      	mov	r2, r3
 800c67a:	4b09      	ldr	r3, [pc, #36]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c67c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	0c1b      	lsrs	r3, r3, #16
 800c684:	b2db      	uxtb	r3, r3
 800c686:	4906      	ldr	r1, [pc, #24]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c688:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c68c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c690:	405a      	eors	r2, r3
 800c692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c694:	0a1b      	lsrs	r3, r3, #8
 800c696:	b2db      	uxtb	r3, r3
 800c698:	4901      	ldr	r1, [pc, #4]	; (800c6a0 <wc_AesDecrypt+0xc48>)
 800c69a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c69e:	e001      	b.n	800c6a4 <wc_AesDecrypt+0xc4c>
 800c6a0:	0802ac18 	.word	0x0802ac18
 800c6a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6a8:	405a      	eors	r2, r3
 800c6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	49b6      	ldr	r1, [pc, #728]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c6b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c6b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6b8:	405a      	eors	r2, r3
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	33a8      	adds	r3, #168	; 0xa8
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4053      	eors	r3, r2
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	0e1b      	lsrs	r3, r3, #24
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	4bae      	ldr	r3, [pc, #696]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c6ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	0c1b      	lsrs	r3, r3, #16
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	49ab      	ldr	r1, [pc, #684]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c6da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c6de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6e2:	405a      	eors	r2, r3
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	0a1b      	lsrs	r3, r3, #8
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	49a7      	ldr	r1, [pc, #668]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c6ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c6f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6f4:	405a      	eors	r2, r3
 800c6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	49a3      	ldr	r1, [pc, #652]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c6fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c700:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c704:	405a      	eors	r2, r3
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	33ac      	adds	r3, #172	; 0xac
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4053      	eors	r3, r2
 800c70e:	613b      	str	r3, [r7, #16]
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	0e1b      	lsrs	r3, r3, #24
 800c714:	b2db      	uxtb	r3, r3
 800c716:	461a      	mov	r2, r3
 800c718:	4b9b      	ldr	r3, [pc, #620]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c71a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	0c1b      	lsrs	r3, r3, #16
 800c722:	b2db      	uxtb	r3, r3
 800c724:	4998      	ldr	r1, [pc, #608]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c726:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c72a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c72e:	405a      	eors	r2, r3
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	0a1b      	lsrs	r3, r3, #8
 800c734:	b2db      	uxtb	r3, r3
 800c736:	4994      	ldr	r1, [pc, #592]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c738:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c73c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c740:	405a      	eors	r2, r3
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	b2db      	uxtb	r3, r3
 800c746:	4990      	ldr	r1, [pc, #576]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c748:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c74c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c750:	405a      	eors	r2, r3
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	33b0      	adds	r3, #176	; 0xb0
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4053      	eors	r3, r2
 800c75a:	637b      	str	r3, [r7, #52]	; 0x34
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	0e1b      	lsrs	r3, r3, #24
 800c760:	b2db      	uxtb	r3, r3
 800c762:	461a      	mov	r2, r3
 800c764:	4b88      	ldr	r3, [pc, #544]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	0c1b      	lsrs	r3, r3, #16
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	4985      	ldr	r1, [pc, #532]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c772:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c77a:	405a      	eors	r2, r3
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	0a1b      	lsrs	r3, r3, #8
 800c780:	b2db      	uxtb	r3, r3
 800c782:	4981      	ldr	r1, [pc, #516]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c784:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c78c:	405a      	eors	r2, r3
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	497d      	ldr	r1, [pc, #500]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c794:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c798:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c79c:	405a      	eors	r2, r3
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	33b4      	adds	r3, #180	; 0xb4
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4053      	eors	r3, r2
 800c7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	0e1b      	lsrs	r3, r3, #24
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4b75      	ldr	r3, [pc, #468]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c7b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	0c1b      	lsrs	r3, r3, #16
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	4972      	ldr	r1, [pc, #456]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c7be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c7c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7c6:	405a      	eors	r2, r3
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	0a1b      	lsrs	r3, r3, #8
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	496e      	ldr	r1, [pc, #440]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c7d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c7d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7d8:	405a      	eors	r2, r3
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	496a      	ldr	r1, [pc, #424]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c7e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c7e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7e8:	405a      	eors	r2, r3
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	33b8      	adds	r3, #184	; 0xb8
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4053      	eors	r3, r2
 800c7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	0e1b      	lsrs	r3, r3, #24
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4b62      	ldr	r3, [pc, #392]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c7fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	0c1b      	lsrs	r3, r3, #16
 800c806:	b2db      	uxtb	r3, r3
 800c808:	495f      	ldr	r1, [pc, #380]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c80a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c80e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c812:	405a      	eors	r2, r3
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	0a1b      	lsrs	r3, r3, #8
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	495b      	ldr	r1, [pc, #364]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c81c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c820:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c824:	405a      	eors	r2, r3
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	4957      	ldr	r1, [pc, #348]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c82c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c830:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c834:	405a      	eors	r2, r3
 800c836:	6a3b      	ldr	r3, [r7, #32]
 800c838:	33bc      	adds	r3, #188	; 0xbc
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4053      	eors	r3, r2
 800c83e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (r > 6) {
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	2b06      	cmp	r3, #6
 800c844:	f240 8133 	bls.w	800caae <wc_AesDecrypt+0x1056>
            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
 800c848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84a:	0e1b      	lsrs	r3, r3, #24
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	461a      	mov	r2, r3
 800c850:	4b4d      	ldr	r3, [pc, #308]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	0c1b      	lsrs	r3, r3, #16
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	494a      	ldr	r1, [pc, #296]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c85e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c862:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c866:	405a      	eors	r2, r3
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	0a1b      	lsrs	r3, r3, #8
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	4946      	ldr	r1, [pc, #280]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c870:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c878:	405a      	eors	r2, r3
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	4942      	ldr	r1, [pc, #264]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c880:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c888:	405a      	eors	r2, r3
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	33c0      	adds	r3, #192	; 0xc0
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4053      	eors	r3, r2
 800c892:	61fb      	str	r3, [r7, #28]
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	0e1b      	lsrs	r3, r3, #24
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	461a      	mov	r2, r3
 800c89c:	4b3a      	ldr	r3, [pc, #232]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c89e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a4:	0c1b      	lsrs	r3, r3, #16
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	4937      	ldr	r1, [pc, #220]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c8aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c8ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8b2:	405a      	eors	r2, r3
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	0a1b      	lsrs	r3, r3, #8
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	4933      	ldr	r1, [pc, #204]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c8bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c8c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8c4:	405a      	eors	r2, r3
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	492f      	ldr	r1, [pc, #188]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c8cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c8d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8d4:	405a      	eors	r2, r3
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	33c4      	adds	r3, #196	; 0xc4
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4053      	eors	r3, r2
 800c8de:	61bb      	str	r3, [r7, #24]
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	0e1b      	lsrs	r3, r3, #24
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4b27      	ldr	r3, [pc, #156]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c8ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	0c1b      	lsrs	r3, r3, #16
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	4924      	ldr	r1, [pc, #144]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c8f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c8fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8fe:	405a      	eors	r2, r3
 800c900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c902:	0a1b      	lsrs	r3, r3, #8
 800c904:	b2db      	uxtb	r3, r3
 800c906:	4920      	ldr	r1, [pc, #128]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c908:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c90c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c910:	405a      	eors	r2, r3
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	b2db      	uxtb	r3, r3
 800c916:	491c      	ldr	r1, [pc, #112]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c918:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c91c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c920:	405a      	eors	r2, r3
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	33c8      	adds	r3, #200	; 0xc8
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4053      	eors	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	0e1b      	lsrs	r3, r3, #24
 800c930:	b2db      	uxtb	r3, r3
 800c932:	461a      	mov	r2, r3
 800c934:	4b14      	ldr	r3, [pc, #80]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	0c1b      	lsrs	r3, r3, #16
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	4911      	ldr	r1, [pc, #68]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c942:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c946:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c94a:	405a      	eors	r2, r3
 800c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94e:	0a1b      	lsrs	r3, r3, #8
 800c950:	b2db      	uxtb	r3, r3
 800c952:	490d      	ldr	r1, [pc, #52]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c954:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c95c:	405a      	eors	r2, r3
 800c95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c960:	b2db      	uxtb	r3, r3
 800c962:	4909      	ldr	r1, [pc, #36]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c964:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c96c:	405a      	eors	r2, r3
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	33cc      	adds	r3, #204	; 0xcc
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4053      	eors	r3, r2
 800c976:	613b      	str	r3, [r7, #16]
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	0e1b      	lsrs	r3, r3, #24
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	461a      	mov	r2, r3
 800c980:	4b01      	ldr	r3, [pc, #4]	; (800c988 <wc_AesDecrypt+0xf30>)
 800c982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c986:	e001      	b.n	800c98c <wc_AesDecrypt+0xf34>
 800c988:	0802ac18 	.word	0x0802ac18
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	0c1b      	lsrs	r3, r3, #16
 800c990:	b2db      	uxtb	r3, r3
 800c992:	49a6      	ldr	r1, [pc, #664]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800c994:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c99c:	405a      	eors	r2, r3
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	0a1b      	lsrs	r3, r3, #8
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	49a1      	ldr	r1, [pc, #644]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800c9a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c9aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9ae:	405a      	eors	r2, r3
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	499d      	ldr	r1, [pc, #628]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800c9b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c9ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9be:	405a      	eors	r2, r3
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	33d0      	adds	r3, #208	; 0xd0
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4053      	eors	r3, r2
 800c9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	0e1b      	lsrs	r3, r3, #24
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	4b96      	ldr	r3, [pc, #600]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800c9d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	0c1b      	lsrs	r3, r3, #16
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	4993      	ldr	r1, [pc, #588]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800c9e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c9e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9e8:	405a      	eors	r2, r3
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	0a1b      	lsrs	r3, r3, #8
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	498e      	ldr	r1, [pc, #568]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800c9f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c9f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9fa:	405a      	eors	r2, r3
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	498a      	ldr	r1, [pc, #552]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca02:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ca06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca0a:	405a      	eors	r2, r3
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	33d4      	adds	r3, #212	; 0xd4
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4053      	eors	r3, r2
 800ca14:	633b      	str	r3, [r7, #48]	; 0x30
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	0e1b      	lsrs	r3, r3, #24
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4b83      	ldr	r3, [pc, #524]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	0c1b      	lsrs	r3, r3, #16
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	4980      	ldr	r1, [pc, #512]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ca30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca34:	405a      	eors	r2, r3
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	0a1b      	lsrs	r3, r3, #8
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	497b      	ldr	r1, [pc, #492]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ca42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca46:	405a      	eors	r2, r3
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	4977      	ldr	r1, [pc, #476]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca4e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ca52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca56:	405a      	eors	r2, r3
 800ca58:	6a3b      	ldr	r3, [r7, #32]
 800ca5a:	33d8      	adds	r3, #216	; 0xd8
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4053      	eors	r3, r2
 800ca60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	0e1b      	lsrs	r3, r3, #24
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4b70      	ldr	r3, [pc, #448]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	0c1b      	lsrs	r3, r3, #16
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	496d      	ldr	r1, [pc, #436]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ca7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca80:	405a      	eors	r2, r3
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	0a1b      	lsrs	r3, r3, #8
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	4968      	ldr	r1, [pc, #416]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ca8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca92:	405a      	eors	r2, r3
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	4964      	ldr	r1, [pc, #400]	; (800cc2c <wc_AesDecrypt+0x11d4>)
 800ca9a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ca9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800caa2:	405a      	eors	r2, r3
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	33dc      	adds	r3, #220	; 0xdc
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4053      	eors	r3, r2
 800caac:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
    rk += r * 8;
 800caae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab0:	015b      	lsls	r3, r3, #5
 800cab2:	6a3a      	ldr	r2, [r7, #32]
 800cab4:	4413      	add	r3, r2
 800cab6:	623b      	str	r3, [r7, #32]
     * apply last round and
     * map cipher state to byte array block:
     */

#ifndef WC_NO_CACHE_RESISTANT
    t0 |= PreFetchTd4();
 800cab8:	f7fe ffae 	bl	800ba18 <PreFetchTd4>
 800cabc:	4602      	mov	r2, r0
 800cabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac0:	4313      	orrs	r3, r2
 800cac2:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    s0 =
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
 800cac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac6:	0e1b      	lsrs	r3, r3, #24
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	461a      	mov	r2, r3
 800cacc:	4b58      	ldr	r3, [pc, #352]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cace:	5c9b      	ldrb	r3, [r3, r2]
 800cad0:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	0c1b      	lsrs	r3, r3, #16
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	4619      	mov	r1, r3
 800cada:	4b55      	ldr	r3, [pc, #340]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cadc:	5c5b      	ldrb	r3, [r3, r1]
 800cade:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
 800cae0:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	0a1b      	lsrs	r3, r3, #8
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	4619      	mov	r1, r3
 800caea:	4b51      	ldr	r3, [pc, #324]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800caec:	5c5b      	ldrb	r3, [r3, r1]
 800caee:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
 800caf0:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t1, 0)]) ^
 800caf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf4:	b2d2      	uxtb	r2, r2
 800caf6:	4611      	mov	r1, r2
 800caf8:	4a4d      	ldr	r2, [pc, #308]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cafa:	5c52      	ldrb	r2, [r2, r1]
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
 800cafc:	405a      	eors	r2, r3
        rk[0];
 800cafe:	6a3b      	ldr	r3, [r7, #32]
 800cb00:	681b      	ldr	r3, [r3, #0]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
 800cb02:	4053      	eors	r3, r2
    s0 =
 800cb04:	61fb      	str	r3, [r7, #28]
    s1 =
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	0e1b      	lsrs	r3, r3, #24
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	4b48      	ldr	r3, [pc, #288]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb10:	5c9b      	ldrb	r3, [r3, r2]
 800cb12:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
 800cb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb16:	0c1b      	lsrs	r3, r3, #16
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	4b44      	ldr	r3, [pc, #272]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb1e:	5c5b      	ldrb	r3, [r3, r1]
 800cb20:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
 800cb22:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	0a1b      	lsrs	r3, r3, #8
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4b40      	ldr	r3, [pc, #256]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb2e:	5c5b      	ldrb	r3, [r3, r1]
 800cb30:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
 800cb32:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t2, 0)]) ^
 800cb34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4a3d      	ldr	r2, [pc, #244]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb3c:	5c52      	ldrb	r2, [r2, r1]
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
 800cb3e:	405a      	eors	r2, r3
        rk[1];
 800cb40:	6a3b      	ldr	r3, [r7, #32]
 800cb42:	3304      	adds	r3, #4
 800cb44:	681b      	ldr	r3, [r3, #0]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
 800cb46:	4053      	eors	r3, r2
    s1 =
 800cb48:	61bb      	str	r3, [r7, #24]
    s2 =
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	0e1b      	lsrs	r3, r3, #24
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	461a      	mov	r2, r3
 800cb52:	4b37      	ldr	r3, [pc, #220]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb54:	5c9b      	ldrb	r3, [r3, r2]
 800cb56:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	0c1b      	lsrs	r3, r3, #16
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4b33      	ldr	r3, [pc, #204]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb62:	5c5b      	ldrb	r3, [r3, r1]
 800cb64:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
 800cb66:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
 800cb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6a:	0a1b      	lsrs	r3, r3, #8
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4b2f      	ldr	r3, [pc, #188]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb72:	5c5b      	ldrb	r3, [r3, r1]
 800cb74:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
 800cb76:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t3, 0)]) ^
 800cb78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb7a:	b2d2      	uxtb	r2, r2
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	4a2c      	ldr	r2, [pc, #176]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb80:	5c52      	ldrb	r2, [r2, r1]
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
 800cb82:	405a      	eors	r2, r3
        rk[2];
 800cb84:	6a3b      	ldr	r3, [r7, #32]
 800cb86:	3308      	adds	r3, #8
 800cb88:	681b      	ldr	r3, [r3, #0]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
 800cb8a:	4053      	eors	r3, r2
    s2 =
 800cb8c:	617b      	str	r3, [r7, #20]
    s3 =
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
 800cb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb90:	0e1b      	lsrs	r3, r3, #24
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	461a      	mov	r2, r3
 800cb96:	4b26      	ldr	r3, [pc, #152]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cb98:	5c9b      	ldrb	r3, [r3, r2]
 800cb9a:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
 800cb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9e:	0c1b      	lsrs	r3, r3, #16
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	4619      	mov	r1, r3
 800cba4:	4b22      	ldr	r3, [pc, #136]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cba6:	5c5b      	ldrb	r3, [r3, r1]
 800cba8:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
 800cbaa:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	0a1b      	lsrs	r3, r3, #8
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	4b1e      	ldr	r3, [pc, #120]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cbb6:	5c5b      	ldrb	r3, [r3, r1]
 800cbb8:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
 800cbba:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t0, 0)]) ^
 800cbbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	4a1b      	ldr	r2, [pc, #108]	; (800cc30 <wc_AesDecrypt+0x11d8>)
 800cbc4:	5c52      	ldrb	r2, [r2, r1]
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
 800cbc6:	405a      	eors	r2, r3
        rk[3];
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	330c      	adds	r3, #12
 800cbcc:	681b      	ldr	r3, [r3, #0]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
 800cbce:	4053      	eors	r3, r2
    s3 =
 800cbd0:	613b      	str	r3, [r7, #16]
    s3 = t3 ^ rk[3];
#endif

    /* write out */
#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fe fe40 	bl	800b85a <ByteReverseWord32>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	61fb      	str	r3, [r7, #28]
    s1 = ByteReverseWord32(s1);
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fe fe3a 	bl	800b85a <ByteReverseWord32>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	61bb      	str	r3, [r7, #24]
    s2 = ByteReverseWord32(s2);
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fe fe34 	bl	800b85a <ByteReverseWord32>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	617b      	str	r3, [r7, #20]
    s3 = ByteReverseWord32(s3);
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fe2e 	bl	800b85a <ByteReverseWord32>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	613b      	str	r3, [r7, #16]
 800cc02:	69fa      	ldr	r2, [r7, #28]
#endif

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	69ba      	ldr	r2, [r7, #24]
 800cc0e:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3308      	adds	r3, #8
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	330c      	adds	r3, #12
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	601a      	str	r2, [r3, #0]

    return 0;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3738      	adds	r7, #56	; 0x38
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	0802ac18 	.word	0x0802ac18
 800cc30:	0802bc18 	.word	0x0802bc18

0800cc34 <wc_AesSetKeyLocal>:

    /* Software AES - SetKey */
    static WARN_UNUSED_RESULT int wc_AesSetKeyLocal(
        Aes* aes, const byte* userKey, word32 keylen, const byte* iv, int dir,
        int checkKeyLen)
    {
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b08a      	sub	sp, #40	; 0x28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	603b      	str	r3, [r7, #0]
        int ret;
        word32 *rk;
    #ifdef NEED_AES_TABLES
        word32 temp;
        unsigned int i = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	623b      	str	r3, [r7, #32]
            }
            XMEMCPY(aes->devKey, userKey, keylen);
        }
    #endif

        if (checkKeyLen) {
 800cc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00b      	beq.n	800cc64 <wc_AesSetKeyLocal+0x30>
            if (keylen != 16 && keylen != 24 && keylen != 32) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b10      	cmp	r3, #16
 800cc50:	d008      	beq.n	800cc64 <wc_AesSetKeyLocal+0x30>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b18      	cmp	r3, #24
 800cc56:	d005      	beq.n	800cc64 <wc_AesSetKeyLocal+0x30>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b20      	cmp	r3, #32
 800cc5c:	d002      	beq.n	800cc64 <wc_AesSetKeyLocal+0x30>
                return BAD_FUNC_ARG;
 800cc5e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800cc62:	e366      	b.n	800d332 <wc_AesSetKeyLocal+0x6fe>
    #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
        defined(WOLFSSL_AES_OFB)
        aes->left = 0;
    #endif

        aes->keylen = keylen;
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        aes->rounds = (keylen/4) + 6;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	089b      	lsrs	r3, r3, #2
 800cc70:	1d9a      	adds	r2, r3, #6
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            aes->init = 0;
        }
        (void)dir;
    #endif

        if (keylen > sizeof(aes->key)) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2bf0      	cmp	r3, #240	; 0xf0
 800cc7c:	d902      	bls.n	800cc84 <wc_AesSetKeyLocal+0x50>
            return BAD_FUNC_ARG;
 800cc7e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800cc82:	e356      	b.n	800d332 <wc_AesSetKeyLocal+0x6fe>
            }
            return ret;
        }
#endif

        rk = aes->key;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
        XMEMCPY(rk, userKey, keylen);
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc8e:	f014 fb29 	bl	80212e4 <memcpy>
    #if defined(LITTLE_ENDIAN_ORDER) && !defined(WOLFSSL_PIC32MZ_CRYPT) && \
        (!defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
          defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_AES))
        ByteReverseWords(rk, rk, keylen);
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc98:	f7fe fdf6 	bl	800b888 <ByteReverseWords>
        if (temp != 0)
            return WC_HW_E;
    #endif

#ifdef NEED_AES_TABLES
        switch (keylen) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	f000 80e6 	beq.w	800ce70 <wc_AesSetKeyLocal+0x23c>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b20      	cmp	r3, #32
 800cca8:	f200 8194 	bhi.w	800cfd4 <wc_AesSetKeyLocal+0x3a0>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b10      	cmp	r3, #16
 800ccb0:	d003      	beq.n	800ccba <wc_AesSetKeyLocal+0x86>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b18      	cmp	r3, #24
 800ccb6:	d061      	beq.n	800cd7c <wc_AesSetKeyLocal+0x148>
 800ccb8:	e18c      	b.n	800cfd4 <wc_AesSetKeyLocal+0x3a0>
        #ifdef WOLFSSL_CHECK_MEM_ZERO
            wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
        #endif
            while (1)
            {
                temp  = rk[3];
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	617b      	str	r3, [r7, #20]
                rk[4] = rk[0] ^
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	681a      	ldr	r2, [r3, #0]
            #ifndef WOLFSSL_AES_SMALL_TABLES
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	0c1b      	lsrs	r3, r3, #16
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	4967      	ldr	r1, [pc, #412]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800cccc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ccd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ccd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
                rk[4] = rk[0] ^
 800ccd8:	405a      	eors	r2, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	0a1b      	lsrs	r3, r3, #8
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	4961      	ldr	r1, [pc, #388]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800cce2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800cce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ccea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 800ccee:	405a      	eors	r2, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4b5c      	ldr	r3, [pc, #368]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800ccf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 800cd00:	405a      	eors	r2, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	0e1b      	lsrs	r3, r3, #24
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	4957      	ldr	r1, [pc, #348]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800cd0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cd0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd12:	b2db      	uxtb	r3, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 800cd14:	ea82 0103 	eor.w	r1, r2, r3
                    ((word32)Tsbox[GETBYTE(temp, 2)] << 24) ^
                    ((word32)Tsbox[GETBYTE(temp, 1)] << 16) ^
                    ((word32)Tsbox[GETBYTE(temp, 0)] <<  8) ^
                    ((word32)Tsbox[GETBYTE(temp, 3)]) ^
            #endif
                    rcon[i];
 800cd18:	4a54      	ldr	r2, [pc, #336]	; (800ce6c <wc_AesSetKeyLocal+0x238>)
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                rk[4] = rk[0] ^
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	3310      	adds	r3, #16
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 800cd24:	404a      	eors	r2, r1
                rk[4] = rk[0] ^
 800cd26:	601a      	str	r2, [r3, #0]
                rk[5] = rk[1] ^ rk[4];
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	6819      	ldr	r1, [r3, #0]
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	3310      	adds	r3, #16
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	3314      	adds	r3, #20
 800cd38:	404a      	eors	r2, r1
 800cd3a:	601a      	str	r2, [r3, #0]
                rk[6] = rk[2] ^ rk[5];
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	3308      	adds	r3, #8
 800cd40:	6819      	ldr	r1, [r3, #0]
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	3314      	adds	r3, #20
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	3318      	adds	r3, #24
 800cd4c:	404a      	eors	r2, r1
 800cd4e:	601a      	str	r2, [r3, #0]
                rk[7] = rk[3] ^ rk[6];
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	330c      	adds	r3, #12
 800cd54:	6819      	ldr	r1, [r3, #0]
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	3318      	adds	r3, #24
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	331c      	adds	r3, #28
 800cd60:	404a      	eors	r2, r1
 800cd62:	601a      	str	r2, [r3, #0]
                if (++i == 10)
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	3301      	adds	r3, #1
 800cd68:	623b      	str	r3, [r7, #32]
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	2b0a      	cmp	r3, #10
 800cd6e:	d003      	beq.n	800cd78 <wc_AesSetKeyLocal+0x144>
                    break;
                rk += 4;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd72:	3310      	adds	r3, #16
 800cd74:	627b      	str	r3, [r7, #36]	; 0x24
                temp  = rk[3];
 800cd76:	e7a0      	b.n	800ccba <wc_AesSetKeyLocal+0x86>
                    break;
 800cd78:	bf00      	nop
            }
            break;
 800cd7a:	e12e      	b.n	800cfda <wc_AesSetKeyLocal+0x3a6>
            wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
        #endif
            /* for (;;) here triggers a bug in VC60 SP4 w/ Pro Pack */
            while (1)
            {
                temp = rk[ 5];
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	617b      	str	r3, [r7, #20]
                rk[ 6] = rk[ 0] ^
 800cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd84:	681a      	ldr	r2, [r3, #0]
            #ifndef WOLFSSL_AES_SMALL_TABLES
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	0c1b      	lsrs	r3, r3, #16
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	4936      	ldr	r1, [pc, #216]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800cd8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cd92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
                rk[ 6] = rk[ 0] ^
 800cd9a:	405a      	eors	r2, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	0a1b      	lsrs	r3, r3, #8
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	4931      	ldr	r1, [pc, #196]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800cda4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800cda8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cdac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 800cdb0:	405a      	eors	r2, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4b2b      	ldr	r3, [pc, #172]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800cdba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 800cdc2:	405a      	eors	r2, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	0e1b      	lsrs	r3, r3, #24
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	4927      	ldr	r1, [pc, #156]	; (800ce68 <wc_AesSetKeyLocal+0x234>)
 800cdcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cdd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cdd4:	b2db      	uxtb	r3, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 800cdd6:	ea82 0103 	eor.w	r1, r2, r3
                    ((word32)Tsbox[GETBYTE(temp, 2)] << 24) ^
                    ((word32)Tsbox[GETBYTE(temp, 1)] << 16) ^
                    ((word32)Tsbox[GETBYTE(temp, 0)] <<  8) ^
                    ((word32)Tsbox[GETBYTE(temp, 3)]) ^
            #endif
                    rcon[i];
 800cdda:	4a24      	ldr	r2, [pc, #144]	; (800ce6c <wc_AesSetKeyLocal+0x238>)
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                rk[ 6] = rk[ 0] ^
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	3318      	adds	r3, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 800cde6:	404a      	eors	r2, r1
                rk[ 6] = rk[ 0] ^
 800cde8:	601a      	str	r2, [r3, #0]
                rk[ 7] = rk[ 1] ^ rk[ 6];
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	3304      	adds	r3, #4
 800cdee:	6819      	ldr	r1, [r3, #0]
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf2:	3318      	adds	r3, #24
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	331c      	adds	r3, #28
 800cdfa:	404a      	eors	r2, r1
 800cdfc:	601a      	str	r2, [r3, #0]
                rk[ 8] = rk[ 2] ^ rk[ 7];
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	3308      	adds	r3, #8
 800ce02:	6819      	ldr	r1, [r3, #0]
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	331c      	adds	r3, #28
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	3320      	adds	r3, #32
 800ce0e:	404a      	eors	r2, r1
 800ce10:	601a      	str	r2, [r3, #0]
                rk[ 9] = rk[ 3] ^ rk[ 8];
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	330c      	adds	r3, #12
 800ce16:	6819      	ldr	r1, [r3, #0]
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	3320      	adds	r3, #32
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	3324      	adds	r3, #36	; 0x24
 800ce22:	404a      	eors	r2, r1
 800ce24:	601a      	str	r2, [r3, #0]
                if (++i == 8)
 800ce26:	6a3b      	ldr	r3, [r7, #32]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	623b      	str	r3, [r7, #32]
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	2b08      	cmp	r3, #8
 800ce30:	d017      	beq.n	800ce62 <wc_AesSetKeyLocal+0x22e>
                    break;
                rk[10] = rk[ 4] ^ rk[ 9];
 800ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce34:	3310      	adds	r3, #16
 800ce36:	6819      	ldr	r1, [r3, #0]
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	3324      	adds	r3, #36	; 0x24
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	3328      	adds	r3, #40	; 0x28
 800ce42:	404a      	eors	r2, r1
 800ce44:	601a      	str	r2, [r3, #0]
                rk[11] = rk[ 5] ^ rk[10];
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	3314      	adds	r3, #20
 800ce4a:	6819      	ldr	r1, [r3, #0]
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	3328      	adds	r3, #40	; 0x28
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	332c      	adds	r3, #44	; 0x2c
 800ce56:	404a      	eors	r2, r1
 800ce58:	601a      	str	r2, [r3, #0]
                rk += 6;
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	3318      	adds	r3, #24
 800ce5e:	627b      	str	r3, [r7, #36]	; 0x24
                temp = rk[ 5];
 800ce60:	e78c      	b.n	800cd7c <wc_AesSetKeyLocal+0x148>
                    break;
 800ce62:	bf00      	nop
            }
            break;
 800ce64:	e0b9      	b.n	800cfda <wc_AesSetKeyLocal+0x3a6>
 800ce66:	bf00      	nop
 800ce68:	08029c18 	.word	0x08029c18
 800ce6c:	08029bf0 	.word	0x08029bf0
        #ifdef WOLFSSL_CHECK_MEM_ZERO
            wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
        #endif
            while (1)
            {
                temp = rk[ 7];
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	617b      	str	r3, [r7, #20]
                rk[ 8] = rk[ 0] ^
 800ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce78:	681a      	ldr	r2, [r3, #0]
            #ifndef WOLFSSL_AES_SMALL_TABLES
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	0c1b      	lsrs	r3, r3, #16
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	499b      	ldr	r1, [pc, #620]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800ce82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ce86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
                rk[ 8] = rk[ 0] ^
 800ce8e:	405a      	eors	r2, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	0a1b      	lsrs	r3, r3, #8
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	4996      	ldr	r1, [pc, #600]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800ce98:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ce9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 800cea4:	405a      	eors	r2, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4b90      	ldr	r3, [pc, #576]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800ceae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ceb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 800ceb6:	405a      	eors	r2, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	0e1b      	lsrs	r3, r3, #24
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	498c      	ldr	r1, [pc, #560]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800cec0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cec8:	b2db      	uxtb	r3, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 800ceca:	ea82 0103 	eor.w	r1, r2, r3
                    ((word32)Tsbox[GETBYTE(temp, 2)] << 24) ^
                    ((word32)Tsbox[GETBYTE(temp, 1)] << 16) ^
                    ((word32)Tsbox[GETBYTE(temp, 0)] <<  8) ^
                    ((word32)Tsbox[GETBYTE(temp, 3)]) ^
            #endif
                    rcon[i];
 800cece:	4a89      	ldr	r2, [pc, #548]	; (800d0f4 <wc_AesSetKeyLocal+0x4c0>)
 800ced0:	6a3b      	ldr	r3, [r7, #32]
 800ced2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                rk[ 8] = rk[ 0] ^
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	3320      	adds	r3, #32
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 800ceda:	404a      	eors	r2, r1
                rk[ 8] = rk[ 0] ^
 800cedc:	601a      	str	r2, [r3, #0]
                rk[ 9] = rk[ 1] ^ rk[ 8];
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	3304      	adds	r3, #4
 800cee2:	6819      	ldr	r1, [r3, #0]
 800cee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee6:	3320      	adds	r3, #32
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	3324      	adds	r3, #36	; 0x24
 800ceee:	404a      	eors	r2, r1
 800cef0:	601a      	str	r2, [r3, #0]
                rk[10] = rk[ 2] ^ rk[ 9];
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	3308      	adds	r3, #8
 800cef6:	6819      	ldr	r1, [r3, #0]
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	3324      	adds	r3, #36	; 0x24
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	3328      	adds	r3, #40	; 0x28
 800cf02:	404a      	eors	r2, r1
 800cf04:	601a      	str	r2, [r3, #0]
                rk[11] = rk[ 3] ^ rk[10];
 800cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf08:	330c      	adds	r3, #12
 800cf0a:	6819      	ldr	r1, [r3, #0]
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	3328      	adds	r3, #40	; 0x28
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf14:	332c      	adds	r3, #44	; 0x2c
 800cf16:	404a      	eors	r2, r1
 800cf18:	601a      	str	r2, [r3, #0]
                if (++i == 7)
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	623b      	str	r3, [r7, #32]
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	2b07      	cmp	r3, #7
 800cf24:	d054      	beq.n	800cfd0 <wc_AesSetKeyLocal+0x39c>
                    break;
                temp = rk[11];
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2a:	617b      	str	r3, [r7, #20]
                rk[12] = rk[ 4] ^
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	3310      	adds	r3, #16
 800cf30:	681a      	ldr	r2, [r3, #0]
            #ifndef WOLFSSL_AES_SMALL_TABLES
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	0e1b      	lsrs	r3, r3, #24
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	496d      	ldr	r1, [pc, #436]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800cf3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cf3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
                rk[12] = rk[ 4] ^
 800cf46:	405a      	eors	r2, r3
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	0c1b      	lsrs	r3, r3, #16
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	4968      	ldr	r1, [pc, #416]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800cf50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800cf54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
 800cf5c:	405a      	eors	r2, r3
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	0a1b      	lsrs	r3, r3, #8
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	4619      	mov	r1, r3
 800cf66:	4b62      	ldr	r3, [pc, #392]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800cf68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
 800cf70:	ea82 0103 	eor.w	r1, r2, r3
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	4a5d      	ldr	r2, [pc, #372]	; (800d0f0 <wc_AesSetKeyLocal+0x4bc>)
 800cf7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cf7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf82:	b2da      	uxtb	r2, r3
                rk[12] = rk[ 4] ^
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	3330      	adds	r3, #48	; 0x30
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
 800cf88:	404a      	eors	r2, r1
                rk[12] = rk[ 4] ^
 800cf8a:	601a      	str	r2, [r3, #0]
                    ((word32)Tsbox[GETBYTE(temp, 3)] << 24) ^
                    ((word32)Tsbox[GETBYTE(temp, 2)] << 16) ^
                    ((word32)Tsbox[GETBYTE(temp, 1)] <<  8) ^
                    ((word32)Tsbox[GETBYTE(temp, 0)]);
            #endif
                rk[13] = rk[ 5] ^ rk[12];
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	3314      	adds	r3, #20
 800cf90:	6819      	ldr	r1, [r3, #0]
 800cf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf94:	3330      	adds	r3, #48	; 0x30
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	3334      	adds	r3, #52	; 0x34
 800cf9c:	404a      	eors	r2, r1
 800cf9e:	601a      	str	r2, [r3, #0]
                rk[14] = rk[ 6] ^ rk[13];
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	3318      	adds	r3, #24
 800cfa4:	6819      	ldr	r1, [r3, #0]
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa8:	3334      	adds	r3, #52	; 0x34
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	3338      	adds	r3, #56	; 0x38
 800cfb0:	404a      	eors	r2, r1
 800cfb2:	601a      	str	r2, [r3, #0]
                rk[15] = rk[ 7] ^ rk[14];
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	331c      	adds	r3, #28
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	3338      	adds	r3, #56	; 0x38
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	333c      	adds	r3, #60	; 0x3c
 800cfc4:	404a      	eors	r2, r1
 800cfc6:	601a      	str	r2, [r3, #0]

                rk += 8;
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	3320      	adds	r3, #32
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
                temp = rk[ 7];
 800cfce:	e74f      	b.n	800ce70 <wc_AesSetKeyLocal+0x23c>
                    break;
 800cfd0:	bf00      	nop
            }
            break;
 800cfd2:	e002      	b.n	800cfda <wc_AesSetKeyLocal+0x3a6>
    #endif /* 256 */

        default:
            return BAD_FUNC_ARG;
 800cfd4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800cfd8:	e1ab      	b.n	800d332 <wc_AesSetKeyLocal+0x6fe>
        } /* switch */
        ForceZero(&temp, sizeof(temp));
 800cfda:	f107 0314 	add.w	r3, r7, #20
 800cfde:	2104      	movs	r1, #4
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fe fcd5 	bl	800b990 <ForceZero>

    #if defined(HAVE_AES_DECRYPT)
        if (dir == AES_DECRYPTION) {
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	f040 819c 	bne.w	800d326 <wc_AesSetKeyLocal+0x6f2>
            unsigned int j;
            rk = aes->key;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24

            /* invert the order of the round keys: */
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 800cff2:	2300      	movs	r3, #0
 800cff4:	623b      	str	r3, [r7, #32]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	61fb      	str	r3, [r7, #28]
 800d000:	e069      	b.n	800d0d6 <wc_AesSetKeyLocal+0x4a2>
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d008:	4413      	add	r3, r2
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	617b      	str	r3, [r7, #20]
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d014:	441a      	add	r2, r3
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d01c:	440b      	add	r3, r1
 800d01e:	6812      	ldr	r2, [r2, #0]
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d028:	4413      	add	r3, r2
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	601a      	str	r2, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	3301      	adds	r3, #1
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d036:	4413      	add	r3, r2
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	3301      	adds	r3, #1
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d044:	441a      	add	r2, r3
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	3301      	adds	r3, #1
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d04e:	440b      	add	r3, r1
 800d050:	6812      	ldr	r2, [r2, #0]
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	3301      	adds	r3, #1
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05c:	4413      	add	r3, r2
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	601a      	str	r2, [r3, #0]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	3302      	adds	r3, #2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d06a:	4413      	add	r3, r2
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	3302      	adds	r3, #2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d078:	441a      	add	r2, r3
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	3302      	adds	r3, #2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d082:	440b      	add	r3, r1
 800d084:	6812      	ldr	r2, [r2, #0]
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	3302      	adds	r3, #2
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d090:	4413      	add	r3, r2
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	601a      	str	r2, [r3, #0]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	3303      	adds	r3, #3
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d09e:	4413      	add	r3, r2
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	3303      	adds	r3, #3
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ac:	441a      	add	r2, r3
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	3303      	adds	r3, #3
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0b6:	440b      	add	r3, r1
 800d0b8:	6812      	ldr	r2, [r2, #0]
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	3303      	adds	r3, #3
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c4:	4413      	add	r3, r2
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	601a      	str	r2, [r3, #0]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 800d0ca:	6a3b      	ldr	r3, [r7, #32]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	623b      	str	r3, [r7, #32]
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	3b04      	subs	r3, #4
 800d0d4:	61fb      	str	r3, [r7, #28]
 800d0d6:	6a3a      	ldr	r2, [r7, #32]
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d391      	bcc.n	800d002 <wc_AesSetKeyLocal+0x3ce>
            }
            ForceZero(&temp, sizeof(temp));
 800d0de:	f107 0314 	add.w	r3, r7, #20
 800d0e2:	2104      	movs	r1, #4
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fe fc53 	bl	800b990 <ForceZero>
        #if !defined(WOLFSSL_AES_SMALL_TABLES)
            /* apply the inverse MixColumn transform to all round keys but the
               first and the last: */
            for (i = 1; i < aes->rounds; i++) {
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	623b      	str	r3, [r7, #32]
 800d0ee:	e113      	b.n	800d318 <wc_AesSetKeyLocal+0x6e4>
 800d0f0:	08029c18 	.word	0x08029c18
 800d0f4:	08029bf0 	.word	0x08029bf0
                rk += 4;
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fa:	3310      	adds	r3, #16
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
                rk[0] =
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	0e1b      	lsrs	r3, r3, #24
 800d104:	b2db      	uxtb	r3, r3
 800d106:	4a8d      	ldr	r2, [pc, #564]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d108:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d110:	b2db      	uxtb	r3, r3
 800d112:	4a8b      	ldr	r2, [pc, #556]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	0c1b      	lsrs	r3, r3, #16
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	4986      	ldr	r1, [pc, #536]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d122:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d126:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	4984      	ldr	r1, [pc, #528]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d12e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d132:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
 800d136:	405a      	eors	r2, r3
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	0a1b      	lsrs	r3, r3, #8
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	497e      	ldr	r1, [pc, #504]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d142:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	497c      	ldr	r1, [pc, #496]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d14e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
 800d156:	405a      	eors	r2, r3
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	4977      	ldr	r1, [pc, #476]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d160:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d164:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	4975      	ldr	r1, [pc, #468]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d16c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d170:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
 800d174:	405a      	eors	r2, r3
                rk[0] =
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d178:	601a      	str	r2, [r3, #0]
                rk[1] =
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	3304      	adds	r3, #4
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	0e1b      	lsrs	r3, r3, #24
 800d182:	b2db      	uxtb	r3, r3
 800d184:	4a6d      	ldr	r2, [pc, #436]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d186:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	4a6b      	ldr	r2, [pc, #428]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d192:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	3304      	adds	r3, #4
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	0c1b      	lsrs	r3, r3, #16
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	4966      	ldr	r1, [pc, #408]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d1a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d1a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	4964      	ldr	r1, [pc, #400]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d1ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d1b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
 800d1b6:	405a      	eors	r2, r3
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	0a1b      	lsrs	r3, r3, #8
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	495e      	ldr	r1, [pc, #376]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d1c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d1c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	495c      	ldr	r1, [pc, #368]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d1d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d1d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
 800d1d8:	ea82 0103 	eor.w	r1, r2, r3
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1de:	3304      	adds	r3, #4
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	4a55      	ldr	r2, [pc, #340]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d1e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	4a53      	ldr	r2, [pc, #332]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d1f2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d1f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                rk[1] =
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	3304      	adds	r3, #4
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
 800d1fe:	404a      	eors	r2, r1
                rk[1] =
 800d200:	601a      	str	r2, [r3, #0]
                rk[2] =
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
 800d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d204:	3308      	adds	r3, #8
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	0e1b      	lsrs	r3, r3, #24
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	4a4b      	ldr	r2, [pc, #300]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d20e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d216:	b2db      	uxtb	r3, r3
 800d218:	4a49      	ldr	r2, [pc, #292]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d21a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
 800d21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d220:	3308      	adds	r3, #8
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	0c1b      	lsrs	r3, r3, #16
 800d226:	b2db      	uxtb	r3, r3
 800d228:	4944      	ldr	r1, [pc, #272]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d22a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d22e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	4942      	ldr	r1, [pc, #264]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d236:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d23a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
 800d23e:	405a      	eors	r2, r3
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	3308      	adds	r3, #8
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	0a1b      	lsrs	r3, r3, #8
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	493c      	ldr	r1, [pc, #240]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d24c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d250:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d254:	b2db      	uxtb	r3, r3
 800d256:	493a      	ldr	r1, [pc, #232]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d258:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d25c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
 800d260:	ea82 0103 	eor.w	r1, r2, r3
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	3308      	adds	r3, #8
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	4a33      	ldr	r2, [pc, #204]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d26e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	4a31      	ldr	r2, [pc, #196]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d27a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d27e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                rk[2] =
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	3308      	adds	r3, #8
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
 800d286:	404a      	eors	r2, r1
                rk[2] =
 800d288:	601a      	str	r2, [r3, #0]
                rk[3] =
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
 800d28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28c:	330c      	adds	r3, #12
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	0e1b      	lsrs	r3, r3, #24
 800d292:	b2db      	uxtb	r3, r3
 800d294:	4a29      	ldr	r2, [pc, #164]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d296:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	4a27      	ldr	r2, [pc, #156]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d2a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	330c      	adds	r3, #12
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	0c1b      	lsrs	r3, r3, #16
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	4922      	ldr	r1, [pc, #136]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d2b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d2b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	4920      	ldr	r1, [pc, #128]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d2be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d2c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
 800d2c6:	405a      	eors	r2, r3
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	330c      	adds	r3, #12
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	0a1b      	lsrs	r3, r3, #8
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	491a      	ldr	r1, [pc, #104]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d2d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d2d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	4918      	ldr	r1, [pc, #96]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d2e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d2e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
 800d2e8:	ea82 0103 	eor.w	r1, r2, r3
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	330c      	adds	r3, #12
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	4a11      	ldr	r2, [pc, #68]	; (800d33c <wc_AesSetKeyLocal+0x708>)
 800d2f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	4a0f      	ldr	r2, [pc, #60]	; (800d340 <wc_AesSetKeyLocal+0x70c>)
 800d302:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d306:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                rk[3] =
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	330c      	adds	r3, #12
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
 800d30e:	404a      	eors	r2, r1
                rk[3] =
 800d310:	601a      	str	r2, [r3, #0]
            for (i = 1; i < aes->rounds; i++) {
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	3301      	adds	r3, #1
 800d316:	623b      	str	r3, [r7, #32]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d31e:	6a3a      	ldr	r2, [r7, #32]
 800d320:	429a      	cmp	r2, r3
 800d322:	f4ff aee9 	bcc.w	800d0f8 <wc_AesSetKeyLocal+0x4c4>
        if (WOLFSSL_SCE_GSCE_HANDLE.p_cfg->endian_flag == CRYPTO_WORD_ENDIAN_BIG) {
            ByteReverseWords(aes->key, aes->key, 32);
        }
#endif

        ret = wc_AesSetIV(aes, iv);
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f000 f82d 	bl	800d388 <wc_AesSetIV>
 800d32e:	61b8      	str	r0, [r7, #24]
        ForceZero(local, sizeof(local));
    #endif
    #ifdef WOLFSSL_CHECK_MEM_ZERO
        wc_MemZero_Check(&temp, sizeof(temp));
    #endif
        return ret;
 800d330:	69bb      	ldr	r3, [r7, #24]
    }
 800d332:	4618      	mov	r0, r3
 800d334:	3728      	adds	r7, #40	; 0x28
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	08029c18 	.word	0x08029c18
 800d340:	0802ac18 	.word	0x0802ac18

0800d344 <wc_AesSetKey>:

    int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
        const byte* iv, int dir)
    {
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af02      	add	r7, sp, #8
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
 800d350:	603b      	str	r3, [r7, #0]
        if (aes == NULL) {
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <wc_AesSetKey+0x1a>
            return BAD_FUNC_ARG;
 800d358:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d35c:	e010      	b.n	800d380 <wc_AesSetKey+0x3c>
        }
        if (keylen > sizeof(aes->key)) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2bf0      	cmp	r3, #240	; 0xf0
 800d362:	d902      	bls.n	800d36a <wc_AesSetKey+0x26>
            return BAD_FUNC_ARG;
 800d364:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d368:	e00a      	b.n	800d380 <wc_AesSetKey+0x3c>
        }

        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
 800d36a:	2301      	movs	r3, #1
 800d36c:	9301      	str	r3, [sp, #4]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	68b9      	ldr	r1, [r7, #8]
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f7ff fc5b 	bl	800cc34 <wc_AesSetKeyLocal>
 800d37e:	4603      	mov	r3, r0
    }
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <wc_AesSetIV>:
#endif /* wc_AesSetKey block */


/* wc_AesSetIV is shared between software and hardware */
int wc_AesSetIV(Aes* aes, const byte* iv)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
    if (aes == NULL)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d102      	bne.n	800d39e <wc_AesSetIV+0x16>
        return BAD_FUNC_ARG;
 800d398:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d39c:	e012      	b.n	800d3c4 <wc_AesSetIV+0x3c>

    if (iv)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <wc_AesSetIV+0x2c>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	33f8      	adds	r3, #248	; 0xf8
 800d3a8:	2210      	movs	r2, #16
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f013 ff99 	bl	80212e4 <memcpy>
 800d3b2:	e006      	b.n	800d3c2 <wc_AesSetIV+0x3a>
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	33f8      	adds	r3, #248	; 0xf8
 800d3b8:	2210      	movs	r2, #16
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f013 ffb9 	bl	8021334 <memset>
    defined(WOLFSSL_AES_OFB) || defined(WOLFSSL_AES_XTS)
    /* Clear any unused bytes from last cipher op. */
    aes->left = 0;
#endif

    return 0;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <wc_AesCbcDecrypt>:
    }

    #ifdef HAVE_AES_DECRYPT
    /* Software AES - CBC Decrypt */
    int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
 800d3d8:	603b      	str	r3, [r7, #0]
        word32 blocks;

        if (aes == NULL || out == NULL || in == NULL) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d005      	beq.n	800d3ec <wc_AesCbcDecrypt+0x20>
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d002      	beq.n	800d3ec <wc_AesCbcDecrypt+0x20>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d102      	bne.n	800d3f2 <wc_AesCbcDecrypt+0x26>
            return BAD_FUNC_ARG;
 800d3ec:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d3f0:	e042      	b.n	800d478 <wc_AesCbcDecrypt+0xac>
        }

        if (sz == 0) {
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <wc_AesCbcDecrypt+0x30>
            return 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	e03d      	b.n	800d478 <wc_AesCbcDecrypt+0xac>
        }

        blocks = sz / AES_BLOCK_SIZE;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	091b      	lsrs	r3, r3, #4
 800d400:	617b      	str	r3, [r7, #20]
        if (sz % AES_BLOCK_SIZE) {
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	f003 030f 	and.w	r3, r3, #15
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d02f      	beq.n	800d46c <wc_AesCbcDecrypt+0xa0>
#ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
            return BAD_LENGTH_E;
#else
            return BAD_FUNC_ARG;
 800d40c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d410:	e032      	b.n	800d478 <wc_AesCbcDecrypt+0xac>
        }
    #endif

        while (blocks--) {
            int ret;
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d418:	2210      	movs	r2, #16
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f013 ff61 	bl	80212e4 <memcpy>
            ret = wc_AesDecrypt(aes, (byte*)aes->tmp, out);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	4619      	mov	r1, r3
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f7fe fb13 	bl	800ba58 <wc_AesDecrypt>
 800d432:	6138      	str	r0, [r7, #16]
            if (ret != 0)
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <wc_AesCbcDecrypt+0x72>
                return ret;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	e01c      	b.n	800d478 <wc_AesCbcDecrypt+0xac>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	33f8      	adds	r3, #248	; 0xf8
 800d442:	2210      	movs	r2, #16
 800d444:	4619      	mov	r1, r3
 800d446:	68b8      	ldr	r0, [r7, #8]
 800d448:	f7fe fa6b 	bl	800b922 <xorbuf>
            /* store iv for next call */
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d458:	2210      	movs	r2, #16
 800d45a:	4619      	mov	r1, r3
 800d45c:	f013 ff42 	bl	80212e4 <memcpy>

            out += AES_BLOCK_SIZE;
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	3310      	adds	r3, #16
 800d464:	60bb      	str	r3, [r7, #8]
            in  += AES_BLOCK_SIZE;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	3310      	adds	r3, #16
 800d46a:	607b      	str	r3, [r7, #4]
        while (blocks--) {
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	1e5a      	subs	r2, r3, #1
 800d470:	617a      	str	r2, [r7, #20]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1cd      	bne.n	800d412 <wc_AesCbcDecrypt+0x46>
        }

        return 0;
 800d476:	2300      	movs	r3, #0
    }
 800d478:	4618      	mov	r0, r3
 800d47a:	3718      	adds	r7, #24
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <wc_AesInit>:
#endif /* HAVE_AESCCM */


/* Initialize Aes for use with async hardware */
int wc_AesInit(Aes* aes, void* heap, int devId)
{
 800d480:	b480      	push	{r7}
 800d482:	b087      	sub	sp, #28
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
    int ret = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	617b      	str	r3, [r7, #20]

    if (aes == NULL)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d102      	bne.n	800d49c <wc_AesInit+0x1c>
        return BAD_FUNC_ARG;
 800d496:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d49a:	e004      	b.n	800d4a6 <wc_AesInit+0x26>

    aes->heap = heap;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#if defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
    ret = wc_psa_aes_init(aes);
#endif

    return ret;
 800d4a4:	697b      	ldr	r3, [r7, #20]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	371c      	adds	r7, #28
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <wc_AesFree>:
}
#endif

/* Free Aes from use with async hardware */
void wc_AesFree(Aes* aes)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
    if (aes == NULL)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
#endif

#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(aes, sizeof(Aes));
#endif
}
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <ForceZero>:
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 800d4d6:	e004      	b.n	800d4e2 <ForceZero+0x1a>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	60fa      	str	r2, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	701a      	strb	r2, [r3, #0]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	1e5a      	subs	r2, r3, #1
 800d4e6:	603a      	str	r2, [r7, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1f5      	bne.n	800d4d8 <ForceZero+0x10>
}
 800d4ec:	bf00      	nop
 800d4ee:	bf00      	nop
 800d4f0:	3714      	adds	r7, #20
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <min>:
    {
 800d4fa:	b480      	push	{r7}
 800d4fc:	b083      	sub	sp, #12
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	4293      	cmp	r3, r2
 800d50a:	bf28      	it	cs
 800d50c:	4613      	movcs	r3, r2
    }
 800d50e:	4618      	mov	r0, r3
 800d510:	370c      	adds	r7, #12
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr

0800d51a <BytePrecision>:
 *
 * @param [in] value  Value to be encoded.
 * @return  Number of bytes to encode value.
 */
static word32 BytePrecision(word32 value)
{
 800d51a:	b480      	push	{r7}
 800d51c:	b085      	sub	sp, #20
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
    word32 i;
    for (i = (word32)sizeof(value) - 1; i; --i)
 800d522:	2303      	movs	r3, #3
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	e00a      	b.n	800d53e <BytePrecision+0x24>
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3b01      	subs	r3, #1
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	fa22 f303 	lsr.w	r3, r2, r3
 800d534:	2b00      	cmp	r3, #0
 800d536:	d106      	bne.n	800d546 <BytePrecision+0x2c>
    for (i = (word32)sizeof(value) - 1; i; --i)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1f1      	bne.n	800d528 <BytePrecision+0xe>
 800d544:	e000      	b.n	800d548 <BytePrecision+0x2e>
            break;
 800d546:	bf00      	nop

    return i;
 800d548:	68fb      	ldr	r3, [r7, #12]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <GetLength>:
 * @return  Length on success.
 * @return  ASN_PARSE_E if the encoding is invalid.
 * @return  BUFFER_E when not enough data to complete decode.
 */
int GetLength(const byte* input, word32* inOutIdx, int* len, word32 maxIdx)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b086      	sub	sp, #24
 800d55a:	af02      	add	r7, sp, #8
 800d55c:	60f8      	str	r0, [r7, #12]
 800d55e:	60b9      	str	r1, [r7, #8]
 800d560:	607a      	str	r2, [r7, #4]
 800d562:	603b      	str	r3, [r7, #0]
    return GetLength_ex(input, inOutIdx, len, maxIdx, 1);
 800d564:	2301      	movs	r3, #1
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	68b9      	ldr	r1, [r7, #8]
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f000 f805 	bl	800d57e <GetLength_ex>
 800d574:	4603      	mov	r3, r0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <GetLength_ex>:
 * @return  ASN_PARSE_E if the encoding is invalid.
 * @return  BUFFER_E when not enough data to complete decode.
 */
int GetLength_ex(const byte* input, word32* inOutIdx, int* len, word32 maxIdx,
                 int check)
{
 800d57e:	b480      	push	{r7}
 800d580:	b08b      	sub	sp, #44	; 0x2c
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	607a      	str	r2, [r7, #4]
 800d58a:	603b      	str	r3, [r7, #0]
    int     length = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	627b      	str	r3, [r7, #36]	; 0x24
    word32  idx = *inOutIdx;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	623b      	str	r3, [r7, #32]
    byte    b;

    /* Ensure zero return length on error. */
    *len = 0;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	601a      	str	r2, [r3, #0]

    /* Check there is at least on byte available containing length information.
     */
    if ((idx + 1) > maxIdx) {
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d202      	bcs.n	800d5ac <GetLength_ex+0x2e>
        WOLFSSL_MSG("GetLength - bad index on input");
        return BUFFER_E;
 800d5a6:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d5aa:	e066      	b.n	800d67a <GetLength_ex+0xfc>
    }

    /* Get the first length byte. */
    b = input[idx++];
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	623a      	str	r2, [r7, #32]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	75fb      	strb	r3, [r7, #23]
    /* Check if the first byte indicates the count of bytes. */
    if (b >= ASN_LONG_LENGTH) {
 800d5ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	da43      	bge.n	800d64a <GetLength_ex+0xcc>
        /* Bottom 7 bits are the number of bytes to calculate length with.
         * Note: 0 indicates indefinite length encoding *not* 0 bytes of length.
         */
        word32 bytes = b & 0x7F;
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
 800d5c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c8:	61fb      	str	r3, [r7, #28]
        int minLen;

        /* Calculate minimum length to be encoded with bytes. */
        if (b == 0x80) {
 800d5ca:	7dfb      	ldrb	r3, [r7, #23]
 800d5cc:	2b80      	cmp	r3, #128	; 0x80
 800d5ce:	d102      	bne.n	800d5d6 <GetLength_ex+0x58>
            /* Indefinite length encoding - no length bytes. */
            minLen = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	61bb      	str	r3, [r7, #24]
 800d5d4:	e012      	b.n	800d5fc <GetLength_ex+0x7e>
        }
        else if (bytes == 1) {
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d102      	bne.n	800d5e2 <GetLength_ex+0x64>
            minLen = 0x80;
 800d5dc:	2380      	movs	r3, #128	; 0x80
 800d5de:	61bb      	str	r3, [r7, #24]
 800d5e0:	e00c      	b.n	800d5fc <GetLength_ex+0x7e>
        }
        /* Only support up to the number of bytes that fit into return var. */
        else if (bytes > sizeof(length)) {
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	d902      	bls.n	800d5ee <GetLength_ex+0x70>
            WOLFSSL_MSG("GetLength - overlong data length spec");
            return ASN_PARSE_E;
 800d5e8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d5ec:	e045      	b.n	800d67a <GetLength_ex+0xfc>
        } else {
            minLen = 1 << ((bytes - 1) * 8);
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fa:	61bb      	str	r3, [r7, #24]
        }

        /* Check the number of bytes required are available. */
        if ((idx + bytes) > maxIdx) {
 800d5fc:	6a3a      	ldr	r2, [r7, #32]
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	4413      	add	r3, r2
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d20e      	bcs.n	800d626 <GetLength_ex+0xa8>
            WOLFSSL_MSG("GetLength - bad long length");
            return BUFFER_E;
 800d608:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d60c:	e035      	b.n	800d67a <GetLength_ex+0xfc>
        }

        /* Big-endian encoding of number. */
        while (bytes--) {
            b = input[idx++];
 800d60e:	6a3b      	ldr	r3, [r7, #32]
 800d610:	1c5a      	adds	r2, r3, #1
 800d612:	623a      	str	r2, [r7, #32]
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	4413      	add	r3, r2
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	75fb      	strb	r3, [r7, #23]
            length = (length << 8) | b;
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	021a      	lsls	r2, r3, #8
 800d620:	7dfb      	ldrb	r3, [r7, #23]
 800d622:	4313      	orrs	r3, r2
 800d624:	627b      	str	r3, [r7, #36]	; 0x24
        while (bytes--) {
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	1e5a      	subs	r2, r3, #1
 800d62a:	61fa      	str	r2, [r7, #28]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1ee      	bne.n	800d60e <GetLength_ex+0x90>
        }
        /* Negative value indicates we overflowed the signed int. */
        if (length < 0) {
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	2b00      	cmp	r3, #0
 800d634:	da02      	bge.n	800d63c <GetLength_ex+0xbe>
            return ASN_PARSE_E;
 800d636:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d63a:	e01e      	b.n	800d67a <GetLength_ex+0xfc>
        }
        /* Don't allow lengths that are longer than strictly required. */
        if (length < minLen) {
 800d63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	429a      	cmp	r2, r3
 800d642:	da04      	bge.n	800d64e <GetLength_ex+0xd0>
            return ASN_PARSE_E;
 800d644:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d648:	e017      	b.n	800d67a <GetLength_ex+0xfc>
        }
    }
    else {
        /* Length in first byte. */
        length = b;
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* When request, check the buffer has at least length bytes left. */
    if (check && ((idx + length) > maxIdx)) {
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	2b00      	cmp	r3, #0
 800d652:	d008      	beq.n	800d666 <GetLength_ex+0xe8>
 800d654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	4413      	add	r3, r2
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d202      	bcs.n	800d666 <GetLength_ex+0xe8>
        WOLFSSL_MSG("GetLength - value exceeds buffer length");
        return BUFFER_E;
 800d660:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d664:	e009      	b.n	800d67a <GetLength_ex+0xfc>
    }

    /* Return index after length encoding. */
    *inOutIdx = idx;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	6a3a      	ldr	r2, [r7, #32]
 800d66a:	601a      	str	r2, [r3, #0]
    /* Return length if valid. */
    if (length > 0) {
 800d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dd02      	ble.n	800d678 <GetLength_ex+0xfa>
        *len = length;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d676:	601a      	str	r2, [r3, #0]
    }

    /* Return length calculated or error code. */
    return length;
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	372c      	adds	r7, #44	; 0x2c
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <GetASNTag>:
 * return  0 on success
 * return  BAD_FUNC_ARG when tag, inOutIdx or input is NULL.
 * return  BUFFER_E when not enough space in buffer for tag.
 */
int GetASNTag(const byte* input, word32* inOutIdx, byte* tag, word32 maxIdx)
{
 800d686:	b480      	push	{r7}
 800d688:	b087      	sub	sp, #28
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
 800d692:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800d694:	2300      	movs	r3, #0
 800d696:	617b      	str	r3, [r7, #20]
    word32 idx = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	613b      	str	r3, [r7, #16]

    /* Check validity of parameters. */
    if ((tag == NULL) || (inOutIdx == NULL) || (input == NULL)) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <GetASNTag+0x28>
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <GetASNTag+0x28>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d102      	bne.n	800d6b4 <GetASNTag+0x2e>
        ret = BAD_FUNC_ARG;
 800d6ae:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d6b2:	617b      	str	r3, [r7, #20]
    }
    if (ret == 0) {
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10a      	bne.n	800d6d0 <GetASNTag+0x4a>
        /* Get index and ensure space for tag. */
        idx = *inOutIdx;
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	613b      	str	r3, [r7, #16]
        if (idx + ASN_TAG_SZ > maxIdx) {
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d202      	bcs.n	800d6d0 <GetASNTag+0x4a>
            WOLFSSL_MSG("Buffer too small for ASN tag");
            ret = BUFFER_E;
 800d6ca:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d6ce:	617b      	str	r3, [r7, #20]
        }
    }
    if (ret == 0) {
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d109      	bne.n	800d6ea <GetASNTag+0x64>
        /* Return the tag and the index after tag. */
        *tag = input[idx];
 800d6d6:	68fa      	ldr	r2, [r7, #12]
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	4413      	add	r3, r2
 800d6dc:	781a      	ldrb	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	701a      	strb	r2, [r3, #0]
        *inOutIdx = idx + ASN_TAG_SZ;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	601a      	str	r2, [r3, #0]
    }
    /* Return error code. */
    return ret;
 800d6ea:	697b      	ldr	r3, [r7, #20]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	371c      	adds	r7, #28
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <GetASNHeader_ex>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the expected tag is not found or length is invalid.
 */
static int GetASNHeader_ex(const byte* input, byte tag, word32* inOutIdx,
                           int* len, word32 maxIdx, int check)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b08a      	sub	sp, #40	; 0x28
 800d6fc:	af02      	add	r7, sp, #8
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	607a      	str	r2, [r7, #4]
 800d702:	603b      	str	r3, [r7, #0]
 800d704:	460b      	mov	r3, r1
 800d706:	72fb      	strb	r3, [r7, #11]
    int    ret = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	61fb      	str	r3, [r7, #28]
    word32 idx = *inOutIdx;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	61bb      	str	r3, [r7, #24]
    byte   tagFound;
    int    length = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	613b      	str	r3, [r7, #16]

    /* Get tag/type. */
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 800d716:	f107 0217 	add.w	r2, r7, #23
 800d71a:	f107 0118 	add.w	r1, r7, #24
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7ff ffb0 	bl	800d686 <GetASNTag>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d002      	beq.n	800d732 <GetASNHeader_ex+0x3a>
        ret = ASN_PARSE_E;
 800d72c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d730:	61fb      	str	r3, [r7, #28]
    }
    /* Ensure tag is the expected value. */
    if ((ret == 0) && (tagFound != tag)) {
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d106      	bne.n	800d746 <GetASNHeader_ex+0x4e>
 800d738:	7dfb      	ldrb	r3, [r7, #23]
 800d73a:	7afa      	ldrb	r2, [r7, #11]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d002      	beq.n	800d746 <GetASNHeader_ex+0x4e>
        ret = ASN_PARSE_E;
 800d740:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d744:	61fb      	str	r3, [r7, #28]
    }
    /* Get the encoded length. */
    if ((ret == 0) && (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)) {
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10f      	bne.n	800d76c <GetASNHeader_ex+0x74>
 800d74c:	f107 0210 	add.w	r2, r7, #16
 800d750:	f107 0118 	add.w	r1, r7, #24
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f7ff ff0f 	bl	800d57e <GetLength_ex>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	da02      	bge.n	800d76c <GetASNHeader_ex+0x74>
        ret = ASN_PARSE_E;
 800d766:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d76a:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0) {
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d107      	bne.n	800d782 <GetASNHeader_ex+0x8a>
        /* Return the length of data and index after header. */
        *len      = length;
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	601a      	str	r2, [r3, #0]
        *inOutIdx = idx;
 800d778:	69ba      	ldr	r2, [r7, #24]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	601a      	str	r2, [r3, #0]
        ret = length;
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	61fb      	str	r3, [r7, #28]
    }
    /* Return number of data bytes or error code. */
    return ret;
 800d782:	69fb      	ldr	r3, [r7, #28]
}
 800d784:	4618      	mov	r0, r3
 800d786:	3720      	adds	r7, #32
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <GetASNHeader>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the expected tag is not found or length is invalid.
 */
static int GetASNHeader(const byte* input, byte tag, word32* inOutIdx, int* len,
                        word32 maxIdx)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af02      	add	r7, sp, #8
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	607a      	str	r2, [r7, #4]
 800d796:	603b      	str	r3, [r7, #0]
 800d798:	460b      	mov	r3, r1
 800d79a:	72fb      	strb	r3, [r7, #11]
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 800d79c:	7af9      	ldrb	r1, [r7, #11]
 800d79e:	2301      	movs	r3, #1
 800d7a0:	9301      	str	r3, [sp, #4]
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff ffa4 	bl	800d6f8 <GetASNHeader_ex>
 800d7b0:	4603      	mov	r3, r0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <GetHeader>:

#ifndef WOLFSSL_ASN_TEMPLATE
static int GetHeader(const byte* input, byte* tag, word32* inOutIdx, int* len,
                     word32 maxIdx, int check)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b088      	sub	sp, #32
 800d7be:	af02      	add	r7, sp, #8
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
 800d7c6:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	617b      	str	r3, [r7, #20]
    int    length;

    if ((idx + 1) > maxIdx)
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	6a3a      	ldr	r2, [r7, #32]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d202      	bcs.n	800d7de <GetHeader+0x24>
        return BUFFER_E;
 800d7d8:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d7dc:	e01e      	b.n	800d81c <GetHeader+0x62>

    *tag = input[idx++];
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	617a      	str	r2, [r7, #20]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	4413      	add	r3, r2
 800d7e8:	781a      	ldrb	r2, [r3, #0]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	701a      	strb	r2, [r3, #0]

    if (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)
 800d7ee:	f107 0210 	add.w	r2, r7, #16
 800d7f2:	f107 0114 	add.w	r1, r7, #20
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7ff febe 	bl	800d57e <GetLength_ex>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	da02      	bge.n	800d80e <GetHeader+0x54>
        return ASN_PARSE_E;
 800d808:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d80c:	e006      	b.n	800d81c <GetHeader+0x62>

    *len      = length;
 800d80e:	693a      	ldr	r2, [r7, #16]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	601a      	str	r2, [r3, #0]
    return length;
 800d81a:	693b      	ldr	r3, [r7, #16]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3718      	adds	r7, #24
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <GetSequence>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a SEQUENCE or length is invalid.
 */
int GetSequence(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af02      	add	r7, sp, #8
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	2130      	movs	r1, #48	; 0x30
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f7ff ffa5 	bl	800d78c <GetASNHeader>
 800d842:	4603      	mov	r3, r0
                        maxIdx);
}
 800d844:	4618      	mov	r0, r3
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <GetSequence_ex>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a SEQUENCE or length is invalid.
 */
int GetSequence_ex(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx, int check)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b086      	sub	sp, #24
 800d850:	af02      	add	r7, sp, #8
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]
    return GetASNHeader_ex(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	2130      	movs	r1, #48	; 0x30
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f7ff ff45 	bl	800d6f8 <GetASNHeader_ex>
 800d86e:	4603      	mov	r3, r0
                        maxIdx, check);
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <GetSet>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a SET or length is invalid.
 */
int GetSet(const byte* input, word32* inOutIdx, int* len,
                        word32 maxIdx)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af02      	add	r7, sp, #8
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_SET | ASN_CONSTRUCTED, inOutIdx, len,
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	2131      	movs	r1, #49	; 0x31
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f7ff ff7b 	bl	800d78c <GetASNHeader>
 800d896:	4603      	mov	r3, r0
                        maxIdx);
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <GetASNNull>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_TAG_NULL_E when the NULL tag is not found.
 * @return  ASN_EXPECT_0_E when the length is not zero.
 */
static int GetASNNull(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
    int ret = 0;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]
    word32 idx = *inOutIdx;
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	613b      	str	r3, [r7, #16]

    /* Check buffer has enough data for a NULL item. */
    if ((idx + 2) > maxIdx) {
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	3302      	adds	r3, #2
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d202      	bcs.n	800d8c6 <GetASNNull+0x26>
        ret = BUFFER_E;
 800d8c0:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d8c4:	617b      	str	r3, [r7, #20]
    }
    /* Check the tag is NULL. */
    if ((ret == 0) && (input[idx++] != ASN_TAG_NULL)) {
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10a      	bne.n	800d8e2 <GetASNNull+0x42>
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	1c5a      	adds	r2, r3, #1
 800d8d0:	613a      	str	r2, [r7, #16]
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	2b05      	cmp	r3, #5
 800d8da:	d002      	beq.n	800d8e2 <GetASNNull+0x42>
        ret = ASN_TAG_NULL_E;
 800d8dc:	f06f 0390 	mvn.w	r3, #144	; 0x90
 800d8e0:	617b      	str	r3, [r7, #20]
    }
    /* Check the length is zero. */
    if ((ret == 0) && (input[idx++] != 0)) {
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10a      	bne.n	800d8fe <GetASNNull+0x5e>
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	1c5a      	adds	r2, r3, #1
 800d8ec:	613a      	str	r2, [r7, #16]
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <GetASNNull+0x5e>
        ret = ASN_EXPECT_0_E;
 800d8f8:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800d8fc:	617b      	str	r3, [r7, #20]
    }
    if (ret == 0) {
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d102      	bne.n	800d90a <GetASNNull+0x6a>
        /* Return the index after NULL tag. */
        *inOutIdx = idx;
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	601a      	str	r2, [r3, #0]
    }
    /* Return error code. */
    return ret;
 800d90a:	697b      	ldr	r3, [r7, #20]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	371c      	adds	r7, #28
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <SetASNNull>:
 *
 * output  Buffer to write into.
 * returns the number of bytes added to the buffer.
 */
static int SetASNNull(byte* output)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
    output[0] = ASN_TAG_NULL;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2205      	movs	r2, #5
 800d924:	701a      	strb	r2, [r3, #0]
    output[1] = 0;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	3301      	adds	r3, #1
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]

    return 2;
 800d92e:	2302      	movs	r3, #2
}
 800d930:	4618      	mov	r0, r3
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <GetBoolean>:
 * returns BUFFER_E when there is not enough data to parse.
 *         ASN_PARSE_E when the BOOLEAN tag is not found or length is not 1.
 *         Otherwise, 0 to indicate the value was false and 1 to indicate true.
 */
static int GetBoolean(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	617b      	str	r3, [r7, #20]
    byte   b;

    if ((idx + 3) > maxIdx)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	3303      	adds	r3, #3
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	429a      	cmp	r2, r3
 800d956:	d202      	bcs.n	800d95e <GetBoolean+0x22>
        return BUFFER_E;
 800d958:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d95c:	e027      	b.n	800d9ae <GetBoolean+0x72>

    b = input[idx++];
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	1c5a      	adds	r2, r3, #1
 800d962:	617a      	str	r2, [r7, #20]
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	74fb      	strb	r3, [r7, #19]
    if (b != ASN_BOOLEAN)
 800d96c:	7cfb      	ldrb	r3, [r7, #19]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d002      	beq.n	800d978 <GetBoolean+0x3c>
        return ASN_PARSE_E;
 800d972:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d976:	e01a      	b.n	800d9ae <GetBoolean+0x72>

    if (input[idx++] != 1)
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	1c5a      	adds	r2, r3, #1
 800d97c:	617a      	str	r2, [r7, #20]
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	4413      	add	r3, r2
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d002      	beq.n	800d98e <GetBoolean+0x52>
        return ASN_PARSE_E;
 800d988:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d98c:	e00f      	b.n	800d9ae <GetBoolean+0x72>

    b = input[idx++] != 0;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	1c5a      	adds	r2, r3, #1
 800d992:	617a      	str	r2, [r7, #20]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	4413      	add	r3, r2
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	bf14      	ite	ne
 800d99e:	2301      	movne	r3, #1
 800d9a0:	2300      	moveq	r3, #0
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	74fb      	strb	r3, [r7, #19]

    *inOutIdx = idx;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	601a      	str	r2, [r3, #0]
    return b;
 800d9ac:	7cfb      	ldrb	r3, [r7, #19]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	371c      	adds	r7, #28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr

0800d9ba <GetOctetString>:
 * @return  Number of bytes in the ASN.1 data on success.
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a OCTET STRING or length is invalid.
 */
int GetOctetString(const byte* input, word32* inOutIdx, int* len, word32 maxIdx)
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b086      	sub	sp, #24
 800d9be:	af02      	add	r7, sp, #8
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	60b9      	str	r1, [r7, #8]
 800d9c4:	607a      	str	r2, [r7, #4]
 800d9c6:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_OCTET_STRING, inOutIdx, len, maxIdx);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	2104      	movs	r1, #4
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f7ff feda 	bl	800d78c <GetASNHeader>
 800d9d8:	4603      	mov	r3, r0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <GetASNInt>:
 *         or invalid use of or missing leading zero.
 *         Otherwise, 0 to indicate success.
 */
static int GetASNInt(const byte* input, word32* inOutIdx, int* len,
                     word32 maxIdx)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b088      	sub	sp, #32
 800d9e6:	af02      	add	r7, sp, #8
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	60b9      	str	r1, [r7, #8]
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	603b      	str	r3, [r7, #0]
    int    ret;

    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	2102      	movs	r1, #2
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f7ff fec6 	bl	800d78c <GetASNHeader>
 800da00:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	2b00      	cmp	r3, #0
 800da06:	da01      	bge.n	800da0c <GetASNInt+0x2a>
        return ret;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	e03f      	b.n	800da8c <GetASNInt+0xaa>

    if (*len > 0) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	dd3a      	ble.n	800da8a <GetASNInt+0xa8>

#ifndef WOLFSSL_ASN_INT_LEAD_0_ANY
        /* check for invalid padding on negative integer.
         * c.f. X.690 (ISO/IEC 8825-2:2003 (E)) 10.4.6; RFC 5280 4.1
         */
        if (*len > 1) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	dd12      	ble.n	800da42 <GetASNInt+0x60>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	4413      	add	r3, r2
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	2bff      	cmp	r3, #255	; 0xff
 800da28:	d10b      	bne.n	800da42 <GetASNInt+0x60>
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3301      	adds	r3, #1
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	4413      	add	r3, r2
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	b25b      	sxtb	r3, r3
 800da38:	2b00      	cmp	r3, #0
 800da3a:	da02      	bge.n	800da42 <GetASNInt+0x60>
                return ASN_PARSE_E;
 800da3c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800da40:	e024      	b.n	800da8c <GetASNInt+0xaa>
        }
#endif

        /* remove leading zero, unless there is only one 0x00 byte */
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	4413      	add	r3, r2
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d11c      	bne.n	800da8a <GetASNInt+0xa8>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b01      	cmp	r3, #1
 800da56:	dd18      	ble.n	800da8a <GetASNInt+0xa8>
            (*inOutIdx)++;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	601a      	str	r2, [r3, #0]
            (*len)--;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	1e5a      	subs	r2, r3, #1
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	601a      	str	r2, [r3, #0]

#ifndef WOLFSSL_ASN_INT_LEAD_0_ANY
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	dd0a      	ble.n	800da8a <GetASNInt+0xa8>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	4413      	add	r3, r2
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	b25b      	sxtb	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	db02      	blt.n	800da8a <GetASNInt+0xa8>
                return ASN_PARSE_E;
 800da84:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800da88:	e000      	b.n	800da8c <GetASNInt+0xaa>
#endif
        }
    }

    return 0;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3718      	adds	r7, #24
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <GetInteger7Bit>:
 * returns BUFFER_E when there is not enough data to parse.
 *         ASN_PARSE_E when the INTEGER tag is not found or length is invalid.
 *         Otherwise, the 7-bit value.
 */
static int GetInteger7Bit(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	617b      	str	r3, [r7, #20]
    byte   b;

    if ((idx + 3) > maxIdx)
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	3303      	adds	r3, #3
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	429a      	cmp	r2, r3
 800daae:	d202      	bcs.n	800dab6 <GetInteger7Bit+0x22>
        return BUFFER_E;
 800dab0:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800dab4:	e029      	b.n	800db0a <GetInteger7Bit+0x76>

    if (GetASNTag(input, &idx, &b, maxIdx) != 0)
 800dab6:	f107 0213 	add.w	r2, r7, #19
 800daba:	f107 0114 	add.w	r1, r7, #20
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f7ff fde0 	bl	800d686 <GetASNTag>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <GetInteger7Bit+0x3e>
        return ASN_PARSE_E;
 800dacc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dad0:	e01b      	b.n	800db0a <GetInteger7Bit+0x76>
    if (b != ASN_INTEGER)
 800dad2:	7cfb      	ldrb	r3, [r7, #19]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d002      	beq.n	800dade <GetInteger7Bit+0x4a>
        return ASN_PARSE_E;
 800dad8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dadc:	e015      	b.n	800db0a <GetInteger7Bit+0x76>
    if (input[idx++] != 1)
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	617a      	str	r2, [r7, #20]
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4413      	add	r3, r2
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d002      	beq.n	800daf4 <GetInteger7Bit+0x60>
        return ASN_PARSE_E;
 800daee:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800daf2:	e00a      	b.n	800db0a <GetInteger7Bit+0x76>
    b = input[idx++];
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	617a      	str	r2, [r7, #20]
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	4413      	add	r3, r2
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	74fb      	strb	r3, [r7, #19]

    *inOutIdx = idx;
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	601a      	str	r2, [r3, #0]
    return b;
 800db08:	7cfb      	ldrb	r3, [r7, #19]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <GetInteger16Bit>:
 * returns BUFFER_E when there is not enough data to parse.
 *         ASN_PARSE_E when the INTEGER tag is not found or length is invalid.
 *         Otherwise, the 16-bit value.
 */
static int GetInteger16Bit(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b088      	sub	sp, #32
 800db16:	af00      	add	r7, sp, #0
 800db18:	60f8      	str	r0, [r7, #12]
 800db1a:	60b9      	str	r1, [r7, #8]
 800db1c:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	61bb      	str	r3, [r7, #24]
    byte tag;
    word16 n;

    if ((idx + 2) > maxIdx)
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	3302      	adds	r3, #2
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d202      	bcs.n	800db34 <GetInteger16Bit+0x22>
        return BUFFER_E;
 800db2e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800db32:	e059      	b.n	800dbe8 <GetInteger16Bit+0xd6>

    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 800db34:	f107 0217 	add.w	r2, r7, #23
 800db38:	f107 0118 	add.w	r1, r7, #24
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f7ff fda1 	bl	800d686 <GetASNTag>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d002      	beq.n	800db50 <GetInteger16Bit+0x3e>
        return ASN_PARSE_E;
 800db4a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800db4e:	e04b      	b.n	800dbe8 <GetInteger16Bit+0xd6>
    if (tag != ASN_INTEGER)
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	2b02      	cmp	r3, #2
 800db54:	d002      	beq.n	800db5c <GetInteger16Bit+0x4a>
        return ASN_PARSE_E;
 800db56:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800db5a:	e045      	b.n	800dbe8 <GetInteger16Bit+0xd6>
    if (input[idx] == 1) {
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	4413      	add	r3, r2
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d112      	bne.n	800db8e <GetInteger16Bit+0x7c>
        idx++;
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	3301      	adds	r3, #1
 800db6c:	61bb      	str	r3, [r7, #24]
        if ((idx + 1) > maxIdx) {
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	3301      	adds	r3, #1
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	429a      	cmp	r2, r3
 800db76:	d202      	bcs.n	800db7e <GetInteger16Bit+0x6c>
            return ASN_PARSE_E;
 800db78:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800db7c:	e034      	b.n	800dbe8 <GetInteger16Bit+0xd6>
        }
        n = input[idx++];
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	1c5a      	adds	r2, r3, #1
 800db82:	61ba      	str	r2, [r7, #24]
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	4413      	add	r3, r2
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	83fb      	strh	r3, [r7, #30]
 800db8c:	e028      	b.n	800dbe0 <GetInteger16Bit+0xce>
    }
    else if (input[idx] == 2) {
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	4413      	add	r3, r2
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b02      	cmp	r3, #2
 800db98:	d11f      	bne.n	800dbda <GetInteger16Bit+0xc8>
        idx++;
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	3301      	adds	r3, #1
 800db9e:	61bb      	str	r3, [r7, #24]
        if ((idx + 2) > maxIdx) {
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	3302      	adds	r3, #2
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d202      	bcs.n	800dbb0 <GetInteger16Bit+0x9e>
            return ASN_PARSE_E;
 800dbaa:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dbae:	e01b      	b.n	800dbe8 <GetInteger16Bit+0xd6>
        }
        n = input[idx++];
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	1c5a      	adds	r2, r3, #1
 800dbb4:	61ba      	str	r2, [r7, #24]
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	4413      	add	r3, r2
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	83fb      	strh	r3, [r7, #30]
        n = (n << 8) | input[idx++];
 800dbbe:	8bfb      	ldrh	r3, [r7, #30]
 800dbc0:	021b      	lsls	r3, r3, #8
 800dbc2:	b21a      	sxth	r2, r3
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	1c59      	adds	r1, r3, #1
 800dbc8:	61b9      	str	r1, [r7, #24]
 800dbca:	68f9      	ldr	r1, [r7, #12]
 800dbcc:	440b      	add	r3, r1
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	b21b      	sxth	r3, r3
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	b21b      	sxth	r3, r3
 800dbd6:	83fb      	strh	r3, [r7, #30]
 800dbd8:	e002      	b.n	800dbe0 <GetInteger16Bit+0xce>
    }
    else
        return ASN_PARSE_E;
 800dbda:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dbde:	e003      	b.n	800dbe8 <GetInteger16Bit+0xd6>

    *inOutIdx = idx;
 800dbe0:	69ba      	ldr	r2, [r7, #24]
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	601a      	str	r2, [r3, #0]
    return n;
 800dbe6:	8bfb      	ldrh	r3, [r7, #30]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3720      	adds	r7, #32
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <GetMyVersion>:
 * @return  BUFFER_E when data in buffer is too small.
 * @return  ASN_EXPECT_0_E when the most significant bit is set.
 */
int GetMyVersion(const byte* input, word32* inOutIdx,
                               int* version, word32 maxIdx)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
 800dbfc:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = *inOutIdx;
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	617b      	str	r3, [r7, #20]
    byte   tag;

    if ((idx + MIN_VERSION_SZ) > maxIdx)
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	3303      	adds	r3, #3
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d202      	bcs.n	800dc14 <GetMyVersion+0x24>
        return ASN_PARSE_E;
 800dc0e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dc12:	e02c      	b.n	800dc6e <GetMyVersion+0x7e>

    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 800dc14:	f107 0213 	add.w	r2, r7, #19
 800dc18:	f107 0114 	add.w	r1, r7, #20
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f7ff fd31 	bl	800d686 <GetASNTag>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <GetMyVersion+0x40>
        return ASN_PARSE_E;
 800dc2a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dc2e:	e01e      	b.n	800dc6e <GetMyVersion+0x7e>

    if (tag != ASN_INTEGER)
 800dc30:	7cfb      	ldrb	r3, [r7, #19]
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d002      	beq.n	800dc3c <GetMyVersion+0x4c>
        return ASN_PARSE_E;
 800dc36:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dc3a:	e018      	b.n	800dc6e <GetMyVersion+0x7e>

    if (input[idx++] != 0x01)
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	1c5a      	adds	r2, r3, #1
 800dc40:	617a      	str	r2, [r7, #20]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	4413      	add	r3, r2
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d002      	beq.n	800dc52 <GetMyVersion+0x62>
        return ASN_VERSION_E;
 800dc4c:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800dc50:	e00d      	b.n	800dc6e <GetMyVersion+0x7e>

    *version  = input[idx++];
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	617a      	str	r2, [r7, #20]
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	601a      	str	r2, [r3, #0]

    return *version;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
        *version = num;
        ret = num;
    }
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3718      	adds	r7, #24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <GetExplicitVersion>:

#ifndef WOLFSSL_ASN_TEMPLATE
/* May not have one, not an error */
static int GetExplicitVersion(const byte* input, word32* inOutIdx, int* version,
                              word32 maxIdx)
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b088      	sub	sp, #32
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	60f8      	str	r0, [r7, #12]
 800dc7e:	60b9      	str	r1, [r7, #8]
 800dc80:	607a      	str	r2, [r7, #4]
 800dc82:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	61bb      	str	r3, [r7, #24]
    byte tag;

    WOLFSSL_ENTER("GetExplicitVersion");

    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 800dc8a:	f107 0217 	add.w	r2, r7, #23
 800dc8e:	f107 0118 	add.w	r1, r7, #24
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f7ff fcf6 	bl	800d686 <GetASNTag>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <GetExplicitVersion+0x30>
        return ASN_PARSE_E;
 800dca0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dca4:	e023      	b.n	800dcee <GetExplicitVersion+0x78>

    if (tag == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED)) {
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	2ba0      	cmp	r3, #160	; 0xa0
 800dcaa:	d11c      	bne.n	800dce6 <GetExplicitVersion+0x70>
        int ret;

        *inOutIdx = ++idx;  /* skip header */
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	61bb      	str	r3, [r7, #24]
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	601a      	str	r2, [r3, #0]
        ret = GetMyVersion(input, inOutIdx, version, maxIdx);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	68b9      	ldr	r1, [r7, #8]
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7ff ff96 	bl	800dbf0 <GetMyVersion>
 800dcc4:	61f8      	str	r0, [r7, #28]
        if (ret >= 0) {
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	db0a      	blt.n	800dce2 <GetExplicitVersion+0x6c>
            /* check if version is expected value rfc 5280 4.1 {0, 1, 2} */
            if (*version > MAX_X509_VERSION || *version < MIN_X509_VERSION) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	dc03      	bgt.n	800dcdc <GetExplicitVersion+0x66>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	da02      	bge.n	800dce2 <GetExplicitVersion+0x6c>
                WOLFSSL_MSG("Unexpected certificate version");
                WOLFSSL_ERROR_VERBOSE(ASN_VERSION_E);
                ret = ASN_VERSION_E;
 800dcdc:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800dce0:	61fb      	str	r3, [r7, #28]
            }
        }
        return ret;
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	e003      	b.n	800dcee <GetExplicitVersion+0x78>
    }

    /* go back as is */
    *version = 0;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]

    return 0;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3720      	adds	r7, #32
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <GetInt>:
 * @return  ASN_EXPECT_0_E when the most significant bit is set.
 * @return  MP_INIT_E when the unable to initialize an mp_int.
 * @return  ASN_GETINT_E when the unable to convert data to an mp_int.
 */
int GetInt(mp_int* mpi, const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b088      	sub	sp, #32
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	60f8      	str	r0, [r7, #12]
 800dcfe:	60b9      	str	r1, [r7, #8]
 800dd00:	607a      	str	r2, [r7, #4]
 800dd02:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = *inOutIdx;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	61bb      	str	r3, [r7, #24]
    int    ret;
    int    length;

    ret = GetASNInt(input, &idx, &length, maxIdx);
 800dd0a:	f107 0214 	add.w	r2, r7, #20
 800dd0e:	f107 0118 	add.w	r1, r7, #24
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	68b8      	ldr	r0, [r7, #8]
 800dd16:	f7ff fe64 	bl	800d9e2 <GetASNInt>
 800dd1a:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <GetInt+0x30>
        return ret;
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	e01f      	b.n	800dd66 <GetInt+0x70>

    if (mp_init(mpi) != MP_OKAY)
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f012 faa2 	bl	8020270 <mp_init>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <GetInt+0x42>
        return MP_INIT_E;
 800dd32:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dd36:	e016      	b.n	800dd66 <GetInt+0x70>

    if (mp_read_unsigned_bin(mpi, input + idx, length) != 0) {
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	4619      	mov	r1, r3
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f012 fc66 	bl	8020614 <mp_read_unsigned_bin>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d005      	beq.n	800dd5a <GetInt+0x64>
        mp_clear(mpi);
 800dd4e:	68f8      	ldr	r0, [r7, #12]
 800dd50:	f012 fb14 	bl	802037c <mp_clear>
        return ASN_GETINT_E;
 800dd54:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 800dd58:	e005      	b.n	800dd66 <GetInt+0x70>
        mp_clear(mpi);
        return ASN_GETINT_E;
    }
#endif /* HAVE_WOLF_BIGINT */

    *inOutIdx = idx + length;
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	697a      	ldr	r2, [r7, #20]
 800dd5e:	441a      	add	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	601a      	str	r2, [r3, #0]

    return 0;
 800dd64:	2300      	movs	r3, #0
    GetASN_MP_PosNeg(&dataASN[INTASN_IDX_INT], mpi);
    /* Decode the big number (INTEGER). */
    return GetASN_Items(intASN, dataASN, intASN_Length, 0, input, inOutIdx,
                        maxIdx);
#endif
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3720      	adds	r7, #32
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <GetIntPositive>:

#if (defined(HAVE_ECC) || !defined(NO_DSA)) && !defined(WOLFSSL_ASN_TEMPLATE)
static int GetIntPositive(mp_int* mpi, const byte* input, word32* inOutIdx,
    word32 maxIdx)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b088      	sub	sp, #32
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60f8      	str	r0, [r7, #12]
 800dd76:	60b9      	str	r1, [r7, #8]
 800dd78:	607a      	str	r2, [r7, #4]
 800dd7a:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	61bb      	str	r3, [r7, #24]
    int    ret;
    int    length;

    ret = GetASNInt(input, &idx, &length, maxIdx);
 800dd82:	f107 0214 	add.w	r2, r7, #20
 800dd86:	f107 0118 	add.w	r1, r7, #24
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	68b8      	ldr	r0, [r7, #8]
 800dd8e:	f7ff fe28 	bl	800d9e2 <GetASNInt>
 800dd92:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <GetIntPositive+0x30>
        return ret;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	e030      	b.n	800de00 <GetIntPositive+0x92>

    if (((input[idx] & 0x80) == 0x80) && (input[idx - 1] != 0x00))
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	4413      	add	r3, r2
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b25b      	sxtb	r3, r3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	da09      	bge.n	800ddc0 <GetIntPositive+0x52>
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <GetIntPositive+0x52>
        return MP_INIT_E;
 800ddba:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ddbe:	e01f      	b.n	800de00 <GetIntPositive+0x92>

    if (mp_init(mpi) != MP_OKAY)
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f012 fa55 	bl	8020270 <mp_init>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d002      	beq.n	800ddd2 <GetIntPositive+0x64>
        return MP_INIT_E;
 800ddcc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ddd0:	e016      	b.n	800de00 <GetIntPositive+0x92>

    if (mp_read_unsigned_bin(mpi, input + idx, length) != 0) {
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	697a      	ldr	r2, [r7, #20]
 800ddda:	4619      	mov	r1, r3
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f012 fc19 	bl	8020614 <mp_read_unsigned_bin>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d005      	beq.n	800ddf4 <GetIntPositive+0x86>
        mp_clear(mpi);
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f012 fac7 	bl	802037c <mp_clear>
        return ASN_GETINT_E;
 800ddee:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 800ddf2:	e005      	b.n	800de00 <GetIntPositive+0x92>
        mp_clear(mpi);
        return ASN_GETINT_E;
    }
#endif /* HAVE_WOLF_BIGINT */

    *inOutIdx = idx + length;
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	441a      	add	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	601a      	str	r2, [r3, #0]

    return 0;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3720      	adds	r7, #32
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <CheckBitString>:
 * @return  BUFFER_E when data in buffer is too small.
 * @return  ASN_EXPECT_0_E when unused bits is not zero when expected.
 */
int CheckBitString(const byte* input, word32* inOutIdx, int* len,
                          word32 maxIdx, int zeroBits, byte* unusedBits)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
 800de14:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = *inOutIdx;
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	61fb      	str	r3, [r7, #28]
    int    length;
    byte   b;

    if (GetASNTag(input, &idx, &b, maxIdx) != 0) {
 800de1c:	f107 0217 	add.w	r2, r7, #23
 800de20:	f107 011c 	add.w	r1, r7, #28
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f7ff fc2d 	bl	800d686 <GetASNTag>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d002      	beq.n	800de38 <CheckBitString+0x30>
        return ASN_BITSTR_E;
 800de32:	f06f 0392 	mvn.w	r3, #146	; 0x92
 800de36:	e061      	b.n	800defc <CheckBitString+0xf4>
    }

    if (b != ASN_BIT_STRING) {
 800de38:	7dfb      	ldrb	r3, [r7, #23]
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d002      	beq.n	800de44 <CheckBitString+0x3c>
        return ASN_BITSTR_E;
 800de3e:	f06f 0392 	mvn.w	r3, #146	; 0x92
 800de42:	e05b      	b.n	800defc <CheckBitString+0xf4>
    }

    if (GetLength(input, &idx, &length, maxIdx) < 0)
 800de44:	f107 0218 	add.w	r2, r7, #24
 800de48:	f107 011c 	add.w	r1, r7, #28
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f7ff fb81 	bl	800d556 <GetLength>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	da02      	bge.n	800de60 <CheckBitString+0x58>
        return ASN_PARSE_E;
 800de5a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800de5e:	e04d      	b.n	800defc <CheckBitString+0xf4>

    /* extra sanity check that length is greater than 0 */
    if (length <= 0) {
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	2b00      	cmp	r3, #0
 800de64:	dc02      	bgt.n	800de6c <CheckBitString+0x64>
        WOLFSSL_MSG("Error length was 0 in CheckBitString");
        return BUFFER_E;
 800de66:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800de6a:	e047      	b.n	800defc <CheckBitString+0xf4>
    }

    if (idx + 1 > maxIdx) {
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	3301      	adds	r3, #1
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d202      	bcs.n	800de7c <CheckBitString+0x74>
        WOLFSSL_MSG("Attempted buffer read larger than input buffer");
        return BUFFER_E;
 800de76:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800de7a:	e03f      	b.n	800defc <CheckBitString+0xf4>
    }

    b = input[idx];
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	4413      	add	r3, r2
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	75fb      	strb	r3, [r7, #23]
    if (zeroBits && b != 0x00)
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d005      	beq.n	800de98 <CheckBitString+0x90>
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d002      	beq.n	800de98 <CheckBitString+0x90>
        return ASN_EXPECT_0_E;
 800de92:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800de96:	e031      	b.n	800defc <CheckBitString+0xf4>
    if (b >= 0x08)
 800de98:	7dfb      	ldrb	r3, [r7, #23]
 800de9a:	2b07      	cmp	r3, #7
 800de9c:	d902      	bls.n	800dea4 <CheckBitString+0x9c>
        return ASN_PARSE_E;
 800de9e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dea2:	e02b      	b.n	800defc <CheckBitString+0xf4>
    if (b != 0) {
 800dea4:	7dfb      	ldrb	r3, [r7, #23]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d012      	beq.n	800ded0 <CheckBitString+0xc8>
        if ((byte)(input[idx + length - 1] << (8 - b)) != 0)
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	69ba      	ldr	r2, [r7, #24]
 800deae:	4413      	add	r3, r2
 800deb0:	3b01      	subs	r3, #1
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	4413      	add	r3, r2
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	461a      	mov	r2, r3
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	f1c3 0308 	rsb	r3, r3, #8
 800dec0:	fa02 f303 	lsl.w	r3, r2, r3
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <CheckBitString+0xc8>
            return ASN_PARSE_E;
 800deca:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dece:	e015      	b.n	800defc <CheckBitString+0xf4>
    }
    idx++;
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	3301      	adds	r3, #1
 800ded4:	61fb      	str	r3, [r7, #28]
    length--; /* length has been checked for greater than 0 */
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	3b01      	subs	r3, #1
 800deda:	61bb      	str	r3, [r7, #24]

    *inOutIdx = idx;
 800dedc:	69fa      	ldr	r2, [r7, #28]
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	601a      	str	r2, [r3, #0]
    if (len != NULL)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <CheckBitString+0xe6>
        *len = length;
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	601a      	str	r2, [r3, #0]
    if (unusedBits != NULL)
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <CheckBitString+0xf2>
        *unusedBits = b;
 800def4:	7dfa      	ldrb	r2, [r7, #23]
 800def6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def8:	701a      	strb	r2, [r3, #0]

    return 0;
 800defa:	2300      	movs	r3, #0
        }
    }

    return ret;
#endif
}
 800defc:	4618      	mov	r0, r3
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <OidFromId>:
 * @param [out] oidSz  Length of OID byte array returned.
 * @return  Array of bytes for the OID.
 * @return  NULL when ID/type not recognized.
 */
const byte* OidFromId(word32 id, word32 type, word32* oidSz)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
    const byte* oid = NULL;
 800df10:	2300      	movs	r3, #0
 800df12:	617b      	str	r3, [r7, #20]

    *oidSz = 0;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	601a      	str	r2, [r3, #0]

    switch (type) {
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b13      	cmp	r3, #19
 800df1e:	f200 8264 	bhi.w	800e3ea <OidFromId+0x4e6>
 800df22:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <OidFromId+0x24>)
 800df24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df28:	0800df79 	.word	0x0800df79
 800df2c:	0800df91 	.word	0x0800df91
 800df30:	0800dfdf 	.word	0x0800dfdf
 800df34:	0800e02f 	.word	0x0800e02f
 800df38:	0800e03f 	.word	0x0800e03f
 800df3c:	0800e3eb 	.word	0x0800e3eb
 800df40:	0800e089 	.word	0x0800e089
 800df44:	0800e1e5 	.word	0x0800e1e5
 800df48:	0800e269 	.word	0x0800e269
 800df4c:	0800e27f 	.word	0x0800e27f
 800df50:	0800e295 	.word	0x0800e295
 800df54:	0800e333 	.word	0x0800e333
 800df58:	0800e36b 	.word	0x0800e36b
 800df5c:	0800e3bb 	.word	0x0800e3bb
 800df60:	0800e34b 	.word	0x0800e34b
 800df64:	0800e3d1 	.word	0x0800e3d1
 800df68:	0800e3eb 	.word	0x0800e3eb
 800df6c:	0800e3eb 	.word	0x0800e3eb
 800df70:	0800e3eb 	.word	0x0800e3eb
 800df74:	0800e3eb 	.word	0x0800e3eb
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800df7e:	d105      	bne.n	800df8c <OidFromId+0x88>
                    *oidSz = sizeof(hashSha224hOid);
                    break;
            #endif
            #ifndef NO_SHA256
                case SHA256h:
                    oid = hashSha256hOid;
 800df80:	4ba2      	ldr	r3, [pc, #648]	; (800e20c <OidFromId+0x308>)
 800df82:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hashSha256hOid);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2209      	movs	r2, #9
 800df88:	601a      	str	r2, [r3, #0]
                    break;
 800df8a:	e000      	b.n	800df8e <OidFromId+0x8a>
                    *oidSz = sizeof(hashSha3_512hOid);
                    break;
            #endif /* WOLFSSL_NOSHA3_512 */
            #endif /* WOLFSSL_SHA3 */
                default:
                    break;
 800df8c:	bf00      	nop
            }
            break;
 800df8e:	e22d      	b.n	800e3ec <OidFromId+0x4e8>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f240 228f 	movw	r2, #655	; 0x28f
 800df96:	4293      	cmp	r3, r2
 800df98:	d00d      	beq.n	800dfb6 <OidFromId+0xb2>
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 800dfa0:	d21b      	bcs.n	800dfda <OidFromId+0xd6>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800dfa8:	d011      	beq.n	800dfce <OidFromId+0xca>
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f240 228e 	movw	r2, #654	; 0x28e
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d006      	beq.n	800dfc2 <OidFromId+0xbe>
                    *oidSz = sizeof(sigSphincsSmall_Level5Oid);
                    break;
                #endif /* HAVE_SPHINCS */
                #endif /* HAVE_PQC */
                default:
                    break;
 800dfb4:	e011      	b.n	800dfda <OidFromId+0xd6>
                    oid = sigSha256wRsaOid;
 800dfb6:	4b96      	ldr	r3, [pc, #600]	; (800e210 <OidFromId+0x30c>)
 800dfb8:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigSha256wRsaOid);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2209      	movs	r2, #9
 800dfbe:	601a      	str	r2, [r3, #0]
                    break;
 800dfc0:	e00c      	b.n	800dfdc <OidFromId+0xd8>
                    oid = sigRsaSsaPssOid;
 800dfc2:	4b94      	ldr	r3, [pc, #592]	; (800e214 <OidFromId+0x310>)
 800dfc4:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigRsaSsaPssOid);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2209      	movs	r2, #9
 800dfca:	601a      	str	r2, [r3, #0]
                    break;
 800dfcc:	e006      	b.n	800dfdc <OidFromId+0xd8>
                    oid = sigSha256wEcdsaOid;
 800dfce:	4b92      	ldr	r3, [pc, #584]	; (800e218 <OidFromId+0x314>)
 800dfd0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigSha256wEcdsaOid);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2208      	movs	r2, #8
 800dfd6:	601a      	str	r2, [r3, #0]
                    break;
 800dfd8:	e000      	b.n	800dfdc <OidFromId+0xd8>
                    break;
 800dfda:	bf00      	nop
            }
            break;
 800dfdc:	e206      	b.n	800e3ec <OidFromId+0x4e8>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f240 228e 	movw	r2, #654	; 0x28e
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d014      	beq.n	800e012 <OidFromId+0x10e>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f240 228e 	movw	r2, #654	; 0x28e
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d81b      	bhi.n	800e02a <OidFromId+0x126>
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f240 2206 	movw	r2, #518	; 0x206
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d010      	beq.n	800e01e <OidFromId+0x11a>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f240 2285 	movw	r2, #645	; 0x285
 800e002:	4293      	cmp	r3, r2
 800e004:	d111      	bne.n	800e02a <OidFromId+0x126>
                    *oidSz = sizeof(keyDsaOid);
                    break;
                #endif /* NO_DSA */
            #ifndef NO_RSA
                case RSAk:
                    oid = keyRsaOid;
 800e006:	4b85      	ldr	r3, [pc, #532]	; (800e21c <OidFromId+0x318>)
 800e008:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyRsaOid);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2209      	movs	r2, #9
 800e00e:	601a      	str	r2, [r3, #0]
                    break;
 800e010:	e00c      	b.n	800e02c <OidFromId+0x128>
                #ifdef WC_RSA_PSS
                case RSAPSSk:
                    oid = keyRsaPssOid;
 800e012:	4b83      	ldr	r3, [pc, #524]	; (800e220 <OidFromId+0x31c>)
 800e014:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyRsaPssOid);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2209      	movs	r2, #9
 800e01a:	601a      	str	r2, [r3, #0]
                    break;
 800e01c:	e006      	b.n	800e02c <OidFromId+0x128>
                #endif
            #endif /* NO_RSA */
                #ifdef HAVE_ECC
                case ECDSAk:
                    oid = keyEcdsaOid;
 800e01e:	4b81      	ldr	r3, [pc, #516]	; (800e224 <OidFromId+0x320>)
 800e020:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyEcdsaOid);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2207      	movs	r2, #7
 800e026:	601a      	str	r2, [r3, #0]
                    break;
 800e028:	e000      	b.n	800e02c <OidFromId+0x128>
                    *oidSz = sizeof(keySphincsSmall_Level5Oid);
                    break;
                #endif /* HAVE_SPHINCS */
                #endif /* HAVE_PQC */
                default:
                    break;
 800e02a:	bf00      	nop
            }
            break;
 800e02c:	e1de      	b.n	800e3ec <OidFromId+0x4e8>

        #ifdef HAVE_ECC
        case oidCurveType:
            if (wc_ecc_get_oid(id, &oid, oidSz) < 0) {
 800e02e:	f107 0314 	add.w	r3, r7, #20
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	4619      	mov	r1, r3
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f00a fa18 	bl	801846c <wc_ecc_get_oid>
                WOLFSSL_MSG("ECC OID not found");
            }
            break;
 800e03c:	e1d6      	b.n	800e3ec <OidFromId+0x4e8>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 800e044:	d018      	beq.n	800e078 <OidFromId+0x174>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 800e04c:	d81a      	bhi.n	800e084 <OidFromId+0x180>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800e054:	d004      	beq.n	800e060 <OidFromId+0x15c>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 800e05c:	d006      	beq.n	800e06c <OidFromId+0x168>
                    oid = blkDes3CbcOid;
                    *oidSz = sizeof(blkDes3CbcOid);
                    break;
    #endif /* !NO_DES3 */
                default:
                    break;
 800e05e:	e011      	b.n	800e084 <OidFromId+0x180>
                    oid = blkAes128CbcOid;
 800e060:	4b71      	ldr	r3, [pc, #452]	; (800e228 <OidFromId+0x324>)
 800e062:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes128CbcOid);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2209      	movs	r2, #9
 800e068:	601a      	str	r2, [r3, #0]
                    break;
 800e06a:	e00c      	b.n	800e086 <OidFromId+0x182>
                    oid = blkAes192CbcOid;
 800e06c:	4b6f      	ldr	r3, [pc, #444]	; (800e22c <OidFromId+0x328>)
 800e06e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes192CbcOid);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2209      	movs	r2, #9
 800e074:	601a      	str	r2, [r3, #0]
                    break;
 800e076:	e006      	b.n	800e086 <OidFromId+0x182>
                    oid = blkAes256CbcOid;
 800e078:	4b6d      	ldr	r3, [pc, #436]	; (800e230 <OidFromId+0x32c>)
 800e07a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes256CbcOid);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2209      	movs	r2, #9
 800e080:	601a      	str	r2, [r3, #0]
                    break;
 800e082:	e000      	b.n	800e086 <OidFromId+0x182>
                    break;
 800e084:	bf00      	nop
            }
            break;
 800e086:	e1b1      	b.n	800e3ec <OidFromId+0x4e8>
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2b45      	cmp	r3, #69	; 0x45
 800e08c:	d078      	beq.n	800e180 <OidFromId+0x27c>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b45      	cmp	r3, #69	; 0x45
 800e092:	f0c0 80a5 	bcc.w	800e1e0 <OidFromId+0x2dc>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2ba8      	cmp	r3, #168	; 0xa8
 800e09a:	f200 80a1 	bhi.w	800e1e0 <OidFromId+0x2dc>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2b80      	cmp	r3, #128	; 0x80
 800e0a2:	f0c0 809d 	bcc.w	800e1e0 <OidFromId+0x2dc>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	3b80      	subs	r3, #128	; 0x80
 800e0aa:	2b28      	cmp	r3, #40	; 0x28
 800e0ac:	f200 8098 	bhi.w	800e1e0 <OidFromId+0x2dc>
 800e0b0:	a201      	add	r2, pc, #4	; (adr r2, 800e0b8 <OidFromId+0x1b4>)
 800e0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b6:	bf00      	nop
 800e0b8:	0800e199 	.word	0x0800e199
 800e0bc:	0800e1b1 	.word	0x0800e1b1
 800e0c0:	0800e1e1 	.word	0x0800e1e1
 800e0c4:	0800e169 	.word	0x0800e169
 800e0c8:	0800e1e1 	.word	0x0800e1e1
 800e0cc:	0800e15d 	.word	0x0800e15d
 800e0d0:	0800e1e1 	.word	0x0800e1e1
 800e0d4:	0800e1e1 	.word	0x0800e1e1
 800e0d8:	0800e1e1 	.word	0x0800e1e1
 800e0dc:	0800e1e1 	.word	0x0800e1e1
 800e0e0:	0800e1e1 	.word	0x0800e1e1
 800e0e4:	0800e1e1 	.word	0x0800e1e1
 800e0e8:	0800e1e1 	.word	0x0800e1e1
 800e0ec:	0800e1e1 	.word	0x0800e1e1
 800e0f0:	0800e1e1 	.word	0x0800e1e1
 800e0f4:	0800e1e1 	.word	0x0800e1e1
 800e0f8:	0800e1d5 	.word	0x0800e1d5
 800e0fc:	0800e175 	.word	0x0800e175
 800e100:	0800e1a5 	.word	0x0800e1a5
 800e104:	0800e1e1 	.word	0x0800e1e1
 800e108:	0800e1e1 	.word	0x0800e1e1
 800e10c:	0800e18d 	.word	0x0800e18d
 800e110:	0800e1e1 	.word	0x0800e1e1
 800e114:	0800e1c9 	.word	0x0800e1c9
 800e118:	0800e1e1 	.word	0x0800e1e1
 800e11c:	0800e1e1 	.word	0x0800e1e1
 800e120:	0800e1e1 	.word	0x0800e1e1
 800e124:	0800e1e1 	.word	0x0800e1e1
 800e128:	0800e1e1 	.word	0x0800e1e1
 800e12c:	0800e1e1 	.word	0x0800e1e1
 800e130:	0800e1e1 	.word	0x0800e1e1
 800e134:	0800e1e1 	.word	0x0800e1e1
 800e138:	0800e1e1 	.word	0x0800e1e1
 800e13c:	0800e1e1 	.word	0x0800e1e1
 800e140:	0800e1e1 	.word	0x0800e1e1
 800e144:	0800e1e1 	.word	0x0800e1e1
 800e148:	0800e1e1 	.word	0x0800e1e1
 800e14c:	0800e1e1 	.word	0x0800e1e1
 800e150:	0800e1e1 	.word	0x0800e1e1
 800e154:	0800e1e1 	.word	0x0800e1e1
 800e158:	0800e1bd 	.word	0x0800e1bd
        #endif /* HAVE_OCSP */

        case oidCertExtType:
            switch (id) {
                case BASIC_CA_OID:
                    oid = extBasicCaOid;
 800e15c:	4b35      	ldr	r3, [pc, #212]	; (800e234 <OidFromId+0x330>)
 800e15e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extBasicCaOid);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2203      	movs	r2, #3
 800e164:	601a      	str	r2, [r3, #0]
                    break;
 800e166:	e03c      	b.n	800e1e2 <OidFromId+0x2de>
                case ALT_NAMES_OID:
                    oid = extAltNamesOid;
 800e168:	4b33      	ldr	r3, [pc, #204]	; (800e238 <OidFromId+0x334>)
 800e16a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesOid);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2203      	movs	r2, #3
 800e170:	601a      	str	r2, [r3, #0]
                    break;
 800e172:	e036      	b.n	800e1e2 <OidFromId+0x2de>
                case CRL_DIST_OID:
                    oid = extCrlDistOid;
 800e174:	4b31      	ldr	r3, [pc, #196]	; (800e23c <OidFromId+0x338>)
 800e176:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCrlDistOid);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2203      	movs	r2, #3
 800e17c:	601a      	str	r2, [r3, #0]
                    break;
 800e17e:	e030      	b.n	800e1e2 <OidFromId+0x2de>
                case AUTH_INFO_OID:
                    oid = extAuthInfoOid;
 800e180:	4b2f      	ldr	r3, [pc, #188]	; (800e240 <OidFromId+0x33c>)
 800e182:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoOid);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2208      	movs	r2, #8
 800e188:	601a      	str	r2, [r3, #0]
                    break;
 800e18a:	e02a      	b.n	800e1e2 <OidFromId+0x2de>
                case AUTH_KEY_OID:
                    oid = extAuthKeyOid;
 800e18c:	4b2d      	ldr	r3, [pc, #180]	; (800e244 <OidFromId+0x340>)
 800e18e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthKeyOid);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2203      	movs	r2, #3
 800e194:	601a      	str	r2, [r3, #0]
                    break;
 800e196:	e024      	b.n	800e1e2 <OidFromId+0x2de>
                case SUBJ_KEY_OID:
                    oid = extSubjKeyOid;
 800e198:	4b2b      	ldr	r3, [pc, #172]	; (800e248 <OidFromId+0x344>)
 800e19a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extSubjKeyOid);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2203      	movs	r2, #3
 800e1a0:	601a      	str	r2, [r3, #0]
                    break;
 800e1a2:	e01e      	b.n	800e1e2 <OidFromId+0x2de>
                case CERT_POLICY_OID:
                    oid = extCertPolicyOid;
 800e1a4:	4b29      	ldr	r3, [pc, #164]	; (800e24c <OidFromId+0x348>)
 800e1a6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyOid);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2203      	movs	r2, #3
 800e1ac:	601a      	str	r2, [r3, #0]
                    break;
 800e1ae:	e018      	b.n	800e1e2 <OidFromId+0x2de>
                case KEY_USAGE_OID:
                    oid = extKeyUsageOid;
 800e1b0:	4b27      	ldr	r3, [pc, #156]	; (800e250 <OidFromId+0x34c>)
 800e1b2:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extKeyUsageOid);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	601a      	str	r2, [r3, #0]
                    break;
 800e1ba:	e012      	b.n	800e1e2 <OidFromId+0x2de>
                case INHIBIT_ANY_OID:
                    oid = extInhibitAnyOid;
 800e1bc:	4b25      	ldr	r3, [pc, #148]	; (800e254 <OidFromId+0x350>)
 800e1be:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extInhibitAnyOid);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2203      	movs	r2, #3
 800e1c4:	601a      	str	r2, [r3, #0]
                    break;
 800e1c6:	e00c      	b.n	800e1e2 <OidFromId+0x2de>
                case EXT_KEY_USAGE_OID:
                    oid = extExtKeyUsageOid;
 800e1c8:	4b23      	ldr	r3, [pc, #140]	; (800e258 <OidFromId+0x354>)
 800e1ca:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOid);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2203      	movs	r2, #3
 800e1d0:	601a      	str	r2, [r3, #0]
                    break;
 800e1d2:	e006      	b.n	800e1e2 <OidFromId+0x2de>
            #ifndef IGNORE_NAME_CONSTRAINTS
                case NAME_CONS_OID:
                    oid = extNameConsOid;
 800e1d4:	4b21      	ldr	r3, [pc, #132]	; (800e25c <OidFromId+0x358>)
 800e1d6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extNameConsOid);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2203      	movs	r2, #3
 800e1dc:	601a      	str	r2, [r3, #0]
                    break;
 800e1de:	e000      	b.n	800e1e2 <OidFromId+0x2de>
                    oid = extSubjInfoAccessOid;
                    *oidSz = sizeof(extSubjInfoAccessOid);
                    break;
            #endif
                default:
                    break;
 800e1e0:	bf00      	nop
            }
            break;
 800e1e2:	e103      	b.n	800e3ec <OidFromId+0x4e8>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b74      	cmp	r3, #116	; 0x74
 800e1e8:	d003      	beq.n	800e1f2 <OidFromId+0x2ee>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b75      	cmp	r3, #117	; 0x75
 800e1ee:	d006      	beq.n	800e1fe <OidFromId+0x2fa>
                    oid = extAuthInfoCaRespOid;
                    *oidSz = sizeof(extAuthInfoCaRespOid);
                    break;
                #endif /* WOLFSSL_SUBJ_INFO_ACC */
                default:
                    break;
 800e1f0:	e00b      	b.n	800e20a <OidFromId+0x306>
                    oid = extAuthInfoOcspOid;
 800e1f2:	4b1b      	ldr	r3, [pc, #108]	; (800e260 <OidFromId+0x35c>)
 800e1f4:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoOcspOid);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2208      	movs	r2, #8
 800e1fa:	601a      	str	r2, [r3, #0]
                    break;
 800e1fc:	e005      	b.n	800e20a <OidFromId+0x306>
                    oid = extAuthInfoCaIssuerOid;
 800e1fe:	4b19      	ldr	r3, [pc, #100]	; (800e264 <OidFromId+0x360>)
 800e200:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoCaIssuerOid);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2208      	movs	r2, #8
 800e206:	601a      	str	r2, [r3, #0]
                    break;
 800e208:	bf00      	nop
            }
            break;
 800e20a:	e0ef      	b.n	800e3ec <OidFromId+0x4e8>
 800e20c:	0802bd18 	.word	0x0802bd18
 800e210:	0802bd2c 	.word	0x0802bd2c
 800e214:	0802bd38 	.word	0x0802bd38
 800e218:	0802bd44 	.word	0x0802bd44
 800e21c:	0802bd4c 	.word	0x0802bd4c
 800e220:	0802bd58 	.word	0x0802bd58
 800e224:	0802bd64 	.word	0x0802bd64
 800e228:	0802bd6c 	.word	0x0802bd6c
 800e22c:	0802bd78 	.word	0x0802bd78
 800e230:	0802bd84 	.word	0x0802bd84
 800e234:	0802bdbc 	.word	0x0802bdbc
 800e238:	0802bdc0 	.word	0x0802bdc0
 800e23c:	0802bdc4 	.word	0x0802bdc4
 800e240:	0802bdc8 	.word	0x0802bdc8
 800e244:	0802bdd0 	.word	0x0802bdd0
 800e248:	0802bdd4 	.word	0x0802bdd4
 800e24c:	0802bdd8 	.word	0x0802bdd8
 800e250:	0802bddc 	.word	0x0802bddc
 800e254:	0802bde0 	.word	0x0802bde0
 800e258:	0802bde4 	.word	0x0802bde4
 800e25c:	0802bde8 	.word	0x0802bde8
 800e260:	0802bdec 	.word	0x0802bdec
 800e264:	0802bdf4 	.word	0x0802bdf4
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2b92      	cmp	r3, #146	; 0x92
 800e26c:	d105      	bne.n	800e27a <OidFromId+0x376>

        case oidCertPolicyType:
            switch (id) {
                case CP_ANY_OID:
                    oid = extCertPolicyAnyOid;
 800e26e:	4b62      	ldr	r3, [pc, #392]	; (800e3f8 <OidFromId+0x4f4>)
 800e270:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyAnyOid);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2204      	movs	r2, #4
 800e276:	601a      	str	r2, [r3, #0]
                    break;
 800e278:	e000      	b.n	800e27c <OidFromId+0x378>
                    oid = extCertPolicyFpkiPiviAuthOid;
                    *oidSz = sizeof(extCertPolicyFpkiPiviAuthOid);
                    break;
                #endif /* WOLFSSL_FPKI */
                default:
                    break;
 800e27a:	bf00      	nop
            }
            break;
 800e27c:	e0b6      	b.n	800e3ec <OidFromId+0x4e8>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2b4f      	cmp	r3, #79	; 0x4f
 800e282:	d105      	bne.n	800e290 <OidFromId+0x38c>

        case oidCertAltNameType:
            switch (id) {
                case HW_NAME_OID:
                    oid = extAltNamesHwNameOid;
 800e284:	4b5d      	ldr	r3, [pc, #372]	; (800e3fc <OidFromId+0x4f8>)
 800e286:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesHwNameOid);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2208      	movs	r2, #8
 800e28c:	601a      	str	r2, [r3, #0]
                    break;
 800e28e:	e000      	b.n	800e292 <OidFromId+0x38e>
                default:
                    break;
 800e290:	bf00      	nop
            }
            break;
 800e292:	e0ab      	b.n	800e3ec <OidFromId+0x4e8>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b4f      	cmp	r3, #79	; 0x4f
 800e298:	d81c      	bhi.n	800e2d4 <OidFromId+0x3d0>
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b47      	cmp	r3, #71	; 0x47
 800e29e:	d346      	bcc.n	800e32e <OidFromId+0x42a>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	3b47      	subs	r3, #71	; 0x47
 800e2a4:	2b08      	cmp	r3, #8
 800e2a6:	d842      	bhi.n	800e32e <OidFromId+0x42a>
 800e2a8:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <OidFromId+0x3ac>)
 800e2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ae:	bf00      	nop
 800e2b0:	0800e2e7 	.word	0x0800e2e7
 800e2b4:	0800e2f3 	.word	0x0800e2f3
 800e2b8:	0800e2ff 	.word	0x0800e2ff
 800e2bc:	0800e30b 	.word	0x0800e30b
 800e2c0:	0800e32f 	.word	0x0800e32f
 800e2c4:	0800e32f 	.word	0x0800e32f
 800e2c8:	0800e32f 	.word	0x0800e32f
 800e2cc:	0800e317 	.word	0x0800e317
 800e2d0:	0800e323 	.word	0x0800e323
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b97      	cmp	r3, #151	; 0x97
 800e2d8:	d129      	bne.n	800e32e <OidFromId+0x42a>

        case oidCertKeyUseType:
            switch (id) {
                case EKU_ANY_OID:
                    oid = extExtKeyUsageAnyOid;
 800e2da:	4b49      	ldr	r3, [pc, #292]	; (800e400 <OidFromId+0x4fc>)
 800e2dc:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageAnyOid);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2204      	movs	r2, #4
 800e2e2:	601a      	str	r2, [r3, #0]
                    break;
 800e2e4:	e024      	b.n	800e330 <OidFromId+0x42c>
                case EKU_SERVER_AUTH_OID:
                    oid = extExtKeyUsageServerAuthOid;
 800e2e6:	4b47      	ldr	r3, [pc, #284]	; (800e404 <OidFromId+0x500>)
 800e2e8:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageServerAuthOid);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2208      	movs	r2, #8
 800e2ee:	601a      	str	r2, [r3, #0]
                    break;
 800e2f0:	e01e      	b.n	800e330 <OidFromId+0x42c>
                case EKU_CLIENT_AUTH_OID:
                    oid = extExtKeyUsageClientAuthOid;
 800e2f2:	4b45      	ldr	r3, [pc, #276]	; (800e408 <OidFromId+0x504>)
 800e2f4:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageClientAuthOid);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2208      	movs	r2, #8
 800e2fa:	601a      	str	r2, [r3, #0]
                    break;
 800e2fc:	e018      	b.n	800e330 <OidFromId+0x42c>
                case EKU_CODESIGNING_OID:
                    oid = extExtKeyUsageCodeSigningOid;
 800e2fe:	4b43      	ldr	r3, [pc, #268]	; (800e40c <OidFromId+0x508>)
 800e300:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageCodeSigningOid);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2208      	movs	r2, #8
 800e306:	601a      	str	r2, [r3, #0]
                    break;
 800e308:	e012      	b.n	800e330 <OidFromId+0x42c>
                case EKU_EMAILPROTECT_OID:
                    oid = extExtKeyUsageEmailProtectOid;
 800e30a:	4b41      	ldr	r3, [pc, #260]	; (800e410 <OidFromId+0x50c>)
 800e30c:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageEmailProtectOid);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2208      	movs	r2, #8
 800e312:	601a      	str	r2, [r3, #0]
                    break;
 800e314:	e00c      	b.n	800e330 <OidFromId+0x42c>
                case EKU_TIMESTAMP_OID:
                    oid = extExtKeyUsageTimestampOid;
 800e316:	4b3f      	ldr	r3, [pc, #252]	; (800e414 <OidFromId+0x510>)
 800e318:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageTimestampOid);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2208      	movs	r2, #8
 800e31e:	601a      	str	r2, [r3, #0]
                    break;
 800e320:	e006      	b.n	800e330 <OidFromId+0x42c>
                case EKU_OCSP_SIGN_OID:
                    oid = extExtKeyUsageOcspSignOid;
 800e322:	4b3d      	ldr	r3, [pc, #244]	; (800e418 <OidFromId+0x514>)
 800e324:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOcspSignOid);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2208      	movs	r2, #8
 800e32a:	601a      	str	r2, [r3, #0]
                    break;
 800e32c:	e000      	b.n	800e330 <OidFromId+0x42c>
                    oid = extExtKeyUsageSshKpClientAuthOid;
                    *oidSz = sizeof(extExtKeyUsageSshKpClientAuthOid);
                    break;
                #endif /* WOLFSSL_WOLFSSH */
                default:
                    break;
 800e32e:	bf00      	nop
            }
            break;
 800e330:	e05c      	b.n	800e3ec <OidFromId+0x4e8>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 800e338:	d105      	bne.n	800e346 <OidFromId+0x442>

        case oidKdfType:
            switch (id) {
                case PBKDF2_OID:
                    oid = pbkdf2Oid;
 800e33a:	4b38      	ldr	r3, [pc, #224]	; (800e41c <OidFromId+0x518>)
 800e33c:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbkdf2Oid);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2209      	movs	r2, #9
 800e342:	601a      	str	r2, [r3, #0]
                    break;
 800e344:	e000      	b.n	800e348 <OidFromId+0x444>
                default:
                    break;
 800e346:	bf00      	nop
            }
            break;
 800e348:	e050      	b.n	800e3ec <OidFromId+0x4e8>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b0d      	cmp	r3, #13
 800e34e:	d004      	beq.n	800e35a <OidFromId+0x456>
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f240 2295 	movw	r2, #661	; 0x295
 800e356:	4293      	cmp	r3, r2
 800e358:	d105      	bne.n	800e366 <OidFromId+0x462>
                    *oidSz = sizeof(pbeSha1Des3);
                    break;
        #endif
                case PBES2_SUM:
                case PBES2:
                    oid = pbes2;
 800e35a:	4b31      	ldr	r3, [pc, #196]	; (800e420 <OidFromId+0x51c>)
 800e35c:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbes2);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2209      	movs	r2, #9
 800e362:	601a      	str	r2, [r3, #0]
                    break;
 800e364:	e000      	b.n	800e368 <OidFromId+0x464>
                default:
                    break;
 800e366:	bf00      	nop
            }
            break;
 800e368:	e040      	b.n	800e3ec <OidFromId+0x4e8>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f240 12c9 	movw	r2, #457	; 0x1c9
 800e370:	4293      	cmp	r3, r2
 800e372:	d01a      	beq.n	800e3aa <OidFromId+0x4a6>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f5b3 7fe5 	cmp.w	r3, #458	; 0x1ca
 800e37a:	d21c      	bcs.n	800e3b6 <OidFromId+0x4b2>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f240 12a1 	movw	r2, #417	; 0x1a1
 800e382:	4293      	cmp	r3, r2
 800e384:	d005      	beq.n	800e392 <OidFromId+0x48e>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f240 12b5 	movw	r2, #437	; 0x1b5
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d006      	beq.n	800e39e <OidFromId+0x49a>
                    oid = wrapPwriKekOid;
                    *oidSz = sizeof(wrapPwriKekOid);
                    break;
            #endif
                default:
                    break;
 800e390:	e011      	b.n	800e3b6 <OidFromId+0x4b2>
                    oid = wrapAes128Oid;
 800e392:	4b24      	ldr	r3, [pc, #144]	; (800e424 <OidFromId+0x520>)
 800e394:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes128Oid);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2209      	movs	r2, #9
 800e39a:	601a      	str	r2, [r3, #0]
                    break;
 800e39c:	e00c      	b.n	800e3b8 <OidFromId+0x4b4>
                    oid = wrapAes192Oid;
 800e39e:	4b22      	ldr	r3, [pc, #136]	; (800e428 <OidFromId+0x524>)
 800e3a0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes192Oid);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2209      	movs	r2, #9
 800e3a6:	601a      	str	r2, [r3, #0]
                    break;
 800e3a8:	e006      	b.n	800e3b8 <OidFromId+0x4b4>
                    oid = wrapAes256Oid;
 800e3aa:	4b20      	ldr	r3, [pc, #128]	; (800e42c <OidFromId+0x528>)
 800e3ac:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes256Oid);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2209      	movs	r2, #9
 800e3b2:	601a      	str	r2, [r3, #0]
                    break;
 800e3b4:	e000      	b.n	800e3b8 <OidFromId+0x4b4>
                    break;
 800e3b6:	bf00      	nop
            }
            break;
 800e3b8:	e018      	b.n	800e3ec <OidFromId+0x4e8>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2bbd      	cmp	r3, #189	; 0xbd
 800e3be:	d105      	bne.n	800e3cc <OidFromId+0x4c8>
                    *oidSz = sizeof(dhSinglePass_stdDH_sha224kdf_Oid);
                    break;
            #endif
            #ifndef NO_SHA256
                case dhSinglePass_stdDH_sha256kdf_scheme:
                    oid = dhSinglePass_stdDH_sha256kdf_Oid;
 800e3c0:	4b1b      	ldr	r3, [pc, #108]	; (800e430 <OidFromId+0x52c>)
 800e3c2:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(dhSinglePass_stdDH_sha256kdf_Oid);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2206      	movs	r2, #6
 800e3c8:	601a      	str	r2, [r3, #0]
                    break;
 800e3ca:	e000      	b.n	800e3ce <OidFromId+0x4ca>
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
                    *oidSz = sizeof(dhSinglePass_stdDH_sha512kdf_Oid);
                    break;
            #endif
                default:
                    break;
 800e3cc:	bf00      	nop
            }
            break;
 800e3ce:	e00d      	b.n	800e3ec <OidFromId+0x4e8>
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f240 228d 	movw	r2, #653	; 0x28d
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d105      	bne.n	800e3e6 <OidFromId+0x4e2>
                    *oidSz = sizeof(hmacSha224Oid);
                    break;
        #endif
        #ifndef NO_SHA256
                case HMAC_SHA256_OID:
                    oid = hmacSha256Oid;
 800e3da:	4b16      	ldr	r3, [pc, #88]	; (800e434 <OidFromId+0x530>)
 800e3dc:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hmacSha256Oid);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2208      	movs	r2, #8
 800e3e2:	601a      	str	r2, [r3, #0]
                    break;
 800e3e4:	e000      	b.n	800e3e8 <OidFromId+0x4e4>
                    oid = hmacSha512Oid;
                    *oidSz = sizeof(hmacSha512Oid);
                    break;
        #endif
                default:
                    break;
 800e3e6:	bf00      	nop
            }
            break;
 800e3e8:	e000      	b.n	800e3ec <OidFromId+0x4e8>
            }
            break;
#endif /* WOLFSSL_SUBJ_DIR_ATTR */
        case oidIgnoreType:
        default:
            break;
 800e3ea:	bf00      	nop
    }

    return oid;
 800e3ec:	697b      	ldr	r3, [r7, #20]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3718      	adds	r7, #24
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	0802bdfc 	.word	0x0802bdfc
 800e3fc:	0802be00 	.word	0x0802be00
 800e400:	0802be08 	.word	0x0802be08
 800e404:	0802be0c 	.word	0x0802be0c
 800e408:	0802be14 	.word	0x0802be14
 800e40c:	0802be1c 	.word	0x0802be1c
 800e410:	0802be24 	.word	0x0802be24
 800e414:	0802be2c 	.word	0x0802be2c
 800e418:	0802be34 	.word	0x0802be34
 800e41c:	0802be3c 	.word	0x0802be3c
 800e420:	0802be48 	.word	0x0802be48
 800e424:	0802bd90 	.word	0x0802bd90
 800e428:	0802bd9c 	.word	0x0802bd9c
 800e42c:	0802bda8 	.word	0x0802bda8
 800e430:	0802bdb4 	.word	0x0802bdb4
 800e434:	0802bd24 	.word	0x0802bd24

0800e438 <CheckCurve>:
 * @param [in]  oid  OID id.
 * @return  ECC set id on success.
 * @return  ECC_CURVE_OID_E when OID id is 0 or not supported.
 */
static int CheckCurve(word32 oid)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
    int ret;
    word32 oidSz;

    /* Lookup OID id. */
    ret = wc_ecc_get_oid(oid, NULL, &oidSz);
 800e440:	f107 0308 	add.w	r3, r7, #8
 800e444:	461a      	mov	r2, r3
 800e446:	2100      	movs	r1, #0
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f00a f80f 	bl	801846c <wc_ecc_get_oid>
 800e44e:	60f8      	str	r0, [r7, #12]
    /* Check for error or zero length OID size (can't get OID for encoding). */
    if ((ret < 0) || (oidSz == 0)) {
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	db02      	blt.n	800e45c <CheckCurve+0x24>
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d102      	bne.n	800e462 <CheckCurve+0x2a>
        WOLFSSL_MSG("CheckCurve not found");
        WOLFSSL_ERROR_VERBOSE(ECC_CURVE_OID_E);
        ret = ECC_CURVE_OID_E;
 800e45c:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 800e460:	60fb      	str	r3, [r7, #12]
    }

    /* Return ECC set id or error code. */
    return ret;
 800e462:	68fb      	ldr	r3, [r7, #12]
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <GetASNObjectId>:
 * @return  0 on success.
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a OBJECT ID or length is invalid.
 */
int GetASNObjectId(const byte* input, word32* inOutIdx, int* len, word32 maxIdx)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af02      	add	r7, sp, #8
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	603b      	str	r3, [r7, #0]
    int ret = GetASNHeader(input, ASN_OBJECT_ID, inOutIdx, len, maxIdx);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	2106      	movs	r1, #6
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff f981 	bl	800d78c <GetASNHeader>
 800e48a:	6178      	str	r0, [r7, #20]
    if (ret > 0) {
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	dd01      	ble.n	800e496 <GetASNObjectId+0x2a>
        /* Only return 0 on success. */
        ret = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	617b      	str	r3, [r7, #20]
    }
    return ret;
 800e496:	697b      	ldr	r3, [r7, #20]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3718      	adds	r7, #24
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <SetObjectId>:
 * @param [in]  len        Length of OBJECT ID data in bytes.
 * @param [out] output     Buffer to write into.
 * @return  Number of bytes added to the buffer.
 */
int SetObjectId(int len, byte* output)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
    int idx = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	60fb      	str	r3, [r7, #12]

    if (output) {
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d004      	beq.n	800e4be <SetObjectId+0x1e>
        /* Write out tag. */
        output[idx] = ASN_OBJECT_ID;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	2206      	movs	r2, #6
 800e4bc:	701a      	strb	r2, [r3, #0]
    }
    /* Skip tag. */
    idx += ASN_TAG_SZ;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	60fb      	str	r3, [r7, #12]
    /* Encode length - passing NULL for output will not encode. */
    idx += SetLength(len, output ? output + idx : NULL);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d003      	beq.n	800e4d4 <SetObjectId+0x34>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	683a      	ldr	r2, [r7, #0]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	e000      	b.n	800e4d6 <SetObjectId+0x36>
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	f001 fff5 	bl	80104c6 <SetLength>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]

    /* Return index after header. */
    return idx;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <GetOID>:
 * @return  BUFFER_E when not enough bytes for proper decode. (ASN_DUMP_OID and
 *          HAVE_OID_DECODING)
 */
static int GetOID(const byte* input, word32* inOutIdx, word32* oid,
                  word32 oidType, int length)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b08a      	sub	sp, #40	; 0x28
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	60f8      	str	r0, [r7, #12]
 800e4f6:	60b9      	str	r1, [r7, #8]
 800e4f8:	607a      	str	r2, [r7, #4]
 800e4fa:	603b      	str	r3, [r7, #0]
    int    ret = 0;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	627b      	str	r3, [r7, #36]	; 0x24
    word32 idx = *inOutIdx;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	623b      	str	r3, [r7, #32]
#ifndef NO_VERIFY_OID
    word32 actualOidSz;
    const byte* actualOid;
    const byte* checkOid = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	61fb      	str	r3, [r7, #28]
#endif /* NO_VERIFY_OID */
#ifdef HAVE_PQC
    word32 found_collision = 0;
#endif
    (void)oidType;
    *oid = 0;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	601a      	str	r2, [r3, #0]

#ifndef NO_VERIFY_OID
    /* Keep references to OID data and length for check. */
    actualOid = &input[idx];
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	4413      	add	r3, r2
 800e516:	61bb      	str	r3, [r7, #24]
    actualOidSz = (word32)length;
 800e518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51a:	617b      	str	r3, [r7, #20]
        found_collision = SPHINCS_FAST_LEVEL3k;
    }
#endif /* HAVE_PQC */

    /* Sum it up for now. */
    while (length--) {
 800e51c:	e00b      	b.n	800e536 <GetOID+0x48>
        /* odd HC08 compiler behavior here when input[idx++] */
        *oid += (word32)input[idx];
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	68f9      	ldr	r1, [r7, #12]
 800e524:	6a3a      	ldr	r2, [r7, #32]
 800e526:	440a      	add	r2, r1
 800e528:	7812      	ldrb	r2, [r2, #0]
 800e52a:	441a      	add	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	601a      	str	r2, [r3, #0]
        idx++;
 800e530:	6a3b      	ldr	r3, [r7, #32]
 800e532:	3301      	adds	r3, #1
 800e534:	623b      	str	r3, [r7, #32]
    while (length--) {
 800e536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e538:	1e5a      	subs	r2, r3, #1
 800e53a:	633a      	str	r2, [r7, #48]	; 0x30
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1ee      	bne.n	800e51e <GetOID+0x30>
        *oid = found_collision;
    }
#endif /* HAVE_PQC */

    /* Return the index after the OID data. */
    *inOutIdx = idx;
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	6a3a      	ldr	r2, [r7, #32]
 800e544:	601a      	str	r2, [r3, #0]

#ifndef NO_VERIFY_OID
    /* 'Ignore' type means we don't care which OID it is. */
    if (oidType != oidIgnoreType) {
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b15      	cmp	r3, #21
 800e54a:	d01e      	beq.n	800e58a <GetOID+0x9c>
        /* Get the OID data for the id-type. */
        checkOid = OidFromId(*oid, oidType, &checkOidSz);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f107 0210 	add.w	r2, r7, #16
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fcd4 	bl	800df04 <OidFromId>
 800e55c:	61f8      	str	r0, [r7, #28]
        /* TODO: Want to fail when checkOid is NULL.
         * Can't as too many situations where unknown OID is to be
         * supported. Extra parameter for must not be NULL?
         */
        /* Check that the OID data matches what we found for the OID id. */
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	2b00      	cmp	r3, #0
 800e562:	d112      	bne.n	800e58a <GetOID+0x9c>
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00f      	beq.n	800e58a <GetOID+0x9c>
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	697a      	ldr	r2, [r7, #20]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d108      	bne.n	800e584 <GetOID+0x96>
                (XMEMCMP(actualOid, checkOid, checkOidSz) != 0))) {
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	461a      	mov	r2, r3
 800e576:	69f9      	ldr	r1, [r7, #28]
 800e578:	69b8      	ldr	r0, [r7, #24]
 800e57a:	f012 fea3 	bl	80212c4 <memcmp>
 800e57e:	4603      	mov	r3, r0
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 800e580:	2b00      	cmp	r3, #0
 800e582:	d002      	beq.n	800e58a <GetOID+0x9c>
            WOLFSSL_MSG("OID Check Failed");
            WOLFSSL_ERROR_VERBOSE(ASN_UNKNOWN_OID_E);
            ret = ASN_UNKNOWN_OID_E;
 800e584:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800e588:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif /* NO_VERIFY_OID */

    return ret;
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3728      	adds	r7, #40	; 0x28
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <GetObjectId>:
 * @return  ASN_PARSE_E when encoding is invalid.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 */
int GetObjectId(const byte* input, word32* inOutIdx, word32* oid,
                                  word32 oidType, word32 maxIdx)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b088      	sub	sp, #32
 800e598:	af02      	add	r7, sp, #8
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int ret, length;

    WOLFSSL_ENTER("GetObjectId()");

    ret = GetASNObjectId(input, inOutIdx, &length, maxIdx);
 800e5a2:	f107 0210 	add.w	r2, r7, #16
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	68b9      	ldr	r1, [r7, #8]
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7ff ff5e 	bl	800e46c <GetASNObjectId>
 800e5b0:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d001      	beq.n	800e5bc <GetObjectId+0x28>
        return ret;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	e008      	b.n	800e5ce <GetObjectId+0x3a>

    return GetOID(input, inOutIdx, oid, oidType, length);
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	68b9      	ldr	r1, [r7, #8]
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f7ff ff91 	bl	800e4ee <GetOID>
 800e5cc:	4603      	mov	r3, r0
        *oid = dataASN[OBJECTIDASN_IDX_OID].data.oid.sum;
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3718      	adds	r7, #24
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <SkipObjectId>:

#ifndef WOLFSSL_ASN_TEMPLATE
static int SkipObjectId(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b088      	sub	sp, #32
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	60b9      	str	r1, [r7, #8]
 800e5e0:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	61bb      	str	r3, [r7, #24]
    int    length;
    int ret;

    ret = GetASNObjectId(input, &idx, &length, maxIdx);
 800e5e8:	f107 0214 	add.w	r2, r7, #20
 800e5ec:	f107 0118 	add.w	r1, r7, #24
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f7ff ff3a 	bl	800e46c <GetASNObjectId>
 800e5f8:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <SkipObjectId+0x2e>
        return ret;
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	e007      	b.n	800e614 <SkipObjectId+0x3e>

    idx += length;
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	697a      	ldr	r2, [r7, #20]
 800e608:	4413      	add	r3, r2
 800e60a:	61bb      	str	r3, [r7, #24]
    *inOutIdx = idx;
 800e60c:	69ba      	ldr	r2, [r7, #24]
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	601a      	str	r2, [r3, #0]

    return 0;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3720      	adds	r7, #32
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <GetAlgoId>:
 * @return  ASN_PARSE_E when encoding is invalid.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 */
int GetAlgoId(const byte* input, word32* inOutIdx, word32* oid,
                     word32 oidType, word32 maxIdx)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b08c      	sub	sp, #48	; 0x30
 800e620:	af02      	add	r7, sp, #8
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int    length;
    word32 idx = *inOutIdx;
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	61fb      	str	r3, [r7, #28]
    int    ret;
    *oid = 0;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	601a      	str	r2, [r3, #0]

    WOLFSSL_ENTER("GetAlgoId");

    if (GetSequence(input, &idx, &length, maxIdx) < 0)
 800e636:	f107 0220 	add.w	r2, r7, #32
 800e63a:	f107 011c 	add.w	r1, r7, #28
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7ff f8ef 	bl	800d824 <GetSequence>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	da02      	bge.n	800e652 <GetAlgoId+0x36>
        return ASN_PARSE_E;
 800e64c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e650:	e033      	b.n	800e6ba <GetAlgoId+0x9e>

    if (GetObjectId(input, &idx, oid, oidType, maxIdx) < 0)
 800e652:	f107 011c 	add.w	r1, r7, #28
 800e656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f7ff ff98 	bl	800e594 <GetObjectId>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	da02      	bge.n	800e670 <GetAlgoId+0x54>
        return ASN_OBJECT_ID_E;
 800e66a:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800e66e:	e024      	b.n	800e6ba <GetAlgoId+0x9e>

    /* could have NULL tag and 0 terminator, but may not */
    if (idx < maxIdx) {
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e674:	429a      	cmp	r2, r3
 800e676:	d91c      	bls.n	800e6b2 <GetAlgoId+0x96>
        word32 localIdx = idx; /*use localIdx to not advance when checking tag*/
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	61bb      	str	r3, [r7, #24]
        byte   tag;

        if (GetASNTag(input, &localIdx, &tag, maxIdx) == 0) {
 800e67c:	f107 0217 	add.w	r2, r7, #23
 800e680:	f107 0118 	add.w	r1, r7, #24
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7fe fffd 	bl	800d686 <GetASNTag>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10f      	bne.n	800e6b2 <GetAlgoId+0x96>
            if (tag == ASN_TAG_NULL) {
 800e692:	7dfb      	ldrb	r3, [r7, #23]
 800e694:	2b05      	cmp	r3, #5
 800e696:	d10c      	bne.n	800e6b2 <GetAlgoId+0x96>
                ret = GetASNNull(input, &idx, maxIdx);
 800e698:	f107 031c 	add.w	r3, r7, #28
 800e69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e69e:	4619      	mov	r1, r3
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f7ff f8fd 	bl	800d8a0 <GetASNNull>
 800e6a6:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0)
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d001      	beq.n	800e6b2 <GetAlgoId+0x96>
                    return ret;
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	e003      	b.n	800e6ba <GetAlgoId+0x9e>
            }
        }
    }

    *inOutIdx = idx;
 800e6b2:	69fa      	ldr	r2, [r7, #28]
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	601a      	str	r2, [r3, #0]

    return 0;
 800e6b8:	2300      	movs	r3, #0
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3728      	adds	r7, #40	; 0x28
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <RsaPssHashOidToType>:
 * @param  [out]  type  Hash type.
 * @return  0 on success.
 * @return  ASN_PARSE_E when hash OID not supported for RSA PSS.
 */
static int RsaPssHashOidToType(word32 oid, enum wc_HashType* type)
{
 800e6c2:	b480      	push	{r7}
 800e6c4:	b085      	sub	sp, #20
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60fb      	str	r3, [r7, #12]

    switch (oid) {
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800e6d6:	d103      	bne.n	800e6e0 <RsaPssHashOidToType+0x1e>
        *type = WC_HASH_TYPE_SHA224;
        break;
#endif
#ifndef NO_SHA256
    case SHA256h:
        *type = WC_HASH_TYPE_SHA256;
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	2206      	movs	r2, #6
 800e6dc:	701a      	strb	r2, [r3, #0]
        break;
 800e6de:	e003      	b.n	800e6e8 <RsaPssHashOidToType+0x26>
        break;
    /* TODO: SHA512_224h */
    /* TODO: SHA512_256h */
#endif
    default:
        ret = ASN_PARSE_E;
 800e6e0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e6e4:	60fb      	str	r3, [r7, #12]
        break;
 800e6e6:	bf00      	nop
    }

    return ret;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr

0800e6f6 <RsaPssHashOidToMgf1>:
 * @param  [out]  mgf   MGF type.
 * @return  0 on success.
 * @return  ASN_PARSE_E when hash OID not supported for RSA PSS.
 */
static int RsaPssHashOidToMgf1(word32 oid, int* mgf)
{
 800e6f6:	b480      	push	{r7}
 800e6f8:	b085      	sub	sp, #20
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	60fb      	str	r3, [r7, #12]

    switch (oid) {
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800e70a:	d103      	bne.n	800e714 <RsaPssHashOidToMgf1+0x1e>
        *mgf = WC_MGF1SHA224;
        break;
#endif
#ifndef NO_SHA256
    case SHA256h:
        *mgf = WC_MGF1SHA256;
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2201      	movs	r2, #1
 800e710:	601a      	str	r2, [r3, #0]
        break;
 800e712:	e003      	b.n	800e71c <RsaPssHashOidToMgf1+0x26>
        break;
    /* TODO: SHA512_224h */
    /* TODO: SHA512_256h */
#endif
    default:
        ret = ASN_PARSE_E;
 800e714:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e718:	60fb      	str	r3, [r7, #12]
        break;
 800e71a:	bf00      	nop
    }

    return ret;
 800e71c:	68fb      	ldr	r3, [r7, #12]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3714      	adds	r7, #20
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <RsaPssHashOidToSigOid>:
 * @param  [out]  sigOid  Signature OID to pass wto HashForSignature().
 * @return  0 on success.
 * @return  ASN_PARSE_E when hash OID not supported for RSA PSS.
 */
static int RsaPssHashOidToSigOid(word32 oid, word32* sigOid)
{
 800e72a:	b480      	push	{r7}
 800e72c:	b085      	sub	sp, #20
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	60fb      	str	r3, [r7, #12]

    switch (oid) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b06      	cmp	r3, #6
 800e73c:	d104      	bne.n	800e748 <RsaPssHashOidToSigOid+0x1e>
        *sigOid = CTC_SHA224wRSA;
        break;
#endif
#ifndef NO_SHA256
    case WC_HASH_TYPE_SHA256:
        *sigOid = CTC_SHA256wRSA;
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	f240 228f 	movw	r2, #655	; 0x28f
 800e744:	601a      	str	r2, [r3, #0]
        break;
 800e746:	e003      	b.n	800e750 <RsaPssHashOidToSigOid+0x26>
#endif
    /* TODO: SHA512_224h */
    /* TODO: SHA512_256h */
    /* Not supported by HashForSignature() */
    default:
        ret = ASN_PARSE_E;
 800e748:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e74c:	60fb      	str	r3, [r7, #12]
        break;
 800e74e:	bf00      	nop
    }

    return ret;
 800e750:	68fb      	ldr	r3, [r7, #12]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <DecodeRsaPssParams>:
 * @return  ASN_PARSE_E when the decoding fails.
 * @return  0 on success.
 */
static int DecodeRsaPssParams(const byte* params, word32 sz,
    enum wc_HashType* hash, int* mgf, int* saltLen)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b08c      	sub	sp, #48	; 0x30
 800e762:	af02      	add	r7, sp, #8
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	60b9      	str	r1, [r7, #8]
 800e768:	607a      	str	r2, [r7, #4]
 800e76a:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int ret = 0;
 800e76c:	2300      	movs	r3, #0
 800e76e:	627b      	str	r3, [r7, #36]	; 0x24
    word32 idx = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	623b      	str	r3, [r7, #32]
    int len = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	61fb      	str	r3, [r7, #28]
    word32 oid = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	61bb      	str	r3, [r7, #24]
    byte tag;
    int length;

    if (GetSequence_ex(params, &idx, &len, sz, 1) < 0) {
 800e77c:	f107 021c 	add.w	r2, r7, #28
 800e780:	f107 0120 	add.w	r1, r7, #32
 800e784:	2301      	movs	r3, #1
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f7ff f85e 	bl	800d84c <GetSequence_ex>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	da02      	bge.n	800e79c <DecodeRsaPssParams+0x3e>
        ret = ASN_PARSE_E;
 800e796:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e79a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (ret == 0) {
 800e79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d13d      	bne.n	800e81e <DecodeRsaPssParams+0xc0>
        if ((idx < sz) && (params[idx] == ASN_TAG_RSA_PSS_HASH)) {
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d936      	bls.n	800e818 <DecodeRsaPssParams+0xba>
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2ba0      	cmp	r3, #160	; 0xa0
 800e7b4:	d130      	bne.n	800e818 <DecodeRsaPssParams+0xba>
            /* Hash algorithm to use on message. */
            if (GetHeader(params, &tag, &idx, &length, sz, 0) < 0) {
 800e7b6:	f107 0010 	add.w	r0, r7, #16
 800e7ba:	f107 0220 	add.w	r2, r7, #32
 800e7be:	f107 0117 	add.w	r1, r7, #23
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	9301      	str	r3, [sp, #4]
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f7fe fff4 	bl	800d7ba <GetHeader>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	da02      	bge.n	800e7de <DecodeRsaPssParams+0x80>
                ret = ASN_PARSE_E;
 800e7d8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e7dc:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (ret == 0) {
 800e7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10f      	bne.n	800e804 <DecodeRsaPssParams+0xa6>
                if (GetAlgoId(params, &idx, &oid, oidHashType, sz) < 0) {
 800e7e4:	f107 0218 	add.w	r2, r7, #24
 800e7e8:	f107 0120 	add.w	r1, r7, #32
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff ff12 	bl	800e61c <GetAlgoId>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	da02      	bge.n	800e804 <DecodeRsaPssParams+0xa6>
                    ret = ASN_PARSE_E;
 800e7fe:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e802:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            if (ret == 0) {
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	2b00      	cmp	r3, #0
 800e808:	d109      	bne.n	800e81e <DecodeRsaPssParams+0xc0>
                ret = RsaPssHashOidToType(oid, hash);
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	6879      	ldr	r1, [r7, #4]
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff ff57 	bl	800e6c2 <RsaPssHashOidToType>
 800e814:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret == 0) {
 800e816:	e002      	b.n	800e81e <DecodeRsaPssParams+0xc0>
            }
        }
        else {
            /* Default hash algorithm. */
            *hash = WC_HASH_TYPE_SHA;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2204      	movs	r2, #4
 800e81c:	701a      	strb	r2, [r3, #0]
        }
    }
    if (ret == 0) {
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	2b00      	cmp	r3, #0
 800e822:	d157      	bne.n	800e8d4 <DecodeRsaPssParams+0x176>
        if ((idx < sz) && (params[idx] == ASN_TAG_RSA_PSS_MGF)) {
 800e824:	6a3b      	ldr	r3, [r7, #32]
 800e826:	68ba      	ldr	r2, [r7, #8]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d94e      	bls.n	800e8ca <DecodeRsaPssParams+0x16c>
 800e82c:	6a3b      	ldr	r3, [r7, #32]
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	4413      	add	r3, r2
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	2ba1      	cmp	r3, #161	; 0xa1
 800e836:	d148      	bne.n	800e8ca <DecodeRsaPssParams+0x16c>
            /* MGF and hash algorithm to use with padding. */
            if (GetHeader(params, &tag, &idx, &length, sz, 0) < 0) {
 800e838:	f107 0010 	add.w	r0, r7, #16
 800e83c:	f107 0220 	add.w	r2, r7, #32
 800e840:	f107 0117 	add.w	r1, r7, #23
 800e844:	2300      	movs	r3, #0
 800e846:	9301      	str	r3, [sp, #4]
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	4603      	mov	r3, r0
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f7fe ffb3 	bl	800d7ba <GetHeader>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	da02      	bge.n	800e860 <DecodeRsaPssParams+0x102>
                ret = ASN_PARSE_E;
 800e85a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (ret == 0) {
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10f      	bne.n	800e886 <DecodeRsaPssParams+0x128>
                if (GetAlgoId(params, &idx, &oid, oidIgnoreType, sz) < 0) {
 800e866:	f107 0218 	add.w	r2, r7, #24
 800e86a:	f107 0120 	add.w	r1, r7, #32
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	2315      	movs	r3, #21
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f7ff fed1 	bl	800e61c <GetAlgoId>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	da02      	bge.n	800e886 <DecodeRsaPssParams+0x128>
                    ret = ASN_PARSE_E;
 800e880:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e884:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            if ((ret == 0) && (oid != MGF1_OID)) {
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d106      	bne.n	800e89a <DecodeRsaPssParams+0x13c>
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 800e892:	d002      	beq.n	800e89a <DecodeRsaPssParams+0x13c>
                ret = ASN_PARSE_E;
 800e894:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e898:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (ret == 0) {
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d118      	bne.n	800e8d2 <DecodeRsaPssParams+0x174>
                ret = GetAlgoId(params, &idx, &oid, oidHashType, sz);
 800e8a0:	f107 0218 	add.w	r2, r7, #24
 800e8a4:	f107 0120 	add.w	r1, r7, #32
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	f7ff feb4 	bl	800e61c <GetAlgoId>
 800e8b4:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret == 0) {
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10a      	bne.n	800e8d2 <DecodeRsaPssParams+0x174>
                    ret = RsaPssHashOidToMgf1(oid, mgf);
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff ff18 	bl	800e6f6 <RsaPssHashOidToMgf1>
 800e8c6:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret == 0) {
 800e8c8:	e003      	b.n	800e8d2 <DecodeRsaPssParams+0x174>
                }
            }
        }
        else {
            /* Default MGF/Hash algorithm. */
            *mgf = WC_MGF1SHA1;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	221a      	movs	r2, #26
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	e000      	b.n	800e8d4 <DecodeRsaPssParams+0x176>
            if (ret == 0) {
 800e8d2:	bf00      	nop
        }
    }
    if (ret == 0) {
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d136      	bne.n	800e948 <DecodeRsaPssParams+0x1ea>
        if ((idx < sz) && (params[idx] == ASN_TAG_RSA_PSS_SALTLEN)) {
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d92d      	bls.n	800e93e <DecodeRsaPssParams+0x1e0>
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	2ba2      	cmp	r3, #162	; 0xa2
 800e8ec:	d127      	bne.n	800e93e <DecodeRsaPssParams+0x1e0>
            /* Salt length to use with padding. */
            if (GetHeader(params, &tag, &idx, &length, sz, 0) < 0) {
 800e8ee:	f107 0010 	add.w	r0, r7, #16
 800e8f2:	f107 0220 	add.w	r2, r7, #32
 800e8f6:	f107 0117 	add.w	r1, r7, #23
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	4603      	mov	r3, r0
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f7fe ff58 	bl	800d7ba <GetHeader>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	da02      	bge.n	800e916 <DecodeRsaPssParams+0x1b8>
                ret = ASN_PARSE_E;
 800e910:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e914:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (ret == 0) {
 800e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d114      	bne.n	800e946 <DecodeRsaPssParams+0x1e8>
                ret = GetInteger16Bit(params, &idx, sz);
 800e91c:	f107 0320 	add.w	r3, r7, #32
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	4619      	mov	r1, r3
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f7ff f8f4 	bl	800db12 <GetInteger16Bit>
 800e92a:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret >= 0) {
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	2b00      	cmp	r3, #0
 800e930:	db09      	blt.n	800e946 <DecodeRsaPssParams+0x1e8>
                    *saltLen = ret;
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e936:	601a      	str	r2, [r3, #0]
                    ret = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	627b      	str	r3, [r7, #36]	; 0x24
            if (ret == 0) {
 800e93c:	e003      	b.n	800e946 <DecodeRsaPssParams+0x1e8>
                }
            }
        }
        else {
            /* Default salt length. */
            *saltLen = 20;
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	2214      	movs	r2, #20
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	e000      	b.n	800e948 <DecodeRsaPssParams+0x1ea>
            if (ret == 0) {
 800e946:	bf00      	nop
        }
    }
    if (ret == 0) {
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d12d      	bne.n	800e9aa <DecodeRsaPssParams+0x24c>
        if ((idx < sz) && (params[idx] == ASN_TAG_RSA_PSS_TRAILER)) {
 800e94e:	6a3b      	ldr	r3, [r7, #32]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	429a      	cmp	r2, r3
 800e954:	d929      	bls.n	800e9aa <DecodeRsaPssParams+0x24c>
 800e956:	6a3b      	ldr	r3, [r7, #32]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	4413      	add	r3, r2
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2ba3      	cmp	r3, #163	; 0xa3
 800e960:	d123      	bne.n	800e9aa <DecodeRsaPssParams+0x24c>
            /* Unused - trialerField. */
            if (GetHeader(params, &tag, &idx, &length, sz, 0) < 0) {
 800e962:	f107 0010 	add.w	r0, r7, #16
 800e966:	f107 0220 	add.w	r2, r7, #32
 800e96a:	f107 0117 	add.w	r1, r7, #23
 800e96e:	2300      	movs	r3, #0
 800e970:	9301      	str	r3, [sp, #4]
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	9300      	str	r3, [sp, #0]
 800e976:	4603      	mov	r3, r0
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f7fe ff1e 	bl	800d7ba <GetHeader>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	da02      	bge.n	800e98a <DecodeRsaPssParams+0x22c>
                ret = ASN_PARSE_E;
 800e984:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (ret == 0) {
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10c      	bne.n	800e9aa <DecodeRsaPssParams+0x24c>
                ret = GetInteger16Bit(params, &idx, sz);
 800e990:	f107 0320 	add.w	r3, r7, #32
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	4619      	mov	r1, r3
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7ff f8ba 	bl	800db12 <GetInteger16Bit>
 800e99e:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret > 0) {
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	dd01      	ble.n	800e9aa <DecodeRsaPssParams+0x24c>
                    ret = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }
    }
    if ((ret == 0) && (idx != sz)) {
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d106      	bne.n	800e9be <DecodeRsaPssParams+0x260>
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	68ba      	ldr	r2, [r7, #8]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d002      	beq.n	800e9be <DecodeRsaPssParams+0x260>
        ret = ASN_PARSE_E;
 800e9b8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return ret;
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3728      	adds	r7, #40	; 0x28
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <wc_RsaPrivateKeyDecode>:
 * @return  MP_INIT_E when the unable to initialize an mp_int.
 * @return  ASN_GETINT_E when the unable to convert data to an mp_int.
 */
int wc_RsaPrivateKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
                        word32 inSz)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int version, length;
    word32 algId = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	617b      	str	r3, [r7, #20]

    if (inOutIdx == NULL || input == NULL || key == NULL) {
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d005      	beq.n	800e9ec <wc_RsaPrivateKeyDecode+0x24>
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d002      	beq.n	800e9ec <wc_RsaPrivateKeyDecode+0x24>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d102      	bne.n	800e9f2 <wc_RsaPrivateKeyDecode+0x2a>
        return BAD_FUNC_ARG;
 800e9ec:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800e9f0:	e084      	b.n	800eafc <wc_RsaPrivateKeyDecode+0x134>
    }

    /* if has pkcs8 header skip it */
    if (ToTraditionalInline_ex(input, inOutIdx, inSz, &algId) < 0) {
 800e9f2:	f107 0314 	add.w	r3, r7, #20
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	68b9      	ldr	r1, [r7, #8]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 f882 	bl	800eb04 <ToTraditionalInline_ex>
        /* ignore error, did not have pkcs8 header */
    }

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800ea00:	f107 0218 	add.w	r2, r7, #24
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	68b9      	ldr	r1, [r7, #8]
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f7fe ff0b 	bl	800d824 <GetSequence>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da02      	bge.n	800ea1a <wc_RsaPrivateKeyDecode+0x52>
        return ASN_PARSE_E;
 800ea14:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ea18:	e070      	b.n	800eafc <wc_RsaPrivateKeyDecode+0x134>

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 800ea1a:	f107 021c 	add.w	r2, r7, #28
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	68b9      	ldr	r1, [r7, #8]
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7ff f8e4 	bl	800dbf0 <GetMyVersion>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	da02      	bge.n	800ea34 <wc_RsaPrivateKeyDecode+0x6c>
        return ASN_PARSE_E;
 800ea2e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ea32:	e063      	b.n	800eafc <wc_RsaPrivateKeyDecode+0x134>

    key->type = RSA_PRIVATE;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
    mp_memzero_add("Decode RSA key dQ", &key->dQ);
    mp_memzero_add("Decode RSA key u", &key->u);
#endif
#endif

    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	68f9      	ldr	r1, [r7, #12]
 800ea4a:	f7ff f954 	bl	800dcf6 <GetInt>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	db2b      	blt.n	800eaac <wc_RsaPrivateKeyDecode+0xe4>
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	68f9      	ldr	r1, [r7, #12]
 800ea60:	f7ff f949 	bl	800dcf6 <GetInt>
 800ea64:	4603      	mov	r3, r0
    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	db20      	blt.n	800eaac <wc_RsaPrivateKeyDecode+0xe4>
#ifndef WOLFSSL_RSA_PUBLIC_ONLY
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	68f9      	ldr	r1, [r7, #12]
 800ea76:	f7ff f93e 	bl	800dcf6 <GetInt>
 800ea7a:	4603      	mov	r3, r0
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	db15      	blt.n	800eaac <wc_RsaPrivateKeyDecode+0xe4>
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f203 6084 	addw	r0, r3, #1668	; 0x684
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	68f9      	ldr	r1, [r7, #12]
 800ea8c:	f7ff f933 	bl	800dcf6 <GetInt>
 800ea90:	4603      	mov	r3, r0
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	db0a      	blt.n	800eaac <wc_RsaPrivateKeyDecode+0xe4>
        GetInt(&key->q,  input, inOutIdx, inSz) < 0
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f503 600b 	add.w	r0, r3, #2224	; 0x8b0
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68ba      	ldr	r2, [r7, #8]
 800eaa0:	68f9      	ldr	r1, [r7, #12]
 800eaa2:	f7ff f928 	bl	800dcf6 <GetInt>
 800eaa6:	4603      	mov	r3, r0
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	da02      	bge.n	800eab2 <wc_RsaPrivateKeyDecode+0xea>
        SkipInt(input, inOutIdx, inSz) < 0 ||
        SkipInt(input, inOutIdx, inSz) < 0 ||
        SkipInt(input, inOutIdx, inSz) < 0
#endif
       ) {
            return ASN_RSA_KEY_E;
 800eaac:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800eab0:	e024      	b.n	800eafc <wc_RsaPrivateKeyDecode+0x134>
       }
#if (defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || !defined(RSA_LOW_MEM)) \
    && !defined(WOLFSSL_RSA_PUBLIC_ONLY)
    if (GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f603 20dc 	addw	r0, r3, #2780	; 0xadc
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	68f9      	ldr	r1, [r7, #12]
 800eabe:	f7ff f91a 	bl	800dcf6 <GetInt>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	db15      	blt.n	800eaf4 <wc_RsaPrivateKeyDecode+0x12c>
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f603 5008 	addw	r0, r3, #3336	; 0xd08
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	68ba      	ldr	r2, [r7, #8]
 800ead2:	68f9      	ldr	r1, [r7, #12]
 800ead4:	f7ff f90f 	bl	800dcf6 <GetInt>
 800ead8:	4603      	mov	r3, r0
    if (GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
 800eada:	2b00      	cmp	r3, #0
 800eadc:	db0a      	blt.n	800eaf4 <wc_RsaPrivateKeyDecode+0x12c>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f603 7034 	addw	r0, r3, #3892	; 0xf34
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	68f9      	ldr	r1, [r7, #12]
 800eaea:	f7ff f904 	bl	800dcf6 <GetInt>
 800eaee:	4603      	mov	r3, r0
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	da02      	bge.n	800eafa <wc_RsaPrivateKeyDecode+0x132>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
 800eaf4:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800eaf8:	e000      	b.n	800eafc <wc_RsaPrivateKeyDecode+0x134>
    if (wc_InitRsaHw(key) != 0) {
        return BAD_STATE_E;
    }
#endif

    return 0;
 800eafa:	2300      	movs	r3, #0
    }

    FREE_ASNGETDATA(dataASN, key->heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3720      	adds	r7, #32
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <ToTraditionalInline_ex>:
 * @return  ASN_EXPECT_0_E when the INTEGER has the MSB set or NULL has a
 *          non-zero length.
 */
int ToTraditionalInline_ex(const byte* input, word32* inOutIdx, word32 sz,
                           word32* algId)
{
 800eb04:	b590      	push	{r4, r7, lr}
 800eb06:	b091      	sub	sp, #68	; 0x44
 800eb08:	af02      	add	r7, sp, #8
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	603b      	str	r3, [r7, #0]
    word32 idx;
    int    version, length;
    int    ret;
    byte   tag;

    if (input == NULL || inOutIdx == NULL)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d002      	beq.n	800eb1e <ToTraditionalInline_ex+0x1a>
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d102      	bne.n	800eb24 <ToTraditionalInline_ex+0x20>
        return BAD_FUNC_ARG;
 800eb1e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800eb22:	e0a5      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>

    idx = *inOutIdx;
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (GetSequence(input, &idx, &length, sz) < 0)
 800eb2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800eb2e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f7fe fe75 	bl	800d824 <GetSequence>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	da02      	bge.n	800eb46 <ToTraditionalInline_ex+0x42>
        return ASN_PARSE_E;
 800eb40:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800eb44:	e094      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>

    if (GetMyVersion(input, &idx, &version, sz) < 0)
 800eb46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f7ff f84d 	bl	800dbf0 <GetMyVersion>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	da02      	bge.n	800eb62 <ToTraditionalInline_ex+0x5e>
        return ASN_PARSE_E;
 800eb5c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800eb60:	e086      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>

    if (GetAlgoId(input, &idx, algId, oidKeyType, sz) < 0)
 800eb62:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	2302      	movs	r3, #2
 800eb6c:	683a      	ldr	r2, [r7, #0]
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f7ff fd54 	bl	800e61c <GetAlgoId>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	da02      	bge.n	800eb80 <ToTraditionalInline_ex+0x7c>
        return ASN_PARSE_E;
 800eb7a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800eb7e:	e077      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>

    if (GetASNTag(input, &idx, &tag, sz) < 0)
 800eb80:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800eb84:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f7fe fd7b 	bl	800d686 <GetASNTag>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	da02      	bge.n	800eb9c <ToTraditionalInline_ex+0x98>
        return ASN_PARSE_E;
 800eb96:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800eb9a:	e069      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>
    idx = idx - 1; /* reset idx after finding tag */
 800eb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(WC_RSA_PSS) && !defined(NO_RSA)
    if (*algId == RSAPSSk && tag == (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f240 228e 	movw	r2, #654	; 0x28e
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d138      	bne.n	800ec20 <ToTraditionalInline_ex+0x11c>
 800ebae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebb2:	2b30      	cmp	r3, #48	; 0x30
 800ebb4:	d134      	bne.n	800ec20 <ToTraditionalInline_ex+0x11c>
        word32 seqIdx = idx;
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	637b      	str	r3, [r7, #52]	; 0x34
        int seqLen;
        /* Not set when -1. */
        enum wc_HashType hash = WC_HASH_TYPE_NONE;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	76fb      	strb	r3, [r7, #27]
        int mgf = -1;
 800ebbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc2:	617b      	str	r3, [r7, #20]
        int saltLen = 0;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	613b      	str	r3, [r7, #16]

        if (GetSequence(input, &idx, &seqLen, sz) < 0) {
 800ebc8:	f107 021c 	add.w	r2, r7, #28
 800ebcc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f7fe fe26 	bl	800d824 <GetSequence>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	da02      	bge.n	800ebe4 <ToTraditionalInline_ex+0xe0>
            return ASN_PARSE_E;
 800ebde:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ebe2:	e045      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>
        }
        /* Get the private key parameters. */
        ret = DecodeRsaPssParams(input + seqIdx,
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe8:	18d0      	adds	r0, r2, r3
            seqLen + idx - seqIdx, &hash, &mgf, &saltLen);
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	461a      	mov	r2, r3
 800ebee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf0:	441a      	add	r2, r3
        ret = DecodeRsaPssParams(input + seqIdx,
 800ebf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf4:	1ad1      	subs	r1, r2, r3
 800ebf6:	f107 0414 	add.w	r4, r7, #20
 800ebfa:	f107 021b 	add.w	r2, r7, #27
 800ebfe:	f107 0310 	add.w	r3, r7, #16
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	4623      	mov	r3, r4
 800ec06:	f7ff fdaa 	bl	800e75e <DecodeRsaPssParams>
 800ec0a:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != 0) {
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d002      	beq.n	800ec18 <ToTraditionalInline_ex+0x114>
            return ASN_PARSE_E;
 800ec12:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ec16:	e02b      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>
        }
        /* TODO: store parameters so that usage can be checked. */
        idx += seqLen;
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	69fa      	ldr	r2, [r7, #28]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
#endif /* WC_RSA_PSS && !NO_RSA */

    if (tag == ASN_OBJECT_ID) {
 800ec20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec24:	2b06      	cmp	r3, #6
 800ec26:	d10c      	bne.n	800ec42 <ToTraditionalInline_ex+0x13e>
        if (SkipObjectId(input, &idx, sz) < 0)
 800ec28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f7ff fcd0 	bl	800e5d6 <SkipObjectId>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	da02      	bge.n	800ec42 <ToTraditionalInline_ex+0x13e>
            return ASN_PARSE_E;
 800ec3c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ec40:	e016      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>
    }

    ret = GetOctetString(input, &idx, &length, sz);
 800ec42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ec46:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f7fe feb4 	bl	800d9ba <GetOctetString>
 800ec52:	6338      	str	r0, [r7, #48]	; 0x30
    if (ret < 0) {
 800ec54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	da06      	bge.n	800ec68 <ToTraditionalInline_ex+0x164>
        if (ret == BUFFER_E)
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	f113 0f84 	cmn.w	r3, #132	; 0x84
 800ec60:	d102      	bne.n	800ec68 <ToTraditionalInline_ex+0x164>
            return ASN_PARSE_E;
 800ec62:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ec66:	e003      	b.n	800ec70 <ToTraditionalInline_ex+0x16c>
        /* Some private keys don't expect an octet string */
        WOLFSSL_MSG("Couldn't find Octet string");
    }

    *inOutIdx = idx;
 800ec68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	601a      	str	r2, [r3, #0]

    return length;
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	373c      	adds	r7, #60	; 0x3c
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd90      	pop	{r4, r7, pc}

0800ec78 <ToTraditional_ex>:

#if defined(HAVE_PKCS8) || defined(HAVE_PKCS12)

/* Remove PKCS8 header, move beginning of traditional to beginning of input */
int ToTraditional_ex(byte* input, word32 sz, word32* algId)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
    word32 inOutIdx = 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	613b      	str	r3, [r7, #16]
    int    length;

    if (input == NULL)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d102      	bne.n	800ec94 <ToTraditional_ex+0x1c>
        return BAD_FUNC_ARG;
 800ec8e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ec92:	e01e      	b.n	800ecd2 <ToTraditional_ex+0x5a>

    length = ToTraditionalInline_ex(input, &inOutIdx, sz, algId);
 800ec94:	f107 0110 	add.w	r1, r7, #16
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7ff ff31 	bl	800eb04 <ToTraditionalInline_ex>
 800eca2:	6178      	str	r0, [r7, #20]
    if (length < 0)
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	da01      	bge.n	800ecae <ToTraditional_ex+0x36>
        return length;
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	e011      	b.n	800ecd2 <ToTraditional_ex+0x5a>

    if (length + inOutIdx > sz)
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d202      	bcs.n	800ecc0 <ToTraditional_ex+0x48>
        return BUFFER_E;
 800ecba:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ecbe:	e008      	b.n	800ecd2 <ToTraditional_ex+0x5a>

    XMEMMOVE(input, input + inOutIdx, length);
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	4619      	mov	r1, r3
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f012 fb18 	bl	8021300 <memmove>

    return length;
 800ecd0:	697b      	ldr	r3, [r7, #20]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <wc_RsaPublicKeyDecode_ex>:
 * @return  ASN_BITSTR_E when the expected BIT_STRING tag is not found.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 */
int wc_RsaPublicKeyDecode_ex(const byte* input, word32* inOutIdx, word32 inSz,
    const byte** n, word32* nSz, const byte** e, word32* eSz)
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b08a      	sub	sp, #40	; 0x28
 800ecde:	af02      	add	r7, sp, #8
 800ece0:	60f8      	str	r0, [r7, #12]
 800ece2:	60b9      	str	r1, [r7, #8]
 800ece4:	607a      	str	r2, [r7, #4]
 800ece6:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int ret = 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	61fb      	str	r3, [r7, #28]
    int length = 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	61bb      	str	r3, [r7, #24]
#if defined(OPENSSL_EXTRA) || defined(RSA_DECODE_EXTRA)
    word32 localIdx;
    byte   tag;
#endif

    if (input == NULL || inOutIdx == NULL)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d002      	beq.n	800ecfc <wc_RsaPublicKeyDecode_ex+0x22>
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d102      	bne.n	800ed02 <wc_RsaPublicKeyDecode_ex+0x28>
        return BAD_FUNC_ARG;
 800ecfc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ed00:	e0db      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800ed02:	f107 0218 	add.w	r2, r7, #24
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68b9      	ldr	r1, [r7, #8]
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f7fe fd8a 	bl	800d824 <GetSequence>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	da02      	bge.n	800ed1c <wc_RsaPublicKeyDecode_ex+0x42>
        return ASN_PARSE_E;
 800ed16:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ed1a:	e0ce      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>

#if defined(OPENSSL_EXTRA) || defined(RSA_DECODE_EXTRA)
    localIdx = *inOutIdx;
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	617b      	str	r3, [r7, #20]
    if (GetASNTag(input, &localIdx, &tag, inSz) < 0)
 800ed22:	f107 0213 	add.w	r2, r7, #19
 800ed26:	f107 0114 	add.w	r1, r7, #20
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f7fe fcaa 	bl	800d686 <GetASNTag>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	da02      	bge.n	800ed3e <wc_RsaPublicKeyDecode_ex+0x64>
        return BUFFER_E;
 800ed38:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ed3c:	e0bd      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>

    if (tag != ASN_INTEGER) {
 800ed3e:	7cfb      	ldrb	r3, [r7, #19]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d071      	beq.n	800ee28 <wc_RsaPublicKeyDecode_ex+0x14e>
        /* not from decoded cert, will have algo id, skip past */
        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800ed44:	f107 0218 	add.w	r2, r7, #24
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68b9      	ldr	r1, [r7, #8]
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7fe fd69 	bl	800d824 <GetSequence>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	da02      	bge.n	800ed5e <wc_RsaPublicKeyDecode_ex+0x84>
            return ASN_PARSE_E;
 800ed58:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ed5c:	e0ad      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>

        if (SkipObjectId(input, inOutIdx, inSz) < 0)
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	68b9      	ldr	r1, [r7, #8]
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f7ff fc37 	bl	800e5d6 <SkipObjectId>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	da02      	bge.n	800ed74 <wc_RsaPublicKeyDecode_ex+0x9a>
            return ASN_PARSE_E;
 800ed6e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ed72:	e0a2      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>

        /* Option NULL ASN.1 tag */
        if (*inOutIdx  >= inSz) {
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d802      	bhi.n	800ed84 <wc_RsaPublicKeyDecode_ex+0xaa>
            return BUFFER_E;
 800ed7e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ed82:	e09a      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>
        }

        localIdx = *inOutIdx;
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	617b      	str	r3, [r7, #20]
        if (GetASNTag(input, &localIdx, &tag, inSz) < 0)
 800ed8a:	f107 0213 	add.w	r2, r7, #19
 800ed8e:	f107 0114 	add.w	r1, r7, #20
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f7fe fc76 	bl	800d686 <GetASNTag>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	da02      	bge.n	800eda6 <wc_RsaPublicKeyDecode_ex+0xcc>
            return ASN_PARSE_E;
 800eda0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800eda4:	e089      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>

        if (tag == ASN_TAG_NULL) {
 800eda6:	7cfb      	ldrb	r3, [r7, #19]
 800eda8:	2b05      	cmp	r3, #5
 800edaa:	d10a      	bne.n	800edc2 <wc_RsaPublicKeyDecode_ex+0xe8>
            ret = GetASNNull(input, inOutIdx, inSz);
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	68b9      	ldr	r1, [r7, #8]
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f7fe fd75 	bl	800d8a0 <GetASNNull>
 800edb6:	61f8      	str	r0, [r7, #28]
            if (ret != 0)
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d017      	beq.n	800edee <wc_RsaPublicKeyDecode_ex+0x114>
                return ret;
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	e07b      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>
        }
    #ifdef WC_RSA_PSS
        /* Skip RSA PSS parameters. */
        else if (tag == (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 800edc2:	7cfb      	ldrb	r3, [r7, #19]
 800edc4:	2b30      	cmp	r3, #48	; 0x30
 800edc6:	d112      	bne.n	800edee <wc_RsaPublicKeyDecode_ex+0x114>
            if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800edc8:	f107 0218 	add.w	r2, r7, #24
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7fe fd27 	bl	800d824 <GetSequence>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	da02      	bge.n	800ede2 <wc_RsaPublicKeyDecode_ex+0x108>
                return ASN_PARSE_E;
 800eddc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ede0:	e06b      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>
            *inOutIdx += length;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	69ba      	ldr	r2, [r7, #24]
 800ede8:	441a      	add	r2, r3
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	601a      	str	r2, [r3, #0]
        }
    #endif

        /* should have bit tag length and seq next */
        ret = CheckBitString(input, inOutIdx, NULL, inSz, 1, NULL);
 800edee:	2300      	movs	r3, #0
 800edf0:	9301      	str	r3, [sp, #4]
 800edf2:	2301      	movs	r3, #1
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	68b9      	ldr	r1, [r7, #8]
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f7ff f803 	bl	800de08 <CheckBitString>
 800ee02:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d001      	beq.n	800ee0e <wc_RsaPublicKeyDecode_ex+0x134>
            return ret;
 800ee0a:	69fb      	ldr	r3, [r7, #28]
 800ee0c:	e055      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>

        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800ee0e:	f107 0218 	add.w	r2, r7, #24
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68b9      	ldr	r1, [r7, #8]
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f7fe fd04 	bl	800d824 <GetSequence>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	da02      	bge.n	800ee28 <wc_RsaPublicKeyDecode_ex+0x14e>
            return ASN_PARSE_E;
 800ee22:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ee26:	e048      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>
    }
#endif /* OPENSSL_EXTRA */

    /* Get modulus */
    ret = GetASNInt(input, inOutIdx, &length, inSz);
 800ee28:	f107 0218 	add.w	r2, r7, #24
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68b9      	ldr	r1, [r7, #8]
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f7fe fdd6 	bl	800d9e2 <GetASNInt>
 800ee36:	61f8      	str	r0, [r7, #28]
    if (ret < 0) {
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	da02      	bge.n	800ee44 <wc_RsaPublicKeyDecode_ex+0x16a>
        return ASN_RSA_KEY_E;
 800ee3e:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800ee42:	e03a      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>
    }
    if (nSz)
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d003      	beq.n	800ee52 <wc_RsaPublicKeyDecode_ex+0x178>
        *nSz = length;
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee50:	601a      	str	r2, [r3, #0]
    if (n)
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d005      	beq.n	800ee64 <wc_RsaPublicKeyDecode_ex+0x18a>
        *n = &input[*inOutIdx];
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	441a      	add	r2, r3
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	601a      	str	r2, [r3, #0]
    *inOutIdx += length;
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	69ba      	ldr	r2, [r7, #24]
 800ee6a:	441a      	add	r2, r3
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	601a      	str	r2, [r3, #0]

    /* Get exponent */
    ret = GetASNInt(input, inOutIdx, &length, inSz);
 800ee70:	f107 0218 	add.w	r2, r7, #24
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	68b9      	ldr	r1, [r7, #8]
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f7fe fdb2 	bl	800d9e2 <GetASNInt>
 800ee7e:	61f8      	str	r0, [r7, #28]
    if (ret < 0) {
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	da02      	bge.n	800ee8c <wc_RsaPublicKeyDecode_ex+0x1b2>
        return ASN_RSA_KEY_E;
 800ee86:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800ee8a:	e016      	b.n	800eeba <wc_RsaPublicKeyDecode_ex+0x1e0>
    }
    if (eSz)
 800ee8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d003      	beq.n	800ee9a <wc_RsaPublicKeyDecode_ex+0x1c0>
        *eSz = length;
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	461a      	mov	r2, r3
 800ee96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee98:	601a      	str	r2, [r3, #0]
    if (e)
 800ee9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d005      	beq.n	800eeac <wc_RsaPublicKeyDecode_ex+0x1d2>
        *e = &input[*inOutIdx];
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	441a      	add	r2, r3
 800eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeaa:	601a      	str	r2, [r3, #0]
    *inOutIdx += length;
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	69ba      	ldr	r2, [r7, #24]
 800eeb2:	441a      	add	r2, r3
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	601a      	str	r2, [r3, #0]

    return ret;
 800eeb8:	69fb      	ldr	r3, [r7, #28]
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3720      	adds	r7, #32
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <wc_RsaPublicKeyDecode>:
 * @return  ASN_BITSTR_E when the expected BIT_STRING tag is not found.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 */
int wc_RsaPublicKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
                       word32 inSz)
{
 800eec2:	b590      	push	{r4, r7, lr}
 800eec4:	b08f      	sub	sp, #60	; 0x3c
 800eec6:	af04      	add	r7, sp, #16
 800eec8:	60f8      	str	r0, [r7, #12]
 800eeca:	60b9      	str	r1, [r7, #8]
 800eecc:	607a      	str	r2, [r7, #4]
 800eece:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int ret;
    const byte *n = NULL, *e = NULL;
 800eed0:	2300      	movs	r3, #0
 800eed2:	623b      	str	r3, [r7, #32]
 800eed4:	2300      	movs	r3, #0
 800eed6:	61fb      	str	r3, [r7, #28]
    word32 nSz = 0, eSz = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	61bb      	str	r3, [r7, #24]
 800eedc:	2300      	movs	r3, #0
 800eede:	617b      	str	r3, [r7, #20]

    if (key == NULL)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d102      	bne.n	800eeec <wc_RsaPublicKeyDecode+0x2a>
        return BAD_FUNC_ARG;
 800eee6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800eeea:	e01f      	b.n	800ef2c <wc_RsaPublicKeyDecode+0x6a>

    ret = wc_RsaPublicKeyDecode_ex(input, inOutIdx, inSz, &n, &nSz, &e, &eSz);
 800eeec:	f107 0220 	add.w	r2, r7, #32
 800eef0:	f107 0314 	add.w	r3, r7, #20
 800eef4:	9302      	str	r3, [sp, #8]
 800eef6:	f107 031c 	add.w	r3, r7, #28
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	f107 0318 	add.w	r3, r7, #24
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	4613      	mov	r3, r2
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	68b9      	ldr	r1, [r7, #8]
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f7ff fee6 	bl	800ecda <wc_RsaPublicKeyDecode_ex>
 800ef0e:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret == 0) {
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d109      	bne.n	800ef2a <wc_RsaPublicKeyDecode+0x68>
        ret = wc_RsaPublicKeyDecodeRaw(n, nSz, e, eSz, key);
 800ef16:	6a38      	ldr	r0, [r7, #32]
 800ef18:	69b9      	ldr	r1, [r7, #24]
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	697c      	ldr	r4, [r7, #20]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	4623      	mov	r3, r4
 800ef24:	f000 f806 	bl	800ef34 <wc_RsaPublicKeyDecodeRaw>
 800ef28:	6278      	str	r0, [r7, #36]	; 0x24
    }

    return ret;
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	372c      	adds	r7, #44	; 0x2c
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd90      	pop	{r4, r7, pc}

0800ef34 <wc_RsaPublicKeyDecodeRaw>:

/* import RSA public key elements (n, e) into RsaKey structure (key) */
int wc_RsaPublicKeyDecodeRaw(const byte* n, word32 nSz, const byte* e,
                             word32 eSz, RsaKey* key)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
 800ef40:	603b      	str	r3, [r7, #0]
    if (n == NULL || e == NULL || key == NULL)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d005      	beq.n	800ef54 <wc_RsaPublicKeyDecodeRaw+0x20>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d002      	beq.n	800ef54 <wc_RsaPublicKeyDecodeRaw+0x20>
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <wc_RsaPublicKeyDecodeRaw+0x26>
        return BAD_FUNC_ARG;
 800ef54:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ef58:	e049      	b.n	800efee <wc_RsaPublicKeyDecodeRaw+0xba>

    key->type = RSA_PUBLIC;
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef60:	461a      	mov	r2, r3
 800ef62:	2300      	movs	r3, #0
 800ef64:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168

    if (mp_init(&key->n) != MP_OKAY)
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f011 f980 	bl	8020270 <mp_init>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <wc_RsaPublicKeyDecodeRaw+0x48>
        return MP_INIT_E;
 800ef76:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ef7a:	e038      	b.n	800efee <wc_RsaPublicKeyDecodeRaw+0xba>

    if (mp_read_unsigned_bin(&key->n, n, nSz) != 0) {
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	68f9      	ldr	r1, [r7, #12]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f011 fb46 	bl	8020614 <mp_read_unsigned_bin>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d006      	beq.n	800ef9c <wc_RsaPublicKeyDecodeRaw+0x68>
        mp_clear(&key->n);
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f011 f9f3 	bl	802037c <mp_clear>
        return ASN_GETINT_E;
 800ef96:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 800ef9a:	e028      	b.n	800efee <wc_RsaPublicKeyDecodeRaw+0xba>
        mp_clear(&key->n);
        return ASN_GETINT_E;
    }
#endif /* HAVE_WOLF_BIGINT */

    if (mp_init(&key->e) != MP_OKAY) {
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800efa2:	4618      	mov	r0, r3
 800efa4:	f011 f964 	bl	8020270 <mp_init>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d006      	beq.n	800efbc <wc_RsaPublicKeyDecodeRaw+0x88>
        mp_clear(&key->n);
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f011 f9e3 	bl	802037c <mp_clear>
        return MP_INIT_E;
 800efb6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800efba:	e018      	b.n	800efee <wc_RsaPublicKeyDecodeRaw+0xba>
    }

    if (mp_read_unsigned_bin(&key->e, e, eSz) != 0) {
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800efc2:	683a      	ldr	r2, [r7, #0]
 800efc4:	6879      	ldr	r1, [r7, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f011 fb24 	bl	8020614 <mp_read_unsigned_bin>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00c      	beq.n	800efec <wc_RsaPublicKeyDecodeRaw+0xb8>
        mp_clear(&key->n);
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f011 f9d1 	bl	802037c <mp_clear>
        mp_clear(&key->e);
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800efe0:	4618      	mov	r0, r3
 800efe2:	f011 f9cb 	bl	802037c <mp_clear>
        return ASN_GETINT_E;
 800efe6:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 800efea:	e000      	b.n	800efee <wc_RsaPublicKeyDecodeRaw+0xba>
    if (wc_InitRsaHw(key) != 0) {
        return BAD_STATE_E;
    }
#endif

    return 0;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <InitDecodedCert>:
 * @param [in]      inSz    Size of DER data in buffer in bytes.
 * @param [in]      heap    Dynamic memory hint.
 */
void InitDecodedCert(DecodedCert* cert,
                     const byte* source, word32 inSz, void* heap)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b084      	sub	sp, #16
 800effa:	af00      	add	r7, sp, #0
 800effc:	60f8      	str	r0, [r7, #12]
 800effe:	60b9      	str	r1, [r7, #8]
 800f000:	607a      	str	r2, [r7, #4]
 800f002:	603b      	str	r3, [r7, #0]
    if (cert != NULL) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d02a      	beq.n	800f060 <InitDecodedCert+0x6a>
        XMEMSET(cert, 0, sizeof(DecodedCert));
 800f00a:	f240 426c 	movw	r2, #1132	; 0x46c
 800f00e:	2100      	movs	r1, #0
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f012 f98f 	bl	8021334 <memset>

        cert->subjectCNEnc    = CTC_UTF8;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	220c      	movs	r2, #12
 800f01a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        cert->issuer[0]       = '\0';
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        cert->subject[0]      = '\0';
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
        cert->source          = source;  /* don't own */
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
        cert->maxIdx          = inSz;    /* can't go over this index */
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        cert->heap            = heap;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	683a      	ldr	r2, [r7, #0]
 800f042:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
        cert->maxPathLen      = WOLFSSL_MAX_PATH_LEN;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	227f      	movs	r2, #127	; 0x7f
 800f04a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
        cert->issuerOUEnc    = CTC_UTF8;
    #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
    #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */

    #ifndef NO_CERTS
        InitSignatureCtx(&cert->sigCtx, heap, INVALID_DEVID);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800f054:	f06f 0201 	mvn.w	r2, #1
 800f058:	6839      	ldr	r1, [r7, #0]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f001 fbd7 	bl	801080e <InitSignatureCtx>
    #endif
    }
}
 800f060:	bf00      	nop
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <FreeAltNames>:
 *
 * @param [in, out] altNames  Alternative names.
 * @param [in]      heap      Dynamic memory hint.
 */
void FreeAltNames(DNS_entry* altNames, void* heap)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
    (void)heap;

    while (altNames) {
 800f072:	e01e      	b.n	800f0b2 <FreeAltNames+0x4a>
        DNS_entry* tmp = altNames->next;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	617b      	str	r3, [r7, #20]

        XFREE(altNames->name, heap, DYNAMIC_TYPE_ALTNAME);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	613b      	str	r3, [r7, #16]
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d002      	beq.n	800f08c <FreeAltNames+0x24>
 800f086:	6938      	ldr	r0, [r7, #16]
 800f088:	f009 fdac 	bl	8018be4 <wolfSSL_Free>
    #if defined(OPENSSL_ALL) || defined(WOLFSSL_IP_ALT_NAME)
        XFREE(altNames->ipString, heap, DYNAMIC_TYPE_ALTNAME);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d002      	beq.n	800f09e <FreeAltNames+0x36>
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f009 fda3 	bl	8018be4 <wolfSSL_Free>
    #endif
        XFREE(altNames,       heap, DYNAMIC_TYPE_ALTNAME);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	60bb      	str	r3, [r7, #8]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <FreeAltNames+0x46>
 800f0a8:	68b8      	ldr	r0, [r7, #8]
 800f0aa:	f009 fd9b 	bl	8018be4 <wolfSSL_Free>
        altNames = tmp;
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	607b      	str	r3, [r7, #4]
    while (altNames) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1dd      	bne.n	800f074 <FreeAltNames+0xc>
    }
}
 800f0b8:	bf00      	nop
 800f0ba:	bf00      	nop
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <AltNameNew>:

/* malloc and initialize a new alt name structure */
DNS_entry* AltNameNew(void* heap)
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b084      	sub	sp, #16
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
    DNS_entry* ret;
    ret = (DNS_entry*)XMALLOC(sizeof(DNS_entry), heap, DYNAMIC_TYPE_ALTNAME);
 800f0ca:	2014      	movs	r0, #20
 800f0cc:	f009 fd6e 	bl	8018bac <wolfSSL_Malloc>
 800f0d0:	60f8      	str	r0, [r7, #12]
    if (ret != NULL) {
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d004      	beq.n	800f0e2 <AltNameNew+0x20>
        XMEMSET(ret, 0, sizeof(DNS_entry));
 800f0d8:	2214      	movs	r2, #20
 800f0da:	2100      	movs	r1, #0
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f012 f929 	bl	8021334 <memset>
    }
    (void)heap;
    return ret;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <FreeNameSubtrees>:
 *
 * @param [in, out] names  Subtree names.
 * @param [in]      heap   Dynamic memory hint.
 */
void FreeNameSubtrees(Base_entry* names, void* heap)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b086      	sub	sp, #24
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
    (void)heap;

    while (names) {
 800f0f6:	e015      	b.n	800f124 <FreeNameSubtrees+0x38>
        Base_entry* tmp = names->next;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	617b      	str	r3, [r7, #20]

        XFREE(names->name, heap, DYNAMIC_TYPE_ALTNAME);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	613b      	str	r3, [r7, #16]
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d002      	beq.n	800f110 <FreeNameSubtrees+0x24>
 800f10a:	6938      	ldr	r0, [r7, #16]
 800f10c:	f009 fd6a 	bl	8018be4 <wolfSSL_Free>
        XFREE(names,       heap, DYNAMIC_TYPE_ALTNAME);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d002      	beq.n	800f120 <FreeNameSubtrees+0x34>
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f009 fd62 	bl	8018be4 <wolfSSL_Free>
        names = tmp;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	607b      	str	r3, [r7, #4]
    while (names) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1e6      	bne.n	800f0f8 <FreeNameSubtrees+0xc>
    }
}
 800f12a:	bf00      	nop
 800f12c:	bf00      	nop
 800f12e:	3718      	adds	r7, #24
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <FreeDecodedCert>:
/* Free the decoded cert object's dynamic data.
 *
 * @param [in, out] cert  Decoded certificate object.
 */
void FreeDecodedCert(DecodedCert* cert)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    if (cert == NULL)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f000 8085 	beq.w	800f24e <FreeDecodedCert+0x11a>
        return;
    if (cert->subjectCNStored == 1) {
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 800f14a:	f003 0301 	and.w	r3, r3, #1
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	d009      	beq.n	800f168 <FreeDecodedCert+0x34>
        XFREE(cert->subjectCN, cert->heap, DYNAMIC_TYPE_SUBJECT_CN);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d002      	beq.n	800f168 <FreeDecodedCert+0x34>
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f009 fd3e 	bl	8018be4 <wolfSSL_Free>
    }
    if (cert->pubKeyStored == 1) {
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d108      	bne.n	800f182 <FreeDecodedCert+0x4e>
        XFREE((void*)cert->publicKey, cert->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	60bb      	str	r3, [r7, #8]
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d002      	beq.n	800f182 <FreeDecodedCert+0x4e>
 800f17c:	68b8      	ldr	r0, [r7, #8]
 800f17e:	f009 fd31 	bl	8018be4 <wolfSSL_Free>
    }
    if (cert->weOwnAltNames && cert->altNames)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 800f188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d00c      	beq.n	800f1ac <FreeDecodedCert+0x78>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f196:	2b00      	cmp	r3, #0
 800f198:	d008      	beq.n	800f1ac <FreeDecodedCert+0x78>
        FreeAltNames(cert->altNames, cert->heap);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	f7ff ff5e 	bl	800f068 <FreeAltNames>
#ifndef IGNORE_NAME_CONSTRAINTS
    if (cert->altEmailNames)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d008      	beq.n	800f1c6 <FreeDecodedCert+0x92>
        FreeAltNames(cert->altEmailNames, cert->heap);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800f1be:	4619      	mov	r1, r3
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	f7ff ff51 	bl	800f068 <FreeAltNames>
    if (cert->altDirNames)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d008      	beq.n	800f1e0 <FreeDecodedCert+0xac>
        FreeAltNames(cert->altDirNames, cert->heap);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800f1d8:	4619      	mov	r1, r3
 800f1da:	4610      	mov	r0, r2
 800f1dc:	f7ff ff44 	bl	800f068 <FreeAltNames>
    if (cert->permittedNames)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d008      	beq.n	800f1fa <FreeDecodedCert+0xc6>
        FreeNameSubtrees(cert->permittedNames, cert->heap);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	4610      	mov	r0, r2
 800f1f6:	f7ff ff79 	bl	800f0ec <FreeNameSubtrees>
    if (cert->excludedNames)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d008      	beq.n	800f214 <FreeDecodedCert+0xe0>
        FreeNameSubtrees(cert->excludedNames, cert->heap);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800f20c:	4619      	mov	r1, r3
 800f20e:	4610      	mov	r0, r2
 800f210:	f7ff ff6c 	bl	800f0ec <FreeNameSubtrees>
    XFREE(cert->deviceType, cert->heap, DYNAMIC_TYPE_X509_EXT);
    XFREE(cert->hwType, cert->heap, DYNAMIC_TYPE_X509_EXT);
    XFREE(cert->hwSerialNum, cert->heap, DYNAMIC_TYPE_X509_EXT);
#endif /* WOLFSSL_SEP */
#ifdef WOLFSSL_X509_NAME_AVAILABLE
    if (cert->issuerName != NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d005      	beq.n	800f22a <FreeDecodedCert+0xf6>
        wolfSSL_X509_NAME_free((WOLFSSL_X509_NAME*)cert->issuerName);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f224:	4618      	mov	r0, r3
 800f226:	f7fb fb2c 	bl	800a882 <wolfSSL_X509_NAME_free>
    if (cert->subjectName != NULL)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800f230:	2b00      	cmp	r3, #0
 800f232:	d005      	beq.n	800f240 <FreeDecodedCert+0x10c>
        wolfSSL_X509_NAME_free((WOLFSSL_X509_NAME*)cert->subjectName);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fb fb21 	bl	800a882 <wolfSSL_X509_NAME_free>
#if defined(WOLFSSL_RENESAS_TSIP_TLS) || defined(WOLFSSL_RENESAS_SCEPROTECT)
    if (cert->sce_tsip_encRsaKeyIdx != NULL)
        XFREE(cert->sce_tsip_encRsaKeyIdx, cert->heap, DYNAMIC_TYPE_RSA);
#endif
#ifndef NO_CERTS
    FreeSignatureCtx(&cert->sigCtx);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800f246:	4618      	mov	r0, r3
 800f248:	f001 faf9 	bl	801083e <FreeSignatureCtx>
 800f24c:	e000      	b.n	800f250 <FreeDecodedCert+0x11c>
        return;
 800f24e:	bf00      	nop
#endif
}
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <GetCertHeader>:
    FreeDecodedCert(cert);
}

#ifndef WOLFSSL_ASN_TEMPLATE
static int GetCertHeader(DecodedCert* cert)
{
 800f256:	b590      	push	{r4, r7, lr}
 800f258:	b087      	sub	sp, #28
 800f25a:	af02      	add	r7, sp, #8
 800f25c:	6078      	str	r0, [r7, #4]
    int ret = 0, len;
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]

    if (GetSequence(cert->source, &cert->srcIdx, &len, cert->maxIdx) < 0)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800f274:	f107 0208 	add.w	r2, r7, #8
 800f278:	f7fe fad4 	bl	800d824 <GetSequence>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	da02      	bge.n	800f288 <GetCertHeader+0x32>
        return ASN_PARSE_E;
 800f282:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f286:	e05c      	b.n	800f342 <GetCertHeader+0xec>

    /* Reset the max index for the size indicated in the outer wrapper. */
    cert->maxIdx = len + cert->srcIdx;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	441a      	add	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
    cert->certBegin = cert->srcIdx;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	60da      	str	r2, [r3, #12]

    if (GetSequence(cert->source, &cert->srcIdx, &len, cert->maxIdx) < 0)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800f2b4:	f107 0208 	add.w	r2, r7, #8
 800f2b8:	f7fe fab4 	bl	800d824 <GetSequence>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	da02      	bge.n	800f2c8 <GetCertHeader+0x72>
        return ASN_PARSE_E;
 800f2c2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f2c6:	e03c      	b.n	800f342 <GetCertHeader+0xec>

    cert->sigIndex = len + cert->srcIdx;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800f2ce:	68ba      	ldr	r2, [r7, #8]
 800f2d0:	441a      	add	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	611a      	str	r2, [r3, #16]
    if (cert->sigIndex > cert->maxIdx)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	691a      	ldr	r2, [r3, #16]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d902      	bls.n	800f2ea <GetCertHeader+0x94>
        return ASN_PARSE_E;
 800f2e4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f2e8:	e02b      	b.n	800f342 <GetCertHeader+0xec>

    if (GetExplicitVersion(cert->source, &cert->srcIdx, &cert->version,
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	f7fe fcb9 	bl	800dc76 <GetExplicitVersion>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	da02      	bge.n	800f310 <GetCertHeader+0xba>
                                                            cert->sigIndex) < 0)
        return ASN_PARSE_E;
 800f30a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f30e:	e018      	b.n	800f342 <GetCertHeader+0xec>

    if (wc_GetSerialNumber(cert->source, &cert->srcIdx, cert->serial,
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f503 724e 	add.w	r2, r3, #824	; 0x338
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f503 7456 	add.w	r4, r3, #856	; 0x358
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	691b      	ldr	r3, [r3, #16]
 800f32c:	9300      	str	r3, [sp, #0]
 800f32e:	4623      	mov	r3, r4
 800f330:	f003 ff7c 	bl	801322c <wc_GetSerialNumber>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	da02      	bge.n	800f340 <GetCertHeader+0xea>
                                           &cert->serialSz, cert->sigIndex) < 0)
        return ASN_PARSE_E;
 800f33a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f33e:	e000      	b.n	800f342 <GetCertHeader+0xec>

    return ret;
 800f340:	68fb      	ldr	r3, [r7, #12]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3714      	adds	r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	bd90      	pop	{r4, r7, pc}

0800f34a <StoreRsaKey>:
 * @return  ASN_EXPECT_0_E when the INTEGER has the MSB set or NULL has a
 *          non-zero length.
 */
static int StoreRsaKey(DecodedCert* cert, const byte* source, word32* srcIdx,
                       word32 maxIdx)
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b08a      	sub	sp, #40	; 0x28
 800f34e:	af02      	add	r7, sp, #8
 800f350:	60f8      	str	r0, [r7, #12]
 800f352:	60b9      	str	r1, [r7, #8]
 800f354:	607a      	str	r2, [r7, #4]
 800f356:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int    length;
    int    pubLen;
    word32 pubIdx;

    if (CheckBitString(source, srcIdx, &pubLen, maxIdx, 1, NULL) != 0)
 800f358:	f107 0214 	add.w	r2, r7, #20
 800f35c:	2300      	movs	r3, #0
 800f35e:	9301      	str	r3, [sp, #4]
 800f360:	2301      	movs	r3, #1
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	6879      	ldr	r1, [r7, #4]
 800f368:	68b8      	ldr	r0, [r7, #8]
 800f36a:	f7fe fd4d 	bl	800de08 <CheckBitString>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <StoreRsaKey+0x30>
        return ASN_PARSE_E;
 800f374:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f378:	e022      	b.n	800f3c0 <StoreRsaKey+0x76>
    pubIdx = *srcIdx;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	61fb      	str	r3, [r7, #28]

    if (GetSequence(source, srcIdx, &length, pubIdx + pubLen) < 0)
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	461a      	mov	r2, r3
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	4413      	add	r3, r2
 800f388:	f107 0218 	add.w	r2, r7, #24
 800f38c:	6879      	ldr	r1, [r7, #4]
 800f38e:	68b8      	ldr	r0, [r7, #8]
 800f390:	f7fe fa48 	bl	800d824 <GetSequence>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	da02      	bge.n	800f3a0 <StoreRsaKey+0x56>
        return ASN_PARSE_E;
 800f39a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f39e:	e00f      	b.n	800f3c0 <StoreRsaKey+0x76>

#if defined(WOLFSSL_RENESAS_TSIP_TLS) || defined(WOLFSSL_RENESAS_SCEPROTECT)
    cert->sigCtx.CertAtt.pubkey_n_start =
            cert->sigCtx.CertAtt.pubkey_e_start = pubIdx;
#endif
    cert->pubKeySize = pubLen;
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	605a      	str	r2, [r3, #4]
    cert->publicKey = source + pubIdx;
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	441a      	add	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	601a      	str	r2, [r3, #0]
#ifdef WOLFSSL_MAXQ10XX_TLS
    cert->publicKeyIndex = pubIdx;
#endif
    *srcIdx += length;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	69ba      	ldr	r2, [r7, #24]
 800f3b8:	441a      	add	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	601a      	str	r2, [r3, #0]

#ifdef HAVE_OCSP
    return CalcHashId(cert->publicKey, cert->pubKeySize, cert->subjectKeyHash);
#else
    return 0;
 800f3be:	2300      	movs	r3, #0
    #endif
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3720      	adds	r7, #32
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <StoreEccKey>:
 *          non-zero length.
 * @return  ASN_OBJECT_ID_E when the expected OBJECT_ID tag is not found.
 */
static int StoreEccKey(DecodedCert* cert, const byte* source, word32* srcIdx,
                       word32 maxIdx, const byte* pubKey, word32 pubKeyLen)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b08c      	sub	sp, #48	; 0x30
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	603b      	str	r3, [r7, #0]
    word32 localIdx;
    byte* publicKey;
    byte  tag;
    int length;

    localIdx = *srcIdx;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	61fb      	str	r3, [r7, #28]
    if (GetASNTag(source, &localIdx, &tag, maxIdx) < 0)
 800f3dc:	f107 021b 	add.w	r2, r7, #27
 800f3e0:	f107 011c 	add.w	r1, r7, #28
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	68b8      	ldr	r0, [r7, #8]
 800f3e8:	f7fe f94d 	bl	800d686 <GetASNTag>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	da02      	bge.n	800f3f8 <StoreEccKey+0x30>
        return ASN_PARSE_E;
 800f3f2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f3f6:	e04f      	b.n	800f498 <StoreEccKey+0xd0>

    if (tag != (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 800f3f8:	7efb      	ldrb	r3, [r7, #27]
 800f3fa:	2b30      	cmp	r3, #48	; 0x30
 800f3fc:	d033      	beq.n	800f466 <StoreEccKey+0x9e>
        if (GetObjectId(source, srcIdx, &cert->pkCurveOID, oidCurveType,
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f503 727d 	add.w	r2, r3, #1012	; 0x3f4
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	2303      	movs	r3, #3
 800f40a:	6879      	ldr	r1, [r7, #4]
 800f40c:	68b8      	ldr	r0, [r7, #8]
 800f40e:	f7ff f8c1 	bl	800e594 <GetObjectId>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	da02      	bge.n	800f41e <StoreEccKey+0x56>
                                                                    maxIdx) < 0)
            return ASN_PARSE_E;
 800f418:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f41c:	e03c      	b.n	800f498 <StoreEccKey+0xd0>

        if ((ret = CheckCurve(cert->pkCurveOID)) < 0)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800f424:	4618      	mov	r0, r3
 800f426:	f7ff f807 	bl	800e438 <CheckCurve>
 800f42a:	6278      	str	r0, [r7, #36]	; 0x24
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	2b00      	cmp	r3, #0
 800f430:	da02      	bge.n	800f438 <StoreEccKey+0x70>
            return ECC_CURVE_OID_E;
 800f432:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 800f436:	e02f      	b.n	800f498 <StoreEccKey+0xd0>
        cert->sigCtx.CertAtt.curve_id = ret;
    #else
        (void)ret;
    #endif
        /* key header */
        ret = CheckBitString(source, srcIdx, &length, maxIdx, 1, NULL);
 800f438:	f107 0214 	add.w	r2, r7, #20
 800f43c:	2300      	movs	r3, #0
 800f43e:	9301      	str	r3, [sp, #4]
 800f440:	2301      	movs	r3, #1
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	6879      	ldr	r1, [r7, #4]
 800f448:	68b8      	ldr	r0, [r7, #8]
 800f44a:	f7fe fcdd 	bl	800de08 <CheckBitString>
 800f44e:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != 0)
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	2b00      	cmp	r3, #0
 800f454:	d001      	beq.n	800f45a <StoreEccKey+0x92>
            return ret;
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	e01e      	b.n	800f498 <StoreEccKey+0xd0>
    #ifdef HAVE_OCSP
        ret = CalcHashId(source + *srcIdx, length, cert->subjectKeyHash);
        if (ret != 0)
            return ret;
    #endif
        *srcIdx += length;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	697a      	ldr	r2, [r7, #20]
 800f460:	441a      	add	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	601a      	str	r2, [r3, #0]
    }

    publicKey = (byte*)XMALLOC(pubKeyLen, cert->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800f466:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f468:	f009 fba0 	bl	8018bac <wolfSSL_Malloc>
 800f46c:	6238      	str	r0, [r7, #32]
    if (publicKey == NULL)
 800f46e:	6a3b      	ldr	r3, [r7, #32]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d102      	bne.n	800f47a <StoreEccKey+0xb2>
        return MEMORY_E;
 800f474:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800f478:	e00e      	b.n	800f498 <StoreEccKey+0xd0>
    XMEMCPY(publicKey, pubKey, pubKeyLen);
 800f47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f47c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f47e:	6a38      	ldr	r0, [r7, #32]
 800f480:	f011 ff30 	bl	80212e4 <memcpy>
    cert->publicKey = publicKey;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6a3a      	ldr	r2, [r7, #32]
 800f488:	601a      	str	r2, [r3, #0]
    cert->pubKeyStored = 1;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2201      	movs	r2, #1
 800f48e:	609a      	str	r2, [r3, #8]
    cert->pubKeySize   = pubKeyLen;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f494:	605a      	str	r2, [r3, #4]

    return 0;
 800f496:	2300      	movs	r3, #0
    }
    FREE_ASNGETDATA(dataASN, cert->heap);

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3728      	adds	r7, #40	; 0x28
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <GetCertKey>:
 *          is invalid.
 * @return  BUFFER_E when data in buffer is too small.
 */
static int GetCertKey(DecodedCert* cert, const byte* source, word32* inOutIdx,
                      word32 maxIdx)
{
 800f4a0:	b590      	push	{r4, r7, lr}
 800f4a2:	b095      	sub	sp, #84	; 0x54
 800f4a4:	af02      	add	r7, sp, #8
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
 800f4ac:	603b      	str	r3, [r7, #0]
    word32 srcIdx = *inOutIdx;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	637b      	str	r3, [r7, #52]	; 0x34
#if defined(HAVE_ECC) || !defined(NO_DSA)
    int pubLen;
#endif
#if defined(HAVE_ECC) || !defined(NO_DSA)
    int pubIdx = srcIdx;
 800f4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b6:	643b      	str	r3, [r7, #64]	; 0x40
#endif
    int ret = 0;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	647b      	str	r3, [r7, #68]	; 0x44
    int length;

#ifndef WOLFSSL_ASN_TEMPLATE
    if (GetSequence(source, &srcIdx, &length, maxIdx) < 0)
 800f4bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f4c0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	68b8      	ldr	r0, [r7, #8]
 800f4c8:	f7fe f9ac 	bl	800d824 <GetSequence>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	da02      	bge.n	800f4d8 <GetCertKey+0x38>
#else
    /* Get SEQUENCE and expect all data to be accounted for. */
    if (GetASN_Sequence(source, &srcIdx, &length, maxIdx, 1) != 0)
#endif
    {
        return ASN_PARSE_E;
 800f4d2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f4d6:	e0ca      	b.n	800f66e <GetCertKey+0x1ce>
    }

#if defined(HAVE_ECC) || !defined(NO_DSA)
    pubLen = srcIdx - pubIdx + length;
 800f4d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4e0:	4413      	add	r3, r2
 800f4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
    maxIdx = srcIdx + length;
 800f4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4e8:	4413      	add	r3, r2
 800f4ea:	603b      	str	r3, [r7, #0]

    /* Decode the algorithm identifier for the key. */
    if (GetAlgoId(source, &srcIdx, &cert->keyOID, oidKeyType, maxIdx) < 0) {
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f103 021c 	add.w	r2, r3, #28
 800f4f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	2302      	movs	r3, #2
 800f4fc:	68b8      	ldr	r0, [r7, #8]
 800f4fe:	f7ff f88d 	bl	800e61c <GetAlgoId>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	da02      	bge.n	800f50e <GetCertKey+0x6e>
        return ASN_PARSE_E;
 800f508:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f50c:	e0af      	b.n	800f66e <GetCertKey+0x1ce>
    }

    (void)length;

    /* Parse each type of public key. */
    switch (cert->keyOID) {
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	69db      	ldr	r3, [r3, #28]
 800f512:	f240 228e 	movw	r2, #654	; 0x28e
 800f516:	4293      	cmp	r3, r2
 800f518:	d00e      	beq.n	800f538 <GetCertKey+0x98>
 800f51a:	f240 228e 	movw	r2, #654	; 0x28e
 800f51e:	4293      	cmp	r3, r2
 800f520:	f200 809e 	bhi.w	800f660 <GetCertKey+0x1c0>
 800f524:	f240 2206 	movw	r2, #518	; 0x206
 800f528:	4293      	cmp	r3, r2
 800f52a:	f000 8089 	beq.w	800f640 <GetCertKey+0x1a0>
 800f52e:	f240 2285 	movw	r2, #645	; 0x285
 800f532:	4293      	cmp	r3, r2
 800f534:	d07b      	beq.n	800f62e <GetCertKey+0x18e>
 800f536:	e093      	b.n	800f660 <GetCertKey+0x1c0>
#ifndef NO_RSA
    #ifdef WC_RSA_PSS
        case RSAPSSk:
            if (srcIdx != maxIdx &&
 800f538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f53a:	683a      	ldr	r2, [r7, #0]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d076      	beq.n	800f62e <GetCertKey+0x18e>
                          source[srcIdx] == (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 800f540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f542:	68ba      	ldr	r2, [r7, #8]
 800f544:	4413      	add	r3, r2
 800f546:	781b      	ldrb	r3, [r3, #0]
            if (srcIdx != maxIdx &&
 800f548:	2b30      	cmp	r3, #48	; 0x30
 800f54a:	d170      	bne.n	800f62e <GetCertKey+0x18e>
                word32 seqIdx = srcIdx;
 800f54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f54e:	63bb      	str	r3, [r7, #56]	; 0x38
                int seqLen;
                /* Not set when -1. */
                enum wc_HashType hash = WC_HASH_TYPE_NONE;
 800f550:	2300      	movs	r3, #0
 800f552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                int mgf = -1;
 800f556:	f04f 33ff 	mov.w	r3, #4294967295
 800f55a:	627b      	str	r3, [r7, #36]	; 0x24
                int saltLen = 0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	623b      	str	r3, [r7, #32]
                /* Defaults for sig algorithm parameters. */
                enum wc_HashType sigHash = WC_HASH_TYPE_SHA;
 800f560:	2304      	movs	r3, #4
 800f562:	77fb      	strb	r3, [r7, #31]
                int sigMgf = WC_MGF1SHA1;
 800f564:	231a      	movs	r3, #26
 800f566:	61bb      	str	r3, [r7, #24]
                int sigSaltLen = 20;
 800f568:	2314      	movs	r3, #20
 800f56a:	617b      	str	r3, [r7, #20]

                if (GetSequence(source, &srcIdx, &seqLen, maxIdx) < 0) {
 800f56c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f570:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	68b8      	ldr	r0, [r7, #8]
 800f578:	f7fe f954 	bl	800d824 <GetSequence>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	da02      	bge.n	800f588 <GetCertKey+0xe8>
                    return ASN_PARSE_E;
 800f582:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f586:	e072      	b.n	800f66e <GetCertKey+0x1ce>
                }
                /* Get the pubic key parameters. */
                ret = DecodeRsaPssParams(source + seqIdx,
 800f588:	68ba      	ldr	r2, [r7, #8]
 800f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58c:	18d0      	adds	r0, r2, r3
                    seqLen + srcIdx - seqIdx, &hash, &mgf, &saltLen);
 800f58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f590:	461a      	mov	r2, r3
 800f592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f594:	441a      	add	r2, r3
                ret = DecodeRsaPssParams(source + seqIdx,
 800f596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f598:	1ad1      	subs	r1, r2, r3
 800f59a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800f59e:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800f5a2:	f107 0320 	add.w	r3, r7, #32
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	4623      	mov	r3, r4
 800f5aa:	f7ff f8d8 	bl	800e75e <DecodeRsaPssParams>
 800f5ae:	6478      	str	r0, [r7, #68]	; 0x44
                if (ret != 0) {
 800f5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d002      	beq.n	800f5bc <GetCertKey+0x11c>
                    return ASN_PARSE_E;
 800f5b6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f5ba:	e058      	b.n	800f66e <GetCertKey+0x1ce>
                }
                /* Get the signature parameters. */
                ret = DecodeRsaPssParams(source + cert->sigParamsIndex,
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6a1b      	ldr	r3, [r3, #32]
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	18d0      	adds	r0, r2, r3
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f5c8:	f107 0418 	add.w	r4, r7, #24
 800f5cc:	f107 021f 	add.w	r2, r7, #31
 800f5d0:	f107 0314 	add.w	r3, r7, #20
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	4623      	mov	r3, r4
 800f5d8:	f7ff f8c1 	bl	800e75e <DecodeRsaPssParams>
 800f5dc:	6478      	str	r0, [r7, #68]	; 0x44
                    cert->sigParamsLength, &sigHash, &sigMgf, &sigSaltLen);
                if (ret != 0) {
 800f5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d002      	beq.n	800f5ea <GetCertKey+0x14a>
                    return ASN_PARSE_E;
 800f5e4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f5e8:	e041      	b.n	800f66e <GetCertKey+0x1ce>
                }
                /* Validated signature params match public key params. */
                if (hash != WC_HASH_TYPE_NONE && hash != sigHash) {
 800f5ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d007      	beq.n	800f602 <GetCertKey+0x162>
 800f5f2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f5f6:	7ffb      	ldrb	r3, [r7, #31]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d002      	beq.n	800f602 <GetCertKey+0x162>
                    WOLFSSL_MSG("RSA PSS: hash not matching signature hash");
                    return ASN_PARSE_E;
 800f5fc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f600:	e035      	b.n	800f66e <GetCertKey+0x1ce>
                }
                if (mgf != -1 && mgf != sigMgf) {
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f608:	d006      	beq.n	800f618 <GetCertKey+0x178>
 800f60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d002      	beq.n	800f618 <GetCertKey+0x178>
                    WOLFSSL_MSG("RSA PSS: MGF not matching signature MGF");
                    return ASN_PARSE_E;
 800f612:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f616:	e02a      	b.n	800f66e <GetCertKey+0x1ce>
                }
                if (saltLen > sigSaltLen) {
 800f618:	6a3a      	ldr	r2, [r7, #32]
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	dd02      	ble.n	800f626 <GetCertKey+0x186>
                    WOLFSSL_MSG("RSA PSS: sig salt length too small");
                    return ASN_PARSE_E;
 800f620:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f624:	e023      	b.n	800f66e <GetCertKey+0x1ce>
                }
                srcIdx += seqLen;
 800f626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f62a:	4413      	add	r3, r2
 800f62c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            FALL_THROUGH;
    #endif /* WC_RSA_PSS */
        case RSAk:
            ret = StoreRsaKey(cert, source, &srcIdx, maxIdx);
 800f62e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	68b9      	ldr	r1, [r7, #8]
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7ff fe87 	bl	800f34a <StoreRsaKey>
 800f63c:	6478      	str	r0, [r7, #68]	; 0x44
            break;
 800f63e:	e012      	b.n	800f666 <GetCertKey+0x1c6>
#endif /* NO_RSA */
    #ifdef HAVE_ECC
        case ECDSAk:
            ret = StoreEccKey(cert, source, &srcIdx, maxIdx, source + pubIdx,
 800f640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	4413      	add	r3, r2
 800f646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f648:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f64c:	9201      	str	r2, [sp, #4]
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	460a      	mov	r2, r1
 800f654:	68b9      	ldr	r1, [r7, #8]
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	f7ff feb6 	bl	800f3c8 <StoreEccKey>
 800f65c:	6478      	str	r0, [r7, #68]	; 0x44
                              pubLen);
            break;
 800f65e:	e002      	b.n	800f666 <GetCertKey+0x1c6>
            break;
    #endif /* NO_DSA */
        default:
            WOLFSSL_MSG("Unknown or not compiled in key OID");
            WOLFSSL_ERROR_VERBOSE(ASN_UNKNOWN_OID_E);
            ret = ASN_UNKNOWN_OID_E;
 800f660:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800f664:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return index after public key. */
    *inOutIdx = srcIdx;
 800f666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	601a      	str	r2, [r3, #0]

    /* Return error code. */
    return ret;
 800f66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f66e:	4618      	mov	r0, r3
 800f670:	374c      	adds	r7, #76	; 0x4c
 800f672:	46bd      	mov	sp, r7
 800f674:	bd90      	pop	{r4, r7, pc}
	...

0800f678 <EccEnumToNID>:
 *
 * @param [in] n  ECC curve id.
 * @return  ECC curve NID (OpenSSL compatable value).
 */
WOLFSSL_API int EccEnumToNID(int n)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("EccEnumToNID()");

    switch(n) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	3b01      	subs	r3, #1
 800f684:	2b1a      	cmp	r3, #26
 800f686:	f200 808a 	bhi.w	800f79e <EccEnumToNID+0x126>
 800f68a:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <EccEnumToNID+0x18>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f6fd 	.word	0x0800f6fd
 800f694:	0800f703 	.word	0x0800f703
 800f698:	0800f709 	.word	0x0800f709
 800f69c:	0800f70f 	.word	0x0800f70f
 800f6a0:	0800f715 	.word	0x0800f715
 800f6a4:	0800f71b 	.word	0x0800f71b
 800f6a8:	0800f721 	.word	0x0800f721
 800f6ac:	0800f727 	.word	0x0800f727
 800f6b0:	0800f72d 	.word	0x0800f72d
 800f6b4:	0800f733 	.word	0x0800f733
 800f6b8:	0800f739 	.word	0x0800f739
 800f6bc:	0800f73f 	.word	0x0800f73f
 800f6c0:	0800f745 	.word	0x0800f745
 800f6c4:	0800f74b 	.word	0x0800f74b
 800f6c8:	0800f751 	.word	0x0800f751
 800f6cc:	0800f757 	.word	0x0800f757
 800f6d0:	0800f75d 	.word	0x0800f75d
 800f6d4:	0800f763 	.word	0x0800f763
 800f6d8:	0800f769 	.word	0x0800f769
 800f6dc:	0800f76f 	.word	0x0800f76f
 800f6e0:	0800f775 	.word	0x0800f775
 800f6e4:	0800f77b 	.word	0x0800f77b
 800f6e8:	0800f781 	.word	0x0800f781
 800f6ec:	0800f787 	.word	0x0800f787
 800f6f0:	0800f78d 	.word	0x0800f78d
 800f6f4:	0800f793 	.word	0x0800f793
 800f6f8:	0800f799 	.word	0x0800f799
        case ECC_SECP192R1:
            return NID_X9_62_prime192v1;
 800f6fc:	f240 1399 	movw	r3, #409	; 0x199
 800f700:	e04f      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_PRIME192V2:
            return NID_X9_62_prime192v2;
 800f702:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800f706:	e04c      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_PRIME192V3:
            return NID_X9_62_prime192v3;
 800f708:	f240 139b 	movw	r3, #411	; 0x19b
 800f70c:	e049      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_PRIME239V1:
            return NID_X9_62_prime239v1;
 800f70e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800f712:	e046      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_PRIME239V2:
            return NID_X9_62_prime239v2;
 800f714:	f240 139d 	movw	r3, #413	; 0x19d
 800f718:	e043      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_PRIME239V3:
            return NID_X9_62_prime239v3;
 800f71a:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 800f71e:	e040      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP256R1:
            return NID_X9_62_prime256v1;
 800f720:	f240 139f 	movw	r3, #415	; 0x19f
 800f724:	e03d      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP112R1:
            return NID_secp112r1;
 800f726:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800f72a:	e03a      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP112R2:
            return NID_secp112r2;
 800f72c:	f240 23c1 	movw	r3, #705	; 0x2c1
 800f730:	e037      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP128R1:
            return NID_secp128r1;
 800f732:	f240 23c2 	movw	r3, #706	; 0x2c2
 800f736:	e034      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP128R2:
            return NID_secp128r2;
 800f738:	f240 23c3 	movw	r3, #707	; 0x2c3
 800f73c:	e031      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP160R1:
            return NID_secp160r1;
 800f73e:	f240 23c5 	movw	r3, #709	; 0x2c5
 800f742:	e02e      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP160R2:
            return NID_secp160r2;
 800f744:	f240 23c6 	movw	r3, #710	; 0x2c6
 800f748:	e02b      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP224R1:
            return NID_secp224r1;
 800f74a:	f240 23c9 	movw	r3, #713	; 0x2c9
 800f74e:	e028      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP384R1:
            return NID_secp384r1;
 800f750:	f240 23cb 	movw	r3, #715	; 0x2cb
 800f754:	e025      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP521R1:
            return NID_secp521r1;
 800f756:	f44f 7333 	mov.w	r3, #716	; 0x2cc
 800f75a:	e022      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP160K1:
            return NID_secp160k1;
 800f75c:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 800f760:	e01f      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP192K1:
            return NID_secp192k1;
 800f762:	f240 23c7 	movw	r3, #711	; 0x2c7
 800f766:	e01c      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP224K1:
            return NID_secp224k1;
 800f768:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 800f76c:	e019      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_SECP256K1:
            return NID_secp256k1;
 800f76e:	f240 23ca 	movw	r3, #714	; 0x2ca
 800f772:	e016      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_BRAINPOOLP160R1:
            return NID_brainpoolP160r1;
 800f774:	f240 3399 	movw	r3, #921	; 0x399
 800f778:	e013      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_BRAINPOOLP192R1:
            return NID_brainpoolP192r1;
 800f77a:	f240 339b 	movw	r3, #923	; 0x39b
 800f77e:	e010      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_BRAINPOOLP224R1:
            return NID_brainpoolP224r1;
 800f780:	f240 339d 	movw	r3, #925	; 0x39d
 800f784:	e00d      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_BRAINPOOLP256R1:
            return NID_brainpoolP256r1;
 800f786:	f240 339f 	movw	r3, #927	; 0x39f
 800f78a:	e00a      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_BRAINPOOLP320R1:
            return NID_brainpoolP320r1;
 800f78c:	f240 33a1 	movw	r3, #929	; 0x3a1
 800f790:	e007      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_BRAINPOOLP384R1:
            return NID_brainpoolP384r1;
 800f792:	f240 33a3 	movw	r3, #931	; 0x3a3
 800f796:	e004      	b.n	800f7a2 <EccEnumToNID+0x12a>
        case ECC_BRAINPOOLP512R1:
            return NID_brainpoolP512r1;
 800f798:	f240 33a5 	movw	r3, #933	; 0x3a5
 800f79c:	e001      	b.n	800f7a2 <EccEnumToNID+0x12a>
        default:
            WOLFSSL_MSG("NID not found");
            return -1;
 800f79e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop

0800f7b0 <CalcHashId>:
 * @param [out] hash  Buffer to hold hash.
 * @return  0 on success.
 * @return  MEMORY_E when dynamic memory allocation fails.
 */
int CalcHashId(const byte* data, word32 len, byte* hash)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
    int ret;

#if defined(NO_SHA) || (!defined(NO_SHA256) && defined(WC_ASN_HASH_SHA256))
    ret = wc_Sha256Hash(data, len, hash);
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f008 ff3b 	bl	801863c <wc_Sha256Hash>
 800f7c6:	6178      	str	r0, [r7, #20]
    (void)data;
    (void)len;
    (void)hash;
#endif

    return ret;
 800f7c8:	697b      	ldr	r3, [r7, #20]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3718      	adds	r7, #24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <GetHashId>:
 * @param [out] hash  Buffer to hold hash.
 * @return  0 on success.
 * @return  MEMORY_E when dynamic memory allocation fails.
 */
static int GetHashId(const byte* id, int length, byte* hash)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b086      	sub	sp, #24
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	60f8      	str	r0, [r7, #12]
 800f7da:	60b9      	str	r1, [r7, #8]
 800f7dc:	607a      	str	r2, [r7, #4]
    int ret;

    if (length == KEYID_SIZE) {
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	2b20      	cmp	r3, #32
 800f7e2:	d108      	bne.n	800f7f6 <GetHashId+0x24>
        XMEMCPY(hash, id, length);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	68f9      	ldr	r1, [r7, #12]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f011 fd7a 	bl	80212e4 <memcpy>
        ret = 0;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	617b      	str	r3, [r7, #20]
 800f7f4:	e006      	b.n	800f804 <GetHashId+0x32>
    }
    else {
        ret = CalcHashId(id, length, hash);
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	687a      	ldr	r2, [r7, #4]
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f7ff ffd7 	bl	800f7b0 <CalcHashId>
 800f802:	6178      	str	r0, [r7, #20]
    }

    return ret;
 800f804:	697b      	ldr	r3, [r7, #20]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
	...

0800f810 <GenerateDNSEntryIPString>:
/* used to set the human readable string for the IP address with a ASN_IP_TYPE
 * DNS entry
 * return 0 on success
 */
static int GenerateDNSEntryIPString(DNS_entry* entry, void* heap)
{
 800f810:	b590      	push	{r4, r7, lr}
 800f812:	b097      	sub	sp, #92	; 0x5c
 800f814:	af04      	add	r7, sp, #16
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	647b      	str	r3, [r7, #68]	; 0x44
    int nameSz;
    char tmpName[WOLFSSL_MAX_IPSTR] = {0};
 800f81e:	2300      	movs	r3, #0
 800f820:	60bb      	str	r3, [r7, #8]
 800f822:	f107 030c 	add.w	r3, r7, #12
 800f826:	222a      	movs	r2, #42	; 0x2a
 800f828:	2100      	movs	r1, #0
 800f82a:	4618      	mov	r0, r3
 800f82c:	f011 fd82 	bl	8021334 <memset>
    char* ip;

    if (entry == NULL || entry->type != ASN_IP_TYPE) {
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d003      	beq.n	800f83e <GenerateDNSEntryIPString+0x2e>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	2b07      	cmp	r3, #7
 800f83c:	d002      	beq.n	800f844 <GenerateDNSEntryIPString+0x34>
        return BAD_FUNC_ARG;
 800f83e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800f842:	e092      	b.n	800f96a <GenerateDNSEntryIPString+0x15a>
    }

    if (entry->len != WOLFSSL_IP4_ADDR_LEN &&
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	2b04      	cmp	r3, #4
 800f84a:	d006      	beq.n	800f85a <GenerateDNSEntryIPString+0x4a>
            entry->len != WOLFSSL_IP6_ADDR_LEN) {
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	689b      	ldr	r3, [r3, #8]
    if (entry->len != WOLFSSL_IP4_ADDR_LEN &&
 800f850:	2b10      	cmp	r3, #16
 800f852:	d002      	beq.n	800f85a <GenerateDNSEntryIPString+0x4a>
        WOLFSSL_MSG("Unexpected IP size");
        return BAD_FUNC_ARG;
 800f854:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800f858:	e087      	b.n	800f96a <GenerateDNSEntryIPString+0x15a>
    }
    ip = entry->name;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* store IP addresses as a string */
    if (entry->len == WOLFSSL_IP4_ADDR_LEN) {
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	2b04      	cmp	r3, #4
 800f866:	d11d      	bne.n	800f8a4 <GenerateDNSEntryIPString+0x94>
        if (XSNPRINTF(tmpName, sizeof(tmpName), "%u.%u.%u.%u", 0xFFU & ip[0],
 800f868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	461c      	mov	r4, r3
                      0xFFU & ip[1], 0xFFU & ip[2], 0xFFU & ip[3])
 800f86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f870:	3301      	adds	r3, #1
 800f872:	781b      	ldrb	r3, [r3, #0]
        if (XSNPRINTF(tmpName, sizeof(tmpName), "%u.%u.%u.%u", 0xFFU & ip[0],
 800f874:	461a      	mov	r2, r3
                      0xFFU & ip[1], 0xFFU & ip[2], 0xFFU & ip[3])
 800f876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f878:	3302      	adds	r3, #2
 800f87a:	781b      	ldrb	r3, [r3, #0]
        if (XSNPRINTF(tmpName, sizeof(tmpName), "%u.%u.%u.%u", 0xFFU & ip[0],
 800f87c:	4619      	mov	r1, r3
                      0xFFU & ip[1], 0xFFU & ip[2], 0xFFU & ip[3])
 800f87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f880:	3303      	adds	r3, #3
 800f882:	781b      	ldrb	r3, [r3, #0]
        if (XSNPRINTF(tmpName, sizeof(tmpName), "%u.%u.%u.%u", 0xFFU & ip[0],
 800f884:	f107 0008 	add.w	r0, r7, #8
 800f888:	9302      	str	r3, [sp, #8]
 800f88a:	9101      	str	r1, [sp, #4]
 800f88c:	9200      	str	r2, [sp, #0]
 800f88e:	4623      	mov	r3, r4
 800f890:	4a38      	ldr	r2, [pc, #224]	; (800f974 <GenerateDNSEntryIPString+0x164>)
 800f892:	212e      	movs	r1, #46	; 0x2e
 800f894:	f011 fed4 	bl	8021640 <sniprintf>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b2d      	cmp	r3, #45	; 0x2d
 800f89c:	dd02      	ble.n	800f8a4 <GenerateDNSEntryIPString+0x94>
            >= (int)sizeof(tmpName))
        {
            WOLFSSL_MSG("IP buffer overrun");
            return BUFFER_E;
 800f89e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800f8a2:	e062      	b.n	800f96a <GenerateDNSEntryIPString+0x15a>
        }
    }

    if (entry->len == WOLFSSL_IP6_ADDR_LEN) {
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	2b10      	cmp	r3, #16
 800f8aa:	d136      	bne.n	800f91a <GenerateDNSEntryIPString+0x10a>
        int i;
        for (i = 0; i < 8; i++) {
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	643b      	str	r3, [r7, #64]	; 0x40
 800f8b0:	e030      	b.n	800f914 <GenerateDNSEntryIPString+0x104>
            if (XSNPRINTF(tmpName + i * 5, sizeof(tmpName) - i * 5,
 800f8b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	f107 0308 	add.w	r3, r7, #8
 800f8c0:	1898      	adds	r0, r3, r2
 800f8c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	f1c3 012e 	rsb	r1, r3, #46	; 0x2e
                    "%02X%02X%s", 0xFF & ip[2 * i], 0xFF & ip[2 * i + 1],
 800f8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8d0:	005b      	lsls	r3, r3, #1
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d6:	4413      	add	r3, r2
 800f8d8:	781b      	ldrb	r3, [r3, #0]
            if (XSNPRINTF(tmpName + i * 5, sizeof(tmpName) - i * 5,
 800f8da:	461c      	mov	r4, r3
                    "%02X%02X%s", 0xFF & ip[2 * i], 0xFF & ip[2 * i + 1],
 800f8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8de:	005b      	lsls	r3, r3, #1
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8e4:	4413      	add	r3, r2
 800f8e6:	781b      	ldrb	r3, [r3, #0]
            if (XSNPRINTF(tmpName + i * 5, sizeof(tmpName) - i * 5,
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ec:	2b06      	cmp	r3, #6
 800f8ee:	dc01      	bgt.n	800f8f4 <GenerateDNSEntryIPString+0xe4>
 800f8f0:	4b21      	ldr	r3, [pc, #132]	; (800f978 <GenerateDNSEntryIPString+0x168>)
 800f8f2:	e000      	b.n	800f8f6 <GenerateDNSEntryIPString+0xe6>
 800f8f4:	4b21      	ldr	r3, [pc, #132]	; (800f97c <GenerateDNSEntryIPString+0x16c>)
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	9200      	str	r2, [sp, #0]
 800f8fa:	4623      	mov	r3, r4
 800f8fc:	4a20      	ldr	r2, [pc, #128]	; (800f980 <GenerateDNSEntryIPString+0x170>)
 800f8fe:	f011 fe9f 	bl	8021640 <sniprintf>
 800f902:	4603      	mov	r3, r0
 800f904:	2b2d      	cmp	r3, #45	; 0x2d
 800f906:	dd02      	ble.n	800f90e <GenerateDNSEntryIPString+0xfe>
                    (i < 7) ? ":" : "")
                >= (int)sizeof(tmpName))
            {
                WOLFSSL_MSG("IPv6 buffer overrun");
                return BUFFER_E;
 800f908:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800f90c:	e02d      	b.n	800f96a <GenerateDNSEntryIPString+0x15a>
        for (i = 0; i < 8; i++) {
 800f90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f910:	3301      	adds	r3, #1
 800f912:	643b      	str	r3, [r7, #64]	; 0x40
 800f914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f916:	2b07      	cmp	r3, #7
 800f918:	ddcb      	ble.n	800f8b2 <GenerateDNSEntryIPString+0xa2>
            }
        }
    }

    nameSz = (int)XSTRLEN(tmpName);
 800f91a:	f107 0308 	add.w	r3, r7, #8
 800f91e:	4618      	mov	r0, r3
 800f920:	f7f0 fc70 	bl	8000204 <strlen>
 800f924:	4603      	mov	r3, r0
 800f926:	63bb      	str	r3, [r7, #56]	; 0x38
    entry->ipString = (char*)XMALLOC(nameSz + 1, heap, DYNAMIC_TYPE_ALTNAME);
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	3301      	adds	r3, #1
 800f92c:	4618      	mov	r0, r3
 800f92e:	f009 f93d 	bl	8018bac <wolfSSL_Malloc>
 800f932:	4602      	mov	r2, r0
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	611a      	str	r2, [r3, #16]
    if (entry->ipString == NULL) {
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	691b      	ldr	r3, [r3, #16]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d102      	bne.n	800f946 <GenerateDNSEntryIPString+0x136>
        ret = MEMORY_E;
 800f940:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800f944:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (ret == 0) {
 800f946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d10d      	bne.n	800f968 <GenerateDNSEntryIPString+0x158>
        XMEMCPY(entry->ipString, tmpName, nameSz);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f952:	f107 0108 	add.w	r1, r7, #8
 800f956:	4618      	mov	r0, r3
 800f958:	f011 fcc4 	bl	80212e4 <memcpy>
        entry->ipString[nameSz] = '\0';
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	691a      	ldr	r2, [r3, #16]
 800f960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f962:	4413      	add	r3, r2
 800f964:	2200      	movs	r2, #0
 800f966:	701a      	strb	r2, [r3, #0]
    }

    (void)heap;

    return ret;
 800f968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	374c      	adds	r7, #76	; 0x4c
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd90      	pop	{r4, r7, pc}
 800f972:	bf00      	nop
 800f974:	08028f40 	.word	0x08028f40
 800f978:	08028f4c 	.word	0x08028f4c
 800f97c:	08028f50 	.word	0x08028f50
 800f980:	08028f54 	.word	0x08028f54

0800f984 <GetCertName>:
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 * @return  MEMORY_E when dynamic memory allocation fails.
 */
static int GetCertName(DecodedCert* cert, char* full, byte* hash, int nameType,
                       const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b098      	sub	sp, #96	; 0x60
 800f988:	af04      	add	r7, sp, #16
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int    length;  /* length of all distinguished names */
    int    dummy;
    int    ret;
    word32 idx;
    word32 srcIdx = *inOutIdx;
 800f992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	61fb      	str	r3, [r7, #28]
#if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
    !defined(WOLFCRYPT_ONLY)
    WOLFSSL_X509_NAME* dName = NULL;
 800f998:	2300      	movs	r3, #0
 800f99a:	62fb      	str	r3, [r7, #44]	; 0x2c
    WOLFSSL_MSG("Getting Cert Name");

    /* For OCSP, RFC2560 section 4.1.1 states the issuer hash should be
     * calculated over the entire DER encoding of the Name field, including
     * the tag and length. */
    if (CalcHashId(input + *inOutIdx, maxIdx - *inOutIdx, hash) != 0)
 800f99c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9a2:	18d0      	adds	r0, r2, r3
 800f9a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	f7ff fefe 	bl	800f7b0 <CalcHashId>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d002      	beq.n	800f9c0 <GetCertName+0x3c>
        return ASN_PARSE_E;
 800f9ba:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f9be:	e260      	b.n	800fe82 <GetCertName+0x4fe>

#if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
    !defined(WOLFCRYPT_ONLY)
    dName = wolfSSL_X509_NAME_new();
 800f9c0:	f7fa ff72 	bl	800a8a8 <wolfSSL_X509_NAME_new>
 800f9c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dName == NULL) {
 800f9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d102      	bne.n	800f9d2 <GetCertName+0x4e>
        return MEMORY_E;
 800f9cc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800f9d0:	e257      	b.n	800fe82 <GetCertName+0x4fe>
    }
#endif /* OPENSSL_EXTRA */

    if (GetSequence(input, &srcIdx, &length, maxIdx) < 0) {
 800f9d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f9d6:	f107 011c 	add.w	r1, r7, #28
 800f9da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f9de:	f7fd ff21 	bl	800d824 <GetSequence>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	da05      	bge.n	800f9f4 <GetCertName+0x70>
#if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
        wolfSSL_X509_NAME_free(dName);
 800f9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9ea:	f7fa ff4a 	bl	800a882 <wolfSSL_X509_NAME_free>
#endif /* OPENSSL_EXTRA */
        return ASN_PARSE_E;
 800f9ee:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f9f2:	e246      	b.n	800fe82 <GetCertName+0x4fe>
        cert->issuerRaw = &input[srcIdx];
        cert->issuerRawLen = length;
    }
#endif
#if !defined(IGNORE_NAME_CONSTRAINTS) || defined(WOLFSSL_CERT_EXT)
    if (nameType == SUBJECT) {
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d109      	bne.n	800fa0e <GetCertName+0x8a>
        cert->subjectRaw = &input[srcIdx];
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9fe:	441a      	add	r2, r3
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        cert->subjectRawLen = length;
 800fa06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
#endif

    length += srcIdx;
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa10:	461a      	mov	r2, r3
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	4413      	add	r3, r2
 800fa16:	627b      	str	r3, [r7, #36]	; 0x24
    idx = 0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	64fb      	str	r3, [r7, #76]	; 0x4c

    while (srcIdx < (word32)length) {
 800fa1c:	e1fc      	b.n	800fe18 <GetCertName+0x494>
        byte        b       = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	76fb      	strb	r3, [r7, #27]
        byte        joint[3];
        byte        tooBig  = FALSE;
 800fa22:	2300      	movs	r3, #0
 800fa24:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        int         oidSz;
        const char* copy    = NULL;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	647b      	str	r3, [r7, #68]	; 0x44
        int         copyLen = 0;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	643b      	str	r3, [r7, #64]	; 0x40
        int         strLen  = 0;
 800fa30:	2300      	movs	r3, #0
 800fa32:	613b      	str	r3, [r7, #16]
        byte        id      = 0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) \
                && !defined(WOLFCRYPT_ONLY)
         int        nid = NID_undef;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	63bb      	str	r3, [r7, #56]	; 0x38
         int        enc;
    #endif /* OPENSSL_EXTRA */

        if (GetSet(input, &srcIdx, &dummy, maxIdx) < 0) {
 800fa3e:	f107 0220 	add.w	r2, r7, #32
 800fa42:	f107 011c 	add.w	r1, r7, #28
 800fa46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fa4a:	f7fd ff15 	bl	800d878 <GetSet>
            WOLFSSL_MSG("Cert name lacks set header, trying sequence");
        }

        if (GetSequence(input, &srcIdx, &dummy, maxIdx) <= 0) {
 800fa4e:	f107 0220 	add.w	r2, r7, #32
 800fa52:	f107 011c 	add.w	r1, r7, #28
 800fa56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fa5a:	f7fd fee3 	bl	800d824 <GetSequence>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	dc05      	bgt.n	800fa70 <GetCertName+0xec>
        #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
            wolfSSL_X509_NAME_free(dName);
 800fa64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa66:	f7fa ff0c 	bl	800a882 <wolfSSL_X509_NAME_free>
        #endif /* OPENSSL_EXTRA */
            return ASN_PARSE_E;
 800fa6a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fa6e:	e208      	b.n	800fe82 <GetCertName+0x4fe>
        }

        ret = GetASNObjectId(input, &srcIdx, &oidSz, maxIdx);
 800fa70:	f107 0214 	add.w	r2, r7, #20
 800fa74:	f107 011c 	add.w	r1, r7, #28
 800fa78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fa7c:	f7fe fcf6 	bl	800e46c <GetASNObjectId>
 800fa80:	62b8      	str	r0, [r7, #40]	; 0x28
        if (ret != 0) {
 800fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d004      	beq.n	800fa92 <GetCertName+0x10e>
        #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
            wolfSSL_X509_NAME_free(dName);
 800fa88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa8a:	f7fa fefa 	bl	800a882 <wolfSSL_X509_NAME_free>
        #endif /* OPENSSL_EXTRA */
            return ret;
 800fa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa90:	e1f7      	b.n	800fe82 <GetCertName+0x4fe>
        }

        /* make sure there is room for joint */
        if ((srcIdx + sizeof(joint)) > (word32)maxIdx) {
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	3303      	adds	r3, #3
 800fa96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d205      	bcs.n	800faa8 <GetCertName+0x124>
        #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
            wolfSSL_X509_NAME_free(dName);
 800fa9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa9e:	f7fa fef0 	bl	800a882 <wolfSSL_X509_NAME_free>
        #endif /* OPENSSL_EXTRA */
            return ASN_PARSE_E;
 800faa2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800faa6:	e1ec      	b.n	800fe82 <GetCertName+0x4fe>
        }

        XMEMCPY(joint, &input[srcIdx], sizeof(joint));
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800faac:	441a      	add	r2, r3
 800faae:	f107 0318 	add.w	r3, r7, #24
 800fab2:	8811      	ldrh	r1, [r2, #0]
 800fab4:	7892      	ldrb	r2, [r2, #2]
 800fab6:	8019      	strh	r1, [r3, #0]
 800fab8:	709a      	strb	r2, [r3, #2]

        /* v1 name types */
        if (joint[0] == 0x55 && joint[1] == 0x04) {
 800faba:	7e3b      	ldrb	r3, [r7, #24]
 800fabc:	2b55      	cmp	r3, #85	; 0x55
 800fabe:	f040 8097 	bne.w	800fbf0 <GetCertName+0x26c>
 800fac2:	7e7b      	ldrb	r3, [r7, #25]
 800fac4:	2b04      	cmp	r3, #4
 800fac6:	f040 8093 	bne.w	800fbf0 <GetCertName+0x26c>
            srcIdx += 3;
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	3303      	adds	r3, #3
 800face:	61fb      	str	r3, [r7, #28]
            id = joint[2];
 800fad0:	7ebb      	ldrb	r3, [r7, #26]
 800fad2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (GetHeader(input, &b, &srcIdx, &strLen, maxIdx, 1) < 0) {
 800fad6:	f107 0010 	add.w	r0, r7, #16
 800fada:	f107 021c 	add.w	r2, r7, #28
 800fade:	f107 011b 	add.w	r1, r7, #27
 800fae2:	2301      	movs	r3, #1
 800fae4:	9301      	str	r3, [sp, #4]
 800fae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	4603      	mov	r3, r0
 800faec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800faee:	f7fd fe64 	bl	800d7ba <GetHeader>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	da05      	bge.n	800fb04 <GetCertName+0x180>
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
                wolfSSL_X509_NAME_free(dName);
 800faf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fafa:	f7fa fec2 	bl	800a882 <wolfSSL_X509_NAME_free>
            #endif /* OPENSSL_EXTRA */
                return ASN_PARSE_E;
 800fafe:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fb02:	e1be      	b.n	800fe82 <GetCertName+0x4fe>
            }

            if (id == ASN_COMMON_NAME) {
 800fb04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb08:	2b03      	cmp	r3, #3
 800fb0a:	d117      	bne.n	800fb3c <GetCertName+0x1b8>
                if (nameType == SUBJECT) {
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d10d      	bne.n	800fb2e <GetCertName+0x1aa>
                    cert->subjectCN = (char *)&input[srcIdx];
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb16:	441a      	add	r2, r3
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    cert->subjectCNLen = strLen;
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    cert->subjectCNEnc = b;
 800fb26:	7efa      	ldrb	r2, [r7, #27]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                    cert->issuerCNLen = strLen;
                    cert->issuerCNEnc = b;
                }
            #endif

                copy = WOLFSSL_COMMON_NAME;
 800fb2e:	4b9c      	ldr	r3, [pc, #624]	; (800fda0 <GetCertName+0x41c>)
 800fb30:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_COMMON_NAME) - 1;
 800fb32:	2304      	movs	r3, #4
 800fb34:	643b      	str	r3, [r7, #64]	; 0x40
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) \
                && !defined(WOLFCRYPT_ONLY)
                nid = NID_commonName;
 800fb36:	230e      	movs	r3, #14
 800fb38:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fb3a:	e0f3      	b.n	800fd24 <GetCertName+0x3a0>
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_dnQualifier;
                #endif /* OPENSSL_EXTRA */
            }
        #endif /* WOLFSSL_CERT_NAME_ALL */
            else if (id == ASN_SUR_NAME) {
 800fb3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb40:	2b04      	cmp	r3, #4
 800fb42:	d106      	bne.n	800fb52 <GetCertName+0x1ce>
                copy = WOLFSSL_SUR_NAME;
 800fb44:	4b97      	ldr	r3, [pc, #604]	; (800fda4 <GetCertName+0x420>)
 800fb46:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_SUR_NAME) - 1;
 800fb48:	2304      	movs	r3, #4
 800fb4a:	643b      	str	r3, [r7, #64]	; 0x40
                #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_surname;
 800fb4c:	2304      	movs	r3, #4
 800fb4e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fb50:	e0e8      	b.n	800fd24 <GetCertName+0x3a0>
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_COUNTRY_NAME) {
 800fb52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb56:	2b06      	cmp	r3, #6
 800fb58:	d106      	bne.n	800fb68 <GetCertName+0x1e4>
                copy = WOLFSSL_COUNTRY_NAME;
 800fb5a:	4b93      	ldr	r3, [pc, #588]	; (800fda8 <GetCertName+0x424>)
 800fb5c:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_COUNTRY_NAME) - 1;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	643b      	str	r3, [r7, #64]	; 0x40
                #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_countryName;
 800fb62:	2306      	movs	r3, #6
 800fb64:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fb66:	e0dd      	b.n	800fd24 <GetCertName+0x3a0>
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_LOCALITY_NAME) {
 800fb68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb6c:	2b07      	cmp	r3, #7
 800fb6e:	d106      	bne.n	800fb7e <GetCertName+0x1fa>
                copy = WOLFSSL_LOCALITY_NAME;
 800fb70:	4b8e      	ldr	r3, [pc, #568]	; (800fdac <GetCertName+0x428>)
 800fb72:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_LOCALITY_NAME) - 1;
 800fb74:	2303      	movs	r3, #3
 800fb76:	643b      	str	r3, [r7, #64]	; 0x40
                    #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_localityName;
 800fb78:	2307      	movs	r3, #7
 800fb7a:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fb7c:	e0d2      	b.n	800fd24 <GetCertName+0x3a0>
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_STATE_NAME) {
 800fb7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb82:	2b08      	cmp	r3, #8
 800fb84:	d106      	bne.n	800fb94 <GetCertName+0x210>
                copy = WOLFSSL_STATE_NAME;
 800fb86:	4b8a      	ldr	r3, [pc, #552]	; (800fdb0 <GetCertName+0x42c>)
 800fb88:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_STATE_NAME) - 1;
 800fb8a:	2304      	movs	r3, #4
 800fb8c:	643b      	str	r3, [r7, #64]	; 0x40
                #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT*/
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_stateOrProvinceName;
 800fb8e:	2308      	movs	r3, #8
 800fb90:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fb92:	e0c7      	b.n	800fd24 <GetCertName+0x3a0>
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_ORG_NAME) {
 800fb94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb98:	2b0a      	cmp	r3, #10
 800fb9a:	d106      	bne.n	800fbaa <GetCertName+0x226>
                copy = WOLFSSL_ORG_NAME;
 800fb9c:	4b85      	ldr	r3, [pc, #532]	; (800fdb4 <GetCertName+0x430>)
 800fb9e:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_ORG_NAME) - 1;
 800fba0:	2303      	movs	r3, #3
 800fba2:	643b      	str	r3, [r7, #64]	; 0x40
                #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_organizationName;
 800fba4:	230a      	movs	r3, #10
 800fba6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fba8:	e0bc      	b.n	800fd24 <GetCertName+0x3a0>
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_ORGUNIT_NAME) {
 800fbaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbae:	2b0b      	cmp	r3, #11
 800fbb0:	d106      	bne.n	800fbc0 <GetCertName+0x23c>
                copy = WOLFSSL_ORGUNIT_NAME;
 800fbb2:	4b81      	ldr	r3, [pc, #516]	; (800fdb8 <GetCertName+0x434>)
 800fbb4:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_ORGUNIT_NAME) - 1;
 800fbb6:	2304      	movs	r3, #4
 800fbb8:	643b      	str	r3, [r7, #64]	; 0x40
                #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_organizationalUnitName;
 800fbba:	230b      	movs	r3, #11
 800fbbc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fbbe:	e0b1      	b.n	800fd24 <GetCertName+0x3a0>
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_SERIAL_NUMBER) {
 800fbc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbc4:	2b05      	cmp	r3, #5
 800fbc6:	d106      	bne.n	800fbd6 <GetCertName+0x252>
                copy = WOLFSSL_SERIAL_NUMBER;
 800fbc8:	4b7c      	ldr	r3, [pc, #496]	; (800fdbc <GetCertName+0x438>)
 800fbca:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_SERIAL_NUMBER) - 1;
 800fbcc:	230e      	movs	r3, #14
 800fbce:	643b      	str	r3, [r7, #64]	; 0x40
                #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_serialNumber;
 800fbd0:	2305      	movs	r3, #5
 800fbd2:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fbd4:	e0a6      	b.n	800fd24 <GetCertName+0x3a0>
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_USER_ID) {
 800fbd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbda:	2b12      	cmp	r3, #18
 800fbdc:	f040 80a2 	bne.w	800fd24 <GetCertName+0x3a0>
                copy = WOLFSSL_USER_ID;
 800fbe0:	4b77      	ldr	r3, [pc, #476]	; (800fdc0 <GetCertName+0x43c>)
 800fbe2:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_USER_ID) - 1;
 800fbe4:	2305      	movs	r3, #5
 800fbe6:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_userId;
 800fbe8:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
 800fbec:	63bb      	str	r3, [r7, #56]	; 0x38
            if (id == ASN_COMMON_NAME) {
 800fbee:	e099      	b.n	800fd24 <GetCertName+0x3a0>
            }
        }
    #endif /* WOLFSSL_CERT_EXT */
        else {
            /* skip */
            byte email = FALSE;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            byte pilot = FALSE;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

            if (joint[0] == 0x2a && joint[1] == 0x86) {  /* email id hdr 42.134.* */
 800fbfc:	7e3b      	ldrb	r3, [r7, #24]
 800fbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800fc00:	d108      	bne.n	800fc14 <GetCertName+0x290>
 800fc02:	7e7b      	ldrb	r3, [r7, #25]
 800fc04:	2b86      	cmp	r3, #134	; 0x86
 800fc06:	d105      	bne.n	800fc14 <GetCertName+0x290>
                id = ASN_EMAIL_NAME;
 800fc08:	2398      	movs	r3, #152	; 0x98
 800fc0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                email = TRUE;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            }

            if (joint[0] == 0x9  && joint[1] == 0x92) { /* uid id hdr 9.146.* */
 800fc14:	7e3b      	ldrb	r3, [r7, #24]
 800fc16:	2b09      	cmp	r3, #9
 800fc18:	d115      	bne.n	800fc46 <GetCertName+0x2c2>
 800fc1a:	7e7b      	ldrb	r3, [r7, #25]
 800fc1c:	2b92      	cmp	r3, #146	; 0x92
 800fc1e:	d112      	bne.n	800fc46 <GetCertName+0x2c2>
                /* last value of OID is the type of pilot attribute */
                id    = input[srcIdx + oidSz - 1];
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	697a      	ldr	r2, [r7, #20]
 800fc24:	4413      	add	r3, r2
 800fc26:	3b01      	subs	r3, #1
 800fc28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc2a:	4413      	add	r3, r2
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (id == 0x01)
 800fc32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d102      	bne.n	800fc40 <GetCertName+0x2bc>
                    id = ASN_USER_ID;
 800fc3a:	2312      	movs	r3, #18
 800fc3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                pilot = TRUE;
 800fc40:	2301      	movs	r3, #1
 800fc42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            }

            srcIdx += oidSz + 1;
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	461a      	mov	r2, r3
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	3301      	adds	r3, #1
 800fc50:	61fb      	str	r3, [r7, #28]

            if (GetLength(input, &srcIdx, &strLen, maxIdx) < 0) {
 800fc52:	f107 0210 	add.w	r2, r7, #16
 800fc56:	f107 011c 	add.w	r1, r7, #28
 800fc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fc5e:	f7fd fc7a 	bl	800d556 <GetLength>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	da05      	bge.n	800fc74 <GetCertName+0x2f0>
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
                wolfSSL_X509_NAME_free(dName);
 800fc68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc6a:	f7fa fe0a 	bl	800a882 <wolfSSL_X509_NAME_free>
            #endif /* OPENSSL_EXTRA */
                return ASN_PARSE_E;
 800fc6e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fc72:	e106      	b.n	800fe82 <GetCertName+0x4fe>
            }

            if (strLen > (int)(WC_ASN_NAME_MAX - idx)) {
 800fc74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc76:	f5c3 73a5 	rsb	r3, r3, #330	; 0x14a
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	da02      	bge.n	800fc88 <GetCertName+0x304>
                WOLFSSL_MSG("ASN name too big, skipping");
                tooBig = TRUE;
 800fc82:	2301      	movs	r3, #1
 800fc84:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }

            if (email) {
 800fc88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d01e      	beq.n	800fcce <GetCertName+0x34a>
                copyLen = sizeof(WOLFSSL_EMAIL_ADDR) - 1;
 800fc90:	230e      	movs	r3, #14
 800fc92:	643b      	str	r3, [r7, #64]	; 0x40
                if ((copyLen + strLen) > (int)(WC_ASN_NAME_MAX - idx)) {
 800fc94:	693a      	ldr	r2, [r7, #16]
 800fc96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc98:	4413      	add	r3, r2
 800fc9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc9c:	f5c2 72a5 	rsb	r2, r2, #330	; 0x14a
 800fca0:	4293      	cmp	r3, r2
 800fca2:	dd03      	ble.n	800fcac <GetCertName+0x328>
                    WOLFSSL_MSG("ASN name too big, skipping");
                    tooBig = TRUE;
 800fca4:	2301      	movs	r3, #1
 800fca6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800fcaa:	e001      	b.n	800fcb0 <GetCertName+0x32c>
                }
                else {
                    copy = WOLFSSL_EMAIL_ADDR;
 800fcac:	4b45      	ldr	r3, [pc, #276]	; (800fdc4 <GetCertName+0x440>)
 800fcae:	647b      	str	r3, [r7, #68]	; 0x44
                }

                #if !defined(IGNORE_NAME_CONSTRAINTS) || \
                     defined(WOLFSSL_CERT_GEN) || defined(WOLFSSL_CERT_EXT)
                    if (nameType == SUBJECT) {
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d109      	bne.n	800fcca <GetCertName+0x346>
                        cert->subjectEmail = (char*)&input[srcIdx];
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcba:	441a      	add	r2, r3
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
                        cert->subjectEmailLen = strLen;
 800fcc2:	693a      	ldr	r2, [r7, #16]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
                #endif /* WOLFSSL_HAVE_ISSUER_NAMES */
                #endif /* WOLFSSL_CERT_GEN || WOLFSSL_CERT_EXT */
                #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_emailAddress;
 800fcca:	2330      	movs	r3, #48	; 0x30
 800fccc:	63bb      	str	r3, [r7, #56]	; 0x38
                #endif /* OPENSSL_EXTRA */
            }

            if (pilot) {
 800fcce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d028      	beq.n	800fd28 <GetCertName+0x3a4>
                switch (id) {
 800fcd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fcda:	2b19      	cmp	r3, #25
 800fcdc:	d00d      	beq.n	800fcfa <GetCertName+0x376>
 800fcde:	2b19      	cmp	r3, #25
 800fce0:	dc1a      	bgt.n	800fd18 <GetCertName+0x394>
 800fce2:	2b05      	cmp	r3, #5
 800fce4:	d010      	beq.n	800fd08 <GetCertName+0x384>
 800fce6:	2b12      	cmp	r3, #18
 800fce8:	d116      	bne.n	800fd18 <GetCertName+0x394>
                    case ASN_USER_ID:
                        copy = WOLFSSL_USER_ID;
 800fcea:	4b35      	ldr	r3, [pc, #212]	; (800fdc0 <GetCertName+0x43c>)
 800fcec:	647b      	str	r3, [r7, #68]	; 0x44
                        copyLen = sizeof(WOLFSSL_USER_ID) - 1;
 800fcee:	2305      	movs	r3, #5
 800fcf0:	643b      	str	r3, [r7, #64]	; 0x40
                    #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                        nid = NID_userId;
 800fcf2:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
 800fcf6:	63bb      	str	r3, [r7, #56]	; 0x38
                    #endif /* OPENSSL_EXTRA */
                        break;
 800fcf8:	e017      	b.n	800fd2a <GetCertName+0x3a6>

                    case ASN_DOMAIN_COMPONENT:
                        copy = WOLFSSL_DOMAIN_COMPONENT;
 800fcfa:	4b33      	ldr	r3, [pc, #204]	; (800fdc8 <GetCertName+0x444>)
 800fcfc:	647b      	str	r3, [r7, #68]	; 0x44
                        copyLen = sizeof(WOLFSSL_DOMAIN_COMPONENT) - 1;
 800fcfe:	2304      	movs	r3, #4
 800fd00:	643b      	str	r3, [r7, #64]	; 0x40
                    #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                        nid = NID_domainComponent;
 800fd02:	2319      	movs	r3, #25
 800fd04:	63bb      	str	r3, [r7, #56]	; 0x38
                    #endif /* OPENSSL_EXTRA */
                        break;
 800fd06:	e010      	b.n	800fd2a <GetCertName+0x3a6>
                    case ASN_FAVOURITE_DRINK:
                        copy = WOLFSSL_FAVOURITE_DRINK;
 800fd08:	4b30      	ldr	r3, [pc, #192]	; (800fdcc <GetCertName+0x448>)
 800fd0a:	647b      	str	r3, [r7, #68]	; 0x44
                        copyLen = sizeof(WOLFSSL_FAVOURITE_DRINK) - 1;
 800fd0c:	2310      	movs	r3, #16
 800fd0e:	643b      	str	r3, [r7, #64]	; 0x40
                    #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                        nid = NID_favouriteDrink;
 800fd10:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
 800fd14:	63bb      	str	r3, [r7, #56]	; 0x38
                    #endif /* OPENSSL_EXTRA */
                        break;
 800fd16:	e008      	b.n	800fd2a <GetCertName+0x3a6>
                    default:
                        WOLFSSL_MSG("Unknown pilot attribute type");
                    #if (defined(OPENSSL_EXTRA) || \
                                defined(OPENSSL_EXTRA_X509_SMALL)) && \
                                !defined(WOLFCRYPT_ONLY)
                        wolfSSL_X509_NAME_free(dName);
 800fd18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd1a:	f7fa fdb2 	bl	800a882 <wolfSSL_X509_NAME_free>
                    #endif /* OPENSSL_EXTRA */
                        return ASN_PARSE_E;
 800fd1e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fd22:	e0ae      	b.n	800fe82 <GetCertName+0x4fe>
            if (id == ASN_COMMON_NAME) {
 800fd24:	bf00      	nop
 800fd26:	e000      	b.n	800fd2a <GetCertName+0x3a6>
                }
            }
 800fd28:	bf00      	nop
        }
        if ((copyLen + strLen) > (int)(WC_ASN_NAME_MAX - idx))
 800fd2a:	693a      	ldr	r2, [r7, #16]
 800fd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd2e:	4413      	add	r3, r2
 800fd30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd32:	f5c2 72a5 	rsb	r2, r2, #330	; 0x14a
 800fd36:	4293      	cmp	r3, r2
 800fd38:	dd02      	ble.n	800fd40 <GetCertName+0x3bc>
        {
            WOLFSSL_MSG("ASN Name too big, skipping");
            tooBig = TRUE;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
        if ((copy != NULL) && !tooBig) {
 800fd40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d01e      	beq.n	800fd84 <GetCertName+0x400>
 800fd46:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d11a      	bne.n	800fd84 <GetCertName+0x400>
            XMEMCPY(&full[idx], copy, copyLen);
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd52:	4413      	add	r3, r2
 800fd54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f011 fac3 	bl	80212e4 <memcpy>
            idx += copyLen;
 800fd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd62:	4413      	add	r3, r2
 800fd64:	64fb      	str	r3, [r7, #76]	; 0x4c
            XMEMCPY(&full[idx], &input[srcIdx], strLen);
 800fd66:	68ba      	ldr	r2, [r7, #8]
 800fd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd6a:	18d0      	adds	r0, r2, r3
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd70:	4413      	add	r3, r2
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	4619      	mov	r1, r3
 800fd76:	f011 fab5 	bl	80212e4 <memcpy>
            idx += strLen;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd80:	4413      	add	r3, r2
 800fd82:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
        switch (b) {
 800fd84:	7efb      	ldrb	r3, [r7, #27]
 800fd86:	2b0c      	cmp	r3, #12
 800fd88:	d002      	beq.n	800fd90 <GetCertName+0x40c>
 800fd8a:	2b13      	cmp	r3, #19
 800fd8c:	d004      	beq.n	800fd98 <GetCertName+0x414>
 800fd8e:	e01f      	b.n	800fdd0 <GetCertName+0x44c>
            case CTC_UTF8:
                enc = MBSTRING_UTF8;
 800fd90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd94:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800fd96:	e01e      	b.n	800fdd6 <GetCertName+0x452>
            case CTC_PRINTABLE:
                enc = V_ASN1_PRINTABLESTRING;
 800fd98:	2313      	movs	r3, #19
 800fd9a:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800fd9c:	e01b      	b.n	800fdd6 <GetCertName+0x452>
 800fd9e:	bf00      	nop
 800fda0:	08028ea4 	.word	0x08028ea4
 800fda4:	08028f60 	.word	0x08028f60
 800fda8:	08028eac 	.word	0x08028eac
 800fdac:	08028eb0 	.word	0x08028eb0
 800fdb0:	08028eb4 	.word	0x08028eb4
 800fdb4:	08028ebc 	.word	0x08028ebc
 800fdb8:	08028ec0 	.word	0x08028ec0
 800fdbc:	08028f68 	.word	0x08028f68
 800fdc0:	08028f78 	.word	0x08028f78
 800fdc4:	08028ec8 	.word	0x08028ec8
 800fdc8:	08028f80 	.word	0x08028f80
 800fdcc:	08028f88 	.word	0x08028f88
            default:
                WOLFSSL_MSG("Unknown encoding type, using UTF8 by default");
                enc = MBSTRING_UTF8;
 800fdd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fdd4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (nid != NID_undef) {
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d019      	beq.n	800fe10 <GetCertName+0x48c>
            if (wolfSSL_X509_NAME_add_entry_by_NID(dName, nid, enc,
 800fddc:	69fb      	ldr	r3, [r7, #28]
                            &input[srcIdx], strLen, -1, -1) !=
 800fdde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fde0:	441a      	add	r2, r3
            if (wolfSSL_X509_NAME_add_entry_by_NID(dName, nid, enc,
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f04f 31ff 	mov.w	r1, #4294967295
 800fde8:	9102      	str	r1, [sp, #8]
 800fdea:	f04f 31ff 	mov.w	r1, #4294967295
 800fdee:	9101      	str	r1, [sp, #4]
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fdf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdfa:	f7fa ffd5 	bl	800ada8 <wolfSSL_X509_NAME_add_entry_by_NID>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d005      	beq.n	800fe10 <GetCertName+0x48c>
                            WOLFSSL_SUCCESS) {
                wolfSSL_X509_NAME_free(dName);
 800fe04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe06:	f7fa fd3c 	bl	800a882 <wolfSSL_X509_NAME_free>
                return ASN_PARSE_E;
 800fe0a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fe0e:	e038      	b.n	800fe82 <GetCertName+0x4fe>
            }
        }
        #endif /* OPENSSL_EXTRA */
        srcIdx += strLen;
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	693a      	ldr	r2, [r7, #16]
 800fe14:	4413      	add	r3, r2
 800fe16:	61fb      	str	r3, [r7, #28]
    while (srcIdx < (word32)length) {
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	f4ff adfe 	bcc.w	800fa1e <GetCertName+0x9a>
    }
    full[idx++] = 0;
 800fe22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe24:	1c5a      	adds	r2, r3, #1
 800fe26:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	701a      	strb	r2, [r3, #0]

#if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
    if (nameType == ISSUER) {
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d104      	bne.n	800fe40 <GetCertName+0x4bc>
#if (defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX) || defined(HAVE_LIGHTY)) && \
    (defined(HAVE_PKCS7) || defined(WOLFSSL_CERT_EXT))
        dName->rawLen = min(cert->issuerRawLen, WC_ASN_NAME_MAX);
        XMEMCPY(dName->raw, cert->issuerRaw, dName->rawLen);
#endif
        cert->issuerName = dName;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe3a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800fe3e:	e01c      	b.n	800fe7a <GetCertName+0x4f6>
    }
    else {
#if defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX)
        dName->rawLen = min(cert->subjectRawLen, WC_ASN_NAME_MAX);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800fe46:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fd fb55 	bl	800d4fa <min>
 800fe50:	4603      	mov	r3, r0
 800fe52:	461a      	mov	r2, r3
 800fe54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe56:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
        XMEMCPY(dName->raw, cert->subjectRaw, dName->rawLen);
 800fe5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5c:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 800fe66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe68:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	f011 fa39 	bl	80212e4 <memcpy>
#endif
        cert->subjectName = dName;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe76:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    }
#endif

    *inOutIdx = srcIdx;
 800fe7a:	69fa      	ldr	r2, [r7, #28]
 800fe7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe7e:	601a      	str	r2, [r3, #0]

    return 0;
 800fe80:	2300      	movs	r3, #0
    }

    FREE_ASNGETDATA(dataASN, cert->heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3750      	adds	r7, #80	; 0x50
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop

0800fe8c <GetName>:
 * @return  ASN_OBJECT_ID_E when the expected OBJECT_ID tag is not found.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 * @return  MEMORY_E when dynamic memory allocation fails.
 */
int GetName(DecodedCert* cert, int nameType, int maxIdx)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b08e      	sub	sp, #56	; 0x38
 800fe90:	af04      	add	r7, sp, #16
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
    word32 localIdx;
    byte   tag;

    WOLFSSL_MSG("Getting Name");

    if (nameType == ISSUER) {
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d106      	bne.n	800feac <GetName+0x20>
        full = cert->issuer;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	338d      	adds	r3, #141	; 0x8d
 800fea2:	627b      	str	r3, [r7, #36]	; 0x24
        hash = cert->issuerHash;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	3360      	adds	r3, #96	; 0x60
 800fea8:	623b      	str	r3, [r7, #32]
 800feaa:	e006      	b.n	800feba <GetName+0x2e>
    }
    else {
        full = cert->subject;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f203 13d7 	addw	r3, r3, #471	; 0x1d7
 800feb2:	627b      	str	r3, [r7, #36]	; 0x24
        hash = cert->subjectHash;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	3340      	adds	r3, #64	; 0x40
 800feb8:	623b      	str	r3, [r7, #32]
    }

    if (cert->srcIdx >= (word32)maxIdx) {
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d302      	bcc.n	800fecc <GetName+0x40>
        return BUFFER_E;
 800fec6:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800feca:	e06c      	b.n	800ffa6 <GetName+0x11a>
    }

    localIdx = cert->srcIdx;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800fed2:	61bb      	str	r3, [r7, #24]
    if (GetASNTag(cert->source, &localIdx, &tag, maxIdx) < 0) {
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f107 0217 	add.w	r2, r7, #23
 800fee0:	f107 0118 	add.w	r1, r7, #24
 800fee4:	f7fd fbcf 	bl	800d686 <GetASNTag>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	da02      	bge.n	800fef4 <GetName+0x68>
        return ASN_PARSE_E;
 800feee:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fef2:	e058      	b.n	800ffa6 <GetName+0x11a>
    }

    if (tag == ASN_OBJECT_ID) {
 800fef4:	7dfb      	ldrb	r3, [r7, #23]
 800fef6:	2b06      	cmp	r3, #6
 800fef8:	d10f      	bne.n	800ff1a <GetName+0x8e>
        WOLFSSL_MSG("Trying optional prefix...");

        if (SkipObjectId(cert->source, &cert->srcIdx, maxIdx) < 0)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	4619      	mov	r1, r3
 800ff0a:	f7fe fb64 	bl	800e5d6 <SkipObjectId>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	da02      	bge.n	800ff1a <GetName+0x8e>
            return ASN_PARSE_E;
 800ff14:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ff18:	e045      	b.n	800ffa6 <GetName+0x11a>
        WOLFSSL_MSG("Got optional prefix");
    }

    localIdx = cert->srcIdx;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800ff20:	61bb      	str	r3, [r7, #24]
    if (GetASNTag(cert->source, &localIdx, &tag, maxIdx) < 0) {
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f107 0217 	add.w	r2, r7, #23
 800ff2e:	f107 0118 	add.w	r1, r7, #24
 800ff32:	f7fd fba8 	bl	800d686 <GetASNTag>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	da02      	bge.n	800ff42 <GetName+0xb6>
        return ASN_PARSE_E;
 800ff3c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ff40:	e031      	b.n	800ffa6 <GetName+0x11a>
    }
    localIdx = cert->srcIdx + 1;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800ff48:	3301      	adds	r3, #1
 800ff4a:	61bb      	str	r3, [r7, #24]
    if (GetLength(cert->source, &localIdx, &length, maxIdx) < 0) {
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f107 021c 	add.w	r2, r7, #28
 800ff58:	f107 0118 	add.w	r1, r7, #24
 800ff5c:	f7fd fafb 	bl	800d556 <GetLength>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	da02      	bge.n	800ff6c <GetName+0xe0>
        return ASN_PARSE_E;
 800ff66:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ff6a:	e01c      	b.n	800ffa6 <GetName+0x11a>
    }
    length += localIdx - cert->srcIdx;
 800ff6c:	69ba      	ldr	r2, [r7, #24]
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	69fa      	ldr	r2, [r7, #28]
 800ff78:	4413      	add	r3, r2
 800ff7a:	61fb      	str	r3, [r7, #28]

    return GetCertName(cert, full, hash, nameType, cert->source, &cert->srcIdx,
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	f502 724b 	add.w	r2, r2, #812	; 0x32c
                       cert->srcIdx + length);
 800ff88:	68f9      	ldr	r1, [r7, #12]
 800ff8a:	f8d1 132c 	ldr.w	r1, [r1, #812]	; 0x32c
    return GetCertName(cert, full, hash, nameType, cert->source, &cert->srcIdx,
 800ff8e:	69f8      	ldr	r0, [r7, #28]
 800ff90:	4401      	add	r1, r0
 800ff92:	9102      	str	r1, [sp, #8]
 800ff94:	9201      	str	r2, [sp, #4]
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	6a3a      	ldr	r2, [r7, #32]
 800ff9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f7ff fcf0 	bl	800f984 <GetCertName>
 800ffa4:	4603      	mov	r3, r0
                          &cert->srcIdx, idx);
    }

    return ret;
#endif
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3728      	adds	r7, #40	; 0x28
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <GetDateInfo>:
 *          is invalid.
 * @return  BUFFER_E when data in buffer is too small.
 */
static int GetDateInfo(const byte* source, word32* idx, const byte** pDate,
                        byte* pFormat, int* pLength, word32 maxIdx)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b086      	sub	sp, #24
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	60f8      	str	r0, [r7, #12]
 800ffb6:	60b9      	str	r1, [r7, #8]
 800ffb8:	607a      	str	r2, [r7, #4]
 800ffba:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int length;
    byte format;

    if (source == NULL || idx == NULL)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d002      	beq.n	800ffc8 <GetDateInfo+0x1a>
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d102      	bne.n	800ffce <GetDateInfo+0x20>
        return BAD_FUNC_ARG;
 800ffc8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ffcc:	e04e      	b.n	801006c <GetDateInfo+0xbe>

    /* get ASN format header */
    if (*idx+1 > maxIdx)
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d202      	bcs.n	800ffe0 <GetDateInfo+0x32>
        return BUFFER_E;
 800ffda:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ffde:	e045      	b.n	801006c <GetDateInfo+0xbe>
    format = source[*idx];
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	75fb      	strb	r3, [r7, #23]
    *idx += 1;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	1c5a      	adds	r2, r3, #1
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	601a      	str	r2, [r3, #0]
    if (format != ASN_UTC_TIME && format != ASN_GENERALIZED_TIME) {
 800fff6:	7dfb      	ldrb	r3, [r7, #23]
 800fff8:	2b17      	cmp	r3, #23
 800fffa:	d005      	beq.n	8010008 <GetDateInfo+0x5a>
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	2b18      	cmp	r3, #24
 8010000:	d002      	beq.n	8010008 <GetDateInfo+0x5a>
        WOLFSSL_ERROR_VERBOSE(ASN_TIME_E);
        return ASN_TIME_E;
 8010002:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8010006:	e031      	b.n	801006c <GetDateInfo+0xbe>
    }

    /* get length */
    if (GetLength(source, idx, &length, maxIdx) < 0)
 8010008:	f107 0210 	add.w	r2, r7, #16
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	68b9      	ldr	r1, [r7, #8]
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f7fd faa0 	bl	800d556 <GetLength>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	da02      	bge.n	8010022 <GetDateInfo+0x74>
        return ASN_PARSE_E;
 801001c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8010020:	e024      	b.n	801006c <GetDateInfo+0xbe>
    if (length > MAX_DATE_SIZE || length < MIN_DATE_SIZE)
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	2b20      	cmp	r3, #32
 8010026:	dc02      	bgt.n	801002e <GetDateInfo+0x80>
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	2b0b      	cmp	r3, #11
 801002c:	dc02      	bgt.n	8010034 <GetDateInfo+0x86>
        return ASN_DATE_SZ_E;
 801002e:	f06f 0394 	mvn.w	r3, #148	; 0x94
 8010032:	e01b      	b.n	801006c <GetDateInfo+0xbe>

    /* return format, date and length */
    if (pFormat)
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <GetDateInfo+0x92>
        *pFormat = format;
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	7dfa      	ldrb	r2, [r7, #23]
 801003e:	701a      	strb	r2, [r3, #0]
    if (pDate)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d005      	beq.n	8010052 <GetDateInfo+0xa4>
        *pDate = &source[*idx];
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	441a      	add	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	601a      	str	r2, [r3, #0]
    if (pLength)
 8010052:	6a3b      	ldr	r3, [r7, #32]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d002      	beq.n	801005e <GetDateInfo+0xb0>
        *pLength = length;
 8010058:	693a      	ldr	r2, [r7, #16]
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	601a      	str	r2, [r3, #0]

    *idx += length;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	693a      	ldr	r2, [r7, #16]
 8010064:	441a      	add	r2, r3
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	601a      	str	r2, [r3, #0]

    return 0;
 801006a:	2300      	movs	r3, #0
        }
    }

    return ret;
#endif
}
 801006c:	4618      	mov	r0, r3
 801006e:	3718      	adds	r7, #24
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <GetDate>:

#ifndef WOLFSSL_ASN_TEMPLATE
static int GetDate(DecodedCert* cert, int dateType, int verify, int maxIdx)
{
 8010074:	b590      	push	{r4, r7, lr}
 8010076:	b095      	sub	sp, #84	; 0x54
 8010078:	af02      	add	r7, sp, #8
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	607a      	str	r2, [r7, #4]
 8010080:	603b      	str	r3, [r7, #0]
    int    ret, length;
    const byte *datePtr = NULL;
 8010082:	2300      	movs	r3, #0
 8010084:	63bb      	str	r3, [r7, #56]	; 0x38
    byte   date[MAX_DATE_SIZE];
    byte   format;
    word32 startIdx = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	647b      	str	r3, [r7, #68]	; 0x44

    if (dateType == BEFORE)
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10a      	bne.n	80100a6 <GetDate+0x32>
        cert->beforeDate = &cert->source[cert->srcIdx];
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f8d3 2328 	ldr.w	r2, [r3, #808]	; 0x328
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 801009c:	441a      	add	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
 80100a4:	e009      	b.n	80100ba <GetDate+0x46>
    else
        cert->afterDate = &cert->source[cert->srcIdx];
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f8d3 2328 	ldr.w	r2, [r3, #808]	; 0x328
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 80100b2:	441a      	add	r2, r3
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    startIdx = cert->srcIdx;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 80100c0:	647b      	str	r3, [r7, #68]	; 0x44

    ret = GetDateInfo(cert->source, &cert->srcIdx, &datePtr, &format,
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	f107 0417 	add.w	r4, r7, #23
 80100d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	4623      	mov	r3, r4
 80100e2:	f7ff ff64 	bl	800ffae <GetDateInfo>
 80100e6:	6438      	str	r0, [r7, #64]	; 0x40
                      &length, maxIdx);
    if (ret < 0)
 80100e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	da01      	bge.n	80100f2 <GetDate+0x7e>
        return ret;
 80100ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100f0:	e025      	b.n	801013e <GetDate+0xca>

    XMEMSET(date, 0, MAX_DATE_SIZE);
 80100f2:	f107 0318 	add.w	r3, r7, #24
 80100f6:	2220      	movs	r2, #32
 80100f8:	2100      	movs	r1, #0
 80100fa:	4618      	mov	r0, r3
 80100fc:	f011 f91a 	bl	8021334 <memset>
    XMEMCPY(date, datePtr, length);
 8010100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010104:	461a      	mov	r2, r3
 8010106:	f107 0318 	add.w	r3, r7, #24
 801010a:	4618      	mov	r0, r3
 801010c:	f011 f8ea 	bl	80212e4 <memcpy>

    if (dateType == BEFORE)
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d109      	bne.n	801012a <GetDate+0xb6>
        cert->beforeDateLen = cert->srcIdx - startIdx;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 801011c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801011e:	1ad3      	subs	r3, r2, r3
 8010120:	461a      	mov	r2, r3
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 8010128:	e008      	b.n	801013c <GetDate+0xc8>
    else
        cert->afterDateLen  = cert->srcIdx - startIdx;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 8010130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	461a      	mov	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    }
#else
    (void)verify;
#endif

    return 0;
 801013c:	2300      	movs	r3, #0
}
 801013e:	4618      	mov	r0, r3
 8010140:	374c      	adds	r7, #76	; 0x4c
 8010142:	46bd      	mov	sp, r7
 8010144:	bd90      	pop	{r4, r7, pc}

08010146 <GetValidity>:

static int GetValidity(DecodedCert* cert, int verify, int maxIdx)
{
 8010146:	b580      	push	{r7, lr}
 8010148:	b086      	sub	sp, #24
 801014a:	af00      	add	r7, sp, #0
 801014c:	60f8      	str	r0, [r7, #12]
 801014e:	60b9      	str	r1, [r7, #8]
 8010150:	607a      	str	r2, [r7, #4]
    int length;
    int badDate = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	617b      	str	r3, [r7, #20]

    if (GetSequence(cert->source, &cert->srcIdx, &length, maxIdx) < 0)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f107 0210 	add.w	r2, r7, #16
 8010168:	f7fd fb5c 	bl	800d824 <GetSequence>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	da02      	bge.n	8010178 <GetValidity+0x32>
        return ASN_PARSE_E;
 8010172:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8010176:	e023      	b.n	80101c0 <GetValidity+0x7a>

    maxIdx = cert->srcIdx + length;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 801017e:	693a      	ldr	r2, [r7, #16]
 8010180:	4413      	add	r3, r2
 8010182:	607b      	str	r3, [r7, #4]

    if (GetDate(cert, BEFORE, verify, maxIdx) < 0)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	2100      	movs	r1, #0
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f7ff ff72 	bl	8010074 <GetDate>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	da02      	bge.n	801019c <GetValidity+0x56>
        badDate = ASN_BEFORE_DATE_E; /* continue parsing */
 8010196:	f06f 0395 	mvn.w	r3, #149	; 0x95
 801019a:	617b      	str	r3, [r7, #20]

    if (GetDate(cert, AFTER, verify, maxIdx) < 0)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	2101      	movs	r1, #1
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f7ff ff66 	bl	8010074 <GetDate>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	da02      	bge.n	80101b4 <GetValidity+0x6e>
        return ASN_AFTER_DATE_E;
 80101ae:	f06f 0396 	mvn.w	r3, #150	; 0x96
 80101b2:	e005      	b.n	80101c0 <GetValidity+0x7a>

    if (badDate != 0)
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <GetValidity+0x78>
        return badDate;
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	e000      	b.n	80101c0 <GetValidity+0x7a>

    return 0;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3718      	adds	r7, #24
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <GetSigAlg>:
#endif /* WOLFSSL_CERT_GEN && WOLFSSL_ALT_NAMES */
#endif /* !NO_ASN_TIME */

#ifndef WOLFSSL_ASN_TEMPLATE
static int GetSigAlg(DecodedCert* cert, word32* sigOid, word32 maxIdx)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08a      	sub	sp, #40	; 0x28
 80101cc:	af02      	add	r7, sp, #8
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]
    int length;
    word32 endSeqIdx;

    if (GetSequence(cert->source, &cert->srcIdx, &length, maxIdx) < 0)
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 80101e0:	f107 0218 	add.w	r2, r7, #24
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f7fd fb1d 	bl	800d824 <GetSequence>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	da02      	bge.n	80101f6 <GetSigAlg+0x2e>
        return ASN_PARSE_E;
 80101f0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80101f4:	e056      	b.n	80102a4 <GetSigAlg+0xdc>
    endSeqIdx = cert->srcIdx + length;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 80101fc:	69ba      	ldr	r2, [r7, #24]
 80101fe:	4413      	add	r3, r2
 8010200:	61fb      	str	r3, [r7, #28]

    if (GetObjectId(cert->source, &cert->srcIdx, sigOid, oidSigType,
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	2301      	movs	r3, #1
 8010214:	68ba      	ldr	r2, [r7, #8]
 8010216:	f7fe f9bd 	bl	800e594 <GetObjectId>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	da02      	bge.n	8010226 <GetSigAlg+0x5e>
                    maxIdx) < 0) {
        return ASN_OBJECT_ID_E;
 8010220:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8010224:	e03e      	b.n	80102a4 <GetSigAlg+0xdc>
    }

    if (cert->srcIdx != endSeqIdx) {
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 801022c:	69fa      	ldr	r2, [r7, #28]
 801022e:	429a      	cmp	r2, r3
 8010230:	d033      	beq.n	801029a <GetSigAlg+0xd2>
#ifdef WC_RSA_PSS
        if (*sigOid == CTC_RSASSAPSS) {
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f240 228e 	movw	r2, #654	; 0x28e
 801023a:	4293      	cmp	r3, r2
 801023c:	d10c      	bne.n	8010258 <GetSigAlg+0x90>
            cert->sigParamsIndex = cert->srcIdx;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	621a      	str	r2, [r3, #32]
            cert->sigParamsLength = endSeqIdx - cert->srcIdx;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 801024e:	69fa      	ldr	r2, [r7, #28]
 8010250:	1ad2      	subs	r2, r2, r3
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	625a      	str	r2, [r3, #36]	; 0x24
 8010256:	e020      	b.n	801029a <GetSigAlg+0xd2>
        }
        else
#endif
        /* Only allowed a ASN NULL header with zero length. */
        if  (endSeqIdx - cert->srcIdx != 2)
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 801025e:	69fa      	ldr	r2, [r7, #28]
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	2b02      	cmp	r3, #2
 8010264:	d002      	beq.n	801026c <GetSigAlg+0xa4>
            return ASN_PARSE_E;
 8010266:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801026a:	e01b      	b.n	80102a4 <GetSigAlg+0xdc>
        else {
            byte tag;
            if (GetASNTag(cert->source, &cert->srcIdx, &tag, endSeqIdx) != 0)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8010278:	f107 0217 	add.w	r2, r7, #23
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	f7fd fa02 	bl	800d686 <GetASNTag>
 8010282:	4603      	mov	r3, r0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d002      	beq.n	801028e <GetSigAlg+0xc6>
                return ASN_PARSE_E;
 8010288:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801028c:	e00a      	b.n	80102a4 <GetSigAlg+0xdc>
            if (tag != ASN_TAG_NULL)
 801028e:	7dfb      	ldrb	r3, [r7, #23]
 8010290:	2b05      	cmp	r3, #5
 8010292:	d002      	beq.n	801029a <GetSigAlg+0xd2>
                return ASN_PARSE_E;
 8010294:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8010298:	e004      	b.n	80102a4 <GetSigAlg+0xdc>
        }
    }

    cert->srcIdx = endSeqIdx;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	69fa      	ldr	r2, [r7, #28]
 801029e:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c

    return 0;
 80102a2:	2300      	movs	r3, #0
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3720      	adds	r7, #32
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <wc_GetPubX509>:
 * @return  BUFFER_E when data in buffer is too small.
 * @return  ASN_OBJECT_ID_E when the expected OBJECT_ID tag is not found.
 * @return  ASN_EXPECT_0_E when the INTEGER has the MSB set.
 */
int wc_GetPubX509(DecodedCert* cert, int verify, int* badDate)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b086      	sub	sp, #24
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    int ret;

    if (cert == NULL || badDate == NULL)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d002      	beq.n	80102c4 <wc_GetPubX509+0x18>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d102      	bne.n	80102ca <wc_GetPubX509+0x1e>
        return BAD_FUNC_ARG;
 80102c4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80102c8:	e043      	b.n	8010352 <wc_GetPubX509+0xa6>

    *badDate = 0;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	601a      	str	r2, [r3, #0]
    if ( (ret = GetCertHeader(cert)) < 0)
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f7fe ffc0 	bl	800f256 <GetCertHeader>
 80102d6:	6178      	str	r0, [r7, #20]
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	da01      	bge.n	80102e2 <wc_GetPubX509+0x36>
        return ret;
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	e037      	b.n	8010352 <wc_GetPubX509+0xa6>
#ifdef WOLFSSL_CERT_REQ
    if (!cert->isCSR) {
#endif
        /* Using the sigIndex as the upper bound because that's where the
         * actual certificate data ends. */
        if ((ret = GetSigAlg(cert, &cert->signatureOID, cert->sigIndex)) < 0)
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f103 0118 	add.w	r1, r3, #24
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	461a      	mov	r2, r3
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7ff ff6a 	bl	80101c8 <GetSigAlg>
 80102f4:	6178      	str	r0, [r7, #20]
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	da01      	bge.n	8010300 <wc_GetPubX509+0x54>
            return ret;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	e028      	b.n	8010352 <wc_GetPubX509+0xa6>

        WOLFSSL_MSG("Got Algo ID");

        if ( (ret = GetName(cert, ISSUER, cert->sigIndex)) < 0)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	461a      	mov	r2, r3
 8010306:	2100      	movs	r1, #0
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f7ff fdbf 	bl	800fe8c <GetName>
 801030e:	6178      	str	r0, [r7, #20]
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	2b00      	cmp	r3, #0
 8010314:	da01      	bge.n	801031a <wc_GetPubX509+0x6e>
            return ret;
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	e01b      	b.n	8010352 <wc_GetPubX509+0xa6>

        if ( (ret = GetValidity(cert, verify, cert->sigIndex)) < 0)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	461a      	mov	r2, r3
 8010320:	68b9      	ldr	r1, [r7, #8]
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7ff ff0f 	bl	8010146 <GetValidity>
 8010328:	6178      	str	r0, [r7, #20]
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	da02      	bge.n	8010336 <wc_GetPubX509+0x8a>
            *badDate = ret;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	601a      	str	r2, [r3, #0]
#ifdef WOLFSSL_CERT_REQ
    }
#endif

    if ( (ret = GetName(cert, SUBJECT, cert->sigIndex)) < 0)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	691b      	ldr	r3, [r3, #16]
 801033a:	461a      	mov	r2, r3
 801033c:	2101      	movs	r1, #1
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7ff fda4 	bl	800fe8c <GetName>
 8010344:	6178      	str	r0, [r7, #20]
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	2b00      	cmp	r3, #0
 801034a:	da01      	bge.n	8010350 <wc_GetPubX509+0xa4>
        return ret;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	e000      	b.n	8010352 <wc_GetPubX509+0xa6>

    WOLFSSL_MSG("Got Subject Name");
    return ret;
 8010350:	697b      	ldr	r3, [r7, #20]
        /* Store current index: public key. */
        cert->srcIdx = ret;
    }
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8010352:	4618      	mov	r0, r3
 8010354:	3718      	adds	r7, #24
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <DecodeToKey>:
 * @return  ASN_OBJECT_ID_E when the expected OBJECT_ID tag is not found.
 * @return  ASN_BITSTR_E when the expected BIT_STRING tag is not found.
 * @return  ASN_EXPECT_0_E when the INTEGER has the MSB set.
 */
int DecodeToKey(DecodedCert* cert, int verify)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	6039      	str	r1, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int badDate = 0;
 8010364:	2300      	movs	r3, #0
 8010366:	60bb      	str	r3, [r7, #8]
    int ret;

    if ( (ret = wc_GetPubX509(cert, verify, &badDate)) < 0)
 8010368:	f107 0308 	add.w	r3, r7, #8
 801036c:	461a      	mov	r2, r3
 801036e:	6839      	ldr	r1, [r7, #0]
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7ff ff9b 	bl	80102ac <wc_GetPubX509>
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2b00      	cmp	r3, #0
 801037c:	da01      	bge.n	8010382 <DecodeToKey+0x28>
        return ret;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	e02d      	b.n	80103de <DecodeToKey+0x84>
    if (cert->isCSR)
        cert->selfSigned = 1;
    else
#endif
    {
        cert->selfSigned = XMEMCMP(cert->issuerHash,
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	3340      	adds	r3, #64	; 0x40
 801038c:	2220      	movs	r2, #32
 801038e:	4619      	mov	r1, r3
 8010390:	f010 ff98 	bl	80212c4 <memcmp>
 8010394:	4603      	mov	r3, r0
                                   cert->subjectHash,
                                   KEYID_SIZE) == 0 ? 1 : 0;
 8010396:	2b00      	cmp	r3, #0
 8010398:	bf0c      	ite	eq
 801039a:	2301      	moveq	r3, #1
 801039c:	2300      	movne	r3, #0
 801039e:	b2d9      	uxtb	r1, r3
        cert->selfSigned = XMEMCMP(cert->issuerHash,
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 80103a6:	f361 0341 	bfi	r3, r1, #1, #1
 80103aa:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
    }

    ret = GetCertKey(cert, cert->source, &cert->srcIdx, cert->maxIdx);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f7ff f86d 	bl	800f4a0 <GetCertKey>
 80103c6:	60f8      	str	r0, [r7, #12]
    if (ret != 0)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d001      	beq.n	80103d2 <DecodeToKey+0x78>
        return ret;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	e005      	b.n	80103de <DecodeToKey+0x84>

    WOLFSSL_MSG("Got Key");

    if (badDate != 0)
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <DecodeToKey+0x82>
        return badDate;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	e000      	b.n	80103de <DecodeToKey+0x84>

    return ret;
 80103dc:	68fb      	ldr	r3, [r7, #12]
    if (ret == 0) {
        ret = badDate;
    }
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <GetSignature>:

#if !defined(NO_CERTS) && !defined(WOLFSSL_ASN_TEMPLATE)
static int GetSignature(DecodedCert* cert)
{
 80103e6:	b590      	push	{r4, r7, lr}
 80103e8:	b087      	sub	sp, #28
 80103ea:	af02      	add	r7, sp, #8
 80103ec:	6078      	str	r0, [r7, #4]
    int length;
    int ret;

    ret = CheckBitString(cert->source, &cert->srcIdx, &length, cert->maxIdx, 1,
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8010400:	f107 0208 	add.w	r2, r7, #8
 8010404:	2400      	movs	r4, #0
 8010406:	9401      	str	r4, [sp, #4]
 8010408:	2401      	movs	r4, #1
 801040a:	9400      	str	r4, [sp, #0]
 801040c:	f7fd fcfc 	bl	800de08 <CheckBitString>
 8010410:	60f8      	str	r0, [r7, #12]
                         NULL);
    if (ret != 0)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d001      	beq.n	801041c <GetSignature+0x36>
        return ret;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	e022      	b.n	8010462 <GetSignature+0x7c>

    cert->sigLength = length;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	461a      	mov	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	615a      	str	r2, [r3, #20]
    cert->signature = &cert->source[cert->srcIdx];
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8d3 2328 	ldr.w	r2, [r3, #808]	; 0x328
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8010430:	441a      	add	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    cert->srcIdx += cert->sigLength;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	695b      	ldr	r3, [r3, #20]
 8010442:	441a      	add	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c

    if (cert->srcIdx != cert->maxIdx)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8010456:	429a      	cmp	r2, r3
 8010458:	d002      	beq.n	8010460 <GetSignature+0x7a>
        return ASN_PARSE_E;
 801045a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801045e:	e000      	b.n	8010462 <GetSignature+0x7c>

    return 0;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	3714      	adds	r7, #20
 8010466:	46bd      	mov	sp, r7
 8010468:	bd90      	pop	{r4, r7, pc}

0801046a <SetOctetString8Bit>:
#endif /* !NO_CERTS && !WOLFSSL_ASN_TEMPLATE */

#ifndef WOLFSSL_ASN_TEMPLATE
static word32 SetOctetString8Bit(word32 len, byte* output)
{
 801046a:	b480      	push	{r7}
 801046c:	b083      	sub	sp, #12
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
 8010472:	6039      	str	r1, [r7, #0]
    output[0] = ASN_OCTET_STRING;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2204      	movs	r2, #4
 8010478:	701a      	strb	r2, [r3, #0]
    output[1] = (byte)len;
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	3301      	adds	r3, #1
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	b2d2      	uxtb	r2, r2
 8010482:	701a      	strb	r2, [r3, #0]
    return 2;
 8010484:	2302      	movs	r3, #2
}
 8010486:	4618      	mov	r0, r3
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr

08010492 <SetDigest>:
static word32 SetDigest(const byte* digest, word32 digSz, byte* output)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b086      	sub	sp, #24
 8010496:	af00      	add	r7, sp, #0
 8010498:	60f8      	str	r0, [r7, #12]
 801049a:	60b9      	str	r1, [r7, #8]
 801049c:	607a      	str	r2, [r7, #4]
    word32 idx = SetOctetString8Bit(digSz, output);
 801049e:	6879      	ldr	r1, [r7, #4]
 80104a0:	68b8      	ldr	r0, [r7, #8]
 80104a2:	f7ff ffe2 	bl	801046a <SetOctetString8Bit>
 80104a6:	6178      	str	r0, [r7, #20]
    XMEMCPY(&output[idx], digest, digSz);
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	4413      	add	r3, r2
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	68f9      	ldr	r1, [r7, #12]
 80104b2:	4618      	mov	r0, r3
 80104b4:	f010 ff16 	bl	80212e4 <memcpy>

    return idx + digSz;
 80104b8:	697a      	ldr	r2, [r7, #20]
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	4413      	add	r3, r2
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3718      	adds	r7, #24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <SetLength>:
 * @param [in]  length  Value to encode.
 * @param [out] output  Buffer to encode into.
 * @return  Number of bytes encoded.
 */
word32 SetLength(word32 length, byte* output)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b084      	sub	sp, #16
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
 80104ce:	6039      	str	r1, [r7, #0]
    /* Start encoding at start of buffer. */
    word32 i = 0;
 80104d0:	2300      	movs	r3, #0
 80104d2:	60fb      	str	r3, [r7, #12]

    if (length < ASN_LONG_LENGTH) {
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2b7f      	cmp	r3, #127	; 0x7f
 80104d8:	d80c      	bhi.n	80104f4 <SetLength+0x2e>
        /* Only one byte needed to encode. */
        if (output) {
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d005      	beq.n	80104ec <SetLength+0x26>
            /* Write out length value. */
            output[i] = (byte)length;
 80104e0:	683a      	ldr	r2, [r7, #0]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	4413      	add	r3, r2
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	b2d2      	uxtb	r2, r2
 80104ea:	701a      	strb	r2, [r3, #0]
        }
        /* Skip over length. */
        i++;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3301      	adds	r3, #1
 80104f0:	60fb      	str	r3, [r7, #12]
 80104f2:	e02a      	b.n	801054a <SetLength+0x84>
    }
    else {
        /* Calculate the number of bytes required to encode value. */
        byte j = (byte)BytePrecision(length);
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f7fd f810 	bl	800d51a <BytePrecision>
 80104fa:	4603      	mov	r3, r0
 80104fc:	72fb      	strb	r3, [r7, #11]

        if (output) {
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d007      	beq.n	8010514 <SetLength+0x4e>
            /* Encode count byte. */
            output[i] = j | ASN_LONG_LENGTH;
 8010504:	683a      	ldr	r2, [r7, #0]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	4413      	add	r3, r2
 801050a:	7afa      	ldrb	r2, [r7, #11]
 801050c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010510:	b2d2      	uxtb	r2, r2
 8010512:	701a      	strb	r2, [r3, #0]
        }
        /* Skip over count byte. */
        i++;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	3301      	adds	r3, #1
 8010518:	60fb      	str	r3, [r7, #12]

        /* Encode value as a big-endian byte array. */
        for (; j > 0; --j) {
 801051a:	e013      	b.n	8010544 <SetLength+0x7e>
            if (output) {
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00a      	beq.n	8010538 <SetLength+0x72>
                /* Encode next most-significant byte. */
                output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
 8010522:	7afb      	ldrb	r3, [r7, #11]
 8010524:	3b01      	subs	r3, #1
 8010526:	00db      	lsls	r3, r3, #3
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	fa22 f103 	lsr.w	r1, r2, r3
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4413      	add	r3, r2
 8010534:	b2ca      	uxtb	r2, r1
 8010536:	701a      	strb	r2, [r3, #0]
            }
            /* Skip over byte. */
            i++;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	3301      	adds	r3, #1
 801053c:	60fb      	str	r3, [r7, #12]
        for (; j > 0; --j) {
 801053e:	7afb      	ldrb	r3, [r7, #11]
 8010540:	3b01      	subs	r3, #1
 8010542:	72fb      	strb	r3, [r7, #11]
 8010544:	7afb      	ldrb	r3, [r7, #11]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1e8      	bne.n	801051c <SetLength+0x56>
        }
    }

    /* Return number of bytes in encoded length. */
    return i;
 801054a:	68fb      	ldr	r3, [r7, #12]
}
 801054c:	4618      	mov	r0, r3
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <SetHeader>:
 * @param [in]  len     Length of data in ASN.1 item.
 * @param [out] output  Buffer to encode into.
 * @return  Number of bytes encoded.
 */
static word32 SetHeader(byte tag, word32 len, byte* output)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
 8010560:	73fb      	strb	r3, [r7, #15]
    if (output) {
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <SetHeader+0x1a>
        /* Encode tag first. */
        output[0] = tag;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7bfa      	ldrb	r2, [r7, #15]
 801056c:	701a      	strb	r2, [r3, #0]
    }
    /* Encode the length. */
    return SetLength(len, output ? output + ASN_TAG_SZ : NULL) + ASN_TAG_SZ;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d002      	beq.n	801057a <SetHeader+0x26>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	3301      	adds	r3, #1
 8010578:	e000      	b.n	801057c <SetHeader+0x28>
 801057a:	2300      	movs	r3, #0
 801057c:	4619      	mov	r1, r3
 801057e:	68b8      	ldr	r0, [r7, #8]
 8010580:	f7ff ffa1 	bl	80104c6 <SetLength>
 8010584:	4603      	mov	r3, r0
 8010586:	3301      	adds	r3, #1
}
 8010588:	4618      	mov	r0, r3
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <SetSequence>:
 * @param [in]  len     Length of data in SEQUENCE.
 * @param [out] output  Buffer to encode into.
 * @return  Number of bytes encoded.
 */
word32 SetSequence(word32 len, byte* output)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
    return SetHeader(ASN_SEQUENCE | ASN_CONSTRUCTED, len, output);
 801059a:	683a      	ldr	r2, [r7, #0]
 801059c:	6879      	ldr	r1, [r7, #4]
 801059e:	2030      	movs	r0, #48	; 0x30
 80105a0:	f7ff ffd8 	bl	8010554 <SetHeader>
 80105a4:	4603      	mov	r3, r0
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3708      	adds	r7, #8
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <IsSigAlgoECDSA>:
 * @param [in] algoOID  Signature algorithm identifier.
 * @return  1 when algorithm is using ECDSA.
 * @return  0 otherwise.
 */
static WC_INLINE int IsSigAlgoECDSA(int algoOID)
{
 80105ae:	b480      	push	{r7}
 80105b0:	b083      	sub	sp, #12
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
    /* ECDSA sigAlgo must not have ASN1 NULL parameters */
    if (algoOID == CTC_SHAwECDSA || algoOID == CTC_SHA256wECDSA ||
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80105bc:	d00d      	beq.n	80105da <IsSigAlgoECDSA+0x2c>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80105c4:	d009      	beq.n	80105da <IsSigAlgoECDSA+0x2c>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f240 220d 	movw	r2, #525	; 0x20d
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d004      	beq.n	80105da <IsSigAlgoECDSA+0x2c>
        algoOID == CTC_SHA384wECDSA || algoOID == CTC_SHA512wECDSA) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f240 220e 	movw	r2, #526	; 0x20e
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d101      	bne.n	80105de <IsSigAlgoECDSA+0x30>
        return 1;
 80105da:	2301      	movs	r3, #1
 80105dc:	e000      	b.n	80105e0 <IsSigAlgoECDSA+0x32>
    }

    return 0;
 80105de:	2300      	movs	r3, #0
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr

080105ec <IsSigAlgoECC>:
 * @param [in] algoOID  Algorithm OID.
 * @return  1 when is EC signing algorithm.
 * @return  0 otherwise.
 */
static WC_INLINE int IsSigAlgoECC(int algoOID)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
    (void)algoOID;

    return (0
        #ifdef HAVE_ECC
              || IsSigAlgoECDSA(algoOID)
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7ff ffda 	bl	80105ae <IsSigAlgoECDSA>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	bf14      	ite	ne
 8010600:	2301      	movne	r3, #1
 8010602:	2300      	moveq	r3, #0
 8010604:	b2db      	uxtb	r3, r3
              || (algoOID == SPHINCS_SMALL_LEVEL3k)
              || (algoOID == SPHINCS_SMALL_LEVEL5k)
        #endif
        #endif /* HAVE_PQC */
    );
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <SetAlgoID>:
 * @param [in]  curveSz   Add extra space for curve data.
 * @return  Encoded data size on success.
 * @return  0 when dynamic memory allocation fails.
 */
word32 SetAlgoID(int algoOID, byte* output, int type, int curveSz)
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b08e      	sub	sp, #56	; 0x38
 8010612:	af00      	add	r7, sp, #0
 8010614:	60f8      	str	r0, [r7, #12]
 8010616:	60b9      	str	r1, [r7, #8]
 8010618:	607a      	str	r2, [r7, #4]
 801061a:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 tagSz, idSz, seqSz, algoSz = 0;
 801061c:	2300      	movs	r3, #0
 801061e:	623b      	str	r3, [r7, #32]
    const  byte* algoName = 0;
 8010620:	2300      	movs	r3, #0
 8010622:	633b      	str	r3, [r7, #48]	; 0x30
    byte   ID_Length[1 + MAX_LENGTH_SZ];
    byte   seqArray[MAX_SEQ_SZ + 1];  /* add object_id to end */
    int    length = 0;
 8010624:	2300      	movs	r3, #0
 8010626:	637b      	str	r3, [r7, #52]	; 0x34

    tagSz = (type == oidHashType ||
             (type == oidSigType && !IsSigAlgoECC(algoOID)) ||
             (type == oidKeyType && algoOID == RSAk)) ? 2 : 0;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d010      	beq.n	8010650 <SetAlgoID+0x42>
    tagSz = (type == oidHashType ||
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b01      	cmp	r3, #1
 8010632:	d105      	bne.n	8010640 <SetAlgoID+0x32>
             (type == oidSigType && !IsSigAlgoECC(algoOID)) ||
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f7ff ffd9 	bl	80105ec <IsSigAlgoECC>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d007      	beq.n	8010650 <SetAlgoID+0x42>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b02      	cmp	r3, #2
 8010644:	d106      	bne.n	8010654 <SetAlgoID+0x46>
             (type == oidKeyType && algoOID == RSAk)) ? 2 : 0;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f240 2285 	movw	r2, #645	; 0x285
 801064c:	4293      	cmp	r3, r2
 801064e:	d101      	bne.n	8010654 <SetAlgoID+0x46>
 8010650:	2302      	movs	r3, #2
 8010652:	e000      	b.n	8010656 <SetAlgoID+0x48>
 8010654:	2300      	movs	r3, #0
    tagSz = (type == oidHashType ||
 8010656:	62fb      	str	r3, [r7, #44]	; 0x2c

    algoName = OidFromId(algoOID, type, &algoSz);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	6879      	ldr	r1, [r7, #4]
 801065c:	f107 0220 	add.w	r2, r7, #32
 8010660:	4618      	mov	r0, r3
 8010662:	f7fd fc4f 	bl	800df04 <OidFromId>
 8010666:	6338      	str	r0, [r7, #48]	; 0x30
    if (algoName == NULL) {
 8010668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066a:	2b00      	cmp	r3, #0
 801066c:	d101      	bne.n	8010672 <SetAlgoID+0x64>
        WOLFSSL_MSG("Unknown Algorithm");
        return 0;
 801066e:	2300      	movs	r3, #0
 8010670:	e07b      	b.n	801076a <SetAlgoID+0x15c>
    }

    idSz  = SetObjectId(algoSz, ID_Length);
 8010672:	6a3b      	ldr	r3, [r7, #32]
 8010674:	461a      	mov	r2, r3
 8010676:	f107 0318 	add.w	r3, r7, #24
 801067a:	4619      	mov	r1, r3
 801067c:	4610      	mov	r0, r2
 801067e:	f7fd ff0f 	bl	800e4a0 <SetObjectId>
 8010682:	4603      	mov	r3, r0
 8010684:	62bb      	str	r3, [r7, #40]	; 0x28
    seqSz = SetSequence(idSz + algoSz + tagSz + curveSz, seqArray);
 8010686:	6a3a      	ldr	r2, [r7, #32]
 8010688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068a:	441a      	add	r2, r3
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	441a      	add	r2, r3
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	4413      	add	r3, r2
 8010694:	f107 0210 	add.w	r2, r7, #16
 8010698:	4611      	mov	r1, r2
 801069a:	4618      	mov	r0, r3
 801069c:	f7ff ff78 	bl	8010590 <SetSequence>
 80106a0:	6278      	str	r0, [r7, #36]	; 0x24

    /* Copy only algo to output for DSA keys */
    if (algoOID == DSAk && output) {
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f240 2203 	movw	r2, #515	; 0x203
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d11f      	bne.n	80106ec <SetAlgoID+0xde>
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d01c      	beq.n	80106ec <SetAlgoID+0xde>
        XMEMCPY(output, ID_Length, idSz);
 80106b2:	f107 0318 	add.w	r3, r7, #24
 80106b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106b8:	4619      	mov	r1, r3
 80106ba:	68b8      	ldr	r0, [r7, #8]
 80106bc:	f010 fe12 	bl	80212e4 <memcpy>
        XMEMCPY(output + idSz, algoName, algoSz);
 80106c0:	68ba      	ldr	r2, [r7, #8]
 80106c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c4:	4413      	add	r3, r2
 80106c6:	6a3a      	ldr	r2, [r7, #32]
 80106c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106ca:	4618      	mov	r0, r3
 80106cc:	f010 fe0a 	bl	80212e4 <memcpy>
        if (tagSz == 2)
 80106d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d134      	bne.n	8010740 <SetAlgoID+0x132>
            SetASNNull(&output[seqSz + idSz + algoSz]);
 80106d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106da:	441a      	add	r2, r3
 80106dc:	6a3b      	ldr	r3, [r7, #32]
 80106de:	4413      	add	r3, r2
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	4413      	add	r3, r2
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fd f917 	bl	800d918 <SetASNNull>
        if (tagSz == 2)
 80106ea:	e029      	b.n	8010740 <SetAlgoID+0x132>
    }
    else if (output) {
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d026      	beq.n	8010740 <SetAlgoID+0x132>
        XMEMCPY(output, seqArray, seqSz);
 80106f2:	f107 0310 	add.w	r3, r7, #16
 80106f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f8:	4619      	mov	r1, r3
 80106fa:	68b8      	ldr	r0, [r7, #8]
 80106fc:	f010 fdf2 	bl	80212e4 <memcpy>
        XMEMCPY(output + seqSz, ID_Length, idSz);
 8010700:	68ba      	ldr	r2, [r7, #8]
 8010702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010704:	4413      	add	r3, r2
 8010706:	f107 0118 	add.w	r1, r7, #24
 801070a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801070c:	4618      	mov	r0, r3
 801070e:	f010 fde9 	bl	80212e4 <memcpy>
        XMEMCPY(output + seqSz + idSz, algoName, algoSz);
 8010712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010716:	4413      	add	r3, r2
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	4413      	add	r3, r2
 801071c:	6a3a      	ldr	r2, [r7, #32]
 801071e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010720:	4618      	mov	r0, r3
 8010722:	f010 fddf 	bl	80212e4 <memcpy>
        if (tagSz == 2)
 8010726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010728:	2b02      	cmp	r3, #2
 801072a:	d109      	bne.n	8010740 <SetAlgoID+0x132>
            SetASNNull(&output[seqSz + idSz + algoSz]);
 801072c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801072e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010730:	441a      	add	r2, r3
 8010732:	6a3b      	ldr	r3, [r7, #32]
 8010734:	4413      	add	r3, r2
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	4413      	add	r3, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f7fd f8ec 	bl	800d918 <SetASNNull>
    }

    if (algoOID == DSAk)
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f240 2203 	movw	r2, #515	; 0x203
 8010746:	4293      	cmp	r3, r2
 8010748:	d106      	bne.n	8010758 <SetAlgoID+0x14a>
        length = idSz + algoSz + tagSz;
 801074a:	6a3a      	ldr	r2, [r7, #32]
 801074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074e:	441a      	add	r2, r3
 8010750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010752:	4413      	add	r3, r2
 8010754:	637b      	str	r3, [r7, #52]	; 0x34
 8010756:	e007      	b.n	8010768 <SetAlgoID+0x15a>
    else
        length = seqSz + idSz + algoSz + tagSz;
 8010758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075c:	441a      	add	r2, r3
 801075e:	6a3b      	ldr	r3, [r7, #32]
 8010760:	441a      	add	r2, r3
 8010762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010764:	4413      	add	r3, r2
 8010766:	637b      	str	r3, [r7, #52]	; 0x34

    return length;
 8010768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    FREE_ASNSETDATA(dataASN, NULL);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 801076a:	4618      	mov	r0, r3
 801076c:	3738      	adds	r7, #56	; 0x38
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}

08010772 <wc_EncodeSignature>:
 * @return  Encoded data size on success.
 * @return  0 when dynamic memory allocation fails.
 */
word32 wc_EncodeSignature(byte* out, const byte* digest, word32 digSz,
                          int hashOID)
{
 8010772:	b580      	push	{r7, lr}
 8010774:	b0a2      	sub	sp, #136	; 0x88
 8010776:	af00      	add	r7, sp, #0
 8010778:	60f8      	str	r0, [r7, #12]
 801077a:	60b9      	str	r1, [r7, #8]
 801077c:	607a      	str	r2, [r7, #4]
 801077e:	603b      	str	r3, [r7, #0]
    byte digArray[MAX_ENCODED_DIG_SZ];
    byte algoArray[MAX_ALGO_SZ];
    byte seqArray[MAX_SEQ_SZ];
    word32 encDigSz, algoSz, seqSz;

    encDigSz = SetDigest(digest, digSz, digArray);
 8010780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010784:	461a      	mov	r2, r3
 8010786:	6879      	ldr	r1, [r7, #4]
 8010788:	68b8      	ldr	r0, [r7, #8]
 801078a:	f7ff fe82 	bl	8010492 <SetDigest>
 801078e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    algoSz   = SetAlgoID(hashOID, algoArray, oidHashType, 0);
 8010792:	f107 011c 	add.w	r1, r7, #28
 8010796:	2300      	movs	r3, #0
 8010798:	2200      	movs	r2, #0
 801079a:	6838      	ldr	r0, [r7, #0]
 801079c:	f7ff ff37 	bl	801060e <SetAlgoID>
 80107a0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    seqSz    = SetSequence(encDigSz + algoSz, seqArray);
 80107a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80107a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107ac:	4413      	add	r3, r2
 80107ae:	f107 0214 	add.w	r2, r7, #20
 80107b2:	4611      	mov	r1, r2
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff feeb 	bl	8010590 <SetSequence>
 80107ba:	67f8      	str	r0, [r7, #124]	; 0x7c

    XMEMCPY(out, seqArray, seqSz);
 80107bc:	f107 0314 	add.w	r3, r7, #20
 80107c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80107c2:	4619      	mov	r1, r3
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f010 fd8d 	bl	80212e4 <memcpy>
    XMEMCPY(out + seqSz, algoArray, algoSz);
 80107ca:	68fa      	ldr	r2, [r7, #12]
 80107cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80107ce:	4413      	add	r3, r2
 80107d0:	f107 011c 	add.w	r1, r7, #28
 80107d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80107d8:	4618      	mov	r0, r3
 80107da:	f010 fd83 	bl	80212e4 <memcpy>
    XMEMCPY(out + seqSz + algoSz, digArray, encDigSz);
 80107de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80107e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107e4:	4413      	add	r3, r2
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	4413      	add	r3, r2
 80107ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80107ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80107f2:	4618      	mov	r0, r3
 80107f4:	f010 fd76 	bl	80212e4 <memcpy>

    return encDigSz + algoSz + seqSz;
 80107f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80107fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010800:	441a      	add	r2, r3
 8010802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010804:	4413      	add	r3, r2
    }

    FREE_ASNSETDATA(dataASN, NULL);
    return ret;
#endif
}
 8010806:	4618      	mov	r0, r3
 8010808:	3788      	adds	r7, #136	; 0x88
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <InitSignatureCtx>:
 * @param [in, out] sigCtx  Signature context object.
 * @param [in]      heap    Dynamic memory hint.
 * @param [in]      devId   Hardware device identifier.
 */
void InitSignatureCtx(SignatureCtx* sigCtx, void* heap, int devId)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b084      	sub	sp, #16
 8010812:	af00      	add	r7, sp, #0
 8010814:	60f8      	str	r0, [r7, #12]
 8010816:	60b9      	str	r1, [r7, #8]
 8010818:	607a      	str	r2, [r7, #4]
    if (sigCtx) {
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00a      	beq.n	8010836 <InitSignatureCtx+0x28>
        XMEMSET(sigCtx, 0, sizeof(SignatureCtx));
 8010820:	2238      	movs	r2, #56	; 0x38
 8010822:	2100      	movs	r1, #0
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f010 fd85 	bl	8021334 <memset>
        sigCtx->devId = devId;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	619a      	str	r2, [r3, #24]
        sigCtx->heap = heap;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	68ba      	ldr	r2, [r7, #8]
 8010834:	601a      	str	r2, [r3, #0]
    }
}
 8010836:	bf00      	nop
 8010838:	3710      	adds	r7, #16
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}

0801083e <FreeSignatureCtx>:
/* Free dynamic data in a signature context object.
 *
 * @param [in, out] sigCtx  Signature context object.
 */
void FreeSignatureCtx(SignatureCtx* sigCtx)
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b086      	sub	sp, #24
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
    if (sigCtx == NULL)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d061      	beq.n	8010910 <FreeSignatureCtx+0xd2>
        return;

    if (sigCtx->digest) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00b      	beq.n	801086c <FreeSignatureCtx+0x2e>
        XFREE(sigCtx->digest, sigCtx->heap, DYNAMIC_TYPE_DIGEST);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	617b      	str	r3, [r7, #20]
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d002      	beq.n	8010866 <FreeSignatureCtx+0x28>
 8010860:	6978      	ldr	r0, [r7, #20]
 8010862:	f008 f9bf 	bl	8018be4 <wolfSSL_Free>
        sigCtx->digest = NULL;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	605a      	str	r2, [r3, #4]
    }
#if !(defined(NO_RSA) && defined(NO_DSA))
    if (sigCtx->sigCpy) {
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d00b      	beq.n	801088c <FreeSignatureCtx+0x4e>
        XFREE(sigCtx->sigCpy, sigCtx->heap, DYNAMIC_TYPE_SIGNATURE);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	613b      	str	r3, [r7, #16]
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d002      	beq.n	8010886 <FreeSignatureCtx+0x48>
 8010880:	6938      	ldr	r0, [r7, #16]
 8010882:	f008 f9af 	bl	8018be4 <wolfSSL_Free>
        sigCtx->sigCpy = NULL;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	60da      	str	r2, [r3, #12]
    }
#endif
#ifndef NO_ASN_CRYPT
    if (sigCtx->key.ptr) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	695b      	ldr	r3, [r3, #20]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d039      	beq.n	8010908 <FreeSignatureCtx+0xca>
        switch (sigCtx->keyOID) {
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010898:	f240 228e 	movw	r2, #654	; 0x28e
 801089c:	4293      	cmp	r3, r2
 801089e:	d00b      	beq.n	80108b8 <FreeSignatureCtx+0x7a>
 80108a0:	f240 228e 	movw	r2, #654	; 0x28e
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d82b      	bhi.n	8010900 <FreeSignatureCtx+0xc2>
 80108a8:	f240 2206 	movw	r2, #518	; 0x206
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d015      	beq.n	80108dc <FreeSignatureCtx+0x9e>
 80108b0:	f240 2285 	movw	r2, #645	; 0x285
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d123      	bne.n	8010900 <FreeSignatureCtx+0xc2>
        #ifndef NO_RSA
            #ifdef WC_RSA_PSS
            case RSAPSSk:
            #endif
            case RSAk:
                wc_FreeRsaKey(sigCtx->key.rsa);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	695b      	ldr	r3, [r3, #20]
 80108bc:	4618      	mov	r0, r3
 80108be:	f009 fbb2 	bl	801a026 <wc_FreeRsaKey>
                XFREE(sigCtx->key.rsa, sigCtx->heap, DYNAMIC_TYPE_RSA);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	695b      	ldr	r3, [r3, #20]
 80108c6:	60fb      	str	r3, [r7, #12]
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d002      	beq.n	80108d4 <FreeSignatureCtx+0x96>
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f008 f988 	bl	8018be4 <wolfSSL_Free>
                sigCtx->key.rsa = NULL;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2200      	movs	r2, #0
 80108d8:	615a      	str	r2, [r3, #20]
                break;
 80108da:	e012      	b.n	8010902 <FreeSignatureCtx+0xc4>
                    XFREE(sigCtx->key.ecc->nb_ctx, sigCtx->heap,
                          DYNAMIC_TYPE_TMP_BUFFER);
                }
            #endif /* WC_ECC_NONBLOCK && WOLFSSL_ASYNC_CRYPT_SW &&
                      WC_ASYNC_ENABLE_ECC */
                wc_ecc_free(sigCtx->key.ecc);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	695b      	ldr	r3, [r3, #20]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f006 fc8d 	bl	8017200 <wc_ecc_free>
                XFREE(sigCtx->key.ecc, sigCtx->heap, DYNAMIC_TYPE_ECC);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	695b      	ldr	r3, [r3, #20]
 80108ea:	60bb      	str	r3, [r7, #8]
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d002      	beq.n	80108f8 <FreeSignatureCtx+0xba>
 80108f2:	68b8      	ldr	r0, [r7, #8]
 80108f4:	f008 f976 	bl	8018be4 <wolfSSL_Free>
                sigCtx->key.ecc = NULL;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	615a      	str	r2, [r3, #20]
                break;
 80108fe:	e000      	b.n	8010902 <FreeSignatureCtx+0xc4>
                sigCtx->key.sphincs = NULL;
                break;
        #endif /* HAVE_SPHINCS */
        #endif /* HAVE_PQC  */
            default:
                break;
 8010900:	bf00      	nop
        } /* switch (keyOID) */
        sigCtx->key.ptr = NULL;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	615a      	str	r2, [r3, #20]
    }
#endif

    /* reset state, we are done */
    sigCtx->state = SIG_STATE_BEGIN;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	61da      	str	r2, [r3, #28]
 801090e:	e000      	b.n	8010912 <FreeSignatureCtx+0xd4>
        return;
 8010910:	bf00      	nop
}
 8010912:	3718      	adds	r7, #24
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <HashForSignature>:

#ifndef NO_ASN_CRYPT
static int HashForSignature(const byte* buf, word32 bufSz, word32 sigOID,
                            byte* digest, int* typeH, int* digestSz, int verify)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b086      	sub	sp, #24
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	607a      	str	r2, [r7, #4]
 8010924:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8010926:	2300      	movs	r3, #0
 8010928:	617b      	str	r3, [r7, #20]

    switch (sigOID) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f240 228f 	movw	r2, #655	; 0x28f
 8010930:	4293      	cmp	r3, r2
 8010932:	d00b      	beq.n	801094c <HashForSignature+0x34>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 801093a:	d218      	bcs.n	801096e <HashForSignature+0x56>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8010942:	d003      	beq.n	801094c <HashForSignature+0x34>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 801094a:	d110      	bne.n	801096e <HashForSignature+0x56>
    #endif
    #ifndef NO_SHA256
        case CTC_SHA256wRSA:
        case CTC_SHA256wECDSA:
        case CTC_SHA256wDSA:
            if ((ret = wc_Sha256Hash(buf, bufSz, digest)) == 0) {
 801094c:	683a      	ldr	r2, [r7, #0]
 801094e:	68b9      	ldr	r1, [r7, #8]
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f007 fe73 	bl	801863c <wc_Sha256Hash>
 8010956:	6178      	str	r0, [r7, #20]
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d10b      	bne.n	8010976 <HashForSignature+0x5e>
                *typeH    = SHA256h;
 801095e:	6a3b      	ldr	r3, [r7, #32]
 8010960:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010964:	601a      	str	r2, [r3, #0]
                *digestSz = WC_SHA256_DIGEST_SIZE;
 8010966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010968:	2220      	movs	r2, #32
 801096a:	601a      	str	r2, [r3, #0]
            }
            break;
 801096c:	e003      	b.n	8010976 <HashForSignature+0x5e>
            break;
    #endif
    #endif /* HAVE_PQC */

        default:
            ret = HASH_TYPE_E;
 801096e:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	e000      	b.n	8010978 <HashForSignature+0x60>
            break;
 8010976:	bf00      	nop
    (void)digest;
    (void)digestSz;
    (void)typeH;
    (void)verify;

    return ret;
 8010978:	697b      	ldr	r3, [r7, #20]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3718      	adds	r7, #24
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
	...

08010984 <ConfirmSignature>:
    const byte* buf, word32 bufSz,
    const byte* key, word32 keySz, word32 keyOID,
    const byte* sig, word32 sigSz, word32 sigOID,
    const byte* sigParams, word32 sigParamsSz,
    byte* rsaKeyIdx)
{
 8010984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010988:	b092      	sub	sp, #72	; 0x48
 801098a:	af04      	add	r7, sp, #16
 801098c:	6178      	str	r0, [r7, #20]
 801098e:	6139      	str	r1, [r7, #16]
 8010990:	60fa      	str	r2, [r7, #12]
 8010992:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	637b      	str	r3, [r7, #52]	; 0x34
#if defined(WOLFSSL_RENESAS_TSIP_TLS) || defined(WOLFSSL_RENESAS_SCEPROTECT)
    CertAttribute* certatt = NULL;
#endif

    if (sigCtx == NULL || buf == NULL || bufSz == 0 || key == NULL ||
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d011      	beq.n	80109c2 <ConfirmSignature+0x3e>
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00e      	beq.n	80109c2 <ConfirmSignature+0x3e>
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00b      	beq.n	80109c2 <ConfirmSignature+0x3e>
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d008      	beq.n	80109c2 <ConfirmSignature+0x3e>
 80109b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d005      	beq.n	80109c2 <ConfirmSignature+0x3e>
        keySz == 0 || sig == NULL || sigSz == 0) {
 80109b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d002      	beq.n	80109c2 <ConfirmSignature+0x3e>
 80109bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d102      	bne.n	80109c8 <ConfirmSignature+0x44>
        return BAD_FUNC_ARG;
 80109c2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80109c6:	e214      	b.n	8010df2 <ConfirmSignature+0x46e>
        certatt->certSz = bufSz;
    }
#endif

#ifndef NO_ASN_CRYPT
    switch (sigCtx->state) {
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	69db      	ldr	r3, [r3, #28]
 80109cc:	2b04      	cmp	r3, #4
 80109ce:	f200 81fd 	bhi.w	8010dcc <ConfirmSignature+0x448>
 80109d2:	a201      	add	r2, pc, #4	; (adr r2, 80109d8 <ConfirmSignature+0x54>)
 80109d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d8:	080109ed 	.word	0x080109ed
 80109dc:	08010a29 	.word	0x08010a29
 80109e0:	08010ad7 	.word	0x08010ad7
 80109e4:	08010c09 	.word	0x08010c09
 80109e8:	08010cbf 	.word	0x08010cbf
        case SIG_STATE_BEGIN:
        {
            sigCtx->keyOID = keyOID; /* must set early for cleanup */
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109f0:	629a      	str	r2, [r3, #40]	; 0x28

            sigCtx->digest = (byte*)XMALLOC(WC_MAX_DIGEST_SIZE, sigCtx->heap,
 80109f2:	2020      	movs	r0, #32
 80109f4:	f008 f8da 	bl	8018bac <wolfSSL_Malloc>
 80109f8:	4602      	mov	r2, r0
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	605a      	str	r2, [r3, #4]
                                                    DYNAMIC_TYPE_DIGEST);
            if (sigCtx->digest == NULL) {
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d103      	bne.n	8010a0e <ConfirmSignature+0x8a>
                ERROR_OUT(MEMORY_E, exit_cs);
 8010a06:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8010a0c:	e1ed      	b.n	8010dea <ConfirmSignature+0x466>
            }

        #if !defined(NO_RSA) && defined(WC_RSA_PSS)
            /* RSA PSS Defaults */
            sigCtx->hash = WC_HASH_TYPE_SHA;
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	2204      	movs	r2, #4
 8010a12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            sigCtx->mgf = WC_MGF1SHA1;
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	221a      	movs	r2, #26
 8010a1a:	631a      	str	r2, [r3, #48]	; 0x30
            sigCtx->saltLen = 20;
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	2214      	movs	r2, #20
 8010a20:	635a      	str	r2, [r3, #52]	; 0x34
        #endif

            sigCtx->state = SIG_STATE_HASH;
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	2201      	movs	r2, #1
 8010a26:	61da      	str	r2, [r3, #28]
        FALL_THROUGH;

        case SIG_STATE_HASH:
        {
        #if !defined(NO_RSA) && defined(WC_RSA_PSS)
            if (sigOID == RSAPSSk) {
 8010a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a2a:	f240 228e 	movw	r2, #654	; 0x28e
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d139      	bne.n	8010aa6 <ConfirmSignature+0x122>
                word32 fakeSigOID = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	623b      	str	r3, [r7, #32]
                ret = DecodeRsaPssParams(sigParams, sigParamsSz, &sigCtx->hash,
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	3334      	adds	r3, #52	; 0x34
 8010a46:	9300      	str	r3, [sp, #0]
 8010a48:	460b      	mov	r3, r1
 8010a4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a4c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010a4e:	f7fd fe86 	bl	800e75e <DecodeRsaPssParams>
 8010a52:	6378      	str	r0, [r7, #52]	; 0x34
                    &sigCtx->mgf, &sigCtx->saltLen);
                if (ret != 0) {
 8010a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f040 81ba 	bne.w	8010dd0 <ConfirmSignature+0x44c>
                    goto exit_cs;
                }
                ret = RsaPssHashOidToSigOid(sigCtx->hash, &fakeSigOID);
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a62:	461a      	mov	r2, r3
 8010a64:	f107 0320 	add.w	r3, r7, #32
 8010a68:	4619      	mov	r1, r3
 8010a6a:	4610      	mov	r0, r2
 8010a6c:	f7fd fe5d 	bl	800e72a <RsaPssHashOidToSigOid>
 8010a70:	6378      	str	r0, [r7, #52]	; 0x34
                if (ret != 0) {
 8010a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	f040 81ad 	bne.w	8010dd4 <ConfirmSignature+0x450>
                    goto exit_cs;
                }
                /* Decode parameters. */
                ret = HashForSignature(buf, bufSz, fakeSigOID, sigCtx->digest,
 8010a7a:	6a39      	ldr	r1, [r7, #32]
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	6858      	ldr	r0, [r3, #4]
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	3320      	adds	r3, #32
 8010a84:	697a      	ldr	r2, [r7, #20]
 8010a86:	3224      	adds	r2, #36	; 0x24
 8010a88:	2401      	movs	r4, #1
 8010a8a:	9402      	str	r4, [sp, #8]
 8010a8c:	9201      	str	r2, [sp, #4]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	4603      	mov	r3, r0
 8010a92:	460a      	mov	r2, r1
 8010a94:	68f9      	ldr	r1, [r7, #12]
 8010a96:	6938      	ldr	r0, [r7, #16]
 8010a98:	f7ff ff3e 	bl	8010918 <HashForSignature>
 8010a9c:	6378      	str	r0, [r7, #52]	; 0x34
                    &sigCtx->typeH, &sigCtx->digestSz, 1);
                if (ret != 0) {
 8010a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d015      	beq.n	8010ad0 <ConfirmSignature+0x14c>
                    goto exit_cs;
 8010aa4:	e1a1      	b.n	8010dea <ConfirmSignature+0x466>
                }
            }
            else
        #endif
            {
                ret = HashForSignature(buf, bufSz, sigOID, sigCtx->digest,
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	6859      	ldr	r1, [r3, #4]
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	3320      	adds	r3, #32
 8010aae:	697a      	ldr	r2, [r7, #20]
 8010ab0:	3224      	adds	r2, #36	; 0x24
 8010ab2:	2001      	movs	r0, #1
 8010ab4:	9002      	str	r0, [sp, #8]
 8010ab6:	9201      	str	r2, [sp, #4]
 8010ab8:	9300      	str	r3, [sp, #0]
 8010aba:	460b      	mov	r3, r1
 8010abc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010abe:	68f9      	ldr	r1, [r7, #12]
 8010ac0:	6938      	ldr	r0, [r7, #16]
 8010ac2:	f7ff ff29 	bl	8010918 <HashForSignature>
 8010ac6:	6378      	str	r0, [r7, #52]	; 0x34
                                       &sigCtx->typeH, &sigCtx->digestSz, 1);
                if (ret != 0) {
 8010ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f040 8184 	bne.w	8010dd8 <ConfirmSignature+0x454>
                    goto exit_cs;
                }
            }

            sigCtx->state = SIG_STATE_KEY;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	2202      	movs	r2, #2
 8010ad4:	61da      	str	r2, [r3, #28]
 8010ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ad8:	f240 228e 	movw	r2, #654	; 0x28e
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d00f      	beq.n	8010b00 <ConfirmSignature+0x17c>
 8010ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae2:	f240 228e 	movw	r2, #654	; 0x28e
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	f200 8082 	bhi.w	8010bf0 <ConfirmSignature+0x26c>
 8010aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aee:	f240 2206 	movw	r2, #518	; 0x206
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d04d      	beq.n	8010b92 <ConfirmSignature+0x20e>
 8010af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010af8:	f240 2285 	movw	r2, #645	; 0x285
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d177      	bne.n	8010bf0 <ConfirmSignature+0x26c>
                #ifdef WC_RSA_PSS
                case RSAPSSk:
                #endif
                case RSAk:
                {
                    word32 idx = 0;
 8010b00:	2300      	movs	r3, #0
 8010b02:	61fb      	str	r3, [r7, #28]

                    sigCtx->key.rsa = (RsaKey*)XMALLOC(sizeof(RsaKey),
 8010b04:	f241 107c 	movw	r0, #4476	; 0x117c
 8010b08:	f008 f850 	bl	8018bac <wolfSSL_Malloc>
 8010b0c:	4602      	mov	r2, r0
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	615a      	str	r2, [r3, #20]
                                                sigCtx->heap, DYNAMIC_TYPE_RSA);
                    sigCtx->sigCpy = (byte*)XMALLOC(sigSz, sigCtx->heap,
 8010b12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8010b14:	f008 f84a 	bl	8018bac <wolfSSL_Malloc>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	60da      	str	r2, [r3, #12]
                                                        DYNAMIC_TYPE_SIGNATURE);
                    if (sigCtx->key.rsa == NULL || sigCtx->sigCpy == NULL) {
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	695b      	ldr	r3, [r3, #20]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d003      	beq.n	8010b2e <ConfirmSignature+0x1aa>
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d103      	bne.n	8010b36 <ConfirmSignature+0x1b2>
                        ERROR_OUT(MEMORY_E, exit_cs);
 8010b2e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010b32:	637b      	str	r3, [r7, #52]	; 0x34
 8010b34:	e159      	b.n	8010dea <ConfirmSignature+0x466>
                    }
                    if ((ret = wc_InitRsaKey_ex(sigCtx->key.rsa, sigCtx->heap,
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	6958      	ldr	r0, [r3, #20]
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	6819      	ldr	r1, [r3, #0]
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	699b      	ldr	r3, [r3, #24]
 8010b42:	461a      	mov	r2, r3
 8010b44:	f009 f9db 	bl	8019efe <wc_InitRsaKey_ex>
 8010b48:	6378      	str	r0, [r7, #52]	; 0x34
 8010b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f040 8145 	bne.w	8010ddc <ConfirmSignature+0x458>
                                                        sigCtx->devId)) != 0) {
                        goto exit_cs;
                    }
                    if (sigSz > MAX_ENCODED_SIG_SZ) {
 8010b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b58:	d903      	bls.n	8010b62 <ConfirmSignature+0x1de>
                        WOLFSSL_MSG("Verify Signature is too big");
                        ERROR_OUT(BUFFER_E, exit_cs);
 8010b5a:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8010b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8010b60:	e143      	b.n	8010dea <ConfirmSignature+0x466>
                    }
                    if ((ret = wc_RsaPublicKeyDecode(key, &idx, sigCtx->key.rsa,
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	695a      	ldr	r2, [r3, #20]
 8010b66:	f107 011c 	add.w	r1, r7, #28
 8010b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b6c:	68b8      	ldr	r0, [r7, #8]
 8010b6e:	f7fe f9a8 	bl	800eec2 <wc_RsaPublicKeyDecode>
 8010b72:	6378      	str	r0, [r7, #52]	; 0x34
 8010b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	f040 8132 	bne.w	8010de0 <ConfirmSignature+0x45c>
                                                                 keySz)) != 0) {
                        WOLFSSL_MSG("ASN Key decode error RSA");
                        WOLFSSL_ERROR_VERBOSE(ret);
                        goto exit_cs;
                    }
                    XMEMCPY(sigCtx->sigCpy, sig, sigSz);
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010b82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010b84:	4618      	mov	r0, r3
 8010b86:	f010 fbad 	bl	80212e4 <memcpy>
                    sigCtx->out = NULL;
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	609a      	str	r2, [r3, #8]
 8010b90:	e033      	b.n	8010bfa <ConfirmSignature+0x276>
                }
            #endif /* !NO_DSA && !HAVE_SELFTEST */
            #ifdef HAVE_ECC
                case ECDSAk:
                {
                    word32 idx = 0;
 8010b92:	2300      	movs	r3, #0
 8010b94:	61bb      	str	r3, [r7, #24]
                defined(WC_ASYNC_ENABLE_ECC)
                    ecc_nb_ctx_t* nbCtx;
            #endif /* WC_ECC_NONBLOCK && WOLFSSL_ASYNC_CRYPT_SW &&
                      WC_ASYNC_ENABLE_ECC */

                    sigCtx->verify = 0;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	611a      	str	r2, [r3, #16]
                    sigCtx->key.ecc = (ecc_key*)XMALLOC(sizeof(ecc_key),
 8010b9c:	f44f 7051 	mov.w	r0, #836	; 0x344
 8010ba0:	f008 f804 	bl	8018bac <wolfSSL_Malloc>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	615a      	str	r2, [r3, #20]
                                                sigCtx->heap, DYNAMIC_TYPE_ECC);
                    if (sigCtx->key.ecc == NULL) {
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	695b      	ldr	r3, [r3, #20]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d103      	bne.n	8010bba <ConfirmSignature+0x236>
                        ERROR_OUT(MEMORY_E, exit_cs);
 8010bb2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8010bb8:	e117      	b.n	8010dea <ConfirmSignature+0x466>
                    }
                    if ((ret = wc_ecc_init_ex(sigCtx->key.ecc, sigCtx->heap,
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	6958      	ldr	r0, [r3, #20]
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	6819      	ldr	r1, [r3, #0]
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	f006 fac1 	bl	801714e <wc_ecc_init_ex>
 8010bcc:	6378      	str	r0, [r7, #52]	; 0x34
 8010bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f2c0 8107 	blt.w	8010de4 <ConfirmSignature+0x460>
                            goto exit_cs;
                        }
                    }
            #endif /* WC_ECC_NONBLOCK && WOLFSSL_ASYNC_CRYPT_SW &&
                      WC_ASYNC_ENABLE_ECC */
                    ret = wc_EccPublicKeyDecode(key, &idx, sigCtx->key.ecc,
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	695a      	ldr	r2, [r3, #20]
 8010bda:	f107 0118 	add.w	r1, r7, #24
 8010bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be0:	68b8      	ldr	r0, [r7, #8]
 8010be2:	f003 fbd8 	bl	8014396 <wc_EccPublicKeyDecode>
 8010be6:	6378      	str	r0, [r7, #52]	; 0x34
                                                                         keySz);
                    if (ret < 0) {
 8010be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	da04      	bge.n	8010bf8 <ConfirmSignature+0x274>
                        WOLFSSL_MSG("ASN Key import error ECC");
                        WOLFSSL_ERROR_VERBOSE(ret);
                        goto exit_cs;
 8010bee:	e0fc      	b.n	8010dea <ConfirmSignature+0x466>
                }
            #endif /* HAVE_SPHINCS */
            #endif /* HAVE_PQC */
                default:
                    WOLFSSL_MSG("Verify Key type unknown");
                    ret = ASN_UNKNOWN_OID_E;
 8010bf0:	f06f 0393 	mvn.w	r3, #147	; 0x93
 8010bf4:	637b      	str	r3, [r7, #52]	; 0x34
                    WOLFSSL_ERROR_VERBOSE(ret);
                    break;
 8010bf6:	e000      	b.n	8010bfa <ConfirmSignature+0x276>
                    break;
 8010bf8:	bf00      	nop
            } /* switch (keyOID) */

            if (ret != 0) {
 8010bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f040 80f3 	bne.w	8010de8 <ConfirmSignature+0x464>
                goto exit_cs;
            }

            sigCtx->state = SIG_STATE_DO;
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	2203      	movs	r2, #3
 8010c06:	61da      	str	r2, [r3, #28]
 8010c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c0a:	f240 228e 	movw	r2, #654	; 0x28e
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d00e      	beq.n	8010c30 <ConfirmSignature+0x2ac>
 8010c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c14:	f240 228e 	movw	r2, #654	; 0x28e
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d845      	bhi.n	8010ca8 <ConfirmSignature+0x324>
 8010c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c1e:	f240 2206 	movw	r2, #518	; 0x206
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d02d      	beq.n	8010c82 <ConfirmSignature+0x2fe>
 8010c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c28:	f240 2285 	movw	r2, #645	; 0x285
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d13b      	bne.n	8010ca8 <ConfirmSignature+0x324>
            switch (keyOID) {
            #ifndef NO_RSA
                case RSAk:
                #ifdef WC_RSA_PSS
                case RSAPSSk:
                if (sigOID == RSAPSSk) {
 8010c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c32:	f240 228e 	movw	r2, #654	; 0x28e
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d117      	bne.n	8010c6a <ConfirmSignature+0x2e6>
                    /* TODO: pkCbRsaPss - RSA PSS callback. */
                    ret = wc_RsaPSS_VerifyInline_ex(sigCtx->sigCpy, sigSz,
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	68d8      	ldr	r0, [r3, #12]
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	f103 0408 	add.w	r4, r3, #8
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c4e:	697a      	ldr	r2, [r7, #20]
 8010c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
                        &sigCtx->out, sigCtx->hash, sigCtx->mgf,
                        sigCtx->saltLen, sigCtx->key.rsa);
 8010c52:	6979      	ldr	r1, [r7, #20]
 8010c54:	6949      	ldr	r1, [r1, #20]
                    ret = wc_RsaPSS_VerifyInline_ex(sigCtx->sigCpy, sigSz,
 8010c56:	9102      	str	r1, [sp, #8]
 8010c58:	9201      	str	r2, [sp, #4]
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	462b      	mov	r3, r5
 8010c5e:	4622      	mov	r2, r4
 8010c60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010c62:	f00a faa4 	bl	801b1ae <wc_RsaPSS_VerifyInline_ex>
 8010c66:	6378      	str	r0, [r7, #52]	; 0x34
                    {
                        ret = wc_RsaSSL_VerifyInline(sigCtx->sigCpy, sigSz,
                                                 &sigCtx->out, sigCtx->key.rsa);
                    }
                }
                break;
 8010c68:	e01f      	b.n	8010caa <ConfirmSignature+0x326>
                        ret = wc_RsaSSL_VerifyInline(sigCtx->sigCpy, sigSz,
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	68d8      	ldr	r0, [r3, #12]
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	f103 0208 	add.w	r2, r3, #8
                                                 &sigCtx->out, sigCtx->key.rsa);
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	695b      	ldr	r3, [r3, #20]
                        ret = wc_RsaSSL_VerifyInline(sigCtx->sigCpy, sigSz,
 8010c78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010c7a:	f00a fa69 	bl	801b150 <wc_RsaSSL_VerifyInline>
 8010c7e:	6378      	str	r0, [r7, #52]	; 0x34
                break;
 8010c80:	e013      	b.n	8010caa <ConfirmSignature+0x326>
                #else
                    if (!sigCtx->pkCbEcc || ret == CRYPTOCB_UNAVAILABLE)
                #endif /* WOLFSSL_RENESAS_SCEPROTECT */
                #endif /* HAVE_PK_CALLBACKS */
                    {
                        ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	6859      	ldr	r1, [r3, #4]
                                            sigCtx->digestSz, &sigCtx->verify,
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	3310      	adds	r3, #16
                                            sigCtx->key.ecc);
 8010c90:	697a      	ldr	r2, [r7, #20]
 8010c92:	6952      	ldr	r2, [r2, #20]
                        ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
 8010c94:	9201      	str	r2, [sp, #4]
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	4603      	mov	r3, r0
 8010c9a:	460a      	mov	r2, r1
 8010c9c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010c9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010ca0:	f006 ff00 	bl	8017aa4 <wc_ecc_verify_hash>
 8010ca4:	6378      	str	r0, [r7, #52]	; 0x34
                    }
                    break;
 8010ca6:	e000      	b.n	8010caa <ConfirmSignature+0x326>
                    break;
                }
            #endif /* HAVE_SPHINCS */
            #endif /* HAVE_PQC */
                default:
                    break;
 8010ca8:	bf00      	nop
            if (ret == WC_PENDING_E) {
                goto exit_cs;
            }
        #endif

            if (ret < 0) {
 8010caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	da03      	bge.n	8010cb8 <ConfirmSignature+0x334>
                /* treat all errors as ASN_SIG_CONFIRM_E */
                ret = ASN_SIG_CONFIRM_E;
 8010cb0:	f06f 039a 	mvn.w	r3, #154	; 0x9a
 8010cb4:	637b      	str	r3, [r7, #52]	; 0x34
                WOLFSSL_ERROR_VERBOSE(ret);
                goto exit_cs;
 8010cb6:	e098      	b.n	8010dea <ConfirmSignature+0x466>
            }

            sigCtx->state = SIG_STATE_CHECK;
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	2204      	movs	r2, #4
 8010cbc:	61da      	str	r2, [r3, #28]
 8010cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cc0:	f240 228e 	movw	r2, #654	; 0x28e
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d00e      	beq.n	8010ce6 <ConfirmSignature+0x362>
 8010cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cca:	f240 228e 	movw	r2, #654	; 0x28e
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d878      	bhi.n	8010dc4 <ConfirmSignature+0x440>
 8010cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cd4:	f240 2206 	movw	r2, #518	; 0x206
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d068      	beq.n	8010dae <ConfirmSignature+0x42a>
 8010cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cde:	f240 2285 	movw	r2, #645	; 0x285
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d16e      	bne.n	8010dc4 <ConfirmSignature+0x440>
            switch (keyOID) {
            #ifndef NO_RSA
                case RSAk:
                #ifdef WC_RSA_PSS
                case RSAPSSk:
                if (sigOID == RSAPSSk) {
 8010ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ce8:	f240 228e 	movw	r2, #654	; 0x28e
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d123      	bne.n	8010d38 <ConfirmSignature+0x3b4>
                       (HAVE_FIPS_VERSION == 2))
                    ret = wc_RsaPSS_CheckPadding_ex(sigCtx->digest,
                        sigCtx->digestSz, sigCtx->out, ret, sigCtx->hash,
                        sigCtx->saltLen, 0);
                #else
                    ret = wc_RsaPSS_CheckPadding_ex2(sigCtx->digest,
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	685e      	ldr	r6, [r3, #4]
                        sigCtx->digestSz, sigCtx->out, ret, sigCtx->hash,
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    ret = wc_RsaPSS_CheckPadding_ex2(sigCtx->digest,
 8010cf8:	4698      	mov	r8, r3
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	689b      	ldr	r3, [r3, #8]
 8010cfe:	607b      	str	r3, [r7, #4]
 8010d00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d02:	6039      	str	r1, [r7, #0]
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
                        sigCtx->saltLen, wc_RsaEncryptSize(sigCtx->key.rsa) * 8,
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	695b      	ldr	r3, [r3, #20]
 8010d12:	4618      	mov	r0, r3
 8010d14:	f00a fafa 	bl	801b30c <wc_RsaEncryptSize>
 8010d18:	4603      	mov	r3, r0
                    ret = wc_RsaPSS_CheckPadding_ex2(sigCtx->digest,
 8010d1a:	00db      	lsls	r3, r3, #3
 8010d1c:	697a      	ldr	r2, [r7, #20]
 8010d1e:	6812      	ldr	r2, [r2, #0]
 8010d20:	9203      	str	r2, [sp, #12]
 8010d22:	9302      	str	r3, [sp, #8]
 8010d24:	9501      	str	r5, [sp, #4]
 8010d26:	9400      	str	r4, [sp, #0]
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	4641      	mov	r1, r8
 8010d2e:	4630      	mov	r0, r6
 8010d30:	f00a fa6c 	bl	801b20c <wc_RsaPSS_CheckPadding_ex2>
 8010d34:	6378      	str	r0, [r7, #52]	; 0x34
                        sigCtx->heap);
                #endif
                    break;
 8010d36:	e048      	b.n	8010dca <ConfirmSignature+0x446>
                #if defined(WOLFSSL_RENESAS_TSIP_TLS) || \
                                            defined(WOLFSSL_RENESAS_SCEPROTECT)
                    if (sigCtx->CertAtt.verifyByTSIP_SCE == 1) break;
                #endif
                #ifdef WOLFSSL_SMALL_STACK
                    byte* encodedSig = (byte*)XMALLOC(MAX_ENCODED_SIG_SZ,
 8010d38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010d3c:	f007 ff36 	bl	8018bac <wolfSSL_Malloc>
 8010d40:	6338      	str	r0, [r7, #48]	; 0x30
                                        sigCtx->heap, DYNAMIC_TYPE_TMP_BUFFER);
                    if (encodedSig == NULL) {
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d103      	bne.n	8010d50 <ConfirmSignature+0x3cc>
                        ERROR_OUT(MEMORY_E, exit_cs);
 8010d48:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d4e:	e04c      	b.n	8010dea <ConfirmSignature+0x466>
                    }
                #else
                    byte encodedSig[MAX_ENCODED_SIG_SZ];
                #endif

                    verifySz = ret;
 8010d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d52:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* make sure we're right justified */
                    encodedSigSz = wc_EncodeSignature(encodedSig,
                            sigCtx->digest, sigCtx->digestSz, sigCtx->typeH);
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	6859      	ldr	r1, [r3, #4]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    encodedSigSz = wc_EncodeSignature(encodedSig,
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d64:	f7ff fd05 	bl	8010772 <wc_EncodeSignature>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (encodedSigSz == verifySz && sigCtx->out != NULL &&
 8010d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d110      	bne.n	8010d96 <ConfirmSignature+0x412>
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	689b      	ldr	r3, [r3, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00c      	beq.n	8010d96 <ConfirmSignature+0x412>
                        XMEMCMP(sigCtx->out, encodedSig, encodedSigSz) == 0) {
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010d84:	4618      	mov	r0, r3
 8010d86:	f010 fa9d 	bl	80212c4 <memcmp>
 8010d8a:	4603      	mov	r3, r0
                    if (encodedSigSz == verifySz && sigCtx->out != NULL &&
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d102      	bne.n	8010d96 <ConfirmSignature+0x412>
                        ret = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	637b      	str	r3, [r7, #52]	; 0x34
 8010d94:	e002      	b.n	8010d9c <ConfirmSignature+0x418>
                    }
                    else {
                        WOLFSSL_MSG("RSA SSL verify match encode error");
                        ret = ASN_SIG_CONFIRM_E;
 8010d96:	f06f 039a 	mvn.w	r3, #154	; 0x9a
 8010d9a:	637b      	str	r3, [r7, #52]	; 0x34
                        WOLFSSL_ERROR_VERBOSE(ret);
                    }

                #ifdef WOLFSSL_SMALL_STACK
                    XFREE(encodedSig, sigCtx->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8010d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d010      	beq.n	8010dc8 <ConfirmSignature+0x444>
 8010da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010da8:	f007 ff1c 	bl	8018be4 <wolfSSL_Free>
                #endif
                    break;
 8010dac:	e00c      	b.n	8010dc8 <ConfirmSignature+0x444>
                }
            #endif /* !NO_DSA && !HAVE_SELFTEST */
            #ifdef HAVE_ECC
                case ECDSAk:
                {
                    if (sigCtx->verify == 1) {
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d102      	bne.n	8010dbc <ConfirmSignature+0x438>
                        ret = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	637b      	str	r3, [r7, #52]	; 0x34
                    else {
                        WOLFSSL_MSG("ECC Verify didn't match");
                        ret = ASN_SIG_CONFIRM_E;
                        WOLFSSL_ERROR_VERBOSE(ret);
                    }
                    break;
 8010dba:	e006      	b.n	8010dca <ConfirmSignature+0x446>
                        ret = ASN_SIG_CONFIRM_E;
 8010dbc:	f06f 039a 	mvn.w	r3, #154	; 0x9a
 8010dc0:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8010dc2:	e002      	b.n	8010dca <ConfirmSignature+0x446>
                    break;
                }
            #endif /* HAVE_SPHINCS */
            #endif /* HAVE_PQC */
                default:
                    break;
 8010dc4:	bf00      	nop
 8010dc6:	e010      	b.n	8010dea <ConfirmSignature+0x466>
                    break;
 8010dc8:	bf00      	nop
            }  /* switch (keyOID) */

            break;
 8010dca:	e00e      	b.n	8010dea <ConfirmSignature+0x466>
        } /* SIG_STATE_CHECK */

        default:
            break;
 8010dcc:	bf00      	nop
 8010dce:	e00c      	b.n	8010dea <ConfirmSignature+0x466>
                    goto exit_cs;
 8010dd0:	bf00      	nop
 8010dd2:	e00a      	b.n	8010dea <ConfirmSignature+0x466>
                    goto exit_cs;
 8010dd4:	bf00      	nop
 8010dd6:	e008      	b.n	8010dea <ConfirmSignature+0x466>
                    goto exit_cs;
 8010dd8:	bf00      	nop
 8010dda:	e006      	b.n	8010dea <ConfirmSignature+0x466>
                        goto exit_cs;
 8010ddc:	bf00      	nop
 8010dde:	e004      	b.n	8010dea <ConfirmSignature+0x466>
                        goto exit_cs;
 8010de0:	bf00      	nop
 8010de2:	e002      	b.n	8010dea <ConfirmSignature+0x466>
                        goto exit_cs;
 8010de4:	bf00      	nop
 8010de6:	e000      	b.n	8010dea <ConfirmSignature+0x466>
                goto exit_cs;
 8010de8:	bf00      	nop
#ifdef WOLFSSL_ASYNC_CRYPT
    if (ret == WC_PENDING_E)
        return ret;
#endif

    FreeSignatureCtx(sigCtx);
 8010dea:	6978      	ldr	r0, [r7, #20]
 8010dec:	f7ff fd27 	bl	801083e <FreeSignatureCtx>

    return ret;
 8010df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3738      	adds	r7, #56	; 0x38
 8010df6:	46bd      	mov	sp, r7
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dfc <MatchBaseName>:

#ifndef IGNORE_NAME_CONSTRAINTS

static int MatchBaseName(int type, const char* name, int nameSz,
                         const char* base, int baseSz)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b088      	sub	sp, #32
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	607a      	str	r2, [r7, #4]
 8010e08:	603b      	str	r3, [r7, #0]
    if (base == NULL || baseSz <= 0 || name == NULL || nameSz <= 0 ||
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d019      	beq.n	8010e44 <MatchBaseName+0x48>
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	dd16      	ble.n	8010e44 <MatchBaseName+0x48>
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d013      	beq.n	8010e44 <MatchBaseName+0x48>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	dd10      	ble.n	8010e44 <MatchBaseName+0x48>
            name[0] == '.' || nameSz < baseSz ||
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	781b      	ldrb	r3, [r3, #0]
    if (base == NULL || baseSz <= 0 || name == NULL || nameSz <= 0 ||
 8010e26:	2b2e      	cmp	r3, #46	; 0x2e
 8010e28:	d00c      	beq.n	8010e44 <MatchBaseName+0x48>
            name[0] == '.' || nameSz < baseSz ||
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	db08      	blt.n	8010e44 <MatchBaseName+0x48>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d007      	beq.n	8010e48 <MatchBaseName+0x4c>
            (type != ASN_RFC822_TYPE && type != ASN_DNS_TYPE &&
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	d004      	beq.n	8010e48 <MatchBaseName+0x4c>
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d001      	beq.n	8010e48 <MatchBaseName+0x4c>
             type != ASN_DIR_TYPE)) {
        return 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	e0a0      	b.n	8010f8a <MatchBaseName+0x18e>
    }

    if (type == ASN_DIR_TYPE)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2b04      	cmp	r3, #4
 8010e4c:	d10c      	bne.n	8010e68 <MatchBaseName+0x6c>
        return XMEMCMP(name, base, baseSz) == 0;
 8010e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e50:	461a      	mov	r2, r3
 8010e52:	6839      	ldr	r1, [r7, #0]
 8010e54:	68b8      	ldr	r0, [r7, #8]
 8010e56:	f010 fa35 	bl	80212c4 <memcmp>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	bf0c      	ite	eq
 8010e60:	2301      	moveq	r3, #1
 8010e62:	2300      	movne	r3, #0
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	e090      	b.n	8010f8a <MatchBaseName+0x18e>

    /* If an email type, handle special cases where the base is only
     * a domain, or is an email address itself. */
    if (type == ASN_RFC822_TYPE) {
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d146      	bne.n	8010efc <MatchBaseName+0x100>
        const char* p = NULL;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	61fb      	str	r3, [r7, #28]
        int count = 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	61bb      	str	r3, [r7, #24]

        if (base[0] != '.') {
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e7c:	d018      	beq.n	8010eb0 <MatchBaseName+0xb4>
            p = base;
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	61fb      	str	r3, [r7, #28]
            count = 0;
 8010e82:	2300      	movs	r3, #0
 8010e84:	61bb      	str	r3, [r7, #24]

            /* find the '@' in the base */
            while (*p != '@' && count < baseSz) {
 8010e86:	e005      	b.n	8010e94 <MatchBaseName+0x98>
                count++;
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	61bb      	str	r3, [r7, #24]
                p++;
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	3301      	adds	r3, #1
 8010e92:	61fb      	str	r3, [r7, #28]
            while (*p != '@' && count < baseSz) {
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	2b40      	cmp	r3, #64	; 0x40
 8010e9a:	d003      	beq.n	8010ea4 <MatchBaseName+0xa8>
 8010e9c:	69ba      	ldr	r2, [r7, #24]
 8010e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	dbf1      	blt.n	8010e88 <MatchBaseName+0x8c>
            }

            /* No '@' in base, reset p to NULL */
            if (count >= baseSz)
 8010ea4:	69ba      	ldr	r2, [r7, #24]
 8010ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	db01      	blt.n	8010eb0 <MatchBaseName+0xb4>
                p = NULL;
 8010eac:	2300      	movs	r3, #0
 8010eae:	61fb      	str	r3, [r7, #28]
        }

        if (p == NULL) {
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d122      	bne.n	8010efc <MatchBaseName+0x100>
            /* Base isn't an email address, it is a domain name,
             * wind the name forward one character past its '@'. */
            p = name;
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	61fb      	str	r3, [r7, #28]
            count = 0;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	61bb      	str	r3, [r7, #24]
            while (*p != '@' && count < baseSz) {
 8010ebe:	e005      	b.n	8010ecc <MatchBaseName+0xd0>
                count++;
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	61bb      	str	r3, [r7, #24]
                p++;
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	3301      	adds	r3, #1
 8010eca:	61fb      	str	r3, [r7, #28]
            while (*p != '@' && count < baseSz) {
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	2b40      	cmp	r3, #64	; 0x40
 8010ed2:	d003      	beq.n	8010edc <MatchBaseName+0xe0>
 8010ed4:	69ba      	ldr	r2, [r7, #24]
 8010ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	dbf1      	blt.n	8010ec0 <MatchBaseName+0xc4>
            }

            if (count < baseSz && *p == '@') {
 8010edc:	69ba      	ldr	r2, [r7, #24]
 8010ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	da0b      	bge.n	8010efc <MatchBaseName+0x100>
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	2b40      	cmp	r3, #64	; 0x40
 8010eea:	d107      	bne.n	8010efc <MatchBaseName+0x100>
                name = p + 1;
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	3301      	adds	r3, #1
 8010ef0:	60bb      	str	r3, [r7, #8]
                nameSz -= count + 1;
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	1ad3      	subs	r3, r2, r3
 8010efa:	607b      	str	r3, [r7, #4]
    /* RFC 5280 section 4.2.1.10
     * "...Any DNS name that can be constructed by simply adding zero or more
     *  labels to the left-hand side of the name satisfies the name constraint."
     * i.e www.host.example.com works for host.example.com name constraint and
     * host1.example.com does not. */
    if (type == ASN_DNS_TYPE || (type == ASN_RFC822_TYPE && base[0] == '.')) {
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d006      	beq.n	8010f10 <MatchBaseName+0x114>
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d13c      	bne.n	8010f82 <MatchBaseName+0x186>
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f0e:	d138      	bne.n	8010f82 <MatchBaseName+0x186>
        int szAdjust = nameSz - baseSz;
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f14:	1ad3      	subs	r3, r2, r3
 8010f16:	617b      	str	r3, [r7, #20]
        name += szAdjust;
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	60bb      	str	r3, [r7, #8]
        nameSz -= szAdjust;
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	607b      	str	r3, [r7, #4]
    }

    while (nameSz > 0) {
 8010f28:	e02b      	b.n	8010f82 <MatchBaseName+0x186>
        if (XTOLOWER((unsigned char)*name++) !=
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	1c5a      	adds	r2, r3, #1
 8010f2e:	60ba      	str	r2, [r7, #8]
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	74fb      	strb	r3, [r7, #19]
 8010f34:	7cfb      	ldrb	r3, [r7, #19]
 8010f36:	3301      	adds	r3, #1
 8010f38:	4a16      	ldr	r2, [pc, #88]	; (8010f94 <MatchBaseName+0x198>)
 8010f3a:	4413      	add	r3, r2
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	f003 0303 	and.w	r3, r3, #3
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d103      	bne.n	8010f4e <MatchBaseName+0x152>
 8010f46:	7cfb      	ldrb	r3, [r7, #19]
 8010f48:	f103 0220 	add.w	r2, r3, #32
 8010f4c:	e000      	b.n	8010f50 <MatchBaseName+0x154>
 8010f4e:	7cfa      	ldrb	r2, [r7, #19]
                                               XTOLOWER((unsigned char)*base++))
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	1c59      	adds	r1, r3, #1
 8010f54:	6039      	str	r1, [r7, #0]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	74bb      	strb	r3, [r7, #18]
 8010f5a:	7cbb      	ldrb	r3, [r7, #18]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	490d      	ldr	r1, [pc, #52]	; (8010f94 <MatchBaseName+0x198>)
 8010f60:	440b      	add	r3, r1
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	f003 0303 	and.w	r3, r3, #3
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d102      	bne.n	8010f72 <MatchBaseName+0x176>
 8010f6c:	7cbb      	ldrb	r3, [r7, #18]
 8010f6e:	3320      	adds	r3, #32
 8010f70:	e000      	b.n	8010f74 <MatchBaseName+0x178>
 8010f72:	7cbb      	ldrb	r3, [r7, #18]
        if (XTOLOWER((unsigned char)*name++) !=
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d001      	beq.n	8010f7c <MatchBaseName+0x180>
            return 0;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	e006      	b.n	8010f8a <MatchBaseName+0x18e>
        nameSz--;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	607b      	str	r3, [r7, #4]
    while (nameSz > 0) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	dcd0      	bgt.n	8010f2a <MatchBaseName+0x12e>
    }

    return 1;
 8010f88:	2301      	movs	r3, #1
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3720      	adds	r7, #32
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	0802c20c 	.word	0x0802c20c

08010f98 <PermittedListOk>:
 * nameType Type of DNS name to currently searching
 * return 1 if found in list or if not needed
 * return 0 if not found in the list but is needed
 */
static int PermittedListOk(DNS_entry* name, Base_entry* dnsList, byte nameType)
{
 8010f98:	b590      	push	{r4, r7, lr}
 8010f9a:	b08b      	sub	sp, #44	; 0x2c
 8010f9c:	af02      	add	r7, sp, #8
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	71fb      	strb	r3, [r7, #7]
    Base_entry* current = dnsList;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	61fb      	str	r3, [r7, #28]
    int match = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	61bb      	str	r3, [r7, #24]
    int need  = 0;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	617b      	str	r3, [r7, #20]
    int ret   = 1; /* is ok unless needed and no match found */
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	613b      	str	r3, [r7, #16]

    while (current != NULL) {
 8010fb6:	e022      	b.n	8010ffe <PermittedListOk+0x66>
        if (current->type == nameType) {
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	7b1b      	ldrb	r3, [r3, #12]
 8010fbc:	79fa      	ldrb	r2, [r7, #7]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d11a      	bne.n	8010ff8 <PermittedListOk+0x60>
            need = 1; /* restriction on permitted names is set for this type */
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	617b      	str	r3, [r7, #20]
            if (name->len >= current->nameSz &&
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	689a      	ldr	r2, [r3, #8]
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	db12      	blt.n	8010ff8 <PermittedListOk+0x60>
                MatchBaseName(nameType, name->name, name->len,
 8010fd2:	79f8      	ldrb	r0, [r7, #7]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	68d9      	ldr	r1, [r3, #12]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	689a      	ldr	r2, [r3, #8]
                              current->name, current->nameSz)) {
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	685c      	ldr	r4, [r3, #4]
                MatchBaseName(nameType, name->name, name->len,
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	689b      	ldr	r3, [r3, #8]
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	f7ff ff08 	bl	8010dfc <MatchBaseName>
 8010fec:	4603      	mov	r3, r0
            if (name->len >= current->nameSz &&
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d002      	beq.n	8010ff8 <PermittedListOk+0x60>
                match = 1; /* found the current name in the permitted list*/
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	61bb      	str	r3, [r7, #24]
                break;
 8010ff6:	e005      	b.n	8011004 <PermittedListOk+0x6c>
            }
        }
        current = current->next;
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	61fb      	str	r3, [r7, #28]
    while (current != NULL) {
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d1d9      	bne.n	8010fb8 <PermittedListOk+0x20>
    }

    /* check if permitted name restriction was set and no matching name found */
    if (need && !match)
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d004      	beq.n	8011014 <PermittedListOk+0x7c>
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d101      	bne.n	8011014 <PermittedListOk+0x7c>
        ret = 0;
 8011010:	2300      	movs	r3, #0
 8011012:	613b      	str	r3, [r7, #16]

    return ret;
 8011014:	693b      	ldr	r3, [r7, #16]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3724      	adds	r7, #36	; 0x24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd90      	pop	{r4, r7, pc}

0801101e <IsInExcludedList>:
 * dnsList  The list to search through
 * nameType Type of DNS name to currently searching
 * return 1 if found in list and 0 if not found in the list
 */
static int IsInExcludedList(DNS_entry* name, Base_entry* dnsList, byte nameType)
{
 801101e:	b590      	push	{r4, r7, lr}
 8011020:	b089      	sub	sp, #36	; 0x24
 8011022:	af02      	add	r7, sp, #8
 8011024:	60f8      	str	r0, [r7, #12]
 8011026:	60b9      	str	r1, [r7, #8]
 8011028:	4613      	mov	r3, r2
 801102a:	71fb      	strb	r3, [r7, #7]
    int ret = 0; /* default of not found in the list */
 801102c:	2300      	movs	r3, #0
 801102e:	617b      	str	r3, [r7, #20]
    Base_entry* current = dnsList;
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	613b      	str	r3, [r7, #16]

    while (current != NULL) {
 8011034:	e020      	b.n	8011078 <IsInExcludedList+0x5a>
        if (current->type == nameType) {
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	7b1b      	ldrb	r3, [r3, #12]
 801103a:	79fa      	ldrb	r2, [r7, #7]
 801103c:	429a      	cmp	r2, r3
 801103e:	d118      	bne.n	8011072 <IsInExcludedList+0x54>
            if (name->len >= current->nameSz &&
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	689a      	ldr	r2, [r3, #8]
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	429a      	cmp	r2, r3
 801104a:	db12      	blt.n	8011072 <IsInExcludedList+0x54>
                MatchBaseName(nameType, name->name, name->len,
 801104c:	79f8      	ldrb	r0, [r7, #7]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	68d9      	ldr	r1, [r3, #12]
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	689a      	ldr	r2, [r3, #8]
                              current->name, current->nameSz)) {
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	685c      	ldr	r4, [r3, #4]
                MatchBaseName(nameType, name->name, name->len,
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	4623      	mov	r3, r4
 8011062:	f7ff fecb 	bl	8010dfc <MatchBaseName>
 8011066:	4603      	mov	r3, r0
            if (name->len >= current->nameSz &&
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <IsInExcludedList+0x54>
                ret = 1;
 801106c:	2301      	movs	r3, #1
 801106e:	617b      	str	r3, [r7, #20]
                break;
 8011070:	e005      	b.n	801107e <IsInExcludedList+0x60>
            }
        }
        current = current->next;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	613b      	str	r3, [r7, #16]
    while (current != NULL) {
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1db      	bne.n	8011036 <IsInExcludedList+0x18>
    }

    return ret;
 801107e:	697b      	ldr	r3, [r7, #20]
}
 8011080:	4618      	mov	r0, r3
 8011082:	371c      	adds	r7, #28
 8011084:	46bd      	mov	sp, r7
 8011086:	bd90      	pop	{r4, r7, pc}

08011088 <ConfirmNameConstraints>:


static int ConfirmNameConstraints(Signer* signer, DecodedCert* cert)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b08a      	sub	sp, #40	; 0x28
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
    const byte nameTypes[] = {ASN_RFC822_TYPE, ASN_DNS_TYPE, ASN_DIR_TYPE};
 8011092:	4a5a      	ldr	r2, [pc, #360]	; (80111fc <ConfirmNameConstraints+0x174>)
 8011094:	f107 031c 	add.w	r3, r7, #28
 8011098:	6812      	ldr	r2, [r2, #0]
 801109a:	4611      	mov	r1, r2
 801109c:	8019      	strh	r1, [r3, #0]
 801109e:	3302      	adds	r3, #2
 80110a0:	0c12      	lsrs	r2, r2, #16
 80110a2:	701a      	strb	r2, [r3, #0]
    int i;

    if (signer == NULL || cert == NULL)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d002      	beq.n	80110b0 <ConfirmNameConstraints+0x28>
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d101      	bne.n	80110b4 <ConfirmNameConstraints+0x2c>
        return 0;
 80110b0:	2300      	movs	r3, #0
 80110b2:	e09e      	b.n	80111f2 <ConfirmNameConstraints+0x16a>

    if (signer->excludedNames == NULL && signer->permittedNames == NULL)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6a1b      	ldr	r3, [r3, #32]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d105      	bne.n	80110c8 <ConfirmNameConstraints+0x40>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	69db      	ldr	r3, [r3, #28]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d101      	bne.n	80110c8 <ConfirmNameConstraints+0x40>
        return 1;
 80110c4:	2301      	movs	r3, #1
 80110c6:	e094      	b.n	80111f2 <ConfirmNameConstraints+0x16a>

    for (i=0; i < (int)sizeof(nameTypes); i++) {
 80110c8:	2300      	movs	r3, #0
 80110ca:	627b      	str	r3, [r7, #36]	; 0x24
 80110cc:	e08c      	b.n	80111e8 <ConfirmNameConstraints+0x160>
        byte nameType = nameTypes[i];
 80110ce:	f107 021c 	add.w	r2, r7, #28
 80110d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d4:	4413      	add	r3, r2
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	77fb      	strb	r3, [r7, #31]
        DNS_entry* name = NULL;
 80110da:	2300      	movs	r3, #0
 80110dc:	623b      	str	r3, [r7, #32]
        DNS_entry  subjectDnsName; /* temporary node used for subject name */

        XMEMSET(&subjectDnsName, 0, sizeof(DNS_entry));
 80110de:	f107 0308 	add.w	r3, r7, #8
 80110e2:	2214      	movs	r2, #20
 80110e4:	2100      	movs	r1, #0
 80110e6:	4618      	mov	r0, r3
 80110e8:	f010 f924 	bl	8021334 <memset>
        switch (nameType) {
 80110ec:	7ffb      	ldrb	r3, [r7, #31]
 80110ee:	2b04      	cmp	r3, #4
 80110f0:	d01e      	beq.n	8011130 <ConfirmNameConstraints+0xa8>
 80110f2:	2b04      	cmp	r3, #4
 80110f4:	dc31      	bgt.n	801115a <ConfirmNameConstraints+0xd2>
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d005      	beq.n	8011106 <ConfirmNameConstraints+0x7e>
 80110fa:	2b02      	cmp	r3, #2
 80110fc:	d12d      	bne.n	801115a <ConfirmNameConstraints+0xd2>
            case ASN_DNS_TYPE:
                /* Should it also consider CN in subject? It could use
                 * subjectDnsName too */
                name = cert->altNames;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011102:	623b      	str	r3, [r7, #32]
                break;
 8011104:	e02e      	b.n	8011164 <ConfirmNameConstraints+0xdc>
            case ASN_RFC822_TYPE:
                /* Shouldn't it validade E= in subject as well? */
                name = cert->altEmailNames;
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801110a:	623b      	str	r3, [r7, #32]

                /* Add subject email for checking. */
                if (cert->subjectEmail != NULL) {
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8011112:	2b00      	cmp	r3, #0
 8011114:	d023      	beq.n	801115e <ConfirmNameConstraints+0xd6>
                     * "When constraints are imposed on the rfc822Name name
                     * form, but the certificate does not include a subject
                     * alternative name, the rfc822Name constraint MUST be
                     * applied to the attribute of type emailAddress in the
                     * subject distinguished name" */
                    subjectDnsName.next = NULL;
 8011116:	2300      	movs	r3, #0
 8011118:	60bb      	str	r3, [r7, #8]
                    subjectDnsName.type = ASN_RFC822_TYPE;
 801111a:	2301      	movs	r3, #1
 801111c:	60fb      	str	r3, [r7, #12]
                    subjectDnsName.len  = cert->subjectEmailLen;
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8011124:	613b      	str	r3, [r7, #16]
                    subjectDnsName.name = (char *)cert->subjectEmail;
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801112c:	617b      	str	r3, [r7, #20]
                }
                break;
 801112e:	e016      	b.n	801115e <ConfirmNameConstraints+0xd6>
            case ASN_DIR_TYPE:
                name = cert->altDirNames;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011134:	623b      	str	r3, [r7, #32]
                    "Restrictions of the form directoryName MUST be
                    applied to the subject field .... and to any names
                    of type directoryName in the subjectAltName
                    extension"
                */
                if (cert->subjectRaw != NULL) {
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 801113c:	2b00      	cmp	r3, #0
 801113e:	d010      	beq.n	8011162 <ConfirmNameConstraints+0xda>
                    subjectDnsName.next = NULL;
 8011140:	2300      	movs	r3, #0
 8011142:	60bb      	str	r3, [r7, #8]
                    subjectDnsName.type = ASN_DIR_TYPE;
 8011144:	2304      	movs	r3, #4
 8011146:	60fb      	str	r3, [r7, #12]
                    subjectDnsName.len = cert->subjectRawLen;
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 801114e:	613b      	str	r3, [r7, #16]
                    subjectDnsName.name = (char *)cert->subjectRaw;
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8011156:	617b      	str	r3, [r7, #20]
                }
            #endif
                break;
 8011158:	e003      	b.n	8011162 <ConfirmNameConstraints+0xda>
            default:
                /* Other types of names are ignored for now.
                 * Shouldn't it be rejected if it there is a altNamesByType[nameType]
                 * and signer->extNameConstraintCrit is set? */
                return 0;
 801115a:	2300      	movs	r3, #0
 801115c:	e049      	b.n	80111f2 <ConfirmNameConstraints+0x16a>
                break;
 801115e:	bf00      	nop
 8011160:	e01c      	b.n	801119c <ConfirmNameConstraints+0x114>
                break;
 8011162:	bf00      	nop
        }

        while (name != NULL) {
 8011164:	e01a      	b.n	801119c <ConfirmNameConstraints+0x114>
            if (IsInExcludedList(name, signer->excludedNames, nameType) == 1) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6a1b      	ldr	r3, [r3, #32]
 801116a:	7ffa      	ldrb	r2, [r7, #31]
 801116c:	4619      	mov	r1, r3
 801116e:	6a38      	ldr	r0, [r7, #32]
 8011170:	f7ff ff55 	bl	801101e <IsInExcludedList>
 8011174:	4603      	mov	r3, r0
 8011176:	2b01      	cmp	r3, #1
 8011178:	d101      	bne.n	801117e <ConfirmNameConstraints+0xf6>
                WOLFSSL_MSG("Excluded name was found!");
                return 0;
 801117a:	2300      	movs	r3, #0
 801117c:	e039      	b.n	80111f2 <ConfirmNameConstraints+0x16a>
            }

            /* Check against the permitted list */
            if (PermittedListOk(name, signer->permittedNames, nameType) != 1) {
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	69db      	ldr	r3, [r3, #28]
 8011182:	7ffa      	ldrb	r2, [r7, #31]
 8011184:	4619      	mov	r1, r3
 8011186:	6a38      	ldr	r0, [r7, #32]
 8011188:	f7ff ff06 	bl	8010f98 <PermittedListOk>
 801118c:	4603      	mov	r3, r0
 801118e:	2b01      	cmp	r3, #1
 8011190:	d001      	beq.n	8011196 <ConfirmNameConstraints+0x10e>
                WOLFSSL_MSG("Permitted name was not found!");
                return 0;
 8011192:	2300      	movs	r3, #0
 8011194:	e02d      	b.n	80111f2 <ConfirmNameConstraints+0x16a>
            }

            name = name->next;
 8011196:	6a3b      	ldr	r3, [r7, #32]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	623b      	str	r3, [r7, #32]
        while (name != NULL) {
 801119c:	6a3b      	ldr	r3, [r7, #32]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1e1      	bne.n	8011166 <ConfirmNameConstraints+0xde>
        }

        /* handle comparing against subject name too */
        if (subjectDnsName.len > 0 && subjectDnsName.name != NULL) {
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	dd1c      	ble.n	80111e2 <ConfirmNameConstraints+0x15a>
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d019      	beq.n	80111e2 <ConfirmNameConstraints+0x15a>
            if (IsInExcludedList(&subjectDnsName, signer->excludedNames,
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a19      	ldr	r1, [r3, #32]
 80111b2:	7ffa      	ldrb	r2, [r7, #31]
 80111b4:	f107 0308 	add.w	r3, r7, #8
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7ff ff30 	bl	801101e <IsInExcludedList>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d101      	bne.n	80111c8 <ConfirmNameConstraints+0x140>
                        nameType) == 1) {
                WOLFSSL_MSG("Excluded name was found!");
                return 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	e014      	b.n	80111f2 <ConfirmNameConstraints+0x16a>
            }

            /* Check against the permitted list */
            if (PermittedListOk(&subjectDnsName, signer->permittedNames,
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	69d9      	ldr	r1, [r3, #28]
 80111cc:	7ffa      	ldrb	r2, [r7, #31]
 80111ce:	f107 0308 	add.w	r3, r7, #8
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff fee0 	bl	8010f98 <PermittedListOk>
 80111d8:	4603      	mov	r3, r0
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d001      	beq.n	80111e2 <ConfirmNameConstraints+0x15a>
                        nameType) != 1) {
                WOLFSSL_MSG("Permitted name was not found!");
                return 0;
 80111de:	2300      	movs	r3, #0
 80111e0:	e007      	b.n	80111f2 <ConfirmNameConstraints+0x16a>
    for (i=0; i < (int)sizeof(nameTypes); i++) {
 80111e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e4:	3301      	adds	r3, #1
 80111e6:	627b      	str	r3, [r7, #36]	; 0x24
 80111e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ea:	2b02      	cmp	r3, #2
 80111ec:	f77f af6f 	ble.w	80110ce <ConfirmNameConstraints+0x46>
            }
        }
    }

    return 1;
 80111f0:	2301      	movs	r3, #1
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3728      	adds	r7, #40	; 0x28
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	08028f9c 	.word	0x08028f9c

08011200 <AddAltName>:

#endif /* IGNORE_NAME_CONSTRAINTS */

#ifndef WOLFSSL_ASN_TEMPLATE
static void AddAltName(DecodedCert* cert, DNS_entry* dnsEntry)
{
 8011200:	b480      	push	{r7}
 8011202:	b085      	sub	sp, #20
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
#if defined(OPENSSL_EXTRA) && !defined(WOLFSSL_ALT_NAMES_NO_REV)
    dnsEntry->next = NULL;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2200      	movs	r2, #0
 801120e:	601a      	str	r2, [r3, #0]
    if (cert->altNames == NULL) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d103      	bne.n	8011220 <AddAltName+0x20>
        /* First on list */
        cert->altNames = dnsEntry;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	683a      	ldr	r2, [r7, #0]
 801121c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
#else
    dnsEntry->next = cert->altNames;
    cert->altNames = dnsEntry;
#endif
}
 801121e:	e00d      	b.n	801123c <AddAltName+0x3c>
        DNS_entry* temp = cert->altNames;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011224:	60fb      	str	r3, [r7, #12]
        for (; (temp->next != NULL); temp = temp->next);
 8011226:	e002      	b.n	801122e <AddAltName+0x2e>
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	60fb      	str	r3, [r7, #12]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d1f8      	bne.n	8011228 <AddAltName+0x28>
        temp->next = dnsEntry;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	683a      	ldr	r2, [r7, #0]
 801123a:	601a      	str	r2, [r3, #0]
}
 801123c:	bf00      	nop
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <DecodeConstructedOtherName>:

#if !defined(WOLFSSL_ASN_TEMPLATE)
/* return 0 on success */
static int DecodeConstructedOtherName(DecodedCert* cert, const byte* input,
        word32* idx, int sz, int oid)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08a      	sub	sp, #40	; 0x28
 801124c:	af00      	add	r7, sp, #0
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	607a      	str	r2, [r7, #4]
 8011254:	603b      	str	r3, [r7, #0]
    int ret    = 0;
 8011256:	2300      	movs	r3, #0
 8011258:	627b      	str	r3, [r7, #36]	; 0x24
    int strLen = 0;
 801125a:	2300      	movs	r3, #0
 801125c:	617b      	str	r3, [r7, #20]
    byte tag;
    DNS_entry* dnsEntry = NULL;
 801125e:	2300      	movs	r3, #0
 8011260:	623b      	str	r3, [r7, #32]

    if (GetASNTag(input, idx, &tag, sz) < 0) {
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	f107 0213 	add.w	r2, r7, #19
 8011268:	6879      	ldr	r1, [r7, #4]
 801126a:	68b8      	ldr	r0, [r7, #8]
 801126c:	f7fc fa0b 	bl	800d686 <GetASNTag>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	da02      	bge.n	801127c <DecodeConstructedOtherName+0x34>
        ret = ASN_PARSE_E;
 8011276:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801127a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (ret == 0 && (tag != (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED))) {
 801127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127e:	2b00      	cmp	r3, #0
 8011280:	d105      	bne.n	801128e <DecodeConstructedOtherName+0x46>
 8011282:	7cfb      	ldrb	r3, [r7, #19]
 8011284:	2ba0      	cmp	r3, #160	; 0xa0
 8011286:	d002      	beq.n	801128e <DecodeConstructedOtherName+0x46>
        ret = ASN_PARSE_E;
 8011288:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801128c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (ret == 0 && (GetLength(input, idx, &strLen, sz) < 0)) {
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10c      	bne.n	80112ae <DecodeConstructedOtherName+0x66>
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	f107 0214 	add.w	r2, r7, #20
 801129a:	6879      	ldr	r1, [r7, #4]
 801129c:	68b8      	ldr	r0, [r7, #8]
 801129e:	f7fc f95a 	bl	800d556 <GetLength>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	da02      	bge.n	80112ae <DecodeConstructedOtherName+0x66>
        ret = ASN_PARSE_E;
 80112a8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80112ac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (ret == 0) {
 80112ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10c      	bne.n	80112ce <DecodeConstructedOtherName+0x86>
        dnsEntry = AltNameNew(cert->heap);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fd ff01 	bl	800f0c2 <AltNameNew>
 80112c0:	6238      	str	r0, [r7, #32]
        if (dnsEntry == NULL) {
 80112c2:	6a3b      	ldr	r3, [r7, #32]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d102      	bne.n	80112ce <DecodeConstructedOtherName+0x86>
            WOLFSSL_MSG("\tOut of Memory");
            return MEMORY_E;
 80112c8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80112cc:	e085      	b.n	80113da <DecodeConstructedOtherName+0x192>
        }
    }

    if (ret == 0) {
 80112ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d13c      	bne.n	801134e <DecodeConstructedOtherName+0x106>
        switch (oid) {
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	f240 1209 	movw	r2, #265	; 0x109
 80112da:	4293      	cmp	r3, r2
 80112dc:	d12c      	bne.n	8011338 <DecodeConstructedOtherName+0xf0>
                    ret = 0;
                }
                break;
        #endif /* WOLFSSL_FPKI */
            case UPN_OID:
                if (GetASNTag(input, idx, &tag, sz) < 0) {
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	f107 0213 	add.w	r2, r7, #19
 80112e4:	6879      	ldr	r1, [r7, #4]
 80112e6:	68b8      	ldr	r0, [r7, #8]
 80112e8:	f7fc f9cd 	bl	800d686 <GetASNTag>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	da02      	bge.n	80112f8 <DecodeConstructedOtherName+0xb0>
                    ret = ASN_PARSE_E;
 80112f2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80112f6:	627b      	str	r3, [r7, #36]	; 0x24
                }

                if (ret == 0 &&
 80112f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d10b      	bne.n	8011316 <DecodeConstructedOtherName+0xce>
                        tag != ASN_PRINTABLE_STRING && tag != ASN_UTF8STRING &&
 80112fe:	7cfb      	ldrb	r3, [r7, #19]
                if (ret == 0 &&
 8011300:	2b13      	cmp	r3, #19
 8011302:	d008      	beq.n	8011316 <DecodeConstructedOtherName+0xce>
                        tag != ASN_PRINTABLE_STRING && tag != ASN_UTF8STRING &&
 8011304:	7cfb      	ldrb	r3, [r7, #19]
 8011306:	2b0c      	cmp	r3, #12
 8011308:	d005      	beq.n	8011316 <DecodeConstructedOtherName+0xce>
                                    tag != ASN_IA5_STRING) {
 801130a:	7cfb      	ldrb	r3, [r7, #19]
                        tag != ASN_PRINTABLE_STRING && tag != ASN_UTF8STRING &&
 801130c:	2b16      	cmp	r3, #22
 801130e:	d002      	beq.n	8011316 <DecodeConstructedOtherName+0xce>
                    WOLFSSL_MSG("Was expecting a string for UPN");
                    ret = ASN_PARSE_E;
 8011310:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011314:	627b      	str	r3, [r7, #36]	; 0x24
                }

                if (ret == 0 && (GetLength(input, idx, &strLen, sz) < 0)) {
 8011316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011318:	2b00      	cmp	r3, #0
 801131a:	d11a      	bne.n	8011352 <DecodeConstructedOtherName+0x10a>
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	f107 0214 	add.w	r2, r7, #20
 8011322:	6879      	ldr	r1, [r7, #4]
 8011324:	68b8      	ldr	r0, [r7, #8]
 8011326:	f7fc f916 	bl	800d556 <GetLength>
 801132a:	4603      	mov	r3, r0
 801132c:	2b00      	cmp	r3, #0
 801132e:	da10      	bge.n	8011352 <DecodeConstructedOtherName+0x10a>
                    WOLFSSL_MSG("Was expecting a string for UPN");
                    ret = ASN_PARSE_E;
 8011330:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011334:	627b      	str	r3, [r7, #36]	; 0x24
                }
                break;
 8011336:	e00c      	b.n	8011352 <DecodeConstructedOtherName+0x10a>

            default:
                WOLFSSL_MSG("Unknown constructed other name, skipping");
                XFREE(dnsEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 8011338:	6a3b      	ldr	r3, [r7, #32]
 801133a:	61fb      	str	r3, [r7, #28]
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d002      	beq.n	8011348 <DecodeConstructedOtherName+0x100>
 8011342:	69f8      	ldr	r0, [r7, #28]
 8011344:	f007 fc4e 	bl	8018be4 <wolfSSL_Free>
                dnsEntry = NULL;
 8011348:	2300      	movs	r3, #0
 801134a:	623b      	str	r3, [r7, #32]
 801134c:	e002      	b.n	8011354 <DecodeConstructedOtherName+0x10c>
        }
    }
 801134e:	bf00      	nop
 8011350:	e000      	b.n	8011354 <DecodeConstructedOtherName+0x10c>
                break;
 8011352:	bf00      	nop

    if (ret == 0 && dnsEntry != NULL) {
 8011354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011356:	2b00      	cmp	r3, #0
 8011358:	d12c      	bne.n	80113b4 <DecodeConstructedOtherName+0x16c>
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d029      	beq.n	80113b4 <DecodeConstructedOtherName+0x16c>
        dnsEntry->type = ASN_OTHER_TYPE;
 8011360:	6a3b      	ldr	r3, [r7, #32]
 8011362:	2200      	movs	r2, #0
 8011364:	605a      	str	r2, [r3, #4]
        dnsEntry->len = strLen;
 8011366:	697a      	ldr	r2, [r7, #20]
 8011368:	6a3b      	ldr	r3, [r7, #32]
 801136a:	609a      	str	r2, [r3, #8]
        dnsEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	3301      	adds	r3, #1
 8011370:	4618      	mov	r0, r3
 8011372:	f007 fc1b 	bl	8018bac <wolfSSL_Malloc>
 8011376:	4602      	mov	r2, r0
 8011378:	6a3b      	ldr	r3, [r7, #32]
 801137a:	60da      	str	r2, [r3, #12]
            DYNAMIC_TYPE_ALTNAME);
    #ifdef WOLFSSL_FPKI
        dnsEntry->oidSum = oid;
    #endif /* WOLFSSL_FPKI */
        if (dnsEntry->name == NULL) {
 801137c:	6a3b      	ldr	r3, [r7, #32]
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d103      	bne.n	801138c <DecodeConstructedOtherName+0x144>
            WOLFSSL_MSG("\tOut of Memory");
            ret = MEMORY_E;
 8011384:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011388:	627b      	str	r3, [r7, #36]	; 0x24
 801138a:	e013      	b.n	80113b4 <DecodeConstructedOtherName+0x16c>
        }
        else {
            XMEMCPY(dnsEntry->name, &input[*idx], strLen);
 801138c:	6a3b      	ldr	r3, [r7, #32]
 801138e:	68d8      	ldr	r0, [r3, #12]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	4413      	add	r3, r2
 8011398:	697a      	ldr	r2, [r7, #20]
 801139a:	4619      	mov	r1, r3
 801139c:	f00f ffa2 	bl	80212e4 <memcpy>
            dnsEntry->name[strLen] = '\0';
 80113a0:	6a3b      	ldr	r3, [r7, #32]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	697a      	ldr	r2, [r7, #20]
 80113a6:	4413      	add	r3, r2
 80113a8:	2200      	movs	r2, #0
 80113aa:	701a      	strb	r2, [r3, #0]
            AddAltName(cert, dnsEntry);
 80113ac:	6a39      	ldr	r1, [r7, #32]
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f7ff ff26 	bl	8011200 <AddAltName>
        }
    }

    if (ret == 0) {
 80113b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <DecodeConstructedOtherName+0x180>
        *idx += strLen;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	697a      	ldr	r2, [r7, #20]
 80113c0:	441a      	add	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	601a      	str	r2, [r3, #0]
 80113c6:	e007      	b.n	80113d8 <DecodeConstructedOtherName+0x190>
    }
    else {
        XFREE(dnsEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	61bb      	str	r3, [r7, #24]
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d002      	beq.n	80113d8 <DecodeConstructedOtherName+0x190>
 80113d2:	69b8      	ldr	r0, [r7, #24]
 80113d4:	f007 fc06 	bl	8018be4 <wolfSSL_Free>
    }

    return ret;
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3728      	adds	r7, #40	; 0x28
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <DecodeAltNames>:
 * @return  BUFFER_E when data in buffer is too small.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 * @return  MEMORY_E when dynamic memory allocation fails.
 */
static int DecodeAltNames(const byte* input, int sz, DecodedCert* cert)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b0a6      	sub	sp, #152	; 0x98
 80113e6:	af02      	add	r7, sp, #8
 80113e8:	60f8      	str	r0, [r7, #12]
 80113ea:	60b9      	str	r1, [r7, #8]
 80113ec:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	637b      	str	r3, [r7, #52]	; 0x34
    int length = 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	633b      	str	r3, [r7, #48]	; 0x30
    byte current_byte;

    WOLFSSL_ENTER("DecodeAltNames");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80113fc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011400:	68f8      	ldr	r0, [r7, #12]
 8011402:	f7fc fa0f 	bl	800d824 <GetSequence>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	da02      	bge.n	8011412 <DecodeAltNames+0x30>
        WOLFSSL_MSG("\tBad Sequence");
        return ASN_PARSE_E;
 801140c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011410:	e305      	b.n	8011a1e <DecodeAltNames+0x63c>
    }

    if (length == 0) {
 8011412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011414:	2b00      	cmp	r3, #0
 8011416:	d102      	bne.n	801141e <DecodeAltNames+0x3c>
        /* RFC 5280 4.2.1.6.  Subject Alternative Name
           If the subjectAltName extension is present, the sequence MUST
           contain at least one entry. */
        WOLFSSL_ERROR_VERBOSE(ASN_PARSE_E);
        return ASN_PARSE_E;
 8011418:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801141c:	e2ff      	b.n	8011a1e <DecodeAltNames+0x63c>
    }

#ifdef OPENSSL_ALL
    cert->extSubjAltNameSrc = input;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    cert->extSubjAltNameSz = sz;
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
#endif

    cert->weOwnAltNames = 1;
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 8011434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011438:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468

    while (length > 0) {
 801143c:	e2ea      	b.n	8011a14 <DecodeAltNames+0x632>
        /* Verify idx can't overflow input buffer */
        if (idx >= (word32)sz) {
 801143e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	429a      	cmp	r2, r3
 8011444:	d302      	bcc.n	801144c <DecodeAltNames+0x6a>
            WOLFSSL_MSG("\tBad Index");
            return BUFFER_E;
 8011446:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801144a:	e2e8      	b.n	8011a1e <DecodeAltNames+0x63c>
        }

        current_byte = input[idx++];
 801144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801144e:	1c5a      	adds	r2, r3, #1
 8011450:	637a      	str	r2, [r7, #52]	; 0x34
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	4413      	add	r3, r2
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

        length--;
 801145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145e:	3b01      	subs	r3, #1
 8011460:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save DNS Type names in the altNames list. */
        /* Save Other Type names in the cert's OidMap */
        if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_DNS_TYPE)) {
 8011462:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011466:	2b82      	cmp	r3, #130	; 0x82
 8011468:	d15b      	bne.n	8011522 <DecodeAltNames+0x140>
            DNS_entry* dnsEntry;
            int strLen;
            word32 lenStartIdx = idx;
 801146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146c:	643b      	str	r3, [r7, #64]	; 0x40

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011474:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f7fc f86c 	bl	800d556 <GetLength>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	da02      	bge.n	801148a <DecodeAltNames+0xa8>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 8011484:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011488:	e2c9      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            length -= (idx - lenStartIdx);
 801148a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011492:	4413      	add	r3, r2
 8011494:	633b      	str	r3, [r7, #48]	; 0x30

            dnsEntry = AltNameNew(cert->heap);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 801149c:	4618      	mov	r0, r3
 801149e:	f7fd fe10 	bl	800f0c2 <AltNameNew>
 80114a2:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (dnsEntry == NULL) {
 80114a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d102      	bne.n	80114b0 <DecodeAltNames+0xce>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 80114aa:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80114ae:	e2b6      	b.n	8011a1e <DecodeAltNames+0x63c>
            }

            dnsEntry->type = ASN_DNS_TYPE;
 80114b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b2:	2202      	movs	r2, #2
 80114b4:	605a      	str	r2, [r3, #4]
            dnsEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 80114b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b8:	3301      	adds	r3, #1
 80114ba:	4618      	mov	r0, r3
 80114bc:	f007 fb76 	bl	8018bac <wolfSSL_Malloc>
 80114c0:	4602      	mov	r2, r0
 80114c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c4:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (dnsEntry->name == NULL) {
 80114c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d10a      	bne.n	80114e4 <DecodeAltNames+0x102>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(dnsEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 80114ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <DecodeAltNames+0xfc>
 80114d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80114da:	f007 fb83 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 80114de:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80114e2:	e29c      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            dnsEntry->len = strLen;
 80114e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e8:	609a      	str	r2, [r3, #8]
            XMEMCPY(dnsEntry->name, &input[idx], strLen);
 80114ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ec:	68d8      	ldr	r0, [r3, #12]
 80114ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	4413      	add	r3, r2
 80114f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114f6:	4619      	mov	r1, r3
 80114f8:	f00f fef4 	bl	80212e4 <memcpy>
            dnsEntry->name[strLen] = '\0';
 80114fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fe:	68db      	ldr	r3, [r3, #12]
 8011500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011502:	4413      	add	r3, r2
 8011504:	2200      	movs	r2, #0
 8011506:	701a      	strb	r2, [r3, #0]

            AddAltName(cert, dnsEntry);
 8011508:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f7ff fe78 	bl	8011200 <AddAltName>

            length -= strLen;
 8011510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	633b      	str	r3, [r7, #48]	; 0x30
            idx    += strLen;
 8011518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801151c:	4413      	add	r3, r2
 801151e:	637b      	str	r3, [r7, #52]	; 0x34
 8011520:	e278      	b.n	8011a14 <DecodeAltNames+0x632>
        }
    #ifndef IGNORE_NAME_CONSTRAINTS
        else if (current_byte ==
 8011522:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011526:	2ba4      	cmp	r3, #164	; 0xa4
 8011528:	d16c      	bne.n	8011604 <DecodeAltNames+0x222>
                (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | ASN_DIR_TYPE)) {
            DNS_entry* dirEntry;
            int strLen;
            word32 lenStartIdx = idx;
 801152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801152c:	64fb      	str	r3, [r7, #76]	; 0x4c

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011534:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011538:	68f8      	ldr	r0, [r7, #12]
 801153a:	f7fc f80c 	bl	800d556 <GetLength>
 801153e:	4603      	mov	r3, r0
 8011540:	2b00      	cmp	r3, #0
 8011542:	da02      	bge.n	801154a <DecodeAltNames+0x168>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 8011544:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011548:	e269      	b.n	8011a1e <DecodeAltNames+0x63c>
            }

            if (GetSequence(input, &idx, &strLen, sz) < 0) {
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011550:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011554:	68f8      	ldr	r0, [r7, #12]
 8011556:	f7fc f965 	bl	800d824 <GetSequence>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	da02      	bge.n	8011566 <DecodeAltNames+0x184>
                WOLFSSL_MSG("\tfail: seq length");
                return ASN_PARSE_E;
 8011560:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011564:	e25b      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            length -= (idx - lenStartIdx);
 8011566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011568:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801156a:	1ad3      	subs	r3, r2, r3
 801156c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801156e:	4413      	add	r3, r2
 8011570:	633b      	str	r3, [r7, #48]	; 0x30

            dirEntry = AltNameNew(cert->heap);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8011578:	4618      	mov	r0, r3
 801157a:	f7fd fda2 	bl	800f0c2 <AltNameNew>
 801157e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (dirEntry == NULL) {
 8011580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011582:	2b00      	cmp	r3, #0
 8011584:	d102      	bne.n	801158c <DecodeAltNames+0x1aa>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 8011586:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801158a:	e248      	b.n	8011a1e <DecodeAltNames+0x63c>
            }

            dirEntry->type = ASN_DIR_TYPE;
 801158c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801158e:	2204      	movs	r2, #4
 8011590:	605a      	str	r2, [r3, #4]
            dirEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 8011592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011594:	3301      	adds	r3, #1
 8011596:	4618      	mov	r0, r3
 8011598:	f007 fb08 	bl	8018bac <wolfSSL_Malloc>
 801159c:	4602      	mov	r2, r0
 801159e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115a0:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (dirEntry->name == NULL) {
 80115a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10a      	bne.n	80115c0 <DecodeAltNames+0x1de>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(dirEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 80115aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115ac:	647b      	str	r3, [r7, #68]	; 0x44
 80115ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <DecodeAltNames+0x1d8>
 80115b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80115b6:	f007 fb15 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 80115ba:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80115be:	e22e      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            dirEntry->len = strLen;
 80115c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115c4:	609a      	str	r2, [r3, #8]
            XMEMCPY(dirEntry->name, &input[idx], strLen);
 80115c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115c8:	68d8      	ldr	r0, [r3, #12]
 80115ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	4413      	add	r3, r2
 80115d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115d2:	4619      	mov	r1, r3
 80115d4:	f00f fe86 	bl	80212e4 <memcpy>
            dirEntry->name[strLen] = '\0';
 80115d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115de:	4413      	add	r3, r2
 80115e0:	2200      	movs	r2, #0
 80115e2:	701a      	strb	r2, [r3, #0]
            dirEntry->next = cert->altDirNames;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115ea:	601a      	str	r2, [r3, #0]
            cert->altDirNames = dirEntry;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115f0:	635a      	str	r2, [r3, #52]	; 0x34

            length -= strLen;
 80115f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	633b      	str	r3, [r7, #48]	; 0x30
            idx    += strLen;
 80115fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115fe:	4413      	add	r3, r2
 8011600:	637b      	str	r3, [r7, #52]	; 0x34
 8011602:	e207      	b.n	8011a14 <DecodeAltNames+0x632>
        }
        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_RFC822_TYPE)) {
 8011604:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011608:	2b81      	cmp	r3, #129	; 0x81
 801160a:	d15e      	bne.n	80116ca <DecodeAltNames+0x2e8>
            DNS_entry* emailEntry;
            int strLen;
            word32 lenStartIdx = idx;
 801160c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801160e:	65bb      	str	r3, [r7, #88]	; 0x58

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011616:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f7fb ff9b 	bl	800d556 <GetLength>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	da02      	bge.n	801162c <DecodeAltNames+0x24a>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 8011626:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801162a:	e1f8      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            length -= (idx - lenStartIdx);
 801162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011634:	4413      	add	r3, r2
 8011636:	633b      	str	r3, [r7, #48]	; 0x30

            emailEntry = AltNameNew(cert->heap);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 801163e:	4618      	mov	r0, r3
 8011640:	f7fd fd3f 	bl	800f0c2 <AltNameNew>
 8011644:	6578      	str	r0, [r7, #84]	; 0x54
            if (emailEntry == NULL) {
 8011646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011648:	2b00      	cmp	r3, #0
 801164a:	d102      	bne.n	8011652 <DecodeAltNames+0x270>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 801164c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011650:	e1e5      	b.n	8011a1e <DecodeAltNames+0x63c>
            }

            emailEntry->type = ASN_RFC822_TYPE;
 8011652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011654:	2201      	movs	r2, #1
 8011656:	605a      	str	r2, [r3, #4]
            emailEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 8011658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165a:	3301      	adds	r3, #1
 801165c:	4618      	mov	r0, r3
 801165e:	f007 faa5 	bl	8018bac <wolfSSL_Malloc>
 8011662:	4602      	mov	r2, r0
 8011664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011666:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (emailEntry->name == NULL) {
 8011668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d10a      	bne.n	8011686 <DecodeAltNames+0x2a4>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(emailEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 8011670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011672:	653b      	str	r3, [r7, #80]	; 0x50
 8011674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011676:	2b00      	cmp	r3, #0
 8011678:	d002      	beq.n	8011680 <DecodeAltNames+0x29e>
 801167a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801167c:	f007 fab2 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 8011680:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011684:	e1cb      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            emailEntry->len = strLen;
 8011686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801168a:	609a      	str	r2, [r3, #8]
            XMEMCPY(emailEntry->name, &input[idx], strLen);
 801168c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801168e:	68d8      	ldr	r0, [r3, #12]
 8011690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	4413      	add	r3, r2
 8011696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011698:	4619      	mov	r1, r3
 801169a:	f00f fe23 	bl	80212e4 <memcpy>
            emailEntry->name[strLen] = '\0';
 801169e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116a4:	4413      	add	r3, r2
 80116a6:	2200      	movs	r2, #0
 80116a8:	701a      	strb	r2, [r3, #0]

            emailEntry->next = cert->altEmailNames;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b0:	601a      	str	r2, [r3, #0]
            cert->altEmailNames = emailEntry;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116b6:	631a      	str	r2, [r3, #48]	; 0x30

            length -= strLen;
 80116b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116bc:	1ad3      	subs	r3, r2, r3
 80116be:	633b      	str	r3, [r7, #48]	; 0x30
            idx    += strLen;
 80116c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116c4:	4413      	add	r3, r2
 80116c6:	637b      	str	r3, [r7, #52]	; 0x34
 80116c8:	e1a4      	b.n	8011a14 <DecodeAltNames+0x632>
        }
        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_URI_TYPE)) {
 80116ca:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80116ce:	2b86      	cmp	r3, #134	; 0x86
 80116d0:	f040 80a7 	bne.w	8011822 <DecodeAltNames+0x440>
            DNS_entry* uriEntry;
            int strLen;
            word32 lenStartIdx = idx;
 80116d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d6:	667b      	str	r3, [r7, #100]	; 0x64

            WOLFSSL_MSG("\tPutting URI into list but not using");
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	f107 0220 	add.w	r2, r7, #32
 80116de:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	f7fb ff37 	bl	800d556 <GetLength>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	da02      	bge.n	80116f4 <DecodeAltNames+0x312>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 80116ee:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80116f2:	e194      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            length -= (idx - lenStartIdx);
 80116f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116fc:	4413      	add	r3, r2
 80116fe:	633b      	str	r3, [r7, #48]	; 0x30

            /* check that strLen at index is not past input buffer */
            if (strLen + (int)idx > sz) {
 8011700:	6a3b      	ldr	r3, [r7, #32]
 8011702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011704:	4413      	add	r3, r2
 8011706:	68ba      	ldr	r2, [r7, #8]
 8011708:	429a      	cmp	r2, r3
 801170a:	da02      	bge.n	8011712 <DecodeAltNames+0x330>
                return BUFFER_E;
 801170c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8011710:	e185      	b.n	8011a1e <DecodeAltNames+0x63c>

            {
                int i;

                /* skip past scheme (i.e http,ftp,...) finding first ':' char */
                for (i = 0; i < strLen; i++) {
 8011712:	2300      	movs	r3, #0
 8011714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011718:	e019      	b.n	801174e <DecodeAltNames+0x36c>
                    if (input[idx + i] == ':') {
 801171a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801171c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011720:	4413      	add	r3, r2
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	4413      	add	r3, r2
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	2b3a      	cmp	r3, #58	; 0x3a
 801172a:	d016      	beq.n	801175a <DecodeAltNames+0x378>
                        break;
                    }
                    if (input[idx + i] == '/') {
 801172c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801172e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011732:	4413      	add	r3, r2
 8011734:	68fa      	ldr	r2, [r7, #12]
 8011736:	4413      	add	r3, r2
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	2b2f      	cmp	r3, #47	; 0x2f
 801173c:	d102      	bne.n	8011744 <DecodeAltNames+0x362>
                        WOLFSSL_MSG("\tAlt Name must be absolute URI");
                        WOLFSSL_ERROR_VERBOSE(ASN_ALT_NAME_E);
                        return ASN_ALT_NAME_E;
 801173e:	f06f 03a0 	mvn.w	r3, #160	; 0xa0
 8011742:	e16c      	b.n	8011a1e <DecodeAltNames+0x63c>
                for (i = 0; i < strLen; i++) {
 8011744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011748:	3301      	adds	r3, #1
 801174a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011754:	429a      	cmp	r2, r3
 8011756:	dbe0      	blt.n	801171a <DecodeAltNames+0x338>
 8011758:	e000      	b.n	801175c <DecodeAltNames+0x37a>
                        break;
 801175a:	bf00      	nop
                    }
                }

                /* test if no ':' char was found and test that the next two
                 * chars are "//" to match the pattern "://" */
                if (i >= strLen - 2 || (input[idx + i + 1] != '/' ||
 801175c:	6a3b      	ldr	r3, [r7, #32]
 801175e:	3b02      	subs	r3, #2
 8011760:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011764:	429a      	cmp	r2, r3
 8011766:	da13      	bge.n	8011790 <DecodeAltNames+0x3ae>
 8011768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801176a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801176e:	4413      	add	r3, r2
 8011770:	3301      	adds	r3, #1
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	4413      	add	r3, r2
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	2b2f      	cmp	r3, #47	; 0x2f
 801177a:	d109      	bne.n	8011790 <DecodeAltNames+0x3ae>
                                        input[idx + i + 2] != '/')) {
 801177c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801177e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011782:	4413      	add	r3, r2
 8011784:	3302      	adds	r3, #2
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	4413      	add	r3, r2
 801178a:	781b      	ldrb	r3, [r3, #0]
                if (i >= strLen - 2 || (input[idx + i + 1] != '/' ||
 801178c:	2b2f      	cmp	r3, #47	; 0x2f
 801178e:	d002      	beq.n	8011796 <DecodeAltNames+0x3b4>
                    WOLFSSL_MSG("\tAlt Name must be absolute URI");
                    WOLFSSL_ERROR_VERBOSE(ASN_ALT_NAME_E);
                    return ASN_ALT_NAME_E;
 8011790:	f06f 03a0 	mvn.w	r3, #160	; 0xa0
 8011794:	e143      	b.n	8011a1e <DecodeAltNames+0x63c>
                }
            }
        #endif

            uriEntry = AltNameNew(cert->heap);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 801179c:	4618      	mov	r0, r3
 801179e:	f7fd fc90 	bl	800f0c2 <AltNameNew>
 80117a2:	6638      	str	r0, [r7, #96]	; 0x60
            if (uriEntry == NULL) {
 80117a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d102      	bne.n	80117b0 <DecodeAltNames+0x3ce>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 80117aa:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80117ae:	e136      	b.n	8011a1e <DecodeAltNames+0x63c>
            }

            uriEntry->type = ASN_URI_TYPE;
 80117b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117b2:	2206      	movs	r2, #6
 80117b4:	605a      	str	r2, [r3, #4]
            uriEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 80117b6:	6a3b      	ldr	r3, [r7, #32]
 80117b8:	3301      	adds	r3, #1
 80117ba:	4618      	mov	r0, r3
 80117bc:	f007 f9f6 	bl	8018bac <wolfSSL_Malloc>
 80117c0:	4602      	mov	r2, r0
 80117c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117c4:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (uriEntry->name == NULL) {
 80117c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117c8:	68db      	ldr	r3, [r3, #12]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d10a      	bne.n	80117e4 <DecodeAltNames+0x402>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(uriEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 80117ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d002      	beq.n	80117de <DecodeAltNames+0x3fc>
 80117d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80117da:	f007 fa03 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 80117de:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80117e2:	e11c      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            uriEntry->len = strLen;
 80117e4:	6a3a      	ldr	r2, [r7, #32]
 80117e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117e8:	609a      	str	r2, [r3, #8]
            XMEMCPY(uriEntry->name, &input[idx], strLen);
 80117ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117ec:	68d8      	ldr	r0, [r3, #12]
 80117ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	4413      	add	r3, r2
 80117f4:	6a3a      	ldr	r2, [r7, #32]
 80117f6:	4619      	mov	r1, r3
 80117f8:	f00f fd74 	bl	80212e4 <memcpy>
            uriEntry->name[strLen] = '\0';
 80117fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	6a3a      	ldr	r2, [r7, #32]
 8011802:	4413      	add	r3, r2
 8011804:	2200      	movs	r2, #0
 8011806:	701a      	strb	r2, [r3, #0]

            AddAltName(cert, uriEntry);
 8011808:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ff fcf8 	bl	8011200 <AddAltName>

            length -= strLen;
 8011810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011812:	6a3b      	ldr	r3, [r7, #32]
 8011814:	1ad3      	subs	r3, r2, r3
 8011816:	633b      	str	r3, [r7, #48]	; 0x30
            idx    += strLen;
 8011818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801181a:	6a3a      	ldr	r2, [r7, #32]
 801181c:	4413      	add	r3, r2
 801181e:	637b      	str	r3, [r7, #52]	; 0x34
 8011820:	e0f8      	b.n	8011a14 <DecodeAltNames+0x632>
        }
#if defined(WOLFSSL_QT) || defined(OPENSSL_ALL) || defined(WOLFSSL_IP_ALT_NAME)
        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_IP_TYPE)) {
 8011822:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011826:	2b87      	cmp	r3, #135	; 0x87
 8011828:	f040 8083 	bne.w	8011932 <DecodeAltNames+0x550>
            DNS_entry* ipAddr;
            int strLen;
            word32 lenStartIdx = idx;
 801182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801182e:	67bb      	str	r3, [r7, #120]	; 0x78
            WOLFSSL_MSG("Decoding Subject Alt. Name: IP Address");

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	f107 021c 	add.w	r2, r7, #28
 8011836:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f7fb fe8b 	bl	800d556 <GetLength>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	da02      	bge.n	801184c <DecodeAltNames+0x46a>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 8011846:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801184a:	e0e8      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            length -= (idx - lenStartIdx);
 801184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801184e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011850:	1ad3      	subs	r3, r2, r3
 8011852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011854:	4413      	add	r3, r2
 8011856:	633b      	str	r3, [r7, #48]	; 0x30
            /* check that strLen at index is not past input buffer */
            if (strLen + (int)idx > sz) {
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801185c:	4413      	add	r3, r2
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	429a      	cmp	r2, r3
 8011862:	da02      	bge.n	801186a <DecodeAltNames+0x488>
                return BUFFER_E;
 8011864:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8011868:	e0d9      	b.n	8011a1e <DecodeAltNames+0x63c>
            }

            ipAddr = AltNameNew(cert->heap);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8011870:	4618      	mov	r0, r3
 8011872:	f7fd fc26 	bl	800f0c2 <AltNameNew>
 8011876:	6778      	str	r0, [r7, #116]	; 0x74
            if (ipAddr == NULL) {
 8011878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801187a:	2b00      	cmp	r3, #0
 801187c:	d102      	bne.n	8011884 <DecodeAltNames+0x4a2>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 801187e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011882:	e0cc      	b.n	8011a1e <DecodeAltNames+0x63c>
            }

            ipAddr->type = ASN_IP_TYPE;
 8011884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011886:	2207      	movs	r2, #7
 8011888:	605a      	str	r2, [r3, #4]
            ipAddr->name = (char*)XMALLOC(strLen + 1, cert->heap,
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	3301      	adds	r3, #1
 801188e:	4618      	mov	r0, r3
 8011890:	f007 f98c 	bl	8018bac <wolfSSL_Malloc>
 8011894:	4602      	mov	r2, r0
 8011896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011898:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (ipAddr->name == NULL) {
 801189a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10a      	bne.n	80118b8 <DecodeAltNames+0x4d6>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(ipAddr, cert->heap, DYNAMIC_TYPE_ALTNAME);
 80118a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80118a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <DecodeAltNames+0x4d0>
 80118ac:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80118ae:	f007 f999 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 80118b2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80118b6:	e0b2      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            ipAddr->len = strLen;
 80118b8:	69fa      	ldr	r2, [r7, #28]
 80118ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118bc:	609a      	str	r2, [r3, #8]
            XMEMCPY(ipAddr->name, &input[idx], strLen);
 80118be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118c0:	68d8      	ldr	r0, [r3, #12]
 80118c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	4413      	add	r3, r2
 80118c8:	69fa      	ldr	r2, [r7, #28]
 80118ca:	4619      	mov	r1, r3
 80118cc:	f00f fd0a 	bl	80212e4 <memcpy>
            ipAddr->name[strLen] = '\0';
 80118d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	69fa      	ldr	r2, [r7, #28]
 80118d6:	4413      	add	r3, r2
 80118d8:	2200      	movs	r2, #0
 80118da:	701a      	strb	r2, [r3, #0]

        #if defined(OPENSSL_ALL) || defined(WOLFSSL_IP_ALT_NAME)
            if (GenerateDNSEntryIPString(ipAddr, cert->heap) != 0) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 80118e2:	4619      	mov	r1, r3
 80118e4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80118e6:	f7fd ff93 	bl	800f810 <GenerateDNSEntryIPString>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d013      	beq.n	8011918 <DecodeAltNames+0x536>
                WOLFSSL_MSG("\tOut of Memory for IP string");
                XFREE(ipAddr->name, cert->heap, DYNAMIC_TYPE_ALTNAME);
 80118f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	673b      	str	r3, [r7, #112]	; 0x70
 80118f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d002      	beq.n	8011902 <DecodeAltNames+0x520>
 80118fc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80118fe:	f007 f971 	bl	8018be4 <wolfSSL_Free>
                XFREE(ipAddr, cert->heap, DYNAMIC_TYPE_ALTNAME);
 8011902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011908:	2b00      	cmp	r3, #0
 801190a:	d002      	beq.n	8011912 <DecodeAltNames+0x530>
 801190c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801190e:	f007 f969 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 8011912:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011916:	e082      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
        #endif /* OPENSSL_ALL || WOLFSSL_IP_ALT_NAME */
            AddAltName(cert, ipAddr);
 8011918:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff fc70 	bl	8011200 <AddAltName>

            length -= strLen;
 8011920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	1ad3      	subs	r3, r2, r3
 8011926:	633b      	str	r3, [r7, #48]	; 0x30
            idx    += strLen;
 8011928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192a:	69fa      	ldr	r2, [r7, #28]
 801192c:	4413      	add	r3, r2
 801192e:	637b      	str	r3, [r7, #52]	; 0x34
 8011930:	e070      	b.n	8011a14 <DecodeAltNames+0x632>
        }
#endif /* WOLFSSL_QT || OPENSSL_ALL */
#endif /* IGNORE_NAME_CONSTRAINTS */
        else if (current_byte ==
 8011932:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011936:	2ba0      	cmp	r3, #160	; 0xa0
 8011938:	d14d      	bne.n	80119d6 <DecodeAltNames+0x5f4>
                (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | ASN_OTHER_TYPE)) {
            int strLen;
            word32 lenStartIdx = idx;
 801193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            word32 oid = 0;
 8011940:	2300      	movs	r3, #0
 8011942:	617b      	str	r3, [r7, #20]
            int    ret = 0;
 8011944:	2300      	movs	r3, #0
 8011946:	67fb      	str	r3, [r7, #124]	; 0x7c

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	f107 0218 	add.w	r2, r7, #24
 801194e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f7fb fdff 	bl	800d556 <GetLength>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	da02      	bge.n	8011964 <DecodeAltNames+0x582>
                WOLFSSL_MSG("\tfail: other name length");
                return ASN_PARSE_E;
 801195e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011962:	e05c      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            /* Consume the rest of this sequence. */
            length -= (strLen + idx - lenStartIdx);
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	461a      	mov	r2, r3
 8011968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801196a:	4413      	add	r3, r2
 801196c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011974:	4413      	add	r3, r2
 8011976:	633b      	str	r3, [r7, #48]	; 0x30

            if (GetObjectId(input, &idx, &oid, oidCertAltNameType, sz) < 0) {
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	f107 0214 	add.w	r2, r7, #20
 801197e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	2309      	movs	r3, #9
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	f7fc fe04 	bl	800e594 <GetObjectId>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	da02      	bge.n	8011998 <DecodeAltNames+0x5b6>
                WOLFSSL_MSG("\tbad OID");
                return ASN_PARSE_E;
 8011992:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011996:	e042      	b.n	8011a1e <DecodeAltNames+0x63c>
                    break;
            #endif /* WOLFSSL_FPKI */

                default:
                    WOLFSSL_MSG("\tUnsupported other name type, skipping");
                    if (GetLength(input, &idx, &strLen, sz) < 0) {
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	f107 0218 	add.w	r2, r7, #24
 801199e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	f7fb fdd7 	bl	800d556 <GetLength>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	da0e      	bge.n	80119cc <DecodeAltNames+0x5ea>
                        /* check to skip constructed other names too */
                        if (DecodeConstructedOtherName(cert, input, &idx, sz,
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80119b4:	9300      	str	r3, [sp, #0]
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	68f9      	ldr	r1, [r7, #12]
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7ff fc44 	bl	8011248 <DecodeConstructedOtherName>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d026      	beq.n	8011a14 <DecodeAltNames+0x632>
                                    oid) != 0) {
                            WOLFSSL_MSG("\tfail: unsupported other name length");
                            return ASN_PARSE_E;
 80119c6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80119ca:	e028      	b.n	8011a1e <DecodeAltNames+0x63c>
                        }
                    }
                    else {
                        idx += strLen;
 80119cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ce:	69ba      	ldr	r2, [r7, #24]
 80119d0:	4413      	add	r3, r2
 80119d2:	637b      	str	r3, [r7, #52]	; 0x34
 80119d4:	e01e      	b.n	8011a14 <DecodeAltNames+0x632>
            }
            (void)ret;
        }
        else {
            int strLen;
            word32 lenStartIdx = idx;
 80119d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            WOLFSSL_MSG("\tUnsupported name type, skipping");

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	f107 0210 	add.w	r2, r7, #16
 80119e2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	f7fb fdb5 	bl	800d556 <GetLength>
 80119ec:	4603      	mov	r3, r0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	da02      	bge.n	80119f8 <DecodeAltNames+0x616>
                WOLFSSL_MSG("\tfail: unsupported name length");
                return ASN_PARSE_E;
 80119f2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80119f6:	e012      	b.n	8011a1e <DecodeAltNames+0x63c>
            }
            length -= (strLen + idx - lenStartIdx);
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	461a      	mov	r2, r3
 80119fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119fe:	4413      	add	r3, r2
 8011a00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a08:	4413      	add	r3, r2
 8011a0a:	633b      	str	r3, [r7, #48]	; 0x30
            idx += strLen;
 8011a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a0e:	693a      	ldr	r2, [r7, #16]
 8011a10:	4413      	add	r3, r2
 8011a12:	637b      	str	r3, [r7, #52]	; 0x34
    while (length > 0) {
 8011a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f73f ad11 	bgt.w	801143e <DecodeAltNames+0x5c>
        }
    }

    return 0;
 8011a1c:	2300      	movs	r3, #0
        }
    }

    return ret;
#endif
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3790      	adds	r7, #144	; 0x90
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <DecodeBasicCaConstraint>:
 * @return  BUFFER_E when data in buffer is too small.
 * @return  ASN_EXPECT_0_E when the INTEGER has the MSB set or NULL has a
 *          non-zero length.
 */
static int DecodeBasicCaConstraint(const byte* input, int sz, DecodedCert* cert)
{
 8011a26:	b580      	push	{r7, lr}
 8011a28:	b088      	sub	sp, #32
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	60f8      	str	r0, [r7, #12]
 8011a2e:	60b9      	str	r1, [r7, #8]
 8011a30:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 8011a32:	2300      	movs	r3, #0
 8011a34:	61bb      	str	r3, [r7, #24]
    int length = 0;
 8011a36:	2300      	movs	r3, #0
 8011a38:	617b      	str	r3, [r7, #20]
    int ret;

    WOLFSSL_ENTER("DecodeBasicCaConstraint");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	f107 0214 	add.w	r2, r7, #20
 8011a40:	f107 0118 	add.w	r1, r7, #24
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f7fb feed 	bl	800d824 <GetSequence>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	da02      	bge.n	8011a56 <DecodeBasicCaConstraint+0x30>
        WOLFSSL_MSG("\tfail: bad SEQUENCE");
        return ASN_PARSE_E;
 8011a50:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011a54:	e03c      	b.n	8011ad0 <DecodeBasicCaConstraint+0xaa>
    }

    if (length == 0)
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d101      	bne.n	8011a60 <DecodeBasicCaConstraint+0x3a>
        return 0;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	e037      	b.n	8011ad0 <DecodeBasicCaConstraint+0xaa>

    /* If the basic ca constraint is false, this extension may be named, but
     * left empty. So, if the length is 0, just return. */

    ret = GetBoolean(input, &idx, sz);
 8011a60:	68ba      	ldr	r2, [r7, #8]
 8011a62:	f107 0318 	add.w	r3, r7, #24
 8011a66:	4619      	mov	r1, r3
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f7fb ff67 	bl	800d93c <GetBoolean>
 8011a6e:	61f8      	str	r0, [r7, #28]

    /* Removed logic for WOLFSSL_X509_BASICCONS_INT which was mistreating the
     * pathlen value as if it were the CA Boolean value 7/2/2021 - KH.
     * When CA Boolean not asserted use the default value "False" */
    if (ret < 0) {
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	da01      	bge.n	8011a7a <DecodeBasicCaConstraint+0x54>
        WOLFSSL_MSG("\tfail: constraint not valid BOOLEAN, set default FALSE");
        ret = 0;
 8011a76:	2300      	movs	r3, #0
 8011a78:	61fb      	str	r3, [r7, #28]
    }

    cert->isCA = (byte)ret;
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	f003 0301 	and.w	r3, r3, #1
 8011a80:	b2d9      	uxtb	r1, r3
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 8011a88:	f361 1304 	bfi	r3, r1, #4, #1
 8011a8c:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468

    /* If there isn't any more data, return. */
    if (idx >= (word32)sz) {
 8011a90:	69ba      	ldr	r2, [r7, #24]
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d301      	bcc.n	8011a9c <DecodeBasicCaConstraint+0x76>
        return 0;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	e019      	b.n	8011ad0 <DecodeBasicCaConstraint+0xaa>
    }

    ret = GetInteger7Bit(input, &idx, sz);
 8011a9c:	68ba      	ldr	r2, [r7, #8]
 8011a9e:	f107 0318 	add.w	r3, r7, #24
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	f7fb fff5 	bl	800da94 <GetInteger7Bit>
 8011aaa:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	da01      	bge.n	8011ab6 <DecodeBasicCaConstraint+0x90>
        return ret;
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	e00c      	b.n	8011ad0 <DecodeBasicCaConstraint+0xaa>
    cert->pathLength = (byte)ret;
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	b2da      	uxtb	r2, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    cert->pathLengthSet = 1;
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 8011ac6:	f043 0320 	orr.w	r3, r3, #32
 8011aca:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468

    return 0;
 8011ace:	2300      	movs	r3, #0
    }

    FREE_ASNGETDATA(dataASN, cert->heap);
    return ret;
#endif
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3720      	adds	r7, #32
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <DecodePolicyConstraints>:


static int DecodePolicyConstraints(const byte* input, int sz, DecodedCert* cert)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b08a      	sub	sp, #40	; 0x28
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	623b      	str	r3, [r7, #32]
    int length = 0;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	61fb      	str	r3, [r7, #28]
    int skipLength = 0;
 8011aec:	2300      	movs	r3, #0
 8011aee:	61bb      	str	r3, [r7, #24]
    int ret;
    byte tag;

    WOLFSSL_ENTER("DecodePolicyConstraints");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	f107 021c 	add.w	r2, r7, #28
 8011af6:	f107 0120 	add.w	r1, r7, #32
 8011afa:	68f8      	ldr	r0, [r7, #12]
 8011afc:	f7fb fe92 	bl	800d824 <GetSequence>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da02      	bge.n	8011b0c <DecodePolicyConstraints+0x34>
        WOLFSSL_MSG("\tfail: bad SEQUENCE");
        return ASN_PARSE_E;
 8011b06:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011b0a:	e04f      	b.n	8011bac <DecodePolicyConstraints+0xd4>
    }

    if (length == 0)
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d102      	bne.n	8011b18 <DecodePolicyConstraints+0x40>
        return ASN_PARSE_E;
 8011b12:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011b16:	e049      	b.n	8011bac <DecodePolicyConstraints+0xd4>

    if (GetASNTag(input, &idx, &tag, sz) < 0) {
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	f107 0217 	add.w	r2, r7, #23
 8011b1e:	f107 0120 	add.w	r1, r7, #32
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f7fb fdaf 	bl	800d686 <GetASNTag>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	da02      	bge.n	8011b34 <DecodePolicyConstraints+0x5c>
        WOLFSSL_MSG("\tfail: bad TAG");
        return ASN_PARSE_E;
 8011b2e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011b32:	e03b      	b.n	8011bac <DecodePolicyConstraints+0xd4>
    }

    if (tag == (ASN_CONTEXT_SPECIFIC | 0)) {
 8011b34:	7dfb      	ldrb	r3, [r7, #23]
 8011b36:	2b80      	cmp	r3, #128	; 0x80
 8011b38:	d107      	bne.n	8011b4a <DecodePolicyConstraints+0x72>
        /* requireExplicitPolicy */
        cert->extPolicyConstRxpSet = 1;
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 8011b40:	f043 0320 	orr.w	r3, r3, #32
 8011b44:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
 8011b48:	e00d      	b.n	8011b66 <DecodePolicyConstraints+0x8e>
    }
    else if (tag == (ASN_CONTEXT_SPECIFIC | 1)) {
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
 8011b4c:	2b81      	cmp	r3, #129	; 0x81
 8011b4e:	d107      	bne.n	8011b60 <DecodePolicyConstraints+0x88>
        /* inhibitPolicyMapping */
        cert->extPolicyConstIpmSet = 1;
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 8011b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b5a:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
 8011b5e:	e002      	b.n	8011b66 <DecodePolicyConstraints+0x8e>
    }
    else {
        WOLFSSL_MSG("\tfail: invalid TAG");
        return ASN_PARSE_E;
 8011b60:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011b64:	e022      	b.n	8011bac <DecodePolicyConstraints+0xd4>
    }

    ret = GetLength(input, &idx, &skipLength, sz);
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	f107 0218 	add.w	r2, r7, #24
 8011b6c:	f107 0120 	add.w	r1, r7, #32
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f7fb fcf0 	bl	800d556 <GetLength>
 8011b76:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret < 0) {
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	da01      	bge.n	8011b82 <DecodePolicyConstraints+0xaa>
        WOLFSSL_MSG("\tfail: invalid length");
        return ret;
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b80:	e014      	b.n	8011bac <DecodePolicyConstraints+0xd4>
    }
    if (skipLength > 1) {
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	dd02      	ble.n	8011b8e <DecodePolicyConstraints+0xb6>
        WOLFSSL_MSG("\tfail: skip value too big");
        return BUFFER_E;
 8011b88:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8011b8c:	e00e      	b.n	8011bac <DecodePolicyConstraints+0xd4>
    }
    if (idx >= (word32)sz) {
 8011b8e:	6a3a      	ldr	r2, [r7, #32]
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d302      	bcc.n	8011b9c <DecodePolicyConstraints+0xc4>
        WOLFSSL_MSG("\tfail: no policy const skip to read");
        return BUFFER_E;
 8011b96:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8011b9a:	e007      	b.n	8011bac <DecodePolicyConstraints+0xd4>
    }
    cert->policyConstSkip = input[idx];
 8011b9c:	6a3b      	ldr	r3, [r7, #32]
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	781a      	ldrb	r2, [r3, #0]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca

    return 0;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3728      	adds	r7, #40	; 0x28
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <DecodeCrlDist>:
 * @return  ASN_PARSE_E when BER encoded data does not match ASN.1 items or
 *          is invalid.
 * @return  BUFFER_E when data in buffer is too small.
 */
static int DecodeCrlDist(const byte* input, int sz, DecodedCert* cert)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b088      	sub	sp, #32
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0, localIdx;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	61fb      	str	r3, [r7, #28]
    int length = 0;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	617b      	str	r3, [r7, #20]
    byte tag   = 0;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	74fb      	strb	r3, [r7, #19]

    WOLFSSL_ENTER("DecodeCrlDist");

    cert->extCrlInfoRaw = input;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    cert->extCrlInfoRawSz = sz;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	68ba      	ldr	r2, [r7, #8]
 8011bd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

    /* Unwrap the list of Distribution Points*/
    if (GetSequence(input, &idx, &length, sz) < 0)
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	f107 0214 	add.w	r2, r7, #20
 8011be2:	f107 011c 	add.w	r1, r7, #28
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f7fb fe1c 	bl	800d824 <GetSequence>
 8011bec:	4603      	mov	r3, r0
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	da02      	bge.n	8011bf8 <DecodeCrlDist+0x44>
        return ASN_PARSE_E;
 8011bf2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011bf6:	e0db      	b.n	8011db0 <DecodeCrlDist+0x1fc>

    /* Unwrap a single Distribution Point */
    if (GetSequence(input, &idx, &length, sz) < 0)
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	f107 0214 	add.w	r2, r7, #20
 8011bfe:	f107 011c 	add.w	r1, r7, #28
 8011c02:	68f8      	ldr	r0, [r7, #12]
 8011c04:	f7fb fe0e 	bl	800d824 <GetSequence>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	da02      	bge.n	8011c14 <DecodeCrlDist+0x60>
        return ASN_PARSE_E;
 8011c0e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011c12:	e0cd      	b.n	8011db0 <DecodeCrlDist+0x1fc>

    /* The Distribution Point has three explicit optional members
     *  First check for a DistributionPointName
     */
    localIdx = idx;
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	61bb      	str	r3, [r7, #24]
    if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	f107 0213 	add.w	r2, r7, #19
 8011c1e:	f107 0118 	add.w	r1, r7, #24
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f7fb fd2f 	bl	800d686 <GetASNTag>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d16d      	bne.n	8011d0a <DecodeCrlDist+0x156>
            tag == (ASN_CONSTRUCTED | DISTRIBUTION_POINT))
 8011c2e:	7cfb      	ldrb	r3, [r7, #19]
    if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011c30:	2ba0      	cmp	r3, #160	; 0xa0
 8011c32:	d16a      	bne.n	8011d0a <DecodeCrlDist+0x156>
    {
        idx++;
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	3301      	adds	r3, #1
 8011c38:	61fb      	str	r3, [r7, #28]
        if (GetLength(input, &idx, &length, sz) < 0)
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	f107 0214 	add.w	r2, r7, #20
 8011c40:	f107 011c 	add.w	r1, r7, #28
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f7fb fc86 	bl	800d556 <GetLength>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	da02      	bge.n	8011c56 <DecodeCrlDist+0xa2>
            return ASN_PARSE_E;
 8011c50:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011c54:	e0ac      	b.n	8011db0 <DecodeCrlDist+0x1fc>

        localIdx = idx;
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	61bb      	str	r3, [r7, #24]
        if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	f107 0213 	add.w	r2, r7, #19
 8011c60:	f107 0118 	add.w	r1, r7, #24
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	f7fb fd0e 	bl	800d686 <GetASNTag>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d148      	bne.n	8011d02 <DecodeCrlDist+0x14e>
                tag == (ASN_CONSTRUCTED | CRLDP_FULL_NAME))
 8011c70:	7cfb      	ldrb	r3, [r7, #19]
        if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011c72:	2ba0      	cmp	r3, #160	; 0xa0
 8011c74:	d145      	bne.n	8011d02 <DecodeCrlDist+0x14e>
        {
            idx++;
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	61fb      	str	r3, [r7, #28]
            if (GetLength(input, &idx, &length, sz) < 0)
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	f107 0214 	add.w	r2, r7, #20
 8011c82:	f107 011c 	add.w	r1, r7, #28
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f7fb fc65 	bl	800d556 <GetLength>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	da02      	bge.n	8011c98 <DecodeCrlDist+0xe4>
                return ASN_PARSE_E;
 8011c92:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011c96:	e08b      	b.n	8011db0 <DecodeCrlDist+0x1fc>

            localIdx = idx;
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	61bb      	str	r3, [r7, #24]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	f107 0213 	add.w	r2, r7, #19
 8011ca2:	f107 0118 	add.w	r1, r7, #24
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7fb fced 	bl	800d686 <GetASNTag>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d122      	bne.n	8011cf8 <DecodeCrlDist+0x144>
                    tag == GENERALNAME_URI)
 8011cb2:	7cfb      	ldrb	r3, [r7, #19]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011cb4:	2b86      	cmp	r3, #134	; 0x86
 8011cb6:	d11f      	bne.n	8011cf8 <DecodeCrlDist+0x144>
            {
                idx++;
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	61fb      	str	r3, [r7, #28]
                if (GetLength(input, &idx, &length, sz) < 0)
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	f107 0214 	add.w	r2, r7, #20
 8011cc4:	f107 011c 	add.w	r1, r7, #28
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f7fb fc44 	bl	800d556 <GetLength>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	da02      	bge.n	8011cda <DecodeCrlDist+0x126>
                    return ASN_PARSE_E;
 8011cd4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011cd8:	e06a      	b.n	8011db0 <DecodeCrlDist+0x1fc>

                cert->extCrlInfoSz = length;
 8011cda:	697a      	ldr	r2, [r7, #20]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
                cert->extCrlInfo = input + idx;
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	68fa      	ldr	r2, [r7, #12]
 8011ce6:	441a      	add	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
                idx += length;
 8011cee:	69fb      	ldr	r3, [r7, #28]
 8011cf0:	697a      	ldr	r2, [r7, #20]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	61fb      	str	r3, [r7, #28]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011cf6:	e008      	b.n	8011d0a <DecodeCrlDist+0x156>
            }
            else
                /* This isn't a URI, skip it. */
                idx += length;
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	697a      	ldr	r2, [r7, #20]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	61fb      	str	r3, [r7, #28]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011d00:	e003      	b.n	8011d0a <DecodeCrlDist+0x156>
        }
        else {
            /* This isn't a FULLNAME, skip it. */
            idx += length;
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	697a      	ldr	r2, [r7, #20]
 8011d06:	4413      	add	r3, r2
 8011d08:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Check for reasonFlags */
    localIdx = idx;
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	61bb      	str	r3, [r7, #24]
    if (idx < (word32)sz &&
 8011d0e:	69fa      	ldr	r2, [r7, #28]
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d222      	bcs.n	8011d5c <DecodeCrlDist+0x1a8>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	f107 0213 	add.w	r2, r7, #19
 8011d1c:	f107 0118 	add.w	r1, r7, #24
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f7fb fcb0 	bl	800d686 <GetASNTag>
 8011d26:	4603      	mov	r3, r0
    if (idx < (word32)sz &&
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d117      	bne.n	8011d5c <DecodeCrlDist+0x1a8>
        tag == (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 1))
 8011d2c:	7cfb      	ldrb	r3, [r7, #19]
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011d2e:	2ba1      	cmp	r3, #161	; 0xa1
 8011d30:	d114      	bne.n	8011d5c <DecodeCrlDist+0x1a8>
    {
        idx++;
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	3301      	adds	r3, #1
 8011d36:	61fb      	str	r3, [r7, #28]
        if (GetLength(input, &idx, &length, sz) < 0)
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	f107 0214 	add.w	r2, r7, #20
 8011d3e:	f107 011c 	add.w	r1, r7, #28
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f7fb fc07 	bl	800d556 <GetLength>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	da02      	bge.n	8011d54 <DecodeCrlDist+0x1a0>
            return ASN_PARSE_E;
 8011d4e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011d52:	e02d      	b.n	8011db0 <DecodeCrlDist+0x1fc>
        idx += length;
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	697a      	ldr	r2, [r7, #20]
 8011d58:	4413      	add	r3, r2
 8011d5a:	61fb      	str	r3, [r7, #28]
    }

    /* Check for cRLIssuer */
    localIdx = idx;
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	61bb      	str	r3, [r7, #24]
    if (idx < (word32)sz &&
 8011d60:	69fa      	ldr	r2, [r7, #28]
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d222      	bcs.n	8011dae <DecodeCrlDist+0x1fa>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	f107 0213 	add.w	r2, r7, #19
 8011d6e:	f107 0118 	add.w	r1, r7, #24
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	f7fb fc87 	bl	800d686 <GetASNTag>
 8011d78:	4603      	mov	r3, r0
    if (idx < (word32)sz &&
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d117      	bne.n	8011dae <DecodeCrlDist+0x1fa>
        tag == (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 2))
 8011d7e:	7cfb      	ldrb	r3, [r7, #19]
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8011d80:	2ba2      	cmp	r3, #162	; 0xa2
 8011d82:	d114      	bne.n	8011dae <DecodeCrlDist+0x1fa>
    {
        idx++;
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	3301      	adds	r3, #1
 8011d88:	61fb      	str	r3, [r7, #28]
        if (GetLength(input, &idx, &length, sz) < 0)
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	f107 0214 	add.w	r2, r7, #20
 8011d90:	f107 011c 	add.w	r1, r7, #28
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f7fb fbde 	bl	800d556 <GetLength>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	da02      	bge.n	8011da6 <DecodeCrlDist+0x1f2>
            return ASN_PARSE_E;
 8011da0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011da4:	e004      	b.n	8011db0 <DecodeCrlDist+0x1fc>
        idx += length;
 8011da6:	69fb      	ldr	r3, [r7, #28]
 8011da8:	697a      	ldr	r2, [r7, #20]
 8011daa:	4413      	add	r3, r2
 8011dac:	61fb      	str	r3, [r7, #28]
    {
        WOLFSSL_MSG("\tThere are more CRL Distribution Point records, "
                   "but we only use the first one.");
    }

    return 0;
 8011dae:	2300      	movs	r3, #0
    /* TODO: validate other points. */

    FREE_ASNGETDATA(dataASN, cert->heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3720      	adds	r7, #32
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <DecodeAuthInfo>:
 * @return  BUFFER_E when data in buffer is too small.
 * @return  ASN_OBJECT_ID_E when the expected OBJECT_ID tag is not found.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 */
static int DecodeAuthInfo(const byte* input, int sz, DecodedCert* cert)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b08c      	sub	sp, #48	; 0x30
 8011dbc:	af02      	add	r7, sp, #8
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	623b      	str	r3, [r7, #32]
    int length = 0;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	61fb      	str	r3, [r7, #28]
    int count  = 0;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	627b      	str	r3, [r7, #36]	; 0x24
    byte b = 0;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	76fb      	strb	r3, [r7, #27]
    word32 oid;

    WOLFSSL_ENTER("DecodeAuthInfo");

    /* Unwrap the list of AIAs */
    if (GetSequence(input, &idx, &length, sz) < 0)
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	f107 021c 	add.w	r2, r7, #28
 8011dda:	f107 0120 	add.w	r1, r7, #32
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f7fb fd20 	bl	800d824 <GetSequence>
 8011de4:	4603      	mov	r3, r0
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	da69      	bge.n	8011ebe <DecodeAuthInfo+0x106>
        return ASN_PARSE_E;
 8011dea:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011dee:	e06e      	b.n	8011ece <DecodeAuthInfo+0x116>

    while ((idx < (word32)sz) && (count < MAX_AIA_SZ)) {
        /* Unwrap a single AIA */
        if (GetSequence(input, &idx, &length, sz) < 0)
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	f107 021c 	add.w	r2, r7, #28
 8011df6:	f107 0120 	add.w	r1, r7, #32
 8011dfa:	68f8      	ldr	r0, [r7, #12]
 8011dfc:	f7fb fd12 	bl	800d824 <GetSequence>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	da02      	bge.n	8011e0c <DecodeAuthInfo+0x54>
            return ASN_PARSE_E;
 8011e06:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011e0a:	e060      	b.n	8011ece <DecodeAuthInfo+0x116>

        oid = 0;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	617b      	str	r3, [r7, #20]
        if (GetObjectId(input, &idx, &oid, oidCertAuthInfoType, sz) < 0) {
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	f107 0214 	add.w	r2, r7, #20
 8011e16:	f107 0120 	add.w	r1, r7, #32
 8011e1a:	9300      	str	r3, [sp, #0]
 8011e1c:	2307      	movs	r3, #7
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f7fc fbb8 	bl	800e594 <GetObjectId>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	da02      	bge.n	8011e30 <DecodeAuthInfo+0x78>
            return ASN_PARSE_E;
 8011e2a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011e2e:	e04e      	b.n	8011ece <DecodeAuthInfo+0x116>
        }

        /* Only supporting URIs right now. */
        if (GetASNTag(input, &idx, &b, sz) < 0)
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	f107 021b 	add.w	r2, r7, #27
 8011e36:	f107 0120 	add.w	r1, r7, #32
 8011e3a:	68f8      	ldr	r0, [r7, #12]
 8011e3c:	f7fb fc23 	bl	800d686 <GetASNTag>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	da02      	bge.n	8011e4c <DecodeAuthInfo+0x94>
            return ASN_PARSE_E;
 8011e46:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011e4a:	e040      	b.n	8011ece <DecodeAuthInfo+0x116>

        if (GetLength(input, &idx, &length, sz) < 0)
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	f107 021c 	add.w	r2, r7, #28
 8011e52:	f107 0120 	add.w	r1, r7, #32
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	f7fb fb7d 	bl	800d556 <GetLength>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	da02      	bge.n	8011e68 <DecodeAuthInfo+0xb0>
            return ASN_PARSE_E;
 8011e62:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011e66:	e032      	b.n	8011ece <DecodeAuthInfo+0x116>

        /* Set ocsp entry */
        if (b == GENERALNAME_URI && oid == AIA_OCSP_OID)
 8011e68:	7efb      	ldrb	r3, [r7, #27]
 8011e6a:	2b86      	cmp	r3, #134	; 0x86
 8011e6c:	d110      	bne.n	8011e90 <DecodeAuthInfo+0xd8>
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	2b74      	cmp	r3, #116	; 0x74
 8011e72:	d10d      	bne.n	8011e90 <DecodeAuthInfo+0xd8>
        {
            cert->extAuthInfoSz = length;
 8011e74:	69fa      	ldr	r2, [r7, #28]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
            cert->extAuthInfo = input + idx;
 8011e7c:	6a3b      	ldr	r3, [r7, #32]
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	441a      	add	r2, r3
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
        #if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
            count++;
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8011e8e:	e012      	b.n	8011eb6 <DecodeAuthInfo+0xfe>
            break;
        #endif
        }
        #if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
        /* Set CaIssuers entry */
        else if ((b == GENERALNAME_URI) && oid == AIA_CA_ISSUER_OID)
 8011e90:	7efb      	ldrb	r3, [r7, #27]
 8011e92:	2b86      	cmp	r3, #134	; 0x86
 8011e94:	d10f      	bne.n	8011eb6 <DecodeAuthInfo+0xfe>
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	2b75      	cmp	r3, #117	; 0x75
 8011e9a:	d10c      	bne.n	8011eb6 <DecodeAuthInfo+0xfe>
        {
            cert->extAuthInfoCaIssuerSz = length;
 8011e9c:	69fa      	ldr	r2, [r7, #28]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
            cert->extAuthInfoCaIssuer = input + idx;
 8011ea4:	6a3b      	ldr	r3, [r7, #32]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	441a      	add	r2, r3
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
            count++;
 8011eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif
        idx += length;
 8011eb6:	6a3b      	ldr	r3, [r7, #32]
 8011eb8:	69fa      	ldr	r2, [r7, #28]
 8011eba:	4413      	add	r3, r2
 8011ebc:	623b      	str	r3, [r7, #32]
    while ((idx < (word32)sz) && (count < MAX_AIA_SZ)) {
 8011ebe:	6a3a      	ldr	r2, [r7, #32]
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d202      	bcs.n	8011ecc <DecodeAuthInfo+0x114>
 8011ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	dd91      	ble.n	8011df0 <DecodeAuthInfo+0x38>
    }

    return 0;
 8011ecc:	2300      	movs	r3, #0
        }
    }

    return ret;
#endif
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3728      	adds	r7, #40	; 0x28
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}

08011ed6 <DecodeAuthKeyId>:
 * @return  ASN_PARSE_E when BER encoded data does not match ASN.1 items or
 *          is invalid.
 * @return  BUFFER_E when data in buffer is too small.
 */
static int DecodeAuthKeyId(const byte* input, int sz, DecodedCert* cert)
{
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	b088      	sub	sp, #32
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	60f8      	str	r0, [r7, #12]
 8011ede:	60b9      	str	r1, [r7, #8]
 8011ee0:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	61fb      	str	r3, [r7, #28]
    int length = 0;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	61bb      	str	r3, [r7, #24]
    byte tag;

    WOLFSSL_ENTER("DecodeAuthKeyId");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	f107 0218 	add.w	r2, r7, #24
 8011ef0:	f107 011c 	add.w	r1, r7, #28
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f7fb fc95 	bl	800d824 <GetSequence>
 8011efa:	4603      	mov	r3, r0
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	da02      	bge.n	8011f06 <DecodeAuthKeyId+0x30>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE");
        return ASN_PARSE_E;
 8011f00:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011f04:	e03d      	b.n	8011f82 <DecodeAuthKeyId+0xac>
    }

    if (GetASNTag(input, &idx, &tag, sz) < 0) {
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	f107 0217 	add.w	r2, r7, #23
 8011f0c:	f107 011c 	add.w	r1, r7, #28
 8011f10:	68f8      	ldr	r0, [r7, #12]
 8011f12:	f7fb fbb8 	bl	800d686 <GetASNTag>
 8011f16:	4603      	mov	r3, r0
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	da02      	bge.n	8011f22 <DecodeAuthKeyId+0x4c>
        return ASN_PARSE_E;
 8011f1c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011f20:	e02f      	b.n	8011f82 <DecodeAuthKeyId+0xac>
    }

    if (tag != (ASN_CONTEXT_SPECIFIC | 0)) {
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	2b80      	cmp	r3, #128	; 0x80
 8011f26:	d008      	beq.n	8011f3a <DecodeAuthKeyId+0x64>
        WOLFSSL_MSG("\tinfo: OPTIONAL item 0, not available");
        cert->extAuthKeyIdSet = 0;
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 8011f2e:	f36f 0382 	bfc	r3, #2, #1
 8011f32:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
        return 0;
 8011f36:	2300      	movs	r3, #0
 8011f38:	e023      	b.n	8011f82 <DecodeAuthKeyId+0xac>
    }

    if (GetLength(input, &idx, &length, sz) <= 0) {
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	f107 0218 	add.w	r2, r7, #24
 8011f40:	f107 011c 	add.w	r1, r7, #28
 8011f44:	68f8      	ldr	r0, [r7, #12]
 8011f46:	f7fb fb06 	bl	800d556 <GetLength>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	dc02      	bgt.n	8011f56 <DecodeAuthKeyId+0x80>
        WOLFSSL_MSG("\tfail: extension data length");
        return ASN_PARSE_E;
 8011f50:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011f54:	e015      	b.n	8011f82 <DecodeAuthKeyId+0xac>
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
#ifdef WOLFSSL_AKID_NAME
    cert->extRawAuthKeyIdSrc = input;
    cert->extRawAuthKeyIdSz = sz;
#endif
    cert->extAuthKeyIdSrc = &input[idx];
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	68fa      	ldr	r2, [r7, #12]
 8011f5a:	441a      	add	r2, r3
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
    cert->extAuthKeyIdSz = length;
 8011f62:	69bb      	ldr	r3, [r7, #24]
 8011f64:	461a      	mov	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#endif /* OPENSSL_EXTRA */

    return GetHashId(input + idx, length, cert->extAuthKeyId);
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	18d0      	adds	r0, r2, r3
 8011f72:	69b9      	ldr	r1, [r7, #24]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	f7fd fc29 	bl	800f7d2 <GetHashId>
 8011f80:	4603      	mov	r3, r0
    }

    FREE_ASNGETDATA(dataASN, cert->heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3720      	adds	r7, #32
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <DecodeSubjKeyId>:
 * @return  ASN_PARSE_E when the OCTET_STRING tag is not found or length is
 *          invalid.
 * @return  MEMORY_E on dynamic memory allocation failure.
 */
static int DecodeSubjKeyId(const byte* input, int sz, DecodedCert* cert)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b088      	sub	sp, #32
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	60f8      	str	r0, [r7, #12]
 8011f92:	60b9      	str	r1, [r7, #8]
 8011f94:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 8011f96:	2300      	movs	r3, #0
 8011f98:	61bb      	str	r3, [r7, #24]
    int length = 0;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	617b      	str	r3, [r7, #20]
    int ret = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	61fb      	str	r3, [r7, #28]

    WOLFSSL_ENTER("DecodeSubjKeyId");

    if (sz <= 0) {
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	dc02      	bgt.n	8011fae <DecodeSubjKeyId+0x24>
        ret = ASN_PARSE_E;
 8011fa8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8011fac:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0) {
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d108      	bne.n	8011fc6 <DecodeSubjKeyId+0x3c>
        ret = GetOctetString(input, &idx, &length, sz);
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	f107 0214 	add.w	r2, r7, #20
 8011fba:	f107 0118 	add.w	r1, r7, #24
 8011fbe:	68f8      	ldr	r0, [r7, #12]
 8011fc0:	f7fb fcfb 	bl	800d9ba <GetOctetString>
 8011fc4:	61f8      	str	r0, [r7, #28]
    }
    if (ret > 0) {
 8011fc6:	69fb      	ldr	r3, [r7, #28]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	dd15      	ble.n	8011ff8 <DecodeSubjKeyId+0x6e>
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        cert->extSubjKeyIdSrc = &input[idx];
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	441a      	add	r2, r3
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        cert->extSubjKeyIdSz = length;
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	461a      	mov	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
    #endif /* OPENSSL_EXTRA */

        /* Get the hash or hash of the hash if wrong size. */
        ret = GetHashId(input + idx, length, cert->extSubjKeyId);
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	18d0      	adds	r0, r2, r3
 8011fe8:	6979      	ldr	r1, [r7, #20]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	f7fd fbee 	bl	800f7d2 <GetHashId>
 8011ff6:	61f8      	str	r0, [r7, #28]
    }

    return ret;
 8011ff8:	69fb      	ldr	r3, [r7, #28]
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3720      	adds	r7, #32
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <DecodeKeyUsage>:
 * @return  ASN_PARSE_E when BER encoded data does not match ASN.1 items or
 *          is invalid.
 * @return  MEMORY_E on dynamic memory allocation failure.
 */
static int DecodeKeyUsage(const byte* input, int sz, DecodedCert* cert)
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b08a      	sub	sp, #40	; 0x28
 8012006:	af02      	add	r7, sp, #8
 8012008:	60f8      	str	r0, [r7, #12]
 801200a:	60b9      	str	r1, [r7, #8]
 801200c:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 801200e:	2300      	movs	r3, #0
 8012010:	61bb      	str	r3, [r7, #24]
    int length;
    int ret;
    WOLFSSL_ENTER("DecodeKeyUsage");

    ret = CheckBitString(input, &idx, &length, sz, 0, NULL);
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	f107 0214 	add.w	r2, r7, #20
 8012018:	f107 0118 	add.w	r1, r7, #24
 801201c:	2000      	movs	r0, #0
 801201e:	9001      	str	r0, [sp, #4]
 8012020:	2000      	movs	r0, #0
 8012022:	9000      	str	r0, [sp, #0]
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f7fb feef 	bl	800de08 <CheckBitString>
 801202a:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <DecodeKeyUsage+0x34>
        return ret;
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	e024      	b.n	8012080 <DecodeKeyUsage+0x7e>

    if (length == 0 || length > 2)
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <DecodeKeyUsage+0x40>
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	2b02      	cmp	r3, #2
 8012040:	dd02      	ble.n	8012048 <DecodeKeyUsage+0x46>
        return ASN_PARSE_E;
 8012042:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012046:	e01b      	b.n	8012080 <DecodeKeyUsage+0x7e>

    cert->extKeyUsage = (word16)(input[idx]);
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	68fa      	ldr	r2, [r7, #12]
 801204c:	4413      	add	r3, r2
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	b29a      	uxth	r2, r3
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
    if (length == 2)
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	2b02      	cmp	r3, #2
 801205c:	d10f      	bne.n	801207e <DecodeKeyUsage+0x7c>
        cert->extKeyUsage |= (word16)(input[idx+1] << 8);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8b3 23cc 	ldrh.w	r2, [r3, #972]	; 0x3cc
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	3301      	adds	r3, #1
 8012068:	68f9      	ldr	r1, [r7, #12]
 801206a:	440b      	add	r3, r1
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	b29b      	uxth	r3, r3
 8012070:	021b      	lsls	r3, r3, #8
 8012072:	b29b      	uxth	r3, r3
 8012074:	4313      	orrs	r3, r2
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc

    return 0;
 801207e:	2300      	movs	r3, #0
    GetASN_Int16Bit(&dataASN[KEYUSAGEASN_IDX_STR], &cert->extKeyUsage);
    /* Parse key usage. */
    return GetASN_Items(keyUsageASN, dataASN, keyUsageASN_Length, 0, input,
                        &idx, sz);
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8012080:	4618      	mov	r0, r3
 8012082:	3720      	adds	r7, #32
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <DecodeExtKeyUsage>:
 * @return  ASN_PARSE_E when BER encoded data does not match ASN.1 items or
 *          is invalid.
 * @return  MEMORY_E on dynamic memory allocation failure.
 */
static int DecodeExtKeyUsage(const byte* input, int sz, DecodedCert* cert)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b08a      	sub	sp, #40	; 0x28
 801208c:	af02      	add	r7, sp, #8
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0, oid;
 8012094:	2300      	movs	r3, #0
 8012096:	61bb      	str	r3, [r7, #24]
    int length, ret;

    WOLFSSL_ENTER("DecodeExtKeyUsage");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	f107 0210 	add.w	r2, r7, #16
 801209e:	f107 0118 	add.w	r1, r7, #24
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7fb fbbe 	bl	800d824 <GetSequence>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	da02      	bge.n	80120b4 <DecodeExtKeyUsage+0x2c>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE");
        return ASN_PARSE_E;
 80120ae:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80120b2:	e093      	b.n	80121dc <DecodeExtKeyUsage+0x154>
    }

#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
    cert->extExtKeyUsageSrc = input + idx;
 80120b4:	69bb      	ldr	r3, [r7, #24]
 80120b6:	68fa      	ldr	r2, [r7, #12]
 80120b8:	441a      	add	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
    cert->extExtKeyUsageSz = length;
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	461a      	mov	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#endif

    while (idx < (word32)sz) {
 80120ca:	e081      	b.n	80121d0 <DecodeExtKeyUsage+0x148>
        ret = GetObjectId(input, &idx, &oid, oidCertKeyUseType, sz);
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	f107 0214 	add.w	r2, r7, #20
 80120d2:	f107 0118 	add.w	r1, r7, #24
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	230a      	movs	r3, #10
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	f7fc fa5a 	bl	800e594 <GetObjectId>
 80120e0:	61f8      	str	r0, [r7, #28]
        if (ret == ASN_UNKNOWN_OID_E)
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	f113 0f94 	cmn.w	r3, #148	; 0x94
 80120e8:	d100      	bne.n	80120ec <DecodeExtKeyUsage+0x64>
            continue;
 80120ea:	e071      	b.n	80121d0 <DecodeExtKeyUsage+0x148>
        else if (ret < 0)
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	da01      	bge.n	80120f6 <DecodeExtKeyUsage+0x6e>
            return ret;
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	e072      	b.n	80121dc <DecodeExtKeyUsage+0x154>

        switch (oid) {
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	2b4f      	cmp	r3, #79	; 0x4f
 80120fa:	d819      	bhi.n	8012130 <DecodeExtKeyUsage+0xa8>
 80120fc:	2b47      	cmp	r3, #71	; 0x47
 80120fe:	d35f      	bcc.n	80121c0 <DecodeExtKeyUsage+0x138>
 8012100:	3b47      	subs	r3, #71	; 0x47
 8012102:	2b08      	cmp	r3, #8
 8012104:	d85c      	bhi.n	80121c0 <DecodeExtKeyUsage+0x138>
 8012106:	a201      	add	r2, pc, #4	; (adr r2, 801210c <DecodeExtKeyUsage+0x84>)
 8012108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801210c:	08012149 	.word	0x08012149
 8012110:	0801215d 	.word	0x0801215d
 8012114:	08012171 	.word	0x08012171
 8012118:	08012185 	.word	0x08012185
 801211c:	080121c1 	.word	0x080121c1
 8012120:	080121c1 	.word	0x080121c1
 8012124:	080121c1 	.word	0x080121c1
 8012128:	08012199 	.word	0x08012199
 801212c:	080121ad 	.word	0x080121ad
 8012130:	2b97      	cmp	r3, #151	; 0x97
 8012132:	d145      	bne.n	80121c0 <DecodeExtKeyUsage+0x138>
            case EKU_ANY_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_ANY;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 801213a:	f043 0301 	orr.w	r3, r3, #1
 801213e:	b2da      	uxtb	r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
                break;
 8012146:	e03c      	b.n	80121c2 <DecodeExtKeyUsage+0x13a>
            case EKU_SERVER_AUTH_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_SERVER_AUTH;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 801214e:	f043 0302 	orr.w	r3, r3, #2
 8012152:	b2da      	uxtb	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
                break;
 801215a:	e032      	b.n	80121c2 <DecodeExtKeyUsage+0x13a>
            case EKU_CLIENT_AUTH_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_CLIENT_AUTH;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8012162:	f043 0304 	orr.w	r3, r3, #4
 8012166:	b2da      	uxtb	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
                break;
 801216e:	e028      	b.n	80121c2 <DecodeExtKeyUsage+0x13a>
            case EKU_CODESIGNING_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_CODESIGN;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8012176:	f043 0308 	orr.w	r3, r3, #8
 801217a:	b2da      	uxtb	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
                break;
 8012182:	e01e      	b.n	80121c2 <DecodeExtKeyUsage+0x13a>
            case EKU_EMAILPROTECT_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_EMAILPROT;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 801218a:	f043 0310 	orr.w	r3, r3, #16
 801218e:	b2da      	uxtb	r2, r3
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
                break;
 8012196:	e014      	b.n	80121c2 <DecodeExtKeyUsage+0x13a>
            case EKU_TIMESTAMP_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_TIMESTAMP;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 801219e:	f043 0320 	orr.w	r3, r3, #32
 80121a2:	b2da      	uxtb	r2, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
                break;
 80121aa:	e00a      	b.n	80121c2 <DecodeExtKeyUsage+0x13a>
            case EKU_OCSP_SIGN_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_OCSP_SIGN;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80121b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121b6:	b2da      	uxtb	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
                break;
 80121be:	e000      	b.n	80121c2 <DecodeExtKeyUsage+0x13a>
            case EKU_SSH_KP_CLIENT_AUTH_OID:
                cert->extExtKeyUsageSsh |= EXTKEYUSE_SSH_KP_CLIENT_AUTH;
                break;
            #endif /* WOLFSSL_WOLFSSH */
            default:
                break;
 80121c0:	bf00      	nop
        }

    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        cert->extExtKeyUsageCount++;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80121c8:	1c5a      	adds	r2, r3, #1
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
    while (idx < (word32)sz) {
 80121d0:	69ba      	ldr	r2, [r7, #24]
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	f4ff af79 	bcc.w	80120cc <DecodeExtKeyUsage+0x44>
    #endif
    }

    return 0;
 80121da:	2300      	movs	r3, #0
        }
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3720      	adds	r7, #32
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <DecodeNsCertType>:

#ifndef IGNORE_NETSCAPE_CERT_TYPE

static int DecodeNsCertType(const byte* input, int sz, DecodedCert* cert)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b088      	sub	sp, #32
 80121e8:	af02      	add	r7, sp, #8
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 80121f0:	2300      	movs	r3, #0
 80121f2:	617b      	str	r3, [r7, #20]
    int len = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	613b      	str	r3, [r7, #16]

    WOLFSSL_ENTER("DecodeNsCertType");

    if (CheckBitString(input, &idx, &len, (word32)sz, 0, NULL) < 0)
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	f107 0210 	add.w	r2, r7, #16
 80121fe:	f107 0114 	add.w	r1, r7, #20
 8012202:	2000      	movs	r0, #0
 8012204:	9001      	str	r0, [sp, #4]
 8012206:	2000      	movs	r0, #0
 8012208:	9000      	str	r0, [sp, #0]
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f7fb fdfc 	bl	800de08 <CheckBitString>
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	da02      	bge.n	801221c <DecodeNsCertType+0x38>
        return ASN_PARSE_E;
 8012216:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801221a:	e00e      	b.n	801223a <DecodeNsCertType+0x56>

    /* Don't need to worry about unused bits as CheckBitString makes sure
     * they're zero. */
    if (idx < (word32)sz)
 801221c:	697a      	ldr	r2, [r7, #20]
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	429a      	cmp	r2, r3
 8012222:	d208      	bcs.n	8012236 <DecodeNsCertType+0x52>
        cert->nsCertType = input[idx];
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	4413      	add	r3, r2
 801222a:	781a      	ldrb	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    else
        return ASN_PARSE_E;

    return 0;
 8012232:	2300      	movs	r3, #0
 8012234:	e001      	b.n	801223a <DecodeNsCertType+0x56>
        return ASN_PARSE_E;
 8012236:	f06f 038b 	mvn.w	r3, #139	; 0x8b
}
 801223a:	4618      	mov	r0, r3
 801223c:	3718      	adds	r7, #24
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}

08012242 <DecodeSubtree>:
 * @return  MEMORY_E when dynamic memory allocation fails.
 * @return  ASN_PARSE_E when SEQUENCE is not found as expected.
 */
static int DecodeSubtree(const byte* input, int sz, Base_entry** head,
                         void* heap)
{
 8012242:	b580      	push	{r7, lr}
 8012244:	b08c      	sub	sp, #48	; 0x30
 8012246:	af00      	add	r7, sp, #0
 8012248:	60f8      	str	r0, [r7, #12]
 801224a:	60b9      	str	r1, [r7, #8]
 801224c:	607a      	str	r2, [r7, #4]
 801224e:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 8012250:	2300      	movs	r3, #0
 8012252:	61fb      	str	r3, [r7, #28]
    int ret = 0;
 8012254:	2300      	movs	r3, #0
 8012256:	62fb      	str	r3, [r7, #44]	; 0x2c

    (void)heap;

    while (idx < (word32)sz) {
 8012258:	e094      	b.n	8012384 <DecodeSubtree+0x142>
        int seqLength, strLength;
        word32 nameIdx;
        byte b, bType;

        if (GetSequence(input, &idx, &seqLength, sz) < 0) {
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	f107 0218 	add.w	r2, r7, #24
 8012260:	f107 011c 	add.w	r1, r7, #28
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f7fb fadd 	bl	800d824 <GetSequence>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	da02      	bge.n	8012276 <DecodeSubtree+0x34>
            WOLFSSL_MSG("\tfail: should be a SEQUENCE");
            return ASN_PARSE_E;
 8012270:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012274:	e08c      	b.n	8012390 <DecodeSubtree+0x14e>
        }

        if (idx >= (word32)sz) {
 8012276:	69fa      	ldr	r2, [r7, #28]
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	429a      	cmp	r2, r3
 801227c:	d302      	bcc.n	8012284 <DecodeSubtree+0x42>
            WOLFSSL_MSG("\tfail: expecting tag");
            return ASN_PARSE_E;
 801227e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012282:	e085      	b.n	8012390 <DecodeSubtree+0x14e>
        }

        nameIdx = idx;
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	613b      	str	r3, [r7, #16]
        b = input[nameIdx++];
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	1c5a      	adds	r2, r3, #1
 801228c:	613a      	str	r2, [r7, #16]
 801228e:	68fa      	ldr	r2, [r7, #12]
 8012290:	4413      	add	r3, r2
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (GetLength(input, &nameIdx, &strLength, sz) <= 0) {
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	f107 0214 	add.w	r2, r7, #20
 801229e:	f107 0110 	add.w	r1, r7, #16
 80122a2:	68f8      	ldr	r0, [r7, #12]
 80122a4:	f7fb f957 	bl	800d556 <GetLength>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	dc02      	bgt.n	80122b4 <DecodeSubtree+0x72>
            WOLFSSL_MSG("\tinvalid length");
            return ASN_PARSE_E;
 80122ae:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80122b2:	e06d      	b.n	8012390 <DecodeSubtree+0x14e>
        }

        /* Get type, LSB 4-bits */
        bType = (b & ASN_TYPE_MASK);
 80122b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80122b8:	f003 031f 	and.w	r3, r3, #31
 80122bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

        if (bType == ASN_DNS_TYPE || bType == ASN_RFC822_TYPE ||
 80122c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80122c4:	2b02      	cmp	r3, #2
 80122c6:	d007      	beq.n	80122d8 <DecodeSubtree+0x96>
 80122c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d003      	beq.n	80122d8 <DecodeSubtree+0x96>
 80122d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80122d4:	2b04      	cmp	r3, #4
 80122d6:	d151      	bne.n	801237c <DecodeSubtree+0x13a>
                                                        bType == ASN_DIR_TYPE) {
            Base_entry* entry;

            /* if constructed has leading sequence */
            if (b & ASN_CONSTRUCTED) {
 80122d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80122dc:	f003 0320 	and.w	r3, r3, #32
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00d      	beq.n	8012300 <DecodeSubtree+0xbe>
                if (GetSequence(input, &nameIdx, &strLength, sz) < 0) {
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	f107 0214 	add.w	r2, r7, #20
 80122ea:	f107 0110 	add.w	r1, r7, #16
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f7fb fa98 	bl	800d824 <GetSequence>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	da02      	bge.n	8012300 <DecodeSubtree+0xbe>
                    WOLFSSL_MSG("\tfail: constructed be a SEQUENCE");
                    return ASN_PARSE_E;
 80122fa:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80122fe:	e047      	b.n	8012390 <DecodeSubtree+0x14e>
                }
            }

            entry = (Base_entry*)XMALLOC(sizeof(Base_entry), heap,
 8012300:	2010      	movs	r0, #16
 8012302:	f006 fc53 	bl	8018bac <wolfSSL_Malloc>
 8012306:	6278      	str	r0, [r7, #36]	; 0x24
                                                          DYNAMIC_TYPE_ALTNAME);
            if (entry == NULL) {
 8012308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230a:	2b00      	cmp	r3, #0
 801230c:	d102      	bne.n	8012314 <DecodeSubtree+0xd2>
                WOLFSSL_MSG("allocate error");
                return MEMORY_E;
 801230e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8012312:	e03d      	b.n	8012390 <DecodeSubtree+0x14e>
            }

            entry->name = (char*)XMALLOC(strLength+1, heap, DYNAMIC_TYPE_ALTNAME);
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	3301      	adds	r3, #1
 8012318:	4618      	mov	r0, r3
 801231a:	f006 fc47 	bl	8018bac <wolfSSL_Malloc>
 801231e:	4602      	mov	r2, r0
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	605a      	str	r2, [r3, #4]
            if (entry->name == NULL) {
 8012324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10a      	bne.n	8012342 <DecodeSubtree+0x100>
                WOLFSSL_MSG("allocate error");
                XFREE(entry, heap, DYNAMIC_TYPE_ALTNAME);
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	623b      	str	r3, [r7, #32]
 8012330:	6a3b      	ldr	r3, [r7, #32]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d002      	beq.n	801233c <DecodeSubtree+0xfa>
 8012336:	6a38      	ldr	r0, [r7, #32]
 8012338:	f006 fc54 	bl	8018be4 <wolfSSL_Free>
                return MEMORY_E;
 801233c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8012340:	e026      	b.n	8012390 <DecodeSubtree+0x14e>
            }

            XMEMCPY(entry->name, &input[nameIdx], strLength);
 8012342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012344:	6858      	ldr	r0, [r3, #4]
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	4413      	add	r3, r2
 801234c:	697a      	ldr	r2, [r7, #20]
 801234e:	4619      	mov	r1, r3
 8012350:	f00e ffc8 	bl	80212e4 <memcpy>
            entry->name[strLength] = '\0';
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	697a      	ldr	r2, [r7, #20]
 801235a:	4413      	add	r3, r2
 801235c:	2200      	movs	r2, #0
 801235e:	701a      	strb	r2, [r3, #0]
            entry->nameSz = strLength;
 8012360:	697a      	ldr	r2, [r7, #20]
 8012362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012364:	609a      	str	r2, [r3, #8]
            entry->type = bType;
 8012366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012368:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 801236c:	731a      	strb	r2, [r3, #12]

            entry->next = *head;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012374:	601a      	str	r2, [r3, #0]
            *head = entry;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801237a:	601a      	str	r2, [r3, #0]
        }

        idx += seqLength;
 801237c:	69fb      	ldr	r3, [r7, #28]
 801237e:	69ba      	ldr	r2, [r7, #24]
 8012380:	4413      	add	r3, r2
 8012382:	61fb      	str	r3, [r7, #28]
    while (idx < (word32)sz) {
 8012384:	69fa      	ldr	r2, [r7, #28]
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	429a      	cmp	r2, r3
 801238a:	f4ff af66 	bcc.w	801225a <DecodeSubtree+0x18>
    }

    return ret;
 801238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    FREE_ASNGETDATA(dataASN, heap);
    return ret;
#endif
}
 8012390:	4618      	mov	r0, r3
 8012392:	3730      	adds	r7, #48	; 0x30
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}

08012398 <DecodeNameConstraints>:
 * @return  ASN_PARSE_E when BER encoded data does not match ASN.1 items or
 *          is invalid.
 * @return  MEMORY_E on dynamic memory allocation failure.
 */
static int DecodeNameConstraints(const byte* input, int sz, DecodedCert* cert)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b088      	sub	sp, #32
 801239c:	af00      	add	r7, sp, #0
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 80123a4:	2300      	movs	r3, #0
 80123a6:	617b      	str	r3, [r7, #20]
    int length = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	613b      	str	r3, [r7, #16]

    WOLFSSL_ENTER("DecodeNameConstraints");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	f107 0210 	add.w	r2, r7, #16
 80123b2:	f107 0114 	add.w	r1, r7, #20
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f7fb fa34 	bl	800d824 <GetSequence>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	da3e      	bge.n	8012440 <DecodeNameConstraints+0xa8>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE");
        return ASN_PARSE_E;
 80123c2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80123c6:	e040      	b.n	801244a <DecodeNameConstraints+0xb2>
    }

    while (idx < (word32)sz) {
        byte b = input[idx++];
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	1c5a      	adds	r2, r3, #1
 80123cc:	617a      	str	r2, [r7, #20]
 80123ce:	68fa      	ldr	r2, [r7, #12]
 80123d0:	4413      	add	r3, r2
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	76fb      	strb	r3, [r7, #27]
        Base_entry** subtree = NULL;
 80123d6:	2300      	movs	r3, #0
 80123d8:	61fb      	str	r3, [r7, #28]

        if (GetLength(input, &idx, &length, sz) <= 0) {
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	f107 0210 	add.w	r2, r7, #16
 80123e0:	f107 0114 	add.w	r1, r7, #20
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f7fb f8b6 	bl	800d556 <GetLength>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	dc02      	bgt.n	80123f6 <DecodeNameConstraints+0x5e>
            WOLFSSL_MSG("\tinvalid length");
            return ASN_PARSE_E;
 80123f0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80123f4:	e029      	b.n	801244a <DecodeNameConstraints+0xb2>
        }

        if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 0))
 80123f6:	7efb      	ldrb	r3, [r7, #27]
 80123f8:	2ba0      	cmp	r3, #160	; 0xa0
 80123fa:	d103      	bne.n	8012404 <DecodeNameConstraints+0x6c>
            subtree = &cert->permittedNames;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	3338      	adds	r3, #56	; 0x38
 8012400:	61fb      	str	r3, [r7, #28]
 8012402:	e009      	b.n	8012418 <DecodeNameConstraints+0x80>
        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 1))
 8012404:	7efb      	ldrb	r3, [r7, #27]
 8012406:	2ba1      	cmp	r3, #161	; 0xa1
 8012408:	d103      	bne.n	8012412 <DecodeNameConstraints+0x7a>
            subtree = &cert->excludedNames;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	333c      	adds	r3, #60	; 0x3c
 801240e:	61fb      	str	r3, [r7, #28]
 8012410:	e002      	b.n	8012418 <DecodeNameConstraints+0x80>
        else {
            WOLFSSL_MSG("\tinvalid subtree");
            return ASN_PARSE_E;
 8012412:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012416:	e018      	b.n	801244a <DecodeNameConstraints+0xb2>
        }

        if (DecodeSubtree(input + idx, length, subtree, cert->heap) < 0) {
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	18d0      	adds	r0, r2, r3
 801241e:	6939      	ldr	r1, [r7, #16]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8012426:	69fa      	ldr	r2, [r7, #28]
 8012428:	f7ff ff0b 	bl	8012242 <DecodeSubtree>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	da02      	bge.n	8012438 <DecodeNameConstraints+0xa0>
            WOLFSSL_MSG("\terror parsing subtree");
            return ASN_PARSE_E;
 8012432:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012436:	e008      	b.n	801244a <DecodeNameConstraints+0xb2>
        }

        idx += length;
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	693a      	ldr	r2, [r7, #16]
 801243c:	4413      	add	r3, r2
 801243e:	617b      	str	r3, [r7, #20]
    while (idx < (word32)sz) {
 8012440:	697a      	ldr	r2, [r7, #20]
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	429a      	cmp	r2, r3
 8012446:	d3bf      	bcc.n	80123c8 <DecodeNameConstraints+0x30>
    }

    return 0;
 8012448:	2300      	movs	r3, #0

    FREE_ASNGETDATA(dataASN, cert->heap);

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 801244a:	4618      	mov	r0, r3
 801244c:	3720      	adds	r7, #32
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
	...

08012454 <DecodeExtensionType>:
 * @return  Other negative values on error.
 */
static int DecodeExtensionType(const byte* input, int length, word32 oid,
                               byte critical, DecodedCert* cert,
                               int *isUnknownExt)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	70fb      	strb	r3, [r7, #3]
    int ret = 0;
 8012462:	2300      	movs	r3, #0
 8012464:	617b      	str	r3, [r7, #20]
    word32 idx = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	613b      	str	r3, [r7, #16]

    if (isUnknownExt != NULL)
 801246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <DecodeExtensionType+0x22>
        *isUnknownExt = 0;
 8012470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012472:	2200      	movs	r2, #0
 8012474:	601a      	str	r2, [r3, #0]

    switch (oid) {
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f240 22f1 	movw	r2, #753	; 0x2f1
 801247c:	4293      	cmp	r3, r2
 801247e:	f000 821e 	beq.w	80128be <DecodeExtensionType+0x46a>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012488:	4293      	cmp	r3, r2
 801248a:	f200 8250 	bhi.w	801292e <DecodeExtensionType+0x4da>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2b45      	cmp	r3, #69	; 0x45
 8012492:	f000 80bd 	beq.w	8012610 <DecodeExtensionType+0x1bc>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2b45      	cmp	r3, #69	; 0x45
 801249a:	f0c0 8248 	bcc.w	801292e <DecodeExtensionType+0x4da>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2ba8      	cmp	r3, #168	; 0xa8
 80124a2:	f200 8244 	bhi.w	801292e <DecodeExtensionType+0x4da>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2b80      	cmp	r3, #128	; 0x80
 80124aa:	f0c0 8240 	bcc.w	801292e <DecodeExtensionType+0x4da>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	3b80      	subs	r3, #128	; 0x80
 80124b2:	2b28      	cmp	r3, #40	; 0x28
 80124b4:	f200 823b 	bhi.w	801292e <DecodeExtensionType+0x4da>
 80124b8:	a201      	add	r2, pc, #4	; (adr r2, 80124c0 <DecodeExtensionType+0x6c>)
 80124ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124be:	bf00      	nop
 80124c0:	08012719 	.word	0x08012719
 80124c4:	08012783 	.word	0x08012783
 80124c8:	0801292f 	.word	0x0801292f
 80124cc:	08012667 	.word	0x08012667
 80124d0:	0801292f 	.word	0x0801292f
 80124d4:	08012565 	.word	0x08012565
 80124d8:	0801292f 	.word	0x0801292f
 80124dc:	0801292f 	.word	0x0801292f
 80124e0:	0801292f 	.word	0x0801292f
 80124e4:	0801292f 	.word	0x0801292f
 80124e8:	0801292f 	.word	0x0801292f
 80124ec:	0801292f 	.word	0x0801292f
 80124f0:	0801292f 	.word	0x0801292f
 80124f4:	0801292f 	.word	0x0801292f
 80124f8:	0801292f 	.word	0x0801292f
 80124fc:	0801292f 	.word	0x0801292f
 8012500:	0801282f 	.word	0x0801282f
 8012504:	080125bb 	.word	0x080125bb
 8012508:	08012949 	.word	0x08012949
 801250c:	0801292f 	.word	0x0801292f
 8012510:	0801292f 	.word	0x0801292f
 8012514:	080126af 	.word	0x080126af
 8012518:	080128d7 	.word	0x080128d7
 801251c:	080127d9 	.word	0x080127d9
 8012520:	0801292f 	.word	0x0801292f
 8012524:	0801292f 	.word	0x0801292f
 8012528:	0801292f 	.word	0x0801292f
 801252c:	0801292f 	.word	0x0801292f
 8012530:	0801292f 	.word	0x0801292f
 8012534:	0801292f 	.word	0x0801292f
 8012538:	0801292f 	.word	0x0801292f
 801253c:	0801292f 	.word	0x0801292f
 8012540:	0801292f 	.word	0x0801292f
 8012544:	0801292f 	.word	0x0801292f
 8012548:	0801292f 	.word	0x0801292f
 801254c:	0801292f 	.word	0x0801292f
 8012550:	0801292f 	.word	0x0801292f
 8012554:	0801292f 	.word	0x0801292f
 8012558:	0801292f 	.word	0x0801292f
 801255c:	0801292f 	.word	0x0801292f
 8012560:	08012899 	.word	0x08012899
        /* Basic Constraints. */
        case BASIC_CA_OID:
            VERIFY_AND_SET_OID(cert->extBasicConstSet);
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 801256a:	f003 0308 	and.w	r3, r3, #8
 801256e:	b2db      	uxtb	r3, r3
 8012570:	2b00      	cmp	r3, #0
 8012572:	d11b      	bne.n	80125ac <DecodeExtensionType+0x158>
 8012574:	6a3a      	ldr	r2, [r7, #32]
 8012576:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 801257a:	f043 0308 	orr.w	r3, r3, #8
 801257e:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
            cert->extBasicConstCrit = critical;
 8012582:	78fb      	ldrb	r3, [r7, #3]
 8012584:	f003 0301 	and.w	r3, r3, #1
 8012588:	b2d9      	uxtb	r1, r3
 801258a:	6a3a      	ldr	r2, [r7, #32]
 801258c:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 8012590:	f361 1304 	bfi	r3, r1, #4, #1
 8012594:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
            if (DecodeBasicCaConstraint(input, length, cert) < 0) {
 8012598:	6a3a      	ldr	r2, [r7, #32]
 801259a:	68b9      	ldr	r1, [r7, #8]
 801259c:	68f8      	ldr	r0, [r7, #12]
 801259e:	f7ff fa42 	bl	8011a26 <DecodeBasicCaConstraint>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f280 81d1 	bge.w	801294c <DecodeExtensionType+0x4f8>
 80125aa:	e002      	b.n	80125b2 <DecodeExtensionType+0x15e>
            VERIFY_AND_SET_OID(cert->extBasicConstSet);
 80125ac:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 80125b0:	e1e2      	b.n	8012978 <DecodeExtensionType+0x524>
                ret = ASN_PARSE_E;
 80125b2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80125b6:	617b      	str	r3, [r7, #20]
            }
            break;
 80125b8:	e1c8      	b.n	801294c <DecodeExtensionType+0x4f8>

        /* CRL Distribution point. */
        case CRL_DIST_OID:
            VERIFY_AND_SET_OID(cert->extCRLdistSet);
 80125ba:	6a3b      	ldr	r3, [r7, #32]
 80125bc:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 80125c0:	f003 0302 	and.w	r3, r3, #2
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d11b      	bne.n	8012602 <DecodeExtensionType+0x1ae>
 80125ca:	6a3a      	ldr	r2, [r7, #32]
 80125cc:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 80125d0:	f043 0302 	orr.w	r3, r3, #2
 80125d4:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
            cert->extCRLdistCrit = critical;
 80125d8:	78fb      	ldrb	r3, [r7, #3]
 80125da:	f003 0301 	and.w	r3, r3, #1
 80125de:	b2d9      	uxtb	r1, r3
 80125e0:	6a3a      	ldr	r2, [r7, #32]
 80125e2:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 80125e6:	f361 0382 	bfi	r3, r1, #2, #1
 80125ea:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
            if (DecodeCrlDist(input, length, cert) < 0) {
 80125ee:	6a3a      	ldr	r2, [r7, #32]
 80125f0:	68b9      	ldr	r1, [r7, #8]
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f7ff fade 	bl	8011bb4 <DecodeCrlDist>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f280 81a8 	bge.w	8012950 <DecodeExtensionType+0x4fc>
 8012600:	e002      	b.n	8012608 <DecodeExtensionType+0x1b4>
            VERIFY_AND_SET_OID(cert->extCRLdistSet);
 8012602:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8012606:	e1b7      	b.n	8012978 <DecodeExtensionType+0x524>
                ret = ASN_PARSE_E;
 8012608:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801260c:	617b      	str	r3, [r7, #20]
            }
            break;
 801260e:	e19f      	b.n	8012950 <DecodeExtensionType+0x4fc>

        /* Authority information access. */
        case AUTH_INFO_OID:
            VERIFY_AND_SET_OID(cert->extAuthInfoSet);
 8012610:	6a3b      	ldr	r3, [r7, #32]
 8012612:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 8012616:	f003 0304 	and.w	r3, r3, #4
 801261a:	b2db      	uxtb	r3, r3
 801261c:	2b00      	cmp	r3, #0
 801261e:	d11b      	bne.n	8012658 <DecodeExtensionType+0x204>
 8012620:	6a3a      	ldr	r2, [r7, #32]
 8012622:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 8012626:	f043 0304 	orr.w	r3, r3, #4
 801262a:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
            cert->extAuthInfoCrit = critical;
 801262e:	78fb      	ldrb	r3, [r7, #3]
 8012630:	f003 0301 	and.w	r3, r3, #1
 8012634:	b2d9      	uxtb	r1, r3
 8012636:	6a3a      	ldr	r2, [r7, #32]
 8012638:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 801263c:	f361 03c3 	bfi	r3, r1, #3, #1
 8012640:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
            if (DecodeAuthInfo(input, length, cert) < 0) {
 8012644:	6a3a      	ldr	r2, [r7, #32]
 8012646:	68b9      	ldr	r1, [r7, #8]
 8012648:	68f8      	ldr	r0, [r7, #12]
 801264a:	f7ff fbb5 	bl	8011db8 <DecodeAuthInfo>
 801264e:	4603      	mov	r3, r0
 8012650:	2b00      	cmp	r3, #0
 8012652:	f280 817f 	bge.w	8012954 <DecodeExtensionType+0x500>
 8012656:	e002      	b.n	801265e <DecodeExtensionType+0x20a>
            VERIFY_AND_SET_OID(cert->extAuthInfoSet);
 8012658:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 801265c:	e18c      	b.n	8012978 <DecodeExtensionType+0x524>
                ret = ASN_PARSE_E;
 801265e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012662:	617b      	str	r3, [r7, #20]
            }
            break;
 8012664:	e176      	b.n	8012954 <DecodeExtensionType+0x500>

        /* Subject alternative name. */
        case ALT_NAMES_OID:
            VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 8012666:	6a3b      	ldr	r3, [r7, #32]
 8012668:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 801266c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012670:	b2db      	uxtb	r3, r3
 8012672:	2b00      	cmp	r3, #0
 8012674:	d118      	bne.n	80126a8 <DecodeExtensionType+0x254>
 8012676:	6a3a      	ldr	r2, [r7, #32]
 8012678:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 801267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012680:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
            cert->extSubjAltNameCrit = critical;
 8012684:	78fb      	ldrb	r3, [r7, #3]
 8012686:	f003 0301 	and.w	r3, r3, #1
 801268a:	b2d9      	uxtb	r1, r3
 801268c:	6a3a      	ldr	r2, [r7, #32]
 801268e:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 8012692:	f361 1386 	bfi	r3, r1, #6, #1
 8012696:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
            ret = DecodeAltNames(input, length, cert);
 801269a:	6a3a      	ldr	r2, [r7, #32]
 801269c:	68b9      	ldr	r1, [r7, #8]
 801269e:	68f8      	ldr	r0, [r7, #12]
 80126a0:	f7fe fe9f 	bl	80113e2 <DecodeAltNames>
 80126a4:	6178      	str	r0, [r7, #20]
            break;
 80126a6:	e166      	b.n	8012976 <DecodeExtensionType+0x522>
            VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 80126a8:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 80126ac:	e164      	b.n	8012978 <DecodeExtensionType+0x524>

        /* Authority Key Identifier. */
        case AUTH_KEY_OID:
            VERIFY_AND_SET_OID(cert->extAuthKeyIdSet);
 80126ae:	6a3b      	ldr	r3, [r7, #32]
 80126b0:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 80126b4:	f003 0304 	and.w	r3, r3, #4
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d115      	bne.n	80126ea <DecodeExtensionType+0x296>
 80126be:	6a3a      	ldr	r2, [r7, #32]
 80126c0:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 80126c4:	f043 0304 	orr.w	r3, r3, #4
 80126c8:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
            cert->extAuthKeyIdCrit = critical;
 80126cc:	78fb      	ldrb	r3, [r7, #3]
 80126ce:	f003 0301 	and.w	r3, r3, #1
 80126d2:	b2d9      	uxtb	r1, r3
 80126d4:	6a3a      	ldr	r2, [r7, #32]
 80126d6:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 80126da:	f361 13c7 	bfi	r3, r1, #7, #1
 80126de:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
            #ifndef WOLFSSL_ALLOW_CRIT_SKID
                /* This check is added due to RFC 5280 section 4.2.1.1
                 * stating that conforming CA's must mark this extension
                 * as non-critical. When parsing extensions check that
                 * certificate was made in compliance with this. */
                if (critical) {
 80126e2:	78fb      	ldrb	r3, [r7, #3]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d006      	beq.n	80126f6 <DecodeExtensionType+0x2a2>
 80126e8:	e002      	b.n	80126f0 <DecodeExtensionType+0x29c>
            VERIFY_AND_SET_OID(cert->extAuthKeyIdSet);
 80126ea:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 80126ee:	e143      	b.n	8012978 <DecodeExtensionType+0x524>
                    WOLFSSL_MSG("Critical Auth Key ID is not allowed");
                    WOLFSSL_MSG("Use macro WOLFSSL_ALLOW_CRIT_SKID if wanted");
                    ret = ASN_CRIT_EXT_E;
 80126f0:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 80126f4:	617b      	str	r3, [r7, #20]
                }
            #endif
            if ((ret == 0) && (DecodeAuthKeyId(input, length, cert) < 0)) {
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f040 812d 	bne.w	8012958 <DecodeExtensionType+0x504>
 80126fe:	6a3a      	ldr	r2, [r7, #32]
 8012700:	68b9      	ldr	r1, [r7, #8]
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f7ff fbe7 	bl	8011ed6 <DecodeAuthKeyId>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	f280 8124 	bge.w	8012958 <DecodeExtensionType+0x504>
                ret = ASN_PARSE_E;
 8012710:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012714:	617b      	str	r3, [r7, #20]
            }
            break;
 8012716:	e11f      	b.n	8012958 <DecodeExtensionType+0x504>

        /* Subject Key Identifier. */
        case SUBJ_KEY_OID:
            VERIFY_AND_SET_OID(cert->extSubjKeyIdSet);
 8012718:	6a3b      	ldr	r3, [r7, #32]
 801271a:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 801271e:	f003 0302 	and.w	r3, r3, #2
 8012722:	b2db      	uxtb	r3, r3
 8012724:	2b00      	cmp	r3, #0
 8012726:	d115      	bne.n	8012754 <DecodeExtensionType+0x300>
 8012728:	6a3a      	ldr	r2, [r7, #32]
 801272a:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 801272e:	f043 0302 	orr.w	r3, r3, #2
 8012732:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
            cert->extSubjKeyIdCrit = critical;
 8012736:	78fb      	ldrb	r3, [r7, #3]
 8012738:	f003 0301 	and.w	r3, r3, #1
 801273c:	b2d9      	uxtb	r1, r3
 801273e:	6a3a      	ldr	r2, [r7, #32]
 8012740:	f892 346b 	ldrb.w	r3, [r2, #1131]	; 0x46b
 8012744:	f361 0341 	bfi	r3, r1, #1, #1
 8012748:	f882 346b 	strb.w	r3, [r2, #1131]	; 0x46b
            #ifndef WOLFSSL_ALLOW_CRIT_SKID
                /* This check is added due to RFC 5280 section 4.2.1.2
                 * stating that conforming CA's must mark this extension
                 * as non-critical. When parsing extensions check that
                 * certificate was made in compliance with this. */
                if (critical) {
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d006      	beq.n	8012760 <DecodeExtensionType+0x30c>
 8012752:	e002      	b.n	801275a <DecodeExtensionType+0x306>
            VERIFY_AND_SET_OID(cert->extSubjKeyIdSet);
 8012754:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8012758:	e10e      	b.n	8012978 <DecodeExtensionType+0x524>
                    WOLFSSL_MSG("Critical Subject Key ID is not allowed");
                    WOLFSSL_MSG("Use macro WOLFSSL_ALLOW_CRIT_SKID if wanted");
                    ret = ASN_CRIT_EXT_E;
 801275a:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 801275e:	617b      	str	r3, [r7, #20]
                }
            #endif

            if ((ret == 0) && (DecodeSubjKeyId(input, length, cert) < 0)) {
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	2b00      	cmp	r3, #0
 8012764:	f040 80fa 	bne.w	801295c <DecodeExtensionType+0x508>
 8012768:	6a3a      	ldr	r2, [r7, #32]
 801276a:	68b9      	ldr	r1, [r7, #8]
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f7ff fc0c 	bl	8011f8a <DecodeSubjKeyId>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	f280 80f1 	bge.w	801295c <DecodeExtensionType+0x508>
                ret = ASN_PARSE_E;
 801277a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801277e:	617b      	str	r3, [r7, #20]
            }
            break;
 8012780:	e0ec      	b.n	801295c <DecodeExtensionType+0x508>
            #endif
            break;

        /* Key usage. */
        case KEY_USAGE_OID:
            VERIFY_AND_SET_OID(cert->extKeyUsageSet);
 8012782:	6a3b      	ldr	r3, [r7, #32]
 8012784:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012788:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801278c:	b2db      	uxtb	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	d11b      	bne.n	80127ca <DecodeExtensionType+0x376>
 8012792:	6a3a      	ldr	r2, [r7, #32]
 8012794:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 8012798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801279c:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
            cert->extKeyUsageCrit = critical;
 80127a0:	78fb      	ldrb	r3, [r7, #3]
 80127a2:	f003 0301 	and.w	r3, r3, #1
 80127a6:	b2d9      	uxtb	r1, r3
 80127a8:	6a3a      	ldr	r2, [r7, #32]
 80127aa:	f892 346b 	ldrb.w	r3, [r2, #1131]	; 0x46b
 80127ae:	f361 0382 	bfi	r3, r1, #2, #1
 80127b2:	f882 346b 	strb.w	r3, [r2, #1131]	; 0x46b
            if (DecodeKeyUsage(input, length, cert) < 0) {
 80127b6:	6a3a      	ldr	r2, [r7, #32]
 80127b8:	68b9      	ldr	r1, [r7, #8]
 80127ba:	68f8      	ldr	r0, [r7, #12]
 80127bc:	f7ff fc21 	bl	8012002 <DecodeKeyUsage>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	f280 80cc 	bge.w	8012960 <DecodeExtensionType+0x50c>
 80127c8:	e002      	b.n	80127d0 <DecodeExtensionType+0x37c>
            VERIFY_AND_SET_OID(cert->extKeyUsageSet);
 80127ca:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 80127ce:	e0d3      	b.n	8012978 <DecodeExtensionType+0x524>
                ret = ASN_PARSE_E;
 80127d0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80127d4:	617b      	str	r3, [r7, #20]
            }
            break;
 80127d6:	e0c3      	b.n	8012960 <DecodeExtensionType+0x50c>

        /* Extended key usage. */
        case EXT_KEY_USAGE_OID:
            VERIFY_AND_SET_OID(cert->extExtKeyUsageSet);
 80127d8:	6a3b      	ldr	r3, [r7, #32]
 80127da:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 80127de:	f003 0301 	and.w	r3, r3, #1
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d11b      	bne.n	8012820 <DecodeExtensionType+0x3cc>
 80127e8:	6a3a      	ldr	r2, [r7, #32]
 80127ea:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 80127ee:	f043 0301 	orr.w	r3, r3, #1
 80127f2:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
            cert->extExtKeyUsageCrit = critical;
 80127f6:	78fb      	ldrb	r3, [r7, #3]
 80127f8:	f003 0301 	and.w	r3, r3, #1
 80127fc:	b2d9      	uxtb	r1, r3
 80127fe:	6a3a      	ldr	r2, [r7, #32]
 8012800:	f892 346b 	ldrb.w	r3, [r2, #1131]	; 0x46b
 8012804:	f361 03c3 	bfi	r3, r1, #3, #1
 8012808:	f882 346b 	strb.w	r3, [r2, #1131]	; 0x46b
            if (DecodeExtKeyUsage(input, length, cert) < 0) {
 801280c:	6a3a      	ldr	r2, [r7, #32]
 801280e:	68b9      	ldr	r1, [r7, #8]
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f7ff fc39 	bl	8012088 <DecodeExtKeyUsage>
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	f280 80a3 	bge.w	8012964 <DecodeExtensionType+0x510>
 801281e:	e002      	b.n	8012826 <DecodeExtensionType+0x3d2>
            VERIFY_AND_SET_OID(cert->extExtKeyUsageSet);
 8012820:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8012824:	e0a8      	b.n	8012978 <DecodeExtensionType+0x524>
                ret = ASN_PARSE_E;
 8012826:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801282a:	617b      	str	r3, [r7, #20]
            }
            break;
 801282c:	e09a      	b.n	8012964 <DecodeExtensionType+0x510>
        case NAME_CONS_OID:
        #ifndef WOLFSSL_NO_ASN_STRICT
            /* Verify RFC 5280 Sec 4.2.1.10 rule:
                "The name constraints extension,
                which MUST be used only in a CA certificate" */
            if (!cert->isCA) {
 801282e:	6a3b      	ldr	r3, [r7, #32]
 8012830:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012834:	f003 0310 	and.w	r3, r3, #16
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d102      	bne.n	8012844 <DecodeExtensionType+0x3f0>
                WOLFSSL_MSG("Name constraints allowed only for CA certs");
                WOLFSSL_ERROR_VERBOSE(ASN_NAME_INVALID_E);
                ret = ASN_NAME_INVALID_E;
 801283e:	f06f 03c5 	mvn.w	r3, #197	; 0xc5
 8012842:	617b      	str	r3, [r7, #20]
            }
        #endif
            VERIFY_AND_SET_OID(cert->extNameConstraintSet);
 8012844:	6a3b      	ldr	r3, [r7, #32]
 8012846:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 801284a:	f003 0308 	and.w	r3, r3, #8
 801284e:	b2db      	uxtb	r3, r3
 8012850:	2b00      	cmp	r3, #0
 8012852:	d11a      	bne.n	801288a <DecodeExtensionType+0x436>
 8012854:	6a3a      	ldr	r2, [r7, #32]
 8012856:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 801285a:	f043 0308 	orr.w	r3, r3, #8
 801285e:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
            cert->extNameConstraintCrit = critical;
 8012862:	78fb      	ldrb	r3, [r7, #3]
 8012864:	f003 0301 	and.w	r3, r3, #1
 8012868:	b2d9      	uxtb	r1, r3
 801286a:	6a3a      	ldr	r2, [r7, #32]
 801286c:	f892 346b 	ldrb.w	r3, [r2, #1131]	; 0x46b
 8012870:	f361 0300 	bfi	r3, r1, #0, #1
 8012874:	f882 346b 	strb.w	r3, [r2, #1131]	; 0x46b
            if (DecodeNameConstraints(input, length, cert) < 0) {
 8012878:	6a3a      	ldr	r2, [r7, #32]
 801287a:	68b9      	ldr	r1, [r7, #8]
 801287c:	68f8      	ldr	r0, [r7, #12]
 801287e:	f7ff fd8b 	bl	8012398 <DecodeNameConstraints>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	da6f      	bge.n	8012968 <DecodeExtensionType+0x514>
 8012888:	e002      	b.n	8012890 <DecodeExtensionType+0x43c>
            VERIFY_AND_SET_OID(cert->extNameConstraintSet);
 801288a:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 801288e:	e073      	b.n	8012978 <DecodeExtensionType+0x524>
                ret = ASN_PARSE_E;
 8012890:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012894:	617b      	str	r3, [r7, #20]
            }
            break;
 8012896:	e067      	b.n	8012968 <DecodeExtensionType+0x514>
        #endif /* IGNORE_NAME_CONSTRAINTS */

        /* Inhibit anyPolicy. */
        case INHIBIT_ANY_OID:
            VERIFY_AND_SET_OID(cert->inhibitAnyOidSet);
 8012898:	6a3b      	ldr	r3, [r7, #32]
 801289a:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 801289e:	f003 0301 	and.w	r3, r3, #1
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d107      	bne.n	80128b8 <DecodeExtensionType+0x464>
 80128a8:	6a3a      	ldr	r2, [r7, #32]
 80128aa:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 80128ae:	f043 0301 	orr.w	r3, r3, #1
 80128b2:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
            WOLFSSL_MSG("Inhibit anyPolicy extension not supported yet.");
            break;
 80128b6:	e05e      	b.n	8012976 <DecodeExtensionType+0x522>
            VERIFY_AND_SET_OID(cert->inhibitAnyOidSet);
 80128b8:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 80128bc:	e05c      	b.n	8012978 <DecodeExtensionType+0x524>

   #ifndef IGNORE_NETSCAPE_CERT_TYPE
        /* Netscape's certificate type. */
        case NETSCAPE_CT_OID:
            if (DecodeNsCertType(input, length, cert) < 0)
 80128be:	6a3a      	ldr	r2, [r7, #32]
 80128c0:	68b9      	ldr	r1, [r7, #8]
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f7ff fc8e 	bl	80121e4 <DecodeNsCertType>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	da4e      	bge.n	801296c <DecodeExtensionType+0x518>
                ret = ASN_PARSE_E;
 80128ce:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80128d2:	617b      	str	r3, [r7, #20]
            break;
 80128d4:	e04a      	b.n	801296c <DecodeExtensionType+0x518>
                ret = ASN_PARSE_E;
            }
            break;
    #endif
        case POLICY_CONST_OID:
            VERIFY_AND_SET_OID(cert->extPolicyConstSet);
 80128d6:	6a3b      	ldr	r3, [r7, #32]
 80128d8:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 80128dc:	f003 0310 	and.w	r3, r3, #16
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d11d      	bne.n	8012922 <DecodeExtensionType+0x4ce>
 80128e6:	6a3a      	ldr	r2, [r7, #32]
 80128e8:	f892 3469 	ldrb.w	r3, [r2, #1129]	; 0x469
 80128ec:	f043 0310 	orr.w	r3, r3, #16
 80128f0:	f882 3469 	strb.w	r3, [r2, #1129]	; 0x469
            cert->extPolicyConstCrit = critical;
 80128f4:	78fb      	ldrb	r3, [r7, #3]
 80128f6:	f003 0301 	and.w	r3, r3, #1
 80128fa:	b2d9      	uxtb	r1, r3
 80128fc:	6a3a      	ldr	r2, [r7, #32]
 80128fe:	f892 346a 	ldrb.w	r3, [r2, #1130]	; 0x46a
 8012902:	f361 1345 	bfi	r3, r1, #5, #1
 8012906:	f882 346a 	strb.w	r3, [r2, #1130]	; 0x46a
            if (DecodePolicyConstraints(&input[idx], length, cert) < 0)
 801290a:	68fa      	ldr	r2, [r7, #12]
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	4413      	add	r3, r2
 8012910:	6a3a      	ldr	r2, [r7, #32]
 8012912:	68b9      	ldr	r1, [r7, #8]
 8012914:	4618      	mov	r0, r3
 8012916:	f7ff f8df 	bl	8011ad8 <DecodePolicyConstraints>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	da27      	bge.n	8012970 <DecodeExtensionType+0x51c>
 8012920:	e002      	b.n	8012928 <DecodeExtensionType+0x4d4>
            VERIFY_AND_SET_OID(cert->extPolicyConstSet);
 8012922:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8012926:	e027      	b.n	8012978 <DecodeExtensionType+0x524>
                return ASN_PARSE_E;
 8012928:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801292c:	e024      	b.n	8012978 <DecodeExtensionType+0x524>
            if (DecodeSubjInfoAcc(&input[idx], length, cert) < 0)
                return ASN_PARSE_E;
            break;
    #endif
        default:
            if (isUnknownExt != NULL)
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	2b00      	cmp	r3, #0
 8012932:	d002      	beq.n	801293a <DecodeExtensionType+0x4e6>
                *isUnknownExt = 1;
 8012934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012936:	2201      	movs	r2, #1
 8012938:	601a      	str	r2, [r3, #0]
        #ifndef WOLFSSL_NO_ASN_STRICT
            /* While it is a failure to not support critical extensions,
             * still parse the certificate ignoring the unsupported
             * extension to allow caller to accept it with the verify
             * callback. */
            if (critical) {
 801293a:	78fb      	ldrb	r3, [r7, #3]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d019      	beq.n	8012974 <DecodeExtensionType+0x520>
                WOLFSSL_ERROR_VERBOSE(ASN_CRIT_EXT_E);
                ret = ASN_CRIT_EXT_E;
 8012940:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 8012944:	617b      	str	r3, [r7, #20]
            }
        #endif
            break;
 8012946:	e015      	b.n	8012974 <DecodeExtensionType+0x520>
            break;
 8012948:	bf00      	nop
 801294a:	e014      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 801294c:	bf00      	nop
 801294e:	e012      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012950:	bf00      	nop
 8012952:	e010      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012954:	bf00      	nop
 8012956:	e00e      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012958:	bf00      	nop
 801295a:	e00c      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 801295c:	bf00      	nop
 801295e:	e00a      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012960:	bf00      	nop
 8012962:	e008      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012964:	bf00      	nop
 8012966:	e006      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012968:	bf00      	nop
 801296a:	e004      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 801296c:	bf00      	nop
 801296e:	e002      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012970:	bf00      	nop
 8012972:	e000      	b.n	8012976 <DecodeExtensionType+0x522>
            break;
 8012974:	bf00      	nop
    }

    return ret;
 8012976:	697b      	ldr	r3, [r7, #20]
}
 8012978:	4618      	mov	r0, r3
 801297a:	3718      	adds	r7, #24
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <DecodeCertExtensions>:
/*
 *  Processing the Certificate Extensions. This does not modify the current
 *  index. It is works starting with the recorded extensions pointer.
 */
static int DecodeCertExtensions(DecodedCert* cert)
{
 8012980:	b590      	push	{r4, r7, lr}
 8012982:	b08f      	sub	sp, #60	; 0x3c
 8012984:	af02      	add	r7, sp, #8
 8012986:	6078      	str	r0, [r7, #4]
#ifndef WOLFSSL_ASN_TEMPLATE
    int ret = 0;
 8012988:	2300      	movs	r3, #0
 801298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    word32 idx = 0;
 801298c:	2300      	movs	r3, #0
 801298e:	61fb      	str	r3, [r7, #28]
    int sz = cert->extensionsSz;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 8012996:	627b      	str	r3, [r7, #36]	; 0x24
    const byte* input = cert->extensions;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 801299e:	623b      	str	r3, [r7, #32]
    int length;
    word32 oid;
    byte critical = 0;
 80129a0:	2300      	movs	r3, #0
 80129a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    byte criticalFail = 0;
 80129a6:	2300      	movs	r3, #0
 80129a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    byte tag = 0;
 80129ac:	2300      	movs	r3, #0
 80129ae:	74fb      	strb	r3, [r7, #19]

    WOLFSSL_ENTER("DecodeCertExtensions");

    if (input == NULL || sz == 0)
 80129b0:	6a3b      	ldr	r3, [r7, #32]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d002      	beq.n	80129bc <DecodeCertExtensions+0x3c>
 80129b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d102      	bne.n	80129c2 <DecodeCertExtensions+0x42>
        return BAD_FUNC_ARG;
 80129bc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80129c0:	e0b7      	b.n	8012b32 <DecodeCertExtensions+0x1b2>

#ifdef WOLFSSL_CERT_REQ
    if (!cert->isCSR)
#endif
    { /* Not included in CSR */
        if (GetASNTag(input, &idx, &tag, sz) < 0) {
 80129c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c4:	f107 0213 	add.w	r2, r7, #19
 80129c8:	f107 011c 	add.w	r1, r7, #28
 80129cc:	6a38      	ldr	r0, [r7, #32]
 80129ce:	f7fa fe5a 	bl	800d686 <GetASNTag>
 80129d2:	4603      	mov	r3, r0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	da02      	bge.n	80129de <DecodeCertExtensions+0x5e>
            return ASN_PARSE_E;
 80129d8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80129dc:	e0a9      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
        }

        if (tag != ASN_EXTENSIONS) {
 80129de:	7cfb      	ldrb	r3, [r7, #19]
 80129e0:	2ba3      	cmp	r3, #163	; 0xa3
 80129e2:	d002      	beq.n	80129ea <DecodeCertExtensions+0x6a>
            WOLFSSL_MSG("\tfail: should be an EXTENSIONS");
            return ASN_PARSE_E;
 80129e4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80129e8:	e0a3      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
        }

        if (GetLength(input, &idx, &length, sz) < 0) {
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	f107 0218 	add.w	r2, r7, #24
 80129f0:	f107 011c 	add.w	r1, r7, #28
 80129f4:	6a38      	ldr	r0, [r7, #32]
 80129f6:	f7fa fdae 	bl	800d556 <GetLength>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	da02      	bge.n	8012a06 <DecodeCertExtensions+0x86>
            WOLFSSL_MSG("\tfail: invalid length");
            return ASN_PARSE_E;
 8012a00:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012a04:	e095      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
        }
    }

    if (GetSequence(input, &idx, &length, sz) < 0) {
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	f107 0218 	add.w	r2, r7, #24
 8012a0c:	f107 011c 	add.w	r1, r7, #28
 8012a10:	6a38      	ldr	r0, [r7, #32]
 8012a12:	f7fa ff07 	bl	800d824 <GetSequence>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	da7a      	bge.n	8012b12 <DecodeCertExtensions+0x192>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE (1)");
        return ASN_PARSE_E;
 8012a1c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012a20:	e087      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
    }

    while (idx < (word32)sz) {
        word32 localIdx;

        if (GetSequence(input, &idx, &length, sz) < 0) {
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	f107 0218 	add.w	r2, r7, #24
 8012a28:	f107 011c 	add.w	r1, r7, #28
 8012a2c:	6a38      	ldr	r0, [r7, #32]
 8012a2e:	f7fa fef9 	bl	800d824 <GetSequence>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	da02      	bge.n	8012a3e <DecodeCertExtensions+0xbe>
            WOLFSSL_MSG("\tfail: should be a SEQUENCE");
            return ASN_PARSE_E;
 8012a38:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8012a3c:	e079      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
        }

        oid = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	617b      	str	r3, [r7, #20]
        if ((ret = GetObjectId(input, &idx, &oid, oidCertExtType, sz)) < 0) {
 8012a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a44:	f107 0214 	add.w	r2, r7, #20
 8012a48:	f107 011c 	add.w	r1, r7, #28
 8012a4c:	9300      	str	r3, [sp, #0]
 8012a4e:	2306      	movs	r3, #6
 8012a50:	6a38      	ldr	r0, [r7, #32]
 8012a52:	f7fb fd9f 	bl	800e594 <GetObjectId>
 8012a56:	62f8      	str	r0, [r7, #44]	; 0x2c
 8012a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	da01      	bge.n	8012a62 <DecodeCertExtensions+0xe2>
            WOLFSSL_MSG("\tfail: OBJECT ID");
            return ret;
 8012a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a60:	e067      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
        }

        /* check for critical flag */
        critical = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if ((idx + 1) > (word32)sz) {
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	1c5a      	adds	r2, r3, #1
 8012a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d902      	bls.n	8012a78 <DecodeCertExtensions+0xf8>
            WOLFSSL_MSG("\tfail: malformed buffer");
            return BUFFER_E;
 8012a72:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8012a76:	e05c      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
        }

        localIdx = idx;
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	60fb      	str	r3, [r7, #12]
        if (GetASNTag(input, &localIdx, &tag, sz) == 0) {
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7e:	f107 0213 	add.w	r2, r7, #19
 8012a82:	f107 010c 	add.w	r1, r7, #12
 8012a86:	6a38      	ldr	r0, [r7, #32]
 8012a88:	f7fa fdfd 	bl	800d686 <GetASNTag>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d112      	bne.n	8012ab8 <DecodeCertExtensions+0x138>
            if (tag == ASN_BOOLEAN) {
 8012a92:	7cfb      	ldrb	r3, [r7, #19]
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d10f      	bne.n	8012ab8 <DecodeCertExtensions+0x138>
                ret = GetBoolean(input, &idx, sz);
 8012a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a9a:	f107 031c 	add.w	r3, r7, #28
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	6a38      	ldr	r0, [r7, #32]
 8012aa2:	f7fa ff4b 	bl	800d93c <GetBoolean>
 8012aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (ret < 0) {
 8012aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	da01      	bge.n	8012ab2 <DecodeCertExtensions+0x132>
                    WOLFSSL_MSG("\tfail: critical boolean");
                    return ret;
 8012aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab0:	e03f      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
                }

                critical = (byte)ret;
 8012ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }
        }

        /* process the extension based on the OID */
        ret = GetOctetString(input, &idx, &length, sz);
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aba:	f107 0218 	add.w	r2, r7, #24
 8012abe:	f107 011c 	add.w	r1, r7, #28
 8012ac2:	6a38      	ldr	r0, [r7, #32]
 8012ac4:	f7fa ff79 	bl	800d9ba <GetOctetString>
 8012ac8:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret < 0) {
 8012aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	da01      	bge.n	8012ad4 <DecodeCertExtensions+0x154>
            WOLFSSL_MSG("\tfail: bad OCTET STRING");
            return ret;
 8012ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad2:	e02e      	b.n	8012b32 <DecodeCertExtensions+0x1b2>
        }

        ret = DecodeExtensionType(input + idx, length, oid, critical, cert,
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	6a3a      	ldr	r2, [r7, #32]
 8012ad8:	18d0      	adds	r0, r2, r3
 8012ada:	69b9      	ldr	r1, [r7, #24]
 8012adc:	697a      	ldr	r2, [r7, #20]
 8012ade:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	4623      	mov	r3, r4
 8012aec:	f7ff fcb2 	bl	8012454 <DecodeExtensionType>
 8012af0:	62f8      	str	r0, [r7, #44]	; 0x2c
                                  NULL);
        if (ret == ASN_CRIT_EXT_E) {
 8012af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af4:	f113 0fa0 	cmn.w	r3, #160	; 0xa0
 8012af8:	d104      	bne.n	8012b04 <DecodeCertExtensions+0x184>
            ret = 0;
 8012afa:	2300      	movs	r3, #0
 8012afc:	62fb      	str	r3, [r7, #44]	; 0x2c
            criticalFail = 1;
 8012afe:	2301      	movs	r3, #1
 8012b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        }
        if (ret < 0)
 8012b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	db11      	blt.n	8012b2e <DecodeCertExtensions+0x1ae>
            goto end;
        idx += length;
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	69ba      	ldr	r2, [r7, #24]
 8012b0e:	4413      	add	r3, r2
 8012b10:	61fb      	str	r3, [r7, #28]
    while (idx < (word32)sz) {
 8012b12:	69fa      	ldr	r2, [r7, #28]
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d383      	bcc.n	8012a22 <DecodeCertExtensions+0xa2>
    }

    ret = criticalFail ? ASN_CRIT_EXT_E : 0;
 8012b1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d002      	beq.n	8012b28 <DecodeCertExtensions+0x1a8>
 8012b22:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 8012b26:	e000      	b.n	8012b2a <DecodeCertExtensions+0x1aa>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b2c:	e000      	b.n	8012b30 <DecodeCertExtensions+0x1b0>
            goto end;
 8012b2e:	bf00      	nop
end:
    return ret;
 8012b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    FREE_ASNGETDATA(dataASN, cert->heap);
    return ret;
#endif
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3734      	adds	r7, #52	; 0x34
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd90      	pop	{r4, r7, pc}

08012b3a <ParseCert>:
#endif /* WOLFSSL_CERT_REQ */

#endif

int ParseCert(DecodedCert* cert, int type, int verify, void* cm)
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b086      	sub	sp, #24
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	60f8      	str	r0, [r7, #12]
 8012b42:	60b9      	str	r1, [r7, #8]
 8012b44:	607a      	str	r2, [r7, #4]
 8012b46:	603b      	str	r3, [r7, #0]
#if (!defined(WOLFSSL_NO_MALLOC) && !defined(NO_WOLFSSL_CM_VERIFY)) || \
    defined(WOLFSSL_DYN_CERT)
    char* ptr;
#endif

    ret = ParseCertRelative(cert, type, verify, cm);
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	68b9      	ldr	r1, [r7, #8]
 8012b4e:	68f8      	ldr	r0, [r7, #12]
 8012b50:	f000 f869 	bl	8012c26 <ParseCertRelative>
 8012b54:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	da01      	bge.n	8012b60 <ParseCert+0x26>
        return ret;
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	e05e      	b.n	8012c1e <ParseCert+0xe4>

#if (!defined(WOLFSSL_NO_MALLOC) && !defined(NO_WOLFSSL_CM_VERIFY)) || \
    defined(WOLFSSL_DYN_CERT)
    /* cert->subjectCN not stored as copy of WOLFSSL_NO_MALLOC defind */
    if (cert->subjectCNLen > 0) {
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	dd2a      	ble.n	8012bc0 <ParseCert+0x86>
        ptr = (char*) XMALLOC(cert->subjectCNLen + 1, cert->heap,
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b70:	3301      	adds	r3, #1
 8012b72:	4618      	mov	r0, r3
 8012b74:	f006 f81a 	bl	8018bac <wolfSSL_Malloc>
 8012b78:	6138      	str	r0, [r7, #16]
                              DYNAMIC_TYPE_SUBJECT_CN);
        if (ptr == NULL)
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d102      	bne.n	8012b86 <ParseCert+0x4c>
            return MEMORY_E;
 8012b80:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8012b84:	e04b      	b.n	8012c1e <ParseCert+0xe4>
        XMEMCPY(ptr, cert->subjectCN, cert->subjectCNLen);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b92:	461a      	mov	r2, r3
 8012b94:	6938      	ldr	r0, [r7, #16]
 8012b96:	f00e fba5 	bl	80212e4 <memcpy>
        ptr[cert->subjectCNLen] = '\0';
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	4413      	add	r3, r2
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	701a      	strb	r2, [r3, #0]
        cert->subjectCN = ptr;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	693a      	ldr	r2, [r7, #16]
 8012bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        cert->subjectCNStored = 1;
 8012bb2:	68fa      	ldr	r2, [r7, #12]
 8012bb4:	f892 3468 	ldrb.w	r3, [r2, #1128]	; 0x468
 8012bb8:	f043 0301 	orr.w	r3, r3, #1
 8012bbc:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
#endif

#if (!defined(WOLFSSL_NO_MALLOC) && !defined(NO_WOLFSSL_CM_VERIFY)) || \
    defined(WOLFSSL_DYN_CERT)
    /* cert->publicKey not stored as copy if WOLFSSL_NO_MALLOC defined */
    if ((cert->keyOID == RSAk
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	69db      	ldr	r3, [r3, #28]
 8012bc4:	f240 2285 	movw	r2, #645	; 0x285
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d005      	beq.n	8012bd8 <ParseCert+0x9e>
    #ifdef WC_RSA_PSS
         || cert->keyOID == RSAPSSk
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	69db      	ldr	r3, [r3, #28]
 8012bd0:	f240 228e 	movw	r2, #654	; 0x28e
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d121      	bne.n	8012c1c <ParseCert+0xe2>
    #endif
         ) && cert->publicKey != NULL && cert->pubKeySize > 0) {
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d01d      	beq.n	8012c1c <ParseCert+0xe2>
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d019      	beq.n	8012c1c <ParseCert+0xe2>
        ptr = (char*) XMALLOC(cert->pubKeySize, cert->heap,
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f005 ffdd 	bl	8018bac <wolfSSL_Malloc>
 8012bf2:	6138      	str	r0, [r7, #16]
                              DYNAMIC_TYPE_PUBLIC_KEY);
        if (ptr == NULL)
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d102      	bne.n	8012c00 <ParseCert+0xc6>
            return MEMORY_E;
 8012bfa:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8012bfe:	e00e      	b.n	8012c1e <ParseCert+0xe4>
        XMEMCPY(ptr, cert->publicKey, cert->pubKeySize);
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	6819      	ldr	r1, [r3, #0]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	461a      	mov	r2, r3
 8012c0a:	6938      	ldr	r0, [r7, #16]
 8012c0c:	f00e fb6a 	bl	80212e4 <memcpy>
        cert->publicKey = (byte *)ptr;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	693a      	ldr	r2, [r7, #16]
 8012c14:	601a      	str	r2, [r3, #0]
        cert->pubKeyStored = 1;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2201      	movs	r2, #1
 8012c1a:	609a      	str	r2, [r3, #8]
    }
#endif

    return ret;
 8012c1c:	697b      	ldr	r3, [r7, #20]
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3718      	adds	r7, #24
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <ParseCertRelative>:
}
#endif /* WOLFSSL_SMALL_CERT_VERIFY */
#endif /* WOLFSSL_SMALL_CERT_VERIFY || OPENSSL_EXTRA */

int ParseCertRelative(DecodedCert* cert, int type, int verify, void* cm)
{
 8012c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c2a:	b094      	sub	sp, #80	; 0x50
 8012c2c:	af08      	add	r7, sp, #32
 8012c2e:	6178      	str	r0, [r7, #20]
 8012c30:	6139      	str	r1, [r7, #16]
 8012c32:	60fa      	str	r2, [r7, #12]
 8012c34:	60bb      	str	r3, [r7, #8]
    int    ret = 0;
 8012c36:	2300      	movs	r3, #0
 8012c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    int    checkPathLen = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    int    decrementMaxPathLen = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	627b      	str	r3, [r7, #36]	; 0x24
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 confirmOID = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	61fb      	str	r3, [r7, #28]
#if defined(WOLFSSL_RENESAS_TSIP_TLS) || defined(WOLFSSL_RENESAS_SCEPROTECT)
    int    idx = 0;
#endif
    byte*  sce_tsip_encRsaKeyIdx;

    if (cert == NULL) {
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d102      	bne.n	8012c52 <ParseCertRelative+0x2c>
        return BAD_FUNC_ARG;
 8012c4c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8012c50:	e26d      	b.n	801312e <ParseCertRelative+0x508>
#ifdef WOLFSSL_CERT_REQ
    if (type == CERTREQ_TYPE)
        cert->isCSR = 1;
#endif

    if (cert->sigCtx.state == SIG_STATE_BEGIN) {
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	f040 81cf 	bne.w	8012ffc <ParseCertRelative+0x3d6>
#ifndef WOLFSSL_ASN_TEMPLATE
        cert->badDate = 0;
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	2200      	movs	r2, #0
 8012c62:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
        cert->criticalExt = 0;
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
        if ((ret = DecodeToKey(cert, verify)) < 0) {
 8012c6e:	68f9      	ldr	r1, [r7, #12]
 8012c70:	6978      	ldr	r0, [r7, #20]
 8012c72:	f7fd fb72 	bl	801035a <DecodeToKey>
 8012c76:	62f8      	str	r0, [r7, #44]	; 0x2c
 8012c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	da0e      	bge.n	8012c9c <ParseCertRelative+0x76>
            if (ret == ASN_BEFORE_DATE_E || ret == ASN_AFTER_DATE_E)
 8012c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c80:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8012c84:	d003      	beq.n	8012c8e <ParseCertRelative+0x68>
 8012c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c88:	f113 0f97 	cmn.w	r3, #151	; 0x97
 8012c8c:	d104      	bne.n	8012c98 <ParseCertRelative+0x72>
                cert->badDate = ret;
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c92:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
 8012c96:	e001      	b.n	8012c9c <ParseCertRelative+0x76>
            else
                return ret;
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9a:	e248      	b.n	801312e <ParseCertRelative+0x508>
                }
            }
        }
#endif

        if (cert->srcIdx < cert->sigIndex) {
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	691b      	ldr	r3, [r3, #16]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d237      	bcs.n	8012d1a <ParseCertRelative+0xf4>
        #ifndef ALLOW_V1_EXTENSIONS
            if (cert->version < 2) {
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	dc02      	bgt.n	8012cb8 <ParseCertRelative+0x92>
                WOLFSSL_MSG("\tv1 and v2 certs not allowed extensions");
                WOLFSSL_ERROR_VERBOSE(ASN_VERSION_E);
                return ASN_VERSION_E;
 8012cb2:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 8012cb6:	e23a      	b.n	801312e <ParseCertRelative+0x508>
            }
        #endif

            /* save extensions */
            cert->extensions    = &cert->source[cert->srcIdx];
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	f8d3 2328 	ldr.w	r2, [r3, #808]	; 0x328
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8012cc4:	441a      	add	r2, r3
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
            cert->extensionsSz  = cert->sigIndex - cert->srcIdx;
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	691a      	ldr	r2, [r3, #16]
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8012cd6:	1ad3      	subs	r3, r2, r3
 8012cd8:	461a      	mov	r2, r3
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
            cert->extensionsIdx = cert->srcIdx;   /* for potential later use */
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364

            if ((ret = DecodeCertExtensions(cert)) < 0) {
 8012cec:	6978      	ldr	r0, [r7, #20]
 8012cee:	f7ff fe47 	bl	8012980 <DecodeCertExtensions>
 8012cf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8012cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	da0a      	bge.n	8012d10 <ParseCertRelative+0xea>
                if (ret == ASN_CRIT_EXT_E)
 8012cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfc:	f113 0fa0 	cmn.w	r3, #160	; 0xa0
 8012d00:	d104      	bne.n	8012d0c <ParseCertRelative+0xe6>
                    cert->criticalExt = ret;
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d06:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
 8012d0a:	e001      	b.n	8012d10 <ParseCertRelative+0xea>
                else
                    return ret;
 8012d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0e:	e20e      	b.n	801312e <ParseCertRelative+0x508>
                else
                    verify = VERIFY_OCSP;
            }
        #endif
            /* advance past extensions */
            cert->srcIdx = cert->sigIndex;
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	691a      	ldr	r2, [r3, #16]
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
        }

        if ((ret = GetSigAlg(cert,
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
 8012d20:	f107 031c 	add.w	r3, r7, #28
 8012d24:	4619      	mov	r1, r3
 8012d26:	6978      	ldr	r0, [r7, #20]
 8012d28:	f7fd fa4e 	bl	80101c8 <GetSigAlg>
 8012d2c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8012d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	da01      	bge.n	8012d38 <ParseCertRelative+0x112>
                !cert->isCSR ? &confirmOID : &cert->signatureOID,
#else
                &confirmOID,
#endif
                cert->maxIdx)) < 0) {
            return ret;
 8012d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d36:	e1fa      	b.n	801312e <ParseCertRelative+0x508>
        }

        if ((ret = GetSignature(cert)) < 0) {
 8012d38:	6978      	ldr	r0, [r7, #20]
 8012d3a:	f7fd fb54 	bl	80103e6 <GetSignature>
 8012d3e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8012d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	da01      	bge.n	8012d4a <ParseCertRelative+0x124>
            return ret;
 8012d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d48:	e1f1      	b.n	801312e <ParseCertRelative+0x508>
        }

        if (confirmOID != cert->signatureOID
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	699a      	ldr	r2, [r3, #24]
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d002      	beq.n	8012d5a <ParseCertRelative+0x134>
#ifdef WOLFSSL_CERT_REQ
                && !cert->isCSR
#endif
                ) {
            WOLFSSL_ERROR_VERBOSE(ASN_SIG_OID_E);
            return ASN_SIG_OID_E;
 8012d54:	f06f 0397 	mvn.w	r3, #151	; 0x97
 8012d58:	e1e9      	b.n	801312e <ParseCertRelative+0x508>
            }
        }
#endif

    #ifndef NO_SKID
        if (cert->extSubjKeyIdSet == 0 && cert->publicKey != NULL &&
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012d60:	f003 0302 	and.w	r3, r3, #2
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d117      	bne.n	8012d9a <ParseCertRelative+0x174>
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d013      	beq.n	8012d9a <ParseCertRelative+0x174>
                                                         cert->pubKeySize > 0) {
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	685b      	ldr	r3, [r3, #4]
        if (cert->extSubjKeyIdSet == 0 && cert->publicKey != NULL &&
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00f      	beq.n	8012d9a <ParseCertRelative+0x174>
            ret = CalcHashId(cert->publicKey, cert->pubKeySize,
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	6818      	ldr	r0, [r3, #0]
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	6859      	ldr	r1, [r3, #4]
                                                            cert->extSubjKeyId);
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	f503 7362 	add.w	r3, r3, #904	; 0x388
            ret = CalcHashId(cert->publicKey, cert->pubKeySize,
 8012d88:	461a      	mov	r2, r3
 8012d8a:	f7fc fd11 	bl	800f7b0 <CalcHashId>
 8012d8e:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (ret != 0) {
 8012d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d001      	beq.n	8012d9a <ParseCertRelative+0x174>
                WOLFSSL_ERROR_VERBOSE(ret);
                return ret;
 8012d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d98:	e1c9      	b.n	801312e <ParseCertRelative+0x508>
            }
        }
    #endif /* !NO_SKID */

        if (!cert->selfSigned || (verify != NO_VERIFY && type != CA_TYPE &&
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8012da0:	f003 0302 	and.w	r3, r3, #2
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d008      	beq.n	8012dbc <ParseCertRelative+0x196>
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d06e      	beq.n	8012e8e <ParseCertRelative+0x268>
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	2b05      	cmp	r3, #5
 8012db4:	d06b      	beq.n	8012e8e <ParseCertRelative+0x268>
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	2b0f      	cmp	r3, #15
 8012dba:	d068      	beq.n	8012e8e <ParseCertRelative+0x268>
                                                   type != TRUSTED_PEER_TYPE)) {
            cert->ca = NULL;
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    #ifndef NO_SKID
            if (cert->extAuthKeyIdSet) {
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012dca:	f003 0304 	and.w	r3, r3, #4
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d00a      	beq.n	8012dea <ParseCertRelative+0x1c4>
                cert->ca = GetCA(cm, cert->extAuthKeyId);
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8012dda:	4619      	mov	r1, r3
 8012ddc:	68b8      	ldr	r0, [r7, #8]
 8012dde:	f7f3 ff54 	bl	8006c8a <GetCA>
 8012de2:	4602      	mov	r2, r0
 8012de4:	697b      	ldr	r3, [r7, #20]
 8012de6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            }
            if (cert->ca == NULL && cert->extSubjKeyIdSet
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d115      	bne.n	8012e20 <ParseCertRelative+0x1fa>
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012dfa:	f003 0302 	and.w	r3, r3, #2
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d00d      	beq.n	8012e20 <ParseCertRelative+0x1fa>
                                 && verify != VERIFY_OCSP) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2b03      	cmp	r3, #3
 8012e08:	d00a      	beq.n	8012e20 <ParseCertRelative+0x1fa>
                cert->ca = GetCA(cm, cert->extSubjKeyId);
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8012e10:	4619      	mov	r1, r3
 8012e12:	68b8      	ldr	r0, [r7, #8]
 8012e14:	f7f3 ff39 	bl	8006c8a <GetCA>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            }
            if (cert->ca != NULL && XMEMCMP(cert->issuerHash,
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d011      	beq.n	8012e4e <ParseCertRelative+0x228>
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012e36:	3324      	adds	r3, #36	; 0x24
 8012e38:	2220      	movs	r2, #32
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	f00e fa42 	bl	80212c4 <memcmp>
 8012e40:	4603      	mov	r3, r0
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <ParseCertRelative+0x228>
                                  cert->ca->subjectNameHash, KEYID_SIZE) != 0) {
                cert->ca = NULL;
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            }
            if (cert->ca == NULL) {
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d11a      	bne.n	8012e8e <ParseCertRelative+0x268>
                cert->ca = GetCAByName(cm, cert->issuerHash);
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	3360      	adds	r3, #96	; 0x60
 8012e5c:	4619      	mov	r1, r3
 8012e5e:	68b8      	ldr	r0, [r7, #8]
 8012e60:	f7f3 ff58 	bl	8006d14 <GetCAByName>
 8012e64:	4602      	mov	r2, r0
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                /* If AKID is available then this CA doesn't have the public
                 * key required */
                if (cert->ca && cert->extAuthKeyIdSet) {
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00b      	beq.n	8012e8e <ParseCertRelative+0x268>
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012e7c:	f003 0304 	and.w	r3, r3, #4
 8012e80:	b2db      	uxtb	r3, r3
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d003      	beq.n	8012e8e <ParseCertRelative+0x268>
                    WOLFSSL_MSG("CA SKID doesn't match AKID");
                    cert->ca = NULL;
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            if (cert->ca) {
                WOLFSSL_MSG("CA found");
            }
        }

        if (cert->selfSigned) {
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 8012e94:	f003 0302 	and.w	r3, r3, #2
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d004      	beq.n	8012ea8 <ParseCertRelative+0x282>
            cert->maxPathLen = WOLFSSL_MAX_PATH_LEN;
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	227f      	movs	r2, #127	; 0x7f
 8012ea2:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8012ea6:	e0a9      	b.n	8012ffc <ParseCertRelative+0x3d6>
             * 4) Is maxPathLen > 0?
             *      Yes - Reduce by 1
             *      No  - ERROR
             */

            if (cert->ca && cert->pathLengthSet) {
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d076      	beq.n	8012fa0 <ParseCertRelative+0x37a>
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012eb8:	f003 0320 	and.w	r3, r3, #32
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d06e      	beq.n	8012fa0 <ParseCertRelative+0x37a>
                cert->maxPathLen = cert->pathLength;
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
                if (cert->isCA) {
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012ed4:	f003 0310 	and.w	r3, r3, #16
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d016      	beq.n	8012f0c <ParseCertRelative+0x2e6>
                    WOLFSSL_MSG("\tCA boolean set");
                    if (cert->extKeyUsageSet) {
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012ee4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012ee8:	b2db      	uxtb	r3, r3
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00c      	beq.n	8012f08 <ParseCertRelative+0x2e2>
                        WOLFSSL_MSG("\tExtension Key Usage Set");
                        if ((cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) != 0) {
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	f8b3 33cc 	ldrh.w	r3, [r3, #972]	; 0x3cc
 8012ef4:	f003 0304 	and.w	r3, r3, #4
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d002      	beq.n	8012f02 <ParseCertRelative+0x2dc>
                            checkPathLen = 1;
 8012efc:	2301      	movs	r3, #1
 8012efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f00:	e004      	b.n	8012f0c <ParseCertRelative+0x2e6>
                        }
                        else {
                            decrementMaxPathLen = 1;
 8012f02:	2301      	movs	r3, #1
 8012f04:	627b      	str	r3, [r7, #36]	; 0x24
 8012f06:	e001      	b.n	8012f0c <ParseCertRelative+0x2e6>
                        }
                    }
                    else {
                        checkPathLen = 1;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	62bb      	str	r3, [r7, #40]	; 0x28
                    } /* !cert->ca check */
                } /* cert is not a CA (assuming entity cert) */

                if (checkPathLen && cert->pathLengthSet) {
 8012f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d019      	beq.n	8012f46 <ParseCertRelative+0x320>
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012f18:	f003 0320 	and.w	r3, r3, #32
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d011      	beq.n	8012f46 <ParseCertRelative+0x320>
                    if (cert->pathLength < cert->ca->maxPathLen) {
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012f2e:	7a9b      	ldrb	r3, [r3, #10]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d206      	bcs.n	8012f42 <ParseCertRelative+0x31c>
                        WOLFSSL_MSG("\tmaxPathLen status: set to pathLength");
                        cert->maxPathLen = cert->pathLength;
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	f893 23c8 	ldrb.w	r2, [r3, #968]	; 0x3c8
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8012f40:	e001      	b.n	8012f46 <ParseCertRelative+0x320>
                    }
                    else {
                        decrementMaxPathLen = 1;
 8012f42:	2301      	movs	r3, #1
 8012f44:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }

                if (decrementMaxPathLen && cert->ca->maxPathLen > 0) {
 8012f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d010      	beq.n	8012f6e <ParseCertRelative+0x348>
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012f52:	7a9b      	ldrb	r3, [r3, #10]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d00a      	beq.n	8012f6e <ParseCertRelative+0x348>
                    WOLFSSL_MSG("\tmaxPathLen status: reduce by 1");
                    cert->maxPathLen = cert->ca->maxPathLen - 1;
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012f5e:	7a9b      	ldrb	r3, [r3, #10]
 8012f60:	3b01      	subs	r3, #1
 8012f62:	b2da      	uxtb	r2, r3
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
                    if (verify != NO_VERIFY && type != CA_TYPE &&
 8012f6a:	bf00      	nop
                if (decrementMaxPathLen && cert->ca->maxPathLen > 0) {
 8012f6c:	e045      	b.n	8012ffa <ParseCertRelative+0x3d4>
                                                    type != TRUSTED_PEER_TYPE) {
                        WOLFSSL_MSG("\tmaxPathLen status: OK");
                    }
                } else if (decrementMaxPathLen && cert->ca->maxPathLen == 0) {
 8012f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d042      	beq.n	8012ffa <ParseCertRelative+0x3d4>
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012f7a:	7a9b      	ldrb	r3, [r3, #10]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d13c      	bne.n	8012ffa <ParseCertRelative+0x3d4>
                    cert->maxPathLen = 0;
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	2200      	movs	r2, #0
 8012f84:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
                    if (verify != NO_VERIFY && type != CA_TYPE &&
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d035      	beq.n	8012ffa <ParseCertRelative+0x3d4>
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	2b05      	cmp	r3, #5
 8012f92:	d032      	beq.n	8012ffa <ParseCertRelative+0x3d4>
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	2b0f      	cmp	r3, #15
 8012f98:	d02f      	beq.n	8012ffa <ParseCertRelative+0x3d4>
                                                    type != TRUSTED_PEER_TYPE) {
                        WOLFSSL_MSG("\tNon-entity cert, maxPathLen is 0");
                        WOLFSSL_MSG("\tmaxPathLen status: ERROR");
                        WOLFSSL_ERROR_VERBOSE(ASN_PATHLEN_INV_E);
                        return ASN_PATHLEN_INV_E;
 8012f9a:	f06f 03ed 	mvn.w	r3, #237	; 0xed
 8012f9e:	e0c6      	b.n	801312e <ParseCertRelative+0x508>
                    }
                }
            } else if (cert->ca && cert->isCA) {
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d028      	beq.n	8012ffc <ParseCertRelative+0x3d6>
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8012fb0:	f003 0310 	and.w	r3, r3, #16
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d020      	beq.n	8012ffc <ParseCertRelative+0x3d6>
                /* case where cert->pathLength extension is not set */
                if (cert->ca->maxPathLen > 0) {
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012fc0:	7a9b      	ldrb	r3, [r3, #10]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d009      	beq.n	8012fda <ParseCertRelative+0x3b4>
                    cert->maxPathLen = cert->ca->maxPathLen - 1;
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8012fcc:	7a9b      	ldrb	r3, [r3, #10]
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	b2da      	uxtb	r2, r3
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8012fd8:	e010      	b.n	8012ffc <ParseCertRelative+0x3d6>
                } else {
                    cert->maxPathLen = 0;
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
                    if (verify != NO_VERIFY && type != CA_TYPE &&
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d009      	beq.n	8012ffc <ParseCertRelative+0x3d6>
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	2b05      	cmp	r3, #5
 8012fec:	d006      	beq.n	8012ffc <ParseCertRelative+0x3d6>
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	2b0f      	cmp	r3, #15
 8012ff2:	d003      	beq.n	8012ffc <ParseCertRelative+0x3d6>
                                                    type != TRUSTED_PEER_TYPE) {
                        WOLFSSL_MSG("\tNon-entity cert, maxPathLen is 0");
                        WOLFSSL_MSG("\tmaxPathLen status: ERROR");
                        WOLFSSL_ERROR_VERBOSE(ASN_PATHLEN_INV_E);
                        return ASN_PATHLEN_INV_E;
 8012ff4:	f06f 03ed 	mvn.w	r3, #237	; 0xed
 8012ff8:	e099      	b.n	801312e <ParseCertRelative+0x508>
                if (decrementMaxPathLen && cert->ca->maxPathLen > 0) {
 8012ffa:	bf00      	nop
    }

    sce_tsip_encRsaKeyIdx = cert->sce_tsip_encRsaKeyIdx;

#else
    sce_tsip_encRsaKeyIdx = NULL;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	623b      	str	r3, [r7, #32]
#endif

    if (verify != NO_VERIFY && type != CA_TYPE && type != TRUSTED_PEER_TYPE) {
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d07d      	beq.n	8013102 <ParseCertRelative+0x4dc>
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	2b05      	cmp	r3, #5
 801300a:	d07a      	beq.n	8013102 <ParseCertRelative+0x4dc>
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	2b0f      	cmp	r3, #15
 8013010:	d077      	beq.n	8013102 <ParseCertRelative+0x4dc>
        if (cert->ca) {
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8013018:	2b00      	cmp	r3, #0
 801301a:	d064      	beq.n	80130e6 <ParseCertRelative+0x4c0>
            if (verify == VERIFY || verify == VERIFY_OCSP ||
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2b01      	cmp	r3, #1
 8013020:	d005      	beq.n	801302e <ParseCertRelative+0x408>
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2b03      	cmp	r3, #3
 8013026:	d002      	beq.n	801302e <ParseCertRelative+0x408>
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2b05      	cmp	r3, #5
 801302c:	d142      	bne.n	80130b4 <ParseCertRelative+0x48e>
                                                 verify == VERIFY_SKIP_DATE) {
                /* try to confirm/verify signature */
                if ((ret = ConfirmSignature(&cert->sigCtx,
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	f503 6c85 	add.w	ip, r3, #1064	; 0x428
                        cert->source + cert->certBegin,
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	f8d3 2328 	ldr.w	r2, [r3, #808]	; 0x328
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	68db      	ldr	r3, [r3, #12]
                if ((ret = ConfirmSignature(&cert->sigCtx,
 801303e:	eb02 0e03 	add.w	lr, r2, r3
                        cert->sigIndex - cert->certBegin,
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	691a      	ldr	r2, [r3, #16]
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	68db      	ldr	r3, [r3, #12]
                if ((ret = ConfirmSignature(&cert->sigCtx,
 801304a:	eba2 0803 	sub.w	r8, r2, r3
                        cert->ca->publicKey, cert->ca->pubKeySize,
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
                if ((ret = ConfirmSignature(&cert->sigCtx,
 8013054:	691b      	ldr	r3, [r3, #16]
 8013056:	607b      	str	r3, [r7, #4]
                        cert->ca->publicKey, cert->ca->pubKeySize,
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
                if ((ret = ConfirmSignature(&cert->sigCtx,
 801305e:	681b      	ldr	r3, [r3, #0]
                        cert->ca->keyOID, cert->signature,
 8013060:	697a      	ldr	r2, [r7, #20]
 8013062:	f8d2 2424 	ldr.w	r2, [r2, #1060]	; 0x424
                if ((ret = ConfirmSignature(&cert->sigCtx,
 8013066:	6852      	ldr	r2, [r2, #4]
 8013068:	603a      	str	r2, [r7, #0]
 801306a:	6979      	ldr	r1, [r7, #20]
 801306c:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 8013070:	6978      	ldr	r0, [r7, #20]
 8013072:	6940      	ldr	r0, [r0, #20]
 8013074:	697c      	ldr	r4, [r7, #20]
 8013076:	69a4      	ldr	r4, [r4, #24]
                        cert->sigLength, cert->signatureOID,
                    #ifdef WC_RSA_PSS
                        cert->source + cert->sigParamsIndex,
 8013078:	697d      	ldr	r5, [r7, #20]
 801307a:	f8d5 6328 	ldr.w	r6, [r5, #808]	; 0x328
 801307e:	697d      	ldr	r5, [r7, #20]
 8013080:	6a2d      	ldr	r5, [r5, #32]
                if ((ret = ConfirmSignature(&cert->sigCtx,
 8013082:	4435      	add	r5, r6
 8013084:	697e      	ldr	r6, [r7, #20]
 8013086:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8013088:	6a3a      	ldr	r2, [r7, #32]
 801308a:	9207      	str	r2, [sp, #28]
 801308c:	9606      	str	r6, [sp, #24]
 801308e:	9505      	str	r5, [sp, #20]
 8013090:	9404      	str	r4, [sp, #16]
 8013092:	9003      	str	r0, [sp, #12]
 8013094:	9102      	str	r1, [sp, #8]
 8013096:	683a      	ldr	r2, [r7, #0]
 8013098:	9201      	str	r2, [sp, #4]
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	4642      	mov	r2, r8
 80130a0:	4671      	mov	r1, lr
 80130a2:	4660      	mov	r0, ip
 80130a4:	f7fd fc6e 	bl	8010984 <ConfirmSignature>
 80130a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80130aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d001      	beq.n	80130b4 <ParseCertRelative+0x48e>
                        sce_tsip_encRsaKeyIdx)) != 0) {
                    if (ret != WC_PENDING_E) {
                        WOLFSSL_MSG("Confirm signature failed");
                    }
                    WOLFSSL_ERROR_VERBOSE(ret);
                    return ret;
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	e03c      	b.n	801312e <ParseCertRelative+0x508>
                }
            }
        #ifndef IGNORE_NAME_CONSTRAINTS
            if (verify == VERIFY || verify == VERIFY_OCSP ||
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d008      	beq.n	80130cc <ParseCertRelative+0x4a6>
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2b03      	cmp	r3, #3
 80130be:	d005      	beq.n	80130cc <ParseCertRelative+0x4a6>
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	2b04      	cmp	r3, #4
 80130c4:	d002      	beq.n	80130cc <ParseCertRelative+0x4a6>
                        verify == VERIFY_NAME || verify == VERIFY_SKIP_DATE) {
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2b05      	cmp	r3, #5
 80130ca:	d11a      	bne.n	8013102 <ParseCertRelative+0x4dc>
                /* check that this cert's name is permitted by the signer's
                 * name constraints */
                if (!ConfirmNameConstraints(cert->ca, cert)) {
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80130d2:	6979      	ldr	r1, [r7, #20]
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7fd ffd7 	bl	8011088 <ConfirmNameConstraints>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d110      	bne.n	8013102 <ParseCertRelative+0x4dc>
                    WOLFSSL_MSG("Confirm name constraint failed");
                    WOLFSSL_ERROR_VERBOSE(ASN_NAME_INVALID_E);
                    return ASN_NAME_INVALID_E;
 80130e0:	f06f 03c5 	mvn.w	r3, #197	; 0xc5
 80130e4:	e023      	b.n	801312e <ParseCertRelative+0x508>
        else {
            /* no signer */
            WOLFSSL_MSG("No CA signer to verify with");
#if defined(OPENSSL_ALL) || defined(WOLFSSL_QT)
            /* ret needs to be self-signer error for Qt compat */
            if (cert->selfSigned) {
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	f893 346a 	ldrb.w	r3, [r3, #1130]	; 0x46a
 80130ec:	f003 0302 	and.w	r3, r3, #2
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d002      	beq.n	80130fc <ParseCertRelative+0x4d6>
                WOLFSSL_ERROR_VERBOSE(ASN_SELF_SIGNED_E);
                return ASN_SELF_SIGNED_E;
 80130f6:	f46f 7389 	mvn.w	r3, #274	; 0x112
 80130fa:	e018      	b.n	801312e <ParseCertRelative+0x508>
            }
            else
#endif
            {
                WOLFSSL_ERROR_VERBOSE(ASN_NO_SIGNER_E);
                return ASN_NO_SIGNER_E;
 80130fc:	f06f 03bb 	mvn.w	r3, #187	; 0xbb
 8013100:	e015      	b.n	801312e <ParseCertRelative+0x508>

#if defined(WOLFSSL_NO_TRUSTED_CERTS_VERIFY) && !defined(NO_SKID)
exit_pcr:
#endif

    if (cert->badDate != 0) {
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8013108:	2b00      	cmp	r3, #0
 801310a:	d006      	beq.n	801311a <ParseCertRelative+0x4f4>
        if (verify != VERIFY_SKIP_DATE) {
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2b05      	cmp	r3, #5
 8013110:	d003      	beq.n	801311a <ParseCertRelative+0x4f4>
            return cert->badDate;
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8013118:	e009      	b.n	801312e <ParseCertRelative+0x508>
        }
        WOLFSSL_MSG("Date error: Verify option is skipping");
    }

    if (cert->criticalExt != 0)
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 8013120:	2b00      	cmp	r3, #0
 8013122:	d003      	beq.n	801312c <ParseCertRelative+0x506>
        return cert->criticalExt;
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 801312a:	e000      	b.n	801312e <ParseCertRelative+0x508>

    return ret;
 801312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801312e:	4618      	mov	r0, r3
 8013130:	3730      	adds	r7, #48	; 0x30
 8013132:	46bd      	mov	sp, r7
 8013134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013138 <MakeSigner>:

/* Create and init an new signer */
Signer* MakeSigner(void* heap)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
    Signer* signer = (Signer*) XMALLOC(sizeof(Signer), heap,
 8013140:	2068      	movs	r0, #104	; 0x68
 8013142:	f005 fd33 	bl	8018bac <wolfSSL_Malloc>
 8013146:	60f8      	str	r0, [r7, #12]
                                       DYNAMIC_TYPE_SIGNER);
    if (signer) {
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d004      	beq.n	8013158 <MakeSigner+0x20>
        XMEMSET(signer, 0, sizeof(Signer));
 801314e:	2268      	movs	r2, #104	; 0x68
 8013150:	2100      	movs	r1, #0
 8013152:	68f8      	ldr	r0, [r7, #12]
 8013154:	f00e f8ee 	bl	8021334 <memset>
    }
    (void)heap;

    return signer;
 8013158:	68fb      	ldr	r3, [r7, #12]
}
 801315a:	4618      	mov	r0, r3
 801315c:	3710      	adds	r7, #16
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}

08013162 <FreeSigner>:
 * @param [in, out] signer  On in, signer object.
 *                          On out, pointer is no longer valid.
 * @param [in]      heap    Dynamic memory hint.
 */
void FreeSigner(Signer* signer, void* heap)
{
 8013162:	b580      	push	{r7, lr}
 8013164:	b086      	sub	sp, #24
 8013166:	af00      	add	r7, sp, #0
 8013168:	6078      	str	r0, [r7, #4]
 801316a:	6039      	str	r1, [r7, #0]
    XFREE(signer->name, heap, DYNAMIC_TYPE_SUBJECT_CN);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	699b      	ldr	r3, [r3, #24]
 8013170:	617b      	str	r3, [r7, #20]
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d002      	beq.n	801317e <FreeSigner+0x1c>
 8013178:	6978      	ldr	r0, [r7, #20]
 801317a:	f005 fd33 	bl	8018be4 <wolfSSL_Free>
    XFREE((void*)signer->publicKey, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	691b      	ldr	r3, [r3, #16]
 8013182:	613b      	str	r3, [r7, #16]
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d002      	beq.n	8013190 <FreeSigner+0x2e>
 801318a:	6938      	ldr	r0, [r7, #16]
 801318c:	f005 fd2a 	bl	8018be4 <wolfSSL_Free>
#ifndef IGNORE_NAME_CONSTRAINTS
    if (signer->permittedNames)
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	69db      	ldr	r3, [r3, #28]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d005      	beq.n	80131a4 <FreeSigner+0x42>
        FreeNameSubtrees(signer->permittedNames, heap);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	69db      	ldr	r3, [r3, #28]
 801319c:	6839      	ldr	r1, [r7, #0]
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fb ffa4 	bl	800f0ec <FreeNameSubtrees>
    if (signer->excludedNames)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6a1b      	ldr	r3, [r3, #32]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d005      	beq.n	80131b8 <FreeSigner+0x56>
        FreeNameSubtrees(signer->excludedNames, heap);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6a1b      	ldr	r3, [r3, #32]
 80131b0:	6839      	ldr	r1, [r7, #0]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fb ff9a 	bl	800f0ec <FreeNameSubtrees>
#endif
#ifdef WOLFSSL_SIGNER_DER_CERT
    FreeDer(&signer->derCert);
#endif
    XFREE(signer, heap, DYNAMIC_TYPE_SIGNER);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d002      	beq.n	80131c8 <FreeSigner+0x66>
 80131c2:	68f8      	ldr	r0, [r7, #12]
 80131c4:	f005 fd0e 	bl	8018be4 <wolfSSL_Free>
    (void)signer;
    (void)heap;
}
 80131c8:	bf00      	nop
 80131ca:	3718      	adds	r7, #24
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <FreeSignerTable>:
 * @param [in, out] table   Array of signer objects.
 * @param [in]      rows    Number of entries in table.
 * @param [in]      heap    Dynamic memory hint.
 */
void FreeSignerTable(Signer** table, int rows, void* heap)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b088      	sub	sp, #32
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < rows; i++) {
 80131dc:	2300      	movs	r3, #0
 80131de:	61fb      	str	r3, [r7, #28]
 80131e0:	e01b      	b.n	801321a <FreeSignerTable+0x4a>
        Signer* signer = table[i];
 80131e2:	69fb      	ldr	r3, [r7, #28]
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	68fa      	ldr	r2, [r7, #12]
 80131e8:	4413      	add	r3, r2
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	61bb      	str	r3, [r7, #24]
        while (signer) {
 80131ee:	e008      	b.n	8013202 <FreeSignerTable+0x32>
            Signer* next = signer->next;
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80131f4:	617b      	str	r3, [r7, #20]
            FreeSigner(signer, heap);
 80131f6:	6879      	ldr	r1, [r7, #4]
 80131f8:	69b8      	ldr	r0, [r7, #24]
 80131fa:	f7ff ffb2 	bl	8013162 <FreeSigner>
            signer = next;
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	61bb      	str	r3, [r7, #24]
        while (signer) {
 8013202:	69bb      	ldr	r3, [r7, #24]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d1f3      	bne.n	80131f0 <FreeSignerTable+0x20>
        }
        table[i] = NULL;
 8013208:	69fb      	ldr	r3, [r7, #28]
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	4413      	add	r3, r2
 8013210:	2200      	movs	r2, #0
 8013212:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rows; i++) {
 8013214:	69fb      	ldr	r3, [r7, #28]
 8013216:	3301      	adds	r3, #1
 8013218:	61fb      	str	r3, [r7, #28]
 801321a:	69fa      	ldr	r2, [r7, #28]
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	429a      	cmp	r2, r3
 8013220:	dbdf      	blt.n	80131e2 <FreeSignerTable+0x12>
    }
}
 8013222:	bf00      	nop
 8013224:	bf00      	nop
 8013226:	3720      	adds	r7, #32
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <wc_GetSerialNumber>:
#endif /* !NO_CERTS */

#ifndef WOLFSSL_ASN_TEMPLATE
int wc_GetSerialNumber(const byte* input, word32* inOutIdx,
    byte* serial, int* serialSz, word32 maxIdx)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b086      	sub	sp, #24
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	603b      	str	r3, [r7, #0]
    int result = 0;
 801323a:	2300      	movs	r3, #0
 801323c:	617b      	str	r3, [r7, #20]
    int ret;

    WOLFSSL_ENTER("wc_GetSerialNumber");

    if (serial == NULL || input == NULL || serialSz == NULL) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d005      	beq.n	8013250 <wc_GetSerialNumber+0x24>
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d002      	beq.n	8013250 <wc_GetSerialNumber+0x24>
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d102      	bne.n	8013256 <wc_GetSerialNumber+0x2a>
        return BAD_FUNC_ARG;
 8013250:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8013254:	e031      	b.n	80132ba <wc_GetSerialNumber+0x8e>
    }

    /* First byte is ASN type */
    if ((*inOutIdx+1) > maxIdx) {
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	3301      	adds	r3, #1
 801325c:	6a3a      	ldr	r2, [r7, #32]
 801325e:	429a      	cmp	r2, r3
 8013260:	d202      	bcs.n	8013268 <wc_GetSerialNumber+0x3c>
        WOLFSSL_MSG("Bad idx first");
        return BUFFER_E;
 8013262:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013266:	e028      	b.n	80132ba <wc_GetSerialNumber+0x8e>
    }

    ret = GetASNInt(input, inOutIdx, serialSz, maxIdx);
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	683a      	ldr	r2, [r7, #0]
 801326c:	68b9      	ldr	r1, [r7, #8]
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7fa fbb7 	bl	800d9e2 <GetASNInt>
 8013274:	6138      	str	r0, [r7, #16]
    if (ret != 0)
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d001      	beq.n	8013280 <wc_GetSerialNumber+0x54>
        return ret;
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	e01c      	b.n	80132ba <wc_GetSerialNumber+0x8e>

    if (*serialSz > EXTERNAL_SERIAL_SIZE || *serialSz <= 0) {
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	2b20      	cmp	r3, #32
 8013286:	dc03      	bgt.n	8013290 <wc_GetSerialNumber+0x64>
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	dc02      	bgt.n	8013296 <wc_GetSerialNumber+0x6a>
        WOLFSSL_MSG("Serial size bad");
        WOLFSSL_ERROR_VERBOSE(ASN_PARSE_E);
        return ASN_PARSE_E;
 8013290:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8013294:	e011      	b.n	80132ba <wc_GetSerialNumber+0x8e>
    }

    /* return serial */
    XMEMCPY(serial, &input[*inOutIdx], (size_t)*serialSz);
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	18d1      	adds	r1, r2, r3
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	461a      	mov	r2, r3
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f00e f81d 	bl	80212e4 <memcpy>
    *inOutIdx += *serialSz;
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	683a      	ldr	r2, [r7, #0]
 80132b0:	6812      	ldr	r2, [r2, #0]
 80132b2:	441a      	add	r2, r3
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	601a      	str	r2, [r3, #0]

    return result;
 80132b8:	697b      	ldr	r3, [r7, #20]
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3718      	adds	r7, #24
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
	...

080132c4 <AllocDer>:
#ifndef NO_CERTS

/* TODO: consider moving PEM code out to a different file. */

int AllocDer(DerBuffer** pDer, word32 length, int type, void* heap)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b088      	sub	sp, #32
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	603b      	str	r3, [r7, #0]
    int ret = BAD_FUNC_ARG;
 80132d2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80132d6:	61fb      	str	r3, [r7, #28]
    if (pDer) {
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d062      	beq.n	80133a4 <AllocDer+0xe0>
        int dynType = 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	61bb      	str	r3, [r7, #24]
        DerBuffer* der;

        /* Determine dynamic type */
        switch (type) {
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2b0b      	cmp	r3, #11
 80132e6:	d82d      	bhi.n	8013344 <AllocDer+0x80>
 80132e8:	a201      	add	r2, pc, #4	; (adr r2, 80132f0 <AllocDer+0x2c>)
 80132ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132ee:	bf00      	nop
 80132f0:	08013327 	.word	0x08013327
 80132f4:	08013345 	.word	0x08013345
 80132f8:	08013345 	.word	0x08013345
 80132fc:	08013345 	.word	0x08013345
 8013300:	0801332d 	.word	0x0801332d
 8013304:	08013321 	.word	0x08013321
 8013308:	08013345 	.word	0x08013345
 801330c:	08013345 	.word	0x08013345
 8013310:	08013345 	.word	0x08013345
 8013314:	08013333 	.word	0x08013333
 8013318:	08013339 	.word	0x08013339
 801331c:	0801333f 	.word	0x0801333f
            case CA_TYPE:   dynType = DYNAMIC_TYPE_CA;   break;
 8013320:	2301      	movs	r3, #1
 8013322:	61bb      	str	r3, [r7, #24]
 8013324:	e011      	b.n	801334a <AllocDer+0x86>
            case CERT_TYPE: dynType = DYNAMIC_TYPE_CERT; break;
 8013326:	2302      	movs	r3, #2
 8013328:	61bb      	str	r3, [r7, #24]
 801332a:	e00e      	b.n	801334a <AllocDer+0x86>
            case CRL_TYPE:  dynType = DYNAMIC_TYPE_CRL;  break;
 801332c:	2316      	movs	r3, #22
 801332e:	61bb      	str	r3, [r7, #24]
 8013330:	e00b      	b.n	801334a <AllocDer+0x86>
            case DSA_TYPE:  dynType = DYNAMIC_TYPE_DSA;  break;
 8013332:	2315      	movs	r3, #21
 8013334:	61bb      	str	r3, [r7, #24]
 8013336:	e008      	b.n	801334a <AllocDer+0x86>
            case ECC_TYPE:  dynType = DYNAMIC_TYPE_ECC;  break;
 8013338:	2325      	movs	r3, #37	; 0x25
 801333a:	61bb      	str	r3, [r7, #24]
 801333c:	e005      	b.n	801334a <AllocDer+0x86>
            case RSA_TYPE:  dynType = DYNAMIC_TYPE_RSA;  break;
 801333e:	230a      	movs	r3, #10
 8013340:	61bb      	str	r3, [r7, #24]
 8013342:	e002      	b.n	801334a <AllocDer+0x86>
            default:        dynType = DYNAMIC_TYPE_KEY;  break;
 8013344:	2303      	movs	r3, #3
 8013346:	61bb      	str	r3, [r7, #24]
 8013348:	bf00      	nop
        }

        /* Setup new buffer */
        *pDer = (DerBuffer*)XMALLOC(sizeof(DerBuffer) + length, heap, dynType);
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	3314      	adds	r3, #20
 801334e:	4618      	mov	r0, r3
 8013350:	f005 fc2c 	bl	8018bac <wolfSSL_Malloc>
 8013354:	4602      	mov	r2, r0
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	601a      	str	r2, [r3, #0]
        if (*pDer == NULL) {
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d102      	bne.n	8013368 <AllocDer+0xa4>
            return MEMORY_E;
 8013362:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8013366:	e01e      	b.n	80133a6 <AllocDer+0xe2>
        }
        XMEMSET(*pDer, 0, sizeof(DerBuffer) + length);
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	6818      	ldr	r0, [r3, #0]
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	3314      	adds	r3, #20
 8013370:	461a      	mov	r2, r3
 8013372:	2100      	movs	r1, #0
 8013374:	f00d ffde 	bl	8021334 <memset>

        der = *pDer;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	617b      	str	r3, [r7, #20]
        der->type = type;
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	60da      	str	r2, [r3, #12]
        der->dynType = dynType; /* Cache this for FreeDer */
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	69ba      	ldr	r2, [r7, #24]
 8013388:	611a      	str	r2, [r3, #16]
        der->heap = heap;
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	683a      	ldr	r2, [r7, #0]
 801338e:	605a      	str	r2, [r3, #4]
        der->buffer = (byte*)der + sizeof(DerBuffer);
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	f103 0214 	add.w	r2, r3, #20
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	601a      	str	r2, [r3, #0]
        der->length = length;
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	68ba      	ldr	r2, [r7, #8]
 801339e:	609a      	str	r2, [r3, #8]
        ret = 0; /* Success */
 80133a0:	2300      	movs	r3, #0
 80133a2:	61fb      	str	r3, [r7, #28]
    }
    return ret;
 80133a4:	69fb      	ldr	r3, [r7, #28]
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3720      	adds	r7, #32
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop

080133b0 <FreeDer>:

void FreeDer(DerBuffer** pDer)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
    if (pDer && *pDer)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d027      	beq.n	801340e <FreeDer+0x5e>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d023      	beq.n	801340e <FreeDer+0x5e>
    {
        DerBuffer* der = (DerBuffer*)*pDer;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	60fb      	str	r3, [r7, #12]

        /* ForceZero private keys */
        if (der->type == PRIVATEKEY_TYPE && der->buffer != NULL) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d10b      	bne.n	80133ec <FreeDer+0x3c>
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d007      	beq.n	80133ec <FreeDer+0x3c>
            ForceZero(der->buffer, der->length);
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	689b      	ldr	r3, [r3, #8]
 80133e4:	4619      	mov	r1, r3
 80133e6:	4610      	mov	r0, r2
 80133e8:	f7fa f86e 	bl	800d4c8 <ForceZero>
        }
        der->buffer = NULL;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2200      	movs	r2, #0
 80133f0:	601a      	str	r2, [r3, #0]
        der->length = 0;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2200      	movs	r2, #0
 80133f6:	609a      	str	r2, [r3, #8]
        XFREE(der, der->heap, der->dynType);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	60bb      	str	r3, [r7, #8]
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d002      	beq.n	8013408 <FreeDer+0x58>
 8013402:	68b8      	ldr	r0, [r7, #8]
 8013404:	f005 fbee 	bl	8018be4 <wolfSSL_Free>

        *pDer = NULL;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]
    }
}
 801340e:	bf00      	nop
 8013410:	3710      	adds	r7, #16
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}

08013416 <SkipEndOfLineChars>:
const int pem_struct_min_sz = XSTR_SIZEOF("-----BEGIN X509 CRL-----"
                                             "-----END X509 CRL-----");

static WC_INLINE const char* SkipEndOfLineChars(const char* line,
                                                const char* endOfLine)
{
 8013416:	b480      	push	{r7}
 8013418:	b083      	sub	sp, #12
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
 801341e:	6039      	str	r1, [r7, #0]
    /* eat end of line characters */
    while (line < endOfLine &&
 8013420:	e002      	b.n	8013428 <SkipEndOfLineChars+0x12>
              (line[0] == '\r' || line[0] == '\n')) {
        line++;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	3301      	adds	r3, #1
 8013426:	607b      	str	r3, [r7, #4]
    while (line < endOfLine &&
 8013428:	687a      	ldr	r2, [r7, #4]
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	429a      	cmp	r2, r3
 801342e:	d207      	bcs.n	8013440 <SkipEndOfLineChars+0x2a>
              (line[0] == '\r' || line[0] == '\n')) {
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	781b      	ldrb	r3, [r3, #0]
    while (line < endOfLine &&
 8013434:	2b0d      	cmp	r3, #13
 8013436:	d0f4      	beq.n	8013422 <SkipEndOfLineChars+0xc>
              (line[0] == '\r' || line[0] == '\n')) {
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	2b0a      	cmp	r3, #10
 801343e:	d0f0      	beq.n	8013422 <SkipEndOfLineChars+0xc>
    }
    return line;
 8013440:	687b      	ldr	r3, [r7, #4]
}
 8013442:	4618      	mov	r0, r3
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
	...

08013450 <wc_PemGetHeaderFooter>:

int wc_PemGetHeaderFooter(int type, const char** header, const char** footer)
{
 8013450:	b480      	push	{r7}
 8013452:	b087      	sub	sp, #28
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
    int ret = BAD_FUNC_ARG;
 801345c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8013460:	617b      	str	r3, [r7, #20]

    switch (type) {
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2b15      	cmp	r3, #21
 8013466:	f200 80a7 	bhi.w	80135b8 <wc_PemGetHeaderFooter+0x168>
 801346a:	a201      	add	r2, pc, #4	; (adr r2, 8013470 <wc_PemGetHeaderFooter+0x20>)
 801346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013470:	080134c9 	.word	0x080134c9
 8013474:	08013523 	.word	0x08013523
 8013478:	080135b9 	.word	0x080135b9
 801347c:	080135b9 	.word	0x080135b9
 8013480:	080134e7 	.word	0x080134e7
 8013484:	080134c9 	.word	0x080134c9
 8013488:	08013505 	.word	0x08013505
 801348c:	080135b9 	.word	0x080135b9
 8013490:	080135b9 	.word	0x080135b9
 8013494:	080135b9 	.word	0x080135b9
 8013498:	08013505 	.word	0x08013505
 801349c:	08013523 	.word	0x08013523
 80134a0:	08013541 	.word	0x08013541
 80134a4:	0801355f 	.word	0x0801355f
 80134a8:	08013541 	.word	0x08013541
 80134ac:	080134c9 	.word	0x080134c9
 80134b0:	080135b9 	.word	0x080135b9
 80134b4:	080135b9 	.word	0x080135b9
 80134b8:	080135b9 	.word	0x080135b9
 80134bc:	080135b9 	.word	0x080135b9
 80134c0:	0801357d 	.word	0x0801357d
 80134c4:	0801359b 	.word	0x0801359b
        case CA_TYPE:       /* same as below */
        case TRUSTED_PEER_TYPE:
        case CERT_TYPE:
            if (header) *header = BEGIN_CERT;
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d002      	beq.n	80134d4 <wc_PemGetHeaderFooter+0x84>
 80134ce:	4a3e      	ldr	r2, [pc, #248]	; (80135c8 <wc_PemGetHeaderFooter+0x178>)
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_CERT;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d002      	beq.n	80134e0 <wc_PemGetHeaderFooter+0x90>
 80134da:	4a3c      	ldr	r2, [pc, #240]	; (80135cc <wc_PemGetHeaderFooter+0x17c>)
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	601a      	str	r2, [r3, #0]
            ret = 0;
 80134e0:	2300      	movs	r3, #0
 80134e2:	617b      	str	r3, [r7, #20]
            break;
 80134e4:	e069      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>

        case CRL_TYPE:
            if (header) *header = BEGIN_X509_CRL;
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d002      	beq.n	80134f2 <wc_PemGetHeaderFooter+0xa2>
 80134ec:	4a38      	ldr	r2, [pc, #224]	; (80135d0 <wc_PemGetHeaderFooter+0x180>)
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_X509_CRL;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <wc_PemGetHeaderFooter+0xae>
 80134f8:	4a36      	ldr	r2, [pc, #216]	; (80135d4 <wc_PemGetHeaderFooter+0x184>)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	601a      	str	r2, [r3, #0]
            ret = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	617b      	str	r3, [r7, #20]
            break;
 8013502:	e05a      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>
            break;
    #endif
    #ifdef HAVE_ECC
        case ECC_TYPE:
        case ECC_PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_EC_PRIV;
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d002      	beq.n	8013510 <wc_PemGetHeaderFooter+0xc0>
 801350a:	4a33      	ldr	r2, [pc, #204]	; (80135d8 <wc_PemGetHeaderFooter+0x188>)
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_EC_PRIV;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d002      	beq.n	801351c <wc_PemGetHeaderFooter+0xcc>
 8013516:	4a31      	ldr	r2, [pc, #196]	; (80135dc <wc_PemGetHeaderFooter+0x18c>)
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	601a      	str	r2, [r3, #0]
            ret = 0;
 801351c:	2300      	movs	r3, #0
 801351e:	617b      	str	r3, [r7, #20]
            break;
 8013520:	e04b      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>
    #endif
        case RSA_TYPE:
        case PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_RSA_PRIV;
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d002      	beq.n	801352e <wc_PemGetHeaderFooter+0xde>
 8013528:	4a2d      	ldr	r2, [pc, #180]	; (80135e0 <wc_PemGetHeaderFooter+0x190>)
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_RSA_PRIV;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <wc_PemGetHeaderFooter+0xea>
 8013534:	4a2b      	ldr	r2, [pc, #172]	; (80135e4 <wc_PemGetHeaderFooter+0x194>)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	601a      	str	r2, [r3, #0]
            ret = 0;
 801353a:	2300      	movs	r3, #0
 801353c:	617b      	str	r3, [r7, #20]
            break;
 801353e:	e03c      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>
            break;
#endif /* HAVE_SPHINCS */
#endif /* HAVE_PQC */
        case PUBLICKEY_TYPE:
        case ECC_PUBLICKEY_TYPE:
            if (header) *header = BEGIN_PUB_KEY;
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d002      	beq.n	801354c <wc_PemGetHeaderFooter+0xfc>
 8013546:	4a28      	ldr	r2, [pc, #160]	; (80135e8 <wc_PemGetHeaderFooter+0x198>)
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_PUB_KEY;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d002      	beq.n	8013558 <wc_PemGetHeaderFooter+0x108>
 8013552:	4a26      	ldr	r2, [pc, #152]	; (80135ec <wc_PemGetHeaderFooter+0x19c>)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	601a      	str	r2, [r3, #0]
            ret = 0;
 8013558:	2300      	movs	r3, #0
 801355a:	617b      	str	r3, [r7, #20]
            break;
 801355c:	e02d      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>
        case RSA_PUBLICKEY_TYPE:
            if (header) *header = BEGIN_RSA_PUB;
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d002      	beq.n	801356a <wc_PemGetHeaderFooter+0x11a>
 8013564:	4a22      	ldr	r2, [pc, #136]	; (80135f0 <wc_PemGetHeaderFooter+0x1a0>)
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_RSA_PUB;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d002      	beq.n	8013576 <wc_PemGetHeaderFooter+0x126>
 8013570:	4a20      	ldr	r2, [pc, #128]	; (80135f4 <wc_PemGetHeaderFooter+0x1a4>)
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	601a      	str	r2, [r3, #0]
            ret = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	617b      	str	r3, [r7, #20]
            break;
 801357a:	e01e      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>
    #ifndef NO_DH
        case DH_PRIVATEKEY_TYPE:
    #endif
        case PKCS8_PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_PRIV_KEY;
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <wc_PemGetHeaderFooter+0x138>
 8013582:	4a1d      	ldr	r2, [pc, #116]	; (80135f8 <wc_PemGetHeaderFooter+0x1a8>)
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_PRIV_KEY;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d002      	beq.n	8013594 <wc_PemGetHeaderFooter+0x144>
 801358e:	4a1b      	ldr	r2, [pc, #108]	; (80135fc <wc_PemGetHeaderFooter+0x1ac>)
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	601a      	str	r2, [r3, #0]
            ret = 0;
 8013594:	2300      	movs	r3, #0
 8013596:	617b      	str	r3, [r7, #20]
            break;
 8013598:	e00f      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>
        case PKCS8_ENC_PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_ENC_PRIV_KEY;
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d002      	beq.n	80135a6 <wc_PemGetHeaderFooter+0x156>
 80135a0:	4a17      	ldr	r2, [pc, #92]	; (8013600 <wc_PemGetHeaderFooter+0x1b0>)
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_ENC_PRIV_KEY;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d002      	beq.n	80135b2 <wc_PemGetHeaderFooter+0x162>
 80135ac:	4a15      	ldr	r2, [pc, #84]	; (8013604 <wc_PemGetHeaderFooter+0x1b4>)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	601a      	str	r2, [r3, #0]
            ret = 0;
 80135b2:	2300      	movs	r3, #0
 80135b4:	617b      	str	r3, [r7, #20]
            break;
 80135b6:	e000      	b.n	80135ba <wc_PemGetHeaderFooter+0x16a>
        default:
            break;
 80135b8:	bf00      	nop
    }
    return ret;
 80135ba:	697b      	ldr	r3, [r7, #20]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	371c      	adds	r7, #28
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr
 80135c8:	08028fac 	.word	0x08028fac
 80135cc:	08028fc8 	.word	0x08028fc8
 80135d0:	08028fe4 	.word	0x08028fe4
 80135d4:	08029000 	.word	0x08029000
 80135d8:	0802911c 	.word	0x0802911c
 80135dc:	0802913c 	.word	0x0802913c
 80135e0:	08029018 	.word	0x08029018
 80135e4:	08029038 	.word	0x08029038
 80135e8:	0802919c 	.word	0x0802919c
 80135ec:	080291b8 	.word	0x080291b8
 80135f0:	08029058 	.word	0x08029058
 80135f4:	08029078 	.word	0x08029078
 80135f8:	08029098 	.word	0x08029098
 80135fc:	080290b4 	.word	0x080290b4
 8013600:	080290d0 	.word	0x080290d0
 8013604:	080290f8 	.word	0x080290f8

08013608 <wc_EncryptedInfoGet>:
#if !defined(NO_AES) && defined(HAVE_AES_CBC) && defined(WOLFSSL_AES_256)
    static wcchar kEncTypeAesCbc256 = "AES-256-CBC";
#endif

int wc_EncryptedInfoGet(EncryptedInfo* info, const char* cipherInfo)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b084      	sub	sp, #16
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8013612:	2300      	movs	r3, #0
 8013614:	60fb      	str	r3, [r7, #12]

    if (info == NULL || cipherInfo == NULL)
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <wc_EncryptedInfoGet+0x1a>
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d102      	bne.n	8013628 <wc_EncryptedInfoGet+0x20>
        return BAD_FUNC_ARG;
 8013622:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8013626:	e045      	b.n	80136b4 <wc_EncryptedInfoGet+0xac>
#endif
    }
    else
#endif /* !NO_DES3 */
#if !defined(NO_AES) && defined(HAVE_AES_CBC) && defined(WOLFSSL_AES_128)
    if (XSTRCMP(cipherInfo, kEncTypeAesCbc128) == 0) {
 8013628:	4b24      	ldr	r3, [pc, #144]	; (80136bc <wc_EncryptedInfoGet+0xb4>)
 801362a:	4619      	mov	r1, r3
 801362c:	6838      	ldr	r0, [r7, #0]
 801362e:	f7ec fddf 	bl	80001f0 <strcmp>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d10d      	bne.n	8013654 <wc_EncryptedInfoGet+0x4c>
        info->cipherType = WC_CIPHER_AES_CBC;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2202      	movs	r2, #2
 801363c:	60da      	str	r2, [r3, #12]
        info->keySz = AES_128_KEY_SIZE;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2210      	movs	r2, #16
 8013642:	611a      	str	r2, [r3, #16]
        if (info->ivSz == 0) info->ivSz  = AES_IV_SIZE;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	695b      	ldr	r3, [r3, #20]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d132      	bne.n	80136b2 <wc_EncryptedInfoGet+0xaa>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2210      	movs	r2, #16
 8013650:	615a      	str	r2, [r3, #20]
 8013652:	e02e      	b.n	80136b2 <wc_EncryptedInfoGet+0xaa>
    }
    else
#endif
#if !defined(NO_AES) && defined(HAVE_AES_CBC) && defined(WOLFSSL_AES_192)
    if (XSTRCMP(cipherInfo, kEncTypeAesCbc192) == 0) {
 8013654:	4b1a      	ldr	r3, [pc, #104]	; (80136c0 <wc_EncryptedInfoGet+0xb8>)
 8013656:	4619      	mov	r1, r3
 8013658:	6838      	ldr	r0, [r7, #0]
 801365a:	f7ec fdc9 	bl	80001f0 <strcmp>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d10d      	bne.n	8013680 <wc_EncryptedInfoGet+0x78>
        info->cipherType = WC_CIPHER_AES_CBC;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2202      	movs	r2, #2
 8013668:	60da      	str	r2, [r3, #12]
        info->keySz = AES_192_KEY_SIZE;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2218      	movs	r2, #24
 801366e:	611a      	str	r2, [r3, #16]
        if (info->ivSz == 0) info->ivSz  = AES_IV_SIZE;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	695b      	ldr	r3, [r3, #20]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d11c      	bne.n	80136b2 <wc_EncryptedInfoGet+0xaa>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2210      	movs	r2, #16
 801367c:	615a      	str	r2, [r3, #20]
 801367e:	e018      	b.n	80136b2 <wc_EncryptedInfoGet+0xaa>
    }
    else
#endif
#if !defined(NO_AES) && defined(HAVE_AES_CBC) && defined(WOLFSSL_AES_256)
    if (XSTRCMP(cipherInfo, kEncTypeAesCbc256) == 0) {
 8013680:	4b10      	ldr	r3, [pc, #64]	; (80136c4 <wc_EncryptedInfoGet+0xbc>)
 8013682:	4619      	mov	r1, r3
 8013684:	6838      	ldr	r0, [r7, #0]
 8013686:	f7ec fdb3 	bl	80001f0 <strcmp>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	d10d      	bne.n	80136ac <wc_EncryptedInfoGet+0xa4>
        info->cipherType = WC_CIPHER_AES_CBC;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2202      	movs	r2, #2
 8013694:	60da      	str	r2, [r3, #12]
        info->keySz = AES_256_KEY_SIZE;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2220      	movs	r2, #32
 801369a:	611a      	str	r2, [r3, #16]
        if (info->ivSz == 0) info->ivSz  = AES_IV_SIZE;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	695b      	ldr	r3, [r3, #20]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d106      	bne.n	80136b2 <wc_EncryptedInfoGet+0xaa>
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2210      	movs	r2, #16
 80136a8:	615a      	str	r2, [r3, #20]
 80136aa:	e002      	b.n	80136b2 <wc_EncryptedInfoGet+0xaa>
    }
    else
#endif
    {
        ret = NOT_COMPILED_IN;
 80136ac:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 80136b0:	60fb      	str	r3, [r7, #12]
    }
    return ret;
 80136b2:	68fb      	ldr	r3, [r7, #12]
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3710      	adds	r7, #16
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	080291ec 	.word	0x080291ec
 80136c0:	080291f8 	.word	0x080291f8
 80136c4:	08029204 	.word	0x08029204

080136c8 <wc_EncryptedInfoParse>:

int wc_EncryptedInfoParse(EncryptedInfo* info, const char** pBuffer,
                          size_t bufSz)
{
 80136c8:	b590      	push	{r4, r7, lr}
 80136ca:	b08f      	sub	sp, #60	; 0x3c
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	607a      	str	r2, [r7, #4]
    int         err = 0;
 80136d4:	2300      	movs	r3, #0
 80136d6:	637b      	str	r3, [r7, #52]	; 0x34
    const char* bufferEnd;
    char*       line;
    word32      lineSz;
    char*       finish;
    word32      finishSz;
    char*       start = NULL;
 80136d8:	2300      	movs	r3, #0
 80136da:	633b      	str	r3, [r7, #48]	; 0x30
    word32      startSz;
    const char* newline = NULL;
 80136dc:	2300      	movs	r3, #0
 80136de:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (info == NULL || pBuffer == NULL || bufSz == 0)
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d005      	beq.n	80136f2 <wc_EncryptedInfoParse+0x2a>
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d002      	beq.n	80136f2 <wc_EncryptedInfoParse+0x2a>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d102      	bne.n	80136f8 <wc_EncryptedInfoParse+0x30>
        return BAD_FUNC_ARG;
 80136f2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80136f6:	e104      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>

    bufferStart = *pBuffer;
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferEnd = bufferStart + bufSz;
 80136fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	4413      	add	r3, r2
 8013704:	627b      	str	r3, [r7, #36]	; 0x24

    /* find encrypted info marker */
    line = XSTRNSTR(bufferStart, kProcTypeHeader,
 8013706:	4c81      	ldr	r4, [pc, #516]	; (801390c <wc_EncryptedInfoParse+0x244>)
 8013708:	214c      	movs	r1, #76	; 0x4c
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f7f9 fef5 	bl	800d4fa <min>
 8013710:	4603      	mov	r3, r0
 8013712:	461a      	mov	r2, r3
 8013714:	4621      	mov	r1, r4
 8013716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013718:	f00d fc18 	bl	8020f4c <mystrnstr>
 801371c:	6238      	str	r0, [r7, #32]
                    min((word32)bufSz, PEM_LINE_LEN));
    if (line != NULL) {
 801371e:	6a3b      	ldr	r3, [r7, #32]
 8013720:	2b00      	cmp	r3, #0
 8013722:	f000 80ed 	beq.w	8013900 <wc_EncryptedInfoParse+0x238>
        if (line >= bufferEnd) {
 8013726:	6a3a      	ldr	r2, [r7, #32]
 8013728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372a:	429a      	cmp	r2, r3
 801372c:	d302      	bcc.n	8013734 <wc_EncryptedInfoParse+0x6c>
            return BUFFER_E;
 801372e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013732:	e0e6      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
        }

        lineSz = (word32)(bufferEnd - line);
 8013734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013736:	6a3b      	ldr	r3, [r7, #32]
 8013738:	1ad3      	subs	r3, r2, r3
 801373a:	61fb      	str	r3, [r7, #28]

        /* find DEC-Info marker */
        start = XSTRNSTR(line, kDecInfoHeader, min(lineSz, PEM_LINE_LEN));
 801373c:	4c74      	ldr	r4, [pc, #464]	; (8013910 <wc_EncryptedInfoParse+0x248>)
 801373e:	214c      	movs	r1, #76	; 0x4c
 8013740:	69f8      	ldr	r0, [r7, #28]
 8013742:	f7f9 feda 	bl	800d4fa <min>
 8013746:	4603      	mov	r3, r0
 8013748:	461a      	mov	r2, r3
 801374a:	4621      	mov	r1, r4
 801374c:	6a38      	ldr	r0, [r7, #32]
 801374e:	f00d fbfd 	bl	8020f4c <mystrnstr>
 8013752:	6338      	str	r0, [r7, #48]	; 0x30

        if (start == NULL)
 8013754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013756:	2b00      	cmp	r3, #0
 8013758:	d102      	bne.n	8013760 <wc_EncryptedInfoParse+0x98>
            return BUFFER_E;
 801375a:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801375e:	e0d0      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>

        /* skip dec-info and ": " */
        start += XSTRLEN(kDecInfoHeader);
 8013760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013762:	3308      	adds	r3, #8
 8013764:	633b      	str	r3, [r7, #48]	; 0x30
        if (start >= bufferEnd)
 8013766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376a:	429a      	cmp	r2, r3
 801376c:	d302      	bcc.n	8013774 <wc_EncryptedInfoParse+0xac>
            return BUFFER_E;
 801376e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013772:	e0c6      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>

        if (start[0] == ':') {
 8013774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	2b3a      	cmp	r3, #58	; 0x3a
 801377a:	d109      	bne.n	8013790 <wc_EncryptedInfoParse+0xc8>
            start++;
 801377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377e:	3301      	adds	r3, #1
 8013780:	633b      	str	r3, [r7, #48]	; 0x30
            if (start >= bufferEnd)
 8013782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013786:	429a      	cmp	r2, r3
 8013788:	d302      	bcc.n	8013790 <wc_EncryptedInfoParse+0xc8>
                return BUFFER_E;
 801378a:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801378e:	e0b8      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
        }
        if (start[0] == ' ')
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	2b20      	cmp	r3, #32
 8013796:	d102      	bne.n	801379e <wc_EncryptedInfoParse+0xd6>
            start++;
 8013798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379a:	3301      	adds	r3, #1
 801379c:	633b      	str	r3, [r7, #48]	; 0x30

        startSz = (word32)(bufferEnd - start);
 801379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a2:	1ad3      	subs	r3, r2, r3
 80137a4:	61bb      	str	r3, [r7, #24]
        finish = XSTRNSTR(start, ",", min(startSz, PEM_LINE_LEN));
 80137a6:	214c      	movs	r1, #76	; 0x4c
 80137a8:	69b8      	ldr	r0, [r7, #24]
 80137aa:	f7f9 fea6 	bl	800d4fa <min>
 80137ae:	4603      	mov	r3, r0
 80137b0:	461a      	mov	r2, r3
 80137b2:	4958      	ldr	r1, [pc, #352]	; (8013914 <wc_EncryptedInfoParse+0x24c>)
 80137b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137b6:	f00d fbc9 	bl	8020f4c <mystrnstr>
 80137ba:	6178      	str	r0, [r7, #20]

        if ((start != NULL) && (finish != NULL) && (start < finish)) {
 80137bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137be:	2b00      	cmp	r3, #0
 80137c0:	f000 809b 	beq.w	80138fa <wc_EncryptedInfoParse+0x232>
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f000 8097 	beq.w	80138fa <wc_EncryptedInfoParse+0x232>
 80137cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	f080 8092 	bcs.w	80138fa <wc_EncryptedInfoParse+0x232>
            if (finish >= bufferEnd) {
 80137d6:	697a      	ldr	r2, [r7, #20]
 80137d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137da:	429a      	cmp	r2, r3
 80137dc:	d302      	bcc.n	80137e4 <wc_EncryptedInfoParse+0x11c>
                return BUFFER_E;
 80137de:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80137e2:	e08e      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
            }

            finishSz = (word32)(bufferEnd - finish);
 80137e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	1ad3      	subs	r3, r2, r3
 80137ea:	613b      	str	r3, [r7, #16]
            newline = XSTRNSTR(finish, "\r", min(finishSz, PEM_LINE_LEN));
 80137ec:	214c      	movs	r1, #76	; 0x4c
 80137ee:	6938      	ldr	r0, [r7, #16]
 80137f0:	f7f9 fe83 	bl	800d4fa <min>
 80137f4:	4603      	mov	r3, r0
 80137f6:	461a      	mov	r2, r3
 80137f8:	4947      	ldr	r1, [pc, #284]	; (8013918 <wc_EncryptedInfoParse+0x250>)
 80137fa:	6978      	ldr	r0, [r7, #20]
 80137fc:	f00d fba6 	bl	8020f4c <mystrnstr>
 8013800:	62f8      	str	r0, [r7, #44]	; 0x2c

            /* get cipher name */
            if (NAME_SZ < (finish - start)) /* buffer size of info->name */
 8013802:	697a      	ldr	r2, [r7, #20]
 8013804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013806:	1ad3      	subs	r3, r2, r3
 8013808:	2ba0      	cmp	r3, #160	; 0xa0
 801380a:	dd02      	ble.n	8013812 <wc_EncryptedInfoParse+0x14a>
                return BUFFER_E;
 801380c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013810:	e077      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
            if (XMEMCPY(info->name, start, finish - start) == NULL)
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	f103 0018 	add.w	r0, r3, #24
 8013818:	697a      	ldr	r2, [r7, #20]
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	1ad3      	subs	r3, r2, r3
 801381e:	461a      	mov	r2, r3
 8013820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013822:	f00d fd5f 	bl	80212e4 <memcpy>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d102      	bne.n	8013832 <wc_EncryptedInfoParse+0x16a>
                return BUFFER_E;
 801382c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013830:	e067      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
            info->name[finish - start] = '\0'; /* null term */
 8013832:	697a      	ldr	r2, [r7, #20]
 8013834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013836:	1ad3      	subs	r3, r2, r3
 8013838:	68fa      	ldr	r2, [r7, #12]
 801383a:	4413      	add	r3, r2
 801383c:	2200      	movs	r2, #0
 801383e:	761a      	strb	r2, [r3, #24]

            /* populate info */
            err = wc_EncryptedInfoGet(info, info->name);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	3318      	adds	r3, #24
 8013844:	4619      	mov	r1, r3
 8013846:	68f8      	ldr	r0, [r7, #12]
 8013848:	f7ff fede 	bl	8013608 <wc_EncryptedInfoGet>
 801384c:	6378      	str	r0, [r7, #52]	; 0x34
            if (err != 0)
 801384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013850:	2b00      	cmp	r3, #0
 8013852:	d001      	beq.n	8013858 <wc_EncryptedInfoParse+0x190>
                return err;
 8013854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013856:	e054      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>

            /* get IV */
            if (finishSz < info->ivSz + 1)
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	695b      	ldr	r3, [r3, #20]
 801385c:	3301      	adds	r3, #1
 801385e:	693a      	ldr	r2, [r7, #16]
 8013860:	429a      	cmp	r2, r3
 8013862:	d202      	bcs.n	801386a <wc_EncryptedInfoParse+0x1a2>
                return BUFFER_E;
 8013864:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013868:	e04b      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>

            if (newline == NULL) {
 801386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801386c:	2b00      	cmp	r3, #0
 801386e:	d10a      	bne.n	8013886 <wc_EncryptedInfoParse+0x1be>
                newline = XSTRNSTR(finish, "\n", min(finishSz,
 8013870:	214c      	movs	r1, #76	; 0x4c
 8013872:	6938      	ldr	r0, [r7, #16]
 8013874:	f7f9 fe41 	bl	800d4fa <min>
 8013878:	4603      	mov	r3, r0
 801387a:	461a      	mov	r2, r3
 801387c:	4927      	ldr	r1, [pc, #156]	; (801391c <wc_EncryptedInfoParse+0x254>)
 801387e:	6978      	ldr	r0, [r7, #20]
 8013880:	f00d fb64 	bl	8020f4c <mystrnstr>
 8013884:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                     PEM_LINE_LEN));
            }
            if ((newline != NULL) && (newline > finish)) {
 8013886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013888:	2b00      	cmp	r3, #0
 801388a:	d033      	beq.n	80138f4 <wc_EncryptedInfoParse+0x22c>
 801388c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	429a      	cmp	r2, r3
 8013892:	d92f      	bls.n	80138f4 <wc_EncryptedInfoParse+0x22c>
                finish++;
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	3301      	adds	r3, #1
 8013898:	617b      	str	r3, [r7, #20]
                info->ivSz = (word32)(newline - finish);
 801389a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	461a      	mov	r2, r3
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	615a      	str	r2, [r3, #20]
                if (info->ivSz > IV_SZ)
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	695b      	ldr	r3, [r3, #20]
 80138aa:	2b20      	cmp	r3, #32
 80138ac:	d902      	bls.n	80138b4 <wc_EncryptedInfoParse+0x1ec>
                    return BUFFER_E;
 80138ae:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80138b2:	e026      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
                if (XMEMCPY(info->iv, finish, info->ivSz) == NULL)
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	695b      	ldr	r3, [r3, #20]
 80138be:	461a      	mov	r2, r3
 80138c0:	6979      	ldr	r1, [r7, #20]
 80138c2:	f00d fd0f 	bl	80212e4 <memcpy>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d102      	bne.n	80138d2 <wc_EncryptedInfoParse+0x20a>
                    return BUFFER_E;
 80138cc:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80138d0:	e017      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
                info->set = 1;
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 80138d8:	f043 0301 	orr.w	r3, r3, #1
 80138dc:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
            if ((newline != NULL) && (newline > finish)) {
 80138e0:	bf00      	nop
        }
        else
            return BUFFER_E;

        /* eat end of line characters */
        newline = SkipEndOfLineChars(newline, bufferEnd);
 80138e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80138e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138e6:	f7ff fd96 	bl	8013416 <SkipEndOfLineChars>
 80138ea:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* return new headerEnd */

        *pBuffer = newline;
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138f0:	601a      	str	r2, [r3, #0]
 80138f2:	e005      	b.n	8013900 <wc_EncryptedInfoParse+0x238>
                return BUFFER_E;
 80138f4:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80138f8:	e003      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
            return BUFFER_E;
 80138fa:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80138fe:	e000      	b.n	8013902 <wc_EncryptedInfoParse+0x23a>
    }

    return err;
 8013900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013902:	4618      	mov	r0, r3
 8013904:	373c      	adds	r7, #60	; 0x3c
 8013906:	46bd      	mov	sp, r7
 8013908:	bd90      	pop	{r4, r7, pc}
 801390a:	bf00      	nop
 801390c:	080291d4 	.word	0x080291d4
 8013910:	080291e0 	.word	0x080291e0
 8013914:	08029210 	.word	0x08029210
 8013918:	08029214 	.word	0x08029214
 801391c:	08029218 	.word	0x08029218

08013920 <PemToDer>:

/* Remove PEM header/footer, convert to ASN1, store any encrypted data
   info->consumed tracks of PEM bytes consumed in case multiple parts */
int PemToDer(const unsigned char* buff, long longSz, int type,
              DerBuffer** pDer, void* heap, EncryptedInfo* info, int* keyFormat)
{
 8013920:	b590      	push	{r4, r7, lr}
 8013922:	b0c3      	sub	sp, #268	; 0x10c
 8013924:	af02      	add	r7, sp, #8
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
 801392c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8013930:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8013934:	6013      	str	r3, [r2, #0]
    const char* header      = NULL;
 8013936:	2300      	movs	r3, #0
 8013938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    const char* footer      = NULL;
 801393c:	2300      	movs	r3, #0
 801393e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    const char* headerEnd;
    const char* footerEnd;
    const char* consumedEnd;
    const char* bufferEnd   = (const char*)(buff + longSz);
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	68fa      	ldr	r2, [r7, #12]
 8013946:	4413      	add	r3, r2
 8013948:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    long        neededSz;
    int         ret         = 0;
 801394c:	2300      	movs	r3, #0
 801394e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    int         sz          = (int)longSz;
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int         encrypted_key = 0;
 8013958:	2300      	movs	r3, #0
 801395a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    DerBuffer*  der;
    word32      algId = 0;
 801395e:	2300      	movs	r3, #0
 8013960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
#if defined(WOLFSSL_ENCRYPTED_KEYS)
    #if ((defined(WOLFSSL_ENCRYPTED_KEYS) && !defined(NO_DES3)) || \
         (!defined(NO_AES) && defined(HAVE_AES_CBC) && \
          defined(HAVE_AES_DECRYPT))) && \
        !defined(NO_WOLFSSL_SKIP_TRAILING_PAD)
        int     padVal = 0;
 8013964:	2300      	movs	r3, #0
 8013966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif

    WOLFSSL_ENTER("PemToDer");

    /* get PEM header and footer based on type */
    ret = wc_PemGetHeaderFooter(type, &header, &footer);
 801396a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 801396e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013972:	4619      	mov	r1, r3
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7ff fd6b 	bl	8013450 <wc_PemGetHeaderFooter>
 801397a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (ret != 0)
 801397e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <PemToDer+0x6c>
        return ret;
 8013986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801398a:	e34a      	b.n	8014022 <PemToDer+0x702>

    /* map header if not found for type */
    for (;;) {
        headerEnd = XSTRNSTR((char*)buff, header, sz);
 801398c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013990:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013994:	4619      	mov	r1, r3
 8013996:	68f8      	ldr	r0, [r7, #12]
 8013998:	f00d fad8 	bl	8020f4c <mystrnstr>
 801399c:	4603      	mov	r3, r0
 801399e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        if (headerEnd) {
 80139a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d141      	bne.n	8013a2e <PemToDer+0x10e>
            break;
        }

        if (type == PRIVATEKEY_TYPE) {
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d12f      	bne.n	8013a10 <PemToDer+0xf0>
            if (header == BEGIN_RSA_PRIV) {
 80139b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80139b4:	4abe      	ldr	r2, [pc, #760]	; (8013cb0 <PemToDer+0x390>)
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d106      	bne.n	80139c8 <PemToDer+0xa8>
                header = BEGIN_PRIV_KEY;
 80139ba:	4bbe      	ldr	r3, [pc, #760]	; (8013cb4 <PemToDer+0x394>)
 80139bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                footer = END_PRIV_KEY;
 80139c0:	4bbd      	ldr	r3, [pc, #756]	; (8013cb8 <PemToDer+0x398>)
 80139c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80139c6:	e7e1      	b.n	801398c <PemToDer+0x6c>
            }
            else if (header == BEGIN_PRIV_KEY) {
 80139c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80139cc:	4ab9      	ldr	r2, [pc, #740]	; (8013cb4 <PemToDer+0x394>)
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d106      	bne.n	80139e0 <PemToDer+0xc0>
                header = BEGIN_ENC_PRIV_KEY;
 80139d2:	4bba      	ldr	r3, [pc, #744]	; (8013cbc <PemToDer+0x39c>)
 80139d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                footer = END_ENC_PRIV_KEY;
 80139d8:	4bb9      	ldr	r3, [pc, #740]	; (8013cc0 <PemToDer+0x3a0>)
 80139da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80139de:	e7d5      	b.n	801398c <PemToDer+0x6c>
            }
#ifdef HAVE_ECC
            else if (header == BEGIN_ENC_PRIV_KEY) {
 80139e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80139e4:	4ab5      	ldr	r2, [pc, #724]	; (8013cbc <PemToDer+0x39c>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d106      	bne.n	80139f8 <PemToDer+0xd8>
                header = BEGIN_EC_PRIV;
 80139ea:	4bb6      	ldr	r3, [pc, #728]	; (8013cc4 <PemToDer+0x3a4>)
 80139ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                footer = END_EC_PRIV;
 80139f0:	4bb5      	ldr	r3, [pc, #724]	; (8013cc8 <PemToDer+0x3a8>)
 80139f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80139f6:	e7c9      	b.n	801398c <PemToDer+0x6c>
            }
            else if (header == BEGIN_EC_PRIV) {
 80139f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80139fc:	4ab1      	ldr	r2, [pc, #708]	; (8013cc4 <PemToDer+0x3a4>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d117      	bne.n	8013a32 <PemToDer+0x112>
                header = BEGIN_DSA_PRIV;
 8013a02:	4bb2      	ldr	r3, [pc, #712]	; (8013ccc <PemToDer+0x3ac>)
 8013a04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                footer = END_DSA_PRIV;
 8013a08:	4bb1      	ldr	r3, [pc, #708]	; (8013cd0 <PemToDer+0x3b0>)
 8013a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013a0e:	e7bd      	b.n	801398c <PemToDer+0x6c>
            #else
                break;
            #endif
            }
        }
        else if (type == PUBLICKEY_TYPE) {
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2b0c      	cmp	r3, #12
 8013a14:	d10f      	bne.n	8013a36 <PemToDer+0x116>
            if (header == BEGIN_PUB_KEY) {
 8013a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013a1a:	4aae      	ldr	r2, [pc, #696]	; (8013cd4 <PemToDer+0x3b4>)
 8013a1c:	4293      	cmp	r3, r2
 8013a1e:	d10c      	bne.n	8013a3a <PemToDer+0x11a>
                header = BEGIN_RSA_PUB;
 8013a20:	4bad      	ldr	r3, [pc, #692]	; (8013cd8 <PemToDer+0x3b8>)
 8013a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                footer = END_RSA_PUB;
 8013a26:	4bad      	ldr	r3, [pc, #692]	; (8013cdc <PemToDer+0x3bc>)
 8013a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        headerEnd = XSTRNSTR((char*)buff, header, sz);
 8013a2c:	e7ae      	b.n	801398c <PemToDer+0x6c>
            break;
 8013a2e:	bf00      	nop
 8013a30:	e004      	b.n	8013a3c <PemToDer+0x11c>
                break;
 8013a32:	bf00      	nop
 8013a34:	e002      	b.n	8013a3c <PemToDer+0x11c>
            header =  BEGIN_X509_CRL;
            footer = END_X509_CRL;
        }
#endif
        else {
            break;
 8013a36:	bf00      	nop
 8013a38:	e000      	b.n	8013a3c <PemToDer+0x11c>
                break;
 8013a3a:	bf00      	nop
        }
    }

    if (!headerEnd) {
 8013a3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	f040 80ea 	bne.w	8013c1a <PemToDer+0x2fa>
#ifdef OPENSSL_EXTRA
        if (type == PRIVATEKEY_TYPE) {
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2b01      	cmp	r3, #1
 8013a4a:	f040 80d5 	bne.w	8013bf8 <PemToDer+0x2d8>
            const char* beginEnd;
            int endLen;
            /* see if there is a -----BEGIN * PRIVATE KEY----- header */
            headerEnd = XSTRNSTR((char*)buff, PRIV_KEY_SUFFIX, sz);
 8013a4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013a52:	461a      	mov	r2, r3
 8013a54:	49a2      	ldr	r1, [pc, #648]	; (8013ce0 <PemToDer+0x3c0>)
 8013a56:	68f8      	ldr	r0, [r7, #12]
 8013a58:	f00d fa78 	bl	8020f4c <mystrnstr>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (headerEnd) {
 8013a62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	f000 80c6 	beq.w	8013bf8 <PemToDer+0x2d8>
                beginEnd = headerEnd + XSTR_SIZEOF(PRIV_KEY_SUFFIX);
 8013a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013a70:	3310      	adds	r3, #16
 8013a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                if (beginEnd >= (char*)buff + sz) {
 8013a76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	4413      	add	r3, r2
 8013a7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d307      	bcc.n	8013a96 <PemToDer+0x176>
                    return BUFFER_E;
 8013a86:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013a8a:	e2ca      	b.n	8014022 <PemToDer+0x702>
                /* back up to BEGIN_PRIV_KEY_PREFIX */
                while (headerEnd > (char*)buff &&
                        XSTRNCMP(headerEnd, BEGIN_PRIV_KEY_PREFIX,
                                XSTR_SIZEOF(BEGIN_PRIV_KEY_PREFIX)) != 0 &&
                        *headerEnd != '\n') {
                    headerEnd--;
 8013a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013a90:	3b01      	subs	r3, #1
 8013a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                while (headerEnd > (char*)buff &&
 8013a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d20e      	bcs.n	8013abe <PemToDer+0x19e>
                        XSTRNCMP(headerEnd, BEGIN_PRIV_KEY_PREFIX,
 8013aa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013aa4:	220a      	movs	r2, #10
 8013aa6:	498f      	ldr	r1, [pc, #572]	; (8013ce4 <PemToDer+0x3c4>)
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f00d fdfd 	bl	80216a8 <strncmp>
 8013aae:	4603      	mov	r3, r0
                while (headerEnd > (char*)buff &&
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d004      	beq.n	8013abe <PemToDer+0x19e>
                        *headerEnd != '\n') {
 8013ab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013ab8:	781b      	ldrb	r3, [r3, #0]
                                XSTR_SIZEOF(BEGIN_PRIV_KEY_PREFIX)) != 0 &&
 8013aba:	2b0a      	cmp	r3, #10
 8013abc:	d1e6      	bne.n	8013a8c <PemToDer+0x16c>
                }
                if (headerEnd <= (char*)buff ||
 8013abe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013ac2:	68fa      	ldr	r2, [r7, #12]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d210      	bcs.n	8013aea <PemToDer+0x1ca>
                        XSTRNCMP(headerEnd, BEGIN_PRIV_KEY_PREFIX,
 8013ac8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013acc:	220a      	movs	r2, #10
 8013ace:	4985      	ldr	r1, [pc, #532]	; (8013ce4 <PemToDer+0x3c4>)
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f00d fde9 	bl	80216a8 <strncmp>
 8013ad6:	4603      	mov	r3, r0
                if (headerEnd <= (char*)buff ||
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d106      	bne.n	8013aea <PemToDer+0x1ca>
                        XSTR_SIZEOF(BEGIN_PRIV_KEY_PREFIX)) != 0 ||
                        beginEnd - headerEnd > PEM_LINE_LEN) {
 8013adc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013ae0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013ae4:	1ad3      	subs	r3, r2, r3
                        XSTR_SIZEOF(BEGIN_PRIV_KEY_PREFIX)) != 0 ||
 8013ae6:	2b4c      	cmp	r3, #76	; 0x4c
 8013ae8:	dd0c      	ble.n	8013b04 <PemToDer+0x1e4>
                    WOLFSSL_MSG("Couldn't find PEM header");
                    WOLFSSL_ERROR(ASN_NO_PEM_HEADER);
 8013aea:	2300      	movs	r3, #0
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	4b7e      	ldr	r3, [pc, #504]	; (8013ce8 <PemToDer+0x3c8>)
 8013af0:	f645 22ee 	movw	r2, #23278	; 0x5aee
 8013af4:	497d      	ldr	r1, [pc, #500]	; (8013cec <PemToDer+0x3cc>)
 8013af6:	f06f 00a1 	mvn.w	r0, #161	; 0xa1
 8013afa:	f005 f801 	bl	8018b00 <WOLFSSL_ERROR_LINE>
                    return ASN_NO_PEM_HEADER;
 8013afe:	f06f 03a1 	mvn.w	r3, #161	; 0xa1
 8013b02:	e28e      	b.n	8014022 <PemToDer+0x702>
                }

                /* headerEnd now points to beginning of header */
                XMEMCPY(beginBuf, headerEnd, beginEnd - headerEnd);
 8013b04:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8013b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013b0c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013b10:	1ad3      	subs	r3, r2, r3
 8013b12:	461a      	mov	r2, r3
 8013b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f00d fbe3 	bl	80212e4 <memcpy>
                beginBuf[beginEnd - headerEnd] = '\0';
 8013b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013b22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013b26:	1ad3      	subs	r3, r2, r3
 8013b28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013b2c:	443b      	add	r3, r7
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f803 2c9c 	strb.w	r2, [r3, #-156]
                /* look for matching footer */
                footer = XSTRNSTR(beginEnd,
 8013b34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013b38:	330a      	adds	r3, #10
 8013b3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013b3e:	68f9      	ldr	r1, [r7, #12]
 8013b40:	4411      	add	r1, r2
 8013b42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013b46:	1a8a      	subs	r2, r1, r2
 8013b48:	4619      	mov	r1, r3
 8013b4a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8013b4e:	f00d f9fd 	bl	8020f4c <mystrnstr>
 8013b52:	4603      	mov	r3, r0
 8013b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                                beginBuf + XSTR_SIZEOF(BEGIN_PRIV_KEY_PREFIX),
                                (unsigned int)((char*)buff + sz - beginEnd));
                if (!footer) {
 8013b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d10c      	bne.n	8013b7a <PemToDer+0x25a>
                    WOLFSSL_MSG("Couldn't find PEM footer");
                    WOLFSSL_ERROR(ASN_NO_PEM_HEADER);
 8013b60:	2300      	movs	r3, #0
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	4b60      	ldr	r3, [pc, #384]	; (8013ce8 <PemToDer+0x3c8>)
 8013b66:	f645 22fb 	movw	r2, #23291	; 0x5afb
 8013b6a:	4960      	ldr	r1, [pc, #384]	; (8013cec <PemToDer+0x3cc>)
 8013b6c:	f06f 00a1 	mvn.w	r0, #161	; 0xa1
 8013b70:	f004 ffc6 	bl	8018b00 <WOLFSSL_ERROR_LINE>
                    return ASN_NO_PEM_HEADER;
 8013b74:	f06f 03a1 	mvn.w	r3, #161	; 0xa1
 8013b78:	e253      	b.n	8014022 <PemToDer+0x702>
                }

                footer -= XSTR_SIZEOF(END_PRIV_KEY_PREFIX);
 8013b7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b7e:	3b08      	subs	r3, #8
 8013b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                if (footer > (char*)buff + sz - XSTR_SIZEOF(END_PRIV_KEY_PREFIX)
 8013b84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013b88:	3b08      	subs	r3, #8
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	441a      	add	r2, r3
 8013b8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d309      	bcc.n	8013baa <PemToDer+0x28a>
                        || XSTRNCMP(footer, END_PRIV_KEY_PREFIX,
 8013b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b9a:	2208      	movs	r2, #8
 8013b9c:	4954      	ldr	r1, [pc, #336]	; (8013cf0 <PemToDer+0x3d0>)
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f00d fd82 	bl	80216a8 <strncmp>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d002      	beq.n	8013bb0 <PemToDer+0x290>
                            XSTR_SIZEOF(END_PRIV_KEY_PREFIX)) != 0) {
                    WOLFSSL_MSG("Unexpected footer for PEM");
                    return BUFFER_E;
 8013baa:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013bae:	e238      	b.n	8014022 <PemToDer+0x702>
                }

                endLen = (unsigned int)(beginEnd - headerEnd -
 8013bb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013bb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013bb8:	1ad3      	subs	r3, r2, r3
 8013bba:	3b02      	subs	r3, #2
 8013bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                            (XSTR_SIZEOF(BEGIN_PRIV_KEY_PREFIX) -
                                    XSTR_SIZEOF(END_PRIV_KEY_PREFIX)));
                XMEMCPY(endBuf, footer, endLen);
 8013bc0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8013bc4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013bc8:	f107 0314 	add.w	r3, r7, #20
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f00d fb89 	bl	80212e4 <memcpy>
                endBuf[endLen] = '\0';
 8013bd2:	f107 0214 	add.w	r2, r7, #20
 8013bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013bda:	4413      	add	r3, r2
 8013bdc:	2200      	movs	r2, #0
 8013bde:	701a      	strb	r2, [r3, #0]

                header = beginBuf;
 8013be0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013be4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                footer = endBuf;
 8013be8:	f107 0314 	add.w	r3, r7, #20
 8013bec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                headerEnd = beginEnd;
 8013bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            }
        }

        if (!headerEnd) {
 8013bf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d117      	bne.n	8013c30 <PemToDer+0x310>
            WOLFSSL_MSG("Couldn't find PEM header");
            WOLFSSL_ERROR(ASN_NO_PEM_HEADER);
 8013c00:	2300      	movs	r3, #0
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	4b38      	ldr	r3, [pc, #224]	; (8013ce8 <PemToDer+0x3c8>)
 8013c06:	f645 3215 	movw	r2, #23317	; 0x5b15
 8013c0a:	4938      	ldr	r1, [pc, #224]	; (8013cec <PemToDer+0x3cc>)
 8013c0c:	f06f 00a1 	mvn.w	r0, #161	; 0xa1
 8013c10:	f004 ff76 	bl	8018b00 <WOLFSSL_ERROR_LINE>
            return ASN_NO_PEM_HEADER;
 8013c14:	f06f 03a1 	mvn.w	r3, #161	; 0xa1
 8013c18:	e203      	b.n	8014022 <PemToDer+0x702>
#else
        WOLFSSL_MSG("Couldn't find PEM header");
        return ASN_NO_PEM_HEADER;
#endif
    } else {
        headerEnd += XSTRLEN(header);
 8013c1a:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8013c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7ec faee 	bl	8000204 <strlen>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	4423      	add	r3, r4
 8013c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    }

    /* eat end of line characters */
    headerEnd = SkipEndOfLineChars(headerEnd, bufferEnd);
 8013c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013c34:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ff fbec 	bl	8013416 <SkipEndOfLineChars>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    if (keyFormat) {
 8013c44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d016      	beq.n	8013c7a <PemToDer+0x35a>
        /* keyFormat is Key_Sum enum */
        if (type == PRIVATEKEY_TYPE) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b01      	cmp	r3, #1
 8013c50:	d113      	bne.n	8013c7a <PemToDer+0x35a>
        #ifndef NO_RSA
            if (header == BEGIN_RSA_PRIV)
 8013c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c56:	4a16      	ldr	r2, [pc, #88]	; (8013cb0 <PemToDer+0x390>)
 8013c58:	4293      	cmp	r3, r2
 8013c5a:	d104      	bne.n	8013c66 <PemToDer+0x346>
                *keyFormat = RSAk;
 8013c5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013c60:	f240 2285 	movw	r2, #645	; 0x285
 8013c64:	601a      	str	r2, [r3, #0]
        #endif
        #ifdef HAVE_ECC
            if (header == BEGIN_EC_PRIV)
 8013c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c6a:	4a16      	ldr	r2, [pc, #88]	; (8013cc4 <PemToDer+0x3a4>)
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	d104      	bne.n	8013c7a <PemToDer+0x35a>
                *keyFormat = ECDSAk;
 8013c70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013c74:	f240 2206 	movw	r2, #518	; 0x206
 8013c78:	601a      	str	r2, [r3, #0]
        }
    #endif
    }

#ifdef WOLFSSL_ENCRYPTED_KEYS
    if (info) {
 8013c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d044      	beq.n	8013d0c <PemToDer+0x3ec>
        ret = wc_EncryptedInfoParse(info, &headerEnd, bufferEnd - headerEnd);
 8013c82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013c86:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013c92:	4619      	mov	r1, r3
 8013c94:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8013c98:	f7ff fd16 	bl	80136c8 <wc_EncryptedInfoParse>
 8013c9c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (ret < 0)
 8013ca0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	da25      	bge.n	8013cf4 <PemToDer+0x3d4>
            return ret;
 8013ca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013cac:	e1b9      	b.n	8014022 <PemToDer+0x702>
 8013cae:	bf00      	nop
 8013cb0:	08029018 	.word	0x08029018
 8013cb4:	08029098 	.word	0x08029098
 8013cb8:	080290b4 	.word	0x080290b4
 8013cbc:	080290d0 	.word	0x080290d0
 8013cc0:	080290f8 	.word	0x080290f8
 8013cc4:	0802911c 	.word	0x0802911c
 8013cc8:	0802913c 	.word	0x0802913c
 8013ccc:	0802915c 	.word	0x0802915c
 8013cd0:	0802917c 	.word	0x0802917c
 8013cd4:	0802919c 	.word	0x0802919c
 8013cd8:	08029058 	.word	0x08029058
 8013cdc:	08029078 	.word	0x08029078
 8013ce0:	0802be60 	.word	0x0802be60
 8013ce4:	0802be54 	.word	0x0802be54
 8013ce8:	08029234 	.word	0x08029234
 8013cec:	0802be80 	.word	0x0802be80
 8013cf0:	0802be74 	.word	0x0802be74
        if (info->set)
 8013cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013cf8:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8013cfc:	f003 0301 	and.w	r3, r3, #1
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d002      	beq.n	8013d0c <PemToDer+0x3ec>
            encrypted_key = 1;
 8013d06:	2301      	movs	r3, #1
 8013d08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    }
#endif /* WOLFSSL_ENCRYPTED_KEYS */

    /* find footer */
    footerEnd = XSTRNSTR(headerEnd, footer, (unsigned int)((char*)buff +
 8013d0c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8013d10:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8013d14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	441a      	add	r2, r3
 8013d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013d20:	1ad3      	subs	r3, r2, r3
 8013d22:	461a      	mov	r2, r3
 8013d24:	f00d f912 	bl	8020f4c <mystrnstr>
 8013d28:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        sz - headerEnd));
    if (!footerEnd) {
 8013d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d10a      	bne.n	8013d4a <PemToDer+0x42a>
        if (info)
 8013d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d003      	beq.n	8013d44 <PemToDer+0x424>
            info->consumed = longSz; /* No more certs if no footer */
 8013d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013d40:	68ba      	ldr	r2, [r7, #8]
 8013d42:	601a      	str	r2, [r3, #0]
        return BUFFER_E;
 8013d44:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013d48:	e16b      	b.n	8014022 <PemToDer+0x702>
    }

    consumedEnd = footerEnd + XSTRLEN(footer);
 8013d4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7ec fa58 	bl	8000204 <strlen>
 8013d54:	4602      	mov	r2, r0
 8013d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013d5a:	4413      	add	r3, r2
 8013d5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if (consumedEnd < bufferEnd) { /* handle no end of line on last line */
 8013d60:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8013d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d217      	bcs.n	8013d9c <PemToDer+0x47c>
        /* eat end of line characters */
        consumedEnd = SkipEndOfLineChars(consumedEnd, bufferEnd);
 8013d6c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8013d70:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8013d74:	f7ff fb4f 	bl	8013416 <SkipEndOfLineChars>
 8013d78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
        /* skip possible null term */
        if (consumedEnd < bufferEnd && consumedEnd[0] == '\0')
 8013d7c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8013d80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d209      	bcs.n	8013d9c <PemToDer+0x47c>
 8013d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d104      	bne.n	8013d9c <PemToDer+0x47c>
            consumedEnd++;
 8013d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013d96:	3301      	adds	r3, #1
 8013d98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }

    if (info)
 8013d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d006      	beq.n	8013db2 <PemToDer+0x492>
        info->consumed = (long)(consumedEnd - (const char*)buff);
 8013da4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	1ad2      	subs	r2, r2, r3
 8013dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013db0:	601a      	str	r2, [r3, #0]

    /* set up der buffer */
    neededSz = (long)(footerEnd - headerEnd);
 8013db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013db6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013dba:	1ad3      	subs	r3, r2, r3
 8013dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (neededSz > sz || neededSz <= 0)
 8013dc0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8013dc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	dc03      	bgt.n	8013dd4 <PemToDer+0x4b4>
 8013dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	dc02      	bgt.n	8013dda <PemToDer+0x4ba>
        return BUFFER_E;
 8013dd4:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013dd8:	e123      	b.n	8014022 <PemToDer+0x702>

    ret = AllocDer(pDer, (word32)neededSz, type, heap);
 8013dda:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8013dde:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8013de2:	f5a3 7080 	sub.w	r0, r3, #256	; 0x100
 8013de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	6800      	ldr	r0, [r0, #0]
 8013dee:	f7ff fa69 	bl	80132c4 <AllocDer>
 8013df2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (ret < 0) {
 8013df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	da02      	bge.n	8013e04 <PemToDer+0x4e4>
        return ret;
 8013dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013e02:	e10e      	b.n	8014022 <PemToDer+0x702>
    }
    der = *pDer;
 8013e04:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8013e08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    if (Base64_Decode((byte*)headerEnd, (word32)neededSz,
 8013e14:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8013e18:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8013e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e26:	3308      	adds	r3, #8
 8013e28:	f000 fca0 	bl	801476c <Base64_Decode>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	da0c      	bge.n	8013e4c <PemToDer+0x52c>
                      der->buffer, &der->length) < 0) {
        WOLFSSL_ERROR(BUFFER_E);
 8013e32:	2300      	movs	r3, #0
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	4b7d      	ldr	r3, [pc, #500]	; (801402c <PemToDer+0x70c>)
 8013e38:	f645 326a 	movw	r2, #23402	; 0x5b6a
 8013e3c:	497c      	ldr	r1, [pc, #496]	; (8014030 <PemToDer+0x710>)
 8013e3e:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8013e42:	f004 fe5d 	bl	8018b00 <WOLFSSL_ERROR_LINE>
        return BUFFER_E;
 8013e46:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013e4a:	e0ea      	b.n	8014022 <PemToDer+0x702>
    }

    if ((header == BEGIN_PRIV_KEY
 8013e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013e50:	4a78      	ldr	r2, [pc, #480]	; (8014034 <PemToDer+0x714>)
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d00a      	beq.n	8013e6c <PemToDer+0x54c>
#ifdef OPENSSL_EXTRA
         || header == beginBuf
 8013e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013e5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d004      	beq.n	8013e6c <PemToDer+0x54c>
#endif
#ifdef HAVE_ECC
         || header == BEGIN_EC_PRIV
 8013e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013e66:	4a74      	ldr	r2, [pc, #464]	; (8014038 <PemToDer+0x718>)
 8013e68:	4293      	cmp	r3, r2
 8013e6a:	d124      	bne.n	8013eb6 <PemToDer+0x596>
#endif
        ) && !encrypted_key)
 8013e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d120      	bne.n	8013eb6 <PemToDer+0x596>
    {
        /* detect pkcs8 key and get alg type */
        /* keep PKCS8 header */
        idx = 0;
 8013e74:	2300      	movs	r3, #0
 8013e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        ret = ToTraditionalInline_ex(der->buffer, &idx, der->length, &algId);
 8013e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e7e:	6818      	ldr	r0, [r3, #0]
 8013e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e84:	689a      	ldr	r2, [r3, #8]
 8013e86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013e8a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8013e8e:	f7fa fe39 	bl	800eb04 <ToTraditionalInline_ex>
 8013e92:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (ret > 0) {
 8013e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	dd09      	ble.n	8013eb2 <PemToDer+0x592>
            if (keyFormat)
 8013e9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d005      	beq.n	8013eb2 <PemToDer+0x592>
                *keyFormat = algId;
 8013ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013eaa:	461a      	mov	r2, r3
 8013eac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013eb0:	601a      	str	r2, [r3, #0]
        }
        else {
            /* ignore failure here and assume key is not pkcs8 wrapped */
        }
        return 0;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	e0b5      	b.n	8014022 <PemToDer+0x702>
    }

#ifdef WOLFSSL_ENCRYPTED_KEYS
    if (encrypted_key || header == BEGIN_ENC_PRIV_KEY) {
 8013eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d105      	bne.n	8013eca <PemToDer+0x5aa>
 8013ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013ec2:	4a5e      	ldr	r2, [pc, #376]	; (801403c <PemToDer+0x71c>)
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	f040 80aa 	bne.w	801401e <PemToDer+0x6fe>
        int   passwordSz = NAME_SZ;
 8013eca:	23a0      	movs	r3, #160	; 0xa0
 8013ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    #ifdef WOLFSSL_SMALL_STACK
        char* password = NULL;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    #else
        char  password[NAME_SZ];
    #endif

        if (!info || !info->passwd_cb) {
 8013ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d004      	beq.n	8013ee8 <PemToDer+0x5c8>
 8013ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d102      	bne.n	8013eee <PemToDer+0x5ce>
            WOLFSSL_MSG("No password callback set");
            WOLFSSL_ERROR_VERBOSE(NO_PASSWORD);
            return NO_PASSWORD;
 8013ee8:	f06f 03af 	mvn.w	r3, #175	; 0xaf
 8013eec:	e099      	b.n	8014022 <PemToDer+0x702>
        }

    #ifdef WOLFSSL_SMALL_STACK
        password = (char*)XMALLOC(passwordSz, heap, DYNAMIC_TYPE_STRING);
 8013eee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f004 fe5a 	bl	8018bac <wolfSSL_Malloc>
 8013ef8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (password == NULL) {
 8013efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d102      	bne.n	8013f0a <PemToDer+0x5ea>
            return MEMORY_E;
 8013f04:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8013f08:	e08b      	b.n	8014022 <PemToDer+0x702>
        }
    #endif

        /* get password */
        ret = info->passwd_cb(password, passwordSz, PEM_PASS_READ,
 8013f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013f0e:	685c      	ldr	r4, [r3, #4]
 8013f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013f14:	689b      	ldr	r3, [r3, #8]
 8013f16:	2200      	movs	r2, #0
 8013f18:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8013f1c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8013f20:	47a0      	blx	r4
 8013f22:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            info->passwd_userdata);
        if (ret >= 0) {
 8013f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	db61      	blt.n	8013ff2 <PemToDer+0x6d2>
            passwordSz = ret;
 8013f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013f32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        #ifdef WOLFSSL_CHECK_MEM_ZERO
            wc_MemZero_Add("PEM password", password, passwordSz);
        #endif

            /* convert and adjust length */
            if (header == BEGIN_ENC_PRIV_KEY) {
 8013f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013f3a:	4a40      	ldr	r2, [pc, #256]	; (801403c <PemToDer+0x71c>)
 8013f3c:	4293      	cmp	r3, r2
 8013f3e:	d104      	bne.n	8013f4a <PemToDer+0x62a>
                        ret = 0;
                    }
                }
            #else
                WOLFSSL_ERROR_VERBOSE(NOT_COMPILED_IN);
                ret = NOT_COMPILED_IN;
 8013f40:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 8013f44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013f48:	e03d      	b.n	8013fc6 <PemToDer+0x6a6>
            #endif
            }
            /* decrypt the key */
            else {
                if (passwordSz == 0) {
 8013f4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d104      	bne.n	8013f5c <PemToDer+0x63c>
                    /* The key is encrypted but does not have a password */
                    WOLFSSL_MSG("No password for encrypted key");
                    WOLFSSL_ERROR_VERBOSE(NO_PASSWORD);
                    ret = NO_PASSWORD;
 8013f52:	f06f 03af 	mvn.w	r3, #175	; 0xaf
 8013f56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013f5a:	e034      	b.n	8013fc6 <PemToDer+0x6a6>
                }
                else {
                    ret = wc_BufferKeyDecrypt(info, der->buffer, der->length,
 8013f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f60:	6819      	ldr	r1, [r3, #0]
 8013f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f66:	689a      	ldr	r2, [r3, #8]
 8013f68:	2303      	movs	r3, #3
 8013f6a:	9301      	str	r3, [sp, #4]
 8013f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013f70:	9300      	str	r3, [sp, #0]
 8013f72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013f76:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8013f7a:	f00c fec0 	bl	8020cfe <wc_BufferKeyDecrypt>
 8013f7e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                        }
                    }
                #endif /* !NO_DES3 */
                #if !defined(NO_AES) && defined(HAVE_AES_CBC) && \
                    defined(HAVE_AES_DECRYPT)
                    if (info->cipherType == WC_CIPHER_AES_CBC) {
 8013f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	2b02      	cmp	r3, #2
 8013f8a:	d11c      	bne.n	8013fc6 <PemToDer+0x6a6>
                        if (der->length > AES_BLOCK_SIZE) {
 8013f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f90:	689b      	ldr	r3, [r3, #8]
 8013f92:	2b10      	cmp	r3, #16
 8013f94:	d917      	bls.n	8013fc6 <PemToDer+0x6a6>
                            padVal = der->buffer[der->length-1];
 8013f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f9a:	681a      	ldr	r2, [r3, #0]
 8013f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013fa0:	689b      	ldr	r3, [r3, #8]
 8013fa2:	3b01      	subs	r3, #1
 8013fa4:	4413      	add	r3, r2
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                            if (padVal <= AES_BLOCK_SIZE) {
 8013fac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013fb0:	2b10      	cmp	r3, #16
 8013fb2:	dc08      	bgt.n	8013fc6 <PemToDer+0x6a6>
                                der->length -= padVal;
 8013fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013fb8:	689a      	ldr	r2, [r3, #8]
 8013fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013fbe:	1ad2      	subs	r2, r2, r3
 8013fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013fc4:	609a      	str	r2, [r3, #8]
                #endif
#endif /* !NO_WOLFSSL_SKIP_TRAILING_PAD */
                }
            }
#ifdef OPENSSL_EXTRA
            if (ret) {
 8013fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d009      	beq.n	8013fe2 <PemToDer+0x6c2>
                PEMerr(0, PEM_R_BAD_DECRYPT);
 8013fce:	f645 33ee 	movw	r3, #23534	; 0x5bee
 8013fd2:	9300      	str	r3, [sp, #0]
 8013fd4:	4b15      	ldr	r3, [pc, #84]	; (801402c <PemToDer+0x70c>)
 8013fd6:	f44f 7298 	mov.w	r2, #304	; 0x130
 8013fda:	2100      	movs	r1, #0
 8013fdc:	2009      	movs	r0, #9
 8013fde:	f7f4 fdad 	bl	8008b3c <wolfSSL_ERR_put_error>
            }
#endif
            ForceZero(password, passwordSz);
 8013fe2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8013fec:	f7f9 fa6c 	bl	800d4c8 <ForceZero>
 8013ff0:	e009      	b.n	8014006 <PemToDer+0x6e6>
        }
#ifdef OPENSSL_EXTRA
        else {
            PEMerr(0, PEM_R_BAD_PASSWORD_READ);
 8013ff2:	f645 33f5 	movw	r3, #23541	; 0x5bf5
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	4b0c      	ldr	r3, [pc, #48]	; (801402c <PemToDer+0x70c>)
 8013ffa:	f240 122f 	movw	r2, #303	; 0x12f
 8013ffe:	2100      	movs	r1, #0
 8014000:	2009      	movs	r0, #9
 8014002:	f7f4 fd9b 	bl	8008b3c <wolfSSL_ERR_put_error>
        }
#endif

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(password, heap, DYNAMIC_TYPE_STRING);
 8014006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801400a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801400e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014012:	2b00      	cmp	r3, #0
 8014014:	d003      	beq.n	801401e <PemToDer+0x6fe>
 8014016:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801401a:	f004 fde3 	bl	8018be4 <wolfSSL_Free>
        wc_MemZero_Check(password, NAME_SZ);
    #endif
    }
#endif /* WOLFSSL_ENCRYPTED_KEYS */

    return ret;
 801401e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
}
 8014022:	4618      	mov	r0, r3
 8014024:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8014028:	46bd      	mov	sp, r7
 801402a:	bd90      	pop	{r4, r7, pc}
 801402c:	08029234 	.word	0x08029234
 8014030:	0802be80 	.word	0x0802be80
 8014034:	08029098 	.word	0x08029098
 8014038:	0802911c 	.word	0x0802911c
 801403c:	080290d0 	.word	0x080290d0

08014040 <DecodeECC_DSA_Sig>:
                        sigLen);
#endif /* WOLFSSL_ASN_TEMPLATE */
}

int DecodeECC_DSA_Sig(const byte* sig, word32 sigLen, mp_int* r, mp_int* s)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b086      	sub	sp, #24
 8014044:	af00      	add	r7, sp, #0
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	607a      	str	r2, [r7, #4]
 801404c:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 801404e:	2300      	movs	r3, #0
 8014050:	617b      	str	r3, [r7, #20]
    int    len = 0;
 8014052:	2300      	movs	r3, #0
 8014054:	613b      	str	r3, [r7, #16]

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 8014056:	f107 0210 	add.w	r2, r7, #16
 801405a:	f107 0114 	add.w	r1, r7, #20
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	68f8      	ldr	r0, [r7, #12]
 8014062:	f7f9 fbdf 	bl	800d824 <GetSequence>
 8014066:	4603      	mov	r3, r0
 8014068:	2b00      	cmp	r3, #0
 801406a:	da02      	bge.n	8014072 <DecodeECC_DSA_Sig+0x32>
        return ASN_ECC_KEY_E;
 801406c:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 8014070:	e033      	b.n	80140da <DecodeECC_DSA_Sig+0x9a>
    }

#ifndef NO_STRICT_ECDSA_LEN
    /* enable strict length checking for signature */
    if (sigLen != idx + (word32)len) {
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	693a      	ldr	r2, [r7, #16]
 8014076:	4413      	add	r3, r2
 8014078:	68ba      	ldr	r2, [r7, #8]
 801407a:	429a      	cmp	r2, r3
 801407c:	d002      	beq.n	8014084 <DecodeECC_DSA_Sig+0x44>
        return ASN_ECC_KEY_E;
 801407e:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 8014082:	e02a      	b.n	80140da <DecodeECC_DSA_Sig+0x9a>
    if ((word32)len > (sigLen - idx)) {
        return ASN_ECC_KEY_E;
    }
#endif

    if (GetIntPositive(r, sig, &idx, sigLen) < 0) {
 8014084:	f107 0214 	add.w	r2, r7, #20
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	68f9      	ldr	r1, [r7, #12]
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f7f9 fe6e 	bl	800dd6e <GetIntPositive>
 8014092:	4603      	mov	r3, r0
 8014094:	2b00      	cmp	r3, #0
 8014096:	da02      	bge.n	801409e <DecodeECC_DSA_Sig+0x5e>
        return ASN_ECC_KEY_E;
 8014098:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 801409c:	e01d      	b.n	80140da <DecodeECC_DSA_Sig+0x9a>
    }

    if (GetIntPositive(s, sig, &idx, sigLen) < 0) {
 801409e:	f107 0214 	add.w	r2, r7, #20
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	68f9      	ldr	r1, [r7, #12]
 80140a6:	6838      	ldr	r0, [r7, #0]
 80140a8:	f7f9 fe61 	bl	800dd6e <GetIntPositive>
 80140ac:	4603      	mov	r3, r0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	da05      	bge.n	80140be <DecodeECC_DSA_Sig+0x7e>
        mp_clear(r);
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f00c f962 	bl	802037c <mp_clear>
        return ASN_ECC_KEY_E;
 80140b8:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 80140bc:	e00d      	b.n	80140da <DecodeECC_DSA_Sig+0x9a>
    }

#ifndef NO_STRICT_ECDSA_LEN
    /* sanity check that the index has been advanced all the way to the end of
     * the buffer */
    if (idx != sigLen) {
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	68ba      	ldr	r2, [r7, #8]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d008      	beq.n	80140d8 <DecodeECC_DSA_Sig+0x98>
        mp_clear(r);
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f00c f958 	bl	802037c <mp_clear>
        mp_clear(s);
 80140cc:	6838      	ldr	r0, [r7, #0]
 80140ce:	f00c f955 	bl	802037c <mp_clear>
        return ASN_ECC_KEY_E;
 80140d2:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 80140d6:	e000      	b.n	80140da <DecodeECC_DSA_Sig+0x9a>
    }
#endif

    return 0;
 80140d8:	2300      	movs	r3, #0
    }

#endif
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3718      	adds	r7, #24
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}

080140e2 <wc_EccPrivateKeyDecode>:
#endif

WOLFSSL_ABI
int wc_EccPrivateKeyDecode(const byte* input, word32* inOutIdx, ecc_key* key,
                        word32 inSz)
{
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b094      	sub	sp, #80	; 0x50
 80140e6:	af02      	add	r7, sp, #8
 80140e8:	60f8      	str	r0, [r7, #12]
 80140ea:	60b9      	str	r1, [r7, #8]
 80140ec:	607a      	str	r2, [r7, #4]
 80140ee:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 oidSum;
    int    version, length;
    int    privSz, pubSz = 0;
 80140f0:	2300      	movs	r3, #0
 80140f2:	647b      	str	r3, [r7, #68]	; 0x44
    byte   b;
    int    ret = 0;
 80140f4:	2300      	movs	r3, #0
 80140f6:	643b      	str	r3, [r7, #64]	; 0x40
    int    curve_id = ECC_CURVE_DEF;
 80140f8:	2300      	movs	r3, #0
 80140fa:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef WOLFSSL_SMALL_STACK
    byte* priv;
    byte* pub = NULL;
 80140fc:	2300      	movs	r3, #0
 80140fe:	63bb      	str	r3, [r7, #56]	; 0x38
#else
    byte priv[ECC_MAXSIZE+1];
    byte pub[2*(ECC_MAXSIZE+1)]; /* public key has two parts plus header */
#endif
    word32 algId = 0;
 8014100:	2300      	movs	r3, #0
 8014102:	613b      	str	r3, [r7, #16]
    byte* pubData = NULL;
 8014104:	2300      	movs	r3, #0
 8014106:	637b      	str	r3, [r7, #52]	; 0x34

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d008      	beq.n	8014120 <wc_EccPrivateKeyDecode+0x3e>
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d005      	beq.n	8014120 <wc_EccPrivateKeyDecode+0x3e>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d002      	beq.n	8014120 <wc_EccPrivateKeyDecode+0x3e>
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d102      	bne.n	8014126 <wc_EccPrivateKeyDecode+0x44>
        return BAD_FUNC_ARG;
 8014120:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8014124:	e133      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>

    /* if has pkcs8 header skip it */
    if (ToTraditionalInline_ex(input, inOutIdx, inSz, &algId) < 0) {
 8014126:	f107 0310 	add.w	r3, r7, #16
 801412a:	683a      	ldr	r2, [r7, #0]
 801412c:	68b9      	ldr	r1, [r7, #8]
 801412e:	68f8      	ldr	r0, [r7, #12]
 8014130:	f7fa fce8 	bl	800eb04 <ToTraditionalInline_ex>
        /* ignore error, did not have pkcs8 header */
    }

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 8014134:	f107 0214 	add.w	r2, r7, #20
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	68b9      	ldr	r1, [r7, #8]
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	f7f9 fb71 	bl	800d824 <GetSequence>
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	da02      	bge.n	801414e <wc_EccPrivateKeyDecode+0x6c>
        return ASN_PARSE_E;
 8014148:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801414c:	e11f      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 801414e:	f107 0218 	add.w	r2, r7, #24
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	68b9      	ldr	r1, [r7, #8]
 8014156:	68f8      	ldr	r0, [r7, #12]
 8014158:	f7f9 fd4a 	bl	800dbf0 <GetMyVersion>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	da02      	bge.n	8014168 <wc_EccPrivateKeyDecode+0x86>
        return ASN_PARSE_E;
 8014162:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8014166:	e112      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>

    if (*inOutIdx >= inSz)
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	683a      	ldr	r2, [r7, #0]
 801416e:	429a      	cmp	r2, r3
 8014170:	d802      	bhi.n	8014178 <wc_EccPrivateKeyDecode+0x96>
        return ASN_PARSE_E;
 8014172:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8014176:	e10a      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>

    b = input[*inOutIdx];
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	68fa      	ldr	r2, [r7, #12]
 801417e:	4413      	add	r3, r2
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    *inOutIdx += 1;
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	1c5a      	adds	r2, r3, #1
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	601a      	str	r2, [r3, #0]

    /* priv type */
    if (b != 4 && b != 6 && b != 7)
 8014190:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014194:	2b04      	cmp	r3, #4
 8014196:	d00a      	beq.n	80141ae <wc_EccPrivateKeyDecode+0xcc>
 8014198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801419c:	2b06      	cmp	r3, #6
 801419e:	d006      	beq.n	80141ae <wc_EccPrivateKeyDecode+0xcc>
 80141a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80141a4:	2b07      	cmp	r3, #7
 80141a6:	d002      	beq.n	80141ae <wc_EccPrivateKeyDecode+0xcc>
        return ASN_PARSE_E;
 80141a8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80141ac:	e0ef      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>

    if (GetLength(input, inOutIdx, &length, inSz) < 0)
 80141ae:	f107 0214 	add.w	r2, r7, #20
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	68b9      	ldr	r1, [r7, #8]
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	f7f9 f9cd 	bl	800d556 <GetLength>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	da02      	bge.n	80141c8 <wc_EccPrivateKeyDecode+0xe6>
        return ASN_PARSE_E;
 80141c2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80141c6:	e0e2      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>
    privSz = length;
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (privSz > ECC_MAXSIZE)
 80141cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ce:	2b42      	cmp	r3, #66	; 0x42
 80141d0:	dd02      	ble.n	80141d8 <wc_EccPrivateKeyDecode+0xf6>
        return BUFFER_E;
 80141d2:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80141d6:	e0da      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>

#ifdef WOLFSSL_SMALL_STACK
    priv = (byte*)XMALLOC(privSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80141d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141da:	4618      	mov	r0, r3
 80141dc:	f004 fce6 	bl	8018bac <wolfSSL_Malloc>
 80141e0:	62b8      	str	r0, [r7, #40]	; 0x28
    if (priv == NULL)
 80141e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d102      	bne.n	80141ee <wc_EccPrivateKeyDecode+0x10c>
        return MEMORY_E;
 80141e8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80141ec:	e0cf      	b.n	801438e <wc_EccPrivateKeyDecode+0x2ac>
#endif

    /* priv key */
    XMEMCPY(priv, &input[*inOutIdx], privSz);
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	4413      	add	r3, r2
 80141f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141f8:	4619      	mov	r1, r3
 80141fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141fc:	f00d f872 	bl	80212e4 <memcpy>
    *inOutIdx += length;
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	697a      	ldr	r2, [r7, #20]
 8014206:	441a      	add	r2, r3
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	601a      	str	r2, [r3, #0]

    if ((*inOutIdx + 1) < inSz) {
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	3301      	adds	r3, #1
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	429a      	cmp	r2, r3
 8014216:	d93a      	bls.n	801428e <wc_EccPrivateKeyDecode+0x1ac>
        /* prefix 0, may have */
        b = input[*inOutIdx];
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	68fa      	ldr	r2, [r7, #12]
 801421e:	4413      	add	r3, r2
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (b == ECC_PREFIX_0) {
 8014226:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801422a:	2ba0      	cmp	r3, #160	; 0xa0
 801422c:	d12f      	bne.n	801428e <wc_EccPrivateKeyDecode+0x1ac>
            *inOutIdx += 1;
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	1c5a      	adds	r2, r3, #1
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	601a      	str	r2, [r3, #0]

            if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 8014238:	f107 0214 	add.w	r2, r7, #20
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	68b9      	ldr	r1, [r7, #8]
 8014240:	68f8      	ldr	r0, [r7, #12]
 8014242:	f7f9 f988 	bl	800d556 <GetLength>
 8014246:	4603      	mov	r3, r0
 8014248:	2b00      	cmp	r3, #0
 801424a:	dc03      	bgt.n	8014254 <wc_EccPrivateKeyDecode+0x172>
                ret = ASN_PARSE_E;
 801424c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8014250:	643b      	str	r3, [r7, #64]	; 0x40
 8014252:	e01c      	b.n	801428e <wc_EccPrivateKeyDecode+0x1ac>
            else {
                ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType,
 8014254:	f107 021c 	add.w	r2, r7, #28
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	2315      	movs	r3, #21
 801425e:	68b9      	ldr	r1, [r7, #8]
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f7fa f997 	bl	800e594 <GetObjectId>
 8014266:	6438      	str	r0, [r7, #64]	; 0x40
                                  inSz);
                if (ret == 0) {
 8014268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801426a:	2b00      	cmp	r3, #0
 801426c:	d10f      	bne.n	801428e <wc_EccPrivateKeyDecode+0x1ac>
                    if ((ret = CheckCurve(oidSum)) < 0)
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	4618      	mov	r0, r3
 8014272:	f7fa f8e1 	bl	800e438 <CheckCurve>
 8014276:	6438      	str	r0, [r7, #64]	; 0x40
 8014278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801427a:	2b00      	cmp	r3, #0
 801427c:	da03      	bge.n	8014286 <wc_EccPrivateKeyDecode+0x1a4>
                        ret = ECC_CURVE_OID_E;
 801427e:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 8014282:	643b      	str	r3, [r7, #64]	; 0x40
 8014284:	e003      	b.n	801428e <wc_EccPrivateKeyDecode+0x1ac>
                    else {
                        curve_id = ret;
 8014286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014288:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ret = 0;
 801428a:	2300      	movs	r3, #0
 801428c:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }
        }
    }

    if (ret == 0 && (*inOutIdx + 1) < inSz) {
 801428e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014290:	2b00      	cmp	r3, #0
 8014292:	d15c      	bne.n	801434e <wc_EccPrivateKeyDecode+0x26c>
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	3301      	adds	r3, #1
 801429a:	683a      	ldr	r2, [r7, #0]
 801429c:	429a      	cmp	r2, r3
 801429e:	d956      	bls.n	801434e <wc_EccPrivateKeyDecode+0x26c>
        /* prefix 1 */
        b = input[*inOutIdx];
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	68fa      	ldr	r2, [r7, #12]
 80142a6:	4413      	add	r3, r2
 80142a8:	781b      	ldrb	r3, [r3, #0]
 80142aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        *inOutIdx += 1;
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	1c5a      	adds	r2, r3, #1
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	601a      	str	r2, [r3, #0]

        if (b != ECC_PREFIX_1) {
 80142b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80142bc:	2ba1      	cmp	r3, #161	; 0xa1
 80142be:	d003      	beq.n	80142c8 <wc_EccPrivateKeyDecode+0x1e6>
            ret = ASN_ECC_KEY_E;
 80142c0:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 80142c4:	643b      	str	r3, [r7, #64]	; 0x40
 80142c6:	e042      	b.n	801434e <wc_EccPrivateKeyDecode+0x26c>
        }
        else if (GetLength(input, inOutIdx, &length, inSz) <= 0) {
 80142c8:	f107 0214 	add.w	r2, r7, #20
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	68b9      	ldr	r1, [r7, #8]
 80142d0:	68f8      	ldr	r0, [r7, #12]
 80142d2:	f7f9 f940 	bl	800d556 <GetLength>
 80142d6:	4603      	mov	r3, r0
 80142d8:	2b00      	cmp	r3, #0
 80142da:	dc03      	bgt.n	80142e4 <wc_EccPrivateKeyDecode+0x202>
            ret = ASN_PARSE_E;
 80142dc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80142e0:	643b      	str	r3, [r7, #64]	; 0x40
 80142e2:	e034      	b.n	801434e <wc_EccPrivateKeyDecode+0x26c>
        }
        else {
            /* key header */
            ret = CheckBitString(input, inOutIdx, &length, inSz, 0, NULL);
 80142e4:	f107 0214 	add.w	r2, r7, #20
 80142e8:	2300      	movs	r3, #0
 80142ea:	9301      	str	r3, [sp, #4]
 80142ec:	2300      	movs	r3, #0
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	683b      	ldr	r3, [r7, #0]
 80142f2:	68b9      	ldr	r1, [r7, #8]
 80142f4:	68f8      	ldr	r0, [r7, #12]
 80142f6:	f7f9 fd87 	bl	800de08 <CheckBitString>
 80142fa:	6438      	str	r0, [r7, #64]	; 0x40
            if (ret == 0) {
 80142fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d125      	bne.n	801434e <wc_EccPrivateKeyDecode+0x26c>
                /* pub key */
                pubSz = length;
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	647b      	str	r3, [r7, #68]	; 0x44
                if (pubSz > 2*(ECC_MAXSIZE+1))
 8014306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014308:	2b86      	cmp	r3, #134	; 0x86
 801430a:	dd03      	ble.n	8014314 <wc_EccPrivateKeyDecode+0x232>
                    ret = BUFFER_E;
 801430c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8014310:	643b      	str	r3, [r7, #64]	; 0x40
 8014312:	e01c      	b.n	801434e <wc_EccPrivateKeyDecode+0x26c>
                else {
            #ifdef WOLFSSL_SMALL_STACK
                    pub = (byte*)XMALLOC(pubSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8014314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014316:	4618      	mov	r0, r3
 8014318:	f004 fc48 	bl	8018bac <wolfSSL_Malloc>
 801431c:	63b8      	str	r0, [r7, #56]	; 0x38
                    if (pub == NULL)
 801431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014320:	2b00      	cmp	r3, #0
 8014322:	d103      	bne.n	801432c <wc_EccPrivateKeyDecode+0x24a>
                        ret = MEMORY_E;
 8014324:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8014328:	643b      	str	r3, [r7, #64]	; 0x40
 801432a:	e010      	b.n	801434e <wc_EccPrivateKeyDecode+0x26c>
                    else
            #endif
                    {
                        XMEMCPY(pub, &input[*inOutIdx], pubSz);
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	68fa      	ldr	r2, [r7, #12]
 8014332:	4413      	add	r3, r2
 8014334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014336:	4619      	mov	r1, r3
 8014338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801433a:	f00c ffd3 	bl	80212e4 <memcpy>
                        *inOutIdx += length;
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	697a      	ldr	r2, [r7, #20]
 8014344:	441a      	add	r2, r3
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	601a      	str	r2, [r3, #0]
                        pubData = pub;
 801434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801434c:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }
        }
    }

    if (ret == 0) {
 801434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10b      	bne.n	801436c <wc_EccPrivateKeyDecode+0x28a>
        ret = wc_ecc_import_private_key_ex(priv, privSz, pubData, pubSz, key,
 8014354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801435a:	9301      	str	r3, [sp, #4]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	9300      	str	r3, [sp, #0]
 8014360:	4613      	mov	r3, r2
 8014362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014366:	f004 f81f 	bl	80183a8 <wc_ecc_import_private_key_ex>
 801436a:	6438      	str	r0, [r7, #64]	; 0x40
                                                                      curve_id);
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(priv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436e:	627b      	str	r3, [r7, #36]	; 0x24
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	2b00      	cmp	r3, #0
 8014374:	d002      	beq.n	801437c <wc_EccPrivateKeyDecode+0x29a>
 8014376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014378:	f004 fc34 	bl	8018be4 <wolfSSL_Free>
    XFREE(pub,  key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801437e:	623b      	str	r3, [r7, #32]
 8014380:	6a3b      	ldr	r3, [r7, #32]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d002      	beq.n	801438c <wc_EccPrivateKeyDecode+0x2aa>
 8014386:	6a38      	ldr	r0, [r7, #32]
 8014388:	f004 fc2c 	bl	8018be4 <wolfSSL_Free>
#endif

    return ret;
 801438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    }

    FREE_ASNGETDATA(dataASN, key->heap);
    return ret;
#endif
}
 801438e:	4618      	mov	r0, r3
 8014390:	3748      	adds	r7, #72	; 0x48
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}

08014396 <wc_EccPublicKeyDecode>:
#endif /* WOLFSSL_CUSTOM_CURVES */

WOLFSSL_ABI
int wc_EccPublicKeyDecode(const byte* input, word32* inOutIdx,
                          ecc_key* key, word32 inSz)
{
 8014396:	b580      	push	{r7, lr}
 8014398:	b08e      	sub	sp, #56	; 0x38
 801439a:	af02      	add	r7, sp, #8
 801439c:	60f8      	str	r0, [r7, #12]
 801439e:	60b9      	str	r1, [r7, #8]
 80143a0:	607a      	str	r2, [r7, #4]
 80143a2:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int    ret;
    int    version, length;
    int    curve_id = ECC_CURVE_DEF;
 80143a4:	2300      	movs	r3, #0
 80143a6:	62bb      	str	r3, [r7, #40]	; 0x28
    word32 oidSum, localIdx;
    byte   tag, isPrivFormat = 0;
 80143a8:	2300      	movs	r3, #0
 80143aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d008      	beq.n	80143c6 <wc_EccPublicKeyDecode+0x30>
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d005      	beq.n	80143c6 <wc_EccPublicKeyDecode+0x30>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d002      	beq.n	80143c6 <wc_EccPublicKeyDecode+0x30>
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d102      	bne.n	80143cc <wc_EccPublicKeyDecode+0x36>
        return BAD_FUNC_ARG;
 80143c6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80143ca:	e119      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 80143cc:	f107 021c 	add.w	r2, r7, #28
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	68b9      	ldr	r1, [r7, #8]
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f7f9 fa25 	bl	800d824 <GetSequence>
 80143da:	4603      	mov	r3, r0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	da02      	bge.n	80143e6 <wc_EccPublicKeyDecode+0x50>
        return ASN_PARSE_E;
 80143e0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80143e4:	e10c      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>

    /* Check if ECC private key is being used and skip private portion */
    if (GetMyVersion(input, inOutIdx, &version, inSz) >= 0) {
 80143e6:	f107 0220 	add.w	r2, r7, #32
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	68b9      	ldr	r1, [r7, #8]
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f7f9 fbfe 	bl	800dbf0 <GetMyVersion>
 80143f4:	4603      	mov	r3, r0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	db60      	blt.n	80144bc <wc_EccPublicKeyDecode+0x126>
        isPrivFormat = 1;
 80143fa:	2301      	movs	r3, #1
 80143fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        /* Type private key */
        if (*inOutIdx >= inSz)
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	683a      	ldr	r2, [r7, #0]
 8014406:	429a      	cmp	r2, r3
 8014408:	d802      	bhi.n	8014410 <wc_EccPublicKeyDecode+0x7a>
            return ASN_PARSE_E;
 801440a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801440e:	e0f7      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        tag = input[*inOutIdx];
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68fa      	ldr	r2, [r7, #12]
 8014416:	4413      	add	r3, r2
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	74fb      	strb	r3, [r7, #19]
        *inOutIdx += 1;
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	1c5a      	adds	r2, r3, #1
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	601a      	str	r2, [r3, #0]
        if (tag != 4 && tag != 6 && tag != 7)
 8014426:	7cfb      	ldrb	r3, [r7, #19]
 8014428:	2b04      	cmp	r3, #4
 801442a:	d008      	beq.n	801443e <wc_EccPublicKeyDecode+0xa8>
 801442c:	7cfb      	ldrb	r3, [r7, #19]
 801442e:	2b06      	cmp	r3, #6
 8014430:	d005      	beq.n	801443e <wc_EccPublicKeyDecode+0xa8>
 8014432:	7cfb      	ldrb	r3, [r7, #19]
 8014434:	2b07      	cmp	r3, #7
 8014436:	d002      	beq.n	801443e <wc_EccPublicKeyDecode+0xa8>
            return ASN_PARSE_E;
 8014438:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801443c:	e0e0      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>

        /* Skip Private Key */
        if (GetLength(input, inOutIdx, &length, inSz) < 0)
 801443e:	f107 021c 	add.w	r2, r7, #28
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	68b9      	ldr	r1, [r7, #8]
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	f7f9 f885 	bl	800d556 <GetLength>
 801444c:	4603      	mov	r3, r0
 801444e:	2b00      	cmp	r3, #0
 8014450:	da02      	bge.n	8014458 <wc_EccPublicKeyDecode+0xc2>
            return ASN_PARSE_E;
 8014452:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8014456:	e0d3      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        if (length > ECC_MAXSIZE)
 8014458:	69fb      	ldr	r3, [r7, #28]
 801445a:	2b42      	cmp	r3, #66	; 0x42
 801445c:	dd02      	ble.n	8014464 <wc_EccPublicKeyDecode+0xce>
            return BUFFER_E;
 801445e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8014462:	e0cd      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        *inOutIdx += length;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	69fa      	ldr	r2, [r7, #28]
 801446a:	441a      	add	r2, r3
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	601a      	str	r2, [r3, #0]

        /* Private Curve Header */
        if (*inOutIdx >= inSz)
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	683a      	ldr	r2, [r7, #0]
 8014476:	429a      	cmp	r2, r3
 8014478:	d802      	bhi.n	8014480 <wc_EccPublicKeyDecode+0xea>
            return ASN_PARSE_E;
 801447a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 801447e:	e0bf      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        tag = input[*inOutIdx];
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	4413      	add	r3, r2
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	74fb      	strb	r3, [r7, #19]
        *inOutIdx += 1;
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	1c5a      	adds	r2, r3, #1
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	601a      	str	r2, [r3, #0]
        if (tag != ECC_PREFIX_0)
 8014496:	7cfb      	ldrb	r3, [r7, #19]
 8014498:	2ba0      	cmp	r3, #160	; 0xa0
 801449a:	d002      	beq.n	80144a2 <wc_EccPublicKeyDecode+0x10c>
            return ASN_ECC_KEY_E;
 801449c:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 80144a0:	e0ae      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 80144a2:	f107 021c 	add.w	r2, r7, #28
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	68b9      	ldr	r1, [r7, #8]
 80144aa:	68f8      	ldr	r0, [r7, #12]
 80144ac:	f7f9 f853 	bl	800d556 <GetLength>
 80144b0:	4603      	mov	r3, r0
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	dc1a      	bgt.n	80144ec <wc_EccPublicKeyDecode+0x156>
            return ASN_PARSE_E;
 80144b6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80144ba:	e0a1      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
    }
    /* Standard ECC public key */
    else {
        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 80144bc:	f107 021c 	add.w	r2, r7, #28
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	68b9      	ldr	r1, [r7, #8]
 80144c4:	68f8      	ldr	r0, [r7, #12]
 80144c6:	f7f9 f9ad 	bl	800d824 <GetSequence>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	da02      	bge.n	80144d6 <wc_EccPublicKeyDecode+0x140>
            return ASN_PARSE_E;
 80144d0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80144d4:	e094      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>

        ret = SkipObjectId(input, inOutIdx, inSz);
 80144d6:	683a      	ldr	r2, [r7, #0]
 80144d8:	68b9      	ldr	r1, [r7, #8]
 80144da:	68f8      	ldr	r0, [r7, #12]
 80144dc:	f7fa f87b 	bl	800e5d6 <SkipObjectId>
 80144e0:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != 0)
 80144e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d001      	beq.n	80144ec <wc_EccPublicKeyDecode+0x156>
            return ret;
 80144e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ea:	e089      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
    }

    if (*inOutIdx >= inSz) {
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	683a      	ldr	r2, [r7, #0]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d802      	bhi.n	80144fc <wc_EccPublicKeyDecode+0x166>
        return BUFFER_E;
 80144f6:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80144fa:	e081      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
    }

    localIdx = *inOutIdx;
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	617b      	str	r3, [r7, #20]
    if (GetASNTag(input, &localIdx, &tag, inSz) == 0 &&
 8014502:	f107 0213 	add.w	r2, r7, #19
 8014506:	f107 0114 	add.w	r1, r7, #20
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	68f8      	ldr	r0, [r7, #12]
 801450e:	f7f9 f8ba 	bl	800d686 <GetASNTag>
 8014512:	4603      	mov	r3, r0
 8014514:	2b00      	cmp	r3, #0
 8014516:	d105      	bne.n	8014524 <wc_EccPublicKeyDecode+0x18e>
            tag == (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 8014518:	7cfb      	ldrb	r3, [r7, #19]
    if (GetASNTag(input, &localIdx, &tag, inSz) == 0 &&
 801451a:	2b30      	cmp	r3, #48	; 0x30
 801451c:	d102      	bne.n	8014524 <wc_EccPublicKeyDecode+0x18e>
            wc_ecc_free_curve(curve, key->heap);

        if (ret < 0)
            return ret;
#else
        return ASN_PARSE_E;
 801451e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8014522:	e06d      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
#endif /* WOLFSSL_CUSTOM_CURVES */
    }
    else {
        /* ecc params information */
        ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType, inSz);
 8014524:	f107 0218 	add.w	r2, r7, #24
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	2315      	movs	r3, #21
 801452e:	68b9      	ldr	r1, [r7, #8]
 8014530:	68f8      	ldr	r0, [r7, #12]
 8014532:	f7fa f82f 	bl	800e594 <GetObjectId>
 8014536:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != 0)
 8014538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453a:	2b00      	cmp	r3, #0
 801453c:	d001      	beq.n	8014542 <wc_EccPublicKeyDecode+0x1ac>
            return ret;
 801453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014540:	e05e      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>

        /* get curve id */
        if ((ret = CheckCurve(oidSum)) < 0)
 8014542:	69bb      	ldr	r3, [r7, #24]
 8014544:	4618      	mov	r0, r3
 8014546:	f7f9 ff77 	bl	800e438 <CheckCurve>
 801454a:	6278      	str	r0, [r7, #36]	; 0x24
 801454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801454e:	2b00      	cmp	r3, #0
 8014550:	da02      	bge.n	8014558 <wc_EccPublicKeyDecode+0x1c2>
            return ECC_CURVE_OID_E;
 8014552:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 8014556:	e053      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        else {
            curve_id = ret;
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }

    if (isPrivFormat) {
 801455c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014560:	2b00      	cmp	r3, #0
 8014562:	d025      	beq.n	80145b0 <wc_EccPublicKeyDecode+0x21a>
        /* Public Curve Header - skip */
        if (*inOutIdx >= inSz)
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	683a      	ldr	r2, [r7, #0]
 801456a:	429a      	cmp	r2, r3
 801456c:	d802      	bhi.n	8014574 <wc_EccPublicKeyDecode+0x1de>
            return ASN_PARSE_E;
 801456e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8014572:	e045      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        tag = input[*inOutIdx];
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	68fa      	ldr	r2, [r7, #12]
 801457a:	4413      	add	r3, r2
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	74fb      	strb	r3, [r7, #19]
        *inOutIdx += 1;
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	1c5a      	adds	r2, r3, #1
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	601a      	str	r2, [r3, #0]
        if (tag != ECC_PREFIX_1)
 801458a:	7cfb      	ldrb	r3, [r7, #19]
 801458c:	2ba1      	cmp	r3, #161	; 0xa1
 801458e:	d002      	beq.n	8014596 <wc_EccPublicKeyDecode+0x200>
            return ASN_ECC_KEY_E;
 8014590:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 8014594:	e034      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 8014596:	f107 021c 	add.w	r2, r7, #28
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	68b9      	ldr	r1, [r7, #8]
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f7f8 ffd9 	bl	800d556 <GetLength>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	dc02      	bgt.n	80145b0 <wc_EccPublicKeyDecode+0x21a>
            return ASN_PARSE_E;
 80145aa:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80145ae:	e027      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
    }

    /* key header */
    ret = CheckBitString(input, inOutIdx, &length, inSz, 1, NULL);
 80145b0:	f107 021c 	add.w	r2, r7, #28
 80145b4:	2300      	movs	r3, #0
 80145b6:	9301      	str	r3, [sp, #4]
 80145b8:	2301      	movs	r3, #1
 80145ba:	9300      	str	r3, [sp, #0]
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	68b9      	ldr	r1, [r7, #8]
 80145c0:	68f8      	ldr	r0, [r7, #12]
 80145c2:	f7f9 fc21 	bl	800de08 <CheckBitString>
 80145c6:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0)
 80145c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d001      	beq.n	80145d2 <wc_EccPublicKeyDecode+0x23c>
        return ret;
 80145ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d0:	e016      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>

    /* This is the raw point data compressed or uncompressed. */
    if (wc_ecc_import_x963_ex(input + *inOutIdx, length, key,
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	68fa      	ldr	r2, [r7, #12]
 80145d8:	18d0      	adds	r0, r2, r3
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	4619      	mov	r1, r3
 80145de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e0:	687a      	ldr	r2, [r7, #4]
 80145e2:	f003 fe2b 	bl	801823c <wc_ecc_import_x963_ex>
 80145e6:	4603      	mov	r3, r0
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d002      	beq.n	80145f2 <wc_EccPublicKeyDecode+0x25c>
                                                            curve_id) != 0) {
        return ASN_ECC_KEY_E;
 80145ec:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 80145f0:	e006      	b.n	8014600 <wc_EccPublicKeyDecode+0x26a>
    }

    *inOutIdx += length;
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	69fa      	ldr	r2, [r7, #28]
 80145f8:	441a      	add	r2, r3
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	601a      	str	r2, [r3, #0]

    return 0;
 80145fe:	2300      	movs	r3, #0
    }

    FREE_ASNGETDATA(dataASN, key->heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8014600:	4618      	mov	r0, r3
 8014602:	3730      	adds	r7, #48	; 0x30
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <Base64_Char2Val>:
/* 0x78: x y z           */    49,  50,  51
                            };
#define BASE64DECODE_SZ    (byte)(sizeof(base64Decode))

static WC_INLINE byte Base64_Char2Val(byte c)
{
 8014608:	b480      	push	{r7}
 801460a:	b085      	sub	sp, #20
 801460c:	af00      	add	r7, sp, #0
 801460e:	4603      	mov	r3, r0
 8014610:	71fb      	strb	r3, [r7, #7]
     * 64 bytes in a cache line - first line has 64, second has 16
     */
    byte v;
    byte mask;

    c -= BASE64_MIN;
 8014612:	79fb      	ldrb	r3, [r7, #7]
 8014614:	3b2b      	subs	r3, #43	; 0x2b
 8014616:	71fb      	strb	r3, [r7, #7]
    mask = (((byte)(0x3f - c)) >> 7) - 1;
 8014618:	79fb      	ldrb	r3, [r7, #7]
 801461a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 801461e:	b2db      	uxtb	r3, r3
 8014620:	09db      	lsrs	r3, r3, #7
 8014622:	b2db      	uxtb	r3, r3
 8014624:	3b01      	subs	r3, #1
 8014626:	73fb      	strb	r3, [r7, #15]
    /* Load a value from the first cache line and use when mask set. */
    v  = base64Decode[ c & 0x3f        ] &   mask ;
 8014628:	79fb      	ldrb	r3, [r7, #7]
 801462a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801462e:	4a0f      	ldr	r2, [pc, #60]	; (801466c <Base64_Char2Val+0x64>)
 8014630:	5cd2      	ldrb	r2, [r2, r3]
 8014632:	7bfb      	ldrb	r3, [r7, #15]
 8014634:	4013      	ands	r3, r2
 8014636:	73bb      	strb	r3, [r7, #14]
    /* Load a value from the second cache line and use when mask not set. */
    v |= base64Decode[(c & 0x0f) | 0x40] & (~mask);
 8014638:	79fb      	ldrb	r3, [r7, #7]
 801463a:	f003 030f 	and.w	r3, r3, #15
 801463e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014642:	4a0a      	ldr	r2, [pc, #40]	; (801466c <Base64_Char2Val+0x64>)
 8014644:	5cd3      	ldrb	r3, [r2, r3]
 8014646:	b25a      	sxtb	r2, r3
 8014648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801464c:	43db      	mvns	r3, r3
 801464e:	b25b      	sxtb	r3, r3
 8014650:	4013      	ands	r3, r2
 8014652:	b25a      	sxtb	r2, r3
 8014654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014658:	4313      	orrs	r3, r2
 801465a:	b25b      	sxtb	r3, r3
 801465c:	73bb      	strb	r3, [r7, #14]

    return v;
 801465e:	7bbb      	ldrb	r3, [r7, #14]
#else
    return base64Decode[c - BASE64_MIN];
#endif
}
 8014660:	4618      	mov	r0, r3
 8014662:	3714      	adds	r7, #20
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr
 801466c:	0802be8c 	.word	0x0802be8c

08014670 <Base64_SkipNewline>:
#endif

int Base64_SkipNewline(const byte* in, word32 *inLen,
  word32 *outJ)
{
 8014670:	b480      	push	{r7}
 8014672:	b089      	sub	sp, #36	; 0x24
 8014674:	af00      	add	r7, sp, #0
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	60b9      	str	r1, [r7, #8]
 801467a:	607a      	str	r2, [r7, #4]
    word32 len = *inLen;
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	61fb      	str	r3, [r7, #28]
    word32 j = *outJ;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	61bb      	str	r3, [r7, #24]
    byte curChar;

    if (len == 0) {
 8014688:	69fb      	ldr	r3, [r7, #28]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d102      	bne.n	8014694 <Base64_SkipNewline+0x24>
        return BUFFER_E;
 801468e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8014692:	e065      	b.n	8014760 <Base64_SkipNewline+0xf0>
    }
    curChar = in[j];
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	4413      	add	r3, r2
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	75fb      	strb	r3, [r7, #23]

    while (len > 1 && curChar == ' ') {
 801469e:	e00a      	b.n	80146b6 <Base64_SkipNewline+0x46>
        /* skip whitespace in the middle or end of line */
        curChar = in[++j];
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	3301      	adds	r3, #1
 80146a4:	61bb      	str	r3, [r7, #24]
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	69bb      	ldr	r3, [r7, #24]
 80146aa:	4413      	add	r3, r2
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	75fb      	strb	r3, [r7, #23]
        len--;
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	3b01      	subs	r3, #1
 80146b4:	61fb      	str	r3, [r7, #28]
    while (len > 1 && curChar == ' ') {
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d902      	bls.n	80146c2 <Base64_SkipNewline+0x52>
 80146bc:	7dfb      	ldrb	r3, [r7, #23]
 80146be:	2b20      	cmp	r3, #32
 80146c0:	d0ee      	beq.n	80146a0 <Base64_SkipNewline+0x30>
    }
    if (len && (curChar == '\r' || curChar == '\n')) {
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d038      	beq.n	801473a <Base64_SkipNewline+0xca>
 80146c8:	7dfb      	ldrb	r3, [r7, #23]
 80146ca:	2b0d      	cmp	r3, #13
 80146cc:	d002      	beq.n	80146d4 <Base64_SkipNewline+0x64>
 80146ce:	7dfb      	ldrb	r3, [r7, #23]
 80146d0:	2b0a      	cmp	r3, #10
 80146d2:	d132      	bne.n	801473a <Base64_SkipNewline+0xca>
        j++;
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	3301      	adds	r3, #1
 80146d8:	61bb      	str	r3, [r7, #24]
        len--;
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	3b01      	subs	r3, #1
 80146de:	61fb      	str	r3, [r7, #28]
        if (curChar == '\r') {
 80146e0:	7dfb      	ldrb	r3, [r7, #23]
 80146e2:	2b0d      	cmp	r3, #13
 80146e4:	d10c      	bne.n	8014700 <Base64_SkipNewline+0x90>
            if (len) {
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d009      	beq.n	8014700 <Base64_SkipNewline+0x90>
                curChar = in[j++];
 80146ec:	69bb      	ldr	r3, [r7, #24]
 80146ee:	1c5a      	adds	r2, r3, #1
 80146f0:	61ba      	str	r2, [r7, #24]
 80146f2:	68fa      	ldr	r2, [r7, #12]
 80146f4:	4413      	add	r3, r2
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	75fb      	strb	r3, [r7, #23]
                len--;
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	61fb      	str	r3, [r7, #28]
            }
        }
        if (curChar != '\n') {
 8014700:	7dfb      	ldrb	r3, [r7, #23]
 8014702:	2b0a      	cmp	r3, #10
 8014704:	d002      	beq.n	801470c <Base64_SkipNewline+0x9c>
            WOLFSSL_MSG("Bad end of line in Base64 Decode");
            return ASN_INPUT_E;
 8014706:	f06f 0399 	mvn.w	r3, #153	; 0x99
 801470a:	e029      	b.n	8014760 <Base64_SkipNewline+0xf0>
        }

        if (len) {
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d013      	beq.n	801473a <Base64_SkipNewline+0xca>
            curChar = in[j];
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	4413      	add	r3, r2
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	75fb      	strb	r3, [r7, #23]
        }
    }
    while (len && curChar == ' ') {
 801471c:	e00d      	b.n	801473a <Base64_SkipNewline+0xca>
        if (--len > 0) {
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	3b01      	subs	r3, #1
 8014722:	61fb      	str	r3, [r7, #28]
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d007      	beq.n	801473a <Base64_SkipNewline+0xca>
            curChar = in[++j];
 801472a:	69bb      	ldr	r3, [r7, #24]
 801472c:	3301      	adds	r3, #1
 801472e:	61bb      	str	r3, [r7, #24]
 8014730:	68fa      	ldr	r2, [r7, #12]
 8014732:	69bb      	ldr	r3, [r7, #24]
 8014734:	4413      	add	r3, r2
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	75fb      	strb	r3, [r7, #23]
    while (len && curChar == ' ') {
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d002      	beq.n	8014746 <Base64_SkipNewline+0xd6>
 8014740:	7dfb      	ldrb	r3, [r7, #23]
 8014742:	2b20      	cmp	r3, #32
 8014744:	d0eb      	beq.n	801471e <Base64_SkipNewline+0xae>
        }
    }
    if (!len) {
 8014746:	69fb      	ldr	r3, [r7, #28]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d102      	bne.n	8014752 <Base64_SkipNewline+0xe2>
        return BUFFER_E;
 801474c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8014750:	e006      	b.n	8014760 <Base64_SkipNewline+0xf0>
    }
    *inLen = len;
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	69fa      	ldr	r2, [r7, #28]
 8014756:	601a      	str	r2, [r3, #0]
    *outJ = j;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	69ba      	ldr	r2, [r7, #24]
 801475c:	601a      	str	r2, [r3, #0]
    return 0;
 801475e:	2300      	movs	r3, #0
}
 8014760:	4618      	mov	r0, r3
 8014762:	3724      	adds	r7, #36	; 0x24
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr

0801476c <Base64_Decode>:

int Base64_Decode(const byte* in, word32 inLen, byte* out, word32* outLen)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b08e      	sub	sp, #56	; 0x38
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
 8014778:	603b      	str	r3, [r7, #0]
    word32 i = 0;
 801477a:	2300      	movs	r3, #0
 801477c:	637b      	str	r3, [r7, #52]	; 0x34
    word32 j = 0;
 801477e:	2300      	movs	r3, #0
 8014780:	617b      	str	r3, [r7, #20]
    word32 plainSz = inLen - ((inLen + (BASE64_LINE_SZ - 1)) / BASE64_LINE_SZ );
 8014782:	68ba      	ldr	r2, [r7, #8]
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	333f      	adds	r3, #63	; 0x3f
 8014788:	099b      	lsrs	r3, r3, #6
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	62bb      	str	r3, [r7, #40]	; 0x28
    int ret;
#ifndef BASE64_NO_TABLE
    const byte maxIdx = BASE64DECODE_SZ + BASE64_MIN - 1;
 801478e:	237a      	movs	r3, #122	; 0x7a
 8014790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif

    plainSz = (plainSz * 3 + 3) / 4;
 8014794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014796:	1c5a      	adds	r2, r3, #1
 8014798:	4613      	mov	r3, r2
 801479a:	005b      	lsls	r3, r3, #1
 801479c:	4413      	add	r3, r2
 801479e:	089b      	lsrs	r3, r3, #2
 80147a0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (plainSz > *outLen) return BAD_FUNC_ARG;
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147a8:	429a      	cmp	r2, r3
 80147aa:	f240 8129 	bls.w	8014a00 <Base64_Decode+0x294>
 80147ae:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80147b2:	e140      	b.n	8014a36 <Base64_Decode+0x2ca>

    while (inLen > 3) {
        int pad3 = 0;
 80147b4:	2300      	movs	r3, #0
 80147b6:	633b      	str	r3, [r7, #48]	; 0x30
        int pad4 = 0;
 80147b8:	2300      	movs	r3, #0
 80147ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        byte b1, b2, b3;
        byte e1, e2, e3, e4;

        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 80147bc:	f107 0214 	add.w	r2, r7, #20
 80147c0:	f107 0308 	add.w	r3, r7, #8
 80147c4:	4619      	mov	r1, r3
 80147c6:	68f8      	ldr	r0, [r7, #12]
 80147c8:	f7ff ff52 	bl	8014670 <Base64_SkipNewline>
 80147cc:	6238      	str	r0, [r7, #32]
 80147ce:	6a3b      	ldr	r3, [r7, #32]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d006      	beq.n	80147e2 <Base64_Decode+0x76>
            if (ret == BUFFER_E) {
 80147d4:	6a3b      	ldr	r3, [r7, #32]
 80147d6:	f113 0f84 	cmn.w	r3, #132	; 0x84
 80147da:	f000 8116 	beq.w	8014a0a <Base64_Decode+0x29e>
                /* Running out of buffer here is not an error */
                break;
            }
            return ret;
 80147de:	6a3b      	ldr	r3, [r7, #32]
 80147e0:	e129      	b.n	8014a36 <Base64_Decode+0x2ca>
        }
        e1 = in[j++];
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	1c5a      	adds	r2, r3, #1
 80147e6:	617a      	str	r2, [r7, #20]
 80147e8:	68fa      	ldr	r2, [r7, #12]
 80147ea:	4413      	add	r3, r2
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	77fb      	strb	r3, [r7, #31]
        if (e1 == '\0') {
 80147f0:	7ffb      	ldrb	r3, [r7, #31]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	f000 810b 	beq.w	8014a0e <Base64_Decode+0x2a2>
            break;
        }
        inLen--;
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	3b01      	subs	r3, #1
 80147fc:	60bb      	str	r3, [r7, #8]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 80147fe:	f107 0214 	add.w	r2, r7, #20
 8014802:	f107 0308 	add.w	r3, r7, #8
 8014806:	4619      	mov	r1, r3
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f7ff ff31 	bl	8014670 <Base64_SkipNewline>
 801480e:	6238      	str	r0, [r7, #32]
 8014810:	6a3b      	ldr	r3, [r7, #32]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d001      	beq.n	801481a <Base64_Decode+0xae>
            return ret;
 8014816:	6a3b      	ldr	r3, [r7, #32]
 8014818:	e10d      	b.n	8014a36 <Base64_Decode+0x2ca>
        }
        e2 = in[j++];
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	1c5a      	adds	r2, r3, #1
 801481e:	617a      	str	r2, [r7, #20]
 8014820:	68fa      	ldr	r2, [r7, #12]
 8014822:	4413      	add	r3, r2
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	77bb      	strb	r3, [r7, #30]
        inLen--;
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	3b01      	subs	r3, #1
 801482c:	60bb      	str	r3, [r7, #8]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 801482e:	f107 0214 	add.w	r2, r7, #20
 8014832:	f107 0308 	add.w	r3, r7, #8
 8014836:	4619      	mov	r1, r3
 8014838:	68f8      	ldr	r0, [r7, #12]
 801483a:	f7ff ff19 	bl	8014670 <Base64_SkipNewline>
 801483e:	6238      	str	r0, [r7, #32]
 8014840:	6a3b      	ldr	r3, [r7, #32]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d001      	beq.n	801484a <Base64_Decode+0xde>
            return ret;
 8014846:	6a3b      	ldr	r3, [r7, #32]
 8014848:	e0f5      	b.n	8014a36 <Base64_Decode+0x2ca>
        }
        e3 = in[j++];
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	1c5a      	adds	r2, r3, #1
 801484e:	617a      	str	r2, [r7, #20]
 8014850:	68fa      	ldr	r2, [r7, #12]
 8014852:	4413      	add	r3, r2
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	777b      	strb	r3, [r7, #29]
        inLen--;
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	3b01      	subs	r3, #1
 801485c:	60bb      	str	r3, [r7, #8]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 801485e:	f107 0214 	add.w	r2, r7, #20
 8014862:	f107 0308 	add.w	r3, r7, #8
 8014866:	4619      	mov	r1, r3
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f7ff ff01 	bl	8014670 <Base64_SkipNewline>
 801486e:	6238      	str	r0, [r7, #32]
 8014870:	6a3b      	ldr	r3, [r7, #32]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d001      	beq.n	801487a <Base64_Decode+0x10e>
            return ret;
 8014876:	6a3b      	ldr	r3, [r7, #32]
 8014878:	e0dd      	b.n	8014a36 <Base64_Decode+0x2ca>
        }
        e4 = in[j++];
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	1c5a      	adds	r2, r3, #1
 801487e:	617a      	str	r2, [r7, #20]
 8014880:	68fa      	ldr	r2, [r7, #12]
 8014882:	4413      	add	r3, r2
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	773b      	strb	r3, [r7, #28]
        inLen--;
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	3b01      	subs	r3, #1
 801488c:	60bb      	str	r3, [r7, #8]

        if (e3 == PAD)
 801488e:	7f7b      	ldrb	r3, [r7, #29]
 8014890:	2b3d      	cmp	r3, #61	; 0x3d
 8014892:	d101      	bne.n	8014898 <Base64_Decode+0x12c>
            pad3 = 1;
 8014894:	2301      	movs	r3, #1
 8014896:	633b      	str	r3, [r7, #48]	; 0x30
        if (e4 == PAD)
 8014898:	7f3b      	ldrb	r3, [r7, #28]
 801489a:	2b3d      	cmp	r3, #61	; 0x3d
 801489c:	d101      	bne.n	80148a2 <Base64_Decode+0x136>
            pad4 = 1;
 801489e:	2301      	movs	r3, #1
 80148a0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (pad3 && !pad4)
 80148a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d005      	beq.n	80148b4 <Base64_Decode+0x148>
 80148a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d102      	bne.n	80148b4 <Base64_Decode+0x148>
            return ASN_INPUT_E;
 80148ae:	f06f 0399 	mvn.w	r3, #153	; 0x99
 80148b2:	e0c0      	b.n	8014a36 <Base64_Decode+0x2ca>

#ifndef BASE64_NO_TABLE
        if (e1 < BASE64_MIN || e2 < BASE64_MIN || e3 < BASE64_MIN ||
 80148b4:	7ffb      	ldrb	r3, [r7, #31]
 80148b6:	2b2a      	cmp	r3, #42	; 0x2a
 80148b8:	d908      	bls.n	80148cc <Base64_Decode+0x160>
 80148ba:	7fbb      	ldrb	r3, [r7, #30]
 80148bc:	2b2a      	cmp	r3, #42	; 0x2a
 80148be:	d905      	bls.n	80148cc <Base64_Decode+0x160>
 80148c0:	7f7b      	ldrb	r3, [r7, #29]
 80148c2:	2b2a      	cmp	r3, #42	; 0x2a
 80148c4:	d902      	bls.n	80148cc <Base64_Decode+0x160>
 80148c6:	7f3b      	ldrb	r3, [r7, #28]
 80148c8:	2b2a      	cmp	r3, #42	; 0x2a
 80148ca:	d802      	bhi.n	80148d2 <Base64_Decode+0x166>
                                                              e4 < BASE64_MIN) {
            WOLFSSL_MSG("Bad Base64 Decode data, too small");
            return ASN_INPUT_E;
 80148cc:	f06f 0399 	mvn.w	r3, #153	; 0x99
 80148d0:	e0b1      	b.n	8014a36 <Base64_Decode+0x2ca>
        }

        if (e1 > maxIdx || e2 > maxIdx || e3 > maxIdx || e4 > maxIdx) {
 80148d2:	7ffa      	ldrb	r2, [r7, #31]
 80148d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148d8:	429a      	cmp	r2, r3
 80148da:	d80e      	bhi.n	80148fa <Base64_Decode+0x18e>
 80148dc:	7fba      	ldrb	r2, [r7, #30]
 80148de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d809      	bhi.n	80148fa <Base64_Decode+0x18e>
 80148e6:	7f7a      	ldrb	r2, [r7, #29]
 80148e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d804      	bhi.n	80148fa <Base64_Decode+0x18e>
 80148f0:	7f3a      	ldrb	r2, [r7, #28]
 80148f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d902      	bls.n	8014900 <Base64_Decode+0x194>
            WOLFSSL_MSG("Bad Base64 Decode data, too big");
            return ASN_INPUT_E;
 80148fa:	f06f 0399 	mvn.w	r3, #153	; 0x99
 80148fe:	e09a      	b.n	8014a36 <Base64_Decode+0x2ca>
        }
#endif

        if (i + 1 + !pad3 + !pad4 > *outLen) {
 8014900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014902:	2b00      	cmp	r3, #0
 8014904:	bf0c      	ite	eq
 8014906:	2301      	moveq	r3, #1
 8014908:	2300      	movne	r3, #0
 801490a:	b2db      	uxtb	r3, r3
 801490c:	461a      	mov	r2, r3
 801490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014910:	4413      	add	r3, r2
 8014912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014914:	2a00      	cmp	r2, #0
 8014916:	bf0c      	ite	eq
 8014918:	2201      	moveq	r2, #1
 801491a:	2200      	movne	r2, #0
 801491c:	b2d2      	uxtb	r2, r2
 801491e:	4413      	add	r3, r2
 8014920:	1c5a      	adds	r2, r3, #1
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	429a      	cmp	r2, r3
 8014928:	d902      	bls.n	8014930 <Base64_Decode+0x1c4>
            WOLFSSL_MSG("Bad Base64 Decode out buffer, too small");
            return BAD_FUNC_ARG;
 801492a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801492e:	e082      	b.n	8014a36 <Base64_Decode+0x2ca>
        }

        e1 = Base64_Char2Val(e1);
 8014930:	7ffb      	ldrb	r3, [r7, #31]
 8014932:	4618      	mov	r0, r3
 8014934:	f7ff fe68 	bl	8014608 <Base64_Char2Val>
 8014938:	4603      	mov	r3, r0
 801493a:	77fb      	strb	r3, [r7, #31]
        e2 = Base64_Char2Val(e2);
 801493c:	7fbb      	ldrb	r3, [r7, #30]
 801493e:	4618      	mov	r0, r3
 8014940:	f7ff fe62 	bl	8014608 <Base64_Char2Val>
 8014944:	4603      	mov	r3, r0
 8014946:	77bb      	strb	r3, [r7, #30]
        e3 = (e3 == PAD) ? 0 : Base64_Char2Val(e3);
 8014948:	7f7b      	ldrb	r3, [r7, #29]
 801494a:	2b3d      	cmp	r3, #61	; 0x3d
 801494c:	d005      	beq.n	801495a <Base64_Decode+0x1ee>
 801494e:	7f7b      	ldrb	r3, [r7, #29]
 8014950:	4618      	mov	r0, r3
 8014952:	f7ff fe59 	bl	8014608 <Base64_Char2Val>
 8014956:	4603      	mov	r3, r0
 8014958:	e000      	b.n	801495c <Base64_Decode+0x1f0>
 801495a:	2300      	movs	r3, #0
 801495c:	777b      	strb	r3, [r7, #29]
        e4 = (e4 == PAD) ? 0 : Base64_Char2Val(e4);
 801495e:	7f3b      	ldrb	r3, [r7, #28]
 8014960:	2b3d      	cmp	r3, #61	; 0x3d
 8014962:	d005      	beq.n	8014970 <Base64_Decode+0x204>
 8014964:	7f3b      	ldrb	r3, [r7, #28]
 8014966:	4618      	mov	r0, r3
 8014968:	f7ff fe4e 	bl	8014608 <Base64_Char2Val>
 801496c:	4603      	mov	r3, r0
 801496e:	e000      	b.n	8014972 <Base64_Decode+0x206>
 8014970:	2300      	movs	r3, #0
 8014972:	773b      	strb	r3, [r7, #28]

        if (e1 == BAD || e2 == BAD || e3 == BAD || e4 == BAD) {
 8014974:	7ffb      	ldrb	r3, [r7, #31]
 8014976:	2bff      	cmp	r3, #255	; 0xff
 8014978:	d008      	beq.n	801498c <Base64_Decode+0x220>
 801497a:	7fbb      	ldrb	r3, [r7, #30]
 801497c:	2bff      	cmp	r3, #255	; 0xff
 801497e:	d005      	beq.n	801498c <Base64_Decode+0x220>
 8014980:	7f7b      	ldrb	r3, [r7, #29]
 8014982:	2bff      	cmp	r3, #255	; 0xff
 8014984:	d002      	beq.n	801498c <Base64_Decode+0x220>
 8014986:	7f3b      	ldrb	r3, [r7, #28]
 8014988:	2bff      	cmp	r3, #255	; 0xff
 801498a:	d102      	bne.n	8014992 <Base64_Decode+0x226>
            WOLFSSL_MSG("Bad Base64 Decode bad character");
            return ASN_INPUT_E;
 801498c:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8014990:	e051      	b.n	8014a36 <Base64_Decode+0x2ca>
        }

        b1 = (byte)((e1 << 2) | (e2 >> 4));
 8014992:	7ffb      	ldrb	r3, [r7, #31]
 8014994:	009b      	lsls	r3, r3, #2
 8014996:	b25a      	sxtb	r2, r3
 8014998:	7fbb      	ldrb	r3, [r7, #30]
 801499a:	091b      	lsrs	r3, r3, #4
 801499c:	b2db      	uxtb	r3, r3
 801499e:	b25b      	sxtb	r3, r3
 80149a0:	4313      	orrs	r3, r2
 80149a2:	b25b      	sxtb	r3, r3
 80149a4:	76fb      	strb	r3, [r7, #27]
        b2 = (byte)(((e2 & 0xF) << 4) | (e3 >> 2));
 80149a6:	7fbb      	ldrb	r3, [r7, #30]
 80149a8:	011b      	lsls	r3, r3, #4
 80149aa:	b25a      	sxtb	r2, r3
 80149ac:	7f7b      	ldrb	r3, [r7, #29]
 80149ae:	089b      	lsrs	r3, r3, #2
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	b25b      	sxtb	r3, r3
 80149b4:	4313      	orrs	r3, r2
 80149b6:	b25b      	sxtb	r3, r3
 80149b8:	76bb      	strb	r3, [r7, #26]
        b3 = (byte)(((e3 & 0x3) << 6) | e4);
 80149ba:	7f7b      	ldrb	r3, [r7, #29]
 80149bc:	019b      	lsls	r3, r3, #6
 80149be:	b25a      	sxtb	r2, r3
 80149c0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80149c4:	4313      	orrs	r3, r2
 80149c6:	b25b      	sxtb	r3, r3
 80149c8:	767b      	strb	r3, [r7, #25]

        out[i++] = b1;
 80149ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149cc:	1c5a      	adds	r2, r3, #1
 80149ce:	637a      	str	r2, [r7, #52]	; 0x34
 80149d0:	687a      	ldr	r2, [r7, #4]
 80149d2:	4413      	add	r3, r2
 80149d4:	7efa      	ldrb	r2, [r7, #27]
 80149d6:	701a      	strb	r2, [r3, #0]
        if (!pad3)
 80149d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d106      	bne.n	80149ec <Base64_Decode+0x280>
            out[i++] = b2;
 80149de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149e0:	1c5a      	adds	r2, r3, #1
 80149e2:	637a      	str	r2, [r7, #52]	; 0x34
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	4413      	add	r3, r2
 80149e8:	7eba      	ldrb	r2, [r7, #26]
 80149ea:	701a      	strb	r2, [r3, #0]
        if (!pad4)
 80149ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d10f      	bne.n	8014a12 <Base64_Decode+0x2a6>
            out[i++] = b3;
 80149f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149f4:	1c5a      	adds	r2, r3, #1
 80149f6:	637a      	str	r2, [r7, #52]	; 0x34
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	4413      	add	r3, r2
 80149fc:	7e7a      	ldrb	r2, [r7, #25]
 80149fe:	701a      	strb	r2, [r3, #0]
    while (inLen > 3) {
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	2b03      	cmp	r3, #3
 8014a04:	f63f aed6 	bhi.w	80147b4 <Base64_Decode+0x48>
 8014a08:	e004      	b.n	8014a14 <Base64_Decode+0x2a8>
                break;
 8014a0a:	bf00      	nop
 8014a0c:	e002      	b.n	8014a14 <Base64_Decode+0x2a8>
            break;
 8014a0e:	bf00      	nop
 8014a10:	e000      	b.n	8014a14 <Base64_Decode+0x2a8>
        else
            break;
 8014a12:	bf00      	nop
    }
/* If the output buffer has a room for an extra byte, add a null terminator */
    if (out && *outLen > i)
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d009      	beq.n	8014a2e <Base64_Decode+0x2c2>
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d204      	bcs.n	8014a2e <Base64_Decode+0x2c2>
        out[i]= '\0';
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a28:	4413      	add	r3, r2
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	701a      	strb	r2, [r3, #0]

    *outLen = i;
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a32:	601a      	str	r2, [r3, #0]

    return 0;
 8014a34:	2300      	movs	r3, #0
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3738      	adds	r7, #56	; 0x38
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
	...

08014a40 <Base16_Decode>:
                           BAD, BAD,  /* G - ` */
                           10, 11, 12, 13, 14, 15   /* lower case a-f */
                         };  /* A starts at 0x41 not 0x3A */

int Base16_Decode(const byte* in, word32 inLen, byte* out, word32* outLen)
{
 8014a40:	b480      	push	{r7}
 8014a42:	b089      	sub	sp, #36	; 0x24
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	607a      	str	r2, [r7, #4]
 8014a4c:	603b      	str	r3, [r7, #0]
    word32 inIdx  = 0;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	61fb      	str	r3, [r7, #28]
    word32 outIdx = 0;
 8014a52:	2300      	movs	r3, #0
 8014a54:	61bb      	str	r3, [r7, #24]

    if (in == NULL || out == NULL || outLen == NULL)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d005      	beq.n	8014a68 <Base16_Decode+0x28>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d002      	beq.n	8014a68 <Base16_Decode+0x28>
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d102      	bne.n	8014a6e <Base16_Decode+0x2e>
        return BAD_FUNC_ARG;
 8014a68:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8014a6c:	e083      	b.n	8014b76 <Base16_Decode+0x136>

    if (inLen == 1 && *outLen && in) {
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d12a      	bne.n	8014aca <Base16_Decode+0x8a>
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d026      	beq.n	8014aca <Base16_Decode+0x8a>
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d023      	beq.n	8014aca <Base16_Decode+0x8a>
        byte b = in[inIdx++] - BASE16_MIN;  /* 0 starts at 0x30 */
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	1c5a      	adds	r2, r3, #1
 8014a86:	61fa      	str	r2, [r7, #28]
 8014a88:	68fa      	ldr	r2, [r7, #12]
 8014a8a:	4413      	add	r3, r2
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	3b30      	subs	r3, #48	; 0x30
 8014a90:	75fb      	strb	r3, [r7, #23]

        /* sanity check */
        if (b >=  sizeof(hexDecode)/sizeof(hexDecode[0]))
 8014a92:	7dfb      	ldrb	r3, [r7, #23]
 8014a94:	2b36      	cmp	r3, #54	; 0x36
 8014a96:	d902      	bls.n	8014a9e <Base16_Decode+0x5e>
            return ASN_INPUT_E;
 8014a98:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8014a9c:	e06b      	b.n	8014b76 <Base16_Decode+0x136>

        b  = hexDecode[b];
 8014a9e:	7dfb      	ldrb	r3, [r7, #23]
 8014aa0:	4a38      	ldr	r2, [pc, #224]	; (8014b84 <Base16_Decode+0x144>)
 8014aa2:	5cd3      	ldrb	r3, [r2, r3]
 8014aa4:	75fb      	strb	r3, [r7, #23]

        if (b == BAD)
 8014aa6:	7dfb      	ldrb	r3, [r7, #23]
 8014aa8:	2bff      	cmp	r3, #255	; 0xff
 8014aaa:	d102      	bne.n	8014ab2 <Base16_Decode+0x72>
            return ASN_INPUT_E;
 8014aac:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8014ab0:	e061      	b.n	8014b76 <Base16_Decode+0x136>

        out[outIdx++] = b;
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	1c5a      	adds	r2, r3, #1
 8014ab6:	61ba      	str	r2, [r7, #24]
 8014ab8:	687a      	ldr	r2, [r7, #4]
 8014aba:	4413      	add	r3, r2
 8014abc:	7dfa      	ldrb	r2, [r7, #23]
 8014abe:	701a      	strb	r2, [r3, #0]

        *outLen = outIdx;
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	69ba      	ldr	r2, [r7, #24]
 8014ac4:	601a      	str	r2, [r3, #0]
        return 0;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	e055      	b.n	8014b76 <Base16_Decode+0x136>
    }

    if (inLen % 2)
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	f003 0301 	and.w	r3, r3, #1
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d002      	beq.n	8014ada <Base16_Decode+0x9a>
        return BAD_FUNC_ARG;
 8014ad4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8014ad8:	e04d      	b.n	8014b76 <Base16_Decode+0x136>

    if (*outLen < (inLen / 2))
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	681a      	ldr	r2, [r3, #0]
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	085b      	lsrs	r3, r3, #1
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d240      	bcs.n	8014b68 <Base16_Decode+0x128>
        return BAD_FUNC_ARG;
 8014ae6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8014aea:	e044      	b.n	8014b76 <Base16_Decode+0x136>

    while (inLen) {
        byte b  = in[inIdx++] - BASE16_MIN;  /* 0 starts at 0x30 */
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	1c5a      	adds	r2, r3, #1
 8014af0:	61fa      	str	r2, [r7, #28]
 8014af2:	68fa      	ldr	r2, [r7, #12]
 8014af4:	4413      	add	r3, r2
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	3b30      	subs	r3, #48	; 0x30
 8014afa:	75bb      	strb	r3, [r7, #22]
        byte b2 = in[inIdx++] - BASE16_MIN;
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	1c5a      	adds	r2, r3, #1
 8014b00:	61fa      	str	r2, [r7, #28]
 8014b02:	68fa      	ldr	r2, [r7, #12]
 8014b04:	4413      	add	r3, r2
 8014b06:	781b      	ldrb	r3, [r3, #0]
 8014b08:	3b30      	subs	r3, #48	; 0x30
 8014b0a:	757b      	strb	r3, [r7, #21]

        /* sanity checks */
        if (b >=  sizeof(hexDecode)/sizeof(hexDecode[0]))
 8014b0c:	7dbb      	ldrb	r3, [r7, #22]
 8014b0e:	2b36      	cmp	r3, #54	; 0x36
 8014b10:	d902      	bls.n	8014b18 <Base16_Decode+0xd8>
            return ASN_INPUT_E;
 8014b12:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8014b16:	e02e      	b.n	8014b76 <Base16_Decode+0x136>
        if (b2 >= sizeof(hexDecode)/sizeof(hexDecode[0]))
 8014b18:	7d7b      	ldrb	r3, [r7, #21]
 8014b1a:	2b36      	cmp	r3, #54	; 0x36
 8014b1c:	d902      	bls.n	8014b24 <Base16_Decode+0xe4>
            return ASN_INPUT_E;
 8014b1e:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8014b22:	e028      	b.n	8014b76 <Base16_Decode+0x136>

        b  = hexDecode[b];
 8014b24:	7dbb      	ldrb	r3, [r7, #22]
 8014b26:	4a17      	ldr	r2, [pc, #92]	; (8014b84 <Base16_Decode+0x144>)
 8014b28:	5cd3      	ldrb	r3, [r2, r3]
 8014b2a:	75bb      	strb	r3, [r7, #22]
        b2 = hexDecode[b2];
 8014b2c:	7d7b      	ldrb	r3, [r7, #21]
 8014b2e:	4a15      	ldr	r2, [pc, #84]	; (8014b84 <Base16_Decode+0x144>)
 8014b30:	5cd3      	ldrb	r3, [r2, r3]
 8014b32:	757b      	strb	r3, [r7, #21]

        if (b == BAD || b2 == BAD)
 8014b34:	7dbb      	ldrb	r3, [r7, #22]
 8014b36:	2bff      	cmp	r3, #255	; 0xff
 8014b38:	d002      	beq.n	8014b40 <Base16_Decode+0x100>
 8014b3a:	7d7b      	ldrb	r3, [r7, #21]
 8014b3c:	2bff      	cmp	r3, #255	; 0xff
 8014b3e:	d102      	bne.n	8014b46 <Base16_Decode+0x106>
            return ASN_INPUT_E;
 8014b40:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8014b44:	e017      	b.n	8014b76 <Base16_Decode+0x136>

        out[outIdx++] = (byte)((b << 4) | b2);
 8014b46:	7dbb      	ldrb	r3, [r7, #22]
 8014b48:	011b      	lsls	r3, r3, #4
 8014b4a:	b25a      	sxtb	r2, r3
 8014b4c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014b50:	4313      	orrs	r3, r2
 8014b52:	b259      	sxtb	r1, r3
 8014b54:	69bb      	ldr	r3, [r7, #24]
 8014b56:	1c5a      	adds	r2, r3, #1
 8014b58:	61ba      	str	r2, [r7, #24]
 8014b5a:	687a      	ldr	r2, [r7, #4]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	b2ca      	uxtb	r2, r1
 8014b60:	701a      	strb	r2, [r3, #0]
        inLen -= 2;
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	3b02      	subs	r3, #2
 8014b66:	60bb      	str	r3, [r7, #8]
    while (inLen) {
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d1be      	bne.n	8014aec <Base16_Decode+0xac>
    }

    *outLen = outIdx;
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	69ba      	ldr	r2, [r7, #24]
 8014b72:	601a      	str	r2, [r3, #0]
    return 0;
 8014b74:	2300      	movs	r3, #0
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3724      	adds	r7, #36	; 0x24
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr
 8014b82:	bf00      	nop
 8014b84:	0802bedc 	.word	0x0802bedc

08014b88 <ForceZero>:
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b085      	sub	sp, #20
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 8014b96:	e004      	b.n	8014ba2 <ForceZero+0x1a>
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	1c5a      	adds	r2, r3, #1
 8014b9c:	60fa      	str	r2, [r7, #12]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	701a      	strb	r2, [r3, #0]
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	1e5a      	subs	r2, r3, #1
 8014ba6:	603a      	str	r2, [r7, #0]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d1f5      	bne.n	8014b98 <ForceZero+0x10>
}
 8014bac:	bf00      	nop
 8014bae:	bf00      	nop
 8014bb0:	3714      	adds	r7, #20
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr

08014bba <wc_ecc_curve_cache_free_spec_item>:
    #define FREE_CURVE_SPECS()
#endif /* ECC_CACHE_CURVE */

static void wc_ecc_curve_cache_free_spec_item(ecc_curve_spec* curve, mp_int* item,
    byte mask)
{
 8014bba:	b580      	push	{r7, lr}
 8014bbc:	b084      	sub	sp, #16
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	60f8      	str	r0, [r7, #12]
 8014bc2:	60b9      	str	r1, [r7, #8]
 8014bc4:	4613      	mov	r3, r2
 8014bc6:	71fb      	strb	r3, [r7, #7]
    if (item) {
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d002      	beq.n	8014bd4 <wc_ecc_curve_cache_free_spec_item+0x1a>
    #ifdef HAVE_WOLF_BIGINT
        wc_bigint_free(&item->raw);
    #endif
        mp_clear(item);
 8014bce:	68b8      	ldr	r0, [r7, #8]
 8014bd0:	f00b fbd4 	bl	802037c <mp_clear>
    }
    curve->load_mask &= ~mask;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014bda:	b25a      	sxtb	r2, r3
 8014bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014be0:	43db      	mvns	r3, r3
 8014be2:	b25b      	sxtb	r3, r3
 8014be4:	4013      	ands	r3, r2
 8014be6:	b25b      	sxtb	r3, r3
 8014be8:	b2da      	uxtb	r2, r3
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8014bf0:	bf00      	nop
 8014bf2:	3710      	adds	r7, #16
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <wc_ecc_curve_cache_free_spec>:
static void wc_ecc_curve_cache_free_spec(ecc_curve_spec* curve)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
    if (curve == NULL) {
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d04a      	beq.n	8014c9c <wc_ecc_curve_cache_free_spec+0xa4>
        return;
    }

    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014c0c:	f003 0301 	and.w	r3, r3, #1
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d006      	beq.n	8014c22 <wc_ecc_curve_cache_free_spec+0x2a>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	2201      	movs	r2, #1
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f7ff ffcc 	bl	8014bba <wc_ecc_curve_cache_free_spec_item>
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014c28:	f003 0302 	and.w	r3, r3, #2
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d006      	beq.n	8014c3e <wc_ecc_curve_cache_free_spec+0x46>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	689b      	ldr	r3, [r3, #8]
 8014c34:	2202      	movs	r2, #2
 8014c36:	4619      	mov	r1, r3
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7ff ffbe 	bl	8014bba <wc_ecc_curve_cache_free_spec_item>
#ifdef USE_ECC_B_PARAM
    if (curve->load_mask & ECC_CURVE_FIELD_BF)
        wc_ecc_curve_cache_free_spec_item(curve, curve->Bf, ECC_CURVE_FIELD_BF);
#endif
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014c44:	f003 0308 	and.w	r3, r3, #8
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d006      	beq.n	8014c5a <wc_ecc_curve_cache_free_spec+0x62>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	2208      	movs	r2, #8
 8014c52:	4619      	mov	r1, r3
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f7ff ffb0 	bl	8014bba <wc_ecc_curve_cache_free_spec_item>
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014c60:	f003 0310 	and.w	r3, r3, #16
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d006      	beq.n	8014c76 <wc_ecc_curve_cache_free_spec+0x7e>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	691b      	ldr	r3, [r3, #16]
 8014c6c:	2210      	movs	r2, #16
 8014c6e:	4619      	mov	r1, r3
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f7ff ffa2 	bl	8014bba <wc_ecc_curve_cache_free_spec_item>
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014c7c:	f003 0320 	and.w	r3, r3, #32
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d006      	beq.n	8014c92 <wc_ecc_curve_cache_free_spec+0x9a>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	695b      	ldr	r3, [r3, #20]
 8014c88:	2220      	movs	r2, #32
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f7ff ff94 	bl	8014bba <wc_ecc_curve_cache_free_spec_item>

    curve->load_mask = 0;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2200      	movs	r2, #0
 8014c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8014c9a:	e000      	b.n	8014c9e <wc_ecc_curve_cache_free_spec+0xa6>
        return;
 8014c9c:	bf00      	nop
}
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <wc_ecc_curve_free>:

static void wc_ecc_curve_free(ecc_curve_spec* curve)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
    if (curve) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d002      	beq.n	8014cb8 <wc_ecc_curve_free+0x14>
            wc_ecc_curve_cache_free_spec(curve);
            XFREE(curve, NULL, DYNAMIC_TYPE_ECC);
        }
        #endif
    #else
        wc_ecc_curve_cache_free_spec(curve);
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff ffa0 	bl	8014bf8 <wc_ecc_curve_cache_free_spec>
    #endif
    }
}
 8014cb8:	bf00      	nop
 8014cba:	3708      	adds	r7, #8
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <wc_ecc_curve_cache_load_item>:

static int wc_ecc_curve_cache_load_item(ecc_curve_spec* curve, const char* src,
    mp_int** dst, byte mask)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
 8014ccc:	70fb      	strb	r3, [r7, #3]
    int err;

#ifndef ECC_CACHE_CURVE
    /* get mp_int from temp */
    if (curve->spec_use >= curve->spec_count) {
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	6a1a      	ldr	r2, [r3, #32]
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	69db      	ldr	r3, [r3, #28]
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d302      	bcc.n	8014ce0 <wc_ecc_curve_cache_load_item+0x20>
        WOLFSSL_MSG("Invalid DECLARE_CURVE_SPECS count");
        return ECC_BAD_ARG_E;
 8014cda:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8014cde:	e028      	b.n	8014d32 <wc_ecc_curve_cache_load_item+0x72>
    }
    *dst = &curve->spec_ints[curve->spec_use++];
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	699a      	ldr	r2, [r3, #24]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6a1b      	ldr	r3, [r3, #32]
 8014ce8:	1c58      	adds	r0, r3, #1
 8014cea:	68f9      	ldr	r1, [r7, #12]
 8014cec:	6208      	str	r0, [r1, #32]
 8014cee:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8014cf2:	fb01 f303 	mul.w	r3, r1, r3
 8014cf6:	441a      	add	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	601a      	str	r2, [r3, #0]
#endif

    err = mp_init(*dst);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4618      	mov	r0, r3
 8014d02:	f00b fab5 	bl	8020270 <mp_init>
 8014d06:	6178      	str	r0, [r7, #20]
    if (err == MP_OKAY) {
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d110      	bne.n	8014d30 <wc_ecc_curve_cache_load_item+0x70>
        curve->load_mask |= mask;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014d14:	78fb      	ldrb	r3, [r7, #3]
 8014d16:	4313      	orrs	r3, r2
 8014d18:	b2da      	uxtb	r2, r3
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	2210      	movs	r2, #16
 8014d26:	68b9      	ldr	r1, [r7, #8]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f00b ff23 	bl	8020b74 <mp_read_radix>
 8014d2e:	6178      	str	r0, [r7, #20]
    #ifdef HAVE_WOLF_BIGINT
        if (err == MP_OKAY)
            err = wc_mp_to_bigint(*dst, &(*dst)->raw);
    #endif
    }
    return err;
 8014d30:	697b      	ldr	r3, [r7, #20]
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3718      	adds	r7, #24
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <wc_ecc_curve_load>:

static int wc_ecc_curve_load(const ecc_set_type* dp, ecc_curve_spec** pCurve,
    byte load_mask)
{
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b088      	sub	sp, #32
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	60f8      	str	r0, [r7, #12]
 8014d42:	60b9      	str	r1, [r7, #8]
 8014d44:	4613      	mov	r3, r2
 8014d46:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	61fb      	str	r3, [r7, #28]
    ecc_curve_spec* curve;
    byte load_items = 0; /* mask of items to load */
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	76fb      	strb	r3, [r7, #27]
#ifdef ECC_CACHE_CURVE
    int x;
#endif

    if (dp == NULL || pCurve == NULL)
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d002      	beq.n	8014d5c <wc_ecc_curve_load+0x22>
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d102      	bne.n	8014d62 <wc_ecc_curve_load+0x28>
        return BAD_FUNC_ARG;
 8014d5c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8014d60:	e082      	b.n	8014e68 <wc_ecc_curve_load+0x12e>
        curve = ecc_curve_spec_cache[x];
    }
    /* return new or cached curve */
    *pCurve = curve;
#else
    curve = *pCurve;
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	617b      	str	r3, [r7, #20]
#endif /* ECC_CACHE_CURVE */

    /* make sure the curve is initialized */
    if (curve->dp != dp) {
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d003      	beq.n	8014d7a <wc_ecc_curve_load+0x40>
        curve->load_mask = 0;
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	2200      	movs	r2, #0
 8014d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        curve->order = &curve->order_lcl;
        curve->Gx = &curve->Gx_lcl;
        curve->Gy = &curve->Gy_lcl;
    #endif
    }
    curve->dp = dp; /* set dp info */
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	68fa      	ldr	r2, [r7, #12]
 8014d7e:	601a      	str	r2, [r3, #0]

    /* determine items to load */
    load_items = (((byte)~(word32)curve->load_mask) & load_mask);
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014d86:	43db      	mvns	r3, r3
 8014d88:	b2da      	uxtb	r2, r3
 8014d8a:	79fb      	ldrb	r3, [r7, #7]
 8014d8c:	4013      	ands	r3, r2
 8014d8e:	76fb      	strb	r3, [r7, #27]
    curve->load_mask |= load_items;
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014d96:	7efb      	ldrb	r3, [r7, #27]
 8014d98:	4313      	orrs	r3, r2
 8014d9a:	b2da      	uxtb	r2, r3
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* load items */
    if (load_items & ECC_CURVE_FIELD_PRIME)
 8014da2:	7efb      	ldrb	r3, [r7, #27]
 8014da4:	f003 0301 	and.w	r3, r3, #1
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d00b      	beq.n	8014dc4 <wc_ecc_curve_load+0x8a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	68d9      	ldr	r1, [r3, #12]
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	1d1a      	adds	r2, r3, #4
 8014db4:	2301      	movs	r3, #1
 8014db6:	6978      	ldr	r0, [r7, #20]
 8014db8:	f7ff ff82 	bl	8014cc0 <wc_ecc_curve_cache_load_item>
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_PRIME);
    if (load_items & ECC_CURVE_FIELD_AF)
 8014dc4:	7efb      	ldrb	r3, [r7, #27]
 8014dc6:	f003 0302 	and.w	r3, r3, #2
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d00c      	beq.n	8014de8 <wc_ecc_curve_load+0xae>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	6919      	ldr	r1, [r3, #16]
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	f103 0208 	add.w	r2, r3, #8
 8014dd8:	2302      	movs	r3, #2
 8014dda:	6978      	ldr	r0, [r7, #20]
 8014ddc:	f7ff ff70 	bl	8014cc0 <wc_ecc_curve_cache_load_item>
 8014de0:	4602      	mov	r2, r0
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	4413      	add	r3, r2
 8014de6:	61fb      	str	r3, [r7, #28]
#ifdef USE_ECC_B_PARAM
    if (load_items & ECC_CURVE_FIELD_BF)
        ret += wc_ecc_curve_cache_load_item(curve, dp->Bf, &curve->Bf,
            ECC_CURVE_FIELD_BF);
#endif
    if (load_items & ECC_CURVE_FIELD_ORDER)
 8014de8:	7efb      	ldrb	r3, [r7, #27]
 8014dea:	f003 0308 	and.w	r3, r3, #8
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00c      	beq.n	8014e0c <wc_ecc_curve_load+0xd2>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	6999      	ldr	r1, [r3, #24]
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	f103 020c 	add.w	r2, r3, #12
 8014dfc:	2308      	movs	r3, #8
 8014dfe:	6978      	ldr	r0, [r7, #20]
 8014e00:	f7ff ff5e 	bl	8014cc0 <wc_ecc_curve_cache_load_item>
 8014e04:	4602      	mov	r2, r0
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	4413      	add	r3, r2
 8014e0a:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_ORDER);
    if (load_items & ECC_CURVE_FIELD_GX)
 8014e0c:	7efb      	ldrb	r3, [r7, #27]
 8014e0e:	f003 0310 	and.w	r3, r3, #16
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d00c      	beq.n	8014e30 <wc_ecc_curve_load+0xf6>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	69d9      	ldr	r1, [r3, #28]
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	f103 0210 	add.w	r2, r3, #16
 8014e20:	2310      	movs	r3, #16
 8014e22:	6978      	ldr	r0, [r7, #20]
 8014e24:	f7ff ff4c 	bl	8014cc0 <wc_ecc_curve_cache_load_item>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_GX);
    if (load_items & ECC_CURVE_FIELD_GY)
 8014e30:	7efb      	ldrb	r3, [r7, #27]
 8014e32:	f003 0320 	and.w	r3, r3, #32
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d00c      	beq.n	8014e54 <wc_ecc_curve_load+0x11a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	6a19      	ldr	r1, [r3, #32]
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	f103 0214 	add.w	r2, r3, #20
 8014e44:	2320      	movs	r3, #32
 8014e46:	6978      	ldr	r0, [r7, #20]
 8014e48:	f7ff ff3a 	bl	8014cc0 <wc_ecc_curve_cache_load_item>
 8014e4c:	4602      	mov	r2, r0
 8014e4e:	69fb      	ldr	r3, [r7, #28]
 8014e50:	4413      	add	r3, r2
 8014e52:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_GY);

    /* check for error */
    if (ret != 0) {
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d005      	beq.n	8014e66 <wc_ecc_curve_load+0x12c>
        wc_ecc_curve_free(curve);
 8014e5a:	6978      	ldr	r0, [r7, #20]
 8014e5c:	f7ff ff22 	bl	8014ca4 <wc_ecc_curve_free>
        ret = MP_READ_E;
 8014e60:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8014e64:	61fb      	str	r3, [r7, #28]

#if defined(ECC_CACHE_CURVE) && !defined(SINGLE_THREADED)
    wc_UnLockMutex(&ecc_curve_cache_mutex);
#endif

    return ret;
 8014e66:	69fb      	ldr	r3, [r7, #28]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3720      	adds	r7, #32
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}

08014e70 <wc_ecc_set_curve>:
        return NULL;
    return ecc_sets[curve_idx].name;
}

int wc_ecc_set_curve(ecc_key* key, int keysize, int curve_id)
{
 8014e70:	b480      	push	{r7}
 8014e72:	b087      	sub	sp, #28
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
    if (key == NULL || (keysize <= 0 && curve_id < 0)) {
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d005      	beq.n	8014e8e <wc_ecc_set_curve+0x1e>
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	dc05      	bgt.n	8014e94 <wc_ecc_set_curve+0x24>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	da02      	bge.n	8014e94 <wc_ecc_set_curve+0x24>
        return BAD_FUNC_ARG;
 8014e8e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8014e92:	e052      	b.n	8014f3a <wc_ecc_set_curve+0xca>
    }

    if (keysize > ECC_MAXSIZE) {
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	2b42      	cmp	r3, #66	; 0x42
 8014e98:	dd02      	ble.n	8014ea0 <wc_ecc_set_curve+0x30>
        return ECC_BAD_ARG_E;
 8014e9a:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8014e9e:	e04c      	b.n	8014f3a <wc_ecc_set_curve+0xca>
    }

    /* handle custom case */
    if (key->idx != ECC_CUSTOM_IDX) {
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ea8:	d046      	beq.n	8014f38 <wc_ecc_set_curve+0xc8>
        int x;

        /* default values */
        key->idx = 0;
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	2200      	movs	r2, #0
 8014eae:	605a      	str	r2, [r3, #4]
        key->dp = NULL;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	611a      	str	r2, [r3, #16]

        /* find ecc_set based on curve_id or key size */
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	617b      	str	r3, [r7, #20]
 8014eba:	e01b      	b.n	8014ef4 <wc_ecc_set_curve+0x84>
            if (curve_id > ECC_CURVE_DEF) {
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	dd0b      	ble.n	8014eda <wc_ecc_set_curve+0x6a>
                if (curve_id == ecc_sets[x].id)
 8014ec2:	4a21      	ldr	r2, [pc, #132]	; (8014f48 <wc_ecc_set_curve+0xd8>)
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	2134      	movs	r1, #52	; 0x34
 8014ec8:	fb01 f303 	mul.w	r3, r1, r3
 8014ecc:	4413      	add	r3, r2
 8014ece:	3304      	adds	r3, #4
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d10a      	bne.n	8014eee <wc_ecc_set_curve+0x7e>
                  break;
 8014ed8:	e017      	b.n	8014f0a <wc_ecc_set_curve+0x9a>
            }
            else if (keysize <= ecc_sets[x].size) {
 8014eda:	4a1b      	ldr	r2, [pc, #108]	; (8014f48 <wc_ecc_set_curve+0xd8>)
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	2134      	movs	r1, #52	; 0x34
 8014ee0:	fb01 f303 	mul.w	r3, r1, r3
 8014ee4:	4413      	add	r3, r2
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	68ba      	ldr	r2, [r7, #8]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	dd0c      	ble.n	8014f08 <wc_ecc_set_curve+0x98>
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	617b      	str	r3, [r7, #20]
 8014ef4:	4a14      	ldr	r2, [pc, #80]	; (8014f48 <wc_ecc_set_curve+0xd8>)
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	2134      	movs	r1, #52	; 0x34
 8014efa:	fb01 f303 	mul.w	r3, r1, r3
 8014efe:	4413      	add	r3, r2
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d1da      	bne.n	8014ebc <wc_ecc_set_curve+0x4c>
 8014f06:	e000      	b.n	8014f0a <wc_ecc_set_curve+0x9a>
                break;
 8014f08:	bf00      	nop
            }
        }
        if (ecc_sets[x].size == 0) {
 8014f0a:	4a0f      	ldr	r2, [pc, #60]	; (8014f48 <wc_ecc_set_curve+0xd8>)
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	2134      	movs	r1, #52	; 0x34
 8014f10:	fb01 f303 	mul.w	r3, r1, r3
 8014f14:	4413      	add	r3, r2
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d102      	bne.n	8014f22 <wc_ecc_set_curve+0xb2>
            WOLFSSL_MSG("ECC Curve not found");
            return ECC_CURVE_OID_E;
 8014f1c:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 8014f20:	e00b      	b.n	8014f3a <wc_ecc_set_curve+0xca>
        }

        key->idx = x;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	697a      	ldr	r2, [r7, #20]
 8014f26:	605a      	str	r2, [r3, #4]
        key->dp  = &ecc_sets[x];
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	2234      	movs	r2, #52	; 0x34
 8014f2c:	fb02 f303 	mul.w	r3, r2, r3
 8014f30:	4a05      	ldr	r2, [pc, #20]	; (8014f48 <wc_ecc_set_curve+0xd8>)
 8014f32:	441a      	add	r2, r3
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	611a      	str	r2, [r3, #16]
    }

    return 0;
 8014f38:	2300      	movs	r3, #0
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	371c      	adds	r7, #28
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr
 8014f46:	bf00      	nop
 8014f48:	0802bf1c 	.word	0x0802bf1c

08014f4c <alt_fp_init>:


#ifdef ALT_ECC_SIZE
static void alt_fp_init(mp_int* a)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
    a->size = FP_SIZE_ECC;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2211      	movs	r2, #17
 8014f58:	609a      	str	r2, [r3, #8]
    mp_zero(a);
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f00b f9a5 	bl	80202aa <fp_zero>
}
 8014f60:	bf00      	nop
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <_ecc_projective_add_point>:
   mp       The "b" value from montgomery_setup()
   return   MP_OKAY on success
*/
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
                                     mp_int* a, mp_int* modulus, mp_digit mp)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b0a6      	sub	sp, #152	; 0x98
 8014f6c:	af02      	add	r7, sp, #8
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	607a      	str	r2, [r7, #4]
 8014f74:	603b      	str	r3, [r7, #0]
#if !defined(WOLFSSL_SP_MATH)
#ifdef WOLFSSL_SMALL_STACK
   mp_int* t1 = NULL;
 8014f76:	2300      	movs	r3, #0
 8014f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   mp_int* t2 = NULL;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef ALT_ECC_SIZE
   mp_int* rx = NULL;
 8014f82:	2300      	movs	r3, #0
 8014f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   mp_int* ry = NULL;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   mp_int* rz = NULL;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
   mp_int  *x, *y, *z;
   int     err;

   /* if Q == R then swap P and Q, so we don't require a local x,y,z */
   if (Q == R) {
 8014f90:	68ba      	ldr	r2, [r7, #8]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	d105      	bne.n	8014fa4 <_ecc_projective_add_point+0x3c>
      ecc_point* tPt  = P;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	677b      	str	r3, [r7, #116]	; 0x74
      P = Q;
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	60fb      	str	r3, [r7, #12]
      Q = tPt;
 8014fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014fa2:	60bb      	str	r3, [r7, #8]
#endif
   }
   else
#endif /* WOLFSSL_SMALL_STACK_CACHE */
   {
       t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8014fa4:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8014fa8:	f003 fe00 	bl	8018bac <wolfSSL_Malloc>
 8014fac:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
       t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8014fb0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8014fb4:	f003 fdfa 	bl	8018bac <wolfSSL_Malloc>
 8014fb8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
       if (t1 == NULL || t2 == NULL) {
 8014fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d003      	beq.n	8014fcc <_ecc_projective_add_point+0x64>
 8014fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d115      	bne.n	8014ff8 <_ecc_projective_add_point+0x90>
           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8014fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fd0:	617b      	str	r3, [r7, #20]
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d002      	beq.n	8014fde <_ecc_projective_add_point+0x76>
 8014fd8:	6978      	ldr	r0, [r7, #20]
 8014fda:	f003 fe03 	bl	8018be4 <wolfSSL_Free>
           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8014fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014fe2:	613b      	str	r3, [r7, #16]
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d002      	beq.n	8014ff0 <_ecc_projective_add_point+0x88>
 8014fea:	6938      	ldr	r0, [r7, #16]
 8014fec:	f003 fdfa 	bl	8018be4 <wolfSSL_Free>
           return MEMORY_E;
 8014ff0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8014ff4:	f000 bc03 	b.w	80157fe <_ecc_projective_add_point+0x896>
       }
#ifdef ALT_ECC_SIZE
       rx = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8014ff8:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8014ffc:	f003 fdd6 	bl	8018bac <wolfSSL_Malloc>
 8015000:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
       ry = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015004:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015008:	f003 fdd0 	bl	8018bac <wolfSSL_Malloc>
 801500c:	67f8      	str	r0, [r7, #124]	; 0x7c
       rz = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 801500e:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015012:	f003 fdcb 	bl	8018bac <wolfSSL_Malloc>
 8015016:	67b8      	str	r0, [r7, #120]	; 0x78
       if (rx == NULL || ry == NULL || rz == NULL) {
 8015018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801501c:	2b00      	cmp	r3, #0
 801501e:	d005      	beq.n	801502c <_ecc_projective_add_point+0xc4>
 8015020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015022:	2b00      	cmp	r3, #0
 8015024:	d002      	beq.n	801502c <_ecc_projective_add_point+0xc4>
 8015026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015028:	2b00      	cmp	r3, #0
 801502a:	d12d      	bne.n	8015088 <_ecc_projective_add_point+0x120>
           XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 801502c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801502e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015032:	2b00      	cmp	r3, #0
 8015034:	d002      	beq.n	801503c <_ecc_projective_add_point+0xd4>
 8015036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015038:	f003 fdd4 	bl	8018be4 <wolfSSL_Free>
           XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 801503c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801503e:	627b      	str	r3, [r7, #36]	; 0x24
 8015040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015042:	2b00      	cmp	r3, #0
 8015044:	d002      	beq.n	801504c <_ecc_projective_add_point+0xe4>
 8015046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015048:	f003 fdcc 	bl	8018be4 <wolfSSL_Free>
           XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 801504c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015050:	623b      	str	r3, [r7, #32]
 8015052:	6a3b      	ldr	r3, [r7, #32]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d002      	beq.n	801505e <_ecc_projective_add_point+0xf6>
 8015058:	6a38      	ldr	r0, [r7, #32]
 801505a:	f003 fdc3 	bl	8018be4 <wolfSSL_Free>
           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 801505e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015062:	61fb      	str	r3, [r7, #28]
 8015064:	69fb      	ldr	r3, [r7, #28]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d002      	beq.n	8015070 <_ecc_projective_add_point+0x108>
 801506a:	69f8      	ldr	r0, [r7, #28]
 801506c:	f003 fdba 	bl	8018be4 <wolfSSL_Free>
           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015074:	61bb      	str	r3, [r7, #24]
 8015076:	69bb      	ldr	r3, [r7, #24]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d002      	beq.n	8015082 <_ecc_projective_add_point+0x11a>
 801507c:	69b8      	ldr	r0, [r7, #24]
 801507e:	f003 fdb1 	bl	8018be4 <wolfSSL_Free>
           return MEMORY_E;
 8015082:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8015086:	e3ba      	b.n	80157fe <_ecc_projective_add_point+0x896>
       }
#endif
   }
#endif /* WOLFSSL_SMALL_STACK */

   if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
 8015088:	2300      	movs	r3, #0
 801508a:	9301      	str	r3, [sp, #4]
 801508c:	2300      	movs	r3, #0
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	2300      	movs	r3, #0
 8015092:	2200      	movs	r2, #0
 8015094:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015098:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801509c:	f00b f988 	bl	80203b0 <mp_init_multi>
 80150a0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80150a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d02d      	beq.n	8015108 <_ecc_projective_add_point+0x1a0>
   #ifdef WOLFSSL_SMALL_STACK_CACHE
       if (R->key == NULL)
   #endif
       {
       #ifdef ALT_ECC_SIZE
          XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 80150ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80150ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80150b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d002      	beq.n	80150bc <_ecc_projective_add_point+0x154>
 80150b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80150b8:	f003 fd94 	bl	8018be4 <wolfSSL_Free>
          XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 80150bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80150be:	63bb      	str	r3, [r7, #56]	; 0x38
 80150c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d002      	beq.n	80150cc <_ecc_projective_add_point+0x164>
 80150c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80150c8:	f003 fd8c 	bl	8018be4 <wolfSSL_Free>
          XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 80150cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80150d0:	637b      	str	r3, [r7, #52]	; 0x34
 80150d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d002      	beq.n	80150de <_ecc_projective_add_point+0x176>
 80150d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80150da:	f003 fd83 	bl	8018be4 <wolfSSL_Free>
       #endif
          XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 80150de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80150e2:	633b      	str	r3, [r7, #48]	; 0x30
 80150e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d002      	beq.n	80150f0 <_ecc_projective_add_point+0x188>
 80150ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150ec:	f003 fd7a 	bl	8018be4 <wolfSSL_Free>
          XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 80150f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80150f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d002      	beq.n	8015102 <_ecc_projective_add_point+0x19a>
 80150fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150fe:	f003 fd71 	bl	8018be4 <wolfSSL_Free>
       }
#endif
      return err;
 8015102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015106:	e37a      	b.n	80157fe <_ecc_projective_add_point+0x896>
   }

   /* should we dbl instead? */
   if (err == MP_OKAY) {
 8015108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801510c:	2b00      	cmp	r3, #0
 801510e:	d10b      	bne.n	8015128 <_ecc_projective_add_point+0x1c0>
#ifdef ECC_TIMING_RESISTANT
       err = mp_submod_ct(modulus, Q->y, modulus, t1);
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	6859      	ldr	r1, [r3, #4]
 8015114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015118:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801511c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8015120:	f00b f9b8 	bl	8020494 <mp_submod_ct>
 8015124:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#else
       err = mp_sub(modulus, Q->y, t1);
#endif
   }
   if (err == MP_OKAY) {
 8015128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801512c:	2b00      	cmp	r3, #0
 801512e:	d171      	bne.n	8015214 <_ecc_projective_add_point+0x2ac>
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	681a      	ldr	r2, [r3, #0]
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	4619      	mov	r1, r3
 801513a:	4610      	mov	r0, r2
 801513c:	f00b fa24 	bl	8020588 <mp_cmp>
 8015140:	4603      	mov	r3, r0
 8015142:	2b00      	cmp	r3, #0
 8015144:	d166      	bne.n	8015214 <_ecc_projective_add_point+0x2ac>
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	689b      	ldr	r3, [r3, #8]
 801514a:	4618      	mov	r0, r3
 801514c:	f00b ff61 	bl	8021012 <get_digit_count>
 8015150:	4603      	mov	r3, r0
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 8015152:	2b00      	cmp	r3, #0
 8015154:	d05e      	beq.n	8015214 <_ecc_projective_add_point+0x2ac>
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	689a      	ldr	r2, [r3, #8]
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	689b      	ldr	r3, [r3, #8]
 801515e:	4619      	mov	r1, r3
 8015160:	4610      	mov	r0, r2
 8015162:	f00b fa11 	bl	8020588 <mp_cmp>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d153      	bne.n	8015214 <_ecc_projective_add_point+0x2ac>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	685a      	ldr	r2, [r3, #4]
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	4619      	mov	r1, r3
 8015176:	4610      	mov	r0, r2
 8015178:	f00b fa06 	bl	8020588 <mp_cmp>
 801517c:	4603      	mov	r3, r0
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 801517e:	2b00      	cmp	r3, #0
 8015180:	d009      	beq.n	8015196 <_ecc_projective_add_point+0x22e>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801518a:	4618      	mov	r0, r3
 801518c:	f00b f9fc 	bl	8020588 <mp_cmp>
 8015190:	4603      	mov	r3, r0
 8015192:	2b00      	cmp	r3, #0
 8015194:	d13e      	bne.n	8015214 <_ecc_projective_add_point+0x2ac>
           mp_clear(t1);
 8015196:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801519a:	f00b f8ef 	bl	802037c <mp_clear>
           mp_clear(t2);
 801519e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80151a2:	f00b f8eb 	bl	802037c <mp_clear>
       #ifdef WOLFSSL_SMALL_STACK_CACHE
           if (R->key == NULL)
       #endif
           {
            #ifdef ALT_ECC_SIZE
               XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 80151a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151a8:	673b      	str	r3, [r7, #112]	; 0x70
 80151aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d002      	beq.n	80151b6 <_ecc_projective_add_point+0x24e>
 80151b0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80151b2:	f003 fd17 	bl	8018be4 <wolfSSL_Free>
               XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 80151b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80151b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80151ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d002      	beq.n	80151c6 <_ecc_projective_add_point+0x25e>
 80151c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80151c2:	f003 fd0f 	bl	8018be4 <wolfSSL_Free>
               XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 80151c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80151ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80151cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d002      	beq.n	80151d8 <_ecc_projective_add_point+0x270>
 80151d2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80151d4:	f003 fd06 	bl	8018be4 <wolfSSL_Free>
            #endif
               XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 80151d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80151dc:	667b      	str	r3, [r7, #100]	; 0x64
 80151de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d002      	beq.n	80151ea <_ecc_projective_add_point+0x282>
 80151e4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80151e6:	f003 fcfd 	bl	8018be4 <wolfSSL_Free>
               XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 80151ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151ee:	663b      	str	r3, [r7, #96]	; 0x60
 80151f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d002      	beq.n	80151fc <_ecc_projective_add_point+0x294>
 80151f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80151f8:	f003 fcf4 	bl	8018be4 <wolfSSL_Free>
           }
        #endif
          return _ecc_projective_dbl_point(P, R, a, modulus, mp);
 80151fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015200:	9300      	str	r3, [sp, #0]
 8015202:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015206:	683a      	ldr	r2, [r7, #0]
 8015208:	6879      	ldr	r1, [r7, #4]
 801520a:	68f8      	ldr	r0, [r7, #12]
 801520c:	f000 fafb 	bl	8015806 <_ecc_projective_dbl_point>
 8015210:	4603      	mov	r3, r0
 8015212:	e2f4      	b.n	80157fe <_ecc_projective_add_point+0x896>
       }
   }

   if (err != MP_OKAY) {
 8015214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015218:	2b00      	cmp	r3, #0
 801521a:	f040 82b6 	bne.w	801578a <_ecc_projective_add_point+0x822>

/* If use ALT_ECC_SIZE we need to use local stack variable since
   ecc_point x,y,z is reduced size */
#ifdef ALT_ECC_SIZE
   /* Use local stack variable */
   x = rx;
 801521e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015222:	65fb      	str	r3, [r7, #92]	; 0x5c
   y = ry;
 8015224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015226:	65bb      	str	r3, [r7, #88]	; 0x58
   z = rz;
 8015228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801522a:	657b      	str	r3, [r7, #84]	; 0x54

   if ((err = mp_init_multi(x, y, z, NULL, NULL, NULL)) != MP_OKAY) {
 801522c:	2300      	movs	r3, #0
 801522e:	9301      	str	r3, [sp, #4]
 8015230:	2300      	movs	r3, #0
 8015232:	9300      	str	r3, [sp, #0]
 8015234:	2300      	movs	r3, #0
 8015236:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015238:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801523a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801523c:	f00b f8b8 	bl	80203b0 <mp_init_multi>
 8015240:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8015244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015248:	2b00      	cmp	r3, #0
 801524a:	f040 82a0 	bne.w	801578e <_ecc_projective_add_point+0x826>
   x = R->x;
   y = R->y;
   z = R->z;
#endif

   if (err == MP_OKAY)
 801524e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015252:	2b00      	cmp	r3, #0
 8015254:	d107      	bne.n	8015266 <_ecc_projective_add_point+0x2fe>
       err = mp_copy(P->x, x);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801525c:	4618      	mov	r0, r3
 801525e:	f00b fa4c 	bl	80206fa <mp_copy>
 8015262:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801526a:	2b00      	cmp	r3, #0
 801526c:	d107      	bne.n	801527e <_ecc_projective_add_point+0x316>
       err = mp_copy(P->y, y);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015274:	4618      	mov	r0, r3
 8015276:	f00b fa40 	bl	80206fa <mp_copy>
 801527a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 801527e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015282:	2b00      	cmp	r3, #0
 8015284:	d107      	bne.n	8015296 <_ecc_projective_add_point+0x32e>
       err = mp_copy(P->z, z);
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	689b      	ldr	r3, [r3, #8]
 801528a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801528c:	4618      	mov	r0, r3
 801528e:	f00b fa34 	bl	80206fa <mp_copy>
 8015292:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* if Z is one then these are no-operations */
   if (err == MP_OKAY) {
 8015296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801529a:	2b00      	cmp	r3, #0
 801529c:	d16d      	bne.n	801537a <_ecc_projective_add_point+0x412>
       if (!mp_iszero(Q->z)) {
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	689b      	ldr	r3, [r3, #8]
 80152a2:	4618      	mov	r0, r3
 80152a4:	f00b fa37 	bl	8020716 <mp_iszero>
 80152a8:	4603      	mov	r3, r0
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d165      	bne.n	801537a <_ecc_projective_add_point+0x412>
           /* T1 = Z' * Z' */
           err = mp_sqr(Q->z, t1);
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	689b      	ldr	r3, [r3, #8]
 80152b2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80152b6:	4618      	mov	r0, r3
 80152b8:	f00b fc6c 	bl	8020b94 <mp_sqr>
 80152bc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
           if (err == MP_OKAY)
 80152c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d109      	bne.n	80152dc <_ecc_projective_add_point+0x374>
               err = mp_montgomery_reduce(t1, modulus, mp);
 80152c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80152cc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80152d0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80152d4:	f00b fc6c 	bl	8020bb0 <mp_montgomery_reduce>
 80152d8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

           /* X = X * T1 */
           if (err == MP_OKAY)
 80152dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d107      	bne.n	80152f4 <_ecc_projective_add_point+0x38c>
               err = mp_mul(t1, x, x);
 80152e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80152e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80152e8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80152ec:	f00b f8b0 	bl	8020450 <mp_mul>
 80152f0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
           if (err == MP_OKAY)
 80152f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d108      	bne.n	801530e <_ecc_projective_add_point+0x3a6>
               err = mp_montgomery_reduce(x, modulus, mp);
 80152fc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015300:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015304:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015306:	f00b fc53 	bl	8020bb0 <mp_montgomery_reduce>
 801530a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

           /* T1 = Z' * T1 */
           if (err == MP_OKAY)
 801530e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015312:	2b00      	cmp	r3, #0
 8015314:	d10a      	bne.n	801532c <_ecc_projective_add_point+0x3c4>
               err = mp_mul(Q->z, t1, t1);
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	689b      	ldr	r3, [r3, #8]
 801531a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801531e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015322:	4618      	mov	r0, r3
 8015324:	f00b f894 	bl	8020450 <mp_mul>
 8015328:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
           if (err == MP_OKAY)
 801532c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015330:	2b00      	cmp	r3, #0
 8015332:	d109      	bne.n	8015348 <_ecc_projective_add_point+0x3e0>
               err = mp_montgomery_reduce(t1, modulus, mp);
 8015334:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015338:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801533c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015340:	f00b fc36 	bl	8020bb0 <mp_montgomery_reduce>
 8015344:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

           /* Y = Y * T1 */
           if (err == MP_OKAY)
 8015348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801534c:	2b00      	cmp	r3, #0
 801534e:	d107      	bne.n	8015360 <_ecc_projective_add_point+0x3f8>
               err = mp_mul(t1, y, y);
 8015350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015354:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015358:	f00b f87a 	bl	8020450 <mp_mul>
 801535c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
           if (err == MP_OKAY)
 8015360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015364:	2b00      	cmp	r3, #0
 8015366:	d108      	bne.n	801537a <_ecc_projective_add_point+0x412>
               err = mp_montgomery_reduce(y, modulus, mp);
 8015368:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801536c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015370:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015372:	f00b fc1d 	bl	8020bb0 <mp_montgomery_reduce>
 8015376:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
       }
   }

   /* T1 = Z*Z */
   if (err == MP_OKAY)
 801537a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801537e:	2b00      	cmp	r3, #0
 8015380:	d106      	bne.n	8015390 <_ecc_projective_add_point+0x428>
       err = mp_sqr(z, t1);
 8015382:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015386:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015388:	f00b fc04 	bl	8020b94 <mp_sqr>
 801538c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015394:	2b00      	cmp	r3, #0
 8015396:	d109      	bne.n	80153ac <_ecc_projective_add_point+0x444>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8015398:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801539c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80153a0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80153a4:	f00b fc04 	bl	8020bb0 <mp_montgomery_reduce>
 80153a8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T2 = X' * T1 */
   if (err == MP_OKAY)
 80153ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d10a      	bne.n	80153ca <_ecc_projective_add_point+0x462>
       err = mp_mul(Q->x, t1, t2);
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80153bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80153c0:	4618      	mov	r0, r3
 80153c2:	f00b f845 	bl	8020450 <mp_mul>
 80153c6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 80153ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d109      	bne.n	80153e6 <_ecc_projective_add_point+0x47e>
       err = mp_montgomery_reduce(t2, modulus, mp);
 80153d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80153d6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80153da:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80153de:	f00b fbe7 	bl	8020bb0 <mp_montgomery_reduce>
 80153e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T1 = Z * T1 */
   if (err == MP_OKAY)
 80153e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d108      	bne.n	8015400 <_ecc_projective_add_point+0x498>
       err = mp_mul(z, t1, t1);
 80153ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80153f2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80153f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80153f8:	f00b f82a 	bl	8020450 <mp_mul>
 80153fc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015404:	2b00      	cmp	r3, #0
 8015406:	d109      	bne.n	801541c <_ecc_projective_add_point+0x4b4>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8015408:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801540c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015410:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015414:	f00b fbcc 	bl	8020bb0 <mp_montgomery_reduce>
 8015418:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T1 = Y' * T1 */
   if (err == MP_OKAY)
 801541c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015420:	2b00      	cmp	r3, #0
 8015422:	d10a      	bne.n	801543a <_ecc_projective_add_point+0x4d2>
       err = mp_mul(Q->y, t1, t1);
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801542c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015430:	4618      	mov	r0, r3
 8015432:	f00b f80d 	bl	8020450 <mp_mul>
 8015436:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 801543a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801543e:	2b00      	cmp	r3, #0
 8015440:	d109      	bne.n	8015456 <_ecc_projective_add_point+0x4ee>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8015442:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015446:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801544a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801544e:	f00b fbaf 	bl	8020bb0 <mp_montgomery_reduce>
 8015452:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* Y = Y - T1 */
   if (err == MP_OKAY)
 8015456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801545a:	2b00      	cmp	r3, #0
 801545c:	d109      	bne.n	8015472 <_ecc_projective_add_point+0x50a>
       err = mp_submod_ct(y, t1, modulus, y);
 801545e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015460:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015464:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015468:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801546a:	f00b f813 	bl	8020494 <mp_submod_ct>
 801546e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* T1 = 2T1 */
   if (err == MP_OKAY)
 8015472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015476:	2b00      	cmp	r3, #0
 8015478:	d10b      	bne.n	8015492 <_ecc_projective_add_point+0x52a>
       err = mp_addmod_ct(t1, t1, modulus, t1);
 801547a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801547e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015482:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015486:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801548a:	f00b f815 	bl	80204b8 <mp_addmod_ct>
 801548e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* T1 = Y + T1 */
   if (err == MP_OKAY)
 8015492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015496:	2b00      	cmp	r3, #0
 8015498:	d10a      	bne.n	80154b0 <_ecc_projective_add_point+0x548>
       err = mp_addmod_ct(t1, y, modulus, t1);
 801549a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801549e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80154a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80154a4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80154a8:	f00b f806 	bl	80204b8 <mp_addmod_ct>
 80154ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* X = X - T2 */
   if (err == MP_OKAY)
 80154b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d109      	bne.n	80154cc <_ecc_projective_add_point+0x564>
       err = mp_submod_ct(x, t2, modulus, x);
 80154b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80154ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80154be:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80154c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80154c4:	f00a ffe6 	bl	8020494 <mp_submod_ct>
 80154c8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* T2 = 2T2 */
   if (err == MP_OKAY)
 80154cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d10b      	bne.n	80154ec <_ecc_projective_add_point+0x584>
       err = mp_addmod_ct(t2, t2, modulus, t2);
 80154d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80154d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80154dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80154e0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80154e4:	f00a ffe8 	bl	80204b8 <mp_addmod_ct>
 80154e8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* T2 = X + T2 */
   if (err == MP_OKAY)
 80154ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d10a      	bne.n	801550a <_ecc_projective_add_point+0x5a2>
       err = mp_addmod_ct(t2, x, modulus, t2);
 80154f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80154f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80154fc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80154fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015502:	f00a ffd9 	bl	80204b8 <mp_addmod_ct>
 8015506:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   if (err == MP_OKAY) {
 801550a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801550e:	2b00      	cmp	r3, #0
 8015510:	d11d      	bne.n	801554e <_ecc_projective_add_point+0x5e6>
       if (!mp_iszero(Q->z)) {
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	689b      	ldr	r3, [r3, #8]
 8015516:	4618      	mov	r0, r3
 8015518:	f00b f8fd 	bl	8020716 <mp_iszero>
 801551c:	4603      	mov	r3, r0
 801551e:	2b00      	cmp	r3, #0
 8015520:	d115      	bne.n	801554e <_ecc_projective_add_point+0x5e6>
           /* Z = Z * Z' */
           err = mp_mul(z, Q->z, z);
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	689b      	ldr	r3, [r3, #8]
 8015526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015528:	4619      	mov	r1, r3
 801552a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801552c:	f00a ff90 	bl	8020450 <mp_mul>
 8015530:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
           if (err == MP_OKAY)
 8015534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015538:	2b00      	cmp	r3, #0
 801553a:	d108      	bne.n	801554e <_ecc_projective_add_point+0x5e6>
               err = mp_montgomery_reduce(z, modulus, mp);
 801553c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015540:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015544:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015546:	f00b fb33 	bl	8020bb0 <mp_montgomery_reduce>
 801554a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
       }
   }

   /* Z = Z * X */
   if (err == MP_OKAY)
 801554e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015552:	2b00      	cmp	r3, #0
 8015554:	d106      	bne.n	8015564 <_ecc_projective_add_point+0x5fc>
       err = mp_mul(z, x, z);
 8015556:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015558:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801555a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801555c:	f00a ff78 	bl	8020450 <mp_mul>
 8015560:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015568:	2b00      	cmp	r3, #0
 801556a:	d108      	bne.n	801557e <_ecc_projective_add_point+0x616>
       err = mp_montgomery_reduce(z, modulus, mp);
 801556c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015570:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015574:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015576:	f00b fb1b 	bl	8020bb0 <mp_montgomery_reduce>
 801557a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T1 = T1 * X  */
   if (err == MP_OKAY)
 801557e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015582:	2b00      	cmp	r3, #0
 8015584:	d108      	bne.n	8015598 <_ecc_projective_add_point+0x630>
       err = mp_mul(t1, x, t1);
 8015586:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801558a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801558c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015590:	f00a ff5e 	bl	8020450 <mp_mul>
 8015594:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801559c:	2b00      	cmp	r3, #0
 801559e:	d109      	bne.n	80155b4 <_ecc_projective_add_point+0x64c>
       err = mp_montgomery_reduce(t1, modulus, mp);
 80155a0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80155a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80155a8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80155ac:	f00b fb00 	bl	8020bb0 <mp_montgomery_reduce>
 80155b0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* X = X * X */
   if (err == MP_OKAY)
 80155b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d105      	bne.n	80155c8 <_ecc_projective_add_point+0x660>
       err = mp_sqr(x, x);
 80155bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80155be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80155c0:	f00b fae8 	bl	8020b94 <mp_sqr>
 80155c4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 80155c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d108      	bne.n	80155e2 <_ecc_projective_add_point+0x67a>
       err = mp_montgomery_reduce(x, modulus, mp);
 80155d0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80155d4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80155d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80155da:	f00b fae9 	bl	8020bb0 <mp_montgomery_reduce>
 80155de:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T2 = T2 * x */
   if (err == MP_OKAY)
 80155e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d108      	bne.n	80155fc <_ecc_projective_add_point+0x694>
       err = mp_mul(t2, x, t2);
 80155ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80155ee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80155f0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80155f4:	f00a ff2c 	bl	8020450 <mp_mul>
 80155f8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 80155fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015600:	2b00      	cmp	r3, #0
 8015602:	d109      	bne.n	8015618 <_ecc_projective_add_point+0x6b0>
       err = mp_montgomery_reduce(t2, modulus, mp);
 8015604:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015608:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801560c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015610:	f00b face 	bl	8020bb0 <mp_montgomery_reduce>
 8015614:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T1 = T1 * X  */
   if (err == MP_OKAY)
 8015618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801561c:	2b00      	cmp	r3, #0
 801561e:	d108      	bne.n	8015632 <_ecc_projective_add_point+0x6ca>
       err = mp_mul(t1, x, t1);
 8015620:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015624:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8015626:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801562a:	f00a ff11 	bl	8020450 <mp_mul>
 801562e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015636:	2b00      	cmp	r3, #0
 8015638:	d109      	bne.n	801564e <_ecc_projective_add_point+0x6e6>
       err = mp_montgomery_reduce(t1, modulus, mp);
 801563a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801563e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015642:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015646:	f00b fab3 	bl	8020bb0 <mp_montgomery_reduce>
 801564a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* X = Y*Y */
   if (err == MP_OKAY)
 801564e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015652:	2b00      	cmp	r3, #0
 8015654:	d105      	bne.n	8015662 <_ecc_projective_add_point+0x6fa>
       err = mp_sqr(y, x);
 8015656:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8015658:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801565a:	f00b fa9b 	bl	8020b94 <mp_sqr>
 801565e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015666:	2b00      	cmp	r3, #0
 8015668:	d108      	bne.n	801567c <_ecc_projective_add_point+0x714>
       err = mp_montgomery_reduce(x, modulus, mp);
 801566a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801566e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015672:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015674:	f00b fa9c 	bl	8020bb0 <mp_montgomery_reduce>
 8015678:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* X = X - T2 */
   if (err == MP_OKAY)
 801567c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015680:	2b00      	cmp	r3, #0
 8015682:	d109      	bne.n	8015698 <_ecc_projective_add_point+0x730>
       err = mp_submod_ct(x, t2, modulus, x);
 8015684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015686:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801568a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801568e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015690:	f00a ff00 	bl	8020494 <mp_submod_ct>
 8015694:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* T2 = T2 - X */
   if (err == MP_OKAY)
 8015698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801569c:	2b00      	cmp	r3, #0
 801569e:	d10a      	bne.n	80156b6 <_ecc_projective_add_point+0x74e>
       err = mp_submod_ct(t2, x, modulus, t2);
 80156a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80156a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80156a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80156aa:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80156ae:	f00a fef1 	bl	8020494 <mp_submod_ct>
 80156b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* T2 = T2 - X */
   if (err == MP_OKAY)
 80156b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d10a      	bne.n	80156d4 <_ecc_projective_add_point+0x76c>
       err = mp_submod_ct(t2, x, modulus, t2);
 80156be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80156c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80156c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80156c8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80156cc:	f00a fee2 	bl	8020494 <mp_submod_ct>
 80156d0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* T2 = T2 * Y */
   if (err == MP_OKAY)
 80156d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d108      	bne.n	80156ee <_ecc_projective_add_point+0x786>
       err = mp_mul(t2, y, t2);
 80156dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80156e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80156e2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80156e6:	f00a feb3 	bl	8020450 <mp_mul>
 80156ea:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 80156ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d109      	bne.n	801570a <_ecc_projective_add_point+0x7a2>
       err = mp_montgomery_reduce(t2, modulus, mp);
 80156f6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80156fa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80156fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015702:	f00b fa55 	bl	8020bb0 <mp_montgomery_reduce>
 8015706:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* Y = T2 - T1 */
   if (err == MP_OKAY)
 801570a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801570e:	2b00      	cmp	r3, #0
 8015710:	d10a      	bne.n	8015728 <_ecc_projective_add_point+0x7c0>
       err = mp_submod_ct(t2, t1, modulus, y);
 8015712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015714:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015718:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801571c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015720:	f00a feb8 	bl	8020494 <mp_submod_ct>
 8015724:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* Y = Y/2 */
   if (err == MP_OKAY)
 8015728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801572c:	2b00      	cmp	r3, #0
 801572e:	d107      	bne.n	8015740 <_ecc_projective_add_point+0x7d8>
       err = mp_div_2_mod_ct(y, modulus, y);
 8015730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015732:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015736:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015738:	f00b fa58 	bl	8020bec <mp_div_2_mod_ct>
 801573c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

#ifdef ALT_ECC_SIZE
   if (err == MP_OKAY)
 8015740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015744:	2b00      	cmp	r3, #0
 8015746:	d107      	bne.n	8015758 <_ecc_projective_add_point+0x7f0>
       err = mp_copy(x, R->x);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	4619      	mov	r1, r3
 801574e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015750:	f00a ffd3 	bl	80206fa <mp_copy>
 8015754:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801575c:	2b00      	cmp	r3, #0
 801575e:	d107      	bne.n	8015770 <_ecc_projective_add_point+0x808>
       err = mp_copy(y, R->y);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	4619      	mov	r1, r3
 8015766:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015768:	f00a ffc7 	bl	80206fa <mp_copy>
 801576c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015774:	2b00      	cmp	r3, #0
 8015776:	d10c      	bne.n	8015792 <_ecc_projective_add_point+0x82a>
       err = mp_copy(z, R->z);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	689b      	ldr	r3, [r3, #8]
 801577c:	4619      	mov	r1, r3
 801577e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015780:	f00a ffbb 	bl	80206fa <mp_copy>
 8015784:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8015788:	e004      	b.n	8015794 <_ecc_projective_add_point+0x82c>
      goto done;
 801578a:	bf00      	nop
 801578c:	e002      	b.n	8015794 <_ecc_projective_add_point+0x82c>
      goto done;
 801578e:	bf00      	nop
 8015790:	e000      	b.n	8015794 <_ecc_projective_add_point+0x82c>
#endif

done:
 8015792:	bf00      	nop

   /* clean up */
   mp_clear(t1);
 8015794:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015798:	f00a fdf0 	bl	802037c <mp_clear>
   mp_clear(t2);
 801579c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80157a0:	f00a fdec 	bl	802037c <mp_clear>
#ifdef WOLFSSL_SMALL_STACK_CACHE
   if (R->key == NULL)
#endif
   {
   #ifdef ALT_ECC_SIZE
      XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 80157a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80157a6:	653b      	str	r3, [r7, #80]	; 0x50
 80157a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d002      	beq.n	80157b4 <_ecc_projective_add_point+0x84c>
 80157ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80157b0:	f003 fa18 	bl	8018be4 <wolfSSL_Free>
      XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 80157b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80157b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80157b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d002      	beq.n	80157c4 <_ecc_projective_add_point+0x85c>
 80157be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80157c0:	f003 fa10 	bl	8018be4 <wolfSSL_Free>
      XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 80157c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80157c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80157ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d002      	beq.n	80157d6 <_ecc_projective_add_point+0x86e>
 80157d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80157d2:	f003 fa07 	bl	8018be4 <wolfSSL_Free>
   #endif
      XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 80157d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80157da:	647b      	str	r3, [r7, #68]	; 0x44
 80157dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d002      	beq.n	80157e8 <_ecc_projective_add_point+0x880>
 80157e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80157e4:	f003 f9fe 	bl	8018be4 <wolfSSL_Free>
      XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 80157e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80157ec:	643b      	str	r3, [r7, #64]	; 0x40
 80157ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d002      	beq.n	80157fa <_ecc_projective_add_point+0x892>
 80157f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80157f6:	f003 f9f5 	bl	8018be4 <wolfSSL_Free>
   }
#endif

   return err;
 80157fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                         R->x, R->y, R->z);
    }
#endif
    return ECC_BAD_ARG_E;
#endif
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3790      	adds	r7, #144	; 0x90
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}

08015806 <_ecc_projective_dbl_point>:
   mp       The "b" value from montgomery_setup()
   return   MP_OKAY on success
*/
static int _ecc_projective_dbl_point(ecc_point *P, ecc_point *R, mp_int* a,
                                     mp_int* modulus, mp_digit mp)
{
 8015806:	b580      	push	{r7, lr}
 8015808:	b0a6      	sub	sp, #152	; 0x98
 801580a:	af02      	add	r7, sp, #8
 801580c:	60f8      	str	r0, [r7, #12]
 801580e:	60b9      	str	r1, [r7, #8]
 8015810:	607a      	str	r2, [r7, #4]
 8015812:	603b      	str	r3, [r7, #0]
#if !defined(WOLFSSL_SP_MATH)
#ifdef WOLFSSL_SMALL_STACK
   mp_int* t1 = NULL;
 8015814:	2300      	movs	r3, #0
 8015816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   mp_int* t2 = NULL;
 801581a:	2300      	movs	r3, #0
 801581c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef ALT_ECC_SIZE
   mp_int* rx = NULL;
 8015820:	2300      	movs	r3, #0
 8015822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   mp_int* ry = NULL;
 8015826:	2300      	movs	r3, #0
 8015828:	67fb      	str	r3, [r7, #124]	; 0x7c
   mp_int* rz = NULL;
 801582a:	2300      	movs	r3, #0
 801582c:	67bb      	str	r3, [r7, #120]	; 0x78
   #endif
   }
   else
#endif /* WOLFSSL_SMALL_STACK_CACHE */
   {
       t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 801582e:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015832:	f003 f9bb 	bl	8018bac <wolfSSL_Malloc>
 8015836:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
       t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 801583a:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801583e:	f003 f9b5 	bl	8018bac <wolfSSL_Malloc>
 8015842:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
       if (t1 == NULL || t2 == NULL) {
 8015846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801584a:	2b00      	cmp	r3, #0
 801584c:	d003      	beq.n	8015856 <_ecc_projective_dbl_point+0x50>
 801584e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015852:	2b00      	cmp	r3, #0
 8015854:	d114      	bne.n	8015880 <_ecc_projective_dbl_point+0x7a>
           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8015856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801585a:	61bb      	str	r3, [r7, #24]
 801585c:	69bb      	ldr	r3, [r7, #24]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d002      	beq.n	8015868 <_ecc_projective_dbl_point+0x62>
 8015862:	69b8      	ldr	r0, [r7, #24]
 8015864:	f003 f9be 	bl	8018be4 <wolfSSL_Free>
           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801586c:	617b      	str	r3, [r7, #20]
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d002      	beq.n	801587a <_ecc_projective_dbl_point+0x74>
 8015874:	6978      	ldr	r0, [r7, #20]
 8015876:	f003 f9b5 	bl	8018be4 <wolfSSL_Free>
           return MEMORY_E;
 801587a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801587e:	e29f      	b.n	8015dc0 <_ecc_projective_dbl_point+0x5ba>
       }
    #ifdef ALT_ECC_SIZE
       rx = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015880:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015884:	f003 f992 	bl	8018bac <wolfSSL_Malloc>
 8015888:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
       ry = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 801588c:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015890:	f003 f98c 	bl	8018bac <wolfSSL_Malloc>
 8015894:	67f8      	str	r0, [r7, #124]	; 0x7c
       rz = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015896:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801589a:	f003 f987 	bl	8018bac <wolfSSL_Malloc>
 801589e:	67b8      	str	r0, [r7, #120]	; 0x78
       if (rx == NULL || ry == NULL || rz == NULL) {
 80158a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d005      	beq.n	80158b4 <_ecc_projective_dbl_point+0xae>
 80158a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d002      	beq.n	80158b4 <_ecc_projective_dbl_point+0xae>
 80158ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d12d      	bne.n	8015910 <_ecc_projective_dbl_point+0x10a>
           XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 80158b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80158b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d002      	beq.n	80158c4 <_ecc_projective_dbl_point+0xbe>
 80158be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158c0:	f003 f990 	bl	8018be4 <wolfSSL_Free>
           XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 80158c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80158c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80158c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d002      	beq.n	80158d4 <_ecc_projective_dbl_point+0xce>
 80158ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158d0:	f003 f988 	bl	8018be4 <wolfSSL_Free>
           XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 80158d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80158d8:	627b      	str	r3, [r7, #36]	; 0x24
 80158da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d002      	beq.n	80158e6 <_ecc_projective_dbl_point+0xe0>
 80158e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158e2:	f003 f97f 	bl	8018be4 <wolfSSL_Free>
           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 80158e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80158ea:	623b      	str	r3, [r7, #32]
 80158ec:	6a3b      	ldr	r3, [r7, #32]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d002      	beq.n	80158f8 <_ecc_projective_dbl_point+0xf2>
 80158f2:	6a38      	ldr	r0, [r7, #32]
 80158f4:	f003 f976 	bl	8018be4 <wolfSSL_Free>
           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 80158f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80158fc:	61fb      	str	r3, [r7, #28]
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d002      	beq.n	801590a <_ecc_projective_dbl_point+0x104>
 8015904:	69f8      	ldr	r0, [r7, #28]
 8015906:	f003 f96d 	bl	8018be4 <wolfSSL_Free>
           return MEMORY_E;
 801590a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801590e:	e257      	b.n	8015dc0 <_ecc_projective_dbl_point+0x5ba>
       }
    #endif
    }
#endif

   if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
 8015910:	2300      	movs	r3, #0
 8015912:	9301      	str	r3, [sp, #4]
 8015914:	2300      	movs	r3, #0
 8015916:	9300      	str	r3, [sp, #0]
 8015918:	2300      	movs	r3, #0
 801591a:	2200      	movs	r2, #0
 801591c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015920:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015924:	f00a fd44 	bl	80203b0 <mp_init_multi>
 8015928:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 801592c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015930:	2b00      	cmp	r3, #0
 8015932:	d02d      	beq.n	8015990 <_ecc_projective_dbl_point+0x18a>
#ifdef WOLFSSL_SMALL_STACK_CACHE
    if (R->key == NULL)
#endif
    {
    #ifdef ALT_ECC_SIZE
       XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 8015934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015936:	643b      	str	r3, [r7, #64]	; 0x40
 8015938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801593a:	2b00      	cmp	r3, #0
 801593c:	d002      	beq.n	8015944 <_ecc_projective_dbl_point+0x13e>
 801593e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015940:	f003 f950 	bl	8018be4 <wolfSSL_Free>
       XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 8015944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801594a:	2b00      	cmp	r3, #0
 801594c:	d002      	beq.n	8015954 <_ecc_projective_dbl_point+0x14e>
 801594e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015950:	f003 f948 	bl	8018be4 <wolfSSL_Free>
       XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 8015954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015958:	63bb      	str	r3, [r7, #56]	; 0x38
 801595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <_ecc_projective_dbl_point+0x160>
 8015960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015962:	f003 f93f 	bl	8018be4 <wolfSSL_Free>
    #endif
       XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8015966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801596a:	637b      	str	r3, [r7, #52]	; 0x34
 801596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801596e:	2b00      	cmp	r3, #0
 8015970:	d002      	beq.n	8015978 <_ecc_projective_dbl_point+0x172>
 8015972:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015974:	f003 f936 	bl	8018be4 <wolfSSL_Free>
       XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801597c:	633b      	str	r3, [r7, #48]	; 0x30
 801597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015980:	2b00      	cmp	r3, #0
 8015982:	d002      	beq.n	801598a <_ecc_projective_dbl_point+0x184>
 8015984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015986:	f003 f92d 	bl	8018be4 <wolfSSL_Free>
     }
#endif
      return err;
 801598a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801598e:	e217      	b.n	8015dc0 <_ecc_projective_dbl_point+0x5ba>

/* If use ALT_ECC_SIZE we need to use local stack variable since
   ecc_point x,y,z is reduced size */
#ifdef ALT_ECC_SIZE
   /* Use local stack variable */
   x = rx;
 8015990:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015994:	677b      	str	r3, [r7, #116]	; 0x74
   y = ry;
 8015996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015998:	673b      	str	r3, [r7, #112]	; 0x70
   z = rz;
 801599a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801599c:	66fb      	str	r3, [r7, #108]	; 0x6c

   if ((err = mp_init_multi(x, y, z, NULL, NULL, NULL)) != MP_OKAY) {
 801599e:	2300      	movs	r3, #0
 80159a0:	9301      	str	r3, [sp, #4]
 80159a2:	2300      	movs	r3, #0
 80159a4:	9300      	str	r3, [sp, #0]
 80159a6:	2300      	movs	r3, #0
 80159a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80159aa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80159ac:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80159ae:	f00a fcff 	bl	80203b0 <mp_init_multi>
 80159b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80159b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d035      	beq.n	8015a2a <_ecc_projective_dbl_point+0x224>
       mp_clear(t1);
 80159be:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80159c2:	f00a fcdb 	bl	802037c <mp_clear>
       mp_clear(t2);
 80159c6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80159ca:	f00a fcd7 	bl	802037c <mp_clear>
    #ifdef WOLFSSL_SMALL_STACK_CACHE
       if (R->key == NULL)
    #endif
       {
       #ifdef ALT_ECC_SIZE
          XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 80159ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80159d0:	657b      	str	r3, [r7, #84]	; 0x54
 80159d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d002      	beq.n	80159de <_ecc_projective_dbl_point+0x1d8>
 80159d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80159da:	f003 f903 	bl	8018be4 <wolfSSL_Free>
          XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 80159de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159e0:	653b      	str	r3, [r7, #80]	; 0x50
 80159e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d002      	beq.n	80159ee <_ecc_projective_dbl_point+0x1e8>
 80159e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80159ea:	f003 f8fb 	bl	8018be4 <wolfSSL_Free>
          XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 80159ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80159f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80159f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d002      	beq.n	8015a00 <_ecc_projective_dbl_point+0x1fa>
 80159fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80159fc:	f003 f8f2 	bl	8018be4 <wolfSSL_Free>
       #endif
          XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8015a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8015a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d002      	beq.n	8015a12 <_ecc_projective_dbl_point+0x20c>
 8015a0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015a0e:	f003 f8e9 	bl	8018be4 <wolfSSL_Free>
          XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015a16:	647b      	str	r3, [r7, #68]	; 0x44
 8015a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d002      	beq.n	8015a24 <_ecc_projective_dbl_point+0x21e>
 8015a1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a20:	f003 f8e0 	bl	8018be4 <wolfSSL_Free>
       }
    #endif
       return err;
 8015a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a28:	e1ca      	b.n	8015dc0 <_ecc_projective_dbl_point+0x5ba>
   x = R->x;
   y = R->y;
   z = R->z;
#endif

   if (err == MP_OKAY)
 8015a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d107      	bne.n	8015a42 <_ecc_projective_dbl_point+0x23c>
       err = mp_copy(P->x, x);
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f00a fe5e 	bl	80206fa <mp_copy>
 8015a3e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d107      	bne.n	8015a5a <_ecc_projective_dbl_point+0x254>
       err = mp_copy(P->y, y);
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	685b      	ldr	r3, [r3, #4]
 8015a4e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015a50:	4618      	mov	r0, r3
 8015a52:	f00a fe52 	bl	80206fa <mp_copy>
 8015a56:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d107      	bne.n	8015a72 <_ecc_projective_dbl_point+0x26c>
       err = mp_copy(P->z, z);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	689b      	ldr	r3, [r3, #8]
 8015a66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f00a fe46 	bl	80206fa <mp_copy>
 8015a6e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T1 = Z * Z */
   if (err == MP_OKAY)
 8015a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d106      	bne.n	8015a88 <_ecc_projective_dbl_point+0x282>
       err = mp_sqr(z, t1);
 8015a7a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015a7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015a80:	f00b f888 	bl	8020b94 <mp_sqr>
 8015a84:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d108      	bne.n	8015aa2 <_ecc_projective_dbl_point+0x29c>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8015a90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015a94:	6839      	ldr	r1, [r7, #0]
 8015a96:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015a9a:	f00b f889 	bl	8020bb0 <mp_montgomery_reduce>
 8015a9e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* Z = Y * Z */
   if (err == MP_OKAY)
 8015aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d106      	bne.n	8015ab8 <_ecc_projective_dbl_point+0x2b2>
       err = mp_mul(z, y, z);
 8015aaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015aac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015aae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015ab0:	f00a fcce 	bl	8020450 <mp_mul>
 8015ab4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d107      	bne.n	8015ad0 <_ecc_projective_dbl_point+0x2ca>
       err = mp_montgomery_reduce(z, modulus, mp);
 8015ac0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015ac8:	f00b f872 	bl	8020bb0 <mp_montgomery_reduce>
 8015acc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* Z = 2Z */
   if (err == MP_OKAY)
 8015ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d107      	bne.n	8015ae8 <_ecc_projective_dbl_point+0x2e2>
       err = mp_addmod_ct(z, z, modulus, z);
 8015ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ada:	683a      	ldr	r2, [r7, #0]
 8015adc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015ade:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015ae0:	f00a fcea 	bl	80204b8 <mp_addmod_ct>
 8015ae4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   {
      /* assumes "a" == 3 */
      (void)a;

      /* T2 = X - T1 */
      if (err == MP_OKAY)
 8015ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d109      	bne.n	8015b04 <_ecc_projective_dbl_point+0x2fe>
          err = mp_submod_ct(x, t1, modulus, t2);
 8015af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015af4:	683a      	ldr	r2, [r7, #0]
 8015af6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015afa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015afc:	f00a fcca 	bl	8020494 <mp_submod_ct>
 8015b00:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      /* T1 = X + T1 */
      if (err == MP_OKAY)
 8015b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d109      	bne.n	8015b20 <_ecc_projective_dbl_point+0x31a>
          err = mp_addmod_ct(t1, x, modulus, t1);
 8015b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b10:	683a      	ldr	r2, [r7, #0]
 8015b12:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015b14:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015b18:	f00a fcce 	bl	80204b8 <mp_addmod_ct>
 8015b1c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      /* T2 = T1 * T2 */
      if (err == MP_OKAY)
 8015b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d109      	bne.n	8015b3c <_ecc_projective_dbl_point+0x336>
          err = mp_mul(t1, t2, t2);
 8015b28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015b2c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015b30:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015b34:	f00a fc8c 	bl	8020450 <mp_mul>
 8015b38:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      if (err == MP_OKAY)
 8015b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d108      	bne.n	8015b56 <_ecc_projective_dbl_point+0x350>
          err = mp_montgomery_reduce(t2, modulus, mp);
 8015b44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015b48:	6839      	ldr	r1, [r7, #0]
 8015b4a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015b4e:	f00b f82f 	bl	8020bb0 <mp_montgomery_reduce>
 8015b52:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

      /* T1 = 2T2 */
      if (err == MP_OKAY)
 8015b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d10a      	bne.n	8015b74 <_ecc_projective_dbl_point+0x36e>
          err = mp_addmod_ct(t2, t2, modulus, t1);
 8015b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b62:	683a      	ldr	r2, [r7, #0]
 8015b64:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015b68:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015b6c:	f00a fca4 	bl	80204b8 <mp_addmod_ct>
 8015b70:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      /* T1 = T1 + T2 */
      if (err == MP_OKAY)
 8015b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d10a      	bne.n	8015b92 <_ecc_projective_dbl_point+0x38c>
          err = mp_addmod_ct(t1, t2, modulus, t1);
 8015b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b80:	683a      	ldr	r2, [r7, #0]
 8015b82:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015b86:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015b8a:	f00a fc95 	bl	80204b8 <mp_addmod_ct>
 8015b8e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   }

   /* Y = 2Y */
   if (err == MP_OKAY)
 8015b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d107      	bne.n	8015baa <_ecc_projective_dbl_point+0x3a4>
       err = mp_addmod_ct(y, y, modulus, y);
 8015b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015b9c:	683a      	ldr	r2, [r7, #0]
 8015b9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015ba0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015ba2:	f00a fc89 	bl	80204b8 <mp_addmod_ct>
 8015ba6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* Y = Y * Y */
   if (err == MP_OKAY)
 8015baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d105      	bne.n	8015bbe <_ecc_projective_dbl_point+0x3b8>
       err = mp_sqr(y, y);
 8015bb2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015bb4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015bb6:	f00a ffed 	bl	8020b94 <mp_sqr>
 8015bba:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d107      	bne.n	8015bd6 <_ecc_projective_dbl_point+0x3d0>
       err = mp_montgomery_reduce(y, modulus, mp);
 8015bc6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015bca:	6839      	ldr	r1, [r7, #0]
 8015bcc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015bce:	f00a ffef 	bl	8020bb0 <mp_montgomery_reduce>
 8015bd2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T2 = Y * Y */
   if (err == MP_OKAY)
 8015bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d106      	bne.n	8015bec <_ecc_projective_dbl_point+0x3e6>
       err = mp_sqr(y, t2);
 8015bde:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015be2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015be4:	f00a ffd6 	bl	8020b94 <mp_sqr>
 8015be8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d108      	bne.n	8015c06 <_ecc_projective_dbl_point+0x400>
       err = mp_montgomery_reduce(t2, modulus, mp);
 8015bf4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015bf8:	6839      	ldr	r1, [r7, #0]
 8015bfa:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015bfe:	f00a ffd7 	bl	8020bb0 <mp_montgomery_reduce>
 8015c02:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* T2 = T2/2 */
   if (err == MP_OKAY)
 8015c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d108      	bne.n	8015c20 <_ecc_projective_dbl_point+0x41a>
       err = mp_div_2_mod_ct(t2, modulus, t2);
 8015c0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015c12:	6839      	ldr	r1, [r7, #0]
 8015c14:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015c18:	f00a ffe8 	bl	8020bec <mp_div_2_mod_ct>
 8015c1c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* Y = Y * X */
   if (err == MP_OKAY)
 8015c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d106      	bne.n	8015c36 <_ecc_projective_dbl_point+0x430>
       err = mp_mul(y, x, y);
 8015c28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015c2a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015c2c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015c2e:	f00a fc0f 	bl	8020450 <mp_mul>
 8015c32:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d107      	bne.n	8015c4e <_ecc_projective_dbl_point+0x448>
       err = mp_montgomery_reduce(y, modulus, mp);
 8015c3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015c46:	f00a ffb3 	bl	8020bb0 <mp_montgomery_reduce>
 8015c4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* X = T1 * T1 */
   if (err == MP_OKAY)
 8015c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d106      	bne.n	8015c64 <_ecc_projective_dbl_point+0x45e>
       err = mp_sqr(t1, x);
 8015c56:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015c58:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015c5c:	f00a ff9a 	bl	8020b94 <mp_sqr>
 8015c60:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d107      	bne.n	8015c7c <_ecc_projective_dbl_point+0x476>
       err = mp_montgomery_reduce(x, modulus, mp);
 8015c6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015c70:	6839      	ldr	r1, [r7, #0]
 8015c72:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015c74:	f00a ff9c 	bl	8020bb0 <mp_montgomery_reduce>
 8015c78:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* X = X - Y */
   if (err == MP_OKAY)
 8015c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d107      	bne.n	8015c94 <_ecc_projective_dbl_point+0x48e>
       err = mp_submod_ct(x, y, modulus, x);
 8015c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c86:	683a      	ldr	r2, [r7, #0]
 8015c88:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015c8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015c8c:	f00a fc02 	bl	8020494 <mp_submod_ct>
 8015c90:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* X = X - Y */
   if (err == MP_OKAY)
 8015c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d107      	bne.n	8015cac <_ecc_projective_dbl_point+0x4a6>
       err = mp_submod_ct(x, y, modulus, x);
 8015c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c9e:	683a      	ldr	r2, [r7, #0]
 8015ca0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015ca2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015ca4:	f00a fbf6 	bl	8020494 <mp_submod_ct>
 8015ca8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* Y = Y - X */
   if (err == MP_OKAY)
 8015cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d107      	bne.n	8015cc4 <_ecc_projective_dbl_point+0x4be>
       err = mp_submod_ct(y, x, modulus, y);
 8015cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015cb6:	683a      	ldr	r2, [r7, #0]
 8015cb8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015cba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015cbc:	f00a fbea 	bl	8020494 <mp_submod_ct>
 8015cc0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   /* Y = Y * T1 */
   if (err == MP_OKAY)
 8015cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d107      	bne.n	8015cdc <_ecc_projective_dbl_point+0x4d6>
       err = mp_mul(y, t1, y);
 8015ccc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015cce:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015cd2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015cd4:	f00a fbbc 	bl	8020450 <mp_mul>
 8015cd8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d107      	bne.n	8015cf4 <_ecc_projective_dbl_point+0x4ee>
       err = mp_montgomery_reduce(y, modulus, mp);
 8015ce4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015ce8:	6839      	ldr	r1, [r7, #0]
 8015cea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015cec:	f00a ff60 	bl	8020bb0 <mp_montgomery_reduce>
 8015cf0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* Y = Y - T2 */
   if (err == MP_OKAY)
 8015cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d108      	bne.n	8015d0e <_ecc_projective_dbl_point+0x508>
       err = mp_submod_ct(y, t2, modulus, y);
 8015cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015d04:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015d06:	f00a fbc5 	bl	8020494 <mp_submod_ct>
 8015d0a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

#ifdef ALT_ECC_SIZE
   if (err == MP_OKAY)
 8015d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d107      	bne.n	8015d26 <_ecc_projective_dbl_point+0x520>
       err = mp_copy(x, R->x);
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015d1e:	f00a fcec 	bl	80206fa <mp_copy>
 8015d22:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d107      	bne.n	8015d3e <_ecc_projective_dbl_point+0x538>
       err = mp_copy(y, R->y);
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	4619      	mov	r1, r3
 8015d34:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015d36:	f00a fce0 	bl	80206fa <mp_copy>
 8015d3a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8015d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d107      	bne.n	8015d56 <_ecc_projective_dbl_point+0x550>
       err = mp_copy(z, R->z);
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	689b      	ldr	r3, [r3, #8]
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015d4e:	f00a fcd4 	bl	80206fa <mp_copy>
 8015d52:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#endif

   /* clean up */
   mp_clear(t1);
 8015d56:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8015d5a:	f00a fb0f 	bl	802037c <mp_clear>
   mp_clear(t2);
 8015d5e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015d62:	f00a fb0b 	bl	802037c <mp_clear>
#ifdef WOLFSSL_SMALL_STACK_CACHE
   if (R->key == NULL)
#endif
   {
    #ifdef ALT_ECC_SIZE
       XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 8015d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d002      	beq.n	8015d76 <_ecc_projective_dbl_point+0x570>
 8015d70:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8015d72:	f002 ff37 	bl	8018be4 <wolfSSL_Free>
       XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 8015d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015d78:	667b      	str	r3, [r7, #100]	; 0x64
 8015d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d002      	beq.n	8015d86 <_ecc_projective_dbl_point+0x580>
 8015d80:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8015d82:	f002 ff2f 	bl	8018be4 <wolfSSL_Free>
       XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 8015d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8015d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d002      	beq.n	8015d98 <_ecc_projective_dbl_point+0x592>
 8015d92:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015d94:	f002 ff26 	bl	8018be4 <wolfSSL_Free>
    #endif
       XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8015d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d002      	beq.n	8015daa <_ecc_projective_dbl_point+0x5a4>
 8015da4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015da6:	f002 ff1d 	bl	8018be4 <wolfSSL_Free>
       XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8015db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d002      	beq.n	8015dbc <_ecc_projective_dbl_point+0x5b6>
 8015db6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015db8:	f002 ff14 	bl	8018be4 <wolfSSL_Free>
    }
#endif

   return err;
 8015dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
        return sp_ecc_proj_dbl_point_521(P->x, P->y, P->z, R->x, R->y, R->z);
    }
#endif
    return ECC_BAD_ARG_E;
#endif
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3790      	adds	r7, #144	; 0x90
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <ecc_map_ex>:
  mp       The "b" value from montgomery_setup()
  ct       Operation should be constant time.
  return   MP_OKAY on success
*/
int ecc_map_ex(ecc_point* P, mp_int* modulus, mp_digit mp, int ct)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b0a0      	sub	sp, #128	; 0x80
 8015dcc:	af02      	add	r7, sp, #8
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	60b9      	str	r1, [r7, #8]
 8015dd2:	607a      	str	r2, [r7, #4]
 8015dd4:	603b      	str	r3, [r7, #0]
#if !defined(WOLFSSL_SP_MATH)
#ifdef WOLFSSL_SMALL_STACK
   mp_int* t1 = NULL;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	673b      	str	r3, [r7, #112]	; 0x70
   mp_int* t2 = NULL;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
#ifdef ALT_ECC_SIZE
   mp_int* rx = NULL;
 8015dde:	2300      	movs	r3, #0
 8015de0:	66bb      	str	r3, [r7, #104]	; 0x68
   mp_int* ry = NULL;
 8015de2:	2300      	movs	r3, #0
 8015de4:	667b      	str	r3, [r7, #100]	; 0x64
   mp_int* rz = NULL;
 8015de6:	2300      	movs	r3, #0
 8015de8:	663b      	str	r3, [r7, #96]	; 0x60
   mp_int *x, *y, *z;
   int    err;

   (void)ct;

   if (P == NULL || modulus == NULL)
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d002      	beq.n	8015df6 <ecc_map_ex+0x2e>
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d102      	bne.n	8015dfc <ecc_map_ex+0x34>
       return ECC_BAD_ARG_E;
 8015df6:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8015dfa:	e1c3      	b.n	8016184 <ecc_map_ex+0x3bc>

   /* special case for point at infinity */
   if (mp_cmp_d(P->z, 0) == MP_EQ) {
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	2100      	movs	r1, #0
 8015e02:	4618      	mov	r0, r3
 8015e04:	f00a fbce 	bl	80205a4 <mp_cmp_d>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d11c      	bne.n	8015e48 <ecc_map_ex+0x80>
       err = mp_set(P->x, 0);
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	2100      	movs	r1, #0
 8015e14:	4618      	mov	r0, r3
 8015e16:	f00a fef9 	bl	8020c0c <mp_set>
 8015e1a:	6778      	str	r0, [r7, #116]	; 0x74
       if (err == MP_OKAY)
 8015e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d106      	bne.n	8015e30 <ecc_map_ex+0x68>
           err = mp_set(P->y, 0);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	2100      	movs	r1, #0
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f00a feef 	bl	8020c0c <mp_set>
 8015e2e:	6778      	str	r0, [r7, #116]	; 0x74
       if (err == MP_OKAY)
 8015e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d106      	bne.n	8015e44 <ecc_map_ex+0x7c>
           err = mp_set(P->z, 1);
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	689b      	ldr	r3, [r3, #8]
 8015e3a:	2101      	movs	r1, #1
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f00a fee5 	bl	8020c0c <mp_set>
 8015e42:	6778      	str	r0, [r7, #116]	; 0x74
       return err;
 8015e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e46:	e19d      	b.n	8016184 <ecc_map_ex+0x3bc>
   #endif
   }
   else
#endif /* WOLFSSL_SMALL_STACK_CACHE */
   {
       t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015e48:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015e4c:	f002 feae 	bl	8018bac <wolfSSL_Malloc>
 8015e50:	6738      	str	r0, [r7, #112]	; 0x70
       t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015e52:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015e56:	f002 fea9 	bl	8018bac <wolfSSL_Malloc>
 8015e5a:	66f8      	str	r0, [r7, #108]	; 0x6c
       if (t1 == NULL || t2 == NULL) {
 8015e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d002      	beq.n	8015e68 <ecc_map_ex+0xa0>
 8015e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d112      	bne.n	8015e8e <ecc_map_ex+0xc6>
           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8015e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015e6a:	617b      	str	r3, [r7, #20]
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d002      	beq.n	8015e78 <ecc_map_ex+0xb0>
 8015e72:	6978      	ldr	r0, [r7, #20]
 8015e74:	f002 feb6 	bl	8018be4 <wolfSSL_Free>
           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015e7a:	613b      	str	r3, [r7, #16]
 8015e7c:	693b      	ldr	r3, [r7, #16]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d002      	beq.n	8015e88 <ecc_map_ex+0xc0>
 8015e82:	6938      	ldr	r0, [r7, #16]
 8015e84:	f002 feae 	bl	8018be4 <wolfSSL_Free>
           return MEMORY_E;
 8015e88:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8015e8c:	e17a      	b.n	8016184 <ecc_map_ex+0x3bc>
       }
#ifdef ALT_ECC_SIZE
       rx = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015e8e:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015e92:	f002 fe8b 	bl	8018bac <wolfSSL_Malloc>
 8015e96:	66b8      	str	r0, [r7, #104]	; 0x68
       ry = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015e98:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015e9c:	f002 fe86 	bl	8018bac <wolfSSL_Malloc>
 8015ea0:	6678      	str	r0, [r7, #100]	; 0x64
       rz = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8015ea2:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8015ea6:	f002 fe81 	bl	8018bac <wolfSSL_Malloc>
 8015eaa:	6638      	str	r0, [r7, #96]	; 0x60
       if (rx == NULL || ry == NULL || rz == NULL) {
 8015eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d005      	beq.n	8015ebe <ecc_map_ex+0xf6>
 8015eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d002      	beq.n	8015ebe <ecc_map_ex+0xf6>
 8015eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d12a      	bne.n	8015f14 <ecc_map_ex+0x14c>
           XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 8015ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d002      	beq.n	8015ece <ecc_map_ex+0x106>
 8015ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eca:	f002 fe8b 	bl	8018be4 <wolfSSL_Free>
           XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 8015ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8015ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d002      	beq.n	8015ede <ecc_map_ex+0x116>
 8015ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015eda:	f002 fe83 	bl	8018be4 <wolfSSL_Free>
           XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 8015ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ee0:	623b      	str	r3, [r7, #32]
 8015ee2:	6a3b      	ldr	r3, [r7, #32]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d002      	beq.n	8015eee <ecc_map_ex+0x126>
 8015ee8:	6a38      	ldr	r0, [r7, #32]
 8015eea:	f002 fe7b 	bl	8018be4 <wolfSSL_Free>
           XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8015eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ef0:	61fb      	str	r3, [r7, #28]
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d002      	beq.n	8015efe <ecc_map_ex+0x136>
 8015ef8:	69f8      	ldr	r0, [r7, #28]
 8015efa:	f002 fe73 	bl	8018be4 <wolfSSL_Free>
           XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015f00:	61bb      	str	r3, [r7, #24]
 8015f02:	69bb      	ldr	r3, [r7, #24]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d002      	beq.n	8015f0e <ecc_map_ex+0x146>
 8015f08:	69b8      	ldr	r0, [r7, #24]
 8015f0a:	f002 fe6b 	bl	8018be4 <wolfSSL_Free>
           return MEMORY_E;
 8015f0e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8015f12:	e137      	b.n	8016184 <ecc_map_ex+0x3bc>
       }
#endif
   }
#endif /* WOLFSSL_SMALL_STACK */

   if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
 8015f14:	2300      	movs	r3, #0
 8015f16:	9301      	str	r3, [sp, #4]
 8015f18:	2300      	movs	r3, #0
 8015f1a:	9300      	str	r3, [sp, #0]
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	2200      	movs	r2, #0
 8015f20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015f22:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015f24:	f00a fa44 	bl	80203b0 <mp_init_multi>
 8015f28:	6778      	str	r0, [r7, #116]	; 0x74
 8015f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d02a      	beq.n	8015f86 <ecc_map_ex+0x1be>
#ifdef WOLFSSL_SMALL_STACK_CACHE
      if (P->key == NULL)
#endif
      {
      #ifdef ALT_ECC_SIZE
         XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 8015f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d002      	beq.n	8015f40 <ecc_map_ex+0x178>
 8015f3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015f3c:	f002 fe52 	bl	8018be4 <wolfSSL_Free>
         XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 8015f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8015f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d002      	beq.n	8015f50 <ecc_map_ex+0x188>
 8015f4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f4c:	f002 fe4a 	bl	8018be4 <wolfSSL_Free>
         XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 8015f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f52:	637b      	str	r3, [r7, #52]	; 0x34
 8015f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d002      	beq.n	8015f60 <ecc_map_ex+0x198>
 8015f5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015f5c:	f002 fe42 	bl	8018be4 <wolfSSL_Free>
      #endif
         XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8015f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f62:	633b      	str	r3, [r7, #48]	; 0x30
 8015f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d002      	beq.n	8015f70 <ecc_map_ex+0x1a8>
 8015f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f6c:	f002 fe3a 	bl	8018be4 <wolfSSL_Free>
         XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8015f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d002      	beq.n	8015f80 <ecc_map_ex+0x1b8>
 8015f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f7c:	f002 fe32 	bl	8018be4 <wolfSSL_Free>
      }
#endif
      return MEMORY_E;
 8015f80:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8015f84:	e0fe      	b.n	8016184 <ecc_map_ex+0x3bc>
   }

#ifdef ALT_ECC_SIZE
   /* Use local stack variable */
   x = rx;
 8015f86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f88:	65fb      	str	r3, [r7, #92]	; 0x5c
   y = ry;
 8015f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f8c:	65bb      	str	r3, [r7, #88]	; 0x58
   z = rz;
 8015f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f90:	657b      	str	r3, [r7, #84]	; 0x54

   if ((err = mp_init_multi(x, y, z, NULL, NULL, NULL)) != MP_OKAY) {
 8015f92:	2300      	movs	r3, #0
 8015f94:	9301      	str	r3, [sp, #4]
 8015f96:	2300      	movs	r3, #0
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015fa0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015fa2:	f00a fa05 	bl	80203b0 <mp_init_multi>
 8015fa6:	6778      	str	r0, [r7, #116]	; 0x74
 8015fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	f040 80b6 	bne.w	801611c <ecc_map_ex+0x354>
       goto done;
   }

   if (err == MP_OKAY)
 8015fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d106      	bne.n	8015fc4 <ecc_map_ex+0x1fc>
       err = mp_copy(P->x, x);
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f00a fb9c 	bl	80206fa <mp_copy>
 8015fc2:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 8015fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d106      	bne.n	8015fd8 <ecc_map_ex+0x210>
       err = mp_copy(P->y, y);
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f00a fb92 	bl	80206fa <mp_copy>
 8015fd6:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 8015fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d106      	bne.n	8015fec <ecc_map_ex+0x224>
       err = mp_copy(P->z, z);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	689b      	ldr	r3, [r3, #8]
 8015fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f00a fb88 	bl	80206fa <mp_copy>
 8015fea:	6778      	str	r0, [r7, #116]	; 0x74

   if (err != MP_OKAY) {
 8015fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	f040 8096 	bne.w	8016120 <ecc_map_ex+0x358>
   y = P->y;
   z = P->z;
#endif

   /* get 1/z */
   if (err == MP_OKAY) {
 8015ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d122      	bne.n	8016040 <ecc_map_ex+0x278>
#if defined(ECC_TIMING_RESISTANT) && (defined(USE_FAST_MATH) || \
                       defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_SP_MATH_ALL))
       if (ct) {
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d010      	beq.n	8016022 <ecc_map_ex+0x25a>
           err = mp_invmod_mont_ct(z, modulus, t1, mp);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016004:	68b9      	ldr	r1, [r7, #8]
 8016006:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016008:	f00a fa88 	bl	802051c <mp_invmod_mont_ct>
 801600c:	6778      	str	r0, [r7, #116]	; 0x74
           if (err == MP_OKAY)
 801600e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016010:	2b00      	cmp	r3, #0
 8016012:	d115      	bne.n	8016040 <ecc_map_ex+0x278>
               err = mp_montgomery_reduce(t1, modulus, mp);
 8016014:	687a      	ldr	r2, [r7, #4]
 8016016:	68b9      	ldr	r1, [r7, #8]
 8016018:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801601a:	f00a fdc9 	bl	8020bb0 <mp_montgomery_reduce>
 801601e:	6778      	str	r0, [r7, #116]	; 0x74
 8016020:	e00e      	b.n	8016040 <ecc_map_ex+0x278>
       }
       else
#endif
       {
           /* first map z back to normal */
           err = mp_montgomery_reduce(z, modulus, mp);
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	68b9      	ldr	r1, [r7, #8]
 8016026:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016028:	f00a fdc2 	bl	8020bb0 <mp_montgomery_reduce>
 801602c:	6778      	str	r0, [r7, #116]	; 0x74
           if (err == MP_OKAY)
 801602e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016030:	2b00      	cmp	r3, #0
 8016032:	d105      	bne.n	8016040 <ecc_map_ex+0x278>
               err = mp_invmod(z, modulus, t1);
 8016034:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016036:	68b9      	ldr	r1, [r7, #8]
 8016038:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801603a:	f00a fa5f 	bl	80204fc <mp_invmod>
 801603e:	6778      	str	r0, [r7, #116]	; 0x74
       }
   }

   /* get 1/z^2 and 1/z^3 */
   if (err == MP_OKAY)
 8016040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016042:	2b00      	cmp	r3, #0
 8016044:	d104      	bne.n	8016050 <ecc_map_ex+0x288>
       err = mp_sqr(t1, t2);
 8016046:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016048:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801604a:	f00a fda3 	bl	8020b94 <mp_sqr>
 801604e:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 8016050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016052:	2b00      	cmp	r3, #0
 8016054:	d105      	bne.n	8016062 <ecc_map_ex+0x29a>
       err = mp_mod(t2, modulus, t2);
 8016056:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016058:	68b9      	ldr	r1, [r7, #8]
 801605a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801605c:	f00a fa3e 	bl	80204dc <mp_mod>
 8016060:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 8016062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016064:	2b00      	cmp	r3, #0
 8016066:	d105      	bne.n	8016074 <ecc_map_ex+0x2ac>
       err = mp_mul(t1, t2, t1);
 8016068:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801606a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801606c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801606e:	f00a f9ef 	bl	8020450 <mp_mul>
 8016072:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 8016074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016076:	2b00      	cmp	r3, #0
 8016078:	d105      	bne.n	8016086 <ecc_map_ex+0x2be>
       err = mp_mod(t1, modulus, t1);
 801607a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801607c:	68b9      	ldr	r1, [r7, #8]
 801607e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8016080:	f00a fa2c 	bl	80204dc <mp_mod>
 8016084:	6778      	str	r0, [r7, #116]	; 0x74

   /* multiply against x/y */
   if (err == MP_OKAY)
 8016086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016088:	2b00      	cmp	r3, #0
 801608a:	d105      	bne.n	8016098 <ecc_map_ex+0x2d0>
       err = mp_mul(x, t2, x);
 801608c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801608e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016090:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016092:	f00a f9dd 	bl	8020450 <mp_mul>
 8016096:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 8016098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801609a:	2b00      	cmp	r3, #0
 801609c:	d105      	bne.n	80160aa <ecc_map_ex+0x2e2>
       err = mp_montgomery_reduce(x, modulus, mp);
 801609e:	687a      	ldr	r2, [r7, #4]
 80160a0:	68b9      	ldr	r1, [r7, #8]
 80160a2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80160a4:	f00a fd84 	bl	8020bb0 <mp_montgomery_reduce>
 80160a8:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 80160aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d105      	bne.n	80160bc <ecc_map_ex+0x2f4>
       err = mp_mul(y, t1, y);
 80160b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80160b2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80160b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80160b6:	f00a f9cb 	bl	8020450 <mp_mul>
 80160ba:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 80160bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d105      	bne.n	80160ce <ecc_map_ex+0x306>
       err = mp_montgomery_reduce(y, modulus, mp);
 80160c2:	687a      	ldr	r2, [r7, #4]
 80160c4:	68b9      	ldr	r1, [r7, #8]
 80160c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80160c8:	f00a fd72 	bl	8020bb0 <mp_montgomery_reduce>
 80160cc:	6778      	str	r0, [r7, #116]	; 0x74

   if (err == MP_OKAY)
 80160ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d104      	bne.n	80160de <ecc_map_ex+0x316>
       err = mp_set(z, 1);
 80160d4:	2101      	movs	r1, #1
 80160d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80160d8:	f00a fd98 	bl	8020c0c <mp_set>
 80160dc:	6778      	str	r0, [r7, #116]	; 0x74

#ifdef ALT_ECC_SIZE
   /* return result */
   if (err == MP_OKAY)
 80160de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d106      	bne.n	80160f2 <ecc_map_ex+0x32a>
      err = mp_copy(x, P->x);
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	4619      	mov	r1, r3
 80160ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80160ec:	f00a fb05 	bl	80206fa <mp_copy>
 80160f0:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 80160f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d106      	bne.n	8016106 <ecc_map_ex+0x33e>
      err = mp_copy(y, P->y);
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	4619      	mov	r1, r3
 80160fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8016100:	f00a fafb 	bl	80206fa <mp_copy>
 8016104:	6778      	str	r0, [r7, #116]	; 0x74
   if (err == MP_OKAY)
 8016106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016108:	2b00      	cmp	r3, #0
 801610a:	d10b      	bne.n	8016124 <ecc_map_ex+0x35c>
      err = mp_copy(z, P->z);
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	689b      	ldr	r3, [r3, #8]
 8016110:	4619      	mov	r1, r3
 8016112:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016114:	f00a faf1 	bl	80206fa <mp_copy>
 8016118:	6778      	str	r0, [r7, #116]	; 0x74
 801611a:	e004      	b.n	8016126 <ecc_map_ex+0x35e>
       goto done;
 801611c:	bf00      	nop
 801611e:	e002      	b.n	8016126 <ecc_map_ex+0x35e>
      goto done;
 8016120:	bf00      	nop
 8016122:	e000      	b.n	8016126 <ecc_map_ex+0x35e>

done:
 8016124:	bf00      	nop
#endif

   /* clean up */
   mp_clear(t1);
 8016126:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8016128:	f00a f928 	bl	802037c <mp_clear>
   mp_clear(t2);
 801612c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801612e:	f00a f925 	bl	802037c <mp_clear>
#ifdef WOLFSSL_SMALL_STACK_CACHE
   if (P->key == NULL)
#endif
   {
   #ifdef ALT_ECC_SIZE
      XFREE(rz, NULL, DYNAMIC_TYPE_ECC);
 8016132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016134:	653b      	str	r3, [r7, #80]	; 0x50
 8016136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016138:	2b00      	cmp	r3, #0
 801613a:	d002      	beq.n	8016142 <ecc_map_ex+0x37a>
 801613c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801613e:	f002 fd51 	bl	8018be4 <wolfSSL_Free>
      XFREE(ry, NULL, DYNAMIC_TYPE_ECC);
 8016142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016148:	2b00      	cmp	r3, #0
 801614a:	d002      	beq.n	8016152 <ecc_map_ex+0x38a>
 801614c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801614e:	f002 fd49 	bl	8018be4 <wolfSSL_Free>
      XFREE(rx, NULL, DYNAMIC_TYPE_ECC);
 8016152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016154:	64bb      	str	r3, [r7, #72]	; 0x48
 8016156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016158:	2b00      	cmp	r3, #0
 801615a:	d002      	beq.n	8016162 <ecc_map_ex+0x39a>
 801615c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801615e:	f002 fd41 	bl	8018be4 <wolfSSL_Free>
   #endif
      XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 8016162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016164:	647b      	str	r3, [r7, #68]	; 0x44
 8016166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016168:	2b00      	cmp	r3, #0
 801616a:	d002      	beq.n	8016172 <ecc_map_ex+0x3aa>
 801616c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801616e:	f002 fd39 	bl	8018be4 <wolfSSL_Free>
      XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 8016172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016174:	643b      	str	r3, [r7, #64]	; 0x40
 8016176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016178:	2b00      	cmp	r3, #0
 801617a:	d002      	beq.n	8016182 <ecc_map_ex+0x3ba>
 801617c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801617e:	f002 fd31 	bl	8018be4 <wolfSSL_Free>
   }
#endif

   return err;
 8016182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
       return sp_ecc_map_521(P->x, P->y, P->z);
   }
#endif
   return ECC_BAD_ARG_E;
#endif
}
 8016184:	4618      	mov	r0, r3
 8016186:	3778      	adds	r7, #120	; 0x78
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}

0801618c <ecc_map>:
#endif /* !FREESCALE_LTC_ECC && !WOLFSSL_STM32_PKA */

int ecc_map(ecc_point* P, mp_int* modulus, mp_digit mp)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	60f8      	str	r0, [r7, #12]
 8016194:	60b9      	str	r1, [r7, #8]
 8016196:	607a      	str	r2, [r7, #4]
    return ecc_map_ex(P, modulus, mp, 0);
 8016198:	2300      	movs	r3, #0
 801619a:	687a      	ldr	r2, [r7, #4]
 801619c:	68b9      	ldr	r1, [r7, #8]
 801619e:	68f8      	ldr	r0, [r7, #12]
 80161a0:	f7ff fe12 	bl	8015dc8 <ecc_map_ex>
 80161a4:	4603      	mov	r3, r0
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}

080161ae <wc_ecc_gen_z>:

#else

static int wc_ecc_gen_z(WC_RNG* rng, int size, ecc_point* p,
        mp_int* modulus, mp_digit mp, mp_int* tx, mp_int* ty)
{
 80161ae:	b580      	push	{r7, lr}
 80161b0:	b088      	sub	sp, #32
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	60f8      	str	r0, [r7, #12]
 80161b6:	60b9      	str	r1, [r7, #8]
 80161b8:	607a      	str	r2, [r7, #4]
 80161ba:	603b      	str	r3, [r7, #0]
    int err = MP_OKAY;
 80161bc:	2300      	movs	r3, #0
 80161be:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_SMALL_STACK
    mp_int*       mu = NULL;
 80161c0:	2300      	movs	r3, #0
 80161c2:	61bb      	str	r3, [r7, #24]
#else
    mp_int        mu[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
    mu = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 80161c4:	f44f 700b 	mov.w	r0, #556	; 0x22c
 80161c8:	f002 fcf0 	bl	8018bac <wolfSSL_Malloc>
 80161cc:	61b8      	str	r0, [r7, #24]
    if (mu == NULL)
 80161ce:	69bb      	ldr	r3, [r7, #24]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d102      	bne.n	80161da <wc_ecc_gen_z+0x2c>
        err = MEMORY_E;
 80161d4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80161d8:	61fb      	str	r3, [r7, #28]
#endif

    if (err == MP_OKAY)
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d103      	bne.n	80161e8 <wc_ecc_gen_z+0x3a>
        err = mp_init(mu);
 80161e0:	69b8      	ldr	r0, [r7, #24]
 80161e2:	f00a f845 	bl	8020270 <mp_init>
 80161e6:	61f8      	str	r0, [r7, #28]
    if (err == MP_OKAY)
 80161e8:	69fb      	ldr	r3, [r7, #28]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d104      	bne.n	80161f8 <wc_ecc_gen_z+0x4a>
        err = mp_montgomery_calc_normalization(mu, modulus);
 80161ee:	6839      	ldr	r1, [r7, #0]
 80161f0:	69b8      	ldr	r0, [r7, #24]
 80161f2:	f00a faba 	bl	802076a <mp_montgomery_calc_normalization>
 80161f6:	61f8      	str	r0, [r7, #28]
    /* Generate random value to multiply into p->z. */
    if (err == MP_OKAY)
 80161f8:	69fb      	ldr	r3, [r7, #28]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d106      	bne.n	801620c <wc_ecc_gen_z+0x5e>
        err = wc_ecc_gen_k(rng, size, ty, modulus);
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016202:	68b9      	ldr	r1, [r7, #8]
 8016204:	68f8      	ldr	r0, [r7, #12]
 8016206:	f000 fe21 	bl	8016e4c <wc_ecc_gen_k>
 801620a:	61f8      	str	r0, [r7, #28]
    /* Convert to montogmery form. */
    if (err == MP_OKAY)
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d106      	bne.n	8016220 <wc_ecc_gen_z+0x72>
        err = mp_mulmod(ty, mu, modulus, ty);
 8016212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016214:	683a      	ldr	r2, [r7, #0]
 8016216:	69b9      	ldr	r1, [r7, #24]
 8016218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801621a:	f00a f929 	bl	8020470 <mp_mulmod>
 801621e:	61f8      	str	r0, [r7, #28]
    /* Multiply random value into p->z. */
    if (err == MP_OKAY)
 8016220:	69fb      	ldr	r3, [r7, #28]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d108      	bne.n	8016238 <wc_ecc_gen_z+0x8a>
        err = mp_mul(p->z, ty, p->z);
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	6898      	ldr	r0, [r3, #8]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	689b      	ldr	r3, [r3, #8]
 801622e:	461a      	mov	r2, r3
 8016230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016232:	f00a f90d 	bl	8020450 <mp_mul>
 8016236:	61f8      	str	r0, [r7, #28]
    if (err == MP_OKAY)
 8016238:	69fb      	ldr	r3, [r7, #28]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d107      	bne.n	801624e <wc_ecc_gen_z+0xa0>
        err = mp_montgomery_reduce(p->z, modulus, mp);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	689b      	ldr	r3, [r3, #8]
 8016242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016244:	6839      	ldr	r1, [r7, #0]
 8016246:	4618      	mov	r0, r3
 8016248:	f00a fcb2 	bl	8020bb0 <mp_montgomery_reduce>
 801624c:	61f8      	str	r0, [r7, #28]
    /* Square random value for X (X' = X / Z^2). */
    if (err == MP_OKAY)
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d104      	bne.n	801625e <wc_ecc_gen_z+0xb0>
        err = mp_sqr(ty, tx);
 8016254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016258:	f00a fc9c 	bl	8020b94 <mp_sqr>
 801625c:	61f8      	str	r0, [r7, #28]
    if (err == MP_OKAY)
 801625e:	69fb      	ldr	r3, [r7, #28]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d105      	bne.n	8016270 <wc_ecc_gen_z+0xc2>
        err = mp_montgomery_reduce(tx, modulus, mp);
 8016264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016266:	6839      	ldr	r1, [r7, #0]
 8016268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801626a:	f00a fca1 	bl	8020bb0 <mp_montgomery_reduce>
 801626e:	61f8      	str	r0, [r7, #28]
    /* Multiply square of random by random value for Y. */
    if (err == MP_OKAY)
 8016270:	69fb      	ldr	r3, [r7, #28]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d105      	bne.n	8016282 <wc_ecc_gen_z+0xd4>
        err = mp_mul(ty, tx, ty);
 8016276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801627a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801627c:	f00a f8e8 	bl	8020450 <mp_mul>
 8016280:	61f8      	str	r0, [r7, #28]
    if (err == MP_OKAY)
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d105      	bne.n	8016294 <wc_ecc_gen_z+0xe6>
        err = mp_montgomery_reduce(ty, modulus, mp);
 8016288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801628a:	6839      	ldr	r1, [r7, #0]
 801628c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801628e:	f00a fc8f 	bl	8020bb0 <mp_montgomery_reduce>
 8016292:	61f8      	str	r0, [r7, #28]
    /* Multiply square into X. */
    if (err == MP_OKAY)
 8016294:	69fb      	ldr	r3, [r7, #28]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d108      	bne.n	80162ac <wc_ecc_gen_z+0xfe>
        err = mp_mul(p->x, tx, p->x);
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	6818      	ldr	r0, [r3, #0]
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	461a      	mov	r2, r3
 80162a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80162a6:	f00a f8d3 	bl	8020450 <mp_mul>
 80162aa:	61f8      	str	r0, [r7, #28]
    if (err == MP_OKAY)
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d107      	bne.n	80162c2 <wc_ecc_gen_z+0x114>
        err = mp_montgomery_reduce(p->x, modulus, mp);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162b8:	6839      	ldr	r1, [r7, #0]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f00a fc78 	bl	8020bb0 <mp_montgomery_reduce>
 80162c0:	61f8      	str	r0, [r7, #28]
    /* Multiply cube into Y (Y' = Y / Z^3). */
    if (err == MP_OKAY)
 80162c2:	69fb      	ldr	r3, [r7, #28]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d108      	bne.n	80162da <wc_ecc_gen_z+0x12c>
        err = mp_mul(p->y, ty, p->y);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	6858      	ldr	r0, [r3, #4]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	461a      	mov	r2, r3
 80162d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80162d4:	f00a f8bc 	bl	8020450 <mp_mul>
 80162d8:	61f8      	str	r0, [r7, #28]
    if (err == MP_OKAY)
 80162da:	69fb      	ldr	r3, [r7, #28]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d107      	bne.n	80162f0 <wc_ecc_gen_z+0x142>
        err = mp_montgomery_reduce(p->y, modulus, mp);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162e6:	6839      	ldr	r1, [r7, #0]
 80162e8:	4618      	mov	r0, r3
 80162ea:	f00a fc61 	bl	8020bb0 <mp_montgomery_reduce>
 80162ee:	61f8      	str	r0, [r7, #28]

#ifdef WOLFSSL_SMALL_STACK
    if (mu != NULL) {
 80162f0:	69bb      	ldr	r3, [r7, #24]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d00a      	beq.n	801630c <wc_ecc_gen_z+0x15e>
        mp_clear(mu);
 80162f6:	69b8      	ldr	r0, [r7, #24]
 80162f8:	f00a f840 	bl	802037c <mp_clear>
        XFREE(mu, NULL, DYNAMIC_TYPE_ECC);
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	617b      	str	r3, [r7, #20]
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d002      	beq.n	801630c <wc_ecc_gen_z+0x15e>
 8016306:	6978      	ldr	r0, [r7, #20]
 8016308:	f002 fc6c 	bl	8018be4 <wolfSSL_Free>
    }
#else
    mp_clear(mu);
#endif

    return err;
 801630c:	69fb      	ldr	r3, [r7, #28]
}
 801630e:	4618      	mov	r0, r3
 8016310:	3720      	adds	r7, #32
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}

08016316 <ecc_mulmod>:
 *
 * Assumes: k < order.
 */
static int ecc_mulmod(const mp_int* k, ecc_point* P, ecc_point* Q,
    ecc_point** R, mp_int* a, mp_int* modulus, mp_digit mp, WC_RNG* rng)
{
 8016316:	b580      	push	{r7, lr}
 8016318:	b094      	sub	sp, #80	; 0x50
 801631a:	af04      	add	r7, sp, #16
 801631c:	60f8      	str	r0, [r7, #12]
 801631e:	60b9      	str	r1, [r7, #8]
 8016320:	607a      	str	r2, [r7, #4]
 8016322:	603b      	str	r3, [r7, #0]
    int      err = MP_OKAY;
 8016324:	2300      	movs	r3, #0
 8016326:	63fb      	str	r3, [r7, #60]	; 0x3c
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 8016328:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801632a:	f00a fa05 	bl	8020738 <mp_count_bits>
 801632e:	4603      	mov	r3, r0
 8016330:	3307      	adds	r3, #7
 8016332:	2b00      	cmp	r3, #0
 8016334:	da00      	bge.n	8016338 <ecc_mulmod+0x22>
 8016336:	3307      	adds	r3, #7
 8016338:	10db      	asrs	r3, r3, #3
 801633a:	623b      	str	r3, [r7, #32]
    int      i;
    int      j = 1;
 801633c:	2301      	movs	r3, #1
 801633e:	637b      	str	r3, [r7, #52]	; 0x34
    int      cnt = DIGIT_BIT;
 8016340:	2320      	movs	r3, #32
 8016342:	633b      	str	r3, [r7, #48]	; 0x30
    int      t = 0;
 8016344:	2300      	movs	r3, #0
 8016346:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_digit b;
    mp_digit v = 0;
 8016348:	2300      	movs	r3, #0
 801634a:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_int*  kt = R[2]->x;
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	3308      	adds	r3, #8
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	61fb      	str	r3, [r7, #28]
#ifndef WC_NO_CACHE_RESISTANT
    /* First bit always 1 (fix at end) and swap equals first bit */
    int      swap = 1;
 8016356:	2301      	movs	r3, #1
 8016358:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    int      infinity;

    /* Step 1: R[0] = P; R[1] = P */
    /* R[0] = P */
    if (err == MP_OKAY)
 801635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801635c:	2b00      	cmp	r3, #0
 801635e:	d109      	bne.n	8016374 <ecc_mulmod+0x5e>
        err = mp_copy(P->x, R[0]->x);
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	681a      	ldr	r2, [r3, #0]
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4619      	mov	r1, r3
 801636c:	4610      	mov	r0, r2
 801636e:	f00a f9c4 	bl	80206fa <mp_copy>
 8016372:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 8016374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016376:	2b00      	cmp	r3, #0
 8016378:	d109      	bne.n	801638e <ecc_mulmod+0x78>
        err = mp_copy(P->y, R[0]->y);
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	685a      	ldr	r2, [r3, #4]
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	4619      	mov	r1, r3
 8016386:	4610      	mov	r0, r2
 8016388:	f00a f9b7 	bl	80206fa <mp_copy>
 801638c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 801638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016390:	2b00      	cmp	r3, #0
 8016392:	d109      	bne.n	80163a8 <ecc_mulmod+0x92>
        err = mp_copy(P->z, R[0]->z);
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	689a      	ldr	r2, [r3, #8]
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	689b      	ldr	r3, [r3, #8]
 801639e:	4619      	mov	r1, r3
 80163a0:	4610      	mov	r0, r2
 80163a2:	f00a f9aa 	bl	80206fa <mp_copy>
 80163a6:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* R[1] = P */
    if (err == MP_OKAY)
 80163a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d10a      	bne.n	80163c4 <ecc_mulmod+0xae>
        err = mp_copy(P->x, R[1]->x);
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	3304      	adds	r3, #4
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	4619      	mov	r1, r3
 80163bc:	4610      	mov	r0, r2
 80163be:	f00a f99c 	bl	80206fa <mp_copy>
 80163c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 80163c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d10a      	bne.n	80163e0 <ecc_mulmod+0xca>
        err = mp_copy(P->y, R[1]->y);
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	685a      	ldr	r2, [r3, #4]
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	3304      	adds	r3, #4
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	685b      	ldr	r3, [r3, #4]
 80163d6:	4619      	mov	r1, r3
 80163d8:	4610      	mov	r0, r2
 80163da:	f00a f98e 	bl	80206fa <mp_copy>
 80163de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 80163e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d10a      	bne.n	80163fc <ecc_mulmod+0xe6>
        err = mp_copy(P->z, R[1]->z);
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	689a      	ldr	r2, [r3, #8]
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	3304      	adds	r3, #4
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	689b      	ldr	r3, [r3, #8]
 80163f2:	4619      	mov	r1, r3
 80163f4:	4610      	mov	r0, r2
 80163f6:	f00a f980 	bl	80206fa <mp_copy>
 80163fa:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Randomize z ordinates to obfuscate timing. */
    if ((err == MP_OKAY) && (rng != NULL))
 80163fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d117      	bne.n	8016432 <ecc_mulmod+0x11c>
 8016402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016404:	2b00      	cmp	r3, #0
 8016406:	d014      	beq.n	8016432 <ecc_mulmod+0x11c>
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y);
 8016408:	683b      	ldr	r3, [r7, #0]
 801640a:	6819      	ldr	r1, [r3, #0]
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	3308      	adds	r3, #8
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	683a      	ldr	r2, [r7, #0]
 8016416:	3208      	adds	r2, #8
 8016418:	6812      	ldr	r2, [r2, #0]
 801641a:	6852      	ldr	r2, [r2, #4]
 801641c:	9202      	str	r2, [sp, #8]
 801641e:	9301      	str	r3, [sp, #4]
 8016420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016422:	9300      	str	r3, [sp, #0]
 8016424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016426:	460a      	mov	r2, r1
 8016428:	6a39      	ldr	r1, [r7, #32]
 801642a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801642c:	f7ff febf 	bl	80161ae <wc_ecc_gen_z>
 8016430:	63f8      	str	r0, [r7, #60]	; 0x3c
    if ((err == MP_OKAY) && (rng != NULL))
 8016432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016434:	2b00      	cmp	r3, #0
 8016436:	d118      	bne.n	801646a <ecc_mulmod+0x154>
 8016438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801643a:	2b00      	cmp	r3, #0
 801643c:	d015      	beq.n	801646a <ecc_mulmod+0x154>
        err = wc_ecc_gen_z(rng, bytes, R[1], modulus, mp, R[2]->x, R[2]->y);
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	3304      	adds	r3, #4
 8016442:	6819      	ldr	r1, [r3, #0]
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	3308      	adds	r3, #8
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	683a      	ldr	r2, [r7, #0]
 801644e:	3208      	adds	r2, #8
 8016450:	6812      	ldr	r2, [r2, #0]
 8016452:	6852      	ldr	r2, [r2, #4]
 8016454:	9202      	str	r2, [sp, #8]
 8016456:	9301      	str	r3, [sp, #4]
 8016458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801645a:	9300      	str	r3, [sp, #0]
 801645c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801645e:	460a      	mov	r2, r1
 8016460:	6a39      	ldr	r1, [r7, #32]
 8016462:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016464:	f7ff fea3 	bl	80161ae <wc_ecc_gen_z>
 8016468:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (err == MP_OKAY) {
 801646a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801646c:	2b00      	cmp	r3, #0
 801646e:	d114      	bne.n	801649a <ecc_mulmod+0x184>
        /* Order could be one greater than the size of the modulus. */
        t = mp_count_bits(modulus) + 1;
 8016470:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016472:	f00a f961 	bl	8020738 <mp_count_bits>
 8016476:	4603      	mov	r3, r0
 8016478:	3301      	adds	r3, #1
 801647a:	62fb      	str	r3, [r7, #44]	; 0x2c
        v = k->dp[0] >> 1;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	68db      	ldr	r3, [r3, #12]
 8016480:	085b      	lsrs	r3, r3, #1
 8016482:	62bb      	str	r3, [r7, #40]	; 0x28
        if (cnt > t) {
 8016484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016488:	429a      	cmp	r2, r3
 801648a:	dd01      	ble.n	8016490 <ecc_mulmod+0x17a>
            cnt = t;
 801648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648e:	633b      	str	r3, [r7, #48]	; 0x30
        }
        err = mp_copy(k, kt);
 8016490:	69f9      	ldr	r1, [r7, #28]
 8016492:	68f8      	ldr	r0, [r7, #12]
 8016494:	f00a f931 	bl	80206fa <mp_copy>
 8016498:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
    if (err == MP_OKAY) {
 801649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801649c:	2b00      	cmp	r3, #0
 801649e:	d101      	bne.n	80164a4 <ecc_mulmod+0x18e>
        err = mp_grow(kt, modulus->used + 1);
 80164a0:	2300      	movs	r3, #0
 80164a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    /* Step 2: for j = 1 to t-1 do */
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 80164a4:	2301      	movs	r3, #1
 80164a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80164a8:	e073      	b.n	8016592 <ecc_mulmod+0x27c>
        if (--cnt == 0) {
 80164aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ac:	3b01      	subs	r3, #1
 80164ae:	633b      	str	r3, [r7, #48]	; 0x30
 80164b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d10a      	bne.n	80164cc <ecc_mulmod+0x1b6>
            v = kt->dp[j++];
 80164b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164b8:	1c5a      	adds	r2, r3, #1
 80164ba:	637a      	str	r2, [r7, #52]	; 0x34
 80164bc:	69fa      	ldr	r2, [r7, #28]
 80164be:	3302      	adds	r3, #2
 80164c0:	009b      	lsls	r3, r3, #2
 80164c2:	4413      	add	r3, r2
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	62bb      	str	r3, [r7, #40]	; 0x28
            cnt = DIGIT_BIT;
 80164c8:	2320      	movs	r3, #32
 80164ca:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Step 3: b = 1 - k[j]; R[b] = 2*R[b] + R[k[j]] */
        b = v & 1;
 80164cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ce:	f003 0301 	and.w	r3, r3, #1
 80164d2:	61bb      	str	r3, [r7, #24]
        v >>= 1;
 80164d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d6:	085b      	lsrs	r3, r3, #1
 80164d8:	62bb      	str	r3, [r7, #40]	; 0x28
            err = ecc_projective_add_point_safe(R[b^1], R[b], R[b^1], a,
                                                        modulus, mp, &infinity);
        }
#else
        /* Swap R[0] and R[1] if other index is needed. */
        swap ^= b;
 80164da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164dc:	69bb      	ldr	r3, [r7, #24]
 80164de:	4053      	eors	r3, r2
 80164e0:	627b      	str	r3, [r7, #36]	; 0x24
        if (err == MP_OKAY)
 80164e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d10c      	bne.n	8016502 <ecc_mulmod+0x1ec>
            err = mp_cond_swap_ct(R[0]->x, R[1]->x, modulus->used, swap);
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	6818      	ldr	r0, [r3, #0]
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	3304      	adds	r3, #4
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	6819      	ldr	r1, [r3, #0]
 80164f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164f8:	681a      	ldr	r2, [r3, #0]
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	f00a f9d7 	bl	80208ae <mp_cond_swap_ct>
 8016500:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY)
 8016502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016504:	2b00      	cmp	r3, #0
 8016506:	d10c      	bne.n	8016522 <ecc_mulmod+0x20c>
            err = mp_cond_swap_ct(R[0]->y, R[1]->y, modulus->used, swap);
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	6858      	ldr	r0, [r3, #4]
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	3304      	adds	r3, #4
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	6859      	ldr	r1, [r3, #4]
 8016516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016518:	681a      	ldr	r2, [r3, #0]
 801651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651c:	f00a f9c7 	bl	80208ae <mp_cond_swap_ct>
 8016520:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY)
 8016522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016524:	2b00      	cmp	r3, #0
 8016526:	d10c      	bne.n	8016542 <ecc_mulmod+0x22c>
            err = mp_cond_swap_ct(R[0]->z, R[1]->z, modulus->used, swap);
 8016528:	683b      	ldr	r3, [r7, #0]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	6898      	ldr	r0, [r3, #8]
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	3304      	adds	r3, #4
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	6899      	ldr	r1, [r3, #8]
 8016536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016538:	681a      	ldr	r2, [r3, #0]
 801653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801653c:	f00a f9b7 	bl	80208ae <mp_cond_swap_ct>
 8016540:	63f8      	str	r0, [r7, #60]	; 0x3c
        swap = (int)b;
 8016542:	69bb      	ldr	r3, [r7, #24]
 8016544:	627b      	str	r3, [r7, #36]	; 0x24

        if (err == MP_OKAY)
 8016546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016548:	2b00      	cmp	r3, #0
 801654a:	d10a      	bne.n	8016562 <ecc_mulmod+0x24c>
            err = ecc_projective_dbl_point_safe(R[0], R[0], a, modulus, mp);
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	6818      	ldr	r0, [r3, #0]
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	6819      	ldr	r1, [r3, #0]
 8016554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016556:	9300      	str	r3, [sp, #0]
 8016558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801655a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801655c:	f000 ff77 	bl	801744e <ecc_projective_dbl_point_safe>
 8016560:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY) {
 8016562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016564:	2b00      	cmp	r3, #0
 8016566:	d111      	bne.n	801658c <ecc_mulmod+0x276>
            err = ecc_projective_add_point_safe(R[0], R[1], R[0], a, modulus,
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	6818      	ldr	r0, [r3, #0]
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	3304      	adds	r3, #4
 8016570:	6819      	ldr	r1, [r3, #0]
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	681a      	ldr	r2, [r3, #0]
 8016576:	f107 0314 	add.w	r3, r7, #20
 801657a:	9302      	str	r3, [sp, #8]
 801657c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657e:	9301      	str	r3, [sp, #4]
 8016580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016582:	9300      	str	r3, [sp, #0]
 8016584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016586:	f000 fe5e 	bl	8017246 <ecc_projective_add_point_safe>
 801658a:	63f8      	str	r0, [r7, #60]	; 0x3c
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 801658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801658e:	3301      	adds	r3, #1
 8016590:	63bb      	str	r3, [r7, #56]	; 0x38
 8016592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016594:	2b00      	cmp	r3, #0
 8016596:	d103      	bne.n	80165a0 <ecc_mulmod+0x28a>
 8016598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801659c:	429a      	cmp	r2, r3
 801659e:	db84      	blt.n	80164aa <ecc_mulmod+0x194>
#endif /* WC_NO_CACHE_RESISTANT */
    }
    /* Step 4: end for */
#ifndef WC_NO_CACHE_RESISTANT
    /* Swap back if last bit is 0. */
    swap ^= 1;
 80165a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a2:	f083 0301 	eor.w	r3, r3, #1
 80165a6:	627b      	str	r3, [r7, #36]	; 0x24
    if (err == MP_OKAY)
 80165a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d10c      	bne.n	80165c8 <ecc_mulmod+0x2b2>
        err = mp_cond_swap_ct(R[0]->x, R[1]->x, modulus->used, swap);
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	6818      	ldr	r0, [r3, #0]
 80165b4:	683b      	ldr	r3, [r7, #0]
 80165b6:	3304      	adds	r3, #4
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	6819      	ldr	r1, [r3, #0]
 80165bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165be:	681a      	ldr	r2, [r3, #0]
 80165c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c2:	f00a f974 	bl	80208ae <mp_cond_swap_ct>
 80165c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 80165c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d10c      	bne.n	80165e8 <ecc_mulmod+0x2d2>
        err = mp_cond_swap_ct(R[0]->y, R[1]->y, modulus->used, swap);
 80165ce:	683b      	ldr	r3, [r7, #0]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	6858      	ldr	r0, [r3, #4]
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	3304      	adds	r3, #4
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	6859      	ldr	r1, [r3, #4]
 80165dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165de:	681a      	ldr	r2, [r3, #0]
 80165e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e2:	f00a f964 	bl	80208ae <mp_cond_swap_ct>
 80165e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 80165e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d10c      	bne.n	8016608 <ecc_mulmod+0x2f2>
        err = mp_cond_swap_ct(R[0]->z, R[1]->z, modulus->used, swap);
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	6898      	ldr	r0, [r3, #8]
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	3304      	adds	r3, #4
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	6899      	ldr	r1, [r3, #8]
 80165fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165fe:	681a      	ldr	r2, [r3, #0]
 8016600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016602:	f00a f954 	bl	80208ae <mp_cond_swap_ct>
 8016606:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif

    /* Step 5: b = k[0]; R[b] = R[b] - P */
    /* R[2] = -P */
    if (err == MP_OKAY)
 8016608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801660a:	2b00      	cmp	r3, #0
 801660c:	d10a      	bne.n	8016624 <ecc_mulmod+0x30e>
        err = mp_copy(P->x, R[2]->x);
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	3308      	adds	r3, #8
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	4619      	mov	r1, r3
 801661c:	4610      	mov	r0, r2
 801661e:	f00a f86c 	bl	80206fa <mp_copy>
 8016622:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 8016624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016626:	2b00      	cmp	r3, #0
 8016628:	d10a      	bne.n	8016640 <ecc_mulmod+0x32a>
        err = mp_sub(modulus, P->y, R[2]->y);
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	6859      	ldr	r1, [r3, #4]
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	3308      	adds	r3, #8
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	461a      	mov	r2, r3
 8016638:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801663a:	f009 fef9 	bl	8020430 <mp_sub>
 801663e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 8016640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016642:	2b00      	cmp	r3, #0
 8016644:	d10a      	bne.n	801665c <ecc_mulmod+0x346>
        err = mp_copy(P->z, R[2]->z);
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	689a      	ldr	r2, [r3, #8]
 801664a:	683b      	ldr	r3, [r7, #0]
 801664c:	3308      	adds	r3, #8
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	689b      	ldr	r3, [r3, #8]
 8016652:	4619      	mov	r1, r3
 8016654:	4610      	mov	r0, r2
 8016656:	f00a f850 	bl	80206fa <mp_copy>
 801665a:	63f8      	str	r0, [r7, #60]	; 0x3c
    /* Subtract point by adding negative. */
    if (err == MP_OKAY) {
 801665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801665e:	2b00      	cmp	r3, #0
 8016660:	d176      	bne.n	8016750 <ecc_mulmod+0x43a>
        b = k->dp[0] & 1;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	f003 0301 	and.w	r3, r3, #1
 801666a:	61bb      	str	r3, [r7, #24]
#ifdef WC_NO_CACHE_RESISTANT
        err = ecc_projective_add_point_safe(R[b], R[2], R[b], a, modulus, mp,
                                                                     &infinity);
#else
        /* Swap R[0] and R[1], if necessary, to operate on the one we want. */
        err = mp_cond_swap_ct(R[0]->x, R[1]->x, modulus->used, (int)b);
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	6818      	ldr	r0, [r3, #0]
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	3304      	adds	r3, #4
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	6819      	ldr	r1, [r3, #0]
 801667a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801667c:	681a      	ldr	r2, [r3, #0]
 801667e:	69bb      	ldr	r3, [r7, #24]
 8016680:	f00a f915 	bl	80208ae <mp_cond_swap_ct>
 8016684:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY)
 8016686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016688:	2b00      	cmp	r3, #0
 801668a:	d10c      	bne.n	80166a6 <ecc_mulmod+0x390>
            err = mp_cond_swap_ct(R[0]->y, R[1]->y, modulus->used, (int)b);
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	6858      	ldr	r0, [r3, #4]
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	3304      	adds	r3, #4
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	6859      	ldr	r1, [r3, #4]
 801669a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	f00a f905 	bl	80208ae <mp_cond_swap_ct>
 80166a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY)
 80166a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10c      	bne.n	80166c6 <ecc_mulmod+0x3b0>
            err = mp_cond_swap_ct(R[0]->z, R[1]->z, modulus->used, (int)b);
 80166ac:	683b      	ldr	r3, [r7, #0]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	6898      	ldr	r0, [r3, #8]
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	3304      	adds	r3, #4
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	6899      	ldr	r1, [r3, #8]
 80166ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166bc:	681a      	ldr	r2, [r3, #0]
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	f00a f8f5 	bl	80208ae <mp_cond_swap_ct>
 80166c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY)
 80166c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d111      	bne.n	80166f0 <ecc_mulmod+0x3da>
            err = ecc_projective_add_point_safe(R[0], R[2], R[0], a, modulus,
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	6818      	ldr	r0, [r3, #0]
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	3308      	adds	r3, #8
 80166d4:	6819      	ldr	r1, [r3, #0]
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	681a      	ldr	r2, [r3, #0]
 80166da:	f107 0314 	add.w	r3, r7, #20
 80166de:	9302      	str	r3, [sp, #8]
 80166e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166e2:	9301      	str	r3, [sp, #4]
 80166e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166e6:	9300      	str	r3, [sp, #0]
 80166e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166ea:	f000 fdac 	bl	8017246 <ecc_projective_add_point_safe>
 80166ee:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                 mp, &infinity);
        /* Swap back if necessary. */
        if (err == MP_OKAY)
 80166f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d10c      	bne.n	8016710 <ecc_mulmod+0x3fa>
            err = mp_cond_swap_ct(R[0]->x, R[1]->x, modulus->used, (int)b);
 80166f6:	683b      	ldr	r3, [r7, #0]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	6818      	ldr	r0, [r3, #0]
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	3304      	adds	r3, #4
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	6819      	ldr	r1, [r3, #0]
 8016704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	69bb      	ldr	r3, [r7, #24]
 801670a:	f00a f8d0 	bl	80208ae <mp_cond_swap_ct>
 801670e:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY)
 8016710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016712:	2b00      	cmp	r3, #0
 8016714:	d10c      	bne.n	8016730 <ecc_mulmod+0x41a>
            err = mp_cond_swap_ct(R[0]->y, R[1]->y, modulus->used, (int)b);
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	6858      	ldr	r0, [r3, #4]
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	3304      	adds	r3, #4
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	6859      	ldr	r1, [r3, #4]
 8016724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	69bb      	ldr	r3, [r7, #24]
 801672a:	f00a f8c0 	bl	80208ae <mp_cond_swap_ct>
 801672e:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (err == MP_OKAY)
 8016730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016732:	2b00      	cmp	r3, #0
 8016734:	d10c      	bne.n	8016750 <ecc_mulmod+0x43a>
            err = mp_cond_swap_ct(R[0]->z, R[1]->z, modulus->used, (int)b);
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	6898      	ldr	r0, [r3, #8]
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	3304      	adds	r3, #4
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	6899      	ldr	r1, [r3, #8]
 8016744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016746:	681a      	ldr	r2, [r3, #0]
 8016748:	69bb      	ldr	r3, [r7, #24]
 801674a:	f00a f8b0 	bl	80208ae <mp_cond_swap_ct>
 801674e:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
    }

    /* Step 6: return R[0] */
    if (err == MP_OKAY)
 8016750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016752:	2b00      	cmp	r3, #0
 8016754:	d109      	bne.n	801676a <ecc_mulmod+0x454>
        err = mp_copy(R[0]->x, Q->x);
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	681a      	ldr	r2, [r3, #0]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	4619      	mov	r1, r3
 8016762:	4610      	mov	r0, r2
 8016764:	f009 ffc9 	bl	80206fa <mp_copy>
 8016768:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 801676a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801676c:	2b00      	cmp	r3, #0
 801676e:	d109      	bne.n	8016784 <ecc_mulmod+0x46e>
        err = mp_copy(R[0]->y, Q->y);
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	685a      	ldr	r2, [r3, #4]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	4619      	mov	r1, r3
 801677c:	4610      	mov	r0, r2
 801677e:	f009 ffbc 	bl	80206fa <mp_copy>
 8016782:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err == MP_OKAY)
 8016784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016786:	2b00      	cmp	r3, #0
 8016788:	d109      	bne.n	801679e <ecc_mulmod+0x488>
        err = mp_copy(R[0]->z, Q->z);
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	689a      	ldr	r2, [r3, #8]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	4619      	mov	r1, r3
 8016796:	4610      	mov	r0, r2
 8016798:	f009 ffaf 	bl	80206fa <mp_copy>
 801679c:	63f8      	str	r0, [r7, #60]	; 0x3c

    return err;
 801679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	3740      	adds	r7, #64	; 0x40
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <ecc_point_to_mont>:
 * @return  0 on success.
 * @return  -ve on failure.
 */
static int ecc_point_to_mont(ecc_point* p, ecc_point* r, mp_int* modulus,
                             void* heap)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b088      	sub	sp, #32
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	607a      	str	r2, [r7, #4]
 80167b4:	603b      	str	r3, [r7, #0]
   int err = MP_OKAY;
 80167b6:	2300      	movs	r3, #0
 80167b8:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_SMALL_STACK
   mp_int*       mu = NULL;
 80167ba:	2300      	movs	r3, #0
 80167bc:	61bb      	str	r3, [r7, #24]
#endif

   (void)heap;

#ifdef WOLFSSL_SMALL_STACK
   mu = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);
 80167be:	f44f 700b 	mov.w	r0, #556	; 0x22c
 80167c2:	f002 f9f3 	bl	8018bac <wolfSSL_Malloc>
 80167c6:	61b8      	str	r0, [r7, #24]
   if (mu == NULL)
 80167c8:	69bb      	ldr	r3, [r7, #24]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d102      	bne.n	80167d4 <ecc_point_to_mont+0x2c>
       err = MEMORY_E;
 80167ce:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80167d2:	61fb      	str	r3, [r7, #28]
#endif
   if (err == MP_OKAY)
 80167d4:	69fb      	ldr	r3, [r7, #28]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d103      	bne.n	80167e2 <ecc_point_to_mont+0x3a>
       err = mp_init(mu);
 80167da:	69b8      	ldr	r0, [r7, #24]
 80167dc:	f009 fd48 	bl	8020270 <mp_init>
 80167e0:	61f8      	str	r0, [r7, #28]
   if (err == MP_OKAY) {
 80167e2:	69fb      	ldr	r3, [r7, #28]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d154      	bne.n	8016892 <ecc_point_to_mont+0xea>
       err = mp_montgomery_calc_normalization(mu, modulus);
 80167e8:	6879      	ldr	r1, [r7, #4]
 80167ea:	69b8      	ldr	r0, [r7, #24]
 80167ec:	f009 ffbd 	bl	802076a <mp_montgomery_calc_normalization>
 80167f0:	61f8      	str	r0, [r7, #28]

       if (err == MP_OKAY) {
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d149      	bne.n	801688c <ecc_point_to_mont+0xe4>
           if (mp_cmp_d(mu, 1) == MP_EQ) {
 80167f8:	2101      	movs	r1, #1
 80167fa:	69b8      	ldr	r0, [r7, #24]
 80167fc:	f009 fed2 	bl	80205a4 <mp_cmp_d>
 8016800:	4603      	mov	r3, r0
 8016802:	2b00      	cmp	r3, #0
 8016804:	d121      	bne.n	801684a <ecc_point_to_mont+0xa2>
               err = mp_copy(p->x, r->x);
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	68bb      	ldr	r3, [r7, #8]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	4619      	mov	r1, r3
 8016810:	4610      	mov	r0, r2
 8016812:	f009 ff72 	bl	80206fa <mp_copy>
 8016816:	61f8      	str	r0, [r7, #28]
               if (err == MP_OKAY)
 8016818:	69fb      	ldr	r3, [r7, #28]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d108      	bne.n	8016830 <ecc_point_to_mont+0x88>
                   err = mp_copy(p->y, r->y);
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	685a      	ldr	r2, [r3, #4]
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	4619      	mov	r1, r3
 8016828:	4610      	mov	r0, r2
 801682a:	f009 ff66 	bl	80206fa <mp_copy>
 801682e:	61f8      	str	r0, [r7, #28]
               if (err == MP_OKAY)
 8016830:	69fb      	ldr	r3, [r7, #28]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d12a      	bne.n	801688c <ecc_point_to_mont+0xe4>
                   err = mp_copy(p->z, r->z);
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	689a      	ldr	r2, [r3, #8]
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	689b      	ldr	r3, [r3, #8]
 801683e:	4619      	mov	r1, r3
 8016840:	4610      	mov	r0, r2
 8016842:	f009 ff5a 	bl	80206fa <mp_copy>
 8016846:	61f8      	str	r0, [r7, #28]
 8016848:	e020      	b.n	801688c <ecc_point_to_mont+0xe4>
           }
           else {
               err = mp_mulmod(p->x, mu, modulus, r->x);
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	6818      	ldr	r0, [r3, #0]
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	69b9      	ldr	r1, [r7, #24]
 8016856:	f009 fe0b 	bl	8020470 <mp_mulmod>
 801685a:	61f8      	str	r0, [r7, #28]
               if (err == MP_OKAY)
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d108      	bne.n	8016874 <ecc_point_to_mont+0xcc>
                   err = mp_mulmod(p->y, mu, modulus, r->y);
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	6858      	ldr	r0, [r3, #4]
 8016866:	68bb      	ldr	r3, [r7, #8]
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	687a      	ldr	r2, [r7, #4]
 801686c:	69b9      	ldr	r1, [r7, #24]
 801686e:	f009 fdff 	bl	8020470 <mp_mulmod>
 8016872:	61f8      	str	r0, [r7, #28]
               if (err == MP_OKAY)
 8016874:	69fb      	ldr	r3, [r7, #28]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d108      	bne.n	801688c <ecc_point_to_mont+0xe4>
                   err = mp_mulmod(p->z, mu, modulus, r->z);
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	6898      	ldr	r0, [r3, #8]
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	689b      	ldr	r3, [r3, #8]
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	69b9      	ldr	r1, [r7, #24]
 8016886:	f009 fdf3 	bl	8020470 <mp_mulmod>
 801688a:	61f8      	str	r0, [r7, #28]
           }
       }

       mp_clear(mu);
 801688c:	69b8      	ldr	r0, [r7, #24]
 801688e:	f009 fd75 	bl	802037c <mp_clear>
   }
#ifdef WOLFSSL_SMALL_STACK
   if (mu != NULL)
 8016892:	69bb      	ldr	r3, [r7, #24]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d007      	beq.n	80168a8 <ecc_point_to_mont+0x100>
      XFREE(mu, heap, DYNAMIC_TYPE_ECC);
 8016898:	69bb      	ldr	r3, [r7, #24]
 801689a:	617b      	str	r3, [r7, #20]
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d002      	beq.n	80168a8 <ecc_point_to_mont+0x100>
 80168a2:	6978      	ldr	r0, [r7, #20]
 80168a4:	f002 f99e 	bl	8018be4 <wolfSSL_Free>
#endif
   return err;
 80168a8:	69fb      	ldr	r3, [r7, #28]
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3720      	adds	r7, #32
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}

080168b2 <wc_ecc_mulmod_ex2>:
*/
int wc_ecc_mulmod_ex2(const mp_int* k, ecc_point *G, ecc_point *R, mp_int* a,
                      mp_int* modulus, mp_int* order, WC_RNG* rng, int map,
                      void* heap)
#if !defined(WOLFSSL_SP_MATH)
{
 80168b2:	b5b0      	push	{r4, r5, r7, lr}
 80168b4:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 80168b8:	af04      	add	r7, sp, #16
 80168ba:	f507 7418 	add.w	r4, r7, #608	; 0x260
 80168be:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 80168c2:	6020      	str	r0, [r4, #0]
 80168c4:	f507 7018 	add.w	r0, r7, #608	; 0x260
 80168c8:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 80168cc:	6001      	str	r1, [r0, #0]
 80168ce:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80168d2:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 80168d6:	600a      	str	r2, [r1, #0]
 80168d8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80168dc:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80168e0:	6013      	str	r3, [r2, #0]
   mp_digit      mp;
#ifdef ECC_TIMING_RESISTANT
   mp_int t;
#endif

   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
 80168e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80168e6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d011      	beq.n	8016914 <wc_ecc_mulmod_ex2+0x62>
 80168f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80168f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d00a      	beq.n	8016914 <wc_ecc_mulmod_ex2+0x62>
 80168fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016902:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d003      	beq.n	8016914 <wc_ecc_mulmod_ex2+0x62>
 801690c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8016910:	2b00      	cmp	r3, #0
 8016912:	d102      	bne.n	801691a <wc_ecc_mulmod_ex2+0x68>
      return ECC_BAD_ARG_E;
 8016914:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8016918:	e151      	b.n	8016bbe <wc_ecc_mulmod_ex2+0x30c>
      }
   }
   else
#endif
   /* k can't have more bits than order */
   if (mp_count_bits(k) > mp_count_bits(order)) {
 801691a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801691e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016922:	6818      	ldr	r0, [r3, #0]
 8016924:	f009 ff08 	bl	8020738 <mp_count_bits>
 8016928:	4604      	mov	r4, r0
 801692a:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 801692e:	f009 ff03 	bl	8020738 <mp_count_bits>
 8016932:	4603      	mov	r3, r0
 8016934:	429c      	cmp	r4, r3
 8016936:	dd02      	ble.n	801693e <wc_ecc_mulmod_ex2+0x8c>
      return ECC_OUT_OF_RANGE_E;
 8016938:	f06f 03d8 	mvn.w	r3, #216	; 0xd8
 801693c:	e13f      	b.n	8016bbe <wc_ecc_mulmod_ex2+0x30c>
   }

   /* init variables */
   tG = NULL;
 801693e:	2300      	movs	r3, #0
 8016940:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
   XMEMSET(M, 0, sizeof(M));
 8016944:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8016948:	220c      	movs	r2, #12
 801694a:	2100      	movs	r1, #0
 801694c:	4618      	mov	r0, r3
 801694e:	f00a fcf1 	bl	8021334 <memset>
      goto exit;
   R->key = &key;
#endif /* WOLFSSL_SMALL_STACK_CACHE */

   /* alloc ram for window temps */
   for (i = 0; i < M_POINTS; i++) {
 8016952:	2300      	movs	r3, #0
 8016954:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016958:	e016      	b.n	8016988 <wc_ecc_mulmod_ex2+0xd6>
   #ifdef WOLFSSL_NO_MALLOC
      M[i] = &lcl_M[i];
   #endif
      err = wc_ecc_new_point_ex(&M[i], heap);
 801695a:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801695e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	4413      	add	r3, r2
 8016966:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 801696a:	4618      	mov	r0, r3
 801696c:	f000 f92c 	bl	8016bc8 <wc_ecc_new_point_ex>
 8016970:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
      if (err != MP_OKAY) {
 8016974:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016978:	2b00      	cmp	r3, #0
 801697a:	f040 80f2 	bne.w	8016b62 <wc_ecc_mulmod_ex2+0x2b0>
   for (i = 0; i < M_POINTS; i++) {
 801697e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016982:	3301      	adds	r3, #1
 8016984:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016988:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801698c:	2b02      	cmp	r3, #2
 801698e:	dde4      	ble.n	801695a <wc_ecc_mulmod_ex2+0xa8>

   /* make a copy of G in case R==G */
#ifdef WOLFSSL_NO_MALLOC
   tG = &lcl_tG;
#endif
   err = wc_ecc_new_point_ex(&tG, heap);
 8016990:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8016994:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 8016998:	4618      	mov	r0, r3
 801699a:	f000 f915 	bl	8016bc8 <wc_ecc_new_point_ex>
 801699e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
   if (err != MP_OKAY) {
 80169a2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	f040 80dd 	bne.w	8016b66 <wc_ecc_mulmod_ex2+0x2b4>
       goto exit;
   }
   if ((err = ecc_point_to_mont(G, tG, modulus, heap)) != MP_OKAY) {
 80169ac:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 80169b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80169b4:	f5a3 7016 	sub.w	r0, r3, #600	; 0x258
 80169b8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80169bc:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80169c0:	6800      	ldr	r0, [r0, #0]
 80169c2:	f7ff fef1 	bl	80167a8 <ecc_point_to_mont>
 80169c6:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 80169ca:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	f040 80cb 	bne.w	8016b6a <wc_ecc_mulmod_ex2+0x2b8>
       goto exit;
   }

   /* init montgomery reduction */
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
 80169d4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80169d8:	4619      	mov	r1, r3
 80169da:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 80169de:	f00a f8f7 	bl	8020bd0 <mp_montgomery_setup>
 80169e2:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 80169e6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f040 80bf 	bne.w	8016b6e <wc_ecc_mulmod_ex2+0x2bc>
      goto exit;
   }

#ifdef ECC_TIMING_RESISTANT
   if ((err = mp_init(&t)) != MP_OKAY)
 80169f0:	f107 0314 	add.w	r3, r7, #20
 80169f4:	4618      	mov	r0, r3
 80169f6:	f009 fc3b 	bl	8020270 <mp_init>
 80169fa:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 80169fe:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	f040 80b5 	bne.w	8016b72 <wc_ecc_mulmod_ex2+0x2c0>
      goto exit;

   if (err == MP_OKAY)
 8016a08:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d122      	bne.n	8016a56 <wc_ecc_mulmod_ex2+0x1a4>
      err = ecc_mulmod(k, tG, R, M, a, modulus, mp, rng);
 8016a10:	f8d7 4250 	ldr.w	r4, [r7, #592]	; 0x250
 8016a14:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8016a18:	f507 7511 	add.w	r5, r7, #580	; 0x244
 8016a1c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8016a20:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8016a24:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8016a28:	f5a1 7015 	sub.w	r0, r1, #596	; 0x254
 8016a2c:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8016a30:	9103      	str	r1, [sp, #12]
 8016a32:	9302      	str	r3, [sp, #8]
 8016a34:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8016a38:	9301      	str	r3, [sp, #4]
 8016a3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016a3e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	9300      	str	r3, [sp, #0]
 8016a46:	462b      	mov	r3, r5
 8016a48:	6812      	ldr	r2, [r2, #0]
 8016a4a:	4621      	mov	r1, r4
 8016a4c:	6800      	ldr	r0, [r0, #0]
 8016a4e:	f7ff fc62 	bl	8016316 <ecc_mulmod>
 8016a52:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258

    /* Check for k == order - 1. Result will be 0 point which is not correct
     * Calculates order / 2 and adds order / 2 + 1 and gets infinity.
     * (with constant time implementation)
     */
   if (err == MP_OKAY)
 8016a56:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d109      	bne.n	8016a72 <wc_ecc_mulmod_ex2+0x1c0>
      err = mp_sub_d(order, 1, &t);
 8016a5e:	f107 0314 	add.w	r3, r7, #20
 8016a62:	461a      	mov	r2, r3
 8016a64:	2101      	movs	r1, #1
 8016a66:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8016a6a:	f009 fde3 	bl	8020634 <mp_sub_d>
 8016a6e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
   if (err == MP_OKAY) {
 8016a72:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d158      	bne.n	8016b2c <wc_ecc_mulmod_ex2+0x27a>
      int kIsMinusOne = (mp_cmp((mp_int*)k, &t) == MP_EQ);
 8016a7a:	f107 0214 	add.w	r2, r7, #20
 8016a7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016a82:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016a86:	4611      	mov	r1, r2
 8016a88:	6818      	ldr	r0, [r3, #0]
 8016a8a:	f009 fd7d 	bl	8020588 <mp_cmp>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	bf0c      	ite	eq
 8016a94:	2301      	moveq	r3, #1
 8016a96:	2300      	movne	r3, #0
 8016a98:	b2db      	uxtb	r3, r3
 8016a9a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
      err = mp_cond_copy(tG->x, kIsMinusOne, R->x);
 8016a9e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016aa2:	6818      	ldr	r0, [r3, #0]
 8016aa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016aa8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8016ab6:	f00a fadd 	bl	8021074 <mp_cond_copy>
 8016aba:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
      if (err == MP_OKAY) {
 8016abe:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d10b      	bne.n	8016ade <wc_ecc_mulmod_ex2+0x22c>
          err = mp_sub(modulus, tG->y, &t);
 8016ac6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	f107 0214 	add.w	r2, r7, #20
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8016ad6:	f009 fcab 	bl	8020430 <mp_sub>
 8016ada:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
      }
      if (err == MP_OKAY) {
 8016ade:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d10e      	bne.n	8016b04 <wc_ecc_mulmod_ex2+0x252>
          err = mp_cond_copy(&t, kIsMinusOne, R->y);
 8016ae6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016aea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	685a      	ldr	r2, [r3, #4]
 8016af2:	f107 0314 	add.w	r3, r7, #20
 8016af6:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8016afa:	4618      	mov	r0, r3
 8016afc:	f00a faba 	bl	8021074 <mp_cond_copy>
 8016b00:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
      }
      if (err == MP_OKAY) {
 8016b04:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d10f      	bne.n	8016b2c <wc_ecc_mulmod_ex2+0x27a>
          err = mp_cond_copy(tG->z, kIsMinusOne, R->z);
 8016b0c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016b10:	6898      	ldr	r0, [r3, #8]
 8016b12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016b16:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	689b      	ldr	r3, [r3, #8]
 8016b1e:	461a      	mov	r2, r3
 8016b20:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8016b24:	f00a faa6 	bl	8021074 <mp_cond_copy>
 8016b28:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
      }
   }

   mp_free(&t);
 8016b2c:	f107 0314 	add.w	r3, r7, #20
 8016b30:	4618      	mov	r0, r3
 8016b32:	f009 fc32 	bl	802039a <mp_free>
   err = ecc_mulmod(k, tG, R, M, a, modulus, mp, rng);

   (void)order;
#endif
   /* map R back from projective space */
   if (err == MP_OKAY && map)
 8016b36:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d11b      	bne.n	8016b76 <wc_ecc_mulmod_ex2+0x2c4>
 8016b3e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d017      	beq.n	8016b76 <wc_ecc_mulmod_ex2+0x2c4>
      err = ecc_map(R, modulus, mp);
 8016b46:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8016b4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016b4e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016b52:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 8016b56:	6818      	ldr	r0, [r3, #0]
 8016b58:	f7ff fb18 	bl	801618c <ecc_map>
 8016b5c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8016b60:	e00a      	b.n	8016b78 <wc_ecc_mulmod_ex2+0x2c6>
         goto exit;
 8016b62:	bf00      	nop
 8016b64:	e008      	b.n	8016b78 <wc_ecc_mulmod_ex2+0x2c6>
       goto exit;
 8016b66:	bf00      	nop
 8016b68:	e006      	b.n	8016b78 <wc_ecc_mulmod_ex2+0x2c6>
       goto exit;
 8016b6a:	bf00      	nop
 8016b6c:	e004      	b.n	8016b78 <wc_ecc_mulmod_ex2+0x2c6>
      goto exit;
 8016b6e:	bf00      	nop
 8016b70:	e002      	b.n	8016b78 <wc_ecc_mulmod_ex2+0x2c6>
      goto exit;
 8016b72:	bf00      	nop
 8016b74:	e000      	b.n	8016b78 <wc_ecc_mulmod_ex2+0x2c6>

exit:
 8016b76:	bf00      	nop

   /* done */
   wc_ecc_del_point_ex(tG, heap);
 8016b78:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016b7c:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 8016b80:	4618      	mov	r0, r3
 8016b82:	f000 f878 	bl	8016c76 <wc_ecc_del_point_ex>
   for (i = 0; i < M_POINTS; i++) {
 8016b86:	2300      	movs	r3, #0
 8016b88:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016b8c:	e011      	b.n	8016bb2 <wc_ecc_mulmod_ex2+0x300>
      wc_ecc_del_point_ex(M[i], heap);
 8016b8e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016b92:	009b      	lsls	r3, r3, #2
 8016b94:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016b98:	443b      	add	r3, r7
 8016b9a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8016b9e:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f000 f867 	bl	8016c76 <wc_ecc_del_point_ex>
   for (i = 0; i < M_POINTS; i++) {
 8016ba8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016bac:	3301      	adds	r3, #1
 8016bae:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8016bb2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016bb6:	2b02      	cmp	r3, #2
 8016bb8:	dde9      	ble.n	8016b8e <wc_ecc_mulmod_ex2+0x2dc>
#ifdef WOLFSSL_SMALL_STACK_CACHE
   R->key = NULL;
   ecc_key_tmp_final(&key, heap);
#endif /* WOLFSSL_SMALL_STACK_CACHE */

   return err;
 8016bba:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bdb0      	pop	{r4, r5, r7, pc}

08016bc8 <wc_ecc_new_point_ex>:
 * Allocate a new ECC point (if one not provided)
 * use a heap hint when creating new ecc_point
 * return an allocated point on success or NULL on failure
*/
static int wc_ecc_new_point_ex(ecc_point** point, void* heap)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b084      	sub	sp, #16
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	6039      	str	r1, [r7, #0]
   int err = MP_OKAY;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	60bb      	str	r3, [r7, #8]
   ecc_point* p;

   if (point == NULL) {
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d102      	bne.n	8016be2 <wc_ecc_new_point_ex+0x1a>
       return BAD_FUNC_ARG;
 8016bdc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8016be0:	e036      	b.n	8016c50 <wc_ecc_new_point_ex+0x88>
   }

   p = *point;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	60fb      	str	r3, [r7, #12]
#ifndef WOLFSSL_NO_MALLOC
   if (p == NULL) {
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d103      	bne.n	8016bf6 <wc_ecc_new_point_ex+0x2e>
      p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
 8016bee:	20fc      	movs	r0, #252	; 0xfc
 8016bf0:	f001 ffdc 	bl	8018bac <wolfSSL_Malloc>
 8016bf4:	60f8      	str	r0, [r7, #12]
   }
#endif
   if (p == NULL) {
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d102      	bne.n	8016c02 <wc_ecc_new_point_ex+0x3a>
      return MEMORY_E;
 8016bfc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8016c00:	e026      	b.n	8016c50 <wc_ecc_new_point_ex+0x88>
   }
   XMEMSET(p, 0, sizeof(ecc_point));
 8016c02:	22fc      	movs	r2, #252	; 0xfc
 8016c04:	2100      	movs	r1, #0
 8016c06:	68f8      	ldr	r0, [r7, #12]
 8016c08:	f00a fb94 	bl	8021334 <memset>
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
   #endif
      return err;
   }
#else
   p->x = (mp_int*)&p->xyz[0];
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	f103 020c 	add.w	r2, r3, #12
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	601a      	str	r2, [r3, #0]
   p->y = (mp_int*)&p->xyz[1];
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	605a      	str	r2, [r3, #4]
   p->z = (mp_int*)&p->xyz[2];
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	609a      	str	r2, [r3, #8]
   alt_fp_init(p->x);
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7fe f98c 	bl	8014f4c <alt_fp_init>
   alt_fp_init(p->y);
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f7fe f987 	bl	8014f4c <alt_fp_init>
   alt_fp_init(p->z);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	689b      	ldr	r3, [r3, #8]
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7fe f982 	bl	8014f4c <alt_fp_init>
#endif

   *point = p;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	68fa      	ldr	r2, [r7, #12]
 8016c4c:	601a      	str	r2, [r3, #0]
   (void)heap;
   return err;
 8016c4e:	68bb      	ldr	r3, [r7, #8]
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3710      	adds	r7, #16
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <wc_ecc_new_point>:
    ecc_point* p = NULL;
    (void)wc_ecc_new_point_ex(&p, heap);
    return p;
}
ecc_point* wc_ecc_new_point(void)
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
   ecc_point* p = NULL;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	607b      	str	r3, [r7, #4]
   (void)wc_ecc_new_point_ex(&p, NULL);
 8016c62:	1d3b      	adds	r3, r7, #4
 8016c64:	2100      	movs	r1, #0
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7ff ffae 	bl	8016bc8 <wc_ecc_new_point_ex>
   return p;
 8016c6c:	687b      	ldr	r3, [r7, #4]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}

08016c76 <wc_ecc_del_point_ex>:

/** Free an ECC point from memory
  p   The point to free
*/
static void wc_ecc_del_point_ex(ecc_point* p, void* heap)
{
 8016c76:	b580      	push	{r7, lr}
 8016c78:	b084      	sub	sp, #16
 8016c7a:	af00      	add	r7, sp, #0
 8016c7c:	6078      	str	r0, [r7, #4]
 8016c7e:	6039      	str	r1, [r7, #0]
   if (p != NULL) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d016      	beq.n	8016cb4 <wc_ecc_del_point_ex+0x3e>
      mp_clear(p->x);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f009 fb76 	bl	802037c <mp_clear>
      mp_clear(p->y);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	4618      	mov	r0, r3
 8016c96:	f009 fb71 	bl	802037c <mp_clear>
      mp_clear(p->z);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	689b      	ldr	r3, [r3, #8]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f009 fb6c 	bl	802037c <mp_clear>
   #ifndef WOLFSSL_NO_MALLOC
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	60fb      	str	r3, [r7, #12]
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d002      	beq.n	8016cb4 <wc_ecc_del_point_ex+0x3e>
 8016cae:	68f8      	ldr	r0, [r7, #12]
 8016cb0:	f001 ff98 	bl	8018be4 <wolfSSL_Free>
   #endif
   }
   (void)heap;
}
 8016cb4:	bf00      	nop
 8016cb6:	3710      	adds	r7, #16
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <wc_ecc_del_point>:
void wc_ecc_del_point_h(ecc_point* p, void* heap)
{
   wc_ecc_del_point_ex(p, heap);
}
void wc_ecc_del_point(ecc_point* p)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
    wc_ecc_del_point_ex(p, NULL);
 8016cc4:	2100      	movs	r1, #0
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7ff ffd5 	bl	8016c76 <wc_ecc_del_point_ex>
}
 8016ccc:	bf00      	nop
 8016cce:	3708      	adds	r7, #8
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <wc_ecc_copy_point>:
/** Copy the value of a point to an other one
  p    The point to copy
  r    The created point
*/
int wc_ecc_copy_point(const ecc_point* p, ecc_point *r)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b084      	sub	sp, #16
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
 8016cdc:	6039      	str	r1, [r7, #0]
    int ret;

    /* prevents null arguments */
    if (p == NULL || r == NULL)
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d002      	beq.n	8016cea <wc_ecc_copy_point+0x16>
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d102      	bne.n	8016cf0 <wc_ecc_copy_point+0x1c>
        return ECC_BAD_ARG_E;
 8016cea:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8016cee:	e02a      	b.n	8016d46 <wc_ecc_copy_point+0x72>

    ret = mp_copy(p->x, r->x);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	4619      	mov	r1, r3
 8016cfa:	4610      	mov	r0, r2
 8016cfc:	f009 fcfd 	bl	80206fa <mp_copy>
 8016d00:	60f8      	str	r0, [r7, #12]
    if (ret != MP_OKAY)
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d001      	beq.n	8016d0c <wc_ecc_copy_point+0x38>
        return ret;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	e01c      	b.n	8016d46 <wc_ecc_copy_point+0x72>
    ret = mp_copy(p->y, r->y);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	685a      	ldr	r2, [r3, #4]
 8016d10:	683b      	ldr	r3, [r7, #0]
 8016d12:	685b      	ldr	r3, [r3, #4]
 8016d14:	4619      	mov	r1, r3
 8016d16:	4610      	mov	r0, r2
 8016d18:	f009 fcef 	bl	80206fa <mp_copy>
 8016d1c:	60f8      	str	r0, [r7, #12]
    if (ret != MP_OKAY)
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <wc_ecc_copy_point+0x54>
        return ret;
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	e00e      	b.n	8016d46 <wc_ecc_copy_point+0x72>
    ret = mp_copy(p->z, r->z);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	689a      	ldr	r2, [r3, #8]
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	689b      	ldr	r3, [r3, #8]
 8016d30:	4619      	mov	r1, r3
 8016d32:	4610      	mov	r0, r2
 8016d34:	f009 fce1 	bl	80206fa <mp_copy>
 8016d38:	60f8      	str	r0, [r7, #12]
    if (ret != MP_OKAY)
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d001      	beq.n	8016d44 <wc_ecc_copy_point+0x70>
        return ret;
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	e000      	b.n	8016d46 <wc_ecc_copy_point+0x72>

    return MP_OKAY;
 8016d44:	2300      	movs	r3, #0
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3710      	adds	r7, #16
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
	...

08016d50 <wc_ecc_is_valid_idx>:
/** Returns whether an ECC idx is valid or not
  n      The idx number to check
  return 1 if valid, 0 if not
*/
int wc_ecc_is_valid_idx(int n)
{
 8016d50:	b480      	push	{r7}
 8016d52:	b085      	sub	sp, #20
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
   int x;

   if (n >= (int)ECC_SET_COUNT)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	dd01      	ble.n	8016d62 <wc_ecc_is_valid_idx+0x12>
       return 0;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	e019      	b.n	8016d96 <wc_ecc_is_valid_idx+0x46>

   for (x = 0; ecc_sets[x].size != 0; x++)
 8016d62:	2300      	movs	r3, #0
 8016d64:	60fb      	str	r3, [r7, #12]
 8016d66:	e002      	b.n	8016d6e <wc_ecc_is_valid_idx+0x1e>
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	3301      	adds	r3, #1
 8016d6c:	60fb      	str	r3, [r7, #12]
 8016d6e:	4a0d      	ldr	r2, [pc, #52]	; (8016da4 <wc_ecc_is_valid_idx+0x54>)
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	2134      	movs	r1, #52	; 0x34
 8016d74:	fb01 f303 	mul.w	r3, r1, r3
 8016d78:	4413      	add	r3, r2
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d1f3      	bne.n	8016d68 <wc_ecc_is_valid_idx+0x18>
       ;
   /* -1 is a valid index --- indicating that the domain params
      were supplied by the user */
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d86:	db05      	blt.n	8016d94 <wc_ecc_is_valid_idx+0x44>
 8016d88:	687a      	ldr	r2, [r7, #4]
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	429a      	cmp	r2, r3
 8016d8e:	da01      	bge.n	8016d94 <wc_ecc_is_valid_idx+0x44>
      return 1;
 8016d90:	2301      	movs	r3, #1
 8016d92:	e000      	b.n	8016d96 <wc_ecc_is_valid_idx+0x46>
   }

   return 0;
 8016d94:	2300      	movs	r3, #0
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	3714      	adds	r7, #20
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da0:	4770      	bx	lr
 8016da2:	bf00      	nop
 8016da4:	0802bf1c 	.word	0x0802bf1c

08016da8 <wc_ecc_get_curve_idx>:

int wc_ecc_get_curve_idx(int curve_id)
{
 8016da8:	b480      	push	{r7}
 8016daa:	b085      	sub	sp, #20
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
    int curve_idx;
    for (curve_idx = 0; ecc_sets[curve_idx].size != 0; curve_idx++) {
 8016db0:	2300      	movs	r3, #0
 8016db2:	60fb      	str	r3, [r7, #12]
 8016db4:	e00d      	b.n	8016dd2 <wc_ecc_get_curve_idx+0x2a>
        if (curve_id == ecc_sets[curve_idx].id)
 8016db6:	4a16      	ldr	r2, [pc, #88]	; (8016e10 <wc_ecc_get_curve_idx+0x68>)
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	2134      	movs	r1, #52	; 0x34
 8016dbc:	fb01 f303 	mul.w	r3, r1, r3
 8016dc0:	4413      	add	r3, r2
 8016dc2:	3304      	adds	r3, #4
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	687a      	ldr	r2, [r7, #4]
 8016dc8:	429a      	cmp	r2, r3
 8016dca:	d00c      	beq.n	8016de6 <wc_ecc_get_curve_idx+0x3e>
    for (curve_idx = 0; ecc_sets[curve_idx].size != 0; curve_idx++) {
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	60fb      	str	r3, [r7, #12]
 8016dd2:	4a0f      	ldr	r2, [pc, #60]	; (8016e10 <wc_ecc_get_curve_idx+0x68>)
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	2134      	movs	r1, #52	; 0x34
 8016dd8:	fb01 f303 	mul.w	r3, r1, r3
 8016ddc:	4413      	add	r3, r2
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d1e8      	bne.n	8016db6 <wc_ecc_get_curve_idx+0xe>
 8016de4:	e000      	b.n	8016de8 <wc_ecc_get_curve_idx+0x40>
            break;
 8016de6:	bf00      	nop
    }
    if (ecc_sets[curve_idx].size == 0) {
 8016de8:	4a09      	ldr	r2, [pc, #36]	; (8016e10 <wc_ecc_get_curve_idx+0x68>)
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	2134      	movs	r1, #52	; 0x34
 8016dee:	fb01 f303 	mul.w	r3, r1, r3
 8016df2:	4413      	add	r3, r2
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d102      	bne.n	8016e00 <wc_ecc_get_curve_idx+0x58>
        return ECC_CURVE_INVALID;
 8016dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8016dfe:	e000      	b.n	8016e02 <wc_ecc_get_curve_idx+0x5a>
    }
    return curve_idx;
 8016e00:	68fb      	ldr	r3, [r7, #12]
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3714      	adds	r7, #20
 8016e06:	46bd      	mov	sp, r7
 8016e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0c:	4770      	bx	lr
 8016e0e:	bf00      	nop
 8016e10:	0802bf1c 	.word	0x0802bf1c

08016e14 <wc_ecc_get_curve_size_from_id>:
 *
 * id      curve id, from ecc_curve_id enum in ecc.h
 * return  curve size, from ecc_sets[] on success, negative on error
 */
int wc_ecc_get_curve_size_from_id(int curve_id)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b084      	sub	sp, #16
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
    int curve_idx = wc_ecc_get_curve_idx(curve_id);
 8016e1c:	6878      	ldr	r0, [r7, #4]
 8016e1e:	f7ff ffc3 	bl	8016da8 <wc_ecc_get_curve_idx>
 8016e22:	60f8      	str	r0, [r7, #12]
    if (curve_idx == ECC_CURVE_INVALID)
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e2a:	d102      	bne.n	8016e32 <wc_ecc_get_curve_size_from_id+0x1e>
        return ECC_BAD_ARG_E;
 8016e2c:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8016e30:	e006      	b.n	8016e40 <wc_ecc_get_curve_size_from_id+0x2c>
    return ecc_sets[curve_idx].size;
 8016e32:	4a05      	ldr	r2, [pc, #20]	; (8016e48 <wc_ecc_get_curve_size_from_id+0x34>)
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2134      	movs	r1, #52	; 0x34
 8016e38:	fb01 f303 	mul.w	r3, r1, r3
 8016e3c:	4413      	add	r3, r2
 8016e3e:	681b      	ldr	r3, [r3, #0]
}
 8016e40:	4618      	mov	r0, r3
 8016e42:	3710      	adds	r7, #16
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd80      	pop	{r7, pc}
 8016e48:	0802bf1c 	.word	0x0802bf1c

08016e4c <wc_ecc_gen_k>:
}
#endif /* !WOLFSSL_ATECC508A && !WOLFSSL_CRYPTOCELL */

/* generate random and ensure its greater than 0 and less than order */
int wc_ecc_gen_k(WC_RNG* rng, int size, mp_int* k, mp_int* order)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b098      	sub	sp, #96	; 0x60
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	60f8      	str	r0, [r7, #12]
 8016e54:	60b9      	str	r1, [r7, #8]
 8016e56:	607a      	str	r2, [r7, #4]
 8016e58:	603b      	str	r3, [r7, #0]
#ifndef WC_NO_RNG
    int err;
    byte buf[ECC_MAXSIZE_GEN];

    if (rng == NULL || size + 8 > ECC_MAXSIZE_GEN || k == NULL ||
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d008      	beq.n	8016e72 <wc_ecc_gen_k+0x26>
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	2b42      	cmp	r3, #66	; 0x42
 8016e64:	dc05      	bgt.n	8016e72 <wc_ecc_gen_k+0x26>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d002      	beq.n	8016e72 <wc_ecc_gen_k+0x26>
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d102      	bne.n	8016e78 <wc_ecc_gen_k+0x2c>
                                                                order == NULL) {
        return BAD_FUNC_ARG;
 8016e72:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8016e76:	e039      	b.n	8016eec <wc_ecc_gen_k+0xa0>
    }

    /* generate 8 extra bytes to mitigate bias from the modulo operation below */
    /* see section A.1.2 in 'Suite B Implementor's Guide to FIPS 186-3 (ECDSA)' */
    size += 8;
 8016e78:	68bb      	ldr	r3, [r7, #8]
 8016e7a:	3308      	adds	r3, #8
 8016e7c:	60bb      	str	r3, [r7, #8]

    /* make up random string */
    err = wc_RNG_GenerateBlock(rng, buf, size);
 8016e7e:	68ba      	ldr	r2, [r7, #8]
 8016e80:	f107 0310 	add.w	r3, r7, #16
 8016e84:	4619      	mov	r1, r3
 8016e86:	68f8      	ldr	r0, [r7, #12]
 8016e88:	f002 fc69 	bl	801975e <wc_RNG_GenerateBlock>
 8016e8c:	65f8      	str	r0, [r7, #92]	; 0x5c
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("wc_ecc_gen_k buf", buf, size);
#endif

    /* load random buffer data into k */
    if (err == 0)
 8016e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d107      	bne.n	8016ea4 <wc_ecc_gen_k+0x58>
        err = mp_read_unsigned_bin(k, buf, size);
 8016e94:	f107 0310 	add.w	r3, r7, #16
 8016e98:	68ba      	ldr	r2, [r7, #8]
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f009 fbb9 	bl	8020614 <mp_read_unsigned_bin>
 8016ea2:	65f8      	str	r0, [r7, #92]	; 0x5c

    /* the key should be smaller than the order of base point */
    if (err == MP_OKAY) {
 8016ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d10d      	bne.n	8016ec6 <wc_ecc_gen_k+0x7a>
        if (mp_cmp(k, order) != MP_LT) {
 8016eaa:	6839      	ldr	r1, [r7, #0]
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f009 fb6b 	bl	8020588 <mp_cmp>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eb8:	d005      	beq.n	8016ec6 <wc_ecc_gen_k+0x7a>
            err = mp_mod(k, order, k);
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	6839      	ldr	r1, [r7, #0]
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f009 fb0c 	bl	80204dc <mp_mod>
 8016ec4:	65f8      	str	r0, [r7, #92]	; 0x5c
        }
    }

    /* quick sanity check to make sure we're not dealing with a 0 key */
    if (err == MP_OKAY) {
 8016ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d108      	bne.n	8016ede <wc_ecc_gen_k+0x92>
        if (mp_iszero(k) == MP_YES)
 8016ecc:	6878      	ldr	r0, [r7, #4]
 8016ece:	f009 fc22 	bl	8020716 <mp_iszero>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b01      	cmp	r3, #1
 8016ed6:	d102      	bne.n	8016ede <wc_ecc_gen_k+0x92>
          err = MP_ZERO_E;
 8016ed8:	f06f 0378 	mvn.w	r3, #120	; 0x78
 8016edc:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    ForceZero(buf, ECC_MAXSIZE_GEN);
 8016ede:	f107 0310 	add.w	r3, r7, #16
 8016ee2:	214a      	movs	r1, #74	; 0x4a
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7fd fe4f 	bl	8014b88 <ForceZero>
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(buf, ECC_MAXSIZE_GEN);
#endif

    return err;
 8016eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    (void)size;
    (void)k;
    (void)order;
    return NOT_COMPILED_IN;
#endif /* !WC_NO_RNG */
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3760      	adds	r7, #96	; 0x60
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}

08016ef4 <wc_ecc_reset>:

static WC_INLINE void wc_ecc_reset(ecc_key* key)
{
 8016ef4:	b480      	push	{r7}
 8016ef6:	b083      	sub	sp, #12
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
    /* make sure required key variables are reset */
    key->state = ECC_STATE_NONE;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2200      	movs	r2, #0
 8016f00:	609a      	str	r2, [r3, #8]
}
 8016f02:	bf00      	nop
 8016f04:	370c      	adds	r7, #12
 8016f06:	46bd      	mov	sp, r7
 8016f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0c:	4770      	bx	lr

08016f0e <ecc_make_pub_ex>:
 *
 * returns MP_OKAY on success
 */
static int ecc_make_pub_ex(ecc_key* key, ecc_curve_spec* curveIn,
        ecc_point* pubOut, WC_RNG* rng)
{
 8016f0e:	b5b0      	push	{r4, r5, r7, lr}
 8016f10:	b09c      	sub	sp, #112	; 0x70
 8016f12:	af06      	add	r7, sp, #24
 8016f14:	60f8      	str	r0, [r7, #12]
 8016f16:	60b9      	str	r1, [r7, #8]
 8016f18:	607a      	str	r2, [r7, #4]
 8016f1a:	603b      	str	r3, [r7, #0]
    int err = MP_OKAY;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	657b      	str	r3, [r7, #84]	; 0x54
#ifdef HAVE_ECC_MAKE_PUB
    ecc_point* pub;
    DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 8016f20:	2300      	movs	r3, #0
 8016f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016f24:	f107 0320 	add.w	r3, r7, #32
 8016f28:	61fb      	str	r3, [r7, #28]
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	2228      	movs	r2, #40	; 0x28
 8016f2e:	2100      	movs	r1, #0
 8016f30:	4618      	mov	r0, r3
 8016f32:	f00a f9ff 	bl	8021334 <memset>
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	2205      	movs	r2, #5
 8016f3a:	61da      	str	r2, [r3, #28]
#endif /* HAVE_ECC_MAKE_PUB */

    (void)rng;

    if (key == NULL) {
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d102      	bne.n	8016f48 <ecc_make_pub_ex+0x3a>
        return BAD_FUNC_ARG;
 8016f42:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8016f46:	e0fe      	b.n	8017146 <ecc_make_pub_ex+0x238>

    SAVE_VECTOR_REGISTERS(return _svr_ret;);

#ifdef HAVE_ECC_MAKE_PUB
    /* if ecc_point passed in then use it as output for public key point */
    if (pubOut != NULL) {
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d002      	beq.n	8016f54 <ecc_make_pub_ex+0x46>
        pub = pubOut;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	653b      	str	r3, [r7, #80]	; 0x50
 8016f52:	e005      	b.n	8016f60 <ecc_make_pub_ex+0x52>
    }
    else {
        /* caching public key making it a ECC_PRIVATEKEY instead of
           ECC_PRIVATEKEY_ONLY */
        pub = &key->pubkey;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	3318      	adds	r3, #24
 8016f58:	653b      	str	r3, [r7, #80]	; 0x50
        key->type = ECC_PRIVATEKEY_ONLY;
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	2203      	movs	r2, #3
 8016f5e:	601a      	str	r2, [r3, #0]
    }

    /* avoid loading the curve unless it is not passed in */
    if (curveIn != NULL) {
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d002      	beq.n	8016f6c <ecc_make_pub_ex+0x5e>
        curve = curveIn;
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	61fb      	str	r3, [r7, #28]
 8016f6a:	e01d      	b.n	8016fa8 <ecc_make_pub_ex+0x9a>
    }
    else {
        /* load curve info */
        if (err == MP_OKAY) {
 8016f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d10e      	bne.n	8016f90 <ecc_make_pub_ex+0x82>
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8016f72:	f640 20dc 	movw	r0, #2780	; 0xadc
 8016f76:	f001 fe19 	bl	8018bac <wolfSSL_Malloc>
 8016f7a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d103      	bne.n	8016f8a <ecc_make_pub_ex+0x7c>
 8016f82:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8016f86:	657b      	str	r3, [r7, #84]	; 0x54
 8016f88:	e002      	b.n	8016f90 <ecc_make_pub_ex+0x82>
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f8e:	619a      	str	r2, [r3, #24]
        }
        if (err == MP_OKAY) {
 8016f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d108      	bne.n	8016fa8 <ecc_make_pub_ex+0x9a>
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	691b      	ldr	r3, [r3, #16]
 8016f9a:	f107 011c 	add.w	r1, r7, #28
 8016f9e:	223b      	movs	r2, #59	; 0x3b
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f7fd feca 	bl	8014d3a <wc_ecc_curve_load>
 8016fa6:	6578      	str	r0, [r7, #84]	; 0x54
        }
    }

    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8016fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d11d      	bne.n	8016fea <ecc_make_pub_ex+0xdc>
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f009 fbae 	bl	8020716 <mp_iszero>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d111      	bne.n	8016fe4 <ecc_make_pub_ex+0xd6>
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d10c      	bne.n	8016fe4 <ecc_make_pub_ex+0xd6>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	f503 728a 	add.w	r2, r3, #276	; 0x114
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	4610      	mov	r0, r2
 8016fd8:	f009 fad6 	bl	8020588 <mp_cmp>
 8016fdc:	4603      	mov	r3, r0
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8016fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fe2:	d002      	beq.n	8016fea <ecc_make_pub_ex+0xdc>
    {
        err = ECC_PRIV_KEY_E;
 8016fe4:	f06f 03d7 	mvn.w	r3, #215	; 0xd7
 8016fe8:	657b      	str	r3, [r7, #84]	; 0x54
    }

    if (err == MP_OKAY) {
 8016fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d11d      	bne.n	801702c <ecc_make_pub_ex+0x11e>
    #ifndef ALT_ECC_SIZE
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
    #else
        pub->x = (mp_int*)&pub->xyz[0];
 8016ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ff2:	f103 020c 	add.w	r2, r3, #12
 8016ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ff8:	601a      	str	r2, [r3, #0]
        pub->y = (mp_int*)&pub->xyz[1];
 8016ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ffc:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8017000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017002:	605a      	str	r2, [r3, #4]
        pub->z = (mp_int*)&pub->xyz[2];
 8017004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017006:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 801700a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801700c:	609a      	str	r2, [r3, #8]
        alt_fp_init(pub->x);
 801700e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	4618      	mov	r0, r3
 8017014:	f7fd ff9a 	bl	8014f4c <alt_fp_init>
        alt_fp_init(pub->y);
 8017018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	4618      	mov	r0, r3
 801701e:	f7fd ff95 	bl	8014f4c <alt_fp_init>
        alt_fp_init(pub->z);
 8017022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017024:	689b      	ldr	r3, [r3, #8]
 8017026:	4618      	mov	r0, r3
 8017028:	f7fd ff90 	bl	8014f4c <alt_fp_init>
#endif /* WOLFSSL_HAVE_SP_ECC */

#if defined(WOLFSSL_SP_MATH)
        err = WC_KEY_SIZE_E;
#else
    if (err == MP_OKAY) {
 801702c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801702e:	2b00      	cmp	r3, #0
 8017030:	d16f      	bne.n	8017112 <ecc_make_pub_ex+0x204>
        /* Multi-Precision Math: compute public curve */
        mp_digit mp = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	61bb      	str	r3, [r7, #24]
        ecc_point* base = NULL;
 8017036:	2300      	movs	r3, #0
 8017038:	617b      	str	r3, [r7, #20]
    #ifdef WOLFSSL_NO_MALLOC
        ecc_point  lcl_base;
        base = &lcl_base;
    #endif
        err = wc_ecc_new_point_ex(&base, key->heap);
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	695a      	ldr	r2, [r3, #20]
 801703e:	f107 0314 	add.w	r3, r7, #20
 8017042:	4611      	mov	r1, r2
 8017044:	4618      	mov	r0, r3
 8017046:	f7ff fdbf 	bl	8016bc8 <wc_ecc_new_point_ex>
 801704a:	6578      	str	r0, [r7, #84]	; 0x54

        /* read in the x/y for this key */
        if (err == MP_OKAY)
 801704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801704e:	2b00      	cmp	r3, #0
 8017050:	d108      	bne.n	8017064 <ecc_make_pub_ex+0x156>
            err = mp_copy(curve->Gx, base->x);
 8017052:	69fb      	ldr	r3, [r7, #28]
 8017054:	691a      	ldr	r2, [r3, #16]
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	4619      	mov	r1, r3
 801705c:	4610      	mov	r0, r2
 801705e:	f009 fb4c 	bl	80206fa <mp_copy>
 8017062:	6578      	str	r0, [r7, #84]	; 0x54
        if (err == MP_OKAY)
 8017064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017066:	2b00      	cmp	r3, #0
 8017068:	d108      	bne.n	801707c <ecc_make_pub_ex+0x16e>
            err = mp_copy(curve->Gy, base->y);
 801706a:	69fb      	ldr	r3, [r7, #28]
 801706c:	695a      	ldr	r2, [r3, #20]
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	4619      	mov	r1, r3
 8017074:	4610      	mov	r0, r2
 8017076:	f009 fb40 	bl	80206fa <mp_copy>
 801707a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err == MP_OKAY)
 801707c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801707e:	2b00      	cmp	r3, #0
 8017080:	d108      	bne.n	8017094 <ecc_make_pub_ex+0x186>
            err = mp_montgomery_setup(curve->prime, &mp);
 8017082:	69fb      	ldr	r3, [r7, #28]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	f107 0218 	add.w	r2, r7, #24
 801708a:	4611      	mov	r1, r2
 801708c:	4618      	mov	r0, r3
 801708e:	f009 fd9f 	bl	8020bd0 <mp_montgomery_setup>
 8017092:	6578      	str	r0, [r7, #84]	; 0x54
        if (err == MP_OKAY)
 8017094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017096:	2b00      	cmp	r3, #0
 8017098:	d106      	bne.n	80170a8 <ecc_make_pub_ex+0x19a>
            err = mp_set(base->z, 1);
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	689b      	ldr	r3, [r3, #8]
 801709e:	2101      	movs	r1, #1
 80170a0:	4618      	mov	r0, r3
 80170a2:	f009 fdb3 	bl	8020c0c <mp_set>
 80170a6:	6578      	str	r0, [r7, #84]	; 0x54

        /* make the public key */
        if (err == MP_OKAY) {
 80170a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d11f      	bne.n	80170ee <ecc_make_pub_ex+0x1e0>
            /* Map in a separate call as this should be constant time */
            err = wc_ecc_mulmod_ex2(&key->k, base, pub, curve->Af, curve->prime,
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	f503 708a 	add.w	r0, r3, #276	; 0x114
 80170b4:	697c      	ldr	r4, [r7, #20]
 80170b6:	69fb      	ldr	r3, [r7, #28]
 80170b8:	689d      	ldr	r5, [r3, #8]
 80170ba:	69fb      	ldr	r3, [r7, #28]
 80170bc:	685b      	ldr	r3, [r3, #4]
                                               curve->order, rng, 0, key->heap);
 80170be:	69fa      	ldr	r2, [r7, #28]
            err = wc_ecc_mulmod_ex2(&key->k, base, pub, curve->Af, curve->prime,
 80170c0:	68d2      	ldr	r2, [r2, #12]
 80170c2:	68f9      	ldr	r1, [r7, #12]
 80170c4:	6949      	ldr	r1, [r1, #20]
 80170c6:	9104      	str	r1, [sp, #16]
 80170c8:	2100      	movs	r1, #0
 80170ca:	9103      	str	r1, [sp, #12]
 80170cc:	6839      	ldr	r1, [r7, #0]
 80170ce:	9102      	str	r1, [sp, #8]
 80170d0:	9201      	str	r2, [sp, #4]
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	462b      	mov	r3, r5
 80170d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80170d8:	4621      	mov	r1, r4
 80170da:	f7ff fbea 	bl	80168b2 <wc_ecc_mulmod_ex2>
 80170de:	6578      	str	r0, [r7, #84]	; 0x54
            if (err == MP_MEM) {
 80170e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170e2:	f113 0f02 	cmn.w	r3, #2
 80170e6:	d102      	bne.n	80170ee <ecc_make_pub_ex+0x1e0>
               err = MEMORY_E;
 80170e8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80170ec:	657b      	str	r3, [r7, #84]	; 0x54
            }
        }
        if (err == MP_OKAY) {
 80170ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d107      	bne.n	8017104 <ecc_make_pub_ex+0x1f6>
            /* Use constant time map if compiled in */
            err = ecc_map_ex(pub, curve->prime, mp, 1);
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	6859      	ldr	r1, [r3, #4]
 80170f8:	69ba      	ldr	r2, [r7, #24]
 80170fa:	2301      	movs	r3, #1
 80170fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80170fe:	f7fe fe63 	bl	8015dc8 <ecc_map_ex>
 8017102:	6578      	str	r0, [r7, #84]	; 0x54
        }

        wc_ecc_del_point_ex(base, key->heap);
 8017104:	697a      	ldr	r2, [r7, #20]
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	695b      	ldr	r3, [r3, #20]
 801710a:	4619      	mov	r1, r3
 801710c:	4610      	mov	r0, r2
 801710e:	f7ff fdb2 	bl	8016c76 <wc_ecc_del_point_ex>
        mp_clear(pub->z);
    #endif
    }

    /* free up local curve */
    if (curveIn == NULL) {
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d10b      	bne.n	8017130 <ecc_make_pub_ex+0x222>
        wc_ecc_curve_free(curve);
 8017118:	69fb      	ldr	r3, [r7, #28]
 801711a:	4618      	mov	r0, r3
 801711c:	f7fd fdc2 	bl	8014ca4 <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 8017120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017122:	64bb      	str	r3, [r7, #72]	; 0x48
 8017124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017126:	2b00      	cmp	r3, #0
 8017128:	d002      	beq.n	8017130 <ecc_make_pub_ex+0x222>
 801712a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801712c:	f001 fd5a 	bl	8018be4 <wolfSSL_Free>
    (void)curveIn;
    err = NOT_COMPILED_IN;
#endif /* HAVE_ECC_MAKE_PUB */

    /* change key state if public part is cached */
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	2b03      	cmp	r3, #3
 8017136:	d105      	bne.n	8017144 <ecc_make_pub_ex+0x236>
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d102      	bne.n	8017144 <ecc_make_pub_ex+0x236>
        key->type = ECC_PRIVATEKEY;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	2202      	movs	r2, #2
 8017142:	601a      	str	r2, [r3, #0]
    }

    RESTORE_VECTOR_REGISTERS();

    return err;
 8017144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8017146:	4618      	mov	r0, r3
 8017148:	3758      	adds	r7, #88	; 0x58
 801714a:	46bd      	mov	sp, r7
 801714c:	bdb0      	pop	{r4, r5, r7, pc}

0801714e <wc_ecc_init_ex>:
}

/* Setup dynamic pointers if using normal math for proper freeing */
WOLFSSL_ABI
int wc_ecc_init_ex(ecc_key* key, void* heap, int devId)
{
 801714e:	b580      	push	{r7, lr}
 8017150:	b086      	sub	sp, #24
 8017152:	af00      	add	r7, sp, #0
 8017154:	60f8      	str	r0, [r7, #12]
 8017156:	60b9      	str	r1, [r7, #8]
 8017158:	607a      	str	r2, [r7, #4]
    int ret = 0;
 801715a:	2300      	movs	r3, #0
 801715c:	617b      	str	r3, [r7, #20]

    if (key == NULL) {
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d102      	bne.n	801716a <wc_ecc_init_ex+0x1c>
        return BAD_FUNC_ARG;
 8017164:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8017168:	e037      	b.n	80171da <wc_ecc_init_ex+0x8c>

#ifdef ECC_DUMP_OID
    wc_ecc_dump_oids();
#endif

    XMEMSET(key, 0, sizeof(ecc_key));
 801716a:	f44f 7251 	mov.w	r2, #836	; 0x344
 801716e:	2100      	movs	r1, #0
 8017170:	68f8      	ldr	r0, [r7, #12]
 8017172:	f00a f8df 	bl	8021334 <memset>
    key->state = ECC_STATE_NONE;
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	2200      	movs	r2, #0
 801717a:	609a      	str	r2, [r3, #8]
    key->slot = ATECC_INVALID_SLOT;
#elif defined(WOLFSSL_KCAPI_ECC)
    key->handle = NULL;
#else
#ifdef ALT_ECC_SIZE
    key->pubkey.x = (mp_int*)&key->pubkey.xyz[0];
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	619a      	str	r2, [r3, #24]
    key->pubkey.y = (mp_int*)&key->pubkey.xyz[1];
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	f103 0274 	add.w	r2, r3, #116	; 0x74
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	61da      	str	r2, [r3, #28]
    key->pubkey.z = (mp_int*)&key->pubkey.xyz[2];
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	621a      	str	r2, [r3, #32]
    alt_fp_init(key->pubkey.x);
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	699b      	ldr	r3, [r3, #24]
 801719e:	4618      	mov	r0, r3
 80171a0:	f7fd fed4 	bl	8014f4c <alt_fp_init>
    alt_fp_init(key->pubkey.y);
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	69db      	ldr	r3, [r3, #28]
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7fd fecf 	bl	8014f4c <alt_fp_init>
    alt_fp_init(key->pubkey.z);
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	6a1b      	ldr	r3, [r3, #32]
 80171b2:	4618      	mov	r0, r3
 80171b4:	f7fd feca 	bl	8014f4c <alt_fp_init>
    ret = mp_init(&key->k);
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80171be:	4618      	mov	r0, r3
 80171c0:	f009 f856 	bl	8020270 <mp_init>
 80171c4:	6178      	str	r0, [r7, #20]
    if (ret != MP_OKAY) {
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d002      	beq.n	80171d2 <wc_ecc_init_ex+0x84>
        return MEMORY_E;
 80171cc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80171d0:	e003      	b.n	80171da <wc_ecc_init_ex+0x8c>
#endif

#ifdef WOLFSSL_HEAP_TEST
    key->heap = (void*)WOLFSSL_HEAP_TEST;
#else
    key->heap = heap;
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	68ba      	ldr	r2, [r7, #8]
 80171d6:	615a      	str	r2, [r3, #20]
        WOLFSSL_MSG("Can't initialize Xsecure");
        return WC_HW_E;
    }
#endif

    return ret;
 80171d8:	697b      	ldr	r3, [r7, #20]
}
 80171da:	4618      	mov	r0, r3
 80171dc:	3718      	adds	r7, #24
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}

080171e2 <wc_ecc_init>:

WOLFSSL_ABI
int wc_ecc_init(ecc_key* key)
{
 80171e2:	b580      	push	{r7, lr}
 80171e4:	b082      	sub	sp, #8
 80171e6:	af00      	add	r7, sp, #0
 80171e8:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_QNX_CAAM
    return wc_ecc_init_ex(key, NULL, WOLFSSL_CAAM_DEVID);
#else
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
 80171ea:	f06f 0201 	mvn.w	r2, #1
 80171ee:	2100      	movs	r1, #0
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f7ff ffac 	bl	801714e <wc_ecc_init_ex>
 80171f6:	4603      	mov	r3, r0
#endif
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	3708      	adds	r7, #8
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}

08017200 <wc_ecc_free>:
  Free an ECC key from memory
  key   The key you wish to free
*/
WOLFSSL_ABI
int wc_ecc_free(ecc_key* key)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
    if (key == NULL) {
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d101      	bne.n	8017212 <wc_ecc_free+0x12>
        return 0;
 801720e:	2300      	movs	r3, #0
 8017210:	e015      	b.n	801723e <wc_ecc_free+0x3e>

#ifdef WOLFSSL_MAXQ10XX_CRYPTO
    wc_MAXQ10XX_EccFree(key);
#endif

    mp_clear(key->pubkey.x);
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	699b      	ldr	r3, [r3, #24]
 8017216:	4618      	mov	r0, r3
 8017218:	f009 f8b0 	bl	802037c <mp_clear>
    mp_clear(key->pubkey.y);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	69db      	ldr	r3, [r3, #28]
 8017220:	4618      	mov	r0, r3
 8017222:	f009 f8ab 	bl	802037c <mp_clear>
    mp_clear(key->pubkey.z);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6a1b      	ldr	r3, [r3, #32]
 801722a:	4618      	mov	r0, r3
 801722c:	f009 f8a6 	bl	802037c <mp_clear>

    mp_forcezero(&key->k);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017236:	4618      	mov	r0, r3
 8017238:	f009 f88b 	bl	8020352 <mp_forcezero>

#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(ecc_key));
#endif

    return 0;
 801723c:	2300      	movs	r3, #0
}
 801723e:	4618      	mov	r0, r3
 8017240:	3708      	adds	r7, #8
 8017242:	46bd      	mov	sp, r7
 8017244:	bd80      	pop	{r7, pc}

08017246 <ecc_projective_add_point_safe>:
 *           (Result was: z == 0, x and/or y not 0)
 *        -> Need to set result to infinity.
 */
int ecc_projective_add_point_safe(ecc_point* A, ecc_point* B, ecc_point* R,
    mp_int* a, mp_int* modulus, mp_digit mp, int* infinity)
{
 8017246:	b580      	push	{r7, lr}
 8017248:	b088      	sub	sp, #32
 801724a:	af02      	add	r7, sp, #8
 801724c:	60f8      	str	r0, [r7, #12]
 801724e:	60b9      	str	r1, [r7, #8]
 8017250:	607a      	str	r2, [r7, #4]
 8017252:	603b      	str	r3, [r7, #0]
    int err;

    if (mp_iszero(A->x) && mp_iszero(A->y)) {
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	4618      	mov	r0, r3
 801725a:	f009 fa5c 	bl	8020716 <mp_iszero>
 801725e:	4603      	mov	r3, r0
 8017260:	2b00      	cmp	r3, #0
 8017262:	d00d      	beq.n	8017280 <ecc_projective_add_point_safe+0x3a>
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	4618      	mov	r0, r3
 801726a:	f009 fa54 	bl	8020716 <mp_iszero>
 801726e:	4603      	mov	r3, r0
 8017270:	2b00      	cmp	r3, #0
 8017272:	d005      	beq.n	8017280 <ecc_projective_add_point_safe+0x3a>
        /* A is infinity. */
        err = wc_ecc_copy_point(B, R);
 8017274:	6879      	ldr	r1, [r7, #4]
 8017276:	68b8      	ldr	r0, [r7, #8]
 8017278:	f7ff fd2c 	bl	8016cd4 <wc_ecc_copy_point>
 801727c:	6178      	str	r0, [r7, #20]
 801727e:	e0e1      	b.n	8017444 <ecc_projective_add_point_safe+0x1fe>
    }
    else if (mp_iszero(B->x) && mp_iszero(B->y)) {
 8017280:	68bb      	ldr	r3, [r7, #8]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	4618      	mov	r0, r3
 8017286:	f009 fa46 	bl	8020716 <mp_iszero>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	d00d      	beq.n	80172ac <ecc_projective_add_point_safe+0x66>
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	685b      	ldr	r3, [r3, #4]
 8017294:	4618      	mov	r0, r3
 8017296:	f009 fa3e 	bl	8020716 <mp_iszero>
 801729a:	4603      	mov	r3, r0
 801729c:	2b00      	cmp	r3, #0
 801729e:	d005      	beq.n	80172ac <ecc_projective_add_point_safe+0x66>
        /* B is infinity. */
        err = wc_ecc_copy_point(A, R);
 80172a0:	6879      	ldr	r1, [r7, #4]
 80172a2:	68f8      	ldr	r0, [r7, #12]
 80172a4:	f7ff fd16 	bl	8016cd4 <wc_ecc_copy_point>
 80172a8:	6178      	str	r0, [r7, #20]
 80172aa:	e0cb      	b.n	8017444 <ecc_projective_add_point_safe+0x1fe>
    }
    else if ((mp_cmp(A->x, B->x) == MP_EQ) && (mp_cmp(A->z, B->z) == MP_EQ)) {
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681a      	ldr	r2, [r3, #0]
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	4619      	mov	r1, r3
 80172b6:	4610      	mov	r0, r2
 80172b8:	f009 f966 	bl	8020588 <mp_cmp>
 80172bc:	4603      	mov	r3, r0
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d144      	bne.n	801734c <ecc_projective_add_point_safe+0x106>
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	689a      	ldr	r2, [r3, #8]
 80172c6:	68bb      	ldr	r3, [r7, #8]
 80172c8:	689b      	ldr	r3, [r3, #8]
 80172ca:	4619      	mov	r1, r3
 80172cc:	4610      	mov	r0, r2
 80172ce:	f009 f95b 	bl	8020588 <mp_cmp>
 80172d2:	4603      	mov	r3, r0
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d139      	bne.n	801734c <ecc_projective_add_point_safe+0x106>
        /* x ordinattes the same. */
        if (mp_cmp(A->y, B->y) == MP_EQ) {
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	685a      	ldr	r2, [r3, #4]
 80172dc:	68bb      	ldr	r3, [r7, #8]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	4619      	mov	r1, r3
 80172e2:	4610      	mov	r0, r2
 80172e4:	f009 f950 	bl	8020588 <mp_cmp>
 80172e8:	4603      	mov	r3, r0
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d109      	bne.n	8017302 <ecc_projective_add_point_safe+0xbc>
            /* A = B */
            err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 80172ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f0:	9300      	str	r3, [sp, #0]
 80172f2:	6a3b      	ldr	r3, [r7, #32]
 80172f4:	683a      	ldr	r2, [r7, #0]
 80172f6:	6879      	ldr	r1, [r7, #4]
 80172f8:	68b8      	ldr	r0, [r7, #8]
 80172fa:	f7fe fa84 	bl	8015806 <_ecc_projective_dbl_point>
 80172fe:	6178      	str	r0, [r7, #20]
        if (mp_cmp(A->y, B->y) == MP_EQ) {
 8017300:	e09d      	b.n	801743e <ecc_projective_add_point_safe+0x1f8>
        }
        else {
            /* A = -B */
            err = mp_set(R->x, 0);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	2100      	movs	r1, #0
 8017308:	4618      	mov	r0, r3
 801730a:	f009 fc7f 	bl	8020c0c <mp_set>
 801730e:	6178      	str	r0, [r7, #20]
            if (err == MP_OKAY)
 8017310:	697b      	ldr	r3, [r7, #20]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d106      	bne.n	8017324 <ecc_projective_add_point_safe+0xde>
                err = mp_set(R->y, 0);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	2100      	movs	r1, #0
 801731c:	4618      	mov	r0, r3
 801731e:	f009 fc75 	bl	8020c0c <mp_set>
 8017322:	6178      	str	r0, [r7, #20]
            if (err == MP_OKAY)
 8017324:	697b      	ldr	r3, [r7, #20]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d106      	bne.n	8017338 <ecc_projective_add_point_safe+0xf2>
                err = mp_set(R->z, 1);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	689b      	ldr	r3, [r3, #8]
 801732e:	2101      	movs	r1, #1
 8017330:	4618      	mov	r0, r3
 8017332:	f009 fc6b 	bl	8020c0c <mp_set>
 8017336:	6178      	str	r0, [r7, #20]
            if ((err == MP_OKAY) && (infinity != NULL))
 8017338:	697b      	ldr	r3, [r7, #20]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d17f      	bne.n	801743e <ecc_projective_add_point_safe+0x1f8>
 801733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017340:	2b00      	cmp	r3, #0
 8017342:	d07c      	beq.n	801743e <ecc_projective_add_point_safe+0x1f8>
                *infinity = 1;
 8017344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017346:	2201      	movs	r2, #1
 8017348:	601a      	str	r2, [r3, #0]
        if (mp_cmp(A->y, B->y) == MP_EQ) {
 801734a:	e078      	b.n	801743e <ecc_projective_add_point_safe+0x1f8>
        }
    }
    else {
        err = _ecc_projective_add_point(A, B, R, a, modulus, mp);
 801734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734e:	9301      	str	r3, [sp, #4]
 8017350:	6a3b      	ldr	r3, [r7, #32]
 8017352:	9300      	str	r3, [sp, #0]
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	687a      	ldr	r2, [r7, #4]
 8017358:	68b9      	ldr	r1, [r7, #8]
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f7fd fe04 	bl	8014f68 <_ecc_projective_add_point>
 8017360:	6178      	str	r0, [r7, #20]
        if ((err == MP_OKAY) && mp_iszero(R->z)) {
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d16d      	bne.n	8017444 <ecc_projective_add_point_safe+0x1fe>
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	689b      	ldr	r3, [r3, #8]
 801736c:	4618      	mov	r0, r3
 801736e:	f009 f9d2 	bl	8020716 <mp_iszero>
 8017372:	4603      	mov	r3, r0
 8017374:	2b00      	cmp	r3, #0
 8017376:	d065      	beq.n	8017444 <ecc_projective_add_point_safe+0x1fe>
            /* When all zero then should have done a double */
            if (mp_iszero(R->x) && mp_iszero(R->y)) {
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	4618      	mov	r0, r3
 801737e:	f009 f9ca 	bl	8020716 <mp_iszero>
 8017382:	4603      	mov	r3, r0
 8017384:	2b00      	cmp	r3, #0
 8017386:	d035      	beq.n	80173f4 <ecc_projective_add_point_safe+0x1ae>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	4618      	mov	r0, r3
 801738e:	f009 f9c2 	bl	8020716 <mp_iszero>
 8017392:	4603      	mov	r3, r0
 8017394:	2b00      	cmp	r3, #0
 8017396:	d02d      	beq.n	80173f4 <ecc_projective_add_point_safe+0x1ae>
                if (mp_iszero(B->z)) {
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	689b      	ldr	r3, [r3, #8]
 801739c:	4618      	mov	r0, r3
 801739e:	f009 f9ba 	bl	8020716 <mp_iszero>
 80173a2:	4603      	mov	r3, r0
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d01b      	beq.n	80173e0 <ecc_projective_add_point_safe+0x19a>
                    err = wc_ecc_copy_point(B, R);
 80173a8:	6879      	ldr	r1, [r7, #4]
 80173aa:	68b8      	ldr	r0, [r7, #8]
 80173ac:	f7ff fc92 	bl	8016cd4 <wc_ecc_copy_point>
 80173b0:	6178      	str	r0, [r7, #20]
                    if (err == MP_OKAY) {
 80173b2:	697b      	ldr	r3, [r7, #20]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d106      	bne.n	80173c6 <ecc_projective_add_point_safe+0x180>
                        err = mp_montgomery_calc_normalization(R->z, modulus);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	689b      	ldr	r3, [r3, #8]
 80173bc:	6a39      	ldr	r1, [r7, #32]
 80173be:	4618      	mov	r0, r3
 80173c0:	f009 f9d3 	bl	802076a <mp_montgomery_calc_normalization>
 80173c4:	6178      	str	r0, [r7, #20]
                    }
                    if (err == MP_OKAY) {
 80173c6:	697b      	ldr	r3, [r7, #20]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d13a      	bne.n	8017442 <ecc_projective_add_point_safe+0x1fc>
                        err = _ecc_projective_dbl_point(R, R, a, modulus, mp);
 80173cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ce:	9300      	str	r3, [sp, #0]
 80173d0:	6a3b      	ldr	r3, [r7, #32]
 80173d2:	683a      	ldr	r2, [r7, #0]
 80173d4:	6879      	ldr	r1, [r7, #4]
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f7fe fa15 	bl	8015806 <_ecc_projective_dbl_point>
 80173dc:	6178      	str	r0, [r7, #20]
                if (mp_iszero(B->z)) {
 80173de:	e030      	b.n	8017442 <ecc_projective_add_point_safe+0x1fc>
                    }
                }
                else {
                    err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 80173e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	6a3b      	ldr	r3, [r7, #32]
 80173e6:	683a      	ldr	r2, [r7, #0]
 80173e8:	6879      	ldr	r1, [r7, #4]
 80173ea:	68b8      	ldr	r0, [r7, #8]
 80173ec:	f7fe fa0b 	bl	8015806 <_ecc_projective_dbl_point>
 80173f0:	6178      	str	r0, [r7, #20]
                if (mp_iszero(B->z)) {
 80173f2:	e026      	b.n	8017442 <ecc_projective_add_point_safe+0x1fc>
                }
            }
            /* When only Z zero then result is infinity */
            else {
                err = mp_set(R->x, 0);
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	2100      	movs	r1, #0
 80173fa:	4618      	mov	r0, r3
 80173fc:	f009 fc06 	bl	8020c0c <mp_set>
 8017400:	6178      	str	r0, [r7, #20]
                if (err == MP_OKAY)
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d106      	bne.n	8017416 <ecc_projective_add_point_safe+0x1d0>
                    err = mp_set(R->y, 0);
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	2100      	movs	r1, #0
 801740e:	4618      	mov	r0, r3
 8017410:	f009 fbfc 	bl	8020c0c <mp_set>
 8017414:	6178      	str	r0, [r7, #20]
                if (err == MP_OKAY)
 8017416:	697b      	ldr	r3, [r7, #20]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d106      	bne.n	801742a <ecc_projective_add_point_safe+0x1e4>
                    err = mp_set(R->z, 1);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	689b      	ldr	r3, [r3, #8]
 8017420:	2101      	movs	r1, #1
 8017422:	4618      	mov	r0, r3
 8017424:	f009 fbf2 	bl	8020c0c <mp_set>
 8017428:	6178      	str	r0, [r7, #20]
                if ((err == MP_OKAY) && (infinity != NULL))
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d109      	bne.n	8017444 <ecc_projective_add_point_safe+0x1fe>
 8017430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017432:	2b00      	cmp	r3, #0
 8017434:	d006      	beq.n	8017444 <ecc_projective_add_point_safe+0x1fe>
                    *infinity = 1;
 8017436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017438:	2201      	movs	r2, #1
 801743a:	601a      	str	r2, [r3, #0]
 801743c:	e002      	b.n	8017444 <ecc_projective_add_point_safe+0x1fe>
        if (mp_cmp(A->y, B->y) == MP_EQ) {
 801743e:	bf00      	nop
 8017440:	e000      	b.n	8017444 <ecc_projective_add_point_safe+0x1fe>
                if (mp_iszero(B->z)) {
 8017442:	bf00      	nop
            }
        }
    }

    return err;
 8017444:	697b      	ldr	r3, [r7, #20]
}
 8017446:	4618      	mov	r0, r3
 8017448:	3718      	adds	r7, #24
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}

0801744e <ecc_projective_dbl_point_safe>:
 * Double infinity -> infinity.
 * Otherwise do normal double - which can't lead to infinity as odd order.
 */
int ecc_projective_dbl_point_safe(ecc_point *P, ecc_point *R, mp_int* a,
                                  mp_int* modulus, mp_digit mp)
{
 801744e:	b580      	push	{r7, lr}
 8017450:	b088      	sub	sp, #32
 8017452:	af02      	add	r7, sp, #8
 8017454:	60f8      	str	r0, [r7, #12]
 8017456:	60b9      	str	r1, [r7, #8]
 8017458:	607a      	str	r2, [r7, #4]
 801745a:	603b      	str	r3, [r7, #0]
    int err;

    if (mp_iszero(P->x) && mp_iszero(P->y)) {
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	4618      	mov	r0, r3
 8017462:	f009 f958 	bl	8020716 <mp_iszero>
 8017466:	4603      	mov	r3, r0
 8017468:	2b00      	cmp	r3, #0
 801746a:	d00d      	beq.n	8017488 <ecc_projective_dbl_point_safe+0x3a>
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	4618      	mov	r0, r3
 8017472:	f009 f950 	bl	8020716 <mp_iszero>
 8017476:	4603      	mov	r3, r0
 8017478:	2b00      	cmp	r3, #0
 801747a:	d005      	beq.n	8017488 <ecc_projective_dbl_point_safe+0x3a>
        /* P is infinity. */
        err = wc_ecc_copy_point(P, R);
 801747c:	68b9      	ldr	r1, [r7, #8]
 801747e:	68f8      	ldr	r0, [r7, #12]
 8017480:	f7ff fc28 	bl	8016cd4 <wc_ecc_copy_point>
 8017484:	6178      	str	r0, [r7, #20]
 8017486:	e008      	b.n	801749a <ecc_projective_dbl_point_safe+0x4c>
    }
    else {
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
 8017488:	6a3b      	ldr	r3, [r7, #32]
 801748a:	9300      	str	r3, [sp, #0]
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	687a      	ldr	r2, [r7, #4]
 8017490:	68b9      	ldr	r1, [r7, #8]
 8017492:	68f8      	ldr	r0, [r7, #12]
 8017494:	f7fe f9b7 	bl	8015806 <_ecc_projective_dbl_point>
 8017498:	6178      	str	r0, [r7, #20]
    }

    return err;
 801749a:	697b      	ldr	r3, [r7, #20]
}
 801749c:	4618      	mov	r0, r3
 801749e:	3718      	adds	r7, #24
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}

080174a4 <ecc_mul2add>:
int ecc_mul2add(ecc_point* A, mp_int* kA,
                    ecc_point* B, mp_int* kB,
                    ecc_point* C, mp_int* a, mp_int* modulus,
                    void* heap)
#endif
{
 80174a4:	b590      	push	{r4, r7, lr}
 80174a6:	b0a3      	sub	sp, #140	; 0x8c
 80174a8:	af04      	add	r7, sp, #16
 80174aa:	60f8      	str	r0, [r7, #12]
 80174ac:	60b9      	str	r1, [r7, #8]
 80174ae:	607a      	str	r2, [r7, #4]
 80174b0:	603b      	str	r3, [r7, #0]
#ifdef WOLFSSL_SMALL_STACK_CACHE
  ecc_key        *key = NULL;
#endif
#ifdef WOLFSSL_SMALL_STACK
  ecc_point**    precomp = NULL;
 80174b2:	2300      	movs	r3, #0
 80174b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  unsigned       bitbufA, bitbufB, lenA, lenB, len, nA, nB, nibble;
#ifdef WOLFSSL_NO_MALLOC
  unsigned char tA[ECC_BUFSIZE];
  unsigned char tB[ECC_BUFSIZE];
#else
  unsigned char* tA = NULL;
 80174b6:	2300      	movs	r3, #0
 80174b8:	65bb      	str	r3, [r7, #88]	; 0x58
  unsigned char* tB = NULL;
 80174ba:	2300      	movs	r3, #0
 80174bc:	657b      	str	r3, [r7, #84]	; 0x54
#endif
  int            err = MP_OKAY, first, x, y;
 80174be:	2300      	movs	r3, #0
 80174c0:	66bb      	str	r3, [r7, #104]	; 0x68
  mp_digit       mp = 0;
 80174c2:	2300      	movs	r3, #0
 80174c4:	617b      	str	r3, [r7, #20]

  /* argchks */
  if (A == NULL || kA == NULL || B == NULL || kB == NULL || C == NULL ||
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d010      	beq.n	80174ee <ecc_mul2add+0x4a>
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d00d      	beq.n	80174ee <ecc_mul2add+0x4a>
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d00a      	beq.n	80174ee <ecc_mul2add+0x4a>
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d007      	beq.n	80174ee <ecc_mul2add+0x4a>
 80174de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d003      	beq.n	80174ee <ecc_mul2add+0x4a>
 80174e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d102      	bne.n	80174f4 <ecc_mul2add+0x50>
                                                         modulus == NULL) {
     return ECC_BAD_ARG_E;
 80174ee:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 80174f2:	e2d2      	b.n	8017a9a <ecc_mul2add+0x5f6>
  }

#ifndef WOLFSSL_NO_MALLOC
  /* allocate memory */
  tA = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 80174f4:	f240 1001 	movw	r0, #257	; 0x101
 80174f8:	f001 fb58 	bl	8018bac <wolfSSL_Malloc>
 80174fc:	65b8      	str	r0, [r7, #88]	; 0x58
  if (tA == NULL) {
 80174fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017500:	2b00      	cmp	r3, #0
 8017502:	d102      	bne.n	801750a <ecc_mul2add+0x66>
     return GEN_MEM_ERR;
 8017504:	f06f 0301 	mvn.w	r3, #1
 8017508:	e2c7      	b.n	8017a9a <ecc_mul2add+0x5f6>
  }
  tB = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 801750a:	f240 1001 	movw	r0, #257	; 0x101
 801750e:	f001 fb4d 	bl	8018bac <wolfSSL_Malloc>
 8017512:	6578      	str	r0, [r7, #84]	; 0x54
  if (tB == NULL) {
 8017514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017516:	2b00      	cmp	r3, #0
 8017518:	d10a      	bne.n	8017530 <ecc_mul2add+0x8c>
     XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 801751a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801751c:	61fb      	str	r3, [r7, #28]
 801751e:	69fb      	ldr	r3, [r7, #28]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d002      	beq.n	801752a <ecc_mul2add+0x86>
 8017524:	69f8      	ldr	r0, [r7, #28]
 8017526:	f001 fb5d 	bl	8018be4 <wolfSSL_Free>
     return GEN_MEM_ERR;
 801752a:	f06f 0301 	mvn.w	r3, #1
 801752e:	e2b4      	b.n	8017a9a <ecc_mul2add+0x5f6>
     XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
     return GEN_MEM_ERR;
  }
#endif
#ifdef WOLFSSL_SMALL_STACK
  precomp = (ecc_point**)XMALLOC(sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ, heap,
 8017530:	2040      	movs	r0, #64	; 0x40
 8017532:	f001 fb3b 	bl	8018bac <wolfSSL_Malloc>
 8017536:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                       DYNAMIC_TYPE_ECC_BUFFER);
  if (precomp == NULL) {
 8017538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801753a:	2b00      	cmp	r3, #0
 801753c:	d112      	bne.n	8017564 <ecc_mul2add+0xc0>
     XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 801753e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017540:	627b      	str	r3, [r7, #36]	; 0x24
 8017542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017544:	2b00      	cmp	r3, #0
 8017546:	d002      	beq.n	801754e <ecc_mul2add+0xaa>
 8017548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801754a:	f001 fb4b 	bl	8018be4 <wolfSSL_Free>
     XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 801754e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017550:	623b      	str	r3, [r7, #32]
 8017552:	6a3b      	ldr	r3, [r7, #32]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d002      	beq.n	801755e <ecc_mul2add+0xba>
 8017558:	6a38      	ldr	r0, [r7, #32]
 801755a:	f001 fb43 	bl	8018be4 <wolfSSL_Free>
  #ifdef WOLFSSL_SMALL_STACK_CACHE
     XFREE(key, heap, DYNAMIC_TYPE_ECC_BUFFER);
  #endif
     return GEN_MEM_ERR;
 801755e:	f06f 0301 	mvn.w	r3, #1
 8017562:	e29a      	b.n	8017a9a <ecc_mul2add+0x5f6>
  }
  C->key = key;
#endif /* WOLFSSL_SMALL_STACK_CACHE */

  /* init variables */
  XMEMSET(tA, 0, ECC_BUFSIZE);
 8017564:	f240 1201 	movw	r2, #257	; 0x101
 8017568:	2100      	movs	r1, #0
 801756a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801756c:	f009 fee2 	bl	8021334 <memset>
  XMEMSET(tB, 0, ECC_BUFSIZE);
 8017570:	f240 1201 	movw	r2, #257	; 0x101
 8017574:	2100      	movs	r1, #0
 8017576:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017578:	f009 fedc 	bl	8021334 <memset>
#ifndef WOLFSSL_SMALL_STACK
  XMEMSET(precomp, 0, sizeof(precomp));
#else
  XMEMSET(precomp, 0, sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ);
 801757c:	2240      	movs	r2, #64	; 0x40
 801757e:	2100      	movs	r1, #0
 8017580:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8017582:	f009 fed7 	bl	8021334 <memset>
  wc_MemZero_Add("ecc_mul2add tA", tA, ECC_BUFSIZE);
  wc_MemZero_Add("ecc_mul2add tB", tB, ECC_BUFSIZE);
#endif

  /* get sizes */
  lenA = mp_unsigned_bin_size(kA);
 8017586:	68b8      	ldr	r0, [r7, #8]
 8017588:	f009 f81a 	bl	80205c0 <mp_unsigned_bin_size>
 801758c:	4603      	mov	r3, r0
 801758e:	653b      	str	r3, [r7, #80]	; 0x50
  lenB = mp_unsigned_bin_size(kB);
 8017590:	6838      	ldr	r0, [r7, #0]
 8017592:	f009 f815 	bl	80205c0 <mp_unsigned_bin_size>
 8017596:	4603      	mov	r3, r0
 8017598:	64fb      	str	r3, [r7, #76]	; 0x4c
  len  = MAX(lenA, lenB);
 801759a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801759c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801759e:	4293      	cmp	r3, r2
 80175a0:	bf38      	it	cc
 80175a2:	4613      	movcc	r3, r2
 80175a4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* sanity check */
  if ((lenA > ECC_BUFSIZE) || (lenB > ECC_BUFSIZE)) {
 80175a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175a8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80175ac:	d203      	bcs.n	80175b6 <ecc_mul2add+0x112>
 80175ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175b0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80175b4:	d302      	bcc.n	80175bc <ecc_mul2add+0x118>
    err = BAD_FUNC_ARG;
 80175b6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80175ba:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  if (err == MP_OKAY) {
 80175bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d131      	bne.n	8017626 <ecc_mul2add+0x182>
    /* extract and justify kA */
    err = mp_to_unsigned_bin(kA, (len - lenA) + tA);
 80175c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80175c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175c6:	1ad3      	subs	r3, r2, r3
 80175c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80175ca:	4413      	add	r3, r2
 80175cc:	4619      	mov	r1, r3
 80175ce:	68b8      	ldr	r0, [r7, #8]
 80175d0:	f009 f802 	bl	80205d8 <mp_to_unsigned_bin>
 80175d4:	66b8      	str	r0, [r7, #104]	; 0x68

    /* extract and justify kB */
    if (err == MP_OKAY)
 80175d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d109      	bne.n	80175f0 <ecc_mul2add+0x14c>
        err = mp_to_unsigned_bin(kB, (len - lenB) + tB);
 80175dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80175de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175e0:	1ad3      	subs	r3, r2, r3
 80175e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80175e4:	4413      	add	r3, r2
 80175e6:	4619      	mov	r1, r3
 80175e8:	6838      	ldr	r0, [r7, #0]
 80175ea:	f008 fff5 	bl	80205d8 <mp_to_unsigned_bin>
 80175ee:	66b8      	str	r0, [r7, #104]	; 0x68

    /* allocate the table */
    if (err == MP_OKAY) {
 80175f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d117      	bne.n	8017626 <ecc_mul2add+0x182>
        for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 80175f6:	2300      	movs	r3, #0
 80175f8:	667b      	str	r3, [r7, #100]	; 0x64
 80175fa:	e00f      	b.n	801761c <ecc_mul2add+0x178>
        #ifdef WOLFSSL_NO_MALLOC
            precomp[x] = &lcl_precomp[x];
        #endif
            err = wc_ecc_new_point_ex(&precomp[x], heap);
 80175fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175fe:	009b      	lsls	r3, r3, #2
 8017600:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017602:	4413      	add	r3, r2
 8017604:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8017608:	4618      	mov	r0, r3
 801760a:	f7ff fadd 	bl	8016bc8 <wc_ecc_new_point_ex>
 801760e:	66b8      	str	r0, [r7, #104]	; 0x68
            if (err != MP_OKAY)
 8017610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017612:	2b00      	cmp	r3, #0
 8017614:	d106      	bne.n	8017624 <ecc_mul2add+0x180>
        for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 8017616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017618:	3301      	adds	r3, #1
 801761a:	667b      	str	r3, [r7, #100]	; 0x64
 801761c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801761e:	2b0f      	cmp	r3, #15
 8017620:	ddec      	ble.n	80175fc <ecc_mul2add+0x158>
 8017622:	e000      	b.n	8017626 <ecc_mul2add+0x182>
                break;
 8017624:	bf00      	nop
        #endif
        }
    }
  }

  if (err == MP_OKAY)
 8017626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017628:	2b00      	cmp	r3, #0
 801762a:	d107      	bne.n	801763c <ecc_mul2add+0x198>
    /* init montgomery reduction */
    err = mp_montgomery_setup(modulus, &mp);
 801762c:	f107 0314 	add.w	r3, r7, #20
 8017630:	4619      	mov	r1, r3
 8017632:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8017636:	f009 facb 	bl	8020bd0 <mp_montgomery_setup>
 801763a:	66b8      	str	r0, [r7, #104]	; 0x68

  if (err == MP_OKAY) {
 801763c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801763e:	2b00      	cmp	r3, #0
 8017640:	f040 8083 	bne.w	801774a <ecc_mul2add+0x2a6>
    mp_int* mu;
  #else
    mp_int  mu[1];
  #endif
  #ifdef WOLFSSL_SMALL_STACK
    mu = (mp_int*)XMALLOC(sizeof(mp_int), heap, DYNAMIC_TYPE_ECC);
 8017644:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017648:	f001 fab0 	bl	8018bac <wolfSSL_Malloc>
 801764c:	6478      	str	r0, [r7, #68]	; 0x44
    if (mu == NULL)
 801764e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017650:	2b00      	cmp	r3, #0
 8017652:	d102      	bne.n	801765a <ecc_mul2add+0x1b6>
        err = MEMORY_E;
 8017654:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017658:	66bb      	str	r3, [r7, #104]	; 0x68
  #endif
    if (err == MP_OKAY) {
 801765a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801765c:	2b00      	cmp	r3, #0
 801765e:	d103      	bne.n	8017668 <ecc_mul2add+0x1c4>
        err = mp_init(mu);
 8017660:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017662:	f008 fe05 	bl	8020270 <mp_init>
 8017666:	66b8      	str	r0, [r7, #104]	; 0x68
    }
    if (err == MP_OKAY) {
 8017668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801766a:	2b00      	cmp	r3, #0
 801766c:	d162      	bne.n	8017734 <ecc_mul2add+0x290>
      err = mp_montgomery_calc_normalization(mu, modulus);
 801766e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017672:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017674:	f009 f879 	bl	802076a <mp_montgomery_calc_normalization>
 8017678:	66b8      	str	r0, [r7, #104]	; 0x68

      if (err == MP_OKAY)
 801767a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801767c:	2b00      	cmp	r3, #0
 801767e:	d10b      	bne.n	8017698 <ecc_mul2add+0x1f4>
        /* copy ones ... */
        err = mp_mulmod(A->x, mu, modulus, precomp[1]->x);
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	6818      	ldr	r0, [r3, #0]
 8017684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017686:	3304      	adds	r3, #4
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017690:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017692:	f008 feed 	bl	8020470 <mp_mulmod>
 8017696:	66b8      	str	r0, [r7, #104]	; 0x68

      if (err == MP_OKAY)
 8017698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801769a:	2b00      	cmp	r3, #0
 801769c:	d10b      	bne.n	80176b6 <ecc_mul2add+0x212>
        err = mp_mulmod(A->y, mu, modulus, precomp[1]->y);
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	6858      	ldr	r0, [r3, #4]
 80176a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176a4:	3304      	adds	r3, #4
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	685b      	ldr	r3, [r3, #4]
 80176aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80176ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80176b0:	f008 fede 	bl	8020470 <mp_mulmod>
 80176b4:	66b8      	str	r0, [r7, #104]	; 0x68
      if (err == MP_OKAY)
 80176b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d10b      	bne.n	80176d4 <ecc_mul2add+0x230>
        err = mp_mulmod(A->z, mu, modulus, precomp[1]->z);
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	6898      	ldr	r0, [r3, #8]
 80176c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176c2:	3304      	adds	r3, #4
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	689b      	ldr	r3, [r3, #8]
 80176c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80176cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80176ce:	f008 fecf 	bl	8020470 <mp_mulmod>
 80176d2:	66b8      	str	r0, [r7, #104]	; 0x68

      if (err == MP_OKAY)
 80176d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d10b      	bne.n	80176f2 <ecc_mul2add+0x24e>
        err = mp_mulmod(B->x, mu, modulus, precomp[1<<2]->x);
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6818      	ldr	r0, [r3, #0]
 80176de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176e0:	3310      	adds	r3, #16
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80176ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80176ec:	f008 fec0 	bl	8020470 <mp_mulmod>
 80176f0:	66b8      	str	r0, [r7, #104]	; 0x68
      if (err == MP_OKAY)
 80176f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d10b      	bne.n	8017710 <ecc_mul2add+0x26c>
        err = mp_mulmod(B->y, mu, modulus, precomp[1<<2]->y);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	6858      	ldr	r0, [r3, #4]
 80176fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176fe:	3310      	adds	r3, #16
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	685b      	ldr	r3, [r3, #4]
 8017704:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017708:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801770a:	f008 feb1 	bl	8020470 <mp_mulmod>
 801770e:	66b8      	str	r0, [r7, #104]	; 0x68
      if (err == MP_OKAY)
 8017710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017712:	2b00      	cmp	r3, #0
 8017714:	d10b      	bne.n	801772e <ecc_mul2add+0x28a>
        err = mp_mulmod(B->z, mu, modulus, precomp[1<<2]->z);
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6898      	ldr	r0, [r3, #8]
 801771a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801771c:	3310      	adds	r3, #16
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	689b      	ldr	r3, [r3, #8]
 8017722:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017726:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017728:	f008 fea2 	bl	8020470 <mp_mulmod>
 801772c:	66b8      	str	r0, [r7, #104]	; 0x68

      /* done with mu */
      mp_clear(mu);
 801772e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017730:	f008 fe24 	bl	802037c <mp_clear>
    }
  #ifdef WOLFSSL_SMALL_STACK
    if (mu != NULL) {
 8017734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017736:	2b00      	cmp	r3, #0
 8017738:	d007      	beq.n	801774a <ecc_mul2add+0x2a6>
      XFREE(mu, heap, DYNAMIC_TYPE_ECC);
 801773a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801773c:	643b      	str	r3, [r7, #64]	; 0x40
 801773e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017740:	2b00      	cmp	r3, #0
 8017742:	d002      	beq.n	801774a <ecc_mul2add+0x2a6>
 8017744:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017746:	f001 fa4d 	bl	8018be4 <wolfSSL_Free>
    }
  #endif
  }

  if (err == MP_OKAY) {
 801774a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801774c:	2b00      	cmp	r3, #0
 801774e:	d10e      	bne.n	801776e <ecc_mul2add+0x2ca>
    /* precomp [i,0](A + B) table */
    err = ecc_projective_dbl_point_safe(precomp[1], precomp[2], a, modulus, mp);
 8017750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017752:	3304      	adds	r3, #4
 8017754:	6818      	ldr	r0, [r3, #0]
 8017756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017758:	3308      	adds	r3, #8
 801775a:	6819      	ldr	r1, [r3, #0]
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	9300      	str	r3, [sp, #0]
 8017760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017764:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017768:	f7ff fe71 	bl	801744e <ecc_projective_dbl_point_safe>
 801776c:	66b8      	str	r0, [r7, #104]	; 0x68
  }
  if (err == MP_OKAY) {
 801776e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017770:	2b00      	cmp	r3, #0
 8017772:	d114      	bne.n	801779e <ecc_mul2add+0x2fa>
    err = ecc_projective_add_point_safe(precomp[1], precomp[2], precomp[3],
 8017774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017776:	3304      	adds	r3, #4
 8017778:	6818      	ldr	r0, [r3, #0]
 801777a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801777c:	3308      	adds	r3, #8
 801777e:	6819      	ldr	r1, [r3, #0]
 8017780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017782:	330c      	adds	r3, #12
 8017784:	681a      	ldr	r2, [r3, #0]
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	2400      	movs	r4, #0
 801778a:	9402      	str	r4, [sp, #8]
 801778c:	9301      	str	r3, [sp, #4]
 801778e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017792:	9300      	str	r3, [sp, #0]
 8017794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017798:	f7ff fd55 	bl	8017246 <ecc_projective_add_point_safe>
 801779c:	66b8      	str	r0, [r7, #104]	; 0x68
                                                          a, modulus, mp, NULL);
  }

  if (err == MP_OKAY) {
 801779e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d10e      	bne.n	80177c2 <ecc_mul2add+0x31e>
    /* precomp [0,i](A + B) table */
    err = ecc_projective_dbl_point_safe(precomp[4], precomp[8], a, modulus, mp);
 80177a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80177a6:	3310      	adds	r3, #16
 80177a8:	6818      	ldr	r0, [r3, #0]
 80177aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80177ac:	3320      	adds	r3, #32
 80177ae:	6819      	ldr	r1, [r3, #0]
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	9300      	str	r3, [sp, #0]
 80177b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80177b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80177bc:	f7ff fe47 	bl	801744e <ecc_projective_dbl_point_safe>
 80177c0:	66b8      	str	r0, [r7, #104]	; 0x68
  }
  if (err == MP_OKAY) {
 80177c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d114      	bne.n	80177f2 <ecc_mul2add+0x34e>
    err = ecc_projective_add_point_safe(precomp[4], precomp[8], precomp[12], a,
 80177c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80177ca:	3310      	adds	r3, #16
 80177cc:	6818      	ldr	r0, [r3, #0]
 80177ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80177d0:	3320      	adds	r3, #32
 80177d2:	6819      	ldr	r1, [r3, #0]
 80177d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80177d6:	3330      	adds	r3, #48	; 0x30
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	697b      	ldr	r3, [r7, #20]
 80177dc:	2400      	movs	r4, #0
 80177de:	9402      	str	r4, [sp, #8]
 80177e0:	9301      	str	r3, [sp, #4]
 80177e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80177e6:	9300      	str	r3, [sp, #0]
 80177e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80177ec:	f7ff fd2b 	bl	8017246 <ecc_projective_add_point_safe>
 80177f0:	66b8      	str	r0, [r7, #104]	; 0x68
                                                             modulus, mp, NULL);
  }

  if (err == MP_OKAY) {
 80177f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d133      	bne.n	8017860 <ecc_mul2add+0x3bc>
    /* precomp [i,j](A + B) table (i != 0, j != 0) */
    for (x = 1; x < 4; x++) {
 80177f8:	2301      	movs	r3, #1
 80177fa:	667b      	str	r3, [r7, #100]	; 0x64
 80177fc:	e02d      	b.n	801785a <ecc_mul2add+0x3b6>
      for (y = 1; y < 4; y++) {
 80177fe:	2301      	movs	r3, #1
 8017800:	663b      	str	r3, [r7, #96]	; 0x60
 8017802:	e024      	b.n	801784e <ecc_mul2add+0x3aa>
        if (err == MP_OKAY) {
 8017804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017806:	2b00      	cmp	r3, #0
 8017808:	d11e      	bne.n	8017848 <ecc_mul2add+0x3a4>
          err = ecc_projective_add_point_safe(precomp[x], precomp[(y<<2)],
 801780a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801780c:	009b      	lsls	r3, r3, #2
 801780e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017810:	4413      	add	r3, r2
 8017812:	6818      	ldr	r0, [r3, #0]
 8017814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017816:	009b      	lsls	r3, r3, #2
 8017818:	009b      	lsls	r3, r3, #2
 801781a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801781c:	4413      	add	r3, r2
 801781e:	6819      	ldr	r1, [r3, #0]
                                                  precomp[x+(y<<2)], a, modulus,
 8017820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017822:	009a      	lsls	r2, r3, #2
 8017824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017826:	4413      	add	r3, r2
 8017828:	009b      	lsls	r3, r3, #2
 801782a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801782c:	4413      	add	r3, r2
          err = ecc_projective_add_point_safe(precomp[x], precomp[(y<<2)],
 801782e:	681a      	ldr	r2, [r3, #0]
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	2400      	movs	r4, #0
 8017834:	9402      	str	r4, [sp, #8]
 8017836:	9301      	str	r3, [sp, #4]
 8017838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801783c:	9300      	str	r3, [sp, #0]
 801783e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017842:	f7ff fd00 	bl	8017246 <ecc_projective_add_point_safe>
 8017846:	66b8      	str	r0, [r7, #104]	; 0x68
      for (y = 1; y < 4; y++) {
 8017848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801784a:	3301      	adds	r3, #1
 801784c:	663b      	str	r3, [r7, #96]	; 0x60
 801784e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017850:	2b03      	cmp	r3, #3
 8017852:	ddd7      	ble.n	8017804 <ecc_mul2add+0x360>
    for (x = 1; x < 4; x++) {
 8017854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017856:	3301      	adds	r3, #1
 8017858:	667b      	str	r3, [r7, #100]	; 0x64
 801785a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801785c:	2b03      	cmp	r3, #3
 801785e:	ddce      	ble.n	80177fe <ecc_mul2add+0x35a>
        }
      }
    }
  }

  if (err == MP_OKAY) {
 8017860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017862:	2b00      	cmp	r3, #0
 8017864:	f040 80d7 	bne.w	8017a16 <ecc_mul2add+0x572>
    nibble  = 3;
 8017868:	2303      	movs	r3, #3
 801786a:	66fb      	str	r3, [r7, #108]	; 0x6c
    first   = 1;
 801786c:	2301      	movs	r3, #1
 801786e:	61bb      	str	r3, [r7, #24]
    bitbufA = tA[0];
 8017870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	677b      	str	r3, [r7, #116]	; 0x74
    bitbufB = tB[0];
 8017876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017878:	781b      	ldrb	r3, [r3, #0]
 801787a:	673b      	str	r3, [r7, #112]	; 0x70

    /* for every byte of the multiplicands */
    for (x = 0; x < (int)len || nibble != 3; ) {
 801787c:	2300      	movs	r3, #0
 801787e:	667b      	str	r3, [r7, #100]	; 0x64
 8017880:	e0b8      	b.n	80179f4 <ecc_mul2add+0x550>
        /* grab a nibble */
        if (++nibble == 4) {
 8017882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017884:	3301      	adds	r3, #1
 8017886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801788a:	2b04      	cmp	r3, #4
 801788c:	d113      	bne.n	80178b6 <ecc_mul2add+0x412>
            if (x == (int)len) break;
 801788e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017890:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017892:	429a      	cmp	r2, r3
 8017894:	f000 80b8 	beq.w	8017a08 <ecc_mul2add+0x564>
            bitbufA = tA[x];
 8017898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801789a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801789c:	4413      	add	r3, r2
 801789e:	781b      	ldrb	r3, [r3, #0]
 80178a0:	677b      	str	r3, [r7, #116]	; 0x74
            bitbufB = tB[x];
 80178a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80178a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80178a6:	4413      	add	r3, r2
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	673b      	str	r3, [r7, #112]	; 0x70
            nibble  = 0;
 80178ac:	2300      	movs	r3, #0
 80178ae:	66fb      	str	r3, [r7, #108]	; 0x6c
            x++;
 80178b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80178b2:	3301      	adds	r3, #1
 80178b4:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* extract two bits from both, shift/update */
        nA = (bitbufA >> 6) & 0x03;
 80178b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80178b8:	099b      	lsrs	r3, r3, #6
 80178ba:	f003 0303 	and.w	r3, r3, #3
 80178be:	63fb      	str	r3, [r7, #60]	; 0x3c
        nB = (bitbufB >> 6) & 0x03;
 80178c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80178c2:	099b      	lsrs	r3, r3, #6
 80178c4:	f003 0303 	and.w	r3, r3, #3
 80178c8:	63bb      	str	r3, [r7, #56]	; 0x38
        bitbufA = (bitbufA << 2) & 0xFF;
 80178ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80178cc:	009b      	lsls	r3, r3, #2
 80178ce:	b2db      	uxtb	r3, r3
 80178d0:	677b      	str	r3, [r7, #116]	; 0x74
        bitbufB = (bitbufB << 2) & 0xFF;
 80178d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80178d4:	009b      	lsls	r3, r3, #2
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	673b      	str	r3, [r7, #112]	; 0x70

        /* if both zero, if first, continue */
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 80178da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d106      	bne.n	80178ee <ecc_mul2add+0x44a>
 80178e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d103      	bne.n	80178ee <ecc_mul2add+0x44a>
 80178e6:	69bb      	ldr	r3, [r7, #24]
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d100      	bne.n	80178ee <ecc_mul2add+0x44a>
            continue;
 80178ec:	e082      	b.n	80179f4 <ecc_mul2add+0x550>
        }

        /* double twice, only if this isn't the first */
        if (first == 0) {
 80178ee:	69bb      	ldr	r3, [r7, #24]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d11f      	bne.n	8017934 <ecc_mul2add+0x490>
            /* double twice */
            if (err == MP_OKAY)
 80178f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d10c      	bne.n	8017914 <ecc_mul2add+0x470>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	9300      	str	r3, [sp, #0]
 80178fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017902:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017906:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801790a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801790e:	f7ff fd9e 	bl	801744e <ecc_projective_dbl_point_safe>
 8017912:	66b8      	str	r0, [r7, #104]	; 0x68
            if (err == MP_OKAY)
 8017914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017916:	2b00      	cmp	r3, #0
 8017918:	d178      	bne.n	8017a0c <ecc_mul2add+0x568>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	9300      	str	r3, [sp, #0]
 801791e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017922:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017926:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801792a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801792e:	f7ff fd8e 	bl	801744e <ecc_projective_dbl_point_safe>
 8017932:	66b8      	str	r0, [r7, #104]	; 0x68
            else
                break;
        }

        /* if not both zero */
        if ((nA != 0) || (nB != 0)) {
 8017934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017936:	2b00      	cmp	r3, #0
 8017938:	d102      	bne.n	8017940 <ecc_mul2add+0x49c>
 801793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801793c:	2b00      	cmp	r3, #0
 801793e:	d059      	beq.n	80179f4 <ecc_mul2add+0x550>
            int i = nA + (nB<<2);
 8017940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017942:	009a      	lsls	r2, r3, #2
 8017944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017946:	4413      	add	r3, r2
 8017948:	637b      	str	r3, [r7, #52]	; 0x34
            if (first == 1) {
 801794a:	69bb      	ldr	r3, [r7, #24]
 801794c:	2b01      	cmp	r3, #1
 801794e:	d135      	bne.n	80179bc <ecc_mul2add+0x518>
                /* if first, copy from table */
                first = 0;
 8017950:	2300      	movs	r3, #0
 8017952:	61bb      	str	r3, [r7, #24]
                if (err == MP_OKAY)
 8017954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017956:	2b00      	cmp	r3, #0
 8017958:	d10d      	bne.n	8017976 <ecc_mul2add+0x4d2>
                    err = mp_copy(precomp[i]->x, C->x);
 801795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801795c:	009b      	lsls	r3, r3, #2
 801795e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017960:	4413      	add	r3, r2
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	681a      	ldr	r2, [r3, #0]
 8017966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	4619      	mov	r1, r3
 801796e:	4610      	mov	r0, r2
 8017970:	f008 fec3 	bl	80206fa <mp_copy>
 8017974:	66b8      	str	r0, [r7, #104]	; 0x68

                if (err == MP_OKAY)
 8017976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017978:	2b00      	cmp	r3, #0
 801797a:	d10d      	bne.n	8017998 <ecc_mul2add+0x4f4>
                    err = mp_copy(precomp[i]->y, C->y);
 801797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801797e:	009b      	lsls	r3, r3, #2
 8017980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017982:	4413      	add	r3, r2
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	685a      	ldr	r2, [r3, #4]
 8017988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801798c:	685b      	ldr	r3, [r3, #4]
 801798e:	4619      	mov	r1, r3
 8017990:	4610      	mov	r0, r2
 8017992:	f008 feb2 	bl	80206fa <mp_copy>
 8017996:	66b8      	str	r0, [r7, #104]	; 0x68

                if (err == MP_OKAY)
 8017998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801799a:	2b00      	cmp	r3, #0
 801799c:	d138      	bne.n	8017a10 <ecc_mul2add+0x56c>
                    err = mp_copy(precomp[i]->z, C->z);
 801799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179a0:	009b      	lsls	r3, r3, #2
 80179a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80179a4:	4413      	add	r3, r2
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	689a      	ldr	r2, [r3, #8]
 80179aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80179ae:	689b      	ldr	r3, [r3, #8]
 80179b0:	4619      	mov	r1, r3
 80179b2:	4610      	mov	r0, r2
 80179b4:	f008 fea1 	bl	80206fa <mp_copy>
 80179b8:	66b8      	str	r0, [r7, #104]	; 0x68
 80179ba:	e01b      	b.n	80179f4 <ecc_mul2add+0x550>
                else
                    break;
            } else {
                /* if not first, add from table */
                if (err == MP_OKAY)
 80179bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d115      	bne.n	80179ee <ecc_mul2add+0x54a>
                    err = ecc_projective_add_point_safe(C, precomp[i],
 80179c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179c4:	009b      	lsls	r3, r3, #2
 80179c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80179c8:	4413      	add	r3, r2
 80179ca:	6819      	ldr	r1, [r3, #0]
 80179cc:	697b      	ldr	r3, [r7, #20]
 80179ce:	f107 0218 	add.w	r2, r7, #24
 80179d2:	9202      	str	r2, [sp, #8]
 80179d4:	9301      	str	r3, [sp, #4]
 80179d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80179da:	9300      	str	r3, [sp, #0]
 80179dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80179e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80179e4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80179e8:	f7ff fc2d 	bl	8017246 <ecc_projective_add_point_safe>
 80179ec:	66b8      	str	r0, [r7, #104]	; 0x68
                                                        C, a, modulus, mp,
                                                        &first);
                if (err != MP_OKAY)
 80179ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d10f      	bne.n	8017a14 <ecc_mul2add+0x570>
    for (x = 0; x < (int)len || nibble != 3; ) {
 80179f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80179f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80179f8:	429a      	cmp	r2, r3
 80179fa:	f6ff af42 	blt.w	8017882 <ecc_mul2add+0x3de>
 80179fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a00:	2b03      	cmp	r3, #3
 8017a02:	f47f af3e 	bne.w	8017882 <ecc_mul2add+0x3de>
 8017a06:	e006      	b.n	8017a16 <ecc_mul2add+0x572>
            if (x == (int)len) break;
 8017a08:	bf00      	nop
 8017a0a:	e004      	b.n	8017a16 <ecc_mul2add+0x572>
                break;
 8017a0c:	bf00      	nop
 8017a0e:	e002      	b.n	8017a16 <ecc_mul2add+0x572>
                    break;
 8017a10:	bf00      	nop
 8017a12:	e000      	b.n	8017a16 <ecc_mul2add+0x572>
                    break;
 8017a14:	bf00      	nop
        }
    }
  }

  /* reduce to affine */
  if (err == MP_OKAY)
 8017a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d108      	bne.n	8017a2e <ecc_mul2add+0x58a>
    err = ecc_map(C, modulus, mp);
 8017a1c:	697b      	ldr	r3, [r7, #20]
 8017a1e:	461a      	mov	r2, r3
 8017a20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017a24:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017a28:	f7fe fbb0 	bl	801618c <ecc_map>
 8017a2c:	66b8      	str	r0, [r7, #104]	; 0x68

  /* clean up */
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 8017a2e:	2300      	movs	r3, #0
 8017a30:	667b      	str	r3, [r7, #100]	; 0x64
 8017a32:	e00c      	b.n	8017a4e <ecc_mul2add+0x5aa>
     wc_ecc_del_point_ex(precomp[x], heap);
 8017a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a36:	009b      	lsls	r3, r3, #2
 8017a38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017a3a:	4413      	add	r3, r2
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7ff f917 	bl	8016c76 <wc_ecc_del_point_ex>
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 8017a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8017a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a50:	2b0f      	cmp	r3, #15
 8017a52:	ddef      	ble.n	8017a34 <ecc_mul2add+0x590>
  }

  ForceZero(tA, ECC_BUFSIZE);
 8017a54:	f240 1101 	movw	r1, #257	; 0x101
 8017a58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017a5a:	f7fd f895 	bl	8014b88 <ForceZero>
  ForceZero(tB, ECC_BUFSIZE);
 8017a5e:	f240 1101 	movw	r1, #257	; 0x101
 8017a62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017a64:	f7fd f890 	bl	8014b88 <ForceZero>
  XFREE(key->t1, heap, DYNAMIC_TYPE_ECC);
  XFREE(key, heap, DYNAMIC_TYPE_ECC);
  C->key = NULL;
#endif
#ifdef WOLFSSL_SMALL_STACK
  XFREE(precomp, heap, DYNAMIC_TYPE_ECC_BUFFER);
 8017a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8017a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d002      	beq.n	8017a78 <ecc_mul2add+0x5d4>
 8017a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a74:	f001 f8b6 	bl	8018be4 <wolfSSL_Free>
#endif
#ifndef WOLFSSL_NO_MALLOC
  XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 8017a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d002      	beq.n	8017a88 <ecc_mul2add+0x5e4>
 8017a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017a84:	f001 f8ae 	bl	8018be4 <wolfSSL_Free>
  XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 8017a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d002      	beq.n	8017a98 <ecc_mul2add+0x5f4>
 8017a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a94:	f001 f8a6 	bl	8018be4 <wolfSSL_Free>
#elif defined(WOLFSSL_CHECK_MEM_ZERO)
  wc_MemZero_Check(tB, ECC_BUFSIZE);
  wc_MemZero_Check(tA, ECC_BUFSIZE);
#endif
  return err;
 8017a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	377c      	adds	r7, #124	; 0x7c
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd90      	pop	{r4, r7, pc}
	...

08017aa4 <wc_ecc_verify_hash>:
             is valid or invalid. Other negative values are returned on error.
 */
WOLFSSL_ABI
int wc_ecc_verify_hash(const byte* sig, word32 siglen, const byte* hash,
                       word32 hashlen, int* res, ecc_key* key)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b08e      	sub	sp, #56	; 0x38
 8017aa8:	af02      	add	r7, sp, #8
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
 8017ab0:	603b      	str	r3, [r7, #0]
    int err;

    mp_int *r = NULL, *s = NULL;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	627b      	str	r3, [r7, #36]	; 0x24
#endif
#ifdef WOLFSSL_ASYNC_CRYPT
    int isPrivateKeyOnly = 0;
#endif

    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d008      	beq.n	8017ad2 <wc_ecc_verify_hash+0x2e>
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d005      	beq.n	8017ad2 <wc_ecc_verify_hash+0x2e>
 8017ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d002      	beq.n	8017ad2 <wc_ecc_verify_hash+0x2e>
 8017acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d102      	bne.n	8017ad8 <wc_ecc_verify_hash+0x34>
        return ECC_BAD_ARG_E;
 8017ad2:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8017ad6:	e0a1      	b.n	8017c1c <wc_ecc_verify_hash+0x178>
#else
    #ifndef WOLFSSL_SMALL_STACK
    r = &r_lcl;
    s = &s_lcl;
    #else
    r = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8017ad8:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017adc:	f001 f866 	bl	8018bac <wolfSSL_Malloc>
 8017ae0:	62b8      	str	r0, [r7, #40]	; 0x28
    if (r == NULL)
 8017ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d102      	bne.n	8017aee <wc_ecc_verify_hash+0x4a>
        return MEMORY_E;
 8017ae8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017aec:	e096      	b.n	8017c1c <wc_ecc_verify_hash+0x178>
    s = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8017aee:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017af2:	f001 f85b 	bl	8018bac <wolfSSL_Malloc>
 8017af6:	6278      	str	r0, [r7, #36]	; 0x24
    if (s == NULL) {
 8017af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d10a      	bne.n	8017b14 <wc_ecc_verify_hash+0x70>
        XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
 8017afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b00:	613b      	str	r3, [r7, #16]
 8017b02:	693b      	ldr	r3, [r7, #16]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d002      	beq.n	8017b0e <wc_ecc_verify_hash+0x6a>
 8017b08:	6938      	ldr	r0, [r7, #16]
 8017b0a:	f001 f86b 	bl	8018be4 <wolfSSL_Free>
        return MEMORY_E;
 8017b0e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017b12:	e083      	b.n	8017c1c <wc_ecc_verify_hash+0x178>
    }
    #endif
    XMEMSET(r, 0, sizeof(mp_int));
 8017b14:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8017b18:	2100      	movs	r1, #0
 8017b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b1c:	f009 fc0a 	bl	8021334 <memset>
    XMEMSET(s, 0, sizeof(mp_int));
 8017b20:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8017b24:	2100      	movs	r1, #0
 8017b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b28:	f009 fc04 	bl	8021334 <memset>
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (key->state) {
 8017b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b2e:	689b      	ldr	r3, [r3, #8]
 8017b30:	2b07      	cmp	r3, #7
 8017b32:	d854      	bhi.n	8017bde <wc_ecc_verify_hash+0x13a>
 8017b34:	a201      	add	r2, pc, #4	; (adr r2, 8017b3c <wc_ecc_verify_hash+0x98>)
 8017b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b3a:	bf00      	nop
 8017b3c:	08017b5d 	.word	0x08017b5d
 8017b40:	08017bdf 	.word	0x08017bdf
 8017b44:	08017bdf 	.word	0x08017bdf
 8017b48:	08017bdf 	.word	0x08017bdf
 8017b4c:	08017bdf 	.word	0x08017bdf
 8017b50:	08017b5d 	.word	0x08017b5d
 8017b54:	08017b7d 	.word	0x08017b7d
 8017b58:	08017bd3 	.word	0x08017bd3
        case ECC_STATE_NONE:
        case ECC_STATE_VERIFY_DECODE:
            key->state = ECC_STATE_VERIFY_DECODE;
 8017b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b5e:	2205      	movs	r2, #5
 8017b60:	609a      	str	r2, [r3, #8]

            /* default to invalid signature */
            *res = 0;
 8017b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b64:	2200      	movs	r2, #0
 8017b66:	601a      	str	r2, [r3, #0]
            /* Note, DecodeECC_DSA_Sig() calls mp_init() on r and s.
             * If either of those don't allocate correctly, none of
             * the rest of this function will execute, and everything
             * gets cleaned up at the end. */
            /* decode DSA header */
            err = DecodeECC_DSA_Sig(sig, siglen, r, s);
 8017b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b6c:	68b9      	ldr	r1, [r7, #8]
 8017b6e:	68f8      	ldr	r0, [r7, #12]
 8017b70:	f7fc fa66 	bl	8014040 <DecodeECC_DSA_Sig>
 8017b74:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err < 0) {
 8017b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	db34      	blt.n	8017be6 <wc_ecc_verify_hash+0x142>
                break;
            }
            FALL_THROUGH;

        case ECC_STATE_VERIFY_DO:
            key->state = ECC_STATE_VERIFY_DO;
 8017b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b7e:	2206      	movs	r2, #6
 8017b80:	609a      	str	r2, [r3, #8]
        #ifdef WOLFSSL_ASYNC_CRYPT
            if (key->type == ECC_PRIVATEKEY_ONLY) {
                isPrivateKeyOnly = 1;
            }
        #endif
            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
 8017b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b84:	9301      	str	r3, [sp, #4]
 8017b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b88:	9300      	str	r3, [sp, #0]
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	687a      	ldr	r2, [r7, #4]
 8017b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b92:	f000 f8c5 	bl	8017d20 <wc_ecc_verify_hash_ex>
 8017b96:	62f8      	str	r0, [r7, #44]	; 0x2c

        #ifndef WOLFSSL_ASYNC_CRYPT
            /* done with R/S */
            mp_clear(r);
 8017b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b9a:	f008 fbef 	bl	802037c <mp_clear>
            mp_clear(s);
 8017b9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ba0:	f008 fbec 	bl	802037c <mp_clear>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
 8017ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba6:	623b      	str	r3, [r7, #32]
 8017ba8:	6a3b      	ldr	r3, [r7, #32]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d002      	beq.n	8017bb4 <wc_ecc_verify_hash+0x110>
 8017bae:	6a38      	ldr	r0, [r7, #32]
 8017bb0:	f001 f818 	bl	8018be4 <wolfSSL_Free>
            XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
 8017bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb6:	61fb      	str	r3, [r7, #28]
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d002      	beq.n	8017bc4 <wc_ecc_verify_hash+0x120>
 8017bbe:	69f8      	ldr	r0, [r7, #28]
 8017bc0:	f001 f810 	bl	8018be4 <wolfSSL_Free>
            r = NULL;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	62bb      	str	r3, [r7, #40]	; 0x28
            s = NULL;
 8017bc8:	2300      	movs	r3, #0
 8017bca:	627b      	str	r3, [r7, #36]	; 0x24
        #endif
        #endif

            if (err < 0) {
 8017bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	db0b      	blt.n	8017bea <wc_ecc_verify_hash+0x146>
                break;
            }
            FALL_THROUGH;

        case ECC_STATE_VERIFY_RES:
            key->state = ECC_STATE_VERIFY_RES;
 8017bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bd4:	2207      	movs	r2, #7
 8017bd6:	609a      	str	r2, [r3, #8]
            err = 0;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8017bdc:	e006      	b.n	8017bec <wc_ecc_verify_hash+0x148>

        default:
            err = BAD_STATE_E;
 8017bde:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 8017be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017be4:	e002      	b.n	8017bec <wc_ecc_verify_hash+0x148>
                break;
 8017be6:	bf00      	nop
 8017be8:	e000      	b.n	8017bec <wc_ecc_verify_hash+0x148>
                break;
 8017bea:	bf00      	nop

    /* cleanup */
#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC)
    wc_ecc_free_async(key);
#elif defined(WOLFSSL_SMALL_STACK)
    XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
 8017bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bee:	61bb      	str	r3, [r7, #24]
 8017bf0:	69bb      	ldr	r3, [r7, #24]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d002      	beq.n	8017bfc <wc_ecc_verify_hash+0x158>
 8017bf6:	69b8      	ldr	r0, [r7, #24]
 8017bf8:	f000 fff4 	bl	8018be4 <wolfSSL_Free>
    XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
 8017bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfe:	617b      	str	r3, [r7, #20]
 8017c00:	697b      	ldr	r3, [r7, #20]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d002      	beq.n	8017c0c <wc_ecc_verify_hash+0x168>
 8017c06:	6978      	ldr	r0, [r7, #20]
 8017c08:	f000 ffec 	bl	8018be4 <wolfSSL_Free>
    r = NULL;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    s = NULL;
 8017c10:	2300      	movs	r3, #0
 8017c12:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* make sure required variables are reset */
    wc_ecc_reset(key);
 8017c14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017c16:	f7ff f96d 	bl	8016ef4 <wc_ecc_reset>
    (void)s;
    (void)r;
    (void)err;
#endif /* WOLF_CRYPTO_CB_ONLY_ECC */

    return err;
 8017c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	3730      	adds	r7, #48	; 0x30
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}

08017c24 <wc_ecc_check_r_s_range>:
#endif /* !NO_ASN */

#if !defined(WOLFSSL_STM32_PKA) && !defined(WOLFSSL_PSOC6_CRYPTO) && \
    !defined(WOLF_CRYPTO_CB_ONLY_ECC)
static int wc_ecc_check_r_s_range(ecc_key* key, mp_int* r, mp_int* s)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b094      	sub	sp, #80	; 0x50
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	60f8      	str	r0, [r7, #12]
 8017c2c:	60b9      	str	r1, [r7, #8]
 8017c2e:	607a      	str	r2, [r7, #4]
    int err = MP_OKAY;
 8017c30:	2300      	movs	r3, #0
 8017c32:	64fb      	str	r3, [r7, #76]	; 0x4c
    DECLARE_CURVE_SPECS(1);
 8017c34:	2300      	movs	r3, #0
 8017c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8017c38:	f107 0318 	add.w	r3, r7, #24
 8017c3c:	617b      	str	r3, [r7, #20]
 8017c3e:	697b      	ldr	r3, [r7, #20]
 8017c40:	2228      	movs	r2, #40	; 0x28
 8017c42:	2100      	movs	r1, #0
 8017c44:	4618      	mov	r0, r3
 8017c46:	f009 fb75 	bl	8021334 <memset>
 8017c4a:	697b      	ldr	r3, [r7, #20]
 8017c4c:	2201      	movs	r2, #1
 8017c4e:	61da      	str	r2, [r3, #28]

    ALLOC_CURVE_SPECS(1, err);
 8017c50:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017c54:	f000 ffaa 	bl	8018bac <wolfSSL_Malloc>
 8017c58:	64b8      	str	r0, [r7, #72]	; 0x48
 8017c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d103      	bne.n	8017c68 <wc_ecc_check_r_s_range+0x44>
 8017c60:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017c66:	e002      	b.n	8017c6e <wc_ecc_check_r_s_range+0x4a>
 8017c68:	697b      	ldr	r3, [r7, #20]
 8017c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c6c:	619a      	str	r2, [r3, #24]
    if (err == MP_OKAY) {
 8017c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d108      	bne.n	8017c86 <wc_ecc_check_r_s_range+0x62>
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	691b      	ldr	r3, [r3, #16]
 8017c78:	f107 0114 	add.w	r1, r7, #20
 8017c7c:	2208      	movs	r2, #8
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7fd f85b 	bl	8014d3a <wc_ecc_curve_load>
 8017c84:	64f8      	str	r0, [r7, #76]	; 0x4c
    }
    if (err != 0) {
 8017c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d009      	beq.n	8017ca0 <wc_ecc_check_r_s_range+0x7c>
        FREE_CURVE_SPECS();
 8017c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8017c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d002      	beq.n	8017c9c <wc_ecc_check_r_s_range+0x78>
 8017c96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017c98:	f000 ffa4 	bl	8018be4 <wolfSSL_Free>
        return err;
 8017c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c9e:	e03b      	b.n	8017d18 <wc_ecc_check_r_s_range+0xf4>
    }

    if (mp_iszero(r) || mp_iszero(s)) {
 8017ca0:	68b8      	ldr	r0, [r7, #8]
 8017ca2:	f008 fd38 	bl	8020716 <mp_iszero>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d105      	bne.n	8017cb8 <wc_ecc_check_r_s_range+0x94>
 8017cac:	6878      	ldr	r0, [r7, #4]
 8017cae:	f008 fd32 	bl	8020716 <mp_iszero>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d002      	beq.n	8017cbe <wc_ecc_check_r_s_range+0x9a>
        err = MP_ZERO_E;
 8017cb8:	f06f 0378 	mvn.w	r3, #120	; 0x78
 8017cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 8017cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d10c      	bne.n	8017cde <wc_ecc_check_r_s_range+0xba>
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	68db      	ldr	r3, [r3, #12]
 8017cc8:	4619      	mov	r1, r3
 8017cca:	68b8      	ldr	r0, [r7, #8]
 8017ccc:	f008 fc5c 	bl	8020588 <mp_cmp>
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cd6:	d002      	beq.n	8017cde <wc_ecc_check_r_s_range+0xba>
        err = MP_VAL;
 8017cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8017cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8017cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d10c      	bne.n	8017cfe <wc_ecc_check_r_s_range+0xda>
 8017ce4:	697b      	ldr	r3, [r7, #20]
 8017ce6:	68db      	ldr	r3, [r3, #12]
 8017ce8:	4619      	mov	r1, r3
 8017cea:	6878      	ldr	r0, [r7, #4]
 8017cec:	f008 fc4c 	bl	8020588 <mp_cmp>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cf6:	d002      	beq.n	8017cfe <wc_ecc_check_r_s_range+0xda>
        err = MP_VAL;
 8017cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8017cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    wc_ecc_curve_free(curve);
 8017cfe:	697b      	ldr	r3, [r7, #20]
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7fc ffcf 	bl	8014ca4 <wc_ecc_curve_free>
    FREE_CURVE_SPECS();
 8017d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d08:	647b      	str	r3, [r7, #68]	; 0x44
 8017d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d002      	beq.n	8017d16 <wc_ecc_check_r_s_range+0xf2>
 8017d10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017d12:	f000 ff67 	bl	8018be4 <wolfSSL_Free>
    return err;
 8017d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8017d18:	4618      	mov	r0, r3
 8017d1a:	3750      	adds	r7, #80	; 0x50
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}

08017d20 <wc_ecc_verify_hash_ex>:
#elif defined(WOLFSSL_PSOC6_CRYPTO)
{
    return psoc6_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
}
#else
{
 8017d20:	b5b0      	push	{r4, r5, r7, lr}
 8017d22:	b0a8      	sub	sp, #160	; 0xa0
 8017d24:	af04      	add	r7, sp, #16
 8017d26:	60f8      	str	r0, [r7, #12]
 8017d28:	60b9      	str	r1, [r7, #8]
 8017d2a:	607a      	str	r2, [r7, #4]
 8017d2c:	603b      	str	r3, [r7, #0]
   int           err;
   word32        keySz = 0;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	677b      	str	r3, [r7, #116]	; 0x74
#elif defined(WOLFSSL_XILINX_CRYPT_VERSAL)
   byte sigRS[ECC_MAX_CRYPTO_HW_SIZE * 2];
   byte hashcopy[ECC_MAX_CRYPTO_HW_SIZE] = {0};
#elif (!defined(WOLFSSL_SP_MATH) || defined(FREESCALE_LTC_ECC)) && \
   !defined(WOLFSSL_SE050)
   int          did_init = 0;
 8017d32:	2300      	movs	r3, #0
 8017d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   ecc_point    *mG = NULL, *mQ = NULL;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   #ifdef WOLFSSL_NO_MALLOC
   ecc_point    lcl_mG, lcl_mQ;
   #endif
   #ifdef WOLFSSL_SMALL_STACK
   mp_int*       v = NULL;
 8017d40:	2300      	movs	r3, #0
 8017d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   mp_int*       w = NULL;
 8017d46:	2300      	movs	r3, #0
 8017d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   mp_int*       u1 = NULL;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   mp_int*       u2 = NULL;
 8017d50:	2300      	movs	r3, #0
 8017d52:	67bb      	str	r3, [r7, #120]	; 0x78
      #if !defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)
   mp_int*       e_lcl = NULL;
 8017d54:	2300      	movs	r3, #0
 8017d56:	673b      	str	r3, [r7, #112]	; 0x70
      #if !defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)
   mp_int        e_lcl[1];
      #endif
   #endif /* WOLFSSL_SMALL_STACK */
   mp_int*       e;
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 8017d58:	2300      	movs	r3, #0
 8017d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017d5c:	f107 0314 	add.w	r3, r7, #20
 8017d60:	613b      	str	r3, [r7, #16]
 8017d62:	693b      	ldr	r3, [r7, #16]
 8017d64:	2228      	movs	r2, #40	; 0x28
 8017d66:	2100      	movs	r1, #0
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f009 fae3 	bl	8021334 <memset>
 8017d6e:	693b      	ldr	r3, [r7, #16]
 8017d70:	2205      	movs	r2, #5
 8017d72:	61da      	str	r2, [r3, #28]
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d00d      	beq.n	8017d96 <wc_ecc_verify_hash_ex+0x76>
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d00a      	beq.n	8017d96 <wc_ecc_verify_hash_ex+0x76>
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d007      	beq.n	8017d96 <wc_ecc_verify_hash_ex+0x76>
 8017d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d003      	beq.n	8017d96 <wc_ecc_verify_hash_ex+0x76>
 8017d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d102      	bne.n	8017d9c <wc_ecc_verify_hash_ex+0x7c>
       return ECC_BAD_ARG_E;
 8017d96:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8017d9a:	e24b      	b.n	8018234 <wc_ecc_verify_hash_ex+0x514>

   /* default to invalid signature */
   *res = 0;
 8017d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017da0:	2200      	movs	r2, #0
 8017da2:	601a      	str	r2, [r3, #0]

   /* is the IDX valid ?  */
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 8017da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7fe ffd0 	bl	8016d50 <wc_ecc_is_valid_idx>
 8017db0:	4603      	mov	r3, r0
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d004      	beq.n	8017dc0 <wc_ecc_verify_hash_ex+0xa0>
 8017db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017dba:	691b      	ldr	r3, [r3, #16]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d102      	bne.n	8017dc6 <wc_ecc_verify_hash_ex+0xa6>
      return ECC_BAD_ARG_E;
 8017dc0:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8017dc4:	e236      	b.n	8018234 <wc_ecc_verify_hash_ex+0x514>
   }

   err = wc_ecc_check_r_s_range(key, r, s);
 8017dc6:	68ba      	ldr	r2, [r7, #8]
 8017dc8:	68f9      	ldr	r1, [r7, #12]
 8017dca:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8017dce:	f7ff ff29 	bl	8017c24 <wc_ecc_check_r_s_range>
 8017dd2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err != MP_OKAY) {
 8017dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d002      	beq.n	8017de4 <wc_ecc_verify_hash_ex+0xc4>
      return err;
 8017dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017de2:	e227      	b.n	8018234 <wc_ecc_verify_hash_ex+0x514>
   }

   keySz = key->dp->size;
 8017de4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017de8:	691b      	ldr	r3, [r3, #16]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

#else
  /* checking if private key with no public part */
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 8017dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b03      	cmp	r3, #3
 8017df6:	d10f      	bne.n	8017e18 <wc_ecc_verify_hash_ex+0xf8>
      WOLFSSL_MSG("Verify called with private key, generating public part");
      err = ecc_make_pub_ex(key, NULL, NULL, NULL);
 8017df8:	2300      	movs	r3, #0
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	2100      	movs	r1, #0
 8017dfe:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8017e02:	f7ff f884 	bl	8016f0e <ecc_make_pub_ex>
 8017e06:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      if (err != MP_OKAY) {
 8017e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d002      	beq.n	8017e18 <wc_ecc_verify_hash_ex+0xf8>
           WOLFSSL_MSG("Unable to extract public key");
           return err;
 8017e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017e16:	e20d      	b.n	8018234 <wc_ecc_verify_hash_ex+0x514>
    #endif
    }
#endif

#if !defined(WOLFSSL_SP_MATH) || defined(FREESCALE_LTC_ECC)
   ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8017e18:	f640 20dc 	movw	r0, #2780	; 0xadc
 8017e1c:	f000 fec6 	bl	8018bac <wolfSSL_Malloc>
 8017e20:	66f8      	str	r0, [r7, #108]	; 0x6c
 8017e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d104      	bne.n	8017e32 <wc_ecc_verify_hash_ex+0x112>
 8017e28:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017e30:	e002      	b.n	8017e38 <wc_ecc_verify_hash_ex+0x118>
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017e36:	619a      	str	r2, [r3, #24]
   if (err != 0) {
 8017e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d002      	beq.n	8017e46 <wc_ecc_verify_hash_ex+0x126>
      return err;
 8017e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017e44:	e1f6      	b.n	8018234 <wc_ecc_verify_hash_ex+0x514>
      return err;
   }
   e = key->e;
#else
#ifdef WOLFSSL_SMALL_STACK
   e_lcl = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8017e46:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017e4a:	f000 feaf 	bl	8018bac <wolfSSL_Malloc>
 8017e4e:	6738      	str	r0, [r7, #112]	; 0x70
   if (e_lcl == NULL) {
 8017e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d10a      	bne.n	8017e6c <wc_ecc_verify_hash_ex+0x14c>
       FREE_CURVE_SPECS();
 8017e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017e58:	647b      	str	r3, [r7, #68]	; 0x44
 8017e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d002      	beq.n	8017e66 <wc_ecc_verify_hash_ex+0x146>
 8017e60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017e62:	f000 febf 	bl	8018be4 <wolfSSL_Free>
       return MEMORY_E;
 8017e66:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017e6a:	e1e3      	b.n	8018234 <wc_ecc_verify_hash_ex+0x514>
   }
#endif
   e = e_lcl;
 8017e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017e6e:	66bb      	str	r3, [r7, #104]	; 0x68
#endif /* WOLFSSL_ASYNC_CRYPT && HAVE_CAVIUM_V */

   err = mp_init(e);
 8017e70:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017e72:	f008 f9fd 	bl	8020270 <mp_init>
 8017e76:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err != MP_OKAY) {
 8017e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d00a      	beq.n	8017e98 <wc_ecc_verify_hash_ex+0x178>
      FREE_CURVE_SPECS();
 8017e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8017e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d002      	beq.n	8017e92 <wc_ecc_verify_hash_ex+0x172>
 8017e8c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017e8e:	f000 fea9 	bl	8018be4 <wolfSSL_Free>
      return MEMORY_E;
 8017e92:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017e96:	e1cd      	b.n	8018234 <wc_ecc_verify_hash_ex+0x514>
   }

   /* read in the specs for this curve */
   err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8017e98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017e9c:	691b      	ldr	r3, [r3, #16]
 8017e9e:	f107 0110 	add.w	r1, r7, #16
 8017ea2:	223b      	movs	r2, #59	; 0x3b
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7fc ff48 	bl	8014d3a <wc_ecc_curve_load>
 8017eaa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* read hash */
   if (err == MP_OKAY) {
 8017eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d129      	bne.n	8017f0a <wc_ecc_verify_hash_ex+0x1ea>
       /* we may need to truncate if hash is longer than key size */
       unsigned int orderBits = mp_count_bits(curve->order);
 8017eb6:	693b      	ldr	r3, [r7, #16]
 8017eb8:	68db      	ldr	r3, [r3, #12]
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f008 fc3c 	bl	8020738 <mp_count_bits>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	667b      	str	r3, [r7, #100]	; 0x64

       /* truncate down to byte size, may be all that's needed */
       if ( (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 8017ec4:	683b      	ldr	r3, [r7, #0]
 8017ec6:	00db      	lsls	r3, r3, #3
 8017ec8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d203      	bcs.n	8017ed6 <wc_ecc_verify_hash_ex+0x1b6>
           hashlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
 8017ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ed0:	3307      	adds	r3, #7
 8017ed2:	08db      	lsrs	r3, r3, #3
 8017ed4:	603b      	str	r3, [r7, #0]
       err = mp_read_unsigned_bin(e, hash, hashlen);
 8017ed6:	683b      	ldr	r3, [r7, #0]
 8017ed8:	461a      	mov	r2, r3
 8017eda:	6879      	ldr	r1, [r7, #4]
 8017edc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017ede:	f008 fb99 	bl	8020614 <mp_read_unsigned_bin>
 8017ee2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

       /* may still need bit truncation too */
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 8017ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d10d      	bne.n	8017f0a <wc_ecc_verify_hash_ex+0x1ea>
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	00db      	lsls	r3, r3, #3
 8017ef2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	d208      	bcs.n	8017f0a <wc_ecc_verify_hash_ex+0x1ea>
           mp_rshb(e, WOLFSSL_BIT_SIZE - (orderBits & 0x7));
 8017ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017efa:	f003 0307 	and.w	r3, r3, #7
 8017efe:	f1c3 0308 	rsb	r3, r3, #8
 8017f02:	4619      	mov	r1, r3
 8017f04:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017f06:	f008 fc23 	bl	8020750 <mp_rshb>
   #endif /* HAVE_CAVIUM_V || HAVE_INTEL_QA */
   }
#endif /* WOLFSSL_ASYNC_CRYPT && WC_ASYNC_ENABLE_ECC */

#ifdef WOLFSSL_SMALL_STACK
   if (err == MP_OKAY) {
 8017f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d10d      	bne.n	8017f2e <wc_ecc_verify_hash_ex+0x20e>
       v = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8017f12:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017f16:	f000 fe49 	bl	8018bac <wolfSSL_Malloc>
 8017f1a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
       if (v == NULL)
 8017f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d103      	bne.n	8017f2e <wc_ecc_verify_hash_ex+0x20e>
           err = MEMORY_E;
 8017f26:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   }
   if (err == MP_OKAY) {
 8017f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d10d      	bne.n	8017f52 <wc_ecc_verify_hash_ex+0x232>
       w = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8017f36:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017f3a:	f000 fe37 	bl	8018bac <wolfSSL_Malloc>
 8017f3e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
       if (w == NULL)
 8017f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d103      	bne.n	8017f52 <wc_ecc_verify_hash_ex+0x232>
           err = MEMORY_E;
 8017f4a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   }
   if (err == MP_OKAY) {
 8017f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d10b      	bne.n	8017f72 <wc_ecc_verify_hash_ex+0x252>
       u1 = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8017f5a:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017f5e:	f000 fe25 	bl	8018bac <wolfSSL_Malloc>
 8017f62:	67f8      	str	r0, [r7, #124]	; 0x7c
       if (u1 == NULL)
 8017f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d103      	bne.n	8017f72 <wc_ecc_verify_hash_ex+0x252>
           err = MEMORY_E;
 8017f6a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   }
   if (err == MP_OKAY) {
 8017f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d10b      	bne.n	8017f92 <wc_ecc_verify_hash_ex+0x272>
       u2 = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8017f7a:	f44f 700b 	mov.w	r0, #556	; 0x22c
 8017f7e:	f000 fe15 	bl	8018bac <wolfSSL_Malloc>
 8017f82:	67b8      	str	r0, [r7, #120]	; 0x78
       if (u2 == NULL)
 8017f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d103      	bne.n	8017f92 <wc_ecc_verify_hash_ex+0x272>
           err = MEMORY_E;
 8017f8a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   }
#endif

   /* allocate ints */
   if (err == MP_OKAY) {
 8017f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d119      	bne.n	8017fce <wc_ecc_verify_hash_ex+0x2ae>
       if ((err = mp_init_multi(v, w, u1, u2, NULL, NULL)) != MP_OKAY) {
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	9301      	str	r3, [sp, #4]
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	9300      	str	r3, [sp, #0]
 8017fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017fa4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017fa6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8017faa:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8017fae:	f008 f9ff 	bl	80203b0 <mp_init_multi>
 8017fb2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8017fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d004      	beq.n	8017fc8 <wc_ecc_verify_hash_ex+0x2a8>
          err = MEMORY_E;
 8017fbe:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017fc6:	e002      	b.n	8017fce <wc_ecc_verify_hash_ex+0x2ae>
       } else {
           did_init = 1;
 8017fc8:	2301      	movs	r3, #1
 8017fca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
       }
   }

   /* allocate points */
   if (err == MP_OKAY) {
 8017fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d10a      	bne.n	8017fec <wc_ecc_verify_hash_ex+0x2cc>
   #ifdef WOLFSSL_NO_MALLOC
       mG = &lcl_mG;
   #endif
       err = wc_ecc_new_point_ex(&mG, key->heap);
 8017fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017fda:	695a      	ldr	r2, [r3, #20]
 8017fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017fe0:	4611      	mov	r1, r2
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7fe fdf0 	bl	8016bc8 <wc_ecc_new_point_ex>
 8017fe8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   }
   if (err == MP_OKAY) {
 8017fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d10a      	bne.n	801800a <wc_ecc_verify_hash_ex+0x2ea>
   #ifdef WOLFSSL_NO_MALLOC
       mQ = &lcl_mQ;
   #endif
       err = wc_ecc_new_point_ex(&mQ, key->heap);
 8017ff4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017ff8:	695a      	ldr	r2, [r3, #20]
 8017ffa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017ffe:	4611      	mov	r1, r2
 8018000:	4618      	mov	r0, r3
 8018002:	f7fe fde1 	bl	8016bc8 <wc_ecc_new_point_ex>
 8018006:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   }

   /*  w  = s^-1 mod n */
   if (err == MP_OKAY)
 801800a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801800e:	2b00      	cmp	r3, #0
 8018010:	d109      	bne.n	8018026 <wc_ecc_verify_hash_ex+0x306>
       err = mp_invmod(s, curve->order, w);
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	68db      	ldr	r3, [r3, #12]
 8018016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801801a:	4619      	mov	r1, r3
 801801c:	68b8      	ldr	r0, [r7, #8]
 801801e:	f008 fa6d 	bl	80204fc <mp_invmod>
 8018022:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* u1 = ew */
   if (err == MP_OKAY)
 8018026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801802a:	2b00      	cmp	r3, #0
 801802c:	d109      	bne.n	8018042 <wc_ecc_verify_hash_ex+0x322>
       err = mp_mulmod(e, w, curve->order, u1);
 801802e:	693b      	ldr	r3, [r7, #16]
 8018030:	68da      	ldr	r2, [r3, #12]
 8018032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018034:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8018038:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801803a:	f008 fa19 	bl	8020470 <mp_mulmod>
 801803e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* u2 = rw */
   if (err == MP_OKAY)
 8018042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018046:	2b00      	cmp	r3, #0
 8018048:	d109      	bne.n	801805e <wc_ecc_verify_hash_ex+0x33e>
       err = mp_mulmod(r, w, curve->order, u2);
 801804a:	693b      	ldr	r3, [r7, #16]
 801804c:	68da      	ldr	r2, [r3, #12]
 801804e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018050:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8018054:	68f8      	ldr	r0, [r7, #12]
 8018056:	f008 fa0b 	bl	8020470 <mp_mulmod>
 801805a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* find mG and mQ */
   if (err == MP_OKAY)
 801805e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018062:	2b00      	cmp	r3, #0
 8018064:	d109      	bne.n	801807a <wc_ecc_verify_hash_ex+0x35a>
       err = mp_copy(curve->Gx, mG->x);
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	691a      	ldr	r2, [r3, #16]
 801806a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4619      	mov	r1, r3
 8018070:	4610      	mov	r0, r2
 8018072:	f008 fb42 	bl	80206fa <mp_copy>
 8018076:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 801807a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801807e:	2b00      	cmp	r3, #0
 8018080:	d109      	bne.n	8018096 <wc_ecc_verify_hash_ex+0x376>
       err = mp_copy(curve->Gy, mG->y);
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	695a      	ldr	r2, [r3, #20]
 8018086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018088:	685b      	ldr	r3, [r3, #4]
 801808a:	4619      	mov	r1, r3
 801808c:	4610      	mov	r0, r2
 801808e:	f008 fb34 	bl	80206fa <mp_copy>
 8018092:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 8018096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801809a:	2b00      	cmp	r3, #0
 801809c:	d107      	bne.n	80180ae <wc_ecc_verify_hash_ex+0x38e>
       err = mp_set(mG->z, 1);
 801809e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180a0:	689b      	ldr	r3, [r3, #8]
 80180a2:	2101      	movs	r1, #1
 80180a4:	4618      	mov	r0, r3
 80180a6:	f008 fdb1 	bl	8020c0c <mp_set>
 80180aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   if (err == MP_OKAY)
 80180ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d10a      	bne.n	80180cc <wc_ecc_verify_hash_ex+0x3ac>
       err = mp_copy(key->pubkey.x, mQ->x);
 80180b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80180ba:	699a      	ldr	r2, [r3, #24]
 80180bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	4619      	mov	r1, r3
 80180c2:	4610      	mov	r0, r2
 80180c4:	f008 fb19 	bl	80206fa <mp_copy>
 80180c8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 80180cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d10a      	bne.n	80180ea <wc_ecc_verify_hash_ex+0x3ca>
       err = mp_copy(key->pubkey.y, mQ->y);
 80180d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80180d8:	69da      	ldr	r2, [r3, #28]
 80180da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180dc:	685b      	ldr	r3, [r3, #4]
 80180de:	4619      	mov	r1, r3
 80180e0:	4610      	mov	r0, r2
 80180e2:	f008 fb0a 	bl	80206fa <mp_copy>
 80180e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   if (err == MP_OKAY)
 80180ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d10a      	bne.n	8018108 <wc_ecc_verify_hash_ex+0x3e8>
       err = mp_copy(key->pubkey.z, mQ->z);
 80180f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80180f6:	6a1a      	ldr	r2, [r3, #32]
 80180f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180fa:	689b      	ldr	r3, [r3, #8]
 80180fc:	4619      	mov	r1, r3
 80180fe:	4610      	mov	r0, r2
 8018100:	f008 fafb 	bl	80206fa <mp_copy>
 8018104:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err == MP_OKAY)
            err = ecc_map(mG, curve->prime, mp);
    }
#else
    /* use Shamir's trick to compute u1*mG + u2*mQ using half the doubles */
    if (err == MP_OKAY) {
 8018108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801810c:	2b00      	cmp	r3, #0
 801810e:	d115      	bne.n	801813c <wc_ecc_verify_hash_ex+0x41c>
        err = ecc_mul2add(mG, u1, mQ, u2, mG, curve->Af, curve->prime,
 8018110:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8018112:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8018114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018116:	693a      	ldr	r2, [r7, #16]
 8018118:	6892      	ldr	r2, [r2, #8]
 801811a:	6939      	ldr	r1, [r7, #16]
 801811c:	6849      	ldr	r1, [r1, #4]
 801811e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8018122:	6940      	ldr	r0, [r0, #20]
 8018124:	9003      	str	r0, [sp, #12]
 8018126:	9102      	str	r1, [sp, #8]
 8018128:	9201      	str	r2, [sp, #4]
 801812a:	9300      	str	r3, [sp, #0]
 801812c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801812e:	462a      	mov	r2, r5
 8018130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8018132:	4620      	mov	r0, r4
 8018134:	f7ff f9b6 	bl	80174a4 <ecc_mul2add>
 8018138:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                                                                     key->heap);
    }
#endif /* ECC_SHAMIR */
#endif /* FREESCALE_LTC_ECC */
   /* v = X_x1 mod n */
   if (err == MP_OKAY)
 801813c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018140:	2b00      	cmp	r3, #0
 8018142:	d10a      	bne.n	801815a <wc_ecc_verify_hash_ex+0x43a>
       err = mp_mod(mG->x, curve->order, v);
 8018144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018146:	6818      	ldr	r0, [r3, #0]
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	68db      	ldr	r3, [r3, #12]
 801814c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018150:	4619      	mov	r1, r3
 8018152:	f008 f9c3 	bl	80204dc <mp_mod>
 8018156:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

   /* does v == r */
   if (err == MP_OKAY) {
 801815a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801815e:	2b00      	cmp	r3, #0
 8018160:	d10b      	bne.n	801817a <wc_ecc_verify_hash_ex+0x45a>
       if (mp_cmp(v, r) == MP_EQ)
 8018162:	68f9      	ldr	r1, [r7, #12]
 8018164:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8018168:	f008 fa0e 	bl	8020588 <mp_cmp>
 801816c:	4603      	mov	r3, r0
 801816e:	2b00      	cmp	r3, #0
 8018170:	d103      	bne.n	801817a <wc_ecc_verify_hash_ex+0x45a>
           *res = 1;
 8018172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018176:	2201      	movs	r2, #1
 8018178:	601a      	str	r2, [r3, #0]
   }

   /* cleanup */
   wc_ecc_del_point_ex(mG, key->heap);
 801817a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801817c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018180:	695b      	ldr	r3, [r3, #20]
 8018182:	4619      	mov	r1, r3
 8018184:	4610      	mov	r0, r2
 8018186:	f7fe fd76 	bl	8016c76 <wc_ecc_del_point_ex>
   wc_ecc_del_point_ex(mQ, key->heap);
 801818a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801818c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018190:	695b      	ldr	r3, [r3, #20]
 8018192:	4619      	mov	r1, r3
 8018194:	4610      	mov	r0, r2
 8018196:	f7fe fd6e 	bl	8016c76 <wc_ecc_del_point_ex>

   mp_clear(e);
 801819a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801819c:	f008 f8ee 	bl	802037c <mp_clear>
   if (did_init) {
 80181a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d00d      	beq.n	80181c4 <wc_ecc_verify_hash_ex+0x4a4>
       mp_clear(v);
 80181a8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80181ac:	f008 f8e6 	bl	802037c <mp_clear>
       mp_clear(w);
 80181b0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80181b4:	f008 f8e2 	bl	802037c <mp_clear>
       mp_clear(u1);
 80181b8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80181ba:	f008 f8df 	bl	802037c <mp_clear>
       mp_clear(u2);
 80181be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80181c0:	f008 f8dc 	bl	802037c <mp_clear>
   }
#ifdef WOLFSSL_SMALL_STACK
   XFREE(u2, key->heap, DYNAMIC_TYPE_ECC);
 80181c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80181c6:	663b      	str	r3, [r7, #96]	; 0x60
 80181c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d002      	beq.n	80181d4 <wc_ecc_verify_hash_ex+0x4b4>
 80181ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80181d0:	f000 fd08 	bl	8018be4 <wolfSSL_Free>
   XFREE(u1, key->heap, DYNAMIC_TYPE_ECC);
 80181d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80181d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80181d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d002      	beq.n	80181e4 <wc_ecc_verify_hash_ex+0x4c4>
 80181de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80181e0:	f000 fd00 	bl	8018be4 <wolfSSL_Free>
   XFREE(w, key->heap, DYNAMIC_TYPE_ECC);
 80181e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80181e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80181ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d002      	beq.n	80181f6 <wc_ecc_verify_hash_ex+0x4d6>
 80181f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80181f2:	f000 fcf7 	bl	8018be4 <wolfSSL_Free>
   XFREE(v, key->heap, DYNAMIC_TYPE_ECC);
 80181f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80181fa:	657b      	str	r3, [r7, #84]	; 0x54
 80181fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d002      	beq.n	8018208 <wc_ecc_verify_hash_ex+0x4e8>
 8018202:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018204:	f000 fcee 	bl	8018be4 <wolfSSL_Free>
#if !defined(WOLFSSL_ASYNC_CRYPT) || !defined(HAVE_CAVIUM_V)
   XFREE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 8018208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801820a:	653b      	str	r3, [r7, #80]	; 0x50
 801820c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801820e:	2b00      	cmp	r3, #0
 8018210:	d002      	beq.n	8018218 <wc_ecc_verify_hash_ex+0x4f8>
 8018212:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018214:	f000 fce6 	bl	8018be4 <wolfSSL_Free>
#endif
#endif

   wc_ecc_curve_free(curve);
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	4618      	mov	r0, r3
 801821c:	f7fc fd42 	bl	8014ca4 <wc_ecc_curve_free>
   FREE_CURVE_SPECS();
 8018220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018226:	2b00      	cmp	r3, #0
 8018228:	d002      	beq.n	8018230 <wc_ecc_verify_hash_ex+0x510>
 801822a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801822c:	f000 fcda 	bl	8018be4 <wolfSSL_Free>
#endif /* WOLFSSL_ATECC508A */

   (void)keySz;
   (void)hashlen;

   return err;
 8018230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8018234:	4618      	mov	r0, r3
 8018236:	3790      	adds	r7, #144	; 0x90
 8018238:	46bd      	mov	sp, r7
 801823a:	bdb0      	pop	{r4, r5, r7, pc}

0801823c <wc_ecc_import_x963_ex>:

#ifdef HAVE_ECC_KEY_IMPORT
/* import public ECC key in ANSI X9.63 format */
int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key,
                          int curve_id)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b088      	sub	sp, #32
 8018240:	af00      	add	r7, sp, #0
 8018242:	60f8      	str	r0, [r7, #12]
 8018244:	60b9      	str	r1, [r7, #8]
 8018246:	607a      	str	r2, [r7, #4]
 8018248:	603b      	str	r3, [r7, #0]
    int err = MP_OKAY;
 801824a:	2300      	movs	r3, #0
 801824c:	61fb      	str	r3, [r7, #28]
#ifdef HAVE_COMP_KEY
    int compressed = 0;
#endif
    int keysize = 0;
 801824e:	2300      	movs	r3, #0
 8018250:	61bb      	str	r3, [r7, #24]
    byte pointType;
#ifdef WOLFSSL_CRYPTOCELL
    const CRYS_ECPKI_Domain_t* pDomain;
    CRYS_ECPKI_BUILD_TempData_t tempBuff;
#endif
    if (in == NULL || key == NULL)
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d002      	beq.n	801825e <wc_ecc_import_x963_ex+0x22>
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d102      	bne.n	8018264 <wc_ecc_import_x963_ex+0x28>
        return BAD_FUNC_ARG;
 801825e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8018262:	e09d      	b.n	80183a0 <wc_ecc_import_x963_ex+0x164>

    /* must be odd */
    if ((inLen & 1) == 0) {
 8018264:	68bb      	ldr	r3, [r7, #8]
 8018266:	f003 0301 	and.w	r3, r3, #1
 801826a:	2b00      	cmp	r3, #0
 801826c:	d102      	bne.n	8018274 <wc_ecc_import_x963_ex+0x38>
        return ECC_BAD_ARG_E;
 801826e:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8018272:	e095      	b.n	80183a0 <wc_ecc_import_x963_ex+0x164>
    }

    /* make sure required variables are reset */
    wc_ecc_reset(key);
 8018274:	6878      	ldr	r0, [r7, #4]
 8018276:	f7fe fe3d 	bl	8016ef4 <wc_ecc_reset>

    /* init key */
    #ifdef ALT_ECC_SIZE
        key->pubkey.x = (mp_int*)&key->pubkey.xyz[0];
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	619a      	str	r2, [r3, #24]
        key->pubkey.y = (mp_int*)&key->pubkey.xyz[1];
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	f103 0274 	add.w	r2, r3, #116	; 0x74
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	61da      	str	r2, [r3, #28]
        key->pubkey.z = (mp_int*)&key->pubkey.xyz[2];
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	621a      	str	r2, [r3, #32]
        alt_fp_init(key->pubkey.x);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	699b      	ldr	r3, [r3, #24]
 801829c:	4618      	mov	r0, r3
 801829e:	f7fc fe55 	bl	8014f4c <alt_fp_init>
        alt_fp_init(key->pubkey.y);
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	69db      	ldr	r3, [r3, #28]
 80182a6:	4618      	mov	r0, r3
 80182a8:	f7fc fe50 	bl	8014f4c <alt_fp_init>
        alt_fp_init(key->pubkey.z);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	6a1b      	ldr	r3, [r3, #32]
 80182b0:	4618      	mov	r0, r3
 80182b2:	f7fc fe4b 	bl	8014f4c <alt_fp_init>
        err = mp_init(&key->k);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80182bc:	4618      	mov	r0, r3
 80182be:	f007 ffd7 	bl	8020270 <mp_init>
 80182c2:	61f8      	str	r0, [r7, #28]
    #else
        err = mp_init_multi(&key->k,
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
    #endif
    if (err != MP_OKAY)
 80182c4:	69fb      	ldr	r3, [r7, #28]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d002      	beq.n	80182d0 <wc_ecc_import_x963_ex+0x94>
        return MEMORY_E;
 80182ca:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80182ce:	e067      	b.n	80183a0 <wc_ecc_import_x963_ex+0x164>

    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    /* check for point type (4, 2, or 3) */
    pointType = in[0];
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	781b      	ldrb	r3, [r3, #0]
 80182d4:	75fb      	strb	r3, [r7, #23]
    if (pointType != ECC_POINT_UNCOMP && pointType != ECC_POINT_COMP_EVEN &&
 80182d6:	7dfb      	ldrb	r3, [r7, #23]
 80182d8:	2b04      	cmp	r3, #4
 80182da:	d008      	beq.n	80182ee <wc_ecc_import_x963_ex+0xb2>
 80182dc:	7dfb      	ldrb	r3, [r7, #23]
 80182de:	2b02      	cmp	r3, #2
 80182e0:	d005      	beq.n	80182ee <wc_ecc_import_x963_ex+0xb2>
 80182e2:	7dfb      	ldrb	r3, [r7, #23]
 80182e4:	2b03      	cmp	r3, #3
 80182e6:	d002      	beq.n	80182ee <wc_ecc_import_x963_ex+0xb2>
                                         pointType != ECC_POINT_COMP_ODD) {
        err = ASN_PARSE_E;
 80182e8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80182ec:	61fb      	str	r3, [r7, #28]
    }

    if (pointType == ECC_POINT_COMP_EVEN || pointType == ECC_POINT_COMP_ODD) {
 80182ee:	7dfb      	ldrb	r3, [r7, #23]
 80182f0:	2b02      	cmp	r3, #2
 80182f2:	d002      	beq.n	80182fa <wc_ecc_import_x963_ex+0xbe>
 80182f4:	7dfb      	ldrb	r3, [r7, #23]
 80182f6:	2b03      	cmp	r3, #3
 80182f8:	d102      	bne.n	8018300 <wc_ecc_import_x963_ex+0xc4>
    #ifdef HAVE_COMP_KEY
        compressed = 1;
    #else
        err = NOT_COMPILED_IN;
 80182fa:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 80182fe:	61fb      	str	r3, [r7, #28]
    #endif
    }

    /* adjust to skip first byte */
    inLen -= 1;
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	3b01      	subs	r3, #1
 8018304:	60bb      	str	r3, [r7, #8]
    in += 1;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	3301      	adds	r3, #1
 801830a:	60fb      	str	r3, [r7, #12]
    }
#elif defined(WOLFSSL_KCAPI_ECC)
    XMEMCPY(key->pubkey_raw, (byte*)in, inLen);
#endif

    if (err == MP_OKAY) {
 801830c:	69fb      	ldr	r3, [r7, #28]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d10b      	bne.n	801832a <wc_ecc_import_x963_ex+0xee>
        if (compressed)
            inLen = inLen*2 + 1;  /* used uncompressed len */
    #endif

        /* determine key size */
        keysize = (inLen>>1);
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	085b      	lsrs	r3, r3, #1
 8018316:	61bb      	str	r3, [r7, #24]
        err = wc_ecc_set_curve(key, keysize, curve_id);
 8018318:	683a      	ldr	r2, [r7, #0]
 801831a:	69b9      	ldr	r1, [r7, #24]
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f7fc fda7 	bl	8014e70 <wc_ecc_set_curve>
 8018322:	61f8      	str	r0, [r7, #28]
        key->type = ECC_PUBLICKEY;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2201      	movs	r2, #1
 8018328:	601a      	str	r2, [r3, #0]
    }

    /* read data */
    if (err == MP_OKAY)
 801832a:	69fb      	ldr	r3, [r7, #28]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d107      	bne.n	8018340 <wc_ecc_import_x963_ex+0x104>
        err = mp_read_unsigned_bin(key->pubkey.x, in, keysize);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	699b      	ldr	r3, [r3, #24]
 8018334:	69ba      	ldr	r2, [r7, #24]
 8018336:	68f9      	ldr	r1, [r7, #12]
 8018338:	4618      	mov	r0, r3
 801833a:	f008 f96b 	bl	8020614 <mp_read_unsigned_bin>
 801833e:	61f8      	str	r0, [r7, #28]
        }
#endif
    }
#endif /* HAVE_COMP_KEY */

    if (err == MP_OKAY) {
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d109      	bne.n	801835a <wc_ecc_import_x963_ex+0x11e>
    #ifdef HAVE_COMP_KEY
        if (compressed == 0)
    #endif
        {
            err = mp_read_unsigned_bin(key->pubkey.y, in + keysize, keysize);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	69d8      	ldr	r0, [r3, #28]
 801834a:	69bb      	ldr	r3, [r7, #24]
 801834c:	68fa      	ldr	r2, [r7, #12]
 801834e:	4413      	add	r3, r2
 8018350:	69ba      	ldr	r2, [r7, #24]
 8018352:	4619      	mov	r1, r3
 8018354:	f008 f95e 	bl	8020614 <mp_read_unsigned_bin>
 8018358:	61f8      	str	r0, [r7, #28]
        }
    }
    if (err == MP_OKAY)
 801835a:	69fb      	ldr	r3, [r7, #28]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d106      	bne.n	801836e <wc_ecc_import_x963_ex+0x132>
        err = mp_set(key->pubkey.z, 1);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6a1b      	ldr	r3, [r3, #32]
 8018364:	2101      	movs	r1, #1
 8018366:	4618      	mov	r0, r3
 8018368:	f008 fc50 	bl	8020c0c <mp_set>
 801836c:	61f8      	str	r0, [r7, #28]
    if (err == MP_OKAY) {
        err = wc_MAXQ10XX_EccSetKey(key, keysize);
    }
#endif

    if (err != MP_OKAY) {
 801836e:	69fb      	ldr	r3, [r7, #28]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d014      	beq.n	801839e <wc_ecc_import_x963_ex+0x162>
        mp_clear(key->pubkey.x);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	699b      	ldr	r3, [r3, #24]
 8018378:	4618      	mov	r0, r3
 801837a:	f007 ffff 	bl	802037c <mp_clear>
        mp_clear(key->pubkey.y);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	69db      	ldr	r3, [r3, #28]
 8018382:	4618      	mov	r0, r3
 8018384:	f007 fffa 	bl	802037c <mp_clear>
        mp_clear(key->pubkey.z);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6a1b      	ldr	r3, [r3, #32]
 801838c:	4618      	mov	r0, r3
 801838e:	f007 fff5 	bl	802037c <mp_clear>
        mp_clear(&key->k);
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8018398:	4618      	mov	r0, r3
 801839a:	f007 ffef 	bl	802037c <mp_clear>
    }

    RESTORE_VECTOR_REGISTERS();

    return err;
 801839e:	69fb      	ldr	r3, [r7, #28]
}
 80183a0:	4618      	mov	r0, r3
 80183a2:	3720      	adds	r7, #32
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bd80      	pop	{r7, pc}

080183a8 <wc_ecc_import_private_key_ex>:
#ifdef HAVE_ECC_KEY_IMPORT
/* import private key, public part optional if (pub) passed as NULL */
int wc_ecc_import_private_key_ex(const byte* priv, word32 privSz,
                                 const byte* pub, word32 pubSz, ecc_key* key,
                                 int curve_id)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b086      	sub	sp, #24
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	60f8      	str	r0, [r7, #12]
 80183b0:	60b9      	str	r1, [r7, #8]
 80183b2:	607a      	str	r2, [r7, #4]
 80183b4:	603b      	str	r3, [r7, #0]
    int ret;
#ifdef WOLFSSL_CRYPTOCELL
    const CRYS_ECPKI_Domain_t* pDomain;
#endif
    if (key == NULL || priv == NULL)
 80183b6:	6a3b      	ldr	r3, [r7, #32]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d002      	beq.n	80183c2 <wc_ecc_import_private_key_ex+0x1a>
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d102      	bne.n	80183c8 <wc_ecc_import_private_key_ex+0x20>
        return BAD_FUNC_ARG;
 80183c2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80183c6:	e036      	b.n	8018436 <wc_ecc_import_private_key_ex+0x8e>

    /* public optional, NULL if only importing private */
    if (pub != NULL) {
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d017      	beq.n	80183fe <wc_ecc_import_private_key_ex+0x56>
    #ifndef NO_ASN
        word32 idx = 0;
 80183ce:	2300      	movs	r3, #0
 80183d0:	613b      	str	r3, [r7, #16]
        ret = wc_ecc_import_x963_ex(pub, pubSz, key, curve_id);
 80183d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d4:	6a3a      	ldr	r2, [r7, #32]
 80183d6:	6839      	ldr	r1, [r7, #0]
 80183d8:	6878      	ldr	r0, [r7, #4]
 80183da:	f7ff ff2f 	bl	801823c <wc_ecc_import_x963_ex>
 80183de:	6178      	str	r0, [r7, #20]
        if (ret < 0)
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	da07      	bge.n	80183f6 <wc_ecc_import_private_key_ex+0x4e>
            ret = wc_EccPublicKeyDecode(pub, &idx, key, pubSz);
 80183e6:	f107 0110 	add.w	r1, r7, #16
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	6a3a      	ldr	r2, [r7, #32]
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	f7fb ffd1 	bl	8014396 <wc_EccPublicKeyDecode>
 80183f4:	6178      	str	r0, [r7, #20]
        key->type = ECC_PRIVATEKEY;
 80183f6:	6a3b      	ldr	r3, [r7, #32]
 80183f8:	2202      	movs	r2, #2
 80183fa:	601a      	str	r2, [r3, #0]
 80183fc:	e00c      	b.n	8018418 <wc_ecc_import_private_key_ex+0x70>
        ret = NOT_COMPILED_IN;
    #endif
    }
    else {
        /* make sure required variables are reset */
        wc_ecc_reset(key);
 80183fe:	6a38      	ldr	r0, [r7, #32]
 8018400:	f7fe fd78 	bl	8016ef4 <wc_ecc_reset>

        /* set key size */
        ret = wc_ecc_set_curve(key, privSz, curve_id);
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018408:	4619      	mov	r1, r3
 801840a:	6a38      	ldr	r0, [r7, #32]
 801840c:	f7fc fd30 	bl	8014e70 <wc_ecc_set_curve>
 8018410:	6178      	str	r0, [r7, #20]
        key->type = ECC_PRIVATEKEY_ONLY;
 8018412:	6a3b      	ldr	r3, [r7, #32]
 8018414:	2203      	movs	r2, #3
 8018416:	601a      	str	r2, [r3, #0]
    }

    if (ret != 0)
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d001      	beq.n	8018422 <wc_ecc_import_private_key_ex+0x7a>
        return ret;
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	e009      	b.n	8018436 <wc_ecc_import_private_key_ex+0x8e>

#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    SAVE_VECTOR_REGISTERS(return _svr_ret;);
#endif

    ret = mp_read_unsigned_bin(&key->k, priv, privSz);
 8018422:	6a3b      	ldr	r3, [r7, #32]
 8018424:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8018428:	68ba      	ldr	r2, [r7, #8]
 801842a:	68f9      	ldr	r1, [r7, #12]
 801842c:	4618      	mov	r0, r3
 801842e:	f008 f8f1 	bl	8020614 <mp_read_unsigned_bin>
 8018432:	6178      	str	r0, [r7, #20]
    if (ret == 0) {
        ret = wc_MAXQ10XX_EccSetKey(key, key->dp->size);
    }
#endif

    return ret;
 8018434:	697b      	ldr	r3, [r7, #20]
}
 8018436:	4618      	mov	r0, r3
 8018438:	3718      	adds	r7, #24
 801843a:	46bd      	mov	sp, r7
 801843c:	bd80      	pop	{r7, pc}

0801843e <wc_ecc_size>:
#endif

/* key size in octets */
WOLFSSL_ABI
int wc_ecc_size(ecc_key* key)
{
 801843e:	b480      	push	{r7}
 8018440:	b083      	sub	sp, #12
 8018442:	af00      	add	r7, sp, #0
 8018444:	6078      	str	r0, [r7, #4]
    if (key == NULL || key->dp == NULL)
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d003      	beq.n	8018454 <wc_ecc_size+0x16>
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	691b      	ldr	r3, [r3, #16]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d101      	bne.n	8018458 <wc_ecc_size+0x1a>
        return 0;
 8018454:	2300      	movs	r3, #0
 8018456:	e002      	b.n	801845e <wc_ecc_size+0x20>

    return key->dp->size;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	691b      	ldr	r3, [r3, #16]
 801845c:	681b      	ldr	r3, [r3, #0]
}
 801845e:	4618      	mov	r0, r3
 8018460:	370c      	adds	r7, #12
 8018462:	46bd      	mov	sp, r7
 8018464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018468:	4770      	bx	lr
	...

0801846c <wc_ecc_get_oid>:

#endif /* HAVE_COMP_KEY */


int wc_ecc_get_oid(word32 oidSum, const byte** oid, word32* oidSz)
{
 801846c:	b480      	push	{r7}
 801846e:	b087      	sub	sp, #28
 8018470:	af00      	add	r7, sp, #0
 8018472:	60f8      	str	r0, [r7, #12]
 8018474:	60b9      	str	r1, [r7, #8]
 8018476:	607a      	str	r2, [r7, #4]
    int x;

    if (oidSum == 0) {
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d102      	bne.n	8018484 <wc_ecc_get_oid+0x18>
        return BAD_FUNC_ARG;
 801847e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8018482:	e040      	b.n	8018506 <wc_ecc_get_oid+0x9a>
    }

    /* find matching OID sum (based on encoded value) */
    for (x = 0; ecc_sets[x].size != 0; x++) {
 8018484:	2300      	movs	r3, #0
 8018486:	617b      	str	r3, [r7, #20]
 8018488:	e032      	b.n	80184f0 <wc_ecc_get_oid+0x84>
        if (ecc_sets[x].oidSum == oidSum) {
 801848a:	4a22      	ldr	r2, [pc, #136]	; (8018514 <wc_ecc_get_oid+0xa8>)
 801848c:	697b      	ldr	r3, [r7, #20]
 801848e:	2134      	movs	r1, #52	; 0x34
 8018490:	fb01 f303 	mul.w	r3, r1, r3
 8018494:	4413      	add	r3, r2
 8018496:	332c      	adds	r3, #44	; 0x2c
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	68fa      	ldr	r2, [r7, #12]
 801849c:	429a      	cmp	r2, r3
 801849e:	d124      	bne.n	80184ea <wc_ecc_get_oid+0x7e>
            /* on success return curve id */
            if (ret == 0) {
                ret = ecc_sets[x].id;
            }
        #else
            if (oidSz) {
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d009      	beq.n	80184ba <wc_ecc_get_oid+0x4e>
                *oidSz = ecc_sets[x].oidSz;
 80184a6:	4a1b      	ldr	r2, [pc, #108]	; (8018514 <wc_ecc_get_oid+0xa8>)
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	2134      	movs	r1, #52	; 0x34
 80184ac:	fb01 f303 	mul.w	r3, r1, r3
 80184b0:	4413      	add	r3, r2
 80184b2:	3328      	adds	r3, #40	; 0x28
 80184b4:	681a      	ldr	r2, [r3, #0]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	601a      	str	r2, [r3, #0]
            }
            if (oid) {
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d009      	beq.n	80184d4 <wc_ecc_get_oid+0x68>
                *oid = ecc_sets[x].oid;
 80184c0:	4a14      	ldr	r2, [pc, #80]	; (8018514 <wc_ecc_get_oid+0xa8>)
 80184c2:	697b      	ldr	r3, [r7, #20]
 80184c4:	2134      	movs	r1, #52	; 0x34
 80184c6:	fb01 f303 	mul.w	r3, r1, r3
 80184ca:	4413      	add	r3, r2
 80184cc:	3324      	adds	r3, #36	; 0x24
 80184ce:	681a      	ldr	r2, [r3, #0]
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	601a      	str	r2, [r3, #0]
            }
            ret = ecc_sets[x].id;
 80184d4:	4a0f      	ldr	r2, [pc, #60]	; (8018514 <wc_ecc_get_oid+0xa8>)
 80184d6:	697b      	ldr	r3, [r7, #20]
 80184d8:	2134      	movs	r1, #52	; 0x34
 80184da:	fb01 f303 	mul.w	r3, r1, r3
 80184de:	4413      	add	r3, r2
 80184e0:	3304      	adds	r3, #4
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	613b      	str	r3, [r7, #16]
        #endif
            return ret;
 80184e6:	693b      	ldr	r3, [r7, #16]
 80184e8:	e00d      	b.n	8018506 <wc_ecc_get_oid+0x9a>
    for (x = 0; ecc_sets[x].size != 0; x++) {
 80184ea:	697b      	ldr	r3, [r7, #20]
 80184ec:	3301      	adds	r3, #1
 80184ee:	617b      	str	r3, [r7, #20]
 80184f0:	4a08      	ldr	r2, [pc, #32]	; (8018514 <wc_ecc_get_oid+0xa8>)
 80184f2:	697b      	ldr	r3, [r7, #20]
 80184f4:	2134      	movs	r1, #52	; 0x34
 80184f6:	fb01 f303 	mul.w	r3, r1, r3
 80184fa:	4413      	add	r3, r2
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d1c3      	bne.n	801848a <wc_ecc_get_oid+0x1e>
        }
    }

    return NOT_COMPILED_IN;
 8018502:	f06f 03ad 	mvn.w	r3, #173	; 0xad
}
 8018506:	4618      	mov	r0, r3
 8018508:	371c      	adds	r7, #28
 801850a:	46bd      	mov	sp, r7
 801850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018510:	4770      	bx	lr
 8018512:	bf00      	nop
 8018514:	0802bf1c 	.word	0x0802bf1c

08018518 <wc_HashGetDigestSize>:

#ifndef NO_HASH_WRAPPER

/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
 8018518:	b480      	push	{r7}
 801851a:	b085      	sub	sp, #20
 801851c:	af00      	add	r7, sp, #0
 801851e:	4603      	mov	r3, r0
 8018520:	71fb      	strb	r3, [r7, #7]
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
 8018522:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 8018526:	60fb      	str	r3, [r7, #12]
    switch(hash_type)
 8018528:	79fb      	ldrb	r3, [r7, #7]
 801852a:	3b01      	subs	r3, #1
 801852c:	2b10      	cmp	r3, #16
 801852e:	d828      	bhi.n	8018582 <wc_HashGetDigestSize+0x6a>
 8018530:	a201      	add	r2, pc, #4	; (adr r2, 8018538 <wc_HashGetDigestSize+0x20>)
 8018532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018536:	bf00      	nop
 8018538:	0801858b 	.word	0x0801858b
 801853c:	0801858b 	.word	0x0801858b
 8018540:	0801858b 	.word	0x0801858b
 8018544:	0801858b 	.word	0x0801858b
 8018548:	0801858b 	.word	0x0801858b
 801854c:	0801857d 	.word	0x0801857d
 8018550:	0801858b 	.word	0x0801858b
 8018554:	0801858b 	.word	0x0801858b
 8018558:	0801858b 	.word	0x0801858b
 801855c:	0801858b 	.word	0x0801858b
 8018560:	0801858b 	.word	0x0801858b
 8018564:	0801858b 	.word	0x0801858b
 8018568:	0801858b 	.word	0x0801858b
 801856c:	0801858b 	.word	0x0801858b
 8018570:	0801858b 	.word	0x0801858b
 8018574:	0801858b 	.word	0x0801858b
 8018578:	0801858b 	.word	0x0801858b
            dig_size = WC_SHA224_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            dig_size = WC_SHA256_DIGEST_SIZE;
 801857c:	2320      	movs	r3, #32
 801857e:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 8018580:	e004      	b.n	801858c <wc_HashGetDigestSize+0x74>
    #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE256)
        case WC_HASH_TYPE_SHAKE256:
    #endif
        case WC_HASH_TYPE_NONE:
        default:
            dig_size = BAD_FUNC_ARG;
 8018582:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8018586:	60fb      	str	r3, [r7, #12]
            break;
 8018588:	e000      	b.n	801858c <wc_HashGetDigestSize+0x74>
            break;
 801858a:	bf00      	nop
    }
    return dig_size;
 801858c:	68fb      	ldr	r3, [r7, #12]
}
 801858e:	4618      	mov	r0, r3
 8018590:	3714      	adds	r7, #20
 8018592:	46bd      	mov	sp, r7
 8018594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018598:	4770      	bx	lr
 801859a:	bf00      	nop

0801859c <wc_Hash>:
}

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b086      	sub	sp, #24
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60b9      	str	r1, [r7, #8]
 80185a4:	607a      	str	r2, [r7, #4]
 80185a6:	603b      	str	r3, [r7, #0]
 80185a8:	4603      	mov	r3, r0
 80185aa:	73fb      	strb	r3, [r7, #15]
    int ret = HASH_TYPE_E; /* Default to hash type error */
 80185ac:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 80185b0:	617b      	str	r3, [r7, #20]
    word32 dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
 80185b2:	7bfb      	ldrb	r3, [r7, #15]
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7ff ffaf 	bl	8018518 <wc_HashGetDigestSize>
 80185ba:	4603      	mov	r3, r0
 80185bc:	613b      	str	r3, [r7, #16]
    if (hash_len < dig_size) {
 80185be:	6a3a      	ldr	r2, [r7, #32]
 80185c0:	693b      	ldr	r3, [r7, #16]
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d202      	bcs.n	80185cc <wc_Hash+0x30>
        return BUFFER_E;
 80185c6:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80185ca:	e032      	b.n	8018632 <wc_Hash+0x96>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
 80185cc:	7bfb      	ldrb	r3, [r7, #15]
 80185ce:	3b03      	subs	r3, #3
 80185d0:	2b0e      	cmp	r3, #14
 80185d2:	d828      	bhi.n	8018626 <wc_Hash+0x8a>
 80185d4:	a201      	add	r2, pc, #4	; (adr r2, 80185dc <wc_Hash+0x40>)
 80185d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185da:	bf00      	nop
 80185dc:	0801862f 	.word	0x0801862f
 80185e0:	0801862f 	.word	0x0801862f
 80185e4:	0801862f 	.word	0x0801862f
 80185e8:	08018619 	.word	0x08018619
 80185ec:	0801862f 	.word	0x0801862f
 80185f0:	0801862f 	.word	0x0801862f
 80185f4:	0801862f 	.word	0x0801862f
 80185f8:	0801862f 	.word	0x0801862f
 80185fc:	0801862f 	.word	0x0801862f
 8018600:	0801862f 	.word	0x0801862f
 8018604:	0801862f 	.word	0x0801862f
 8018608:	08018627 	.word	0x08018627
 801860c:	08018627 	.word	0x08018627
 8018610:	0801862f 	.word	0x0801862f
 8018614:	0801862f 	.word	0x0801862f
            ret = wc_Sha224Hash(data, data_len, hash);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Hash(data, data_len, hash);
 8018618:	683a      	ldr	r2, [r7, #0]
 801861a:	6879      	ldr	r1, [r7, #4]
 801861c:	68b8      	ldr	r0, [r7, #8]
 801861e:	f000 f80d 	bl	801863c <wc_Sha256Hash>
 8018622:	6178      	str	r0, [r7, #20]
#endif
            break;
 8018624:	e004      	b.n	8018630 <wc_Hash+0x94>
    #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE256)
        case WC_HASH_TYPE_SHAKE256:
    #endif
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
 8018626:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801862a:	617b      	str	r3, [r7, #20]
            break;
 801862c:	e000      	b.n	8018630 <wc_Hash+0x94>
            break;
 801862e:	bf00      	nop
    }
    return ret;
 8018630:	697b      	ldr	r3, [r7, #20]
}
 8018632:	4618      	mov	r0, r3
 8018634:	3718      	adds	r7, #24
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop

0801863c <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
 801863c:	b580      	push	{r7, lr}
 801863e:	b088      	sub	sp, #32
 8018640:	af00      	add	r7, sp, #0
 8018642:	60f8      	str	r0, [r7, #12]
 8018644:	60b9      	str	r1, [r7, #8]
 8018646:	607a      	str	r2, [r7, #4]
        int ret = 0;
 8018648:	2300      	movs	r3, #0
 801864a:	61fb      	str	r3, [r7, #28]
    #ifdef WOLFSSL_SMALL_STACK
        wc_Sha256* sha256;
    #else
        wc_Sha256 sha256[1];
    #endif
        int devId = INVALID_DEVID;
 801864c:	f06f 0301 	mvn.w	r3, #1
 8018650:	61bb      	str	r3, [r7, #24]

    #ifdef WOLFSSL_SMALL_STACK
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 8018652:	2070      	movs	r0, #112	; 0x70
 8018654:	f000 faaa 	bl	8018bac <wolfSSL_Malloc>
 8018658:	6178      	str	r0, [r7, #20]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
 801865a:	697b      	ldr	r3, [r7, #20]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d102      	bne.n	8018666 <wc_Sha256Hash+0x2a>
            return MEMORY_E;
 8018660:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8018664:	e022      	b.n	80186ac <wc_Sha256Hash+0x70>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha256_ex(sha256, NULL, devId)) != 0) {
 8018666:	69ba      	ldr	r2, [r7, #24]
 8018668:	2100      	movs	r1, #0
 801866a:	6978      	ldr	r0, [r7, #20]
 801866c:	f002 ff34 	bl	801b4d8 <wc_InitSha256_ex>
 8018670:	61f8      	str	r0, [r7, #28]
 8018672:	69fb      	ldr	r3, [r7, #28]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d110      	bne.n	801869a <wc_Sha256Hash+0x5e>
            WOLFSSL_MSG("InitSha256 failed");
        }
        else {
            if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
 8018678:	68ba      	ldr	r2, [r7, #8]
 801867a:	68f9      	ldr	r1, [r7, #12]
 801867c:	6978      	ldr	r0, [r7, #20]
 801867e:	f003 fb7c 	bl	801bd7a <wc_Sha256Update>
 8018682:	61f8      	str	r0, [r7, #28]
 8018684:	69fb      	ldr	r3, [r7, #28]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d104      	bne.n	8018694 <wc_Sha256Hash+0x58>
                WOLFSSL_MSG("Sha256Update failed");
            }
            else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
 801868a:	6879      	ldr	r1, [r7, #4]
 801868c:	6978      	ldr	r0, [r7, #20]
 801868e:	f003 fc10 	bl	801beb2 <wc_Sha256Final>
 8018692:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha256Final failed");
            }
            wc_Sha256Free(sha256);
 8018694:	6978      	ldr	r0, [r7, #20]
 8018696:	f003 fc48 	bl	801bf2a <wc_Sha256Free>
        }


    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801869a:	697b      	ldr	r3, [r7, #20]
 801869c:	613b      	str	r3, [r7, #16]
 801869e:	693b      	ldr	r3, [r7, #16]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d002      	beq.n	80186aa <wc_Sha256Hash+0x6e>
 80186a4:	6938      	ldr	r0, [r7, #16]
 80186a6:	f000 fa9d 	bl	8018be4 <wolfSSL_Free>
    #endif

        return ret;
 80186aa:	69fb      	ldr	r3, [r7, #28]
    }
 80186ac:	4618      	mov	r0, r3
 80186ae:	3720      	adds	r7, #32
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}

080186b4 <wc_HmacFree>:
}
#endif /* WOLF_PRIVATE_KEY_ID */

/* Free Hmac from use with async device */
void wc_HmacFree(Hmac* hmac)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b082      	sub	sp, #8
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
    if (hmac == NULL)
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d009      	beq.n	80186d6 <wc_HmacFree+0x22>

#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
    wolfAsync_DevCtxFree(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC);
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (hmac->macType) {
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80186c8:	2b06      	cmp	r3, #6
 80186ca:	d106      	bne.n	80186da <wc_HmacFree+0x26>
            wc_Sha224Free(&hmac->hash.sha224);
            break;
    #endif /* WOLFSSL_SHA224 */
    #ifndef NO_SHA256
        case WC_SHA256:
            wc_Sha256Free(&hmac->hash.sha256);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	4618      	mov	r0, r3
 80186d0:	f003 fc2b 	bl	801bf2a <wc_Sha256Free>
            break;
 80186d4:	e002      	b.n	80186dc <wc_HmacFree+0x28>
        return;
 80186d6:	bf00      	nop
 80186d8:	e000      	b.n	80186dc <wc_HmacFree+0x28>
            break;
    #endif
    #endif /* WOLFSSL_SHA3 */

        default:
            break;
 80186da:	bf00      	nop
    }
}
 80186dc:	3708      	adds	r7, #8
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}
	...

080186e4 <wc_LoggingInit>:
#define ERRQ_LOCK()            wc_LockMutex(&wc_error_mutex)
#define ERRQ_UNLOCK()          wc_UnLockMutex(&wc_error_mutex)

/* Internal function that is called by wolfCrypt_Init() */
int wc_LoggingInit(void)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	af00      	add	r7, sp, #0
    if (ERRQ_MUTEX_INIT() != 0) {
 80186e8:	480b      	ldr	r0, [pc, #44]	; (8018718 <wc_LoggingInit+0x34>)
 80186ea:	f008 fc03 	bl	8020ef4 <wc_InitMutex>
 80186ee:	4603      	mov	r3, r0
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d002      	beq.n	80186fa <wc_LoggingInit+0x16>
        WOLFSSL_MSG("Bad Init Mutex");
        return BAD_MUTEX_E;
 80186f4:	f06f 0369 	mvn.w	r3, #105	; 0x69
 80186f8:	e00c      	b.n	8018714 <wc_LoggingInit+0x30>
    }
    wc_errors_count = 0;
 80186fa:	4b08      	ldr	r3, [pc, #32]	; (801871c <wc_LoggingInit+0x38>)
 80186fc:	2200      	movs	r2, #0
 80186fe:	601a      	str	r2, [r3, #0]
    wc_errors          = NULL;
 8018700:	4b07      	ldr	r3, [pc, #28]	; (8018720 <wc_LoggingInit+0x3c>)
 8018702:	2200      	movs	r2, #0
 8018704:	601a      	str	r2, [r3, #0]
    wc_current_node    = NULL;
 8018706:	4b07      	ldr	r3, [pc, #28]	; (8018724 <wc_LoggingInit+0x40>)
 8018708:	2200      	movs	r2, #0
 801870a:	601a      	str	r2, [r3, #0]
    wc_last_node       = NULL;
 801870c:	4b06      	ldr	r3, [pc, #24]	; (8018728 <wc_LoggingInit+0x44>)
 801870e:	2200      	movs	r2, #0
 8018710:	601a      	str	r2, [r3, #0]
    return 0;
 8018712:	2300      	movs	r3, #0
}
 8018714:	4618      	mov	r0, r3
 8018716:	bd80      	pop	{r7, pc}
 8018718:	2000038c 	.word	0x2000038c
 801871c:	2000037c 	.word	0x2000037c
 8018720:	20000378 	.word	0x20000378
 8018724:	20000384 	.word	0x20000384
 8018728:	20000380 	.word	0x20000380

0801872c <wc_LoggingCleanup>:


/* internal function that is called by wolfCrypt_Cleanup */
int wc_LoggingCleanup(void)
{
 801872c:	b580      	push	{r7, lr}
 801872e:	af00      	add	r7, sp, #0
    /* clear logging entries */
    wc_ClearErrorNodes();
 8018730:	f000 f9d4 	bl	8018adc <wc_ClearErrorNodes>
    /* free mutex */
    if (ERRQ_MUTEX_FREE() != 0) {
 8018734:	4805      	ldr	r0, [pc, #20]	; (801874c <wc_LoggingCleanup+0x20>)
 8018736:	f008 fbe8 	bl	8020f0a <wc_FreeMutex>
 801873a:	4603      	mov	r3, r0
 801873c:	2b00      	cmp	r3, #0
 801873e:	d002      	beq.n	8018746 <wc_LoggingCleanup+0x1a>
        WOLFSSL_MSG("Bad Mutex free");
        return BAD_MUTEX_E;
 8018740:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8018744:	e000      	b.n	8018748 <wc_LoggingCleanup+0x1c>
    }
    return 0;
 8018746:	2300      	movs	r3, #0
}
 8018748:	4618      	mov	r0, r3
 801874a:	bd80      	pop	{r7, pc}
 801874c:	2000038c 	.word	0x2000038c

08018750 <peekErrorNode>:

static int peekErrorNode(int idx, const char **file, const char **reason,
        int *line)
{
 8018750:	b480      	push	{r7}
 8018752:	b087      	sub	sp, #28
 8018754:	af00      	add	r7, sp, #0
 8018756:	60f8      	str	r0, [r7, #12]
 8018758:	60b9      	str	r1, [r7, #8]
 801875a:	607a      	str	r2, [r7, #4]
 801875c:	603b      	str	r3, [r7, #0]
    struct wc_error_queue* err;

    if (idx < 0) {
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	2b00      	cmp	r3, #0
 8018762:	da03      	bge.n	801876c <peekErrorNode+0x1c>
        err = wc_last_node;
 8018764:	4b20      	ldr	r3, [pc, #128]	; (80187e8 <peekErrorNode+0x98>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	617b      	str	r3, [r7, #20]
 801876a:	e015      	b.n	8018798 <peekErrorNode+0x48>
    }
    else {
        int i;

        err = (struct wc_error_queue*)wc_errors;
 801876c:	4b1f      	ldr	r3, [pc, #124]	; (80187ec <peekErrorNode+0x9c>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	617b      	str	r3, [r7, #20]
        for (i = 0; i < idx; i++) {
 8018772:	2300      	movs	r3, #0
 8018774:	613b      	str	r3, [r7, #16]
 8018776:	e00b      	b.n	8018790 <peekErrorNode+0x40>
            if (err == NULL) {
 8018778:	697b      	ldr	r3, [r7, #20]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d102      	bne.n	8018784 <peekErrorNode+0x34>
                WOLFSSL_MSG("Error node not found. Bad index?");
                return BAD_FUNC_ARG;
 801877e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8018782:	e02a      	b.n	80187da <peekErrorNode+0x8a>
            }
            err = err->next;
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	617b      	str	r3, [r7, #20]
        for (i = 0; i < idx; i++) {
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	3301      	adds	r3, #1
 801878e:	613b      	str	r3, [r7, #16]
 8018790:	693a      	ldr	r2, [r7, #16]
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	429a      	cmp	r2, r3
 8018796:	dbef      	blt.n	8018778 <peekErrorNode+0x28>
        }
    }

    if (err == NULL) {
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d102      	bne.n	80187a4 <peekErrorNode+0x54>
        WOLFSSL_MSG("No Errors in queue");
        return BAD_STATE_E;
 801879e:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 80187a2:	e01a      	b.n	80187da <peekErrorNode+0x8a>
    }

    if (file != NULL) {
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d004      	beq.n	80187b4 <peekErrorNode+0x64>
        *file = err->file;
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	601a      	str	r2, [r3, #0]
    }
    if (reason != NULL) {
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d004      	beq.n	80187c4 <peekErrorNode+0x74>
        *reason = err->error;
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	f103 020c 	add.w	r2, r3, #12
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	601a      	str	r2, [r3, #0]
    }
    if (line != NULL) {
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d004      	beq.n	80187d4 <peekErrorNode+0x84>
        *line = err->line;
 80187ca:	697b      	ldr	r3, [r7, #20]
 80187cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	601a      	str	r2, [r3, #0]
    }

    return err->value;
 80187d4:	697b      	ldr	r3, [r7, #20]
 80187d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
 80187da:	4618      	mov	r0, r3
 80187dc:	371c      	adds	r7, #28
 80187de:	46bd      	mov	sp, r7
 80187e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e4:	4770      	bx	lr
 80187e6:	bf00      	nop
 80187e8:	20000380 	.word	0x20000380
 80187ec:	20000378 	.word	0x20000378

080187f0 <wc_PeekErrorNode>:
 * Returns a negative value in error case, on success returns the nodes error
 * value which is positive (absolute value)
 */
int wc_PeekErrorNode(int idx, const char **file, const char **reason,
        int *line)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b086      	sub	sp, #24
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	60f8      	str	r0, [r7, #12]
 80187f8:	60b9      	str	r1, [r7, #8]
 80187fa:	607a      	str	r2, [r7, #4]
 80187fc:	603b      	str	r3, [r7, #0]
    int ret;

    if (ERRQ_LOCK() != 0) {
 80187fe:	480c      	ldr	r0, [pc, #48]	; (8018830 <wc_PeekErrorNode+0x40>)
 8018800:	f008 fb8e 	bl	8020f20 <wc_LockMutex>
 8018804:	4603      	mov	r3, r0
 8018806:	2b00      	cmp	r3, #0
 8018808:	d002      	beq.n	8018810 <wc_PeekErrorNode+0x20>
        WOLFSSL_MSG("Lock debug mutex failed");
        return BAD_MUTEX_E;
 801880a:	f06f 0369 	mvn.w	r3, #105	; 0x69
 801880e:	e00a      	b.n	8018826 <wc_PeekErrorNode+0x36>
    }
    ret = peekErrorNode(idx, file, reason, line);
 8018810:	683b      	ldr	r3, [r7, #0]
 8018812:	687a      	ldr	r2, [r7, #4]
 8018814:	68b9      	ldr	r1, [r7, #8]
 8018816:	68f8      	ldr	r0, [r7, #12]
 8018818:	f7ff ff9a 	bl	8018750 <peekErrorNode>
 801881c:	6178      	str	r0, [r7, #20]
    ERRQ_UNLOCK();
 801881e:	4804      	ldr	r0, [pc, #16]	; (8018830 <wc_PeekErrorNode+0x40>)
 8018820:	f008 fb89 	bl	8020f36 <wc_UnLockMutex>
    return ret;
 8018824:	697b      	ldr	r3, [r7, #20]
}
 8018826:	4618      	mov	r0, r3
 8018828:	3718      	adds	r7, #24
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	2000038c 	.word	0x2000038c

08018834 <wc_AddErrorNode>:

/* create new error node and add it to the queue
 * buffers are assumed to be of size WOLFSSL_MAX_ERROR_SZ for this internal
 * function. */
int wc_AddErrorNode(int error, int line, char* buf, char* file)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b088      	sub	sp, #32
 8018838:	af00      	add	r7, sp, #0
 801883a:	60f8      	str	r0, [r7, #12]
 801883c:	60b9      	str	r1, [r7, #8]
 801883e:	607a      	str	r2, [r7, #4]
 8018840:	603b      	str	r3, [r7, #0]
    struct wc_error_queue* err;

    if (wc_errors_count >= ERROR_QUEUE_MAX) {
 8018842:	4b44      	ldr	r3, [pc, #272]	; (8018954 <wc_AddErrorNode+0x120>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	2b63      	cmp	r3, #99	; 0x63
 8018848:	dd02      	ble.n	8018850 <wc_AddErrorNode+0x1c>
        WOLFSSL_MSG("Error queue is full, at ERROR_QUEUE_MAX");
        return MEMORY_E;
 801884a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801884e:	e07d      	b.n	801894c <wc_AddErrorNode+0x118>
    }

    err = (struct wc_error_queue*)XMALLOC(
 8018850:	20b4      	movs	r0, #180	; 0xb4
 8018852:	f000 f9ab 	bl	8018bac <wolfSSL_Malloc>
 8018856:	61b8      	str	r0, [r7, #24]
            sizeof(struct wc_error_queue), wc_error_heap, DYNAMIC_TYPE_LOG);
    if (err == NULL) {
 8018858:	69bb      	ldr	r3, [r7, #24]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d102      	bne.n	8018864 <wc_AddErrorNode+0x30>
        WOLFSSL_MSG("Unable to create error node for log");
        return MEMORY_E;
 801885e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8018862:	e073      	b.n	801894c <wc_AddErrorNode+0x118>
    }
    else {
        int sz;

        XMEMSET(err, 0, sizeof(struct wc_error_queue));
 8018864:	22b4      	movs	r2, #180	; 0xb4
 8018866:	2100      	movs	r1, #0
 8018868:	69b8      	ldr	r0, [r7, #24]
 801886a:	f008 fd63 	bl	8021334 <memset>
        err->heap = wc_error_heap;
 801886e:	4b3a      	ldr	r3, [pc, #232]	; (8018958 <wc_AddErrorNode+0x124>)
 8018870:	681a      	ldr	r2, [r3, #0]
 8018872:	69bb      	ldr	r3, [r7, #24]
 8018874:	601a      	str	r2, [r3, #0]
        sz = (int)XSTRLEN(buf);
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f7e7 fcc4 	bl	8000204 <strlen>
 801887c:	4603      	mov	r3, r0
 801887e:	61fb      	str	r3, [r7, #28]
        if (sz > WOLFSSL_MAX_ERROR_SZ - 1) {
 8018880:	69fb      	ldr	r3, [r7, #28]
 8018882:	2b4f      	cmp	r3, #79	; 0x4f
 8018884:	dd01      	ble.n	801888a <wc_AddErrorNode+0x56>
            sz = WOLFSSL_MAX_ERROR_SZ - 1;
 8018886:	234f      	movs	r3, #79	; 0x4f
 8018888:	61fb      	str	r3, [r7, #28]
        }
        if (sz > 0) {
 801888a:	69fb      	ldr	r3, [r7, #28]
 801888c:	2b00      	cmp	r3, #0
 801888e:	dd06      	ble.n	801889e <wc_AddErrorNode+0x6a>
            XMEMCPY(err->error, buf, sz);
 8018890:	69bb      	ldr	r3, [r7, #24]
 8018892:	330c      	adds	r3, #12
 8018894:	69fa      	ldr	r2, [r7, #28]
 8018896:	6879      	ldr	r1, [r7, #4]
 8018898:	4618      	mov	r0, r3
 801889a:	f008 fd23 	bl	80212e4 <memcpy>
        }

        sz = (int)XSTRLEN(file);
 801889e:	6838      	ldr	r0, [r7, #0]
 80188a0:	f7e7 fcb0 	bl	8000204 <strlen>
 80188a4:	4603      	mov	r3, r0
 80188a6:	61fb      	str	r3, [r7, #28]
        if (sz > WOLFSSL_MAX_ERROR_SZ - 1) {
 80188a8:	69fb      	ldr	r3, [r7, #28]
 80188aa:	2b4f      	cmp	r3, #79	; 0x4f
 80188ac:	dd01      	ble.n	80188b2 <wc_AddErrorNode+0x7e>
            sz = WOLFSSL_MAX_ERROR_SZ - 1;
 80188ae:	234f      	movs	r3, #79	; 0x4f
 80188b0:	61fb      	str	r3, [r7, #28]
        }
        if (sz > 0) {
 80188b2:	69fb      	ldr	r3, [r7, #28]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	dd06      	ble.n	80188c6 <wc_AddErrorNode+0x92>
            XMEMCPY(err->file, file, sz);
 80188b8:	69bb      	ldr	r3, [r7, #24]
 80188ba:	335c      	adds	r3, #92	; 0x5c
 80188bc:	69fa      	ldr	r2, [r7, #28]
 80188be:	6839      	ldr	r1, [r7, #0]
 80188c0:	4618      	mov	r0, r3
 80188c2:	f008 fd0f 	bl	80212e4 <memcpy>
        }

        err->value = error;
 80188c6:	69bb      	ldr	r3, [r7, #24]
 80188c8:	68fa      	ldr	r2, [r7, #12]
 80188ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        err->line  = line;
 80188ce:	69bb      	ldr	r3, [r7, #24]
 80188d0:	68ba      	ldr	r2, [r7, #8]
 80188d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* make sure is terminated */
        err->error[WOLFSSL_MAX_ERROR_SZ - 1] = '\0';
 80188d6:	69bb      	ldr	r3, [r7, #24]
 80188d8:	2200      	movs	r2, #0
 80188da:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        err->file[WOLFSSL_MAX_ERROR_SZ - 1]  = '\0';
 80188de:	69bb      	ldr	r3, [r7, #24]
 80188e0:	2200      	movs	r2, #0
 80188e2:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab


        /* since is queue place new node at last of the list */
        if (wc_last_node == NULL) {
 80188e6:	4b1d      	ldr	r3, [pc, #116]	; (801895c <wc_AddErrorNode+0x128>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d116      	bne.n	801891c <wc_AddErrorNode+0xe8>
            /* case of first node added to queue */
            if (wc_errors != NULL) {
 80188ee:	4b1c      	ldr	r3, [pc, #112]	; (8018960 <wc_AddErrorNode+0x12c>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d008      	beq.n	8018908 <wc_AddErrorNode+0xd4>
                WOLFSSL_MSG("ERROR in adding new node to logging queue!!");
                /* In the event both wc_last_node and wc_errors are NULL, err
                 * goes unassigned to external wc_errors, wc_last_node. Free
                 * err in this instance since wc_ClearErrorNodes will not
                 */
                XFREE(err, wc_error_heap, DYNAMIC_TYPE_LOG);
 80188f6:	69bb      	ldr	r3, [r7, #24]
 80188f8:	617b      	str	r3, [r7, #20]
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d01f      	beq.n	8018940 <wc_AddErrorNode+0x10c>
 8018900:	6978      	ldr	r0, [r7, #20]
 8018902:	f000 f96f 	bl	8018be4 <wolfSSL_Free>
 8018906:	e01b      	b.n	8018940 <wc_AddErrorNode+0x10c>
            }
            else {
                wc_errors    = err;
 8018908:	4a15      	ldr	r2, [pc, #84]	; (8018960 <wc_AddErrorNode+0x12c>)
 801890a:	69bb      	ldr	r3, [r7, #24]
 801890c:	6013      	str	r3, [r2, #0]
                wc_last_node = err;
 801890e:	4a13      	ldr	r2, [pc, #76]	; (801895c <wc_AddErrorNode+0x128>)
 8018910:	69bb      	ldr	r3, [r7, #24]
 8018912:	6013      	str	r3, [r2, #0]
                wc_current_node = err;
 8018914:	4a13      	ldr	r2, [pc, #76]	; (8018964 <wc_AddErrorNode+0x130>)
 8018916:	69bb      	ldr	r3, [r7, #24]
 8018918:	6013      	str	r3, [r2, #0]
 801891a:	e011      	b.n	8018940 <wc_AddErrorNode+0x10c>
            }
        }
        else {
            wc_last_node->next = err;
 801891c:	4b0f      	ldr	r3, [pc, #60]	; (801895c <wc_AddErrorNode+0x128>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	69ba      	ldr	r2, [r7, #24]
 8018922:	605a      	str	r2, [r3, #4]
            err->prev = wc_last_node;
 8018924:	4b0d      	ldr	r3, [pc, #52]	; (801895c <wc_AddErrorNode+0x128>)
 8018926:	681a      	ldr	r2, [r3, #0]
 8018928:	69bb      	ldr	r3, [r7, #24]
 801892a:	609a      	str	r2, [r3, #8]
            wc_last_node = err;
 801892c:	4a0b      	ldr	r2, [pc, #44]	; (801895c <wc_AddErrorNode+0x128>)
 801892e:	69bb      	ldr	r3, [r7, #24]
 8018930:	6013      	str	r3, [r2, #0]

            /* check the case where have read to the end of the queue and the
             * current node to read needs updated */
            if (wc_current_node == NULL) {
 8018932:	4b0c      	ldr	r3, [pc, #48]	; (8018964 <wc_AddErrorNode+0x130>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d102      	bne.n	8018940 <wc_AddErrorNode+0x10c>
                wc_current_node = err;
 801893a:	4a0a      	ldr	r2, [pc, #40]	; (8018964 <wc_AddErrorNode+0x130>)
 801893c:	69bb      	ldr	r3, [r7, #24]
 801893e:	6013      	str	r3, [r2, #0]
            }
        }
        wc_errors_count++;
 8018940:	4b04      	ldr	r3, [pc, #16]	; (8018954 <wc_AddErrorNode+0x120>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	3301      	adds	r3, #1
 8018946:	4a03      	ldr	r2, [pc, #12]	; (8018954 <wc_AddErrorNode+0x120>)
 8018948:	6013      	str	r3, [r2, #0]
    }
    return 0;
 801894a:	2300      	movs	r3, #0
}
 801894c:	4618      	mov	r0, r3
 801894e:	3720      	adds	r7, #32
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	2000037c 	.word	0x2000037c
 8018958:	20000388 	.word	0x20000388
 801895c:	20000380 	.word	0x20000380
 8018960:	20000378 	.word	0x20000378
 8018964:	20000384 	.word	0x20000384

08018968 <removeErrorNode>:
    }
    return ret;
}

static void removeErrorNode(int idx)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
    struct wc_error_queue* current;

    if (idx == -1) {
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018976:	d103      	bne.n	8018980 <removeErrorNode+0x18>
        current = wc_last_node;
 8018978:	4b30      	ldr	r3, [pc, #192]	; (8018a3c <removeErrorNode+0xd4>)
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	60fb      	str	r3, [r7, #12]
 801897e:	e00f      	b.n	80189a0 <removeErrorNode+0x38>
    }
    else {
        current = (struct wc_error_queue*)wc_errors;
 8018980:	4b2f      	ldr	r3, [pc, #188]	; (8018a40 <removeErrorNode+0xd8>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	60fb      	str	r3, [r7, #12]
        for (; current != NULL && idx > 0; idx--)
 8018986:	e005      	b.n	8018994 <removeErrorNode+0x2c>
             current = current->next;
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	685b      	ldr	r3, [r3, #4]
 801898c:	60fb      	str	r3, [r7, #12]
        for (; current != NULL && idx > 0; idx--)
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	3b01      	subs	r3, #1
 8018992:	607b      	str	r3, [r7, #4]
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d002      	beq.n	80189a0 <removeErrorNode+0x38>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2b00      	cmp	r3, #0
 801899e:	dcf3      	bgt.n	8018988 <removeErrorNode+0x20>
    }
    if (current != NULL) {
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d046      	beq.n	8018a34 <removeErrorNode+0xcc>
        if (current->prev != NULL)
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	689b      	ldr	r3, [r3, #8]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d004      	beq.n	80189b8 <removeErrorNode+0x50>
            current->prev->next = current->next;
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	689b      	ldr	r3, [r3, #8]
 80189b2:	68fa      	ldr	r2, [r7, #12]
 80189b4:	6852      	ldr	r2, [r2, #4]
 80189b6:	605a      	str	r2, [r3, #4]
        if (current->next != NULL)
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	685b      	ldr	r3, [r3, #4]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d004      	beq.n	80189ca <removeErrorNode+0x62>
            current->next->prev = current->prev;
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	685b      	ldr	r3, [r3, #4]
 80189c4:	68fa      	ldr	r2, [r7, #12]
 80189c6:	6892      	ldr	r2, [r2, #8]
 80189c8:	609a      	str	r2, [r3, #8]
        if (wc_last_node == current)
 80189ca:	4b1c      	ldr	r3, [pc, #112]	; (8018a3c <removeErrorNode+0xd4>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	68fa      	ldr	r2, [r7, #12]
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d103      	bne.n	80189dc <removeErrorNode+0x74>
            wc_last_node = current->prev;
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	689b      	ldr	r3, [r3, #8]
 80189d8:	4a18      	ldr	r2, [pc, #96]	; (8018a3c <removeErrorNode+0xd4>)
 80189da:	6013      	str	r3, [r2, #0]
        if (wc_errors == current)
 80189dc:	4b18      	ldr	r3, [pc, #96]	; (8018a40 <removeErrorNode+0xd8>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	68fa      	ldr	r2, [r7, #12]
 80189e2:	429a      	cmp	r2, r3
 80189e4:	d103      	bne.n	80189ee <removeErrorNode+0x86>
            wc_errors = current->next;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	685b      	ldr	r3, [r3, #4]
 80189ea:	4a15      	ldr	r2, [pc, #84]	; (8018a40 <removeErrorNode+0xd8>)
 80189ec:	6013      	str	r3, [r2, #0]
        if (wc_current_node == current)
 80189ee:	4b15      	ldr	r3, [pc, #84]	; (8018a44 <removeErrorNode+0xdc>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	68fa      	ldr	r2, [r7, #12]
 80189f4:	429a      	cmp	r2, r3
 80189f6:	d103      	bne.n	8018a00 <removeErrorNode+0x98>
            wc_current_node = current->next;
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	4a11      	ldr	r2, [pc, #68]	; (8018a44 <removeErrorNode+0xdc>)
 80189fe:	6013      	str	r3, [r2, #0]
        XFREE(current, current->heap, DYNAMIC_TYPE_LOG);
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	60bb      	str	r3, [r7, #8]
 8018a04:	68bb      	ldr	r3, [r7, #8]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d002      	beq.n	8018a10 <removeErrorNode+0xa8>
 8018a0a:	68b8      	ldr	r0, [r7, #8]
 8018a0c:	f000 f8ea 	bl	8018be4 <wolfSSL_Free>
        wc_errors_count--;
 8018a10:	4b0d      	ldr	r3, [pc, #52]	; (8018a48 <removeErrorNode+0xe0>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	3b01      	subs	r3, #1
 8018a16:	4a0c      	ldr	r2, [pc, #48]	; (8018a48 <removeErrorNode+0xe0>)
 8018a18:	6013      	str	r3, [r2, #0]

        /* last node left in list was free'd, reset list head */
        if (wc_errors_count == 0) {
 8018a1a:	4b0b      	ldr	r3, [pc, #44]	; (8018a48 <removeErrorNode+0xe0>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d108      	bne.n	8018a34 <removeErrorNode+0xcc>
            wc_errors       = NULL;
 8018a22:	4b07      	ldr	r3, [pc, #28]	; (8018a40 <removeErrorNode+0xd8>)
 8018a24:	2200      	movs	r2, #0
 8018a26:	601a      	str	r2, [r3, #0]
            wc_last_node    = NULL;
 8018a28:	4b04      	ldr	r3, [pc, #16]	; (8018a3c <removeErrorNode+0xd4>)
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	601a      	str	r2, [r3, #0]
            wc_current_node = NULL;
 8018a2e:	4b05      	ldr	r3, [pc, #20]	; (8018a44 <removeErrorNode+0xdc>)
 8018a30:	2200      	movs	r2, #0
 8018a32:	601a      	str	r2, [r3, #0]
        }
    }
}
 8018a34:	bf00      	nop
 8018a36:	3710      	adds	r7, #16
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}
 8018a3c:	20000380 	.word	0x20000380
 8018a40:	20000378 	.word	0x20000378
 8018a44:	20000384 	.word	0x20000384
 8018a48:	2000037c 	.word	0x2000037c

08018a4c <wc_RemoveErrorNode>:
 * idx : if -1 then the most recent node is looked at,
 *       otherwise search through queue for node at the given index starting
 *          from the absolute head wc_errors
 */
void wc_RemoveErrorNode(int idx)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
    if (ERRQ_LOCK() != 0) {
 8018a54:	4808      	ldr	r0, [pc, #32]	; (8018a78 <wc_RemoveErrorNode+0x2c>)
 8018a56:	f008 fa63 	bl	8020f20 <wc_LockMutex>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d106      	bne.n	8018a6e <wc_RemoveErrorNode+0x22>
        WOLFSSL_MSG("Lock debug mutex failed");
        return;
    }

    removeErrorNode(idx);
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f7ff ff81 	bl	8018968 <removeErrorNode>

    ERRQ_UNLOCK();
 8018a66:	4804      	ldr	r0, [pc, #16]	; (8018a78 <wc_RemoveErrorNode+0x2c>)
 8018a68:	f008 fa65 	bl	8020f36 <wc_UnLockMutex>
 8018a6c:	e000      	b.n	8018a70 <wc_RemoveErrorNode+0x24>
        return;
 8018a6e:	bf00      	nop
}
 8018a70:	3708      	adds	r7, #8
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}
 8018a76:	bf00      	nop
 8018a78:	2000038c 	.word	0x2000038c

08018a7c <clearErrorNodes>:

static void clearErrorNodes(void)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b084      	sub	sp, #16
 8018a80:	af00      	add	r7, sp, #0
    struct wc_error_queue* current;
    struct wc_error_queue* next;
    /* free all nodes from error queue (even previously 'pulled' ones) starting
     * at the lists absolute head of wc_errors */

    current = (struct wc_error_queue*)wc_errors;
 8018a82:	4b12      	ldr	r3, [pc, #72]	; (8018acc <clearErrorNodes+0x50>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	60fb      	str	r3, [r7, #12]
    while (current != NULL) {
 8018a88:	e00c      	b.n	8018aa4 <clearErrorNodes+0x28>
        next = current->next;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	60bb      	str	r3, [r7, #8]
        XFREE(current, current->heap, DYNAMIC_TYPE_LOG);
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	607b      	str	r3, [r7, #4]
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d002      	beq.n	8018aa0 <clearErrorNodes+0x24>
 8018a9a:	6878      	ldr	r0, [r7, #4]
 8018a9c:	f000 f8a2 	bl	8018be4 <wolfSSL_Free>
        current = next;
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	60fb      	str	r3, [r7, #12]
    while (current != NULL) {
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d1ef      	bne.n	8018a8a <clearErrorNodes+0xe>
    }

    wc_errors_count = 0;
 8018aaa:	4b09      	ldr	r3, [pc, #36]	; (8018ad0 <clearErrorNodes+0x54>)
 8018aac:	2200      	movs	r2, #0
 8018aae:	601a      	str	r2, [r3, #0]
    wc_errors       = NULL;
 8018ab0:	4b06      	ldr	r3, [pc, #24]	; (8018acc <clearErrorNodes+0x50>)
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	601a      	str	r2, [r3, #0]
    wc_last_node    = NULL;
 8018ab6:	4b07      	ldr	r3, [pc, #28]	; (8018ad4 <clearErrorNodes+0x58>)
 8018ab8:	2200      	movs	r2, #0
 8018aba:	601a      	str	r2, [r3, #0]
    wc_current_node = NULL;
 8018abc:	4b06      	ldr	r3, [pc, #24]	; (8018ad8 <clearErrorNodes+0x5c>)
 8018abe:	2200      	movs	r2, #0
 8018ac0:	601a      	str	r2, [r3, #0]
}
 8018ac2:	bf00      	nop
 8018ac4:	3710      	adds	r7, #16
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}
 8018aca:	bf00      	nop
 8018acc:	20000378 	.word	0x20000378
 8018ad0:	2000037c 	.word	0x2000037c
 8018ad4:	20000380 	.word	0x20000380
 8018ad8:	20000384 	.word	0x20000384

08018adc <wc_ClearErrorNodes>:

/* Clears out the list of error nodes.
 */
void wc_ClearErrorNodes(void)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	af00      	add	r7, sp, #0
    if (ERRQ_LOCK() != 0) {
 8018ae0:	4806      	ldr	r0, [pc, #24]	; (8018afc <wc_ClearErrorNodes+0x20>)
 8018ae2:	f008 fa1d 	bl	8020f20 <wc_LockMutex>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d105      	bne.n	8018af8 <wc_ClearErrorNodes+0x1c>
        WOLFSSL_MSG("Lock debug mutex failed");
        return;
    }

    clearErrorNodes();
 8018aec:	f7ff ffc6 	bl	8018a7c <clearErrorNodes>

    ERRQ_UNLOCK();
 8018af0:	4802      	ldr	r0, [pc, #8]	; (8018afc <wc_ClearErrorNodes+0x20>)
 8018af2:	f008 fa20 	bl	8020f36 <wc_UnLockMutex>
 8018af6:	e000      	b.n	8018afa <wc_ClearErrorNodes+0x1e>
        return;
 8018af8:	bf00      	nop
}
 8018afa:	bd80      	pop	{r7, pc}
 8018afc:	2000038c 	.word	0x2000038c

08018b00 <WOLFSSL_ERROR_LINE>:
void WOLFSSL_ERROR_LINE(int error, const char* func, unsigned int line,
        const char* file, void* usrCtx)
#else
void WOLFSSL_ERROR(int error)
#endif
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b09a      	sub	sp, #104	; 0x68
 8018b04:	af02      	add	r7, sp, #8
 8018b06:	60f8      	str	r0, [r7, #12]
 8018b08:	60b9      	str	r1, [r7, #8]
 8018b0a:	607a      	str	r2, [r7, #4]
 8018b0c:	603b      	str	r3, [r7, #0]

    #ifdef WOLFSSL_HAVE_ERROR_QUEUE
        (void)usrCtx; /* a user ctx for future flexibility */
        (void)func;

        if (ERRQ_LOCK() != 0) {
 8018b0e:	481f      	ldr	r0, [pc, #124]	; (8018b8c <WOLFSSL_ERROR_LINE+0x8c>)
 8018b10:	f008 fa06 	bl	8020f20 <wc_LockMutex>
 8018b14:	4603      	mov	r3, r0
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d007      	beq.n	8018b2a <WOLFSSL_ERROR_LINE+0x2a>
            WOLFSSL_MSG("Lock debug mutex failed");
            (void)XSNPRINTF(buffer, sizeof(buffer),
 8018b1a:	f107 0010 	add.w	r0, r7, #16
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	4a1b      	ldr	r2, [pc, #108]	; (8018b90 <WOLFSSL_ERROR_LINE+0x90>)
 8018b22:	2150      	movs	r1, #80	; 0x50
 8018b24:	f008 fd8c 	bl	8021640 <sniprintf>
    #ifdef DEBUG_WOLFSSL
        if (loggingEnabled)
            wolfssl_log(ERROR_LOG , buffer);
    #endif
    }
}
 8018b28:	e02c      	b.n	8018b84 <WOLFSSL_ERROR_LINE+0x84>
            if (error != WANT_READ && error != WANT_WRITE) {
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	f46f 72a1 	mvn.w	r2, #322	; 0x142
 8018b30:	4293      	cmp	r3, r2
 8018b32:	d01d      	beq.n	8018b70 <WOLFSSL_ERROR_LINE+0x70>
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	f46f 72a3 	mvn.w	r2, #326	; 0x146
 8018b3a:	4293      	cmp	r3, r2
 8018b3c:	d018      	beq.n	8018b70 <WOLFSSL_ERROR_LINE+0x70>
            if (error < 0)
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	da02      	bge.n	8018b4a <WOLFSSL_ERROR_LINE+0x4a>
                error = error - (2 * error); /* get absolute value */
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	425b      	negs	r3, r3
 8018b48:	60fb      	str	r3, [r7, #12]
            (void)XSNPRINTF(buffer, sizeof(buffer),
 8018b4a:	f107 0010 	add.w	r0, r7, #16
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	9301      	str	r3, [sp, #4]
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	9300      	str	r3, [sp, #0]
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	4a0e      	ldr	r2, [pc, #56]	; (8018b94 <WOLFSSL_ERROR_LINE+0x94>)
 8018b5a:	2150      	movs	r1, #80	; 0x50
 8018b5c:	f008 fd70 	bl	8021640 <sniprintf>
            if (wc_AddErrorNode(error, line, buffer, (char*)file) != 0) {
 8018b60:	6879      	ldr	r1, [r7, #4]
 8018b62:	f107 0210 	add.w	r2, r7, #16
 8018b66:	683b      	ldr	r3, [r7, #0]
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	f7ff fe63 	bl	8018834 <wc_AddErrorNode>
 8018b6e:	e006      	b.n	8018b7e <WOLFSSL_ERROR_LINE+0x7e>
                (void)XSNPRINTF(buffer, sizeof(buffer),
 8018b70:	f107 0010 	add.w	r0, r7, #16
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	4a06      	ldr	r2, [pc, #24]	; (8018b90 <WOLFSSL_ERROR_LINE+0x90>)
 8018b78:	2150      	movs	r1, #80	; 0x50
 8018b7a:	f008 fd61 	bl	8021640 <sniprintf>
            ERRQ_UNLOCK();
 8018b7e:	4803      	ldr	r0, [pc, #12]	; (8018b8c <WOLFSSL_ERROR_LINE+0x8c>)
 8018b80:	f008 f9d9 	bl	8020f36 <wc_UnLockMutex>
}
 8018b84:	bf00      	nop
 8018b86:	3760      	adds	r7, #96	; 0x60
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	2000038c 	.word	0x2000038c
 8018b90:	08029430 	.word	0x08029430
 8018b94:	08029454 	.word	0x08029454

08018b98 <WOLFSSL_ERROR_MSG>:

void WOLFSSL_ERROR_MSG(const char* msg)
{
 8018b98:	b480      	push	{r7}
 8018b9a:	b083      	sub	sp, #12
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
    if (loggingEnabled)
        wolfssl_log(ERROR_LOG , msg);
#else
    (void)msg;
#endif
}
 8018ba0:	bf00      	nop
 8018ba2:	370c      	adds	r7, #12
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018baa:	4770      	bx	lr

08018bac <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b084      	sub	sp, #16
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
    void* res = 0;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	60fb      	str	r3, [r7, #12]
#ifdef WOLFSSL_CHECK_MEM_ZERO
    /* Space for requested size. */
    size += MEM_ALIGN;
#endif

    if (malloc_function) {
 8018bb8:	4b09      	ldr	r3, [pc, #36]	; (8018be0 <wolfSSL_Malloc+0x34>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d005      	beq.n	8018bcc <wolfSSL_Malloc+0x20>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
 8018bc0:	4b07      	ldr	r3, [pc, #28]	; (8018be0 <wolfSSL_Malloc+0x34>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	6878      	ldr	r0, [r7, #4]
 8018bc6:	4798      	blx	r3
 8018bc8:	60f8      	str	r0, [r7, #12]
 8018bca:	e004      	b.n	8018bd6 <wolfSSL_Malloc+0x2a>
            WOLFSSL_MSG("Malloc too big!");
            return NULL;
        }
        #endif

        res = malloc(size);
 8018bcc:	6878      	ldr	r0, [r7, #4]
 8018bce:	f008 fb69 	bl	80212a4 <malloc>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	60fb      	str	r3, [r7, #12]
        gMemFailCount = gMemFailCountSeed; /* reset */
        return NULL;
    }
#endif

    return res;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3710      	adds	r7, #16
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}
 8018be0:	20000390 	.word	0x20000390

08018be4 <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b082      	sub	sp, #8
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
    ptr = ((unsigned char*)ptr) - MEM_ALIGN;
    /* Check that the pointer is zero where required. */
    wc_MemZero_Check(((unsigned char*)ptr) + MEM_ALIGN, *(size_t*)ptr);
#endif

    if (free_function) {
 8018bec:	4b07      	ldr	r3, [pc, #28]	; (8018c0c <wolfSSL_Free+0x28>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d004      	beq.n	8018bfe <wolfSSL_Free+0x1a>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
 8018bf4:	4b05      	ldr	r3, [pc, #20]	; (8018c0c <wolfSSL_Free+0x28>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	6878      	ldr	r0, [r7, #4]
 8018bfa:	4798      	blx	r3
        free(ptr);
    #else
        WOLFSSL_MSG("No free available");
    #endif
    }
}
 8018bfc:	e002      	b.n	8018c04 <wolfSSL_Free+0x20>
        free(ptr);
 8018bfe:	6878      	ldr	r0, [r7, #4]
 8018c00:	f008 fb58 	bl	80212b4 <free>
}
 8018c04:	bf00      	nop
 8018c06:	3708      	adds	r7, #8
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}
 8018c0c:	20000394 	.word	0x20000394

08018c10 <rotlFixed>:
    {
 8018c10:	b480      	push	{r7}
 8018c12:	b083      	sub	sp, #12
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
 8018c18:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 8018c1a:	687a      	ldr	r2, [r7, #4]
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	f1c3 0320 	rsb	r3, r3, #32
 8018c22:	fa62 f303 	ror.w	r3, r2, r3
    }
 8018c26:	4618      	mov	r0, r3
 8018c28:	370c      	adds	r7, #12
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c30:	4770      	bx	lr

08018c32 <ByteReverseWord32>:
{
 8018c32:	b580      	push	{r7, lr}
 8018c34:	b082      	sub	sp, #8
 8018c36:	af00      	add	r7, sp, #0
 8018c38:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	0a1b      	lsrs	r3, r3, #8
 8018c3e:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	021b      	lsls	r3, r3, #8
 8018c46:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8018c4a:	4313      	orrs	r3, r2
 8018c4c:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 8018c4e:	2110      	movs	r1, #16
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f7ff ffdd 	bl	8018c10 <rotlFixed>
 8018c56:	4603      	mov	r3, r0
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3708      	adds	r7, #8
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <ForceZero>:
{
 8018c60:	b480      	push	{r7}
 8018c62:	b085      	sub	sp, #20
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 8018c6e:	e004      	b.n	8018c7a <ForceZero+0x1a>
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	1c5a      	adds	r2, r3, #1
 8018c74:	60fa      	str	r2, [r7, #12]
 8018c76:	2200      	movs	r2, #0
 8018c78:	701a      	strb	r2, [r3, #0]
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	1e5a      	subs	r2, r3, #1
 8018c7e:	603a      	str	r2, [r7, #0]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d1f5      	bne.n	8018c70 <ForceZero+0x10>
}
 8018c84:	bf00      	nop
 8018c86:	bf00      	nop
 8018c88:	3714      	adds	r7, #20
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c90:	4770      	bx	lr

08018c92 <ConstantCompare>:
{
 8018c92:	b480      	push	{r7}
 8018c94:	b087      	sub	sp, #28
 8018c96:	af00      	add	r7, sp, #0
 8018c98:	60f8      	str	r0, [r7, #12]
 8018c9a:	60b9      	str	r1, [r7, #8]
 8018c9c:	607a      	str	r2, [r7, #4]
    int compareSum = 0;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	617b      	str	r3, [r7, #20]
 8018ca6:	e010      	b.n	8018cca <ConstantCompare+0x38>
        compareSum |= a[i] ^ b[i];
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	68fa      	ldr	r2, [r7, #12]
 8018cac:	4413      	add	r3, r2
 8018cae:	781a      	ldrb	r2, [r3, #0]
 8018cb0:	697b      	ldr	r3, [r7, #20]
 8018cb2:	68b9      	ldr	r1, [r7, #8]
 8018cb4:	440b      	add	r3, r1
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	4053      	eors	r3, r2
 8018cba:	b2db      	uxtb	r3, r3
 8018cbc:	461a      	mov	r2, r3
 8018cbe:	693b      	ldr	r3, [r7, #16]
 8018cc0:	4313      	orrs	r3, r2
 8018cc2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 8018cc4:	697b      	ldr	r3, [r7, #20]
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	617b      	str	r3, [r7, #20]
 8018cca:	697a      	ldr	r2, [r7, #20]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	dbea      	blt.n	8018ca8 <ConstantCompare+0x16>
    return compareSum;
 8018cd2:	693b      	ldr	r3, [r7, #16]
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	371c      	adds	r7, #28
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cde:	4770      	bx	lr

08018ce0 <min>:
    {
 8018ce0:	b480      	push	{r7}
 8018ce2:	b083      	sub	sp, #12
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	6078      	str	r0, [r7, #4]
 8018ce8:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 8018cea:	687a      	ldr	r2, [r7, #4]
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	4293      	cmp	r3, r2
 8018cf0:	bf28      	it	cs
 8018cf2:	4613      	movcs	r3, r2
    }
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	370c      	adds	r7, #12
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfe:	4770      	bx	lr

08018d00 <Hash_df>:
/* Hash Derivation Function */
/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_df(DRBG_internal* drbg, byte* out, word32 outSz, byte type,
                                                  const byte* inA, word32 inASz,
                                                  const byte* inB, word32 inBSz)
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b0a8      	sub	sp, #160	; 0xa0
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	60f8      	str	r0, [r7, #12]
 8018d08:	60b9      	str	r1, [r7, #8]
 8018d0a:	607a      	str	r2, [r7, #4]
 8018d0c:	70fb      	strb	r3, [r7, #3]
    int ret = DRBG_FAILURE;
 8018d0e:	2301      	movs	r3, #1
 8018d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    byte ctr;
    int i;
    int len;
    word32 bits = (outSz * 8); /* reverse byte order */
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	00db      	lsls	r3, r3, #3
 8018d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    byte* digest;
#else
    byte digest[WC_SHA256_DIGEST_SIZE];
#endif

    if (drbg == NULL) {
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d101      	bne.n	8018d26 <Hash_df+0x26>
        return DRBG_FAILURE;
 8018d22:	2301      	movs	r3, #1
 8018d24:	e0d8      	b.n	8018ed8 <Hash_df+0x1d8>
    }

#ifdef WOLFSSL_SMALL_STACK
    digest = (byte*)XMALLOC(WC_SHA256_DIGEST_SIZE, drbg->heap,
 8018d26:	2020      	movs	r0, #32
 8018d28:	f7ff ff40 	bl	8018bac <wolfSSL_Malloc>
 8018d2c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        DYNAMIC_TYPE_DIGEST);
    if (digest == NULL)
 8018d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d101      	bne.n	8018d3c <Hash_df+0x3c>
        return DRBG_FAILURE;
 8018d38:	2301      	movs	r3, #1
 8018d3a:	e0cd      	b.n	8018ed8 <Hash_df+0x1d8>
#endif

#ifdef LITTLE_ENDIAN_ORDER
    bits = ByteReverseWord32(bits);
 8018d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7ff ff76 	bl	8018c32 <ByteReverseWord32>
 8018d46:	4603      	mov	r3, r0
 8018d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
    len = (outSz / OUTPUT_BLOCK_LEN)
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	095b      	lsrs	r3, r3, #5
        + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
 8018d50:	687a      	ldr	r2, [r7, #4]
 8018d52:	f002 021f 	and.w	r2, r2, #31
 8018d56:	2a00      	cmp	r2, #0
 8018d58:	d001      	beq.n	8018d5e <Hash_df+0x5e>
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	e000      	b.n	8018d60 <Hash_df+0x60>
 8018d5e:	2200      	movs	r2, #0
 8018d60:	4413      	add	r3, r2
    len = (outSz / OUTPUT_BLOCK_LEN)
 8018d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    ctr = 1;
 8018d66:	2301      	movs	r3, #1
 8018d68:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    for (i = 0; i < len; i++) {
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018d72:	e090      	b.n	8018e96 <Hash_df+0x196>
#ifndef WOLFSSL_SMALL_STACK_CACHE
    #if defined(WOLFSSL_ASYNC_CRYPT) || defined(WOLF_CRYPTO_CB)
        ret = wc_InitSha256_ex(sha, drbg->heap, drbg->devId);
    #else
        ret = wc_InitSha256(sha);
 8018d74:	f107 0314 	add.w	r3, r7, #20
 8018d78:	4618      	mov	r0, r3
 8018d7a:	f003 f8c5 	bl	801bf08 <wc_InitSha256>
 8018d7e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    #endif
        if (ret != 0)
 8018d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	f040 808d 	bne.w	8018ea6 <Hash_df+0x1a6>
            break;
#endif
        ret = wc_Sha256Update(sha, &ctr, sizeof(ctr));
 8018d8c:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 8018d90:	f107 0314 	add.w	r3, r7, #20
 8018d94:	2201      	movs	r2, #1
 8018d96:	4618      	mov	r0, r3
 8018d98:	f002 ffef 	bl	801bd7a <wc_Sha256Update>
 8018d9c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret == 0) {
 8018da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d10f      	bne.n	8018dc8 <Hash_df+0xc8>
            ctr++;
 8018da8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8018dac:	3301      	adds	r3, #1
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            ret = wc_Sha256Update(sha, (byte*)&bits, sizeof(bits));
 8018db4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8018db8:	f107 0314 	add.w	r3, r7, #20
 8018dbc:	2204      	movs	r2, #4
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f002 ffdb 	bl	801bd7a <wc_Sha256Update>
 8018dc4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        }

        if (ret == 0) {
 8018dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d10b      	bne.n	8018de8 <Hash_df+0xe8>
            /* churning V is the only string that doesn't have the type added */
            if (type != drbgInitV)
 8018dd0:	78fb      	ldrb	r3, [r7, #3]
 8018dd2:	2b04      	cmp	r3, #4
 8018dd4:	d008      	beq.n	8018de8 <Hash_df+0xe8>
                ret = wc_Sha256Update(sha, &type, sizeof(type));
 8018dd6:	1cf9      	adds	r1, r7, #3
 8018dd8:	f107 0314 	add.w	r3, r7, #20
 8018ddc:	2201      	movs	r2, #1
 8018dde:	4618      	mov	r0, r3
 8018de0:	f002 ffcb 	bl	801bd7a <wc_Sha256Update>
 8018de4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        }
        if (ret == 0)
 8018de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d10a      	bne.n	8018e06 <Hash_df+0x106>
            ret = wc_Sha256Update(sha, inA, inASz);
 8018df0:	f107 0314 	add.w	r3, r7, #20
 8018df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018df8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	f002 ffbc 	bl	801bd7a <wc_Sha256Update>
 8018e02:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret == 0) {
 8018e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d112      	bne.n	8018e34 <Hash_df+0x134>
            if (inB != NULL && inBSz > 0)
 8018e0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d00e      	beq.n	8018e34 <Hash_df+0x134>
 8018e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d00a      	beq.n	8018e34 <Hash_df+0x134>
                ret = wc_Sha256Update(sha, inB, inBSz);
 8018e1e:	f107 0314 	add.w	r3, r7, #20
 8018e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018e26:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f002 ffa5 	bl	801bd7a <wc_Sha256Update>
 8018e30:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        }
        if (ret == 0)
 8018e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d108      	bne.n	8018e4e <Hash_df+0x14e>
            ret = wc_Sha256Final(sha, digest);
 8018e3c:	f107 0314 	add.w	r3, r7, #20
 8018e40:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8018e44:	4618      	mov	r0, r3
 8018e46:	f003 f834 	bl	801beb2 <wc_Sha256Final>
 8018e4a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

#ifndef WOLFSSL_SMALL_STACK_CACHE
        wc_Sha256Free(sha);
 8018e4e:	f107 0314 	add.w	r3, r7, #20
 8018e52:	4618      	mov	r0, r3
 8018e54:	f003 f869 	bl	801bf2a <wc_Sha256Free>
#endif
        if (ret == 0) {
 8018e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d115      	bne.n	8018e8c <Hash_df+0x18c>
            if (outSz > OUTPUT_BLOCK_LEN) {
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	2b20      	cmp	r3, #32
 8018e64:	d90c      	bls.n	8018e80 <Hash_df+0x180>
                XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
 8018e66:	2220      	movs	r2, #32
 8018e68:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8018e6c:	68b8      	ldr	r0, [r7, #8]
 8018e6e:	f008 fa39 	bl	80212e4 <memcpy>
                outSz -= OUTPUT_BLOCK_LEN;
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	3b20      	subs	r3, #32
 8018e76:	607b      	str	r3, [r7, #4]
                out += OUTPUT_BLOCK_LEN;
 8018e78:	68bb      	ldr	r3, [r7, #8]
 8018e7a:	3320      	adds	r3, #32
 8018e7c:	60bb      	str	r3, [r7, #8]
 8018e7e:	e005      	b.n	8018e8c <Hash_df+0x18c>
            }
            else {
                XMEMCPY(out, digest, outSz);
 8018e80:	687a      	ldr	r2, [r7, #4]
 8018e82:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8018e86:	68b8      	ldr	r0, [r7, #8]
 8018e88:	f008 fa2c 	bl	80212e4 <memcpy>
    for (i = 0; i < len; i++) {
 8018e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e90:	3301      	adds	r3, #1
 8018e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018e96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018e9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	f6ff af68 	blt.w	8018d74 <Hash_df+0x74>
 8018ea4:	e000      	b.n	8018ea8 <Hash_df+0x1a8>
            break;
 8018ea6:	bf00      	nop
            }
        }
    }

    ForceZero(digest, WC_SHA256_DIGEST_SIZE);
 8018ea8:	2120      	movs	r1, #32
 8018eaa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8018eae:	f7ff fed7 	bl	8018c60 <ForceZero>

#ifdef WOLFSSL_SMALL_STACK
    XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 8018eb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d003      	beq.n	8018eca <Hash_df+0x1ca>
 8018ec2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8018ec6:	f7ff fe8d 	bl	8018be4 <wolfSSL_Free>
#endif

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 8018eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	bf14      	ite	ne
 8018ed2:	2301      	movne	r3, #1
 8018ed4:	2300      	moveq	r3, #0
 8018ed6:	b2db      	uxtb	r3, r3
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	37a0      	adds	r7, #160	; 0xa0
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}

08018ee0 <Hash_DRBG_Reseed>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Reseed(DRBG_internal* drbg, const byte* seed, word32 seedSz)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b08c      	sub	sp, #48	; 0x30
 8018ee4:	af04      	add	r7, sp, #16
 8018ee6:	60f8      	str	r0, [r7, #12]
 8018ee8:	60b9      	str	r1, [r7, #8]
 8018eea:	607a      	str	r2, [r7, #4]
    byte* newV;
#else
    byte newV[DRBG_SEED_LEN];
#endif

    if (drbg == NULL) {
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d101      	bne.n	8018ef6 <Hash_DRBG_Reseed+0x16>
        return DRBG_FAILURE;
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	e054      	b.n	8018fa0 <Hash_DRBG_Reseed+0xc0>
    }

#ifdef WOLFSSL_SMALL_STACK
    newV = (byte*)XMALLOC(DRBG_SEED_LEN, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8018ef6:	2037      	movs	r0, #55	; 0x37
 8018ef8:	f7ff fe58 	bl	8018bac <wolfSSL_Malloc>
 8018efc:	61b8      	str	r0, [r7, #24]
    if (newV == NULL) {
 8018efe:	69bb      	ldr	r3, [r7, #24]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d102      	bne.n	8018f0a <Hash_DRBG_Reseed+0x2a>
        return MEMORY_E;
 8018f04:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8018f08:	e04a      	b.n	8018fa0 <Hash_DRBG_Reseed+0xc0>
    }
#endif
    XMEMSET(newV, 0, DRBG_SEED_LEN);
 8018f0a:	2237      	movs	r2, #55	; 0x37
 8018f0c:	2100      	movs	r1, #0
 8018f0e:	69b8      	ldr	r0, [r7, #24]
 8018f10:	f008 fa10 	bl	8021334 <memset>

    ret = Hash_df(drbg, newV, DRBG_SEED_LEN, drbgReseed,
                drbg->V, sizeof(drbg->V), seed, seedSz);
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	3308      	adds	r3, #8
    ret = Hash_df(drbg, newV, DRBG_SEED_LEN, drbgReseed,
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	9203      	str	r2, [sp, #12]
 8018f1c:	68ba      	ldr	r2, [r7, #8]
 8018f1e:	9202      	str	r2, [sp, #8]
 8018f20:	2237      	movs	r2, #55	; 0x37
 8018f22:	9201      	str	r2, [sp, #4]
 8018f24:	9300      	str	r3, [sp, #0]
 8018f26:	2301      	movs	r3, #1
 8018f28:	2237      	movs	r2, #55	; 0x37
 8018f2a:	69b9      	ldr	r1, [r7, #24]
 8018f2c:	68f8      	ldr	r0, [r7, #12]
 8018f2e:	f7ff fee7 	bl	8018d00 <Hash_df>
 8018f32:	61f8      	str	r0, [r7, #28]
    if (ret == DRBG_SUCCESS) {
 8018f34:	69fb      	ldr	r3, [r7, #28]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d11c      	bne.n	8018f74 <Hash_DRBG_Reseed+0x94>
        XMEMCPY(drbg->V, newV, sizeof(drbg->V));
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	3308      	adds	r3, #8
 8018f3e:	2237      	movs	r2, #55	; 0x37
 8018f40:	69b9      	ldr	r1, [r7, #24]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f008 f9ce 	bl	80212e4 <memcpy>
        ForceZero(newV, DRBG_SEED_LEN);
 8018f48:	2137      	movs	r1, #55	; 0x37
 8018f4a:	69b8      	ldr	r0, [r7, #24]
 8018f4c:	f7ff fe88 	bl	8018c60 <ForceZero>

        ret = Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	3308      	adds	r3, #8
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	9203      	str	r2, [sp, #12]
 8018f5e:	2200      	movs	r2, #0
 8018f60:	9202      	str	r2, [sp, #8]
 8018f62:	2237      	movs	r2, #55	; 0x37
 8018f64:	9201      	str	r2, [sp, #4]
 8018f66:	9300      	str	r3, [sp, #0]
 8018f68:	2300      	movs	r3, #0
 8018f6a:	2237      	movs	r2, #55	; 0x37
 8018f6c:	68f8      	ldr	r0, [r7, #12]
 8018f6e:	f7ff fec7 	bl	8018d00 <Hash_df>
 8018f72:	61f8      	str	r0, [r7, #28]
                                    sizeof(drbg->V), NULL, 0);
    }
    if (ret == DRBG_SUCCESS) {
 8018f74:	69fb      	ldr	r3, [r7, #28]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d109      	bne.n	8018f8e <Hash_DRBG_Reseed+0xae>
        drbg->reseedCtr = 1;
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	2201      	movs	r2, #1
 8018f7e:	601a      	str	r2, [r3, #0]
        drbg->lastBlock = 0;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	2200      	movs	r2, #0
 8018f84:	605a      	str	r2, [r3, #4]
        drbg->matchCount = 0;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	2200      	movs	r2, #0
 8018f8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(newV, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8018f8e:	69bb      	ldr	r3, [r7, #24]
 8018f90:	617b      	str	r3, [r7, #20]
 8018f92:	697b      	ldr	r3, [r7, #20]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d002      	beq.n	8018f9e <Hash_DRBG_Reseed+0xbe>
 8018f98:	6978      	ldr	r0, [r7, #20]
 8018f9a:	f7ff fe23 	bl	8018be4 <wolfSSL_Free>
#endif
    return ret;
 8018f9e:	69fb      	ldr	r3, [r7, #28]
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3720      	adds	r7, #32
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <array_add_one>:

    return Hash_DRBG_Reseed((DRBG_internal *)rng->drbg, seed, seedSz);
}

static WC_INLINE void array_add_one(byte* data, word32 dataSz)
{
 8018fa8:	b480      	push	{r7}
 8018faa:	b085      	sub	sp, #20
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	6039      	str	r1, [r7, #0]
    int i;
    for (i = dataSz - 1; i >= 0; i--) {
 8018fb2:	683b      	ldr	r3, [r7, #0]
 8018fb4:	3b01      	subs	r3, #1
 8018fb6:	60fb      	str	r3, [r7, #12]
 8018fb8:	e00f      	b.n	8018fda <array_add_one+0x32>
        data[i]++;
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	4413      	add	r3, r2
 8018fc0:	781a      	ldrb	r2, [r3, #0]
 8018fc2:	3201      	adds	r2, #1
 8018fc4:	b2d2      	uxtb	r2, r2
 8018fc6:	701a      	strb	r2, [r3, #0]
        if (data[i] != 0) break;
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	687a      	ldr	r2, [r7, #4]
 8018fcc:	4413      	add	r3, r2
 8018fce:	781b      	ldrb	r3, [r3, #0]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d106      	bne.n	8018fe2 <array_add_one+0x3a>
    for (i = dataSz - 1; i >= 0; i--) {
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	3b01      	subs	r3, #1
 8018fd8:	60fb      	str	r3, [r7, #12]
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	daec      	bge.n	8018fba <array_add_one+0x12>
    }
}
 8018fe0:	e000      	b.n	8018fe4 <array_add_one+0x3c>
        if (data[i] != 0) break;
 8018fe2:	bf00      	nop
}
 8018fe4:	bf00      	nop
 8018fe6:	3714      	adds	r7, #20
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fee:	4770      	bx	lr

08018ff0 <Hash_gen>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_gen(DRBG_internal* drbg, byte* out, word32 outSz, const byte* V)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b0aa      	sub	sp, #168	; 0xa8
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	60f8      	str	r0, [r7, #12]
 8018ff8:	60b9      	str	r1, [r7, #8]
 8018ffa:	607a      	str	r2, [r7, #4]
 8018ffc:	603b      	str	r3, [r7, #0]
    int ret = DRBG_FAILURE;
 8018ffe:	2301      	movs	r3, #1
 8019000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    wc_Sha256* sha = &drbg->sha256;
#else
    wc_Sha256 sha[1];
#endif

    if (drbg == NULL) {
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d101      	bne.n	801900e <Hash_gen+0x1e>
        return DRBG_FAILURE;
 801900a:	2301      	movs	r3, #1
 801900c:	e0f6      	b.n	80191fc <Hash_gen+0x20c>
    }

#ifdef WOLFSSL_SMALL_STACK
    data = (byte*)XMALLOC(DRBG_SEED_LEN, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801900e:	2037      	movs	r0, #55	; 0x37
 8019010:	f7ff fdcc 	bl	8018bac <wolfSSL_Malloc>
 8019014:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    digest = (byte*)XMALLOC(WC_SHA256_DIGEST_SIZE, drbg->heap,
 8019018:	2020      	movs	r0, #32
 801901a:	f7ff fdc7 	bl	8018bac <wolfSSL_Malloc>
 801901e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        DYNAMIC_TYPE_DIGEST);
    if (data == NULL || digest == NULL) {
 8019022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019026:	2b00      	cmp	r3, #0
 8019028:	d003      	beq.n	8019032 <Hash_gen+0x42>
 801902a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801902e:	2b00      	cmp	r3, #0
 8019030:	d119      	bne.n	8019066 <Hash_gen+0x76>
        XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 8019032:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801903a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801903e:	2b00      	cmp	r3, #0
 8019040:	d003      	beq.n	801904a <Hash_gen+0x5a>
 8019042:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8019046:	f7ff fdcd 	bl	8018be4 <wolfSSL_Free>
        XFREE(data, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801904a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801904e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019056:	2b00      	cmp	r3, #0
 8019058:	d003      	beq.n	8019062 <Hash_gen+0x72>
 801905a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801905e:	f7ff fdc1 	bl	8018be4 <wolfSSL_Free>
        return DRBG_FAILURE;
 8019062:	2301      	movs	r3, #1
 8019064:	e0ca      	b.n	80191fc <Hash_gen+0x20c>
#endif

    /* Special case: outSz is 0 and out is NULL. wc_Generate a block to save for
     * the continuous test. */

    if (outSz == 0) {
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d101      	bne.n	8019070 <Hash_gen+0x80>
        outSz = 1;
 801906c:	2301      	movs	r3, #1
 801906e:	607b      	str	r3, [r7, #4]
    }

    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	095b      	lsrs	r3, r3, #5
 8019074:	687a      	ldr	r2, [r7, #4]
 8019076:	f002 021f 	and.w	r2, r2, #31
 801907a:	2a00      	cmp	r2, #0
 801907c:	d001      	beq.n	8019082 <Hash_gen+0x92>
 801907e:	2201      	movs	r2, #1
 8019080:	e000      	b.n	8019084 <Hash_gen+0x94>
 8019082:	2200      	movs	r2, #0
 8019084:	4413      	add	r3, r2
 8019086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    XMEMCPY(data, V, DRBG_SEED_LEN);
 801908a:	2237      	movs	r2, #55	; 0x37
 801908c:	6839      	ldr	r1, [r7, #0]
 801908e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8019092:	f008 f927 	bl	80212e4 <memcpy>
    for (i = 0; i < len; i++) {
 8019096:	2300      	movs	r3, #0
 8019098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801909c:	e081      	b.n	80191a2 <Hash_gen+0x1b2>
#ifndef WOLFSSL_SMALL_STACK_CACHE
    #if defined(WOLFSSL_ASYNC_CRYPT) || defined(WOLF_CRYPTO_CB)
        ret = wc_InitSha256_ex(sha, drbg->heap, drbg->devId);
    #else
        ret = wc_InitSha256(sha);
 801909e:	f107 0310 	add.w	r3, r7, #16
 80190a2:	4618      	mov	r0, r3
 80190a4:	f002 ff30 	bl	801bf08 <wc_InitSha256>
 80190a8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    #endif
        if (ret == 0)
 80190ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d109      	bne.n	80190c8 <Hash_gen+0xd8>
#endif
            ret = wc_Sha256Update(sha, data, DRBG_SEED_LEN);
 80190b4:	f107 0310 	add.w	r3, r7, #16
 80190b8:	2237      	movs	r2, #55	; 0x37
 80190ba:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80190be:	4618      	mov	r0, r3
 80190c0:	f002 fe5b 	bl	801bd7a <wc_Sha256Update>
 80190c4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if (ret == 0)
 80190c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d108      	bne.n	80190e2 <Hash_gen+0xf2>
            ret = wc_Sha256Final(sha, digest);
 80190d0:	f107 0310 	add.w	r3, r7, #16
 80190d4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80190d8:	4618      	mov	r0, r3
 80190da:	f002 feea 	bl	801beb2 <wc_Sha256Final>
 80190de:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
#ifndef WOLFSSL_SMALL_STACK_CACHE
        wc_Sha256Free(sha);
 80190e2:	f107 0310 	add.w	r3, r7, #16
 80190e6:	4618      	mov	r0, r3
 80190e8:	f002 ff1f 	bl	801bf2a <wc_Sha256Free>
#endif

        if (ret == 0) {
 80190ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d15e      	bne.n	80191b2 <Hash_gen+0x1c2>
 80190f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80190f8:	681b      	ldr	r3, [r3, #0]
            XMEMCPY(&checkBlock, digest, sizeof(word32));
 80190fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (drbg->reseedCtr > 1 && checkBlock == drbg->lastBlock) {
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	2b01      	cmp	r3, #1
 8019104:	d91d      	bls.n	8019142 <Hash_gen+0x152>
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	685a      	ldr	r2, [r3, #4]
 801910a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801910e:	429a      	cmp	r2, r3
 8019110:	d117      	bne.n	8019142 <Hash_gen+0x152>
                if (drbg->matchCount == 1) {
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8019118:	2b01      	cmp	r3, #1
 801911a:	d101      	bne.n	8019120 <Hash_gen+0x130>
                    return DRBG_CONT_FAILURE;
 801911c:	2303      	movs	r3, #3
 801911e:	e06d      	b.n	80191fc <Hash_gen+0x20c>
                }
                else {
                    if (i == (len-1)) {
 8019120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019124:	3b01      	subs	r3, #1
 8019126:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801912a:	429a      	cmp	r2, r3
 801912c:	d104      	bne.n	8019138 <Hash_gen+0x148>
                        len++;
 801912e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019132:	3301      	adds	r3, #1
 8019134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    }
                    drbg->matchCount = 1;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	2201      	movs	r2, #1
 801913c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                if (drbg->matchCount == 1) {
 8019140:	e007      	b.n	8019152 <Hash_gen+0x162>
                }
            }
            else {
                drbg->matchCount = 0;
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	2200      	movs	r2, #0
 8019146:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                drbg->lastBlock = checkBlock;
 801914a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	605a      	str	r2, [r3, #4]
            }

            if (out != NULL && outSz != 0) {
 8019152:	68bb      	ldr	r3, [r7, #8]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d01f      	beq.n	8019198 <Hash_gen+0x1a8>
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d01c      	beq.n	8019198 <Hash_gen+0x1a8>
                if (outSz >= OUTPUT_BLOCK_LEN) {
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2b1f      	cmp	r3, #31
 8019162:	d911      	bls.n	8019188 <Hash_gen+0x198>
                    XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
 8019164:	2220      	movs	r2, #32
 8019166:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801916a:	68b8      	ldr	r0, [r7, #8]
 801916c:	f008 f8ba 	bl	80212e4 <memcpy>
                    outSz -= OUTPUT_BLOCK_LEN;
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	3b20      	subs	r3, #32
 8019174:	607b      	str	r3, [r7, #4]
                    out += OUTPUT_BLOCK_LEN;
 8019176:	68bb      	ldr	r3, [r7, #8]
 8019178:	3320      	adds	r3, #32
 801917a:	60bb      	str	r3, [r7, #8]
                    array_add_one(data, DRBG_SEED_LEN);
 801917c:	2137      	movs	r1, #55	; 0x37
 801917e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8019182:	f7ff ff11 	bl	8018fa8 <array_add_one>
 8019186:	e007      	b.n	8019198 <Hash_gen+0x1a8>
                }
                else {
                    XMEMCPY(out, digest, outSz);
 8019188:	687a      	ldr	r2, [r7, #4]
 801918a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801918e:	68b8      	ldr	r0, [r7, #8]
 8019190:	f008 f8a8 	bl	80212e4 <memcpy>
                    outSz = 0;
 8019194:	2300      	movs	r3, #0
 8019196:	607b      	str	r3, [r7, #4]
    for (i = 0; i < len; i++) {
 8019198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801919c:	3301      	adds	r3, #1
 801919e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80191a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80191a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80191aa:	429a      	cmp	r2, r3
 80191ac:	f6ff af77 	blt.w	801909e <Hash_gen+0xae>
 80191b0:	e000      	b.n	80191b4 <Hash_gen+0x1c4>
                }
            }
        }
        else {
            /* wc_Sha256Update or wc_Sha256Final returned error */
            break;
 80191b2:	bf00      	nop
        }
    }
    ForceZero(data, DRBG_SEED_LEN);
 80191b4:	2137      	movs	r1, #55	; 0x37
 80191b6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80191ba:	f7ff fd51 	bl	8018c60 <ForceZero>

#ifdef WOLFSSL_SMALL_STACK
    XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 80191be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80191c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80191c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d003      	beq.n	80191d6 <Hash_gen+0x1e6>
 80191ce:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80191d2:	f7ff fd07 	bl	8018be4 <wolfSSL_Free>
    XFREE(data, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80191d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80191da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80191de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d003      	beq.n	80191ee <Hash_gen+0x1fe>
 80191e6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80191ea:	f7ff fcfb 	bl	8018be4 <wolfSSL_Free>
#endif

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 80191ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	bf14      	ite	ne
 80191f6:	2301      	movne	r3, #1
 80191f8:	2300      	moveq	r3, #0
 80191fa:	b2db      	uxtb	r3, r3
}
 80191fc:	4618      	mov	r0, r3
 80191fe:	37a8      	adds	r7, #168	; 0xa8
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}

08019204 <array_add>:

static WC_INLINE void array_add(byte* d, word32 dLen, const byte* s, word32 sLen)
{
 8019204:	b480      	push	{r7}
 8019206:	b089      	sub	sp, #36	; 0x24
 8019208:	af00      	add	r7, sp, #0
 801920a:	60f8      	str	r0, [r7, #12]
 801920c:	60b9      	str	r1, [r7, #8]
 801920e:	607a      	str	r2, [r7, #4]
 8019210:	603b      	str	r3, [r7, #0]
    word16 carry = 0;
 8019212:	2300      	movs	r3, #0
 8019214:	83fb      	strh	r3, [r7, #30]

    if (dLen > 0 && sLen > 0 && dLen >= sLen) {
 8019216:	68bb      	ldr	r3, [r7, #8]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d046      	beq.n	80192aa <array_add+0xa6>
 801921c:	683b      	ldr	r3, [r7, #0]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d043      	beq.n	80192aa <array_add+0xa6>
 8019222:	68ba      	ldr	r2, [r7, #8]
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	429a      	cmp	r2, r3
 8019228:	d33f      	bcc.n	80192aa <array_add+0xa6>
        int sIdx, dIdx;

        dIdx = dLen - 1;
 801922a:	68bb      	ldr	r3, [r7, #8]
 801922c:	3b01      	subs	r3, #1
 801922e:	617b      	str	r3, [r7, #20]
        for (sIdx = sLen - 1; sIdx >= 0; sIdx--) {
 8019230:	683b      	ldr	r3, [r7, #0]
 8019232:	3b01      	subs	r3, #1
 8019234:	61bb      	str	r3, [r7, #24]
 8019236:	e01d      	b.n	8019274 <array_add+0x70>
            carry += (word16)d[dIdx] + (word16)s[sIdx];
 8019238:	697b      	ldr	r3, [r7, #20]
 801923a:	68fa      	ldr	r2, [r7, #12]
 801923c:	4413      	add	r3, r2
 801923e:	781b      	ldrb	r3, [r3, #0]
 8019240:	b29a      	uxth	r2, r3
 8019242:	69bb      	ldr	r3, [r7, #24]
 8019244:	6879      	ldr	r1, [r7, #4]
 8019246:	440b      	add	r3, r1
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	b29b      	uxth	r3, r3
 801924c:	4413      	add	r3, r2
 801924e:	b29a      	uxth	r2, r3
 8019250:	8bfb      	ldrh	r3, [r7, #30]
 8019252:	4413      	add	r3, r2
 8019254:	83fb      	strh	r3, [r7, #30]
            d[dIdx] = (byte)carry;
 8019256:	697b      	ldr	r3, [r7, #20]
 8019258:	68fa      	ldr	r2, [r7, #12]
 801925a:	4413      	add	r3, r2
 801925c:	8bfa      	ldrh	r2, [r7, #30]
 801925e:	b2d2      	uxtb	r2, r2
 8019260:	701a      	strb	r2, [r3, #0]
            carry >>= 8;
 8019262:	8bfb      	ldrh	r3, [r7, #30]
 8019264:	0a1b      	lsrs	r3, r3, #8
 8019266:	83fb      	strh	r3, [r7, #30]
            dIdx--;
 8019268:	697b      	ldr	r3, [r7, #20]
 801926a:	3b01      	subs	r3, #1
 801926c:	617b      	str	r3, [r7, #20]
        for (sIdx = sLen - 1; sIdx >= 0; sIdx--) {
 801926e:	69bb      	ldr	r3, [r7, #24]
 8019270:	3b01      	subs	r3, #1
 8019272:	61bb      	str	r3, [r7, #24]
 8019274:	69bb      	ldr	r3, [r7, #24]
 8019276:	2b00      	cmp	r3, #0
 8019278:	dade      	bge.n	8019238 <array_add+0x34>
        }

        for (; dIdx >= 0; dIdx--) {
 801927a:	e013      	b.n	80192a4 <array_add+0xa0>
            carry += (word16)d[dIdx];
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	68fa      	ldr	r2, [r7, #12]
 8019280:	4413      	add	r3, r2
 8019282:	781b      	ldrb	r3, [r3, #0]
 8019284:	b29a      	uxth	r2, r3
 8019286:	8bfb      	ldrh	r3, [r7, #30]
 8019288:	4413      	add	r3, r2
 801928a:	83fb      	strh	r3, [r7, #30]
            d[dIdx] = (byte)carry;
 801928c:	697b      	ldr	r3, [r7, #20]
 801928e:	68fa      	ldr	r2, [r7, #12]
 8019290:	4413      	add	r3, r2
 8019292:	8bfa      	ldrh	r2, [r7, #30]
 8019294:	b2d2      	uxtb	r2, r2
 8019296:	701a      	strb	r2, [r3, #0]
            carry >>= 8;
 8019298:	8bfb      	ldrh	r3, [r7, #30]
 801929a:	0a1b      	lsrs	r3, r3, #8
 801929c:	83fb      	strh	r3, [r7, #30]
        for (; dIdx >= 0; dIdx--) {
 801929e:	697b      	ldr	r3, [r7, #20]
 80192a0:	3b01      	subs	r3, #1
 80192a2:	617b      	str	r3, [r7, #20]
 80192a4:	697b      	ldr	r3, [r7, #20]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	dae8      	bge.n	801927c <array_add+0x78>
        }
    }
}
 80192aa:	bf00      	nop
 80192ac:	3724      	adds	r7, #36	; 0x24
 80192ae:	46bd      	mov	sp, r7
 80192b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b4:	4770      	bx	lr
	...

080192b8 <Hash_DRBG_Generate>:

/* Returns: DRBG_SUCCESS, DRBG_NEED_RESEED, or DRBG_FAILURE */
static int Hash_DRBG_Generate(DRBG_internal* drbg, byte* out, word32 outSz)
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b0a6      	sub	sp, #152	; 0x98
 80192bc:	af00      	add	r7, sp, #0
 80192be:	60f8      	str	r0, [r7, #12]
 80192c0:	60b9      	str	r1, [r7, #8]
 80192c2:	607a      	str	r2, [r7, #4]
    wc_Sha256 sha[1];
#endif
    byte type;
    word32 reseedCtr;

    if (drbg == NULL) {
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d101      	bne.n	80192ce <Hash_DRBG_Generate+0x16>
        return DRBG_FAILURE;
 80192ca:	2301      	movs	r3, #1
 80192cc:	e09f      	b.n	801940e <Hash_DRBG_Generate+0x156>
    }

    if (drbg->reseedCtr == RESEED_INTERVAL) {
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	4a51      	ldr	r2, [pc, #324]	; (8019418 <Hash_DRBG_Generate+0x160>)
 80192d4:	4293      	cmp	r3, r2
 80192d6:	d101      	bne.n	80192dc <Hash_DRBG_Generate+0x24>
        return DRBG_NEED_RESEED;
 80192d8:	2302      	movs	r3, #2
 80192da:	e098      	b.n	801940e <Hash_DRBG_Generate+0x156>
    }
    else {
    #ifndef WOLFSSL_SMALL_STACK
        byte digest[WC_SHA256_DIGEST_SIZE];
    #else
        byte* digest = (byte*)XMALLOC(WC_SHA256_DIGEST_SIZE, drbg->heap,
 80192dc:	2020      	movs	r0, #32
 80192de:	f7ff fc65 	bl	8018bac <wolfSSL_Malloc>
 80192e2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
            DYNAMIC_TYPE_DIGEST);
        if (digest == NULL)
 80192e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d101      	bne.n	80192f2 <Hash_DRBG_Generate+0x3a>
            return DRBG_FAILURE;
 80192ee:	2301      	movs	r3, #1
 80192f0:	e08d      	b.n	801940e <Hash_DRBG_Generate+0x156>
    #endif

        type = drbgGenerateH;
 80192f2:	2303      	movs	r3, #3
 80192f4:	76fb      	strb	r3, [r7, #27]
        reseedCtr = drbg->reseedCtr;
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	617b      	str	r3, [r7, #20]

        ret = Hash_gen(drbg, out, outSz, drbg->V);
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	3308      	adds	r3, #8
 8019300:	687a      	ldr	r2, [r7, #4]
 8019302:	68b9      	ldr	r1, [r7, #8]
 8019304:	68f8      	ldr	r0, [r7, #12]
 8019306:	f7ff fe73 	bl	8018ff0 <Hash_gen>
 801930a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        if (ret == DRBG_SUCCESS) {
 801930e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019312:	2b00      	cmp	r3, #0
 8019314:	d163      	bne.n	80193de <Hash_DRBG_Generate+0x126>
#ifndef WOLFSSL_SMALL_STACK_CACHE
        #if defined(WOLFSSL_ASYNC_CRYPT) || defined(WOLF_CRYPTO_CB)
            ret = wc_InitSha256_ex(sha, drbg->heap, drbg->devId);
        #else
            ret = wc_InitSha256(sha);
 8019316:	f107 031c 	add.w	r3, r7, #28
 801931a:	4618      	mov	r0, r3
 801931c:	f002 fdf4 	bl	801bf08 <wc_InitSha256>
 8019320:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        #endif
            if (ret == 0)
 8019324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019328:	2b00      	cmp	r3, #0
 801932a:	d109      	bne.n	8019340 <Hash_DRBG_Generate+0x88>
#endif
                ret = wc_Sha256Update(sha, &type, sizeof(type));
 801932c:	f107 011b 	add.w	r1, r7, #27
 8019330:	f107 031c 	add.w	r3, r7, #28
 8019334:	2201      	movs	r2, #1
 8019336:	4618      	mov	r0, r3
 8019338:	f002 fd1f 	bl	801bd7a <wc_Sha256Update>
 801933c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret == 0)
 8019340:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019344:	2b00      	cmp	r3, #0
 8019346:	d10a      	bne.n	801935e <Hash_DRBG_Generate+0xa6>
                ret = wc_Sha256Update(sha, drbg->V, sizeof(drbg->V));
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	f103 0108 	add.w	r1, r3, #8
 801934e:	f107 031c 	add.w	r3, r7, #28
 8019352:	2237      	movs	r2, #55	; 0x37
 8019354:	4618      	mov	r0, r3
 8019356:	f002 fd10 	bl	801bd7a <wc_Sha256Update>
 801935a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret == 0)
 801935e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019362:	2b00      	cmp	r3, #0
 8019364:	d108      	bne.n	8019378 <Hash_DRBG_Generate+0xc0>
                ret = wc_Sha256Final(sha, digest);
 8019366:	f107 031c 	add.w	r3, r7, #28
 801936a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801936e:	4618      	mov	r0, r3
 8019370:	f002 fd9f 	bl	801beb2 <wc_Sha256Final>
 8019374:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

#ifndef WOLFSSL_SMALL_STACK_CACHE
            wc_Sha256Free(sha);
 8019378:	f107 031c 	add.w	r3, r7, #28
 801937c:	4618      	mov	r0, r3
 801937e:	f002 fdd4 	bl	801bf2a <wc_Sha256Free>
#endif

            if (ret == 0) {
 8019382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019386:	2b00      	cmp	r3, #0
 8019388:	d124      	bne.n	80193d4 <Hash_DRBG_Generate+0x11c>
                array_add(drbg->V, sizeof(drbg->V), digest, WC_SHA256_DIGEST_SIZE);
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	f103 0008 	add.w	r0, r3, #8
 8019390:	2320      	movs	r3, #32
 8019392:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019396:	2137      	movs	r1, #55	; 0x37
 8019398:	f7ff ff34 	bl	8019204 <array_add>
                array_add(drbg->V, sizeof(drbg->V), drbg->C, sizeof(drbg->C));
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	f103 0008 	add.w	r0, r3, #8
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 80193a8:	2337      	movs	r3, #55	; 0x37
 80193aa:	2137      	movs	r1, #55	; 0x37
 80193ac:	f7ff ff2a 	bl	8019204 <array_add>
            #ifdef LITTLE_ENDIAN_ORDER
                reseedCtr = ByteReverseWord32(reseedCtr);
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7ff fc3d 	bl	8018c32 <ByteReverseWord32>
 80193b8:	4603      	mov	r3, r0
 80193ba:	617b      	str	r3, [r7, #20]
            #endif
                array_add(drbg->V, sizeof(drbg->V),
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	f103 0008 	add.w	r0, r3, #8
 80193c2:	f107 0214 	add.w	r2, r7, #20
 80193c6:	2304      	movs	r3, #4
 80193c8:	2137      	movs	r1, #55	; 0x37
 80193ca:	f7ff ff1b 	bl	8019204 <array_add>
                                          (byte*)&reseedCtr, sizeof(reseedCtr));
                ret = DRBG_SUCCESS;
 80193ce:	2300      	movs	r3, #0
 80193d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            }
            drbg->reseedCtr++;
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	1c5a      	adds	r2, r3, #1
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	601a      	str	r2, [r3, #0]
        }
        ForceZero(digest, WC_SHA256_DIGEST_SIZE);
 80193de:	2120      	movs	r1, #32
 80193e0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80193e4:	f7ff fc3c 	bl	8018c60 <ForceZero>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 80193e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80193ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80193f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d003      	beq.n	8019400 <Hash_DRBG_Generate+0x148>
 80193f8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80193fc:	f7ff fbf2 	bl	8018be4 <wolfSSL_Free>
    #endif
    }

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 8019400:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019404:	2b00      	cmp	r3, #0
 8019406:	bf14      	ite	ne
 8019408:	2301      	movne	r3, #1
 801940a:	2300      	moveq	r3, #0
 801940c:	b2db      	uxtb	r3, r3
}
 801940e:	4618      	mov	r0, r3
 8019410:	3798      	adds	r7, #152	; 0x98
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	bf00      	nop
 8019418:	000f4240 	.word	0x000f4240

0801941c <Hash_DRBG_Instantiate>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Instantiate(DRBG_internal* drbg, const byte* seed, word32 seedSz,
                                             const byte* nonce, word32 nonceSz,
                                             void* heap, int devId)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b08a      	sub	sp, #40	; 0x28
 8019420:	af04      	add	r7, sp, #16
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	607a      	str	r2, [r7, #4]
 8019428:	603b      	str	r3, [r7, #0]
    int ret = DRBG_FAILURE;
 801942a:	2301      	movs	r3, #1
 801942c:	617b      	str	r3, [r7, #20]

    XMEMSET(drbg, 0, sizeof(DRBG_internal));
 801942e:	2280      	movs	r2, #128	; 0x80
 8019430:	2100      	movs	r1, #0
 8019432:	68f8      	ldr	r0, [r7, #12]
 8019434:	f007 ff7e 	bl	8021334 <memset>
    drbg->heap = heap;
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801943c:	679a      	str	r2, [r3, #120]	; 0x78
    #endif
    if (ret != 0)
        return ret;
#endif

    if (Hash_df(drbg, drbg->V, sizeof(drbg->V), drbgInitV, seed, seedSz,
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	f103 0108 	add.w	r1, r3, #8
 8019444:	6a3b      	ldr	r3, [r7, #32]
 8019446:	9303      	str	r3, [sp, #12]
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	9302      	str	r3, [sp, #8]
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	9301      	str	r3, [sp, #4]
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	9300      	str	r3, [sp, #0]
 8019454:	2304      	movs	r3, #4
 8019456:	2237      	movs	r2, #55	; 0x37
 8019458:	68f8      	ldr	r0, [r7, #12]
 801945a:	f7ff fc51 	bl	8018d00 <Hash_df>
 801945e:	4603      	mov	r3, r0
 8019460:	2b00      	cmp	r3, #0
 8019462:	d11f      	bne.n	80194a4 <Hash_DRBG_Instantiate+0x88>
                                              nonce, nonceSz) == DRBG_SUCCESS &&
        Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	3308      	adds	r3, #8
 801946e:	2200      	movs	r2, #0
 8019470:	9203      	str	r2, [sp, #12]
 8019472:	2200      	movs	r2, #0
 8019474:	9202      	str	r2, [sp, #8]
 8019476:	2237      	movs	r2, #55	; 0x37
 8019478:	9201      	str	r2, [sp, #4]
 801947a:	9300      	str	r3, [sp, #0]
 801947c:	2300      	movs	r3, #0
 801947e:	2237      	movs	r2, #55	; 0x37
 8019480:	68f8      	ldr	r0, [r7, #12]
 8019482:	f7ff fc3d 	bl	8018d00 <Hash_df>
 8019486:	4603      	mov	r3, r0
                                              nonce, nonceSz) == DRBG_SUCCESS &&
 8019488:	2b00      	cmp	r3, #0
 801948a:	d10b      	bne.n	80194a4 <Hash_DRBG_Instantiate+0x88>
                                    sizeof(drbg->V), NULL, 0) == DRBG_SUCCESS) {

        drbg->reseedCtr = 1;
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	2201      	movs	r2, #1
 8019490:	601a      	str	r2, [r3, #0]
        drbg->lastBlock = 0;
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	2200      	movs	r2, #0
 8019496:	605a      	str	r2, [r3, #4]
        drbg->matchCount = 0;
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	2200      	movs	r2, #0
 801949c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        ret = DRBG_SUCCESS;
 80194a0:	2300      	movs	r3, #0
 80194a2:	617b      	str	r3, [r7, #20]
    }

    return ret;
 80194a4:	697b      	ldr	r3, [r7, #20]
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3718      	adds	r7, #24
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}

080194ae <Hash_DRBG_Uninstantiate>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Uninstantiate(DRBG_internal* drbg)
{
 80194ae:	b580      	push	{r7, lr}
 80194b0:	b086      	sub	sp, #24
 80194b2:	af00      	add	r7, sp, #0
 80194b4:	6078      	str	r0, [r7, #4]
    word32 i;
    int    compareSum = 0;
 80194b6:	2300      	movs	r3, #0
 80194b8:	613b      	str	r3, [r7, #16]
    byte*  compareDrbg = (byte*)drbg;
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	60fb      	str	r3, [r7, #12]

#ifdef WOLFSSL_SMALL_STACK_CACHE
    wc_Sha256Free(&drbg->sha256);
#endif

    ForceZero(drbg, sizeof(DRBG_internal));
 80194be:	2180      	movs	r1, #128	; 0x80
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	f7ff fbcd 	bl	8018c60 <ForceZero>

    for (i = 0; i < sizeof(DRBG_internal); i++) {
 80194c6:	2300      	movs	r3, #0
 80194c8:	617b      	str	r3, [r7, #20]
 80194ca:	e00a      	b.n	80194e2 <Hash_DRBG_Uninstantiate+0x34>
        compareSum |= compareDrbg[i] ^ 0;
 80194cc:	68fa      	ldr	r2, [r7, #12]
 80194ce:	697b      	ldr	r3, [r7, #20]
 80194d0:	4413      	add	r3, r2
 80194d2:	781b      	ldrb	r3, [r3, #0]
 80194d4:	461a      	mov	r2, r3
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	4313      	orrs	r3, r2
 80194da:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(DRBG_internal); i++) {
 80194dc:	697b      	ldr	r3, [r7, #20]
 80194de:	3301      	adds	r3, #1
 80194e0:	617b      	str	r3, [r7, #20]
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	2b7f      	cmp	r3, #127	; 0x7f
 80194e6:	d9f1      	bls.n	80194cc <Hash_DRBG_Uninstantiate+0x1e>
    }

    return (compareSum == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 80194e8:	693b      	ldr	r3, [r7, #16]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	bf14      	ite	ne
 80194ee:	2301      	movne	r3, #1
 80194f0:	2300      	moveq	r3, #0
 80194f2:	b2db      	uxtb	r3, r3
}
 80194f4:	4618      	mov	r0, r3
 80194f6:	3718      	adds	r7, #24
 80194f8:	46bd      	mov	sp, r7
 80194fa:	bd80      	pop	{r7, pc}

080194fc <wc_RNG_TestSeed>:


int wc_RNG_TestSeed(const byte* seed, word32 seedSz)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b086      	sub	sp, #24
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
 8019504:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8019506:	2300      	movs	r3, #0
 8019508:	617b      	str	r3, [r7, #20]

    /* Check the seed for duplicate words. */
    word32 seedIdx = 0;
 801950a:	2300      	movs	r3, #0
 801950c:	613b      	str	r3, [r7, #16]
    word32 scratchSz = min(SEED_BLOCK_SZ, seedSz - SEED_BLOCK_SZ);
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	3b04      	subs	r3, #4
 8019512:	4619      	mov	r1, r3
 8019514:	2004      	movs	r0, #4
 8019516:	f7ff fbe3 	bl	8018ce0 <min>
 801951a:	60f8      	str	r0, [r7, #12]

    while (seedIdx < seedSz - SEED_BLOCK_SZ) {
 801951c:	e01b      	b.n	8019556 <wc_RNG_TestSeed+0x5a>
        if (ConstantCompare(seed + seedIdx,
 801951e:	687a      	ldr	r2, [r7, #4]
 8019520:	693b      	ldr	r3, [r7, #16]
 8019522:	18d0      	adds	r0, r2, r3
                            seed + seedIdx + scratchSz,
 8019524:	693a      	ldr	r2, [r7, #16]
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	4413      	add	r3, r2
        if (ConstantCompare(seed + seedIdx,
 801952a:	687a      	ldr	r2, [r7, #4]
 801952c:	4413      	add	r3, r2
 801952e:	68fa      	ldr	r2, [r7, #12]
 8019530:	4619      	mov	r1, r3
 8019532:	f7ff fbae 	bl	8018c92 <ConstantCompare>
 8019536:	4603      	mov	r3, r0
 8019538:	2b00      	cmp	r3, #0
 801953a:	d101      	bne.n	8019540 <wc_RNG_TestSeed+0x44>
                            scratchSz) == 0) {

            ret = DRBG_CONT_FAILURE;
 801953c:	2303      	movs	r3, #3
 801953e:	617b      	str	r3, [r7, #20]
        }
        seedIdx += SEED_BLOCK_SZ;
 8019540:	693b      	ldr	r3, [r7, #16]
 8019542:	3304      	adds	r3, #4
 8019544:	613b      	str	r3, [r7, #16]
        scratchSz = min(SEED_BLOCK_SZ, (seedSz - seedIdx));
 8019546:	683a      	ldr	r2, [r7, #0]
 8019548:	693b      	ldr	r3, [r7, #16]
 801954a:	1ad3      	subs	r3, r2, r3
 801954c:	4619      	mov	r1, r3
 801954e:	2004      	movs	r0, #4
 8019550:	f7ff fbc6 	bl	8018ce0 <min>
 8019554:	60f8      	str	r0, [r7, #12]
    while (seedIdx < seedSz - SEED_BLOCK_SZ) {
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	3b04      	subs	r3, #4
 801955a:	693a      	ldr	r2, [r7, #16]
 801955c:	429a      	cmp	r2, r3
 801955e:	d3de      	bcc.n	801951e <wc_RNG_TestSeed+0x22>
    }

    return ret;
 8019560:	697b      	ldr	r3, [r7, #20]
}
 8019562:	4618      	mov	r0, r3
 8019564:	3718      	adds	r7, #24
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}

0801956a <_InitRng>:

#endif /* HAVE_ENTROPY_MEMUSE */

static int _InitRng(WC_RNG* rng, byte* nonce, word32 nonceSz,
                    void* heap, int devId)
{
 801956a:	b590      	push	{r4, r7, lr}
 801956c:	b08f      	sub	sp, #60	; 0x3c
 801956e:	af04      	add	r7, sp, #16
 8019570:	60f8      	str	r0, [r7, #12]
 8019572:	60b9      	str	r1, [r7, #8]
 8019574:	607a      	str	r2, [r7, #4]
 8019576:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8019578:	2300      	movs	r3, #0
 801957a:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef HAVE_HASHDRBG
    word32 seedSz = SEED_SZ + SEED_BLOCK_SZ;
 801957c:	2324      	movs	r3, #36	; 0x24
 801957e:	623b      	str	r3, [r7, #32]
#endif

    (void)nonce;
    (void)nonceSz;

    if (rng == NULL)
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d102      	bne.n	801958c <_InitRng+0x22>
        return BAD_FUNC_ARG;
 8019586:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801958a:	e0a2      	b.n	80196d2 <_InitRng+0x168>
    if (nonce == NULL && nonceSz != 0)
 801958c:	68bb      	ldr	r3, [r7, #8]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d105      	bne.n	801959e <_InitRng+0x34>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d002      	beq.n	801959e <_InitRng+0x34>
        return BAD_FUNC_ARG;
 8019598:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801959c:	e099      	b.n	80196d2 <_InitRng+0x168>

#ifdef WOLFSSL_HEAP_TEST
    rng->heap = (void*)WOLFSSL_HEAP_TEST;
    (void)heap;
#else
    rng->heap = heap;
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	683a      	ldr	r2, [r7, #0]
 80195a2:	605a      	str	r2, [r3, #4]
    (void)devId;
#endif

#ifdef HAVE_HASHDRBG
    /* init the DBRG to known values */
    rng->drbg = NULL;
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	2200      	movs	r2, #0
 80195a8:	609a      	str	r2, [r3, #8]
    rng->status = DRBG_NOT_INIT;
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	2200      	movs	r2, #0
 80195ae:	731a      	strb	r2, [r3, #12]

#ifdef CUSTOM_RAND_GENERATE_BLOCK
    ret = 0; /* success */
#else
#ifdef HAVE_HASHDRBG
    if (nonceSz == 0)
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d101      	bne.n	80195ba <_InitRng+0x50>
        seedSz = MAX_SEED_SZ;
 80195b6:	2334      	movs	r3, #52	; 0x34
 80195b8:	623b      	str	r3, [r7, #32]

    if (wc_RNG_HealthTestLocal(0) == 0) {
 80195ba:	2000      	movs	r0, #0
 80195bc:	f000 fa2c 	bl	8019a18 <wc_RNG_HealthTestLocal>
 80195c0:	4603      	mov	r3, r0
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d162      	bne.n	801968c <_InitRng+0x122>
    #ifndef WOLFSSL_SMALL_STACK
        byte seed[MAX_SEED_SZ];
    #else
        byte* seed = (byte*)XMALLOC(MAX_SEED_SZ, rng->heap,
 80195c6:	2034      	movs	r0, #52	; 0x34
 80195c8:	f7ff faf0 	bl	8018bac <wolfSSL_Malloc>
 80195cc:	61f8      	str	r0, [r7, #28]
            DYNAMIC_TYPE_SEED);
        if (seed == NULL)
 80195ce:	69fb      	ldr	r3, [r7, #28]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d102      	bne.n	80195da <_InitRng+0x70>
            return MEMORY_E;
 80195d4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80195d8:	e07b      	b.n	80196d2 <_InitRng+0x168>
    #endif

#if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
        rng->drbg =
                (struct DRBG*)XMALLOC(sizeof(DRBG_internal), rng->heap,
 80195da:	2080      	movs	r0, #128	; 0x80
 80195dc:	f7ff fae6 	bl	8018bac <wolfSSL_Malloc>
 80195e0:	4602      	mov	r2, r0
        rng->drbg =
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	609a      	str	r2, [r3, #8]
                                                          DYNAMIC_TYPE_RNG);
        if (rng->drbg == NULL) {
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	689b      	ldr	r3, [r3, #8]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d105      	bne.n	80195fa <_InitRng+0x90>
            ret = MEMORY_E;
 80195ee:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80195f2:	627b      	str	r3, [r7, #36]	; 0x24
            rng->status = DRBG_FAILED;
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	2202      	movs	r2, #2
 80195f8:	731a      	strb	r2, [r3, #12]
        }
#else
        rng->drbg = (struct DRBG*)&rng->drbg_data;
#endif
        if (ret == 0) {
 80195fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d138      	bne.n	8019672 <_InitRng+0x108>
                if (ret != 0) {
                    ret = DRBG_FAILURE;
                }
            }
#else
            ret = wc_GenerateSeed(&rng->seed, seed, seedSz);
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	6a3a      	ldr	r2, [r7, #32]
 8019604:	69f9      	ldr	r1, [r7, #28]
 8019606:	4618      	mov	r0, r3
 8019608:	f000 fa9a 	bl	8019b40 <wc_GenerateSeed>
 801960c:	6278      	str	r0, [r7, #36]	; 0x24
#endif
            if (ret == 0)
 801960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019610:	2b00      	cmp	r3, #0
 8019612:	d105      	bne.n	8019620 <_InitRng+0xb6>
                ret = wc_RNG_TestSeed(seed, seedSz);
 8019614:	6a39      	ldr	r1, [r7, #32]
 8019616:	69f8      	ldr	r0, [r7, #28]
 8019618:	f7ff ff70 	bl	80194fc <wc_RNG_TestSeed>
 801961c:	6278      	str	r0, [r7, #36]	; 0x24
 801961e:	e004      	b.n	801962a <_InitRng+0xc0>
            else {
                ret = DRBG_FAILURE;
 8019620:	2301      	movs	r3, #1
 8019622:	627b      	str	r3, [r7, #36]	; 0x24
                rng->status = DRBG_FAILED;
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	2202      	movs	r2, #2
 8019628:	731a      	strb	r2, [r3, #12]
            }

            if (ret == DRBG_SUCCESS)
 801962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801962c:	2b00      	cmp	r3, #0
 801962e:	d111      	bne.n	8019654 <_InitRng+0xea>
                ret = Hash_DRBG_Instantiate((DRBG_internal *)rng->drbg,
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	6898      	ldr	r0, [r3, #8]
                            seed + SEED_BLOCK_SZ, seedSz - SEED_BLOCK_SZ,
 8019634:	69fb      	ldr	r3, [r7, #28]
 8019636:	1d19      	adds	r1, r3, #4
                ret = Hash_DRBG_Instantiate((DRBG_internal *)rng->drbg,
 8019638:	6a3b      	ldr	r3, [r7, #32]
 801963a:	1f1c      	subs	r4, r3, #4
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	685b      	ldr	r3, [r3, #4]
 8019640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019642:	9202      	str	r2, [sp, #8]
 8019644:	9301      	str	r3, [sp, #4]
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	9300      	str	r3, [sp, #0]
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	4622      	mov	r2, r4
 801964e:	f7ff fee5 	bl	801941c <Hash_DRBG_Instantiate>
 8019652:	6278      	str	r0, [r7, #36]	; 0x24
                            nonce, nonceSz, rng->heap, devId);

            if (ret != DRBG_SUCCESS) {
 8019654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019656:	2b00      	cmp	r3, #0
 8019658:	d00b      	beq.n	8019672 <_InitRng+0x108>
            #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
                XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	689b      	ldr	r3, [r3, #8]
 801965e:	61bb      	str	r3, [r7, #24]
 8019660:	69bb      	ldr	r3, [r7, #24]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d002      	beq.n	801966c <_InitRng+0x102>
 8019666:	69b8      	ldr	r0, [r7, #24]
 8019668:	f7ff fabc 	bl	8018be4 <wolfSSL_Free>
            #endif
                rng->drbg = NULL;
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	2200      	movs	r2, #0
 8019670:	609a      	str	r2, [r3, #8]
            }
        }

        ForceZero(seed, seedSz);
 8019672:	6a39      	ldr	r1, [r7, #32]
 8019674:	69f8      	ldr	r0, [r7, #28]
 8019676:	f7ff faf3 	bl	8018c60 <ForceZero>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(seed, rng->heap, DYNAMIC_TYPE_SEED);
 801967a:	69fb      	ldr	r3, [r7, #28]
 801967c:	617b      	str	r3, [r7, #20]
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d005      	beq.n	8019690 <_InitRng+0x126>
 8019684:	6978      	ldr	r0, [r7, #20]
 8019686:	f7ff faad 	bl	8018be4 <wolfSSL_Free>
 801968a:	e001      	b.n	8019690 <_InitRng+0x126>
    #endif
    }
    else {
        ret = DRBG_CONT_FAILURE;
 801968c:	2303      	movs	r3, #3
 801968e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (ret == DRBG_SUCCESS) {
 8019690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019692:	2b00      	cmp	r3, #0
 8019694:	d105      	bne.n	80196a2 <_InitRng+0x138>
        wc_MemZero_Add("DRBG V", &drbg->V, sizeof(drbg->V));
        wc_MemZero_Add("DRBG C", &drbg->C, sizeof(drbg->C));
#endif
#endif

        rng->status = DRBG_OK;
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	2201      	movs	r2, #1
 801969a:	731a      	strb	r2, [r3, #12]
        ret = 0;
 801969c:	2300      	movs	r3, #0
 801969e:	627b      	str	r3, [r7, #36]	; 0x24
 80196a0:	e016      	b.n	80196d0 <_InitRng+0x166>
    }
    else if (ret == DRBG_CONT_FAILURE) {
 80196a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196a4:	2b03      	cmp	r3, #3
 80196a6:	d106      	bne.n	80196b6 <_InitRng+0x14c>
        rng->status = DRBG_CONT_FAILED;
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	2203      	movs	r2, #3
 80196ac:	731a      	strb	r2, [r3, #12]
        ret = DRBG_CONT_FIPS_E;
 80196ae:	f06f 03d0 	mvn.w	r3, #208	; 0xd0
 80196b2:	627b      	str	r3, [r7, #36]	; 0x24
 80196b4:	e00c      	b.n	80196d0 <_InitRng+0x166>
    }
    else if (ret == DRBG_FAILURE) {
 80196b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b8:	2b01      	cmp	r3, #1
 80196ba:	d106      	bne.n	80196ca <_InitRng+0x160>
        rng->status = DRBG_FAILED;
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	2202      	movs	r2, #2
 80196c0:	731a      	strb	r2, [r3, #12]
        ret = RNG_FAILURE_E;
 80196c2:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 80196c6:	627b      	str	r3, [r7, #36]	; 0x24
 80196c8:	e002      	b.n	80196d0 <_InitRng+0x166>
    }
    else {
        rng->status = DRBG_FAILED;
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	2202      	movs	r2, #2
 80196ce:	731a      	strb	r2, [r3, #12]
    }
#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
 80196d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80196d2:	4618      	mov	r0, r3
 80196d4:	372c      	adds	r7, #44	; 0x2c
 80196d6:	46bd      	mov	sp, r7
 80196d8:	bd90      	pop	{r4, r7, pc}

080196da <wc_rng_free>:
}


WOLFSSL_ABI
void wc_rng_free(WC_RNG* rng)
{
 80196da:	b580      	push	{r7, lr}
 80196dc:	b084      	sub	sp, #16
 80196de:	af00      	add	r7, sp, #0
 80196e0:	6078      	str	r0, [r7, #4]
    if (rng) {
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d011      	beq.n	801970c <wc_rng_free+0x32>
        void* heap = rng->heap;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	685b      	ldr	r3, [r3, #4]
 80196ec:	60fb      	str	r3, [r7, #12]

        wc_FreeRng(rng);
 80196ee:	6878      	ldr	r0, [r7, #4]
 80196f0:	f000 f8cc 	bl	801988c <wc_FreeRng>
        ForceZero(rng, sizeof(WC_RNG));
 80196f4:	2110      	movs	r1, #16
 80196f6:	6878      	ldr	r0, [r7, #4]
 80196f8:	f7ff fab2 	bl	8018c60 <ForceZero>
        XFREE(rng, heap, DYNAMIC_TYPE_RNG);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	60bb      	str	r3, [r7, #8]
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d002      	beq.n	801970c <wc_rng_free+0x32>
 8019706:	68b8      	ldr	r0, [r7, #8]
 8019708:	f7ff fa6c 	bl	8018be4 <wolfSSL_Free>
        (void)heap;
    }
}
 801970c:	bf00      	nop
 801970e:	3710      	adds	r7, #16
 8019710:	46bd      	mov	sp, r7
 8019712:	bd80      	pop	{r7, pc}

08019714 <wc_InitRng>:

WOLFSSL_ABI
int wc_InitRng(WC_RNG* rng)
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b084      	sub	sp, #16
 8019718:	af02      	add	r7, sp, #8
 801971a:	6078      	str	r0, [r7, #4]
    return _InitRng(rng, NULL, 0, NULL, INVALID_DEVID);
 801971c:	f06f 0301 	mvn.w	r3, #1
 8019720:	9300      	str	r3, [sp, #0]
 8019722:	2300      	movs	r3, #0
 8019724:	2200      	movs	r2, #0
 8019726:	2100      	movs	r1, #0
 8019728:	6878      	ldr	r0, [r7, #4]
 801972a:	f7ff ff1e 	bl	801956a <_InitRng>
 801972e:	4603      	mov	r3, r0
}
 8019730:	4618      	mov	r0, r3
 8019732:	3708      	adds	r7, #8
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}

08019738 <wc_InitRng_ex>:


int wc_InitRng_ex(WC_RNG* rng, void* heap, int devId)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b086      	sub	sp, #24
 801973c:	af02      	add	r7, sp, #8
 801973e:	60f8      	str	r0, [r7, #12]
 8019740:	60b9      	str	r1, [r7, #8]
 8019742:	607a      	str	r2, [r7, #4]
    return _InitRng(rng, NULL, 0, heap, devId);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	9300      	str	r3, [sp, #0]
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	2200      	movs	r2, #0
 801974c:	2100      	movs	r1, #0
 801974e:	68f8      	ldr	r0, [r7, #12]
 8019750:	f7ff ff0b 	bl	801956a <_InitRng>
 8019754:	4603      	mov	r3, r0
}
 8019756:	4618      	mov	r0, r3
 8019758:	3710      	adds	r7, #16
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}

0801975e <wc_RNG_GenerateBlock>:


/* place a generated block in output */
WOLFSSL_ABI
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
 801975e:	b580      	push	{r7, lr}
 8019760:	b088      	sub	sp, #32
 8019762:	af00      	add	r7, sp, #0
 8019764:	60f8      	str	r0, [r7, #12]
 8019766:	60b9      	str	r1, [r7, #8]
 8019768:	607a      	str	r2, [r7, #4]
    int ret;

    if (rng == NULL || output == NULL)
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d002      	beq.n	8019776 <wc_RNG_GenerateBlock+0x18>
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d102      	bne.n	801977c <wc_RNG_GenerateBlock+0x1e>
        return BAD_FUNC_ARG;
 8019776:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801977a:	e083      	b.n	8019884 <wc_RNG_GenerateBlock+0x126>

    if (sz == 0)
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d101      	bne.n	8019786 <wc_RNG_GenerateBlock+0x28>
        return 0;
 8019782:	2300      	movs	r3, #0
 8019784:	e07e      	b.n	8019884 <wc_RNG_GenerateBlock+0x126>
    XMEMSET(output, 0, sz);
    ret = CUSTOM_RAND_GENERATE_BLOCK(output, sz);
#else

#ifdef HAVE_HASHDRBG
    if (sz > RNG_MAX_BLOCK_LEN)
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801978c:	d902      	bls.n	8019794 <wc_RNG_GenerateBlock+0x36>
        return BAD_FUNC_ARG;
 801978e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8019792:	e077      	b.n	8019884 <wc_RNG_GenerateBlock+0x126>

    if (rng->status != DRBG_OK)
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	7b1b      	ldrb	r3, [r3, #12]
 8019798:	2b01      	cmp	r3, #1
 801979a:	d002      	beq.n	80197a2 <wc_RNG_GenerateBlock+0x44>
        return RNG_FAILURE_E;
 801979c:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 80197a0:	e070      	b.n	8019884 <wc_RNG_GenerateBlock+0x126>

    ret = Hash_DRBG_Generate((DRBG_internal *)rng->drbg, output, sz);
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	689b      	ldr	r3, [r3, #8]
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	68b9      	ldr	r1, [r7, #8]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7ff fd84 	bl	80192b8 <Hash_DRBG_Generate>
 80197b0:	61f8      	str	r0, [r7, #28]
    if (ret == DRBG_NEED_RESEED) {
 80197b2:	69fb      	ldr	r3, [r7, #28]
 80197b4:	2b02      	cmp	r3, #2
 80197b6:	d14e      	bne.n	8019856 <wc_RNG_GenerateBlock+0xf8>
        if (wc_RNG_HealthTestLocal(1) == 0) {
 80197b8:	2001      	movs	r0, #1
 80197ba:	f000 f92d 	bl	8019a18 <wc_RNG_HealthTestLocal>
 80197be:	4603      	mov	r3, r0
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d146      	bne.n	8019852 <wc_RNG_GenerateBlock+0xf4>
        #ifndef WOLFSSL_SMALL_STACK
            byte newSeed[SEED_SZ + SEED_BLOCK_SZ];
            ret = DRBG_SUCCESS;
        #else
            byte* newSeed = (byte*)XMALLOC(SEED_SZ + SEED_BLOCK_SZ, rng->heap,
 80197c4:	2024      	movs	r0, #36	; 0x24
 80197c6:	f7ff f9f1 	bl	8018bac <wolfSSL_Malloc>
 80197ca:	61b8      	str	r0, [r7, #24]
                DYNAMIC_TYPE_SEED);
            ret = (newSeed == NULL) ? MEMORY_E : DRBG_SUCCESS;
 80197cc:	69bb      	ldr	r3, [r7, #24]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d102      	bne.n	80197d8 <wc_RNG_GenerateBlock+0x7a>
 80197d2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80197d6:	e000      	b.n	80197da <wc_RNG_GenerateBlock+0x7c>
 80197d8:	2300      	movs	r3, #0
 80197da:	61fb      	str	r3, [r7, #28]
        #endif
            if (ret == DRBG_SUCCESS) {
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d10b      	bne.n	80197fa <wc_RNG_GenerateBlock+0x9c>
                    if (ret != 0) {
                        ret = DRBG_FAILURE;
                    }
                }
            #else
                ret = wc_GenerateSeed(&rng->seed, newSeed,
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	2224      	movs	r2, #36	; 0x24
 80197e6:	69b9      	ldr	r1, [r7, #24]
 80197e8:	4618      	mov	r0, r3
 80197ea:	f000 f9a9 	bl	8019b40 <wc_GenerateSeed>
 80197ee:	61f8      	str	r0, [r7, #28]
                                  SEED_SZ + SEED_BLOCK_SZ);
            #endif
                if (ret != 0)
 80197f0:	69fb      	ldr	r3, [r7, #28]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d001      	beq.n	80197fa <wc_RNG_GenerateBlock+0x9c>
                    ret = DRBG_FAILURE;
 80197f6:	2301      	movs	r3, #1
 80197f8:	61fb      	str	r3, [r7, #28]
            }
            if (ret == DRBG_SUCCESS)
 80197fa:	69fb      	ldr	r3, [r7, #28]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d104      	bne.n	801980a <wc_RNG_GenerateBlock+0xac>
                ret = wc_RNG_TestSeed(newSeed, SEED_SZ + SEED_BLOCK_SZ);
 8019800:	2124      	movs	r1, #36	; 0x24
 8019802:	69b8      	ldr	r0, [r7, #24]
 8019804:	f7ff fe7a 	bl	80194fc <wc_RNG_TestSeed>
 8019808:	61f8      	str	r0, [r7, #28]

            if (ret == DRBG_SUCCESS)
 801980a:	69fb      	ldr	r3, [r7, #28]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d108      	bne.n	8019822 <wc_RNG_GenerateBlock+0xc4>
                ret = Hash_DRBG_Reseed((DRBG_internal *)rng->drbg,
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	6898      	ldr	r0, [r3, #8]
                                       newSeed + SEED_BLOCK_SZ, SEED_SZ);
 8019814:	69bb      	ldr	r3, [r7, #24]
 8019816:	3304      	adds	r3, #4
                ret = Hash_DRBG_Reseed((DRBG_internal *)rng->drbg,
 8019818:	2220      	movs	r2, #32
 801981a:	4619      	mov	r1, r3
 801981c:	f7ff fb60 	bl	8018ee0 <Hash_DRBG_Reseed>
 8019820:	61f8      	str	r0, [r7, #28]
            if (ret == DRBG_SUCCESS)
 8019822:	69fb      	ldr	r3, [r7, #28]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d107      	bne.n	8019838 <wc_RNG_GenerateBlock+0xda>
                ret = Hash_DRBG_Generate((DRBG_internal *)rng->drbg, output, sz);
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	689b      	ldr	r3, [r3, #8]
 801982c:	687a      	ldr	r2, [r7, #4]
 801982e:	68b9      	ldr	r1, [r7, #8]
 8019830:	4618      	mov	r0, r3
 8019832:	f7ff fd41 	bl	80192b8 <Hash_DRBG_Generate>
 8019836:	61f8      	str	r0, [r7, #28]

            ForceZero(newSeed, sizeof(newSeed));
 8019838:	2104      	movs	r1, #4
 801983a:	69b8      	ldr	r0, [r7, #24]
 801983c:	f7ff fa10 	bl	8018c60 <ForceZero>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(newSeed, rng->heap, DYNAMIC_TYPE_SEED);
 8019840:	69bb      	ldr	r3, [r7, #24]
 8019842:	617b      	str	r3, [r7, #20]
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d005      	beq.n	8019856 <wc_RNG_GenerateBlock+0xf8>
 801984a:	6978      	ldr	r0, [r7, #20]
 801984c:	f7ff f9ca 	bl	8018be4 <wolfSSL_Free>
 8019850:	e001      	b.n	8019856 <wc_RNG_GenerateBlock+0xf8>
        #endif
        }
        else {
            ret = DRBG_CONT_FAILURE;
 8019852:	2303      	movs	r3, #3
 8019854:	61fb      	str	r3, [r7, #28]
        }
    }

    if (ret == DRBG_SUCCESS) {
 8019856:	69fb      	ldr	r3, [r7, #28]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d102      	bne.n	8019862 <wc_RNG_GenerateBlock+0x104>
        ret = 0;
 801985c:	2300      	movs	r3, #0
 801985e:	61fb      	str	r3, [r7, #28]
 8019860:	e00f      	b.n	8019882 <wc_RNG_GenerateBlock+0x124>
    }
    else if (ret == DRBG_CONT_FAILURE) {
 8019862:	69fb      	ldr	r3, [r7, #28]
 8019864:	2b03      	cmp	r3, #3
 8019866:	d106      	bne.n	8019876 <wc_RNG_GenerateBlock+0x118>
        ret = DRBG_CONT_FIPS_E;
 8019868:	f06f 03d0 	mvn.w	r3, #208	; 0xd0
 801986c:	61fb      	str	r3, [r7, #28]
        rng->status = DRBG_CONT_FAILED;
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	2203      	movs	r2, #3
 8019872:	731a      	strb	r2, [r3, #12]
 8019874:	e005      	b.n	8019882 <wc_RNG_GenerateBlock+0x124>
    }
    else {
        ret = RNG_FAILURE_E;
 8019876:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 801987a:	61fb      	str	r3, [r7, #28]
        rng->status = DRBG_FAILED;
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	2202      	movs	r2, #2
 8019880:	731a      	strb	r2, [r3, #12]
    ret = RNG_FAILURE_E;

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
 8019882:	69fb      	ldr	r3, [r7, #28]
}
 8019884:	4618      	mov	r0, r3
 8019886:	3720      	adds	r7, #32
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}

0801988c <wc_FreeRng>:
    return wc_RNG_GenerateBlock(rng, b, 1);
}


int wc_FreeRng(WC_RNG* rng)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b084      	sub	sp, #16
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8019894:	2300      	movs	r3, #0
 8019896:	60fb      	str	r3, [r7, #12]

    if (rng == NULL)
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d102      	bne.n	80198a4 <wc_FreeRng+0x18>
        return BAD_FUNC_ARG;
 801989e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80198a2:	e01e      	b.n	80198e2 <wc_FreeRng+0x56>
#if defined(WOLFSSL_ASYNC_CRYPT)
    wolfAsync_DevCtxFree(&rng->asyncDev, WOLFSSL_ASYNC_MARKER_RNG);
#endif

#ifdef HAVE_HASHDRBG
    if (rng->drbg != NULL) {
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	689b      	ldr	r3, [r3, #8]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d016      	beq.n	80198da <wc_FreeRng+0x4e>
      if (Hash_DRBG_Uninstantiate((DRBG_internal *)rng->drbg) != DRBG_SUCCESS)
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	689b      	ldr	r3, [r3, #8]
 80198b0:	4618      	mov	r0, r3
 80198b2:	f7ff fdfc 	bl	80194ae <Hash_DRBG_Uninstantiate>
 80198b6:	4603      	mov	r3, r0
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d002      	beq.n	80198c2 <wc_FreeRng+0x36>
            ret = RNG_FAILURE_E;
 80198bc:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 80198c0:	60fb      	str	r3, [r7, #12]

    #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
        XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	689b      	ldr	r3, [r3, #8]
 80198c6:	60bb      	str	r3, [r7, #8]
 80198c8:	68bb      	ldr	r3, [r7, #8]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d002      	beq.n	80198d4 <wc_FreeRng+0x48>
 80198ce:	68b8      	ldr	r0, [r7, #8]
 80198d0:	f7ff f988 	bl	8018be4 <wolfSSL_Free>
    #elif defined(WOLFSSL_CHECK_MEM_ZERO)
        wc_MemZero_Check(rng->drbg, sizeof(DRBG_internal));
    #endif
        rng->drbg = NULL;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2200      	movs	r2, #0
 80198d8:	609a      	str	r2, [r3, #8]
    }

    rng->status = DRBG_NOT_INIT;
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	2200      	movs	r2, #0
 80198de:	731a      	strb	r2, [r3, #12]
    /* don't overwrite previously set error */
    if (wc_VersalTrngReset() && !ret)
        ret = WC_HW_E;
#endif

    return ret;
 80198e0:	68fb      	ldr	r3, [r7, #12]
}
 80198e2:	4618      	mov	r0, r3
 80198e4:	3710      	adds	r7, #16
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}

080198ea <wc_RNG_HealthTest>:

#ifdef HAVE_HASHDRBG
int wc_RNG_HealthTest(int reseed, const byte* seedA, word32 seedASz,
                                  const byte* seedB, word32 seedBSz,
                                  byte* output, word32 outputSz)
{
 80198ea:	b580      	push	{r7, lr}
 80198ec:	b08c      	sub	sp, #48	; 0x30
 80198ee:	af08      	add	r7, sp, #32
 80198f0:	60f8      	str	r0, [r7, #12]
 80198f2:	60b9      	str	r1, [r7, #8]
 80198f4:	607a      	str	r2, [r7, #4]
 80198f6:	603b      	str	r3, [r7, #0]
    return wc_RNG_HealthTest_ex(reseed, NULL, 0,
 80198f8:	f06f 0301 	mvn.w	r3, #1
 80198fc:	9306      	str	r3, [sp, #24]
 80198fe:	2300      	movs	r3, #0
 8019900:	9305      	str	r3, [sp, #20]
 8019902:	6a3b      	ldr	r3, [r7, #32]
 8019904:	9304      	str	r3, [sp, #16]
 8019906:	69fb      	ldr	r3, [r7, #28]
 8019908:	9303      	str	r3, [sp, #12]
 801990a:	69bb      	ldr	r3, [r7, #24]
 801990c:	9302      	str	r3, [sp, #8]
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	9301      	str	r3, [sp, #4]
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	9300      	str	r3, [sp, #0]
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	2200      	movs	r2, #0
 801991a:	2100      	movs	r1, #0
 801991c:	68f8      	ldr	r0, [r7, #12]
 801991e:	f000 f805 	bl	801992c <wc_RNG_HealthTest_ex>
 8019922:	4603      	mov	r3, r0
                                seedA, seedASz, seedB, seedBSz,
                                output, outputSz,
                                NULL, INVALID_DEVID);
}
 8019924:	4618      	mov	r0, r3
 8019926:	3710      	adds	r7, #16
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}

0801992c <wc_RNG_HealthTest_ex>:
int wc_RNG_HealthTest_ex(int reseed, const byte* nonce, word32 nonceSz,
                                  const byte* seedA, word32 seedASz,
                                  const byte* seedB, word32 seedBSz,
                                  byte* output, word32 outputSz,
                                  void* heap, int devId)
{
 801992c:	b580      	push	{r7, lr}
 801992e:	b08c      	sub	sp, #48	; 0x30
 8019930:	af04      	add	r7, sp, #16
 8019932:	60f8      	str	r0, [r7, #12]
 8019934:	60b9      	str	r1, [r7, #8]
 8019936:	607a      	str	r2, [r7, #4]
 8019938:	603b      	str	r3, [r7, #0]
    int ret = -1;
 801993a:	f04f 33ff 	mov.w	r3, #4294967295
 801993e:	61fb      	str	r3, [r7, #28]
    DRBG_internal* drbg;
#ifndef WOLFSSL_SMALL_STACK
    DRBG_internal  drbg_var;
#endif

    if (seedA == NULL || output == NULL) {
 8019940:	683b      	ldr	r3, [r7, #0]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d002      	beq.n	801994c <wc_RNG_HealthTest_ex+0x20>
 8019946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019948:	2b00      	cmp	r3, #0
 801994a:	d102      	bne.n	8019952 <wc_RNG_HealthTest_ex+0x26>
        return BAD_FUNC_ARG;
 801994c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8019950:	e05d      	b.n	8019a0e <wc_RNG_HealthTest_ex+0xe2>
    }

    if (reseed != 0 && seedB == NULL) {
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d005      	beq.n	8019964 <wc_RNG_HealthTest_ex+0x38>
 8019958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801995a:	2b00      	cmp	r3, #0
 801995c:	d102      	bne.n	8019964 <wc_RNG_HealthTest_ex+0x38>
        return BAD_FUNC_ARG;
 801995e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8019962:	e054      	b.n	8019a0e <wc_RNG_HealthTest_ex+0xe2>
    }

    if (outputSz != RNG_HEALTH_TEST_CHECK_SIZE) {
 8019964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019966:	2b80      	cmp	r3, #128	; 0x80
 8019968:	d001      	beq.n	801996e <wc_RNG_HealthTest_ex+0x42>
        return ret;
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	e04f      	b.n	8019a0e <wc_RNG_HealthTest_ex+0xe2>
    }

#ifdef WOLFSSL_SMALL_STACK
    drbg = (DRBG_internal*)XMALLOC(sizeof(DRBG_internal), heap,
 801996e:	2080      	movs	r0, #128	; 0x80
 8019970:	f7ff f91c 	bl	8018bac <wolfSSL_Malloc>
 8019974:	61b8      	str	r0, [r7, #24]
        DYNAMIC_TYPE_RNG);
    if (drbg == NULL) {
 8019976:	69bb      	ldr	r3, [r7, #24]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d102      	bne.n	8019982 <wc_RNG_HealthTest_ex+0x56>
        return MEMORY_E;
 801997c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8019980:	e045      	b.n	8019a0e <wc_RNG_HealthTest_ex+0xe2>
    }
#else
    drbg = &drbg_var;
#endif

    if (Hash_DRBG_Instantiate(drbg, seedA, seedASz, nonce, nonceSz,
 8019982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019984:	9302      	str	r3, [sp, #8]
 8019986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019988:	9301      	str	r3, [sp, #4]
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	9300      	str	r3, [sp, #0]
 801998e:	68bb      	ldr	r3, [r7, #8]
 8019990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019992:	6839      	ldr	r1, [r7, #0]
 8019994:	69b8      	ldr	r0, [r7, #24]
 8019996:	f7ff fd41 	bl	801941c <Hash_DRBG_Instantiate>
 801999a:	4603      	mov	r3, r0
 801999c:	2b00      	cmp	r3, #0
 801999e:	d11d      	bne.n	80199dc <wc_RNG_HealthTest_ex+0xb0>
                              heap, devId) != 0) {
        goto exit_rng_ht;
    }

    if (reseed) {
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d007      	beq.n	80199b6 <wc_RNG_HealthTest_ex+0x8a>
        if (Hash_DRBG_Reseed(drbg, seedB, seedBSz) != 0) {
 80199a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80199a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80199aa:	69b8      	ldr	r0, [r7, #24]
 80199ac:	f7ff fa98 	bl	8018ee0 <Hash_DRBG_Reseed>
 80199b0:	4603      	mov	r3, r0
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d114      	bne.n	80199e0 <wc_RNG_HealthTest_ex+0xb4>
    /* This call to generate is prescribed by the NIST DRBGVS
     * procedure. The results are thrown away. The known
     * answer test checks the second block of DRBG out of
     * the generator to ensure the internal state is updated
     * as expected. */
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
 80199b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80199ba:	69b8      	ldr	r0, [r7, #24]
 80199bc:	f7ff fc7c 	bl	80192b8 <Hash_DRBG_Generate>
 80199c0:	4603      	mov	r3, r0
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d10e      	bne.n	80199e4 <wc_RNG_HealthTest_ex+0xb8>
        goto exit_rng_ht;
    }

    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
 80199c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80199ca:	69b8      	ldr	r0, [r7, #24]
 80199cc:	f7ff fc74 	bl	80192b8 <Hash_DRBG_Generate>
 80199d0:	4603      	mov	r3, r0
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d108      	bne.n	80199e8 <wc_RNG_HealthTest_ex+0xbc>
        goto exit_rng_ht;
    }

    /* Mark success */
    ret = 0;
 80199d6:	2300      	movs	r3, #0
 80199d8:	61fb      	str	r3, [r7, #28]
 80199da:	e006      	b.n	80199ea <wc_RNG_HealthTest_ex+0xbe>
        goto exit_rng_ht;
 80199dc:	bf00      	nop
 80199de:	e004      	b.n	80199ea <wc_RNG_HealthTest_ex+0xbe>
            goto exit_rng_ht;
 80199e0:	bf00      	nop
 80199e2:	e002      	b.n	80199ea <wc_RNG_HealthTest_ex+0xbe>
        goto exit_rng_ht;
 80199e4:	bf00      	nop
 80199e6:	e000      	b.n	80199ea <wc_RNG_HealthTest_ex+0xbe>
        goto exit_rng_ht;
 80199e8:	bf00      	nop

exit_rng_ht:

    /* This is safe to call even if Hash_DRBG_Instantiate fails */
    if (Hash_DRBG_Uninstantiate(drbg) != 0) {
 80199ea:	69b8      	ldr	r0, [r7, #24]
 80199ec:	f7ff fd5f 	bl	80194ae <Hash_DRBG_Uninstantiate>
 80199f0:	4603      	mov	r3, r0
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d002      	beq.n	80199fc <wc_RNG_HealthTest_ex+0xd0>
        ret = -1;
 80199f6:	f04f 33ff 	mov.w	r3, #4294967295
 80199fa:	61fb      	str	r3, [r7, #28]
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(drbg, heap, DYNAMIC_TYPE_RNG);
 80199fc:	69bb      	ldr	r3, [r7, #24]
 80199fe:	617b      	str	r3, [r7, #20]
 8019a00:	697b      	ldr	r3, [r7, #20]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d002      	beq.n	8019a0c <wc_RNG_HealthTest_ex+0xe0>
 8019a06:	6978      	ldr	r0, [r7, #20]
 8019a08:	f7ff f8ec 	bl	8018be4 <wolfSSL_Free>
#endif

    return ret;
 8019a0c:	69fb      	ldr	r3, [r7, #28]
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	3720      	adds	r7, #32
 8019a12:	46bd      	mov	sp, r7
 8019a14:	bd80      	pop	{r7, pc}
	...

08019a18 <wc_RNG_HealthTestLocal>:
    0xd4, 0x31, 0xf4, 0xc9, 0xf7, 0x04, 0x27, 0xdf
};


static int wc_RNG_HealthTestLocal(int reseed)
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b092      	sub	sp, #72	; 0x48
 8019a1c:	af08      	add	r7, sp, #32
 8019a1e:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8019a20:	2300      	movs	r3, #0
 8019a22:	627b      	str	r3, [r7, #36]	; 0x24
#else
    byte  check[RNG_HEALTH_TEST_CHECK_SIZE];
#endif

#ifdef WOLFSSL_SMALL_STACK
    check = (byte*)XMALLOC(RNG_HEALTH_TEST_CHECK_SIZE, NULL,
 8019a24:	2080      	movs	r0, #128	; 0x80
 8019a26:	f7ff f8c1 	bl	8018bac <wolfSSL_Malloc>
 8019a2a:	6238      	str	r0, [r7, #32]
                           DYNAMIC_TYPE_TMP_BUFFER);
    if (check == NULL) {
 8019a2c:	6a3b      	ldr	r3, [r7, #32]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d102      	bne.n	8019a38 <wc_RNG_HealthTestLocal+0x20>
        return MEMORY_E;
 8019a32:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8019a36:	e075      	b.n	8019b24 <wc_RNG_HealthTestLocal+0x10c>
    }
#endif

    if (reseed) {
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d021      	beq.n	8019a82 <wc_RNG_HealthTestLocal+0x6a>
        else {
            XMEMCPY_P(seedA, seedA_data, sizeof(seedA_data));
            XMEMCPY_P(reseedSeedA, reseedSeedA_data, sizeof(reseedSeedA_data));
            XMEMCPY_P(outputA, outputA_data, sizeof(outputA_data));
#else
        const byte* seedA = seedA_data;
 8019a3e:	4b3b      	ldr	r3, [pc, #236]	; (8019b2c <wc_RNG_HealthTestLocal+0x114>)
 8019a40:	617b      	str	r3, [r7, #20]
        const byte* reseedSeedA = reseedSeedA_data;
 8019a42:	4b3b      	ldr	r3, [pc, #236]	; (8019b30 <wc_RNG_HealthTestLocal+0x118>)
 8019a44:	613b      	str	r3, [r7, #16]
        const byte* outputA = outputA_data;
 8019a46:	4b3b      	ldr	r3, [pc, #236]	; (8019b34 <wc_RNG_HealthTestLocal+0x11c>)
 8019a48:	60fb      	str	r3, [r7, #12]
#endif
        ret = wc_RNG_HealthTest(1, seedA, sizeof(seedA_data),
 8019a4a:	2380      	movs	r3, #128	; 0x80
 8019a4c:	9302      	str	r3, [sp, #8]
 8019a4e:	6a3b      	ldr	r3, [r7, #32]
 8019a50:	9301      	str	r3, [sp, #4]
 8019a52:	2320      	movs	r3, #32
 8019a54:	9300      	str	r3, [sp, #0]
 8019a56:	693b      	ldr	r3, [r7, #16]
 8019a58:	2230      	movs	r2, #48	; 0x30
 8019a5a:	6979      	ldr	r1, [r7, #20]
 8019a5c:	2001      	movs	r0, #1
 8019a5e:	f7ff ff44 	bl	80198ea <wc_RNG_HealthTest>
 8019a62:	6278      	str	r0, [r7, #36]	; 0x24
                                reseedSeedA, sizeof(reseedSeedA_data),
                                check, RNG_HEALTH_TEST_CHECK_SIZE);
        if (ret == 0) {
 8019a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d153      	bne.n	8019b12 <wc_RNG_HealthTestLocal+0xfa>
            if (ConstantCompare(check, outputA,
 8019a6a:	2280      	movs	r2, #128	; 0x80
 8019a6c:	68f9      	ldr	r1, [r7, #12]
 8019a6e:	6a38      	ldr	r0, [r7, #32]
 8019a70:	f7ff f90f 	bl	8018c92 <ConstantCompare>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d04b      	beq.n	8019b12 <wc_RNG_HealthTestLocal+0xfa>
                                RNG_HEALTH_TEST_CHECK_SIZE) != 0)
                ret = -1;
 8019a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8019a80:	e047      	b.n	8019b12 <wc_RNG_HealthTestLocal+0xfa>
        }
        else {
            XMEMCPY_P(seedB, seedB_data, sizeof(seedB_data));
            XMEMCPY_P(outputB, outputB_data, sizeof(outputB_data));
#else
        const byte* seedB = seedB_data;
 8019a82:	4b2d      	ldr	r3, [pc, #180]	; (8019b38 <wc_RNG_HealthTestLocal+0x120>)
 8019a84:	61fb      	str	r3, [r7, #28]
        const byte* outputB = outputB_data;
 8019a86:	4b2d      	ldr	r3, [pc, #180]	; (8019b3c <wc_RNG_HealthTestLocal+0x124>)
 8019a88:	61bb      	str	r3, [r7, #24]
#endif
        ret = wc_RNG_HealthTest(0, seedB, sizeof(seedB_data),
 8019a8a:	2380      	movs	r3, #128	; 0x80
 8019a8c:	9302      	str	r3, [sp, #8]
 8019a8e:	6a3b      	ldr	r3, [r7, #32]
 8019a90:	9301      	str	r3, [sp, #4]
 8019a92:	2300      	movs	r3, #0
 8019a94:	9300      	str	r3, [sp, #0]
 8019a96:	2300      	movs	r3, #0
 8019a98:	2230      	movs	r2, #48	; 0x30
 8019a9a:	69f9      	ldr	r1, [r7, #28]
 8019a9c:	2000      	movs	r0, #0
 8019a9e:	f7ff ff24 	bl	80198ea <wc_RNG_HealthTest>
 8019aa2:	6278      	str	r0, [r7, #36]	; 0x24
                                NULL, 0,
                                check, RNG_HEALTH_TEST_CHECK_SIZE);
        if (ret == 0) {
 8019aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d10a      	bne.n	8019ac0 <wc_RNG_HealthTestLocal+0xa8>
            if (ConstantCompare(check, outputB,
 8019aaa:	2280      	movs	r2, #128	; 0x80
 8019aac:	69b9      	ldr	r1, [r7, #24]
 8019aae:	6a38      	ldr	r0, [r7, #32]
 8019ab0:	f7ff f8ef 	bl	8018c92 <ConstantCompare>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d002      	beq.n	8019ac0 <wc_RNG_HealthTestLocal+0xa8>
                                RNG_HEALTH_TEST_CHECK_SIZE) != 0)
                ret = -1;
 8019aba:	f04f 33ff 	mov.w	r3, #4294967295
 8019abe:	627b      	str	r3, [r7, #36]	; 0x24

        /* The previous test cases use a large seed instead of a seed and nonce.
         * seedB is actually from a test case with a seed and nonce, and
         * just concatenates them. The pivot point between seed and nonce is
         * byte 32, feed them into the health test separately. */
        if (ret == 0) {
 8019ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d125      	bne.n	8019b12 <wc_RNG_HealthTestLocal+0xfa>
            ret = wc_RNG_HealthTest_ex(0,
 8019ac6:	69fb      	ldr	r3, [r7, #28]
 8019ac8:	f103 0120 	add.w	r1, r3, #32
 8019acc:	f06f 0301 	mvn.w	r3, #1
 8019ad0:	9306      	str	r3, [sp, #24]
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	9305      	str	r3, [sp, #20]
 8019ad6:	2380      	movs	r3, #128	; 0x80
 8019ad8:	9304      	str	r3, [sp, #16]
 8019ada:	6a3b      	ldr	r3, [r7, #32]
 8019adc:	9303      	str	r3, [sp, #12]
 8019ade:	2300      	movs	r3, #0
 8019ae0:	9302      	str	r3, [sp, #8]
 8019ae2:	2300      	movs	r3, #0
 8019ae4:	9301      	str	r3, [sp, #4]
 8019ae6:	2320      	movs	r3, #32
 8019ae8:	9300      	str	r3, [sp, #0]
 8019aea:	69fb      	ldr	r3, [r7, #28]
 8019aec:	2210      	movs	r2, #16
 8019aee:	2000      	movs	r0, #0
 8019af0:	f7ff ff1c 	bl	801992c <wc_RNG_HealthTest_ex>
 8019af4:	6278      	str	r0, [r7, #36]	; 0x24
                                    seedB + 32, sizeof(seedB_data) - 32,
                                    seedB, 32,
                                    NULL, 0,
                                    check, RNG_HEALTH_TEST_CHECK_SIZE,
                                    NULL, INVALID_DEVID);
            if (ret == 0) {
 8019af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d10a      	bne.n	8019b12 <wc_RNG_HealthTestLocal+0xfa>
                if (ConstantCompare(check, outputB, sizeof(outputB_data)) != 0)
 8019afc:	2280      	movs	r2, #128	; 0x80
 8019afe:	69b9      	ldr	r1, [r7, #24]
 8019b00:	6a38      	ldr	r0, [r7, #32]
 8019b02:	f7ff f8c6 	bl	8018c92 <ConstantCompare>
 8019b06:	4603      	mov	r3, r0
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d002      	beq.n	8019b12 <wc_RNG_HealthTestLocal+0xfa>
                    ret = -1;
 8019b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8019b10:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(check, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8019b12:	6a3b      	ldr	r3, [r7, #32]
 8019b14:	60bb      	str	r3, [r7, #8]
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d002      	beq.n	8019b22 <wc_RNG_HealthTestLocal+0x10a>
 8019b1c:	68b8      	ldr	r0, [r7, #8]
 8019b1e:	f7ff f861 	bl	8018be4 <wolfSSL_Free>
#endif

    return ret;
 8019b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019b24:	4618      	mov	r0, r3
 8019b26:	3728      	adds	r7, #40	; 0x28
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	bd80      	pop	{r7, pc}
 8019b2c:	0802bf84 	.word	0x0802bf84
 8019b30:	0802bfb4 	.word	0x0802bfb4
 8019b34:	0802bfd4 	.word	0x0802bfd4
 8019b38:	0802c054 	.word	0x0802c054
 8019b3c:	0802c084 	.word	0x0802c084

08019b40 <wc_GenerateSeed>:
     /* Generate a RNG seed using the hardware random number generator
      * on the STM32F2/F4/F7/L4. */

    #ifdef WOLFSSL_STM32_CUBEMX
    int wc_GenerateSeed(OS_Seed* os, byte* output, word32 sz)
    {
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b08c      	sub	sp, #48	; 0x30
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	60f8      	str	r0, [r7, #12]
 8019b48:	60b9      	str	r1, [r7, #8]
 8019b4a:	607a      	str	r2, [r7, #4]
        int ret;
        RNG_HandleTypeDef hrng;
        word32 i = 0;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        (void)os;

        ret = wolfSSL_CryptHwMutexLock();
 8019b50:	f007 f9a0 	bl	8020e94 <wolfSSL_CryptHwMutexLock>
 8019b54:	62b8      	str	r0, [r7, #40]	; 0x28
        if (ret != 0) {
 8019b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d001      	beq.n	8019b60 <wc_GenerateSeed+0x20>
            return ret;
 8019b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b5e:	e063      	b.n	8019c28 <wc_GenerateSeed+0xe8>
        }

        /* enable RNG clock source */
        __HAL_RCC_RNG_CLK_ENABLE();
 8019b60:	2300      	movs	r3, #0
 8019b62:	617b      	str	r3, [r7, #20]
 8019b64:	4b32      	ldr	r3, [pc, #200]	; (8019c30 <wc_GenerateSeed+0xf0>)
 8019b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b68:	4a31      	ldr	r2, [pc, #196]	; (8019c30 <wc_GenerateSeed+0xf0>)
 8019b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8019b70:	4b2f      	ldr	r3, [pc, #188]	; (8019c30 <wc_GenerateSeed+0xf0>)
 8019b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b78:	617b      	str	r3, [r7, #20]
 8019b7a:	697b      	ldr	r3, [r7, #20]

        /* enable RNG peripheral */
        XMEMSET(&hrng, 0, sizeof(hrng));
 8019b7c:	f107 0318 	add.w	r3, r7, #24
 8019b80:	2210      	movs	r2, #16
 8019b82:	2100      	movs	r1, #0
 8019b84:	4618      	mov	r0, r3
 8019b86:	f007 fbd5 	bl	8021334 <memset>
        hrng.Instance = RNG;
 8019b8a:	4b2a      	ldr	r3, [pc, #168]	; (8019c34 <wc_GenerateSeed+0xf4>)
 8019b8c:	61bb      	str	r3, [r7, #24]
        HAL_RNG_Init(&hrng);
 8019b8e:	f107 0318 	add.w	r3, r7, #24
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7e8 ff0a 	bl	80029ac <HAL_RNG_Init>

        while (i < sz) {
 8019b98:	e03a      	b.n	8019c10 <wc_GenerateSeed+0xd0>
            /* If not aligned or there is odd/remainder */
            if( (i + sizeof(word32)) > sz ||
 8019b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b9c:	3304      	adds	r3, #4
 8019b9e:	687a      	ldr	r2, [r7, #4]
 8019ba0:	429a      	cmp	r2, r3
 8019ba2:	d306      	bcc.n	8019bb2 <wc_GenerateSeed+0x72>
                ((wc_ptr_t)&output[i] % sizeof(word32)) != 0
 8019ba4:	68ba      	ldr	r2, [r7, #8]
 8019ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ba8:	4413      	add	r3, r2
 8019baa:	f003 0303 	and.w	r3, r3, #3
            if( (i + sizeof(word32)) > sz ||
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d01a      	beq.n	8019be8 <wc_GenerateSeed+0xa8>
            ) {
                /* Single byte at a time */
                uint32_t tmpRng = 0;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	613b      	str	r3, [r7, #16]
                if (HAL_RNG_GenerateRandomNumber(&hrng, &tmpRng) != HAL_OK) {
 8019bb6:	f107 0210 	add.w	r2, r7, #16
 8019bba:	f107 0318 	add.w	r3, r7, #24
 8019bbe:	4611      	mov	r1, r2
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	f7e8 ff47 	bl	8002a54 <HAL_RNG_GenerateRandomNumber>
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d004      	beq.n	8019bd6 <wc_GenerateSeed+0x96>
                    wolfSSL_CryptHwMutexUnLock();
 8019bcc:	f007 f97a 	bl	8020ec4 <wolfSSL_CryptHwMutexUnLock>
                    return RAN_BLOCK_E;
 8019bd0:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8019bd4:	e028      	b.n	8019c28 <wc_GenerateSeed+0xe8>
                }
                output[i++] = (byte)tmpRng;
 8019bd6:	6939      	ldr	r1, [r7, #16]
 8019bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bda:	1c5a      	adds	r2, r3, #1
 8019bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019bde:	68ba      	ldr	r2, [r7, #8]
 8019be0:	4413      	add	r3, r2
 8019be2:	b2ca      	uxtb	r2, r1
 8019be4:	701a      	strb	r2, [r3, #0]
            ) {
 8019be6:	e013      	b.n	8019c10 <wc_GenerateSeed+0xd0>
            }
            else {
                /* Use native 32 instruction */
                if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*)&output[i]) != HAL_OK) {
 8019be8:	68ba      	ldr	r2, [r7, #8]
 8019bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bec:	441a      	add	r2, r3
 8019bee:	f107 0318 	add.w	r3, r7, #24
 8019bf2:	4611      	mov	r1, r2
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	f7e8 ff2d 	bl	8002a54 <HAL_RNG_GenerateRandomNumber>
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d004      	beq.n	8019c0a <wc_GenerateSeed+0xca>
                    wolfSSL_CryptHwMutexUnLock();
 8019c00:	f007 f960 	bl	8020ec4 <wolfSSL_CryptHwMutexUnLock>
                    return RAN_BLOCK_E;
 8019c04:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8019c08:	e00e      	b.n	8019c28 <wc_GenerateSeed+0xe8>
                }
                i += sizeof(word32);
 8019c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c0c:	3304      	adds	r3, #4
 8019c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (i < sz) {
 8019c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	429a      	cmp	r2, r3
 8019c16:	d3c0      	bcc.n	8019b9a <wc_GenerateSeed+0x5a>
            }
        }

        HAL_RNG_DeInit(&hrng);
 8019c18:	f107 0318 	add.w	r3, r7, #24
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7e8 feef 	bl	8002a00 <HAL_RNG_DeInit>

        wolfSSL_CryptHwMutexUnLock();
 8019c22:	f007 f94f 	bl	8020ec4 <wolfSSL_CryptHwMutexUnLock>

        return 0;
 8019c26:	2300      	movs	r3, #0
    }
 8019c28:	4618      	mov	r0, r3
 8019c2a:	3730      	adds	r7, #48	; 0x30
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	bd80      	pop	{r7, pc}
 8019c30:	40023800 	.word	0x40023800
 8019c34:	50060800 	.word	0x50060800

08019c38 <ForceZero>:
{
 8019c38:	b480      	push	{r7}
 8019c3a:	b085      	sub	sp, #20
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 8019c46:	e004      	b.n	8019c52 <ForceZero+0x1a>
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	1c5a      	adds	r2, r3, #1
 8019c4c:	60fa      	str	r2, [r7, #12]
 8019c4e:	2200      	movs	r2, #0
 8019c50:	701a      	strb	r2, [r3, #0]
 8019c52:	683b      	ldr	r3, [r7, #0]
 8019c54:	1e5a      	subs	r2, r3, #1
 8019c56:	603a      	str	r2, [r7, #0]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d1f5      	bne.n	8019c48 <ForceZero+0x10>
}
 8019c5c:	bf00      	nop
 8019c5e:	bf00      	nop
 8019c60:	3714      	adds	r7, #20
 8019c62:	46bd      	mov	sp, r7
 8019c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c68:	4770      	bx	lr

08019c6a <ConstantCompare>:
{
 8019c6a:	b480      	push	{r7}
 8019c6c:	b087      	sub	sp, #28
 8019c6e:	af00      	add	r7, sp, #0
 8019c70:	60f8      	str	r0, [r7, #12]
 8019c72:	60b9      	str	r1, [r7, #8]
 8019c74:	607a      	str	r2, [r7, #4]
    int compareSum = 0;
 8019c76:	2300      	movs	r3, #0
 8019c78:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	617b      	str	r3, [r7, #20]
 8019c7e:	e010      	b.n	8019ca2 <ConstantCompare+0x38>
        compareSum |= a[i] ^ b[i];
 8019c80:	697b      	ldr	r3, [r7, #20]
 8019c82:	68fa      	ldr	r2, [r7, #12]
 8019c84:	4413      	add	r3, r2
 8019c86:	781a      	ldrb	r2, [r3, #0]
 8019c88:	697b      	ldr	r3, [r7, #20]
 8019c8a:	68b9      	ldr	r1, [r7, #8]
 8019c8c:	440b      	add	r3, r1
 8019c8e:	781b      	ldrb	r3, [r3, #0]
 8019c90:	4053      	eors	r3, r2
 8019c92:	b2db      	uxtb	r3, r3
 8019c94:	461a      	mov	r2, r3
 8019c96:	693b      	ldr	r3, [r7, #16]
 8019c98:	4313      	orrs	r3, r2
 8019c9a:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 8019c9c:	697b      	ldr	r3, [r7, #20]
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	617b      	str	r3, [r7, #20]
 8019ca2:	697a      	ldr	r2, [r7, #20]
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	429a      	cmp	r2, r3
 8019ca8:	dbea      	blt.n	8019c80 <ConstantCompare+0x16>
    return compareSum;
 8019caa:	693b      	ldr	r3, [r7, #16]
}
 8019cac:	4618      	mov	r0, r3
 8019cae:	371c      	adds	r7, #28
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb6:	4770      	bx	lr

08019cb8 <ctMaskGT>:
{
 8019cb8:	b480      	push	{r7}
 8019cba:	b083      	sub	sp, #12
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
 8019cc0:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)a - b - 1) >> 31) - 1);
 8019cc2:	687a      	ldr	r2, [r7, #4]
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	1ad3      	subs	r3, r2, r3
 8019cc8:	3b01      	subs	r3, #1
 8019cca:	0fdb      	lsrs	r3, r3, #31
 8019ccc:	b2db      	uxtb	r3, r3
 8019cce:	3b01      	subs	r3, #1
 8019cd0:	b2db      	uxtb	r3, r3
}
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	370c      	adds	r7, #12
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cdc:	4770      	bx	lr

08019cde <ctMaskGTE>:
{
 8019cde:	b480      	push	{r7}
 8019ce0:	b083      	sub	sp, #12
 8019ce2:	af00      	add	r7, sp, #0
 8019ce4:	6078      	str	r0, [r7, #4]
 8019ce6:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)a - b    ) >> 31) - 1);
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	1ad3      	subs	r3, r2, r3
 8019cee:	0fdb      	lsrs	r3, r3, #31
 8019cf0:	b2db      	uxtb	r3, r3
 8019cf2:	3b01      	subs	r3, #1
 8019cf4:	b2db      	uxtb	r3, r3
}
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	370c      	adds	r7, #12
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d00:	4770      	bx	lr

08019d02 <ctMaskLT>:
{
 8019d02:	b480      	push	{r7}
 8019d04:	b083      	sub	sp, #12
 8019d06:	af00      	add	r7, sp, #0
 8019d08:	6078      	str	r0, [r7, #4]
 8019d0a:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)b - a - 1) >> 31) - 1);
 8019d0c:	683a      	ldr	r2, [r7, #0]
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	1ad3      	subs	r3, r2, r3
 8019d12:	3b01      	subs	r3, #1
 8019d14:	0fdb      	lsrs	r3, r3, #31
 8019d16:	b2db      	uxtb	r3, r3
 8019d18:	3b01      	subs	r3, #1
 8019d1a:	b2db      	uxtb	r3, r3
}
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	370c      	adds	r7, #12
 8019d20:	46bd      	mov	sp, r7
 8019d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d26:	4770      	bx	lr

08019d28 <ctMaskLTE>:
{
 8019d28:	b480      	push	{r7}
 8019d2a:	b083      	sub	sp, #12
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
 8019d30:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)b - a    ) >> 31) - 1);
 8019d32:	683a      	ldr	r2, [r7, #0]
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	1ad3      	subs	r3, r2, r3
 8019d38:	0fdb      	lsrs	r3, r3, #31
 8019d3a:	b2db      	uxtb	r3, r3
 8019d3c:	3b01      	subs	r3, #1
 8019d3e:	b2db      	uxtb	r3, r3
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	370c      	adds	r7, #12
 8019d44:	46bd      	mov	sp, r7
 8019d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4a:	4770      	bx	lr

08019d4c <ctMaskEq>:
{
 8019d4c:	b590      	push	{r4, r7, lr}
 8019d4e:	b083      	sub	sp, #12
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
 8019d54:	6039      	str	r1, [r7, #0]
    return (byte)(~ctMaskGT(a, b)) & (byte)(~ctMaskLT(a, b));
 8019d56:	6839      	ldr	r1, [r7, #0]
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f7ff ffad 	bl	8019cb8 <ctMaskGT>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	461c      	mov	r4, r3
 8019d62:	6839      	ldr	r1, [r7, #0]
 8019d64:	6878      	ldr	r0, [r7, #4]
 8019d66:	f7ff ffcc 	bl	8019d02 <ctMaskLT>
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	4323      	orrs	r3, r4
 8019d6e:	b2db      	uxtb	r3, r3
 8019d70:	43db      	mvns	r3, r3
 8019d72:	b2db      	uxtb	r3, r3
}
 8019d74:	4618      	mov	r0, r3
 8019d76:	370c      	adds	r7, #12
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd90      	pop	{r4, r7, pc}

08019d7c <ctMask16GT>:
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b083      	sub	sp, #12
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
 8019d84:	6039      	str	r1, [r7, #0]
    return (word16)((((word32)a - b - 1) >> 31) - 1);
 8019d86:	687a      	ldr	r2, [r7, #4]
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	1ad3      	subs	r3, r2, r3
 8019d8c:	3b01      	subs	r3, #1
 8019d8e:	0fdb      	lsrs	r3, r3, #31
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	3b01      	subs	r3, #1
 8019d94:	b29b      	uxth	r3, r3
}
 8019d96:	4618      	mov	r0, r3
 8019d98:	370c      	adds	r7, #12
 8019d9a:	46bd      	mov	sp, r7
 8019d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da0:	4770      	bx	lr

08019da2 <ctMask16LT>:
{
 8019da2:	b480      	push	{r7}
 8019da4:	b083      	sub	sp, #12
 8019da6:	af00      	add	r7, sp, #0
 8019da8:	6078      	str	r0, [r7, #4]
 8019daa:	6039      	str	r1, [r7, #0]
    return (word16)((((word32)b - a - 1) >> 31) - 1);
 8019dac:	683a      	ldr	r2, [r7, #0]
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	1ad3      	subs	r3, r2, r3
 8019db2:	3b01      	subs	r3, #1
 8019db4:	0fdb      	lsrs	r3, r3, #31
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	3b01      	subs	r3, #1
 8019dba:	b29b      	uxth	r3, r3
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	370c      	adds	r7, #12
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc6:	4770      	bx	lr

08019dc8 <ctMask16Eq>:
{
 8019dc8:	b590      	push	{r4, r7, lr}
 8019dca:	b083      	sub	sp, #12
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	6039      	str	r1, [r7, #0]
    return (word16)(~ctMask16GT(a, b)) & (word16)(~ctMask16LT(a, b));
 8019dd2:	6839      	ldr	r1, [r7, #0]
 8019dd4:	6878      	ldr	r0, [r7, #4]
 8019dd6:	f7ff ffd1 	bl	8019d7c <ctMask16GT>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	461c      	mov	r4, r3
 8019dde:	6839      	ldr	r1, [r7, #0]
 8019de0:	6878      	ldr	r0, [r7, #4]
 8019de2:	f7ff ffde 	bl	8019da2 <ctMask16LT>
 8019de6:	4603      	mov	r3, r0
 8019de8:	4323      	orrs	r3, r4
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	43db      	mvns	r3, r3
 8019dee:	b29b      	uxth	r3, r3
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	370c      	adds	r7, #12
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd90      	pop	{r4, r7, pc}

08019df8 <ctMaskNotEq>:
{
 8019df8:	b590      	push	{r4, r7, lr}
 8019dfa:	b083      	sub	sp, #12
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
 8019e00:	6039      	str	r1, [r7, #0]
    return (byte)ctMaskGT(a, b) | (byte)ctMaskLT(a, b);
 8019e02:	6839      	ldr	r1, [r7, #0]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	f7ff ff57 	bl	8019cb8 <ctMaskGT>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	461c      	mov	r4, r3
 8019e0e:	6839      	ldr	r1, [r7, #0]
 8019e10:	6878      	ldr	r0, [r7, #4]
 8019e12:	f7ff ff76 	bl	8019d02 <ctMaskLT>
 8019e16:	4603      	mov	r3, r0
 8019e18:	4323      	orrs	r3, r4
 8019e1a:	b2db      	uxtb	r3, r3
}
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	370c      	adds	r7, #12
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd90      	pop	{r4, r7, pc}

08019e24 <ctMaskSelInt>:
{
 8019e24:	b480      	push	{r7}
 8019e26:	b085      	sub	sp, #20
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	60b9      	str	r1, [r7, #8]
 8019e2e:	607a      	str	r2, [r7, #4]
 8019e30:	73fb      	strb	r3, [r7, #15]
    return (b & (~(signed int)(signed char)m)) |
 8019e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e36:	43da      	mvns	r2, r3
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	401a      	ands	r2, r3
           (a & ( (signed int)(signed char)m));
 8019e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e40:	4619      	mov	r1, r3
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	400b      	ands	r3, r1
    return (b & (~(signed int)(signed char)m)) |
 8019e46:	4313      	orrs	r3, r2
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	3714      	adds	r7, #20
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e52:	4770      	bx	lr

08019e54 <wc_RsaCleanup>:
    RSA_STATE_DECRYPT_RES,
};


static void wc_RsaCleanup(RsaKey* key)
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b084      	sub	sp, #16
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
#if !defined(WOLFSSL_RSA_VERIFY_INLINE) && !defined(WOLFSSL_NO_MALLOC)
    if (key && key->data) {
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d049      	beq.n	8019ef6 <wc_RsaCleanup+0xa2>
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e68:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d042      	beq.n	8019ef6 <wc_RsaCleanup+0xa2>
        /* make sure any allocated memory is free'd */
        if (key->dataIsAlloc) {
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e76:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d02d      	beq.n	8019eda <wc_RsaCleanup+0x86>
        #ifndef WOLFSSL_RSA_PUBLIC_ONLY
            if (key->type == RSA_PRIVATE_DECRYPT ||
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e84:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8019e88:	2b03      	cmp	r3, #3
 8019e8a:	d006      	beq.n	8019e9a <wc_RsaCleanup+0x46>
                key->type == RSA_PRIVATE_ENCRYPT) {
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e92:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
            if (key->type == RSA_PRIVATE_DECRYPT ||
 8019e96:	2b02      	cmp	r3, #2
 8019e98:	d10d      	bne.n	8019eb6 <wc_RsaCleanup+0x62>
                ForceZero(key->data, key->dataLen);
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ea0:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019eaa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019eae:	4619      	mov	r1, r3
 8019eb0:	4610      	mov	r0, r2
 8019eb2:	f7ff fec1 	bl	8019c38 <ForceZero>
            }
        #endif
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ebc:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8019ec0:	60fb      	str	r3, [r7, #12]
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d002      	beq.n	8019ece <wc_RsaCleanup+0x7a>
 8019ec8:	68f8      	ldr	r0, [r7, #12]
 8019eca:	f7fe fe8b 	bl	8018be4 <wolfSSL_Free>
            key->dataIsAlloc = 0;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ed4:	2200      	movs	r2, #0
 8019ed6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
        }
        key->data = NULL;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ee0:	461a      	mov	r2, r3
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
        key->dataLen = 0;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019eee:	461a      	mov	r2, r3
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
    }
#else
    (void)key;
#endif
}
 8019ef6:	bf00      	nop
 8019ef8:	3710      	adds	r7, #16
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}

08019efe <wc_InitRsaKey_ex>:

int wc_InitRsaKey_ex(RsaKey* key, void* heap, int devId)
{
 8019efe:	b5b0      	push	{r4, r5, r7, lr}
 8019f00:	b088      	sub	sp, #32
 8019f02:	af02      	add	r7, sp, #8
 8019f04:	60f8      	str	r0, [r7, #12]
 8019f06:	60b9      	str	r1, [r7, #8]
 8019f08:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	617b      	str	r3, [r7, #20]

    if (key == NULL) {
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d102      	bne.n	8019f1a <wc_InitRsaKey_ex+0x1c>
        return BAD_FUNC_ARG;
 8019f14:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8019f18:	e071      	b.n	8019ffe <wc_InitRsaKey_ex+0x100>
    }

    XMEMSET(key, 0, sizeof(RsaKey));
 8019f1a:	f241 127c 	movw	r2, #4476	; 0x117c
 8019f1e:	2100      	movs	r1, #0
 8019f20:	68f8      	ldr	r0, [r7, #12]
 8019f22:	f007 fa07 	bl	8021334 <memset>

    key->type = RSA_TYPE_UNKNOWN;
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f2c:	461a      	mov	r2, r3
 8019f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f32:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
    key->state = RSA_STATE_NONE;
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f3c:	461a      	mov	r2, r3
 8019f3e:	2300      	movs	r3, #0
 8019f40:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
    key->heap = heap;
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f4a:	461a      	mov	r2, r3
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if !defined(WOLFSSL_RSA_VERIFY_INLINE) && !defined(WOLFSSL_NO_MALLOC)
    key->dataIsAlloc = 0;
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f58:	2200      	movs	r2, #0
 8019f5a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
    key->data = NULL;
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f64:	461a      	mov	r2, r3
 8019f66:	2300      	movs	r3, #0
 8019f68:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
#endif
    key->dataLen = 0;
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f72:	461a      	mov	r2, r3
 8019f74:	2300      	movs	r3, #0
 8019f76:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
#ifdef WC_RSA_BLINDING
    key->rng = NULL;
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019f80:	461a      	mov	r2, r3
 8019f82:	2300      	movs	r3, #0
 8019f84:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
            return ret;
    #endif /* WC_ASYNC_ENABLE_RSA */
#endif /* WOLFSSL_ASYNC_CRYPT */

#ifndef WOLFSSL_RSA_PUBLIC_ONLY
    ret = mp_init_multi(&key->n, &key->e, NULL, NULL, NULL, NULL);
 8019f88:	68f8      	ldr	r0, [r7, #12]
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 8019f90:	2300      	movs	r3, #0
 8019f92:	9301      	str	r3, [sp, #4]
 8019f94:	2300      	movs	r3, #0
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	2300      	movs	r3, #0
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	f006 fa08 	bl	80203b0 <mp_init_multi>
 8019fa0:	6178      	str	r0, [r7, #20]
    if (ret != MP_OKAY)
 8019fa2:	697b      	ldr	r3, [r7, #20]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d001      	beq.n	8019fac <wc_InitRsaKey_ex+0xae>
        return ret;
 8019fa8:	697b      	ldr	r3, [r7, #20]
 8019faa:	e028      	b.n	8019ffe <wc_InitRsaKey_ex+0x100>

#if !defined(WOLFSSL_KEY_GEN) && !defined(OPENSSL_EXTRA) && defined(RSA_LOW_MEM)
    ret = mp_init_multi(&key->d, &key->p, &key->q, NULL, NULL, NULL);
#else
    ret = mp_init_multi(&key->d, &key->p, &key->q, &key->dP, &key->dQ, &key->u);
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	f203 6184 	addw	r1, r3, #1668	; 0x684
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	f503 640b 	add.w	r4, r3, #2224	; 0x8b0
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	f603 25dc 	addw	r5, r3, #2780	; 0xadc
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8019fca:	68fa      	ldr	r2, [r7, #12]
 8019fcc:	f602 7234 	addw	r2, r2, #3892	; 0xf34
 8019fd0:	9201      	str	r2, [sp, #4]
 8019fd2:	9300      	str	r3, [sp, #0]
 8019fd4:	462b      	mov	r3, r5
 8019fd6:	4622      	mov	r2, r4
 8019fd8:	f006 f9ea 	bl	80203b0 <mp_init_multi>
 8019fdc:	6178      	str	r0, [r7, #20]
#endif
    if (ret != MP_OKAY) {
 8019fde:	697b      	ldr	r3, [r7, #20]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d00b      	beq.n	8019ffc <wc_InitRsaKey_ex+0xfe>
        mp_clear(&key->n);
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f006 f9c8 	bl	802037c <mp_clear>
        mp_clear(&key->e);
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f006 f9c2 	bl	802037c <mp_clear>
        return ret;
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	e000      	b.n	8019ffe <wc_InitRsaKey_ex+0x100>

#ifdef WOLFSSL_KCAPI_RSA
    key->handle = NULL;
#endif

    return ret;
 8019ffc:	697b      	ldr	r3, [r7, #20]
}
 8019ffe:	4618      	mov	r0, r3
 801a000:	3718      	adds	r7, #24
 801a002:	46bd      	mov	sp, r7
 801a004:	bdb0      	pop	{r4, r5, r7, pc}

0801a006 <wc_InitRsaKey>:

int wc_InitRsaKey(RsaKey* key, void* heap)
{
 801a006:	b580      	push	{r7, lr}
 801a008:	b082      	sub	sp, #8
 801a00a:	af00      	add	r7, sp, #0
 801a00c:	6078      	str	r0, [r7, #4]
 801a00e:	6039      	str	r1, [r7, #0]
    return wc_InitRsaKey_ex(key, heap, INVALID_DEVID);
 801a010:	f06f 0201 	mvn.w	r2, #1
 801a014:	6839      	ldr	r1, [r7, #0]
 801a016:	6878      	ldr	r0, [r7, #4]
 801a018:	f7ff ff71 	bl	8019efe <wc_InitRsaKey_ex>
 801a01c:	4603      	mov	r3, r0
}
 801a01e:	4618      	mov	r0, r3
 801a020:	3708      	adds	r7, #8
 801a022:	46bd      	mov	sp, r7
 801a024:	bd80      	pop	{r7, pc}

0801a026 <wc_FreeRsaKey>:
    return se050_rsa_get_key_id(key, keyId);
}
#endif /* WOLFSSL_SE050 */

int wc_FreeRsaKey(RsaKey* key)
{
 801a026:	b580      	push	{r7, lr}
 801a028:	b084      	sub	sp, #16
 801a02a:	af00      	add	r7, sp, #0
 801a02c:	6078      	str	r0, [r7, #4]
    int ret = 0;
 801a02e:	2300      	movs	r3, #0
 801a030:	60fb      	str	r3, [r7, #12]

    if (key == NULL) {
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d102      	bne.n	801a03e <wc_FreeRsaKey+0x18>
        return BAD_FUNC_ARG;
 801a038:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801a03c:	e05d      	b.n	801a0fa <wc_FreeRsaKey+0xd4>
    }

    wc_RsaCleanup(key);
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	f7ff ff08 	bl	8019e54 <wc_RsaCleanup>
#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_RSA)
    wolfAsync_DevCtxFree(&key->asyncDev, WOLFSSL_ASYNC_MARKER_RSA);
#endif

#ifndef WOLFSSL_RSA_PUBLIC_ONLY
    if (key->type == RSA_PRIVATE) {
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a04a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801a04e:	2b01      	cmp	r3, #1
 801a050:	d124      	bne.n	801a09c <wc_FreeRsaKey+0x76>
#if defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || !defined(RSA_LOW_MEM)
        mp_forcezero(&key->u);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 801a058:	4618      	mov	r0, r3
 801a05a:	f006 f97a 	bl	8020352 <mp_forcezero>
        mp_forcezero(&key->dQ);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 801a064:	4618      	mov	r0, r3
 801a066:	f006 f974 	bl	8020352 <mp_forcezero>
        mp_forcezero(&key->dP);
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 801a070:	4618      	mov	r0, r3
 801a072:	f006 f96e 	bl	8020352 <mp_forcezero>
#endif
        mp_forcezero(&key->q);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801a07c:	4618      	mov	r0, r3
 801a07e:	f006 f968 	bl	8020352 <mp_forcezero>
        mp_forcezero(&key->p);
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	f203 6384 	addw	r3, r3, #1668	; 0x684
 801a088:	4618      	mov	r0, r3
 801a08a:	f006 f962 	bl	8020352 <mp_forcezero>
        mp_forcezero(&key->d);
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801a094:	4618      	mov	r0, r3
 801a096:	f006 f95c 	bl	8020352 <mp_forcezero>
 801a09a:	e023      	b.n	801a0e4 <wc_FreeRsaKey+0xbe>
    }
    else {
        /* private part */
#if defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || !defined(RSA_LOW_MEM)
        mp_clear(&key->u);
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f006 f96a 	bl	802037c <mp_clear>
        mp_clear(&key->dQ);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	f006 f964 	bl	802037c <mp_clear>
        mp_clear(&key->dP);
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	f006 f95e 	bl	802037c <mp_clear>
#endif
        mp_clear(&key->q);
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	f006 f958 	bl	802037c <mp_clear>
        mp_clear(&key->p);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	f203 6384 	addw	r3, r3, #1668	; 0x684
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f006 f952 	bl	802037c <mp_clear>
        mp_clear(&key->d);
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801a0de:	4618      	mov	r0, r3
 801a0e0:	f006 f94c 	bl	802037c <mp_clear>
    }
#endif /* WOLFSSL_RSA_PUBLIC_ONLY */

    /* public part */
    mp_clear(&key->e);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f006 f946 	bl	802037c <mp_clear>
    mp_clear(&key->n);
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f006 f942 	bl	802037c <mp_clear>

#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(RsaKey));
#endif

    return ret;
 801a0f8:	68fb      	ldr	r3, [r7, #12]
}
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	3710      	adds	r7, #16
 801a0fe:	46bd      	mov	sp, r7
 801a100:	bd80      	pop	{r7, pc}

0801a102 <RsaMGF1>:
   outSz: size of output buffer
 */
#if !defined(NO_SHA) || !defined(NO_SHA256) || defined(WOLFSSL_SHA384) || defined(WOLFSSL_SHA512)
static int RsaMGF1(enum wc_HashType hType, byte* seed, word32 seedSz,
                                        byte* out, word32 outSz, void* heap)
{
 801a102:	b580      	push	{r7, lr}
 801a104:	b09a      	sub	sp, #104	; 0x68
 801a106:	af02      	add	r7, sp, #8
 801a108:	60b9      	str	r1, [r7, #8]
 801a10a:	607a      	str	r2, [r7, #4]
 801a10c:	603b      	str	r3, [r7, #0]
 801a10e:	4603      	mov	r3, r0
 801a110:	73fb      	strb	r3, [r7, #15]
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
    byte* tmp = NULL;
 801a112:	2300      	movs	r3, #0
 801a114:	65fb      	str	r3, [r7, #92]	; 0x5c
    byte   tmpF = 0;     /* 1 if dynamic memory needs freed */
 801a116:	2300      	movs	r3, #0
 801a118:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
#else
    byte tmp[RSA_MAX_SIZE/8];
#endif
    /* needs to be large enough for seed size plus counter(4) */
    byte  tmpA[WC_MAX_DIGEST_SIZE + 4];
    word32 tmpSz = 0;
 801a11c:	2300      	movs	r3, #0
 801a11e:	657b      	str	r3, [r7, #84]	; 0x54
    word32 counter;
    word32 idx;
#ifdef WOLFSSL_SMALL_STACK_CACHE
    wc_HashAlg *hash;
#endif
    hLen    = wc_HashGetDigestSize(hType);
 801a120:	7bfb      	ldrb	r3, [r7, #15]
 801a122:	4618      	mov	r0, r3
 801a124:	f7fe f9f8 	bl	8018518 <wc_HashGetDigestSize>
 801a128:	6478      	str	r0, [r7, #68]	; 0x44
    counter = 0;
 801a12a:	2300      	movs	r3, #0
 801a12c:	653b      	str	r3, [r7, #80]	; 0x50
    idx     = 0;
 801a12e:	2300      	movs	r3, #0
 801a130:	64fb      	str	r3, [r7, #76]	; 0x4c

    (void)heap;

    XMEMSET(tmpA, 0, sizeof(tmpA));
 801a132:	f107 0314 	add.w	r3, r7, #20
 801a136:	2224      	movs	r2, #36	; 0x24
 801a138:	2100      	movs	r1, #0
 801a13a:	4618      	mov	r0, r3
 801a13c:	f007 f8fa 	bl	8021334 <memset>
    /* check error return of wc_HashGetDigestSize */
    if (hLen < 0) {
 801a140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a142:	2b00      	cmp	r3, #0
 801a144:	da01      	bge.n	801a14a <RsaMGF1+0x48>
        return hLen;
 801a146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a148:	e08f      	b.n	801a26a <RsaMGF1+0x168>
    }

    /* if tmp is not large enough than use some dynamic memory */
    if ((seedSz + 4) > sizeof(tmpA) || (word32)hLen > sizeof(tmpA)) {
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	3304      	adds	r3, #4
 801a14e:	2b24      	cmp	r3, #36	; 0x24
 801a150:	d802      	bhi.n	801a158 <RsaMGF1+0x56>
 801a152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a154:	2b24      	cmp	r3, #36	; 0x24
 801a156:	d914      	bls.n	801a182 <RsaMGF1+0x80>
        /* find largest amount of memory needed which will be the max of
         * hLen and (seedSz + 4) since tmp is used to store the hash digest */
        tmpSz = ((seedSz + 4) > (word32)hLen)? seedSz + 4: (word32)hLen;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	1d1a      	adds	r2, r3, #4
 801a15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a15e:	4293      	cmp	r3, r2
 801a160:	bf38      	it	cc
 801a162:	4613      	movcc	r3, r2
 801a164:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
        tmp = (byte*)XMALLOC(tmpSz, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a166:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a168:	f7fe fd20 	bl	8018bac <wolfSSL_Malloc>
 801a16c:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (tmp == NULL) {
 801a16e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a170:	2b00      	cmp	r3, #0
 801a172:	d102      	bne.n	801a17a <RsaMGF1+0x78>
            return MEMORY_E;
 801a174:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801a178:	e077      	b.n	801a26a <RsaMGF1+0x168>
        }
        tmpF = 1; /* make sure to free memory when done */
 801a17a:	2301      	movs	r3, #1
 801a17c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801a180:	e007      	b.n	801a192 <RsaMGF1+0x90>
#endif
    }
    else {
        /* use array on the stack */
    #ifndef WOLFSSL_SMALL_STACK_CACHE
        tmpSz = sizeof(tmpA);
 801a182:	2324      	movs	r3, #36	; 0x24
 801a184:	657b      	str	r3, [r7, #84]	; 0x54
    #endif
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
        tmp  = tmpA;
 801a186:	f107 0314 	add.w	r3, r7, #20
 801a18a:	65fb      	str	r3, [r7, #92]	; 0x5c
        tmpF = 0; /* no need to free memory at end */
 801a18c:	2300      	movs	r3, #0
 801a18e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        return ret;
    }
#endif

    do {
        int i = 0;
 801a192:	2300      	movs	r3, #0
 801a194:	64bb      	str	r3, [r7, #72]	; 0x48
        XMEMCPY(tmp, seed, seedSz);
 801a196:	687a      	ldr	r2, [r7, #4]
 801a198:	68b9      	ldr	r1, [r7, #8]
 801a19a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801a19c:	f007 f8a2 	bl	80212e4 <memcpy>

        /* counter to byte array appended to tmp */
        tmp[seedSz]     = (byte)((counter >> 24) & 0xFF);
 801a1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1a2:	0e19      	lsrs	r1, r3, #24
 801a1a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	4413      	add	r3, r2
 801a1aa:	b2ca      	uxtb	r2, r1
 801a1ac:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 1] = (byte)((counter >> 16) & 0xFF);
 801a1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1b0:	0c19      	lsrs	r1, r3, #16
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	3301      	adds	r3, #1
 801a1b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a1b8:	4413      	add	r3, r2
 801a1ba:	b2ca      	uxtb	r2, r1
 801a1bc:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 2] = (byte)((counter >>  8) & 0xFF);
 801a1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1c0:	0a19      	lsrs	r1, r3, #8
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	3302      	adds	r3, #2
 801a1c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a1c8:	4413      	add	r3, r2
 801a1ca:	b2ca      	uxtb	r2, r1
 801a1cc:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 3] = (byte)((counter)       & 0xFF);
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	3303      	adds	r3, #3
 801a1d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a1d4:	4413      	add	r3, r2
 801a1d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a1d8:	b2d2      	uxtb	r2, r2
 801a1da:	701a      	strb	r2, [r3, #0]
        ret = wc_HashUpdate(hash, hType, tmp, (seedSz + 4));
        if (ret == 0) {
            ret = wc_HashFinal(hash, hType, tmp);
        }
#else
        ret = wc_Hash(hType, tmp, (seedSz + 4), tmp, tmpSz);
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	1d1a      	adds	r2, r3, #4
 801a1e0:	7bf8      	ldrb	r0, [r7, #15]
 801a1e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1e4:	9300      	str	r3, [sp, #0]
 801a1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a1e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801a1ea:	f7fe f9d7 	bl	801859c <wc_Hash>
 801a1ee:	6438      	str	r0, [r7, #64]	; 0x40
#endif
        if (ret != 0) {
 801a1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d00d      	beq.n	801a212 <RsaMGF1+0x110>
            /* check for if dynamic memory was needed, then free */
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
            if (tmpF) {
 801a1f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d007      	beq.n	801a20e <RsaMGF1+0x10c>
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a1fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a200:	63bb      	str	r3, [r7, #56]	; 0x38
 801a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a204:	2b00      	cmp	r3, #0
 801a206:	d002      	beq.n	801a20e <RsaMGF1+0x10c>
 801a208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a20a:	f7fe fceb 	bl	8018be4 <wolfSSL_Free>
            }
#endif
            return ret;
 801a20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a210:	e02b      	b.n	801a26a <RsaMGF1+0x168>
        }

        for (i = 0; i < hLen && idx < outSz; i++) {
 801a212:	2300      	movs	r3, #0
 801a214:	64bb      	str	r3, [r7, #72]	; 0x48
 801a216:	e00c      	b.n	801a232 <RsaMGF1+0x130>
            out[idx++] = tmp[i];
 801a218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a21a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a21c:	441a      	add	r2, r3
 801a21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a220:	1c59      	adds	r1, r3, #1
 801a222:	64f9      	str	r1, [r7, #76]	; 0x4c
 801a224:	6839      	ldr	r1, [r7, #0]
 801a226:	440b      	add	r3, r1
 801a228:	7812      	ldrb	r2, [r2, #0]
 801a22a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < hLen && idx < outSz; i++) {
 801a22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a22e:	3301      	adds	r3, #1
 801a230:	64bb      	str	r3, [r7, #72]	; 0x48
 801a232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a236:	429a      	cmp	r2, r3
 801a238:	da03      	bge.n	801a242 <RsaMGF1+0x140>
 801a23a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a23c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a23e:	429a      	cmp	r2, r3
 801a240:	d3ea      	bcc.n	801a218 <RsaMGF1+0x116>
        }
        counter++;
 801a242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a244:	3301      	adds	r3, #1
 801a246:	653b      	str	r3, [r7, #80]	; 0x50
    } while (idx < outSz);
 801a248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a24a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a24c:	429a      	cmp	r2, r3
 801a24e:	d3a0      	bcc.n	801a192 <RsaMGF1+0x90>
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
    /* check for if dynamic memory was needed, then free */
    if (tmpF) {
 801a250:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801a254:	2b00      	cmp	r3, #0
 801a256:	d007      	beq.n	801a268 <RsaMGF1+0x166>
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d002      	beq.n	801a268 <RsaMGF1+0x166>
 801a262:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a264:	f7fe fcbe 	bl	8018be4 <wolfSSL_Free>
#ifdef WOLFSSL_SMALL_STACK_CACHE
    wc_HashFree(hash, hType);
    XFREE(hash, heap, DYNAMIC_TYPE_DIGEST);
#endif

    return 0;
 801a268:	2300      	movs	r3, #0
}
 801a26a:	4618      	mov	r0, r3
 801a26c:	3760      	adds	r7, #96	; 0x60
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}

0801a272 <RsaMGF>:
/* helper function to direct which mask generation function is used
   switched on type input
 */
static int RsaMGF(int type, byte* seed, word32 seedSz, byte* out,
                                                    word32 outSz, void* heap)
{
 801a272:	b580      	push	{r7, lr}
 801a274:	b088      	sub	sp, #32
 801a276:	af02      	add	r7, sp, #8
 801a278:	60f8      	str	r0, [r7, #12]
 801a27a:	60b9      	str	r1, [r7, #8]
 801a27c:	607a      	str	r2, [r7, #4]
 801a27e:	603b      	str	r3, [r7, #0]
    int ret;

    switch(type) {
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	2b01      	cmp	r3, #1
 801a284:	d10b      	bne.n	801a29e <RsaMGF+0x2c>
        case WC_MGF1SHA224:
            ret = RsaMGF1(WC_HASH_TYPE_SHA224, seed, seedSz, out, outSz, heap);
            break;
    #endif
        case WC_MGF1SHA256:
            ret = RsaMGF1(WC_HASH_TYPE_SHA256, seed, seedSz, out, outSz, heap);
 801a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a288:	9301      	str	r3, [sp, #4]
 801a28a:	6a3b      	ldr	r3, [r7, #32]
 801a28c:	9300      	str	r3, [sp, #0]
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	687a      	ldr	r2, [r7, #4]
 801a292:	68b9      	ldr	r1, [r7, #8]
 801a294:	2006      	movs	r0, #6
 801a296:	f7ff ff34 	bl	801a102 <RsaMGF1>
 801a29a:	6178      	str	r0, [r7, #20]
            break;
 801a29c:	e002      	b.n	801a2a4 <RsaMGF+0x32>
            break;
        #endif
    #endif
        default:
            WOLFSSL_MSG("Unknown MGF type: check build options");
            ret = BAD_FUNC_ARG;
 801a29e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801a2a2:	617b      	str	r3, [r7, #20]
    (void)seedSz;
    (void)out;
    (void)outSz;
    (void)heap;

    return ret;
 801a2a4:	697b      	ldr	r3, [r7, #20]
}
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	3718      	adds	r7, #24
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd80      	pop	{r7, pc}

0801a2ae <RsaUnPad_OAEP>:
/* UnPad plaintext, set start to *output, return length of plaintext,
 * < 0 on error */
static int RsaUnPad_OAEP(byte *pkcsBlock, unsigned int pkcsBlockLen,
                            byte **output, enum wc_HashType hType, int mgf,
                            byte* optLabel, word32 labelLen, void* heap)
{
 801a2ae:	b580      	push	{r7, lr}
 801a2b0:	b098      	sub	sp, #96	; 0x60
 801a2b2:	af02      	add	r7, sp, #8
 801a2b4:	60f8      	str	r0, [r7, #12]
 801a2b6:	60b9      	str	r1, [r7, #8]
 801a2b8:	607a      	str	r2, [r7, #4]
 801a2ba:	70fb      	strb	r3, [r7, #3]
    word32 idx;
    word32 i;
    word32 inc;

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
    byte* tmp  = NULL;
 801a2bc:	2300      	movs	r3, #0
 801a2be:	64bb      	str	r3, [r7, #72]	; 0x48
#else
    byte tmp[RSA_MAX_SIZE/8 + RSA_PSS_PAD_SZ];
#endif

    /* no label is allowed, but catch if no label provided and length > 0 */
    if (optLabel == NULL && labelLen > 0) {
 801a2c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d105      	bne.n	801a2d2 <RsaUnPad_OAEP+0x24>
 801a2c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d002      	beq.n	801a2d2 <RsaUnPad_OAEP+0x24>
        return BUFFER_E;
 801a2cc:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801a2d0:	e115      	b.n	801a4fe <RsaUnPad_OAEP+0x250>
    }

    hLen = wc_HashGetDigestSize(hType);
 801a2d2:	78fb      	ldrb	r3, [r7, #3]
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7fe f91f 	bl	8018518 <wc_HashGetDigestSize>
 801a2da:	6478      	str	r0, [r7, #68]	; 0x44
    if ((hLen < 0) || (pkcsBlockLen < (2 * (word32)hLen + 2))) {
 801a2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	db05      	blt.n	801a2ee <RsaUnPad_OAEP+0x40>
 801a2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2e4:	3301      	adds	r3, #1
 801a2e6:	005b      	lsls	r3, r3, #1
 801a2e8:	68ba      	ldr	r2, [r7, #8]
 801a2ea:	429a      	cmp	r2, r3
 801a2ec:	d202      	bcs.n	801a2f4 <RsaUnPad_OAEP+0x46>
        return BAD_FUNC_ARG;
 801a2ee:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801a2f2:	e104      	b.n	801a4fe <RsaUnPad_OAEP+0x250>
    }

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
    tmp = (byte*)XMALLOC(pkcsBlockLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a2f4:	68b8      	ldr	r0, [r7, #8]
 801a2f6:	f7fe fc59 	bl	8018bac <wolfSSL_Malloc>
 801a2fa:	64b8      	str	r0, [r7, #72]	; 0x48
    if (tmp == NULL) {
 801a2fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d102      	bne.n	801a308 <RsaUnPad_OAEP+0x5a>
        return MEMORY_E;
 801a302:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801a306:	e0fa      	b.n	801a4fe <RsaUnPad_OAEP+0x250>
    }
#endif
    XMEMSET(tmp, 0, pkcsBlockLen);
 801a308:	68ba      	ldr	r2, [r7, #8]
 801a30a:	2100      	movs	r1, #0
 801a30c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a30e:	f007 f811 	bl	8021334 <memset>
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("OAEP UnPad temp", tmp, pkcsBlockLen);
#endif

    /* find seedMask value */
    if ((ret = RsaMGF(mgf, (byte*)(pkcsBlock + (hLen + 1)),
 801a312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a314:	3301      	adds	r3, #1
 801a316:	68fa      	ldr	r2, [r7, #12]
 801a318:	18d1      	adds	r1, r2, r3
                            pkcsBlockLen - hLen - 1, tmp, hLen, heap)) != 0) {
 801a31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a31c:	68ba      	ldr	r2, [r7, #8]
 801a31e:	1ad3      	subs	r3, r2, r3
    if ((ret = RsaMGF(mgf, (byte*)(pkcsBlock + (hLen + 1)),
 801a320:	1e58      	subs	r0, r3, #1
 801a322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a324:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a326:	9201      	str	r2, [sp, #4]
 801a328:	9300      	str	r3, [sp, #0]
 801a32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a32c:	4602      	mov	r2, r0
 801a32e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801a330:	f7ff ff9f 	bl	801a272 <RsaMGF>
 801a334:	6438      	str	r0, [r7, #64]	; 0x40
 801a336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d009      	beq.n	801a350 <RsaUnPad_OAEP+0xa2>
#ifdef WOLFSSL_SMALL_STACK
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a33e:	637b      	str	r3, [r7, #52]	; 0x34
 801a340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a342:	2b00      	cmp	r3, #0
 801a344:	d002      	beq.n	801a34c <RsaUnPad_OAEP+0x9e>
 801a346:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a348:	f7fe fc4c 	bl	8018be4 <wolfSSL_Free>
#endif
        return ret;
 801a34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a34e:	e0d6      	b.n	801a4fe <RsaUnPad_OAEP+0x250>
    }

    /* xor seedMask value with maskedSeed to get seed value */
    for (idx = 0; idx < (word32)hLen; idx++) {
 801a350:	2300      	movs	r3, #0
 801a352:	657b      	str	r3, [r7, #84]	; 0x54
 801a354:	e011      	b.n	801a37a <RsaUnPad_OAEP+0xcc>
        tmp[idx] = tmp[idx] ^ pkcsBlock[1 + idx];
 801a356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a35a:	4413      	add	r3, r2
 801a35c:	7819      	ldrb	r1, [r3, #0]
 801a35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a360:	3301      	adds	r3, #1
 801a362:	68fa      	ldr	r2, [r7, #12]
 801a364:	4413      	add	r3, r2
 801a366:	781a      	ldrb	r2, [r3, #0]
 801a368:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a36c:	4403      	add	r3, r0
 801a36e:	404a      	eors	r2, r1
 801a370:	b2d2      	uxtb	r2, r2
 801a372:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < (word32)hLen; idx++) {
 801a374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a376:	3301      	adds	r3, #1
 801a378:	657b      	str	r3, [r7, #84]	; 0x54
 801a37a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a37c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a37e:	429a      	cmp	r2, r3
 801a380:	d3e9      	bcc.n	801a356 <RsaUnPad_OAEP+0xa8>
    }

    /* get dbMask value */
    if ((ret = RsaMGF(mgf, tmp, hLen, tmp + hLen,
 801a382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a388:	18d0      	adds	r0, r2, r3
                                       pkcsBlockLen - hLen - 1, heap)) != 0) {
 801a38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a38c:	68ba      	ldr	r2, [r7, #8]
 801a38e:	1ad3      	subs	r3, r2, r3
    if ((ret = RsaMGF(mgf, tmp, hLen, tmp + hLen,
 801a390:	3b01      	subs	r3, #1
 801a392:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a394:	9201      	str	r2, [sp, #4]
 801a396:	9300      	str	r3, [sp, #0]
 801a398:	4603      	mov	r3, r0
 801a39a:	460a      	mov	r2, r1
 801a39c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a39e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801a3a0:	f7ff ff67 	bl	801a272 <RsaMGF>
 801a3a4:	6438      	str	r0, [r7, #64]	; 0x40
 801a3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d00e      	beq.n	801a3ca <RsaUnPad_OAEP+0x11c>
        ForceZero(tmp, hLen);
 801a3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3ae:	4619      	mov	r1, r3
 801a3b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a3b2:	f7ff fc41 	bl	8019c38 <ForceZero>
#ifdef WOLFSSL_SMALL_STACK
        XFREE(tmp, NULL, DYNAMIC_TYPE_RSA_BUFFER);
 801a3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 801a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d002      	beq.n	801a3c6 <RsaUnPad_OAEP+0x118>
 801a3c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a3c2:	f7fe fc0f 	bl	8018be4 <wolfSSL_Free>
#elif defined(WOLFSSL_CHECK_MEM_ZERO)
        wc_MemZero_Check(tmp, hLen);
#endif
        return ret;
 801a3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3c8:	e099      	b.n	801a4fe <RsaUnPad_OAEP+0x250>
    }

    /* get DB value by doing maskedDB xor dbMask */
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	657b      	str	r3, [r7, #84]	; 0x54
 801a3ce:	e018      	b.n	801a402 <RsaUnPad_OAEP+0x154>
        pkcsBlock[hLen + 1 + idx] = pkcsBlock[hLen + 1 + idx] ^ tmp[idx + hLen];
 801a3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3d4:	4413      	add	r3, r2
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	68fa      	ldr	r2, [r7, #12]
 801a3da:	4413      	add	r3, r2
 801a3dc:	7819      	ldrb	r1, [r3, #0]
 801a3de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3e2:	4413      	add	r3, r2
 801a3e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a3e6:	4413      	add	r3, r2
 801a3e8:	781a      	ldrb	r2, [r3, #0]
 801a3ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3ee:	4403      	add	r3, r0
 801a3f0:	3301      	adds	r3, #1
 801a3f2:	68f8      	ldr	r0, [r7, #12]
 801a3f4:	4403      	add	r3, r0
 801a3f6:	404a      	eors	r2, r1
 801a3f8:	b2d2      	uxtb	r2, r2
 801a3fa:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
 801a3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3fe:	3301      	adds	r3, #1
 801a400:	657b      	str	r3, [r7, #84]	; 0x54
 801a402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a404:	68ba      	ldr	r2, [r7, #8]
 801a406:	1ad3      	subs	r3, r2, r3
 801a408:	3b01      	subs	r3, #1
 801a40a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a40c:	429a      	cmp	r2, r3
 801a40e:	d3df      	bcc.n	801a3d0 <RsaUnPad_OAEP+0x122>
    }

    ForceZero(tmp, pkcsBlockLen);
 801a410:	68b9      	ldr	r1, [r7, #8]
 801a412:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a414:	f7ff fc10 	bl	8019c38 <ForceZero>
#ifdef WOLFSSL_SMALL_STACK
    /* done with use of tmp buffer */
    XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a41a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d002      	beq.n	801a428 <RsaUnPad_OAEP+0x17a>
 801a422:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a424:	f7fe fbde 	bl	8018be4 <wolfSSL_Free>
#elif defined(WOLFSSL_CHECK_MEM_ZERO)
    wc_MemZero_Check(tmp, pkcsBlockLen);
#endif

    /* advance idx to index of PS and msg separator, account for PS size of 0*/
    idx = hLen + 1 + hLen;
 801a428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a42a:	1c5a      	adds	r2, r3, #1
 801a42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a42e:	4413      	add	r3, r2
 801a430:	657b      	str	r3, [r7, #84]	; 0x54
    /* Don't reveal length of message: look at every byte. */
    inc = 1;
 801a432:	2301      	movs	r3, #1
 801a434:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (i = hLen + 1 + hLen; i < pkcsBlockLen - 1; i++) {
 801a436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a438:	1c5a      	adds	r2, r3, #1
 801a43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a43c:	4413      	add	r3, r2
 801a43e:	653b      	str	r3, [r7, #80]	; 0x50
 801a440:	e010      	b.n	801a464 <RsaUnPad_OAEP+0x1b6>
        /* Looking for non-zero byte. */
        inc &= 1 - (((word32)0 - pkcsBlock[i]) >> 31);
 801a442:	68fa      	ldr	r2, [r7, #12]
 801a444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a446:	4413      	add	r3, r2
 801a448:	781b      	ldrb	r3, [r3, #0]
 801a44a:	425b      	negs	r3, r3
 801a44c:	17db      	asrs	r3, r3, #31
 801a44e:	3301      	adds	r3, #1
 801a450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a452:	4013      	ands	r3, r2
 801a454:	64fb      	str	r3, [r7, #76]	; 0x4c
        idx += inc;
 801a456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a45a:	4413      	add	r3, r2
 801a45c:	657b      	str	r3, [r7, #84]	; 0x54
    for (i = hLen + 1 + hLen; i < pkcsBlockLen - 1; i++) {
 801a45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a460:	3301      	adds	r3, #1
 801a462:	653b      	str	r3, [r7, #80]	; 0x50
 801a464:	68bb      	ldr	r3, [r7, #8]
 801a466:	3b01      	subs	r3, #1
 801a468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a46a:	429a      	cmp	r2, r3
 801a46c:	d3e9      	bcc.n	801a442 <RsaUnPad_OAEP+0x194>
    }

    /* create hash of label for comparison with hash sent */
    if ((ret = wc_Hash(hType, optLabel, labelLen, h, hLen)) != 0) {
 801a46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a470:	f107 0214 	add.w	r2, r7, #20
 801a474:	78f8      	ldrb	r0, [r7, #3]
 801a476:	9300      	str	r3, [sp, #0]
 801a478:	4613      	mov	r3, r2
 801a47a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a47c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801a47e:	f7fe f88d 	bl	801859c <wc_Hash>
 801a482:	6438      	str	r0, [r7, #64]	; 0x40
 801a484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a486:	2b00      	cmp	r3, #0
 801a488:	d001      	beq.n	801a48e <RsaUnPad_OAEP+0x1e0>
        return ret;
 801a48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a48c:	e037      	b.n	801a4fe <RsaUnPad_OAEP+0x250>
       Comparison of lHash, Y, and separator value needs to all happen in
       constant time.
       Attackers should not be able to get error condition from the timing of
       these checks.
     */
    ret = 0;
 801a48e:	2300      	movs	r3, #0
 801a490:	643b      	str	r3, [r7, #64]	; 0x40
    ret |= ConstantCompare(pkcsBlock + hLen + 1, h, hLen);
 801a492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a494:	3301      	adds	r3, #1
 801a496:	68fa      	ldr	r2, [r7, #12]
 801a498:	4413      	add	r3, r2
 801a49a:	f107 0114 	add.w	r1, r7, #20
 801a49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f7ff fbe2 	bl	8019c6a <ConstantCompare>
 801a4a6:	4602      	mov	r2, r0
 801a4a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4aa:	4313      	orrs	r3, r2
 801a4ac:	643b      	str	r3, [r7, #64]	; 0x40
    ret += pkcsBlock[idx++] ^ 0x01; /* separator value is 0x01 */
 801a4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4b0:	1c5a      	adds	r2, r3, #1
 801a4b2:	657a      	str	r2, [r7, #84]	; 0x54
 801a4b4:	68fa      	ldr	r2, [r7, #12]
 801a4b6:	4413      	add	r3, r2
 801a4b8:	781b      	ldrb	r3, [r3, #0]
 801a4ba:	f083 0301 	eor.w	r3, r3, #1
 801a4be:	b2db      	uxtb	r3, r3
 801a4c0:	461a      	mov	r2, r3
 801a4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4c4:	4413      	add	r3, r2
 801a4c6:	643b      	str	r3, [r7, #64]	; 0x40
    ret += pkcsBlock[0]     ^ 0x00; /* Y, the first value, should be 0 */
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	461a      	mov	r2, r3
 801a4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4d0:	4413      	add	r3, r2
 801a4d2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Return 0 data length on error. */
    idx = ctMaskSelInt(ctMaskEq(ret, 0), idx, pkcsBlockLen);
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801a4d8:	f7ff fc38 	bl	8019d4c <ctMaskEq>
 801a4dc:	4603      	mov	r3, r0
 801a4de:	4618      	mov	r0, r3
 801a4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4e2:	68ba      	ldr	r2, [r7, #8]
 801a4e4:	4619      	mov	r1, r3
 801a4e6:	f7ff fc9d 	bl	8019e24 <ctMaskSelInt>
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	657b      	str	r3, [r7, #84]	; 0x54

    /* adjust pointer to correct location in array and return size of M */
    *output = (byte*)(pkcsBlock + idx);
 801a4ee:	68fa      	ldr	r2, [r7, #12]
 801a4f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4f2:	441a      	add	r2, r3
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	601a      	str	r2, [r3, #0]
    return pkcsBlockLen - idx;
 801a4f8:	68ba      	ldr	r2, [r7, #8]
 801a4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4fc:	1ad3      	subs	r3, r2, r3
}
 801a4fe:	4618      	mov	r0, r3
 801a500:	3758      	adds	r7, #88	; 0x58
 801a502:	46bd      	mov	sp, r7
 801a504:	bd80      	pop	{r7, pc}

0801a506 <RsaUnPad_PSS>:
                 and other negative values on error.
 */
static int RsaUnPad_PSS(byte *pkcsBlock, unsigned int pkcsBlockLen,
                        byte **output, enum wc_HashType hType, int mgf,
                        int saltLen, int bits, void* heap)
{
 801a506:	b580      	push	{r7, lr}
 801a508:	b090      	sub	sp, #64	; 0x40
 801a50a:	af02      	add	r7, sp, #8
 801a50c:	60f8      	str	r0, [r7, #12]
 801a50e:	60b9      	str	r1, [r7, #8]
 801a510:	607a      	str	r2, [r7, #4]
 801a512:	70fb      	strb	r3, [r7, #3]
    if (pkcsBlockLen > RSA_MAX_SIZE/8) {
        return MEMORY_E;
    }
#endif

    hLen = wc_HashGetDigestSize(hType);
 801a514:	78fb      	ldrb	r3, [r7, #3]
 801a516:	4618      	mov	r0, r3
 801a518:	f7fd fffe 	bl	8018518 <wc_HashGetDigestSize>
 801a51c:	6338      	str	r0, [r7, #48]	; 0x30
    if (hLen < 0)
 801a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a520:	2b00      	cmp	r3, #0
 801a522:	da01      	bge.n	801a528 <RsaUnPad_PSS+0x22>
        return hLen;
 801a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a526:	e0f6      	b.n	801a716 <RsaUnPad_PSS+0x210>
    bits = (bits - 1) & 0x7;
 801a528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a52a:	3b01      	subs	r3, #1
 801a52c:	f003 0307 	and.w	r3, r3, #7
 801a530:	64bb      	str	r3, [r7, #72]	; 0x48
    if ((pkcsBlock[0] & (0xff << bits)) != 0) {
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	781b      	ldrb	r3, [r3, #0]
 801a536:	4619      	mov	r1, r3
 801a538:	22ff      	movs	r2, #255	; 0xff
 801a53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a53c:	fa02 f303 	lsl.w	r3, r2, r3
 801a540:	400b      	ands	r3, r1
 801a542:	2b00      	cmp	r3, #0
 801a544:	d002      	beq.n	801a54c <RsaUnPad_PSS+0x46>
        return BAD_PADDING_E;
 801a546:	f06f 03c0 	mvn.w	r3, #192	; 0xc0
 801a54a:	e0e4      	b.n	801a716 <RsaUnPad_PSS+0x210>
    }
    if (bits == 0) {
 801a54c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d105      	bne.n	801a55e <RsaUnPad_PSS+0x58>
        pkcsBlock++;
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	3301      	adds	r3, #1
 801a556:	60fb      	str	r3, [r7, #12]
        pkcsBlockLen--;
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	3b01      	subs	r3, #1
 801a55c:	60bb      	str	r3, [r7, #8]
    }
    maskLen = (int)pkcsBlockLen - 1 - hLen;
 801a55e:	68bb      	ldr	r3, [r7, #8]
 801a560:	1e5a      	subs	r2, r3, #1
 801a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a564:	1ad3      	subs	r3, r2, r3
 801a566:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (maskLen < 0) {
 801a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	da02      	bge.n	801a574 <RsaUnPad_PSS+0x6e>
        WOLFSSL_MSG("RsaUnPad_PSS: Hash too large");
        return WC_KEY_SIZE_E;
 801a56e:	f06f 03e9 	mvn.w	r3, #233	; 0xe9
 801a572:	e0d0      	b.n	801a716 <RsaUnPad_PSS+0x210>
    }

    if (saltLen == RSA_PSS_SALT_LEN_DEFAULT) {
 801a574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a57a:	d102      	bne.n	801a582 <RsaUnPad_PSS+0x7c>
        saltLen = hLen;
 801a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a57e:	647b      	str	r3, [r7, #68]	; 0x44
 801a580:	e00d      	b.n	801a59e <RsaUnPad_PSS+0x98>
            if (orig_bits == 1024 && hLen == WC_SHA512_DIGEST_SIZE)
                saltLen = RSA_PSS_SALT_MAX_SZ;
        #endif
    }
#ifndef WOLFSSL_PSS_LONG_SALT
    else if (saltLen > hLen)
 801a582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a586:	429a      	cmp	r2, r3
 801a588:	dd02      	ble.n	801a590 <RsaUnPad_PSS+0x8a>
        return PSS_SALTLEN_E;
 801a58a:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801a58e:	e0c2      	b.n	801a716 <RsaUnPad_PSS+0x210>
#endif
#ifndef WOLFSSL_PSS_SALT_LEN_DISCOVER
    else if (saltLen < RSA_PSS_SALT_LEN_DEFAULT)
 801a590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a592:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a596:	da02      	bge.n	801a59e <RsaUnPad_PSS+0x98>
        return PSS_SALTLEN_E;
 801a598:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801a59c:	e0bb      	b.n	801a716 <RsaUnPad_PSS+0x210>
    if (maskLen < saltLen + 1) {
 801a59e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a2:	429a      	cmp	r2, r3
 801a5a4:	db02      	blt.n	801a5ac <RsaUnPad_PSS+0xa6>
        return PSS_SALTLEN_E;
 801a5a6:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801a5aa:	e0b4      	b.n	801a716 <RsaUnPad_PSS+0x210>
    if (saltLen != RSA_PSS_SALT_LEN_DISCOVER && maskLen < saltLen + 1) {
        return WC_KEY_SIZE_E;
    }
#endif

    if (pkcsBlock[pkcsBlockLen - 1] != RSA_PSS_PAD_TERM) {
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	3b01      	subs	r3, #1
 801a5b0:	68fa      	ldr	r2, [r7, #12]
 801a5b2:	4413      	add	r3, r2
 801a5b4:	781b      	ldrb	r3, [r3, #0]
 801a5b6:	2bbc      	cmp	r3, #188	; 0xbc
 801a5b8:	d002      	beq.n	801a5c0 <RsaUnPad_PSS+0xba>
        WOLFSSL_MSG("RsaUnPad_PSS: Padding Term Error");
        return BAD_PADDING_E;
 801a5ba:	f06f 03c0 	mvn.w	r3, #192	; 0xc0
 801a5be:	e0aa      	b.n	801a716 <RsaUnPad_PSS+0x210>
    }

#if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
    tmp = (byte*)XMALLOC(maskLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	f7fe faf2 	bl	8018bac <wolfSSL_Malloc>
 801a5c8:	62b8      	str	r0, [r7, #40]	; 0x28
    if (tmp == NULL) {
 801a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d102      	bne.n	801a5d6 <RsaUnPad_PSS+0xd0>
        return MEMORY_E;
 801a5d0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801a5d4:	e09f      	b.n	801a716 <RsaUnPad_PSS+0x210>
    }
#endif

    if ((ret = RsaMGF(mgf, pkcsBlock + maskLen, hLen, tmp, maskLen,
 801a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d8:	68fa      	ldr	r2, [r7, #12]
 801a5da:	18d1      	adds	r1, r2, r3
 801a5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a5e2:	9201      	str	r2, [sp, #4]
 801a5e4:	9300      	str	r3, [sp, #0]
 801a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801a5ec:	f7ff fe41 	bl	801a272 <RsaMGF>
 801a5f0:	6278      	str	r0, [r7, #36]	; 0x24
 801a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d009      	beq.n	801a60c <RsaUnPad_PSS+0x106>
                                                                  heap)) != 0) {
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5fa:	617b      	str	r3, [r7, #20]
 801a5fc:	697b      	ldr	r3, [r7, #20]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d002      	beq.n	801a608 <RsaUnPad_PSS+0x102>
 801a602:	6978      	ldr	r0, [r7, #20]
 801a604:	f7fe faee 	bl	8018be4 <wolfSSL_Free>
        return ret;
 801a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a60a:	e084      	b.n	801a716 <RsaUnPad_PSS+0x210>
    }

    tmp[0] &= (1 << bits) - 1;
 801a60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a60e:	781b      	ldrb	r3, [r3, #0]
 801a610:	b25a      	sxtb	r2, r3
 801a612:	2101      	movs	r1, #1
 801a614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a616:	fa01 f303 	lsl.w	r3, r1, r3
 801a61a:	b2db      	uxtb	r3, r3
 801a61c:	3b01      	subs	r3, #1
 801a61e:	b2db      	uxtb	r3, r3
 801a620:	b25b      	sxtb	r3, r3
 801a622:	4013      	ands	r3, r2
 801a624:	b25b      	sxtb	r3, r3
 801a626:	b2da      	uxtb	r2, r3
 801a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a62a:	701a      	strb	r2, [r3, #0]
    pkcsBlock[0] &= (1 << bits) - 1;
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	b25a      	sxtb	r2, r3
 801a632:	2101      	movs	r1, #1
 801a634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a636:	fa01 f303 	lsl.w	r3, r1, r3
 801a63a:	b2db      	uxtb	r3, r3
 801a63c:	3b01      	subs	r3, #1
 801a63e:	b2db      	uxtb	r3, r3
 801a640:	b25b      	sxtb	r3, r3
 801a642:	4013      	ands	r3, r2
 801a644:	b25b      	sxtb	r3, r3
 801a646:	b2da      	uxtb	r2, r3
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	701a      	strb	r2, [r3, #0]
        saltLen = maskLen - (i + 1);
    }
    else
#endif
    {
        for (i = 0; i < maskLen - 1 - saltLen; i++) {
 801a64c:	2300      	movs	r3, #0
 801a64e:	637b      	str	r3, [r7, #52]	; 0x34
 801a650:	e017      	b.n	801a682 <RsaUnPad_PSS+0x17c>
            if (tmp[i] != pkcsBlock[i]) {
 801a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a656:	4413      	add	r3, r2
 801a658:	781a      	ldrb	r2, [r3, #0]
 801a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a65c:	68f9      	ldr	r1, [r7, #12]
 801a65e:	440b      	add	r3, r1
 801a660:	781b      	ldrb	r3, [r3, #0]
 801a662:	429a      	cmp	r2, r3
 801a664:	d00a      	beq.n	801a67c <RsaUnPad_PSS+0x176>
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a668:	61bb      	str	r3, [r7, #24]
 801a66a:	69bb      	ldr	r3, [r7, #24]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d002      	beq.n	801a676 <RsaUnPad_PSS+0x170>
 801a670:	69b8      	ldr	r0, [r7, #24]
 801a672:	f7fe fab7 	bl	8018be4 <wolfSSL_Free>
                WOLFSSL_MSG("RsaUnPad_PSS: Padding Error Match");
                return PSS_SALTLEN_E;
 801a676:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801a67a:	e04c      	b.n	801a716 <RsaUnPad_PSS+0x210>
        for (i = 0; i < maskLen - 1 - saltLen; i++) {
 801a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a67e:	3301      	adds	r3, #1
 801a680:	637b      	str	r3, [r7, #52]	; 0x34
 801a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a684:	1e5a      	subs	r2, r3, #1
 801a686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a688:	1ad3      	subs	r3, r2, r3
 801a68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a68c:	429a      	cmp	r2, r3
 801a68e:	dbe0      	blt.n	801a652 <RsaUnPad_PSS+0x14c>
            }
        }
        if (tmp[i] != (pkcsBlock[i] ^ 0x01)) {
 801a690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a694:	4413      	add	r3, r2
 801a696:	781a      	ldrb	r2, [r3, #0]
 801a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a69a:	68f9      	ldr	r1, [r7, #12]
 801a69c:	440b      	add	r3, r1
 801a69e:	781b      	ldrb	r3, [r3, #0]
 801a6a0:	f083 0301 	eor.w	r3, r3, #1
 801a6a4:	b2db      	uxtb	r3, r3
 801a6a6:	429a      	cmp	r2, r3
 801a6a8:	d00a      	beq.n	801a6c0 <RsaUnPad_PSS+0x1ba>
            XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6ac:	61fb      	str	r3, [r7, #28]
 801a6ae:	69fb      	ldr	r3, [r7, #28]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d002      	beq.n	801a6ba <RsaUnPad_PSS+0x1b4>
 801a6b4:	69f8      	ldr	r0, [r7, #28]
 801a6b6:	f7fe fa95 	bl	8018be4 <wolfSSL_Free>
            WOLFSSL_MSG("RsaUnPad_PSS: Padding Error End");
            return PSS_SALTLEN_E;
 801a6ba:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801a6be:	e02a      	b.n	801a716 <RsaUnPad_PSS+0x210>
        }
    }
    for (i++; i < maskLen; i++)
 801a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6c2:	3301      	adds	r3, #1
 801a6c4:	637b      	str	r3, [r7, #52]	; 0x34
 801a6c6:	e010      	b.n	801a6ea <RsaUnPad_PSS+0x1e4>
        pkcsBlock[i] ^= tmp[i];
 801a6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6ca:	68fa      	ldr	r2, [r7, #12]
 801a6cc:	4413      	add	r3, r2
 801a6ce:	7819      	ldrb	r1, [r3, #0]
 801a6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a6d4:	4413      	add	r3, r2
 801a6d6:	781a      	ldrb	r2, [r3, #0]
 801a6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6da:	68f8      	ldr	r0, [r7, #12]
 801a6dc:	4403      	add	r3, r0
 801a6de:	404a      	eors	r2, r1
 801a6e0:	b2d2      	uxtb	r2, r2
 801a6e2:	701a      	strb	r2, [r3, #0]
    for (i++; i < maskLen; i++)
 801a6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	637b      	str	r3, [r7, #52]	; 0x34
 801a6ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	dbea      	blt.n	801a6c8 <RsaUnPad_PSS+0x1c2>

#if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
    XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 801a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6f4:	623b      	str	r3, [r7, #32]
 801a6f6:	6a3b      	ldr	r3, [r7, #32]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d002      	beq.n	801a702 <RsaUnPad_PSS+0x1fc>
 801a6fc:	6a38      	ldr	r0, [r7, #32]
 801a6fe:	f7fe fa71 	bl	8018be4 <wolfSSL_Free>
#endif

    *output = pkcsBlock + maskLen - saltLen;
 801a702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a706:	1ad3      	subs	r3, r2, r3
 801a708:	68fa      	ldr	r2, [r7, #12]
 801a70a:	441a      	add	r2, r3
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	601a      	str	r2, [r3, #0]
    return saltLen + hLen;
 801a710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a714:	4413      	add	r3, r2
}
 801a716:	4618      	mov	r0, r3
 801a718:	3738      	adds	r7, #56	; 0x38
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}

0801a71e <RsaUnPad>:

/* UnPad plaintext, set start to *output, return length of plaintext,
 * < 0 on error */
static int RsaUnPad(const byte *pkcsBlock, unsigned int pkcsBlockLen,
                    byte **output, byte padValue)
{
 801a71e:	b590      	push	{r4, r7, lr}
 801a720:	b089      	sub	sp, #36	; 0x24
 801a722:	af00      	add	r7, sp, #0
 801a724:	60f8      	str	r0, [r7, #12]
 801a726:	60b9      	str	r1, [r7, #8]
 801a728:	607a      	str	r2, [r7, #4]
 801a72a:	70fb      	strb	r3, [r7, #3]
    int    ret = BAD_FUNC_ARG;
 801a72c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801a730:	61fb      	str	r3, [r7, #28]
    word16 i;
#ifndef WOLFSSL_RSA_VERIFY_ONLY
    byte   invalid = 0;
 801a732:	2300      	movs	r3, #0
 801a734:	747b      	strb	r3, [r7, #17]
#endif

    if (output == NULL || pkcsBlockLen < 2 || pkcsBlockLen > 0xFFFF) {
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d006      	beq.n	801a74a <RsaUnPad+0x2c>
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	2b01      	cmp	r3, #1
 801a740:	d903      	bls.n	801a74a <RsaUnPad+0x2c>
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a748:	d302      	bcc.n	801a750 <RsaUnPad+0x32>
        return BAD_FUNC_ARG;
 801a74a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801a74e:	e0a2      	b.n	801a896 <RsaUnPad+0x178>
    }

    if (padValue == RSA_BLOCK_TYPE_1) {
 801a750:	78fb      	ldrb	r3, [r7, #3]
 801a752:	2b01      	cmp	r3, #1
 801a754:	d134      	bne.n	801a7c0 <RsaUnPad+0xa2>
        /* First byte must be 0x00 and Second byte, block type, 0x01 */
        if (pkcsBlock[0] != 0 || pkcsBlock[1] != RSA_BLOCK_TYPE_1) {
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	781b      	ldrb	r3, [r3, #0]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d104      	bne.n	801a768 <RsaUnPad+0x4a>
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	3301      	adds	r3, #1
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	2b01      	cmp	r3, #1
 801a766:	d002      	beq.n	801a76e <RsaUnPad+0x50>
            WOLFSSL_MSG("RsaUnPad error, invalid formatting");
            return RSA_PAD_E;
 801a768:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 801a76c:	e093      	b.n	801a896 <RsaUnPad+0x178>
        }

        /* check the padding until we find the separator */
        for (i = 2; i < pkcsBlockLen; ) {
 801a76e:	2302      	movs	r3, #2
 801a770:	837b      	strh	r3, [r7, #26]
 801a772:	e008      	b.n	801a786 <RsaUnPad+0x68>
            if (pkcsBlock[i++] != 0xFF) {
 801a774:	8b7b      	ldrh	r3, [r7, #26]
 801a776:	1c5a      	adds	r2, r3, #1
 801a778:	837a      	strh	r2, [r7, #26]
 801a77a:	461a      	mov	r2, r3
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	4413      	add	r3, r2
 801a780:	781b      	ldrb	r3, [r3, #0]
 801a782:	2bff      	cmp	r3, #255	; 0xff
 801a784:	d104      	bne.n	801a790 <RsaUnPad+0x72>
        for (i = 2; i < pkcsBlockLen; ) {
 801a786:	8b7b      	ldrh	r3, [r7, #26]
 801a788:	68ba      	ldr	r2, [r7, #8]
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d8f2      	bhi.n	801a774 <RsaUnPad+0x56>
 801a78e:	e000      	b.n	801a792 <RsaUnPad+0x74>
                break;
 801a790:	bf00      	nop
            }
        }

        /* Minimum of 11 bytes of pre-message data and must have separator. */
        if (i < RSA_MIN_PAD_SZ || pkcsBlock[i-1] != 0) {
 801a792:	8b7b      	ldrh	r3, [r7, #26]
 801a794:	2b0a      	cmp	r3, #10
 801a796:	d906      	bls.n	801a7a6 <RsaUnPad+0x88>
 801a798:	8b7b      	ldrh	r3, [r7, #26]
 801a79a:	3b01      	subs	r3, #1
 801a79c:	68fa      	ldr	r2, [r7, #12]
 801a79e:	4413      	add	r3, r2
 801a7a0:	781b      	ldrb	r3, [r3, #0]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d002      	beq.n	801a7ac <RsaUnPad+0x8e>
            WOLFSSL_MSG("RsaUnPad error, bad formatting");
            return RSA_PAD_E;
 801a7a6:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 801a7aa:	e074      	b.n	801a896 <RsaUnPad+0x178>
        }

        *output = (byte *)(pkcsBlock + i);
 801a7ac:	8b7b      	ldrh	r3, [r7, #26]
 801a7ae:	68fa      	ldr	r2, [r7, #12]
 801a7b0:	441a      	add	r2, r3
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	601a      	str	r2, [r3, #0]
        ret = pkcsBlockLen - i;
 801a7b6:	8b7b      	ldrh	r3, [r7, #26]
 801a7b8:	68ba      	ldr	r2, [r7, #8]
 801a7ba:	1ad3      	subs	r3, r2, r3
 801a7bc:	61fb      	str	r3, [r7, #28]
 801a7be:	e069      	b.n	801a894 <RsaUnPad+0x176>
    }
#ifndef WOLFSSL_RSA_VERIFY_ONLY
    else {
        unsigned int j;
        word16 pastSep = 0;
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	827b      	strh	r3, [r7, #18]

        i = 0;
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	837b      	strh	r3, [r7, #26]
        /* Decrypted with private key - unpad must be constant time. */
        for (j = 2; j < pkcsBlockLen; j++) {
 801a7c8:	2302      	movs	r3, #2
 801a7ca:	617b      	str	r3, [r7, #20]
 801a7cc:	e023      	b.n	801a816 <RsaUnPad+0xf8>
           /* Update i if not passed the separator and at separator. */
            i |= (~pastSep) & ctMask16Eq(pkcsBlock[j], 0x00) & (j + 1);
 801a7ce:	8a7b      	ldrh	r3, [r7, #18]
 801a7d0:	43dc      	mvns	r4, r3
 801a7d2:	68fa      	ldr	r2, [r7, #12]
 801a7d4:	697b      	ldr	r3, [r7, #20]
 801a7d6:	4413      	add	r3, r2
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	2100      	movs	r1, #0
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f7ff faf3 	bl	8019dc8 <ctMask16Eq>
 801a7e2:	4603      	mov	r3, r0
 801a7e4:	4023      	ands	r3, r4
 801a7e6:	461a      	mov	r2, r3
 801a7e8:	697b      	ldr	r3, [r7, #20]
 801a7ea:	3301      	adds	r3, #1
 801a7ec:	4013      	ands	r3, r2
 801a7ee:	b29a      	uxth	r2, r3
 801a7f0:	8b7b      	ldrh	r3, [r7, #26]
 801a7f2:	4313      	orrs	r3, r2
 801a7f4:	837b      	strh	r3, [r7, #26]
            pastSep |= ctMask16Eq(pkcsBlock[j], 0x00);
 801a7f6:	68fa      	ldr	r2, [r7, #12]
 801a7f8:	697b      	ldr	r3, [r7, #20]
 801a7fa:	4413      	add	r3, r2
 801a7fc:	781b      	ldrb	r3, [r3, #0]
 801a7fe:	2100      	movs	r1, #0
 801a800:	4618      	mov	r0, r3
 801a802:	f7ff fae1 	bl	8019dc8 <ctMask16Eq>
 801a806:	4603      	mov	r3, r0
 801a808:	461a      	mov	r2, r3
 801a80a:	8a7b      	ldrh	r3, [r7, #18]
 801a80c:	4313      	orrs	r3, r2
 801a80e:	827b      	strh	r3, [r7, #18]
        for (j = 2; j < pkcsBlockLen; j++) {
 801a810:	697b      	ldr	r3, [r7, #20]
 801a812:	3301      	adds	r3, #1
 801a814:	617b      	str	r3, [r7, #20]
 801a816:	697a      	ldr	r2, [r7, #20]
 801a818:	68bb      	ldr	r3, [r7, #8]
 801a81a:	429a      	cmp	r2, r3
 801a81c:	d3d7      	bcc.n	801a7ce <RsaUnPad+0xb0>
        }

        /* Minimum of 11 bytes of pre-message data - including leading 0x00. */
        invalid |= ctMaskLT(i, RSA_MIN_PAD_SZ);
 801a81e:	8b7b      	ldrh	r3, [r7, #26]
 801a820:	210b      	movs	r1, #11
 801a822:	4618      	mov	r0, r3
 801a824:	f7ff fa6d 	bl	8019d02 <ctMaskLT>
 801a828:	4603      	mov	r3, r0
 801a82a:	461a      	mov	r2, r3
 801a82c:	7c7b      	ldrb	r3, [r7, #17]
 801a82e:	4313      	orrs	r3, r2
 801a830:	747b      	strb	r3, [r7, #17]
        /* Must have seen separator. */
        invalid |= ~pastSep;
 801a832:	8a7b      	ldrh	r3, [r7, #18]
 801a834:	b25b      	sxtb	r3, r3
 801a836:	43db      	mvns	r3, r3
 801a838:	b25a      	sxtb	r2, r3
 801a83a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801a83e:	4313      	orrs	r3, r2
 801a840:	b25b      	sxtb	r3, r3
 801a842:	747b      	strb	r3, [r7, #17]
        /* First byte must be 0x00. */
        invalid |= ctMaskNotEq(pkcsBlock[0], 0x00);
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	781b      	ldrb	r3, [r3, #0]
 801a848:	2100      	movs	r1, #0
 801a84a:	4618      	mov	r0, r3
 801a84c:	f7ff fad4 	bl	8019df8 <ctMaskNotEq>
 801a850:	4603      	mov	r3, r0
 801a852:	461a      	mov	r2, r3
 801a854:	7c7b      	ldrb	r3, [r7, #17]
 801a856:	4313      	orrs	r3, r2
 801a858:	747b      	strb	r3, [r7, #17]
        /* Check against expected block type: padValue */
        invalid |= ctMaskNotEq(pkcsBlock[1], padValue);
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	3301      	adds	r3, #1
 801a85e:	781b      	ldrb	r3, [r3, #0]
 801a860:	461a      	mov	r2, r3
 801a862:	78fb      	ldrb	r3, [r7, #3]
 801a864:	4619      	mov	r1, r3
 801a866:	4610      	mov	r0, r2
 801a868:	f7ff fac6 	bl	8019df8 <ctMaskNotEq>
 801a86c:	4603      	mov	r3, r0
 801a86e:	461a      	mov	r2, r3
 801a870:	7c7b      	ldrb	r3, [r7, #17]
 801a872:	4313      	orrs	r3, r2
 801a874:	747b      	strb	r3, [r7, #17]

        *output = (byte *)(pkcsBlock + i);
 801a876:	8b7b      	ldrh	r3, [r7, #26]
 801a878:	68fa      	ldr	r2, [r7, #12]
 801a87a:	441a      	add	r2, r3
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	601a      	str	r2, [r3, #0]
        ret = ((int)-1 + (int)(invalid >> 7)) & (pkcsBlockLen - i);
 801a880:	7c7b      	ldrb	r3, [r7, #17]
 801a882:	09db      	lsrs	r3, r3, #7
 801a884:	b2db      	uxtb	r3, r3
 801a886:	3b01      	subs	r3, #1
 801a888:	4619      	mov	r1, r3
 801a88a:	8b7b      	ldrh	r3, [r7, #26]
 801a88c:	68ba      	ldr	r2, [r7, #8]
 801a88e:	1ad3      	subs	r3, r2, r3
 801a890:	400b      	ands	r3, r1
 801a892:	61fb      	str	r3, [r7, #28]
    }
#endif

    return ret;
 801a894:	69fb      	ldr	r3, [r7, #28]
}
 801a896:	4618      	mov	r0, r3
 801a898:	3724      	adds	r7, #36	; 0x24
 801a89a:	46bd      	mov	sp, r7
 801a89c:	bd90      	pop	{r4, r7, pc}

0801a89e <wc_RsaUnPad_ex>:
 */
int wc_RsaUnPad_ex(byte* pkcsBlock, word32 pkcsBlockLen, byte** out,
                   byte padValue, int padType, enum wc_HashType hType,
                   int mgf, byte* optLabel, word32 labelLen, int saltLen,
                   int bits, void* heap)
{
 801a89e:	b580      	push	{r7, lr}
 801a8a0:	b08a      	sub	sp, #40	; 0x28
 801a8a2:	af04      	add	r7, sp, #16
 801a8a4:	60f8      	str	r0, [r7, #12]
 801a8a6:	60b9      	str	r1, [r7, #8]
 801a8a8:	607a      	str	r2, [r7, #4]
 801a8aa:	70fb      	strb	r3, [r7, #3]
    int ret;

    switch (padType) {
 801a8ac:	6a3b      	ldr	r3, [r7, #32]
 801a8ae:	2b02      	cmp	r3, #2
 801a8b0:	d023      	beq.n	801a8fa <wc_RsaUnPad_ex+0x5c>
 801a8b2:	6a3b      	ldr	r3, [r7, #32]
 801a8b4:	2b02      	cmp	r3, #2
 801a8b6:	dc32      	bgt.n	801a91e <wc_RsaUnPad_ex+0x80>
 801a8b8:	6a3b      	ldr	r3, [r7, #32]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d003      	beq.n	801a8c6 <wc_RsaUnPad_ex+0x28>
 801a8be:	6a3b      	ldr	r3, [r7, #32]
 801a8c0:	2b01      	cmp	r3, #1
 801a8c2:	d008      	beq.n	801a8d6 <wc_RsaUnPad_ex+0x38>
 801a8c4:	e02b      	b.n	801a91e <wc_RsaUnPad_ex+0x80>
        case WC_RSA_PKCSV15_PAD:
            /*WOLFSSL_MSG("wolfSSL Using RSA PKCSV15 un-padding");*/
            ret = RsaUnPad(pkcsBlock, pkcsBlockLen, out, padValue);
 801a8c6:	78fb      	ldrb	r3, [r7, #3]
 801a8c8:	687a      	ldr	r2, [r7, #4]
 801a8ca:	68b9      	ldr	r1, [r7, #8]
 801a8cc:	68f8      	ldr	r0, [r7, #12]
 801a8ce:	f7ff ff26 	bl	801a71e <RsaUnPad>
 801a8d2:	6178      	str	r0, [r7, #20]
            break;
 801a8d4:	e026      	b.n	801a924 <wc_RsaUnPad_ex+0x86>

    #ifndef WC_NO_RSA_OAEP
        case WC_RSA_OAEP_PAD:
            WOLFSSL_MSG("wolfSSL Using RSA OAEP un-padding");
            ret = RsaUnPad_OAEP((byte*)pkcsBlock, pkcsBlockLen, out,
 801a8d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801a8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8dc:	9303      	str	r3, [sp, #12]
 801a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8e0:	9302      	str	r3, [sp, #8]
 801a8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8e4:	9301      	str	r3, [sp, #4]
 801a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e8:	9300      	str	r3, [sp, #0]
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	687a      	ldr	r2, [r7, #4]
 801a8ee:	68b9      	ldr	r1, [r7, #8]
 801a8f0:	68f8      	ldr	r0, [r7, #12]
 801a8f2:	f7ff fcdc 	bl	801a2ae <RsaUnPad_OAEP>
 801a8f6:	6178      	str	r0, [r7, #20]
                                        hType, mgf, optLabel, labelLen, heap);
            break;
 801a8f8:	e014      	b.n	801a924 <wc_RsaUnPad_ex+0x86>
    #endif

    #ifdef WC_RSA_PSS
        case WC_RSA_PSS_PAD:
            WOLFSSL_MSG("wolfSSL Using RSA PSS un-padding");
            ret = RsaUnPad_PSS((byte*)pkcsBlock, pkcsBlockLen, out, hType, mgf,
 801a8fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801a8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a900:	9303      	str	r3, [sp, #12]
 801a902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a904:	9302      	str	r3, [sp, #8]
 801a906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a908:	9301      	str	r3, [sp, #4]
 801a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a90c:	9300      	str	r3, [sp, #0]
 801a90e:	4613      	mov	r3, r2
 801a910:	687a      	ldr	r2, [r7, #4]
 801a912:	68b9      	ldr	r1, [r7, #8]
 801a914:	68f8      	ldr	r0, [r7, #12]
 801a916:	f7ff fdf6 	bl	801a506 <RsaUnPad_PSS>
 801a91a:	6178      	str	r0, [r7, #20]
                                                           saltLen, bits, heap);
            break;
 801a91c:	e002      	b.n	801a924 <wc_RsaUnPad_ex+0x86>
            break;
    #endif /* WC_RSA_NO_PADDING */

        default:
            WOLFSSL_MSG("Unknown RSA UnPad Type");
            ret = RSA_PAD_E;
 801a91e:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 801a922:	617b      	str	r3, [r7, #20]
    (void)labelLen;
    (void)saltLen;
    (void)bits;
    (void)heap;

    return ret;
 801a924:	697b      	ldr	r3, [r7, #20]
}
 801a926:	4618      	mov	r0, r3
 801a928:	3718      	adds	r7, #24
 801a92a:	46bd      	mov	sp, r7
 801a92c:	bd80      	pop	{r7, pc}

0801a92e <wc_RsaFunctionSync>:
}
#else
#ifndef WOLF_CRYPTO_CB_ONLY_RSA
static int wc_RsaFunctionSync(const byte* in, word32 inLen, byte* out,
                          word32* outLen, int type, RsaKey* key, WC_RNG* rng)
{
 801a92e:	b580      	push	{r7, lr}
 801a930:	b094      	sub	sp, #80	; 0x50
 801a932:	af02      	add	r7, sp, #8
 801a934:	60f8      	str	r0, [r7, #12]
 801a936:	60b9      	str	r1, [r7, #8]
 801a938:	607a      	str	r2, [r7, #4]
 801a93a:	603b      	str	r3, [r7, #0]
    mp_int tmp[1];
#ifdef WC_RSA_BLINDING
    mp_int rnd[1], rndi[1];
#endif
#endif
    int    ret = 0;
 801a93c:	2300      	movs	r3, #0
 801a93e:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    word32 keyLen = wc_RsaEncryptSize(key);
 801a940:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a942:	f000 fce3 	bl	801b30c <wc_RsaEncryptSize>
 801a946:	4603      	mov	r3, r0
 801a948:	637b      	str	r3, [r7, #52]	; 0x34

    if (inLen > keyLen) {
 801a94a:	68ba      	ldr	r2, [r7, #8]
 801a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a94e:	429a      	cmp	r2, r3
 801a950:	d902      	bls.n	801a958 <wc_RsaFunctionSync+0x2a>
        WOLFSSL_MSG("Expected that inLen be no longer RSA key length");
        return BAD_FUNC_ARG;
 801a952:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801a956:	e1c3      	b.n	801ace0 <wc_RsaFunctionSync+0x3b2>
    }

    if (mp_iseven(&key->n)) {
 801a958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	dd08      	ble.n	801a972 <wc_RsaFunctionSync+0x44>
 801a960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a962:	68db      	ldr	r3, [r3, #12]
 801a964:	f003 0301 	and.w	r3, r3, #1
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d102      	bne.n	801a972 <wc_RsaFunctionSync+0x44>
        return MP_VAL;
 801a96c:	f04f 33ff 	mov.w	r3, #4294967295
 801a970:	e1b6      	b.n	801ace0 <wc_RsaFunctionSync+0x3b2>
    #endif
#else
    (void)rng;

#ifdef WOLFSSL_SMALL_STACK
    tmp = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_RSA);
 801a972:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801a976:	f7fe f919 	bl	8018bac <wolfSSL_Malloc>
 801a97a:	6338      	str	r0, [r7, #48]	; 0x30
    if (tmp == NULL)
 801a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d102      	bne.n	801a988 <wc_RsaFunctionSync+0x5a>
        return MEMORY_E;
 801a982:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801a986:	e1ab      	b.n	801ace0 <wc_RsaFunctionSync+0x3b2>
#ifdef WC_RSA_BLINDING
#if !defined(WOLFSSL_RSA_PUBLIC_ONLY) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
    rnd = (mp_int*)XMALLOC(sizeof(mp_int) * 2, key->heap, DYNAMIC_TYPE_RSA);
 801a988:	f44f 608b 	mov.w	r0, #1112	; 0x458
 801a98c:	f7fe f90e 	bl	8018bac <wolfSSL_Malloc>
 801a990:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (rnd == NULL) {
 801a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a994:	2b00      	cmp	r3, #0
 801a996:	d10a      	bne.n	801a9ae <wc_RsaFunctionSync+0x80>
        XFREE(tmp, key->heap, DYNAMIC_TYPE_RSA);
 801a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a99a:	617b      	str	r3, [r7, #20]
 801a99c:	697b      	ldr	r3, [r7, #20]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d002      	beq.n	801a9a8 <wc_RsaFunctionSync+0x7a>
 801a9a2:	6978      	ldr	r0, [r7, #20]
 801a9a4:	f7fe f91e 	bl	8018be4 <wolfSSL_Free>
        return MEMORY_E;
 801a9a8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801a9ac:	e198      	b.n	801ace0 <wc_RsaFunctionSync+0x3b2>
    }
    rndi = rnd + 1;
 801a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9b0:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801a9b4:	62bb      	str	r3, [r7, #40]	; 0x28
    rndi = NULL;
#endif
#endif /* WC_RSA_BLINDING */
#endif /* WOLFSSL_SMALL_STACK */

    if (mp_init(tmp) != MP_OKAY)
 801a9b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9b8:	f005 fc5a 	bl	8020270 <mp_init>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d002      	beq.n	801a9c8 <wc_RsaFunctionSync+0x9a>
        ret = MP_INIT_E;
 801a9c2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801a9c6:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(WOLFSSL_RSA_PUBLIC_ONLY) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
#ifdef WC_RSA_BLINDING
    if (ret == 0) {
 801a9c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d118      	bne.n	801aa00 <wc_RsaFunctionSync+0xd2>
        if (type == RSA_PRIVATE_DECRYPT || type == RSA_PRIVATE_ENCRYPT) {
 801a9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9d0:	2b03      	cmp	r3, #3
 801a9d2:	d002      	beq.n	801a9da <wc_RsaFunctionSync+0xac>
 801a9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9d6:	2b02      	cmp	r3, #2
 801a9d8:	d112      	bne.n	801aa00 <wc_RsaFunctionSync+0xd2>
            if (mp_init_multi(rnd, rndi, NULL, NULL, NULL, NULL) != MP_OKAY) {
 801a9da:	2300      	movs	r3, #0
 801a9dc:	9301      	str	r3, [sp, #4]
 801a9de:	2300      	movs	r3, #0
 801a9e0:	9300      	str	r3, [sp, #0]
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a9ea:	f005 fce1 	bl	80203b0 <mp_init_multi>
 801a9ee:	4603      	mov	r3, r0
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d005      	beq.n	801aa00 <wc_RsaFunctionSync+0xd2>
                mp_clear(tmp);
 801a9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9f6:	f005 fcc1 	bl	802037c <mp_clear>
                ret = MP_INIT_E;
 801a9fa:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801a9fe:	647b      	str	r3, [r7, #68]	; 0x44
    }
#endif
#endif

#ifndef TEST_UNPAD_CONSTANT_TIME
    if (ret == 0 && mp_read_unsigned_bin(tmp, in, inLen) != MP_OKAY)
 801aa00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d10b      	bne.n	801aa1e <wc_RsaFunctionSync+0xf0>
 801aa06:	68bb      	ldr	r3, [r7, #8]
 801aa08:	461a      	mov	r2, r3
 801aa0a:	68f9      	ldr	r1, [r7, #12]
 801aa0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa0e:	f005 fe01 	bl	8020614 <mp_read_unsigned_bin>
 801aa12:	4603      	mov	r3, r0
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d002      	beq.n	801aa1e <wc_RsaFunctionSync+0xf0>
        ret = MP_READ_E;
 801aa18:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 801aa1c:	647b      	str	r3, [r7, #68]	; 0x44
    if (ret == 0) {
        mp_memzero_add("RSA sync tmp", tmp);
    }
#endif

    if (ret == 0) {
 801aa1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	f040 8119 	bne.w	801ac58 <wc_RsaFunctionSync+0x32a>
        switch(type) {
 801aa26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	dc04      	bgt.n	801aa36 <wc_RsaFunctionSync+0x108>
 801aa2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	f280 80ff 	bge.w	801ac32 <wc_RsaFunctionSync+0x304>
 801aa34:	e10c      	b.n	801ac50 <wc_RsaFunctionSync+0x322>
 801aa36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa38:	3b02      	subs	r3, #2
 801aa3a:	2b01      	cmp	r3, #1
 801aa3c:	f200 8108 	bhi.w	801ac50 <wc_RsaFunctionSync+0x322>
        case RSA_PRIVATE_DECRYPT:
        case RSA_PRIVATE_ENCRYPT:
        {
        #if defined(WC_RSA_BLINDING) && !defined(WC_NO_RNG)
            /* blind */
            ret = mp_rand(rnd, get_digit_count(&key->n), rng);
 801aa40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aa42:	4618      	mov	r0, r3
 801aa44:	f006 fae5 	bl	8021012 <get_digit_count>
 801aa48:	4603      	mov	r3, r0
 801aa4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801aa4c:	4619      	mov	r1, r3
 801aa4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aa50:	f006 fba2 	bl	8021198 <mp_rand>
 801aa54:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
 801aa56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	f040 80ff 	bne.w	801ac5c <wc_RsaFunctionSync+0x32e>
                break;
            /* rndi = 1/rnd mod n */
            if (mp_invmod(rnd, &key->n, rndi) != MP_OKAY) {
 801aa5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aa60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa62:	4619      	mov	r1, r3
 801aa64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aa66:	f005 fd49 	bl	80204fc <mp_invmod>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d003      	beq.n	801aa78 <wc_RsaFunctionSync+0x14a>
                ret = MP_INVMOD_E;
 801aa70:	f06f 0376 	mvn.w	r3, #118	; 0x76
 801aa74:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 801aa76:	e0f6      	b.n	801ac66 <wc_RsaFunctionSync+0x338>
            mp_memzero_add("RSA sync rndi", rndi);
        #endif

            /* rnd = rnd^e */
        #ifndef WOLFSSL_SP_MATH_ALL
            if (mp_exptmod(rnd, &key->e, &key->n, rnd) != MP_OKAY) {
 801aa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aa7a:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 801aa7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aa84:	f005 fd5c 	bl	8020540 <mp_exptmod>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d003      	beq.n	801aa96 <wc_RsaFunctionSync+0x168>
                ret = MP_EXPTMOD_E;
 801aa8e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 801aa92:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 801aa94:	e0e7      	b.n	801ac66 <wc_RsaFunctionSync+0x338>
                break;
            }
        #endif

            /* tmp = tmp*rnd mod n */
            if (mp_mulmod(tmp, rnd, &key->n, tmp) != MP_OKAY) {
 801aa96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aa9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa9e:	f005 fce7 	bl	8020470 <mp_mulmod>
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d003      	beq.n	801aab0 <wc_RsaFunctionSync+0x182>
                ret = MP_MULMOD_E;
 801aaa8:	f06f 0374 	mvn.w	r3, #116	; 0x74
 801aaac:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 801aaae:	e0da      	b.n	801ac66 <wc_RsaFunctionSync+0x338>
            }
        #else
            {
            #ifdef WOLFSSL_SMALL_STACK
                mp_int* tmpa;
                mp_int* tmpb = NULL;
 801aab0:	2300      	movs	r3, #0
 801aab2:	643b      	str	r3, [r7, #64]	; 0x40
            #else
                mp_int tmpa[1], tmpb[1];
            #endif
                int cleara = 0, clearb = 0;
 801aab4:	2300      	movs	r3, #0
 801aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801aab8:	2300      	movs	r3, #0
 801aaba:	63bb      	str	r3, [r7, #56]	; 0x38

            #ifdef WOLFSSL_SMALL_STACK
                tmpa = (mp_int*)XMALLOC(sizeof(mp_int) * 2,
 801aabc:	f44f 608b 	mov.w	r0, #1112	; 0x458
 801aac0:	f7fe f874 	bl	8018bac <wolfSSL_Malloc>
 801aac4:	6278      	str	r0, [r7, #36]	; 0x24
                        key->heap, DYNAMIC_TYPE_RSA);
                if (tmpa != NULL)
 801aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d004      	beq.n	801aad6 <wc_RsaFunctionSync+0x1a8>
                    tmpb = tmpa + 1;
 801aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aace:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801aad2:	643b      	str	r3, [r7, #64]	; 0x40
 801aad4:	e002      	b.n	801aadc <wc_RsaFunctionSync+0x1ae>
                else
                    ret = MEMORY_E;
 801aad6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801aada:	647b      	str	r3, [r7, #68]	; 0x44
                if (ret == 0)
 801aadc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d10b      	bne.n	801aafa <wc_RsaFunctionSync+0x1cc>
            #endif
                {
                    if (mp_init(tmpa) != MP_OKAY)
 801aae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aae4:	f005 fbc4 	bl	8020270 <mp_init>
 801aae8:	4603      	mov	r3, r0
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d003      	beq.n	801aaf6 <wc_RsaFunctionSync+0x1c8>
                        ret = MP_INIT_E;
 801aaee:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801aaf2:	647b      	str	r3, [r7, #68]	; 0x44
 801aaf4:	e001      	b.n	801aafa <wc_RsaFunctionSync+0x1cc>
                    else
                        cleara = 1;
 801aaf6:	2301      	movs	r3, #1
 801aaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                if (ret == 0) {
 801aafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d10b      	bne.n	801ab18 <wc_RsaFunctionSync+0x1ea>
                    if (mp_init(tmpb) != MP_OKAY)
 801ab00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801ab02:	f005 fbb5 	bl	8020270 <mp_init>
 801ab06:	4603      	mov	r3, r0
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d003      	beq.n	801ab14 <wc_RsaFunctionSync+0x1e6>
                        ret = MP_INIT_E;
 801ab0c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801ab10:	647b      	str	r3, [r7, #68]	; 0x44
 801ab12:	e001      	b.n	801ab18 <wc_RsaFunctionSync+0x1ea>
                    else
                        clearb = 1;
 801ab14:	2301      	movs	r3, #1
 801ab16:	63bb      	str	r3, [r7, #56]	; 0x38
                    mp_memzero_add("RSA Sync tmpb", tmpb);
                }
            #endif

                /* tmpa = tmp^dP mod p */
                if (ret == 0 && mp_exptmod(tmp, &key->dP, &key->p,
 801ab18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d10f      	bne.n	801ab3e <wc_RsaFunctionSync+0x210>
 801ab1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab20:	f603 21dc 	addw	r1, r3, #2780	; 0xadc
 801ab24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab26:	f203 6284 	addw	r2, r3, #1668	; 0x684
 801ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab2e:	f005 fd07 	bl	8020540 <mp_exptmod>
 801ab32:	4603      	mov	r3, r0
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d002      	beq.n	801ab3e <wc_RsaFunctionSync+0x210>
                                                               tmpa) != MP_OKAY)
                    ret = MP_EXPTMOD_E;
 801ab38:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 801ab3c:	647b      	str	r3, [r7, #68]	; 0x44

                /* tmpb = tmp^dQ mod q */
                if (ret == 0 && mp_exptmod(tmp, &key->dQ, &key->q,
 801ab3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d10f      	bne.n	801ab64 <wc_RsaFunctionSync+0x236>
 801ab44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab46:	f603 5108 	addw	r1, r3, #3336	; 0xd08
 801ab4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab4c:	f503 620b 	add.w	r2, r3, #2224	; 0x8b0
 801ab50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab54:	f005 fcf4 	bl	8020540 <mp_exptmod>
 801ab58:	4603      	mov	r3, r0
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d002      	beq.n	801ab64 <wc_RsaFunctionSync+0x236>
                                                               tmpb) != MP_OKAY)
                    ret = MP_EXPTMOD_E;
 801ab5e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 801ab62:	647b      	str	r3, [r7, #68]	; 0x44
#if defined(WOLFSSL_SP_MATH) || (defined(WOLFSSL_SP_MATH_ALL) && \
                                              !defined(WOLFSSL_SP_INT_NEGATIVE))
                if (ret == 0 && mp_submod(tmpa, tmpb, &key->p, tmp) != MP_OKAY)
                    ret = MP_SUB_E;
#else
                if (ret == 0 && mp_sub(tmpa, tmpb, tmp) != MP_OKAY)
 801ab64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d10a      	bne.n	801ab80 <wc_RsaFunctionSync+0x252>
 801ab6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ab6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ab6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab70:	f005 fc5e 	bl	8020430 <mp_sub>
 801ab74:	4603      	mov	r3, r0
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d002      	beq.n	801ab80 <wc_RsaFunctionSync+0x252>
                    ret = MP_SUB_E;
 801ab7a:	f06f 0371 	mvn.w	r3, #113	; 0x71
 801ab7e:	647b      	str	r3, [r7, #68]	; 0x44
#endif

                if (ret == 0 && mp_mulmod(tmp, &key->u, &key->p,
 801ab80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d10f      	bne.n	801aba6 <wc_RsaFunctionSync+0x278>
 801ab86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab88:	f603 7134 	addw	r1, r3, #3892	; 0xf34
 801ab8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab8e:	f203 6284 	addw	r2, r3, #1668	; 0x684
 801ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab96:	f005 fc6b 	bl	8020470 <mp_mulmod>
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d002      	beq.n	801aba6 <wc_RsaFunctionSync+0x278>
                                                                tmp) != MP_OKAY)
                    ret = MP_MULMOD_E;
 801aba0:	f06f 0374 	mvn.w	r3, #116	; 0x74
 801aba4:	647b      	str	r3, [r7, #68]	; 0x44

                /* tmp = tmpb + q * tmp */
                if (ret == 0 && mp_mul(tmp, &key->q, tmp) != MP_OKAY)
 801aba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d10d      	bne.n	801abc8 <wc_RsaFunctionSync+0x29a>
 801abac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801abae:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801abb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801abb4:	4619      	mov	r1, r3
 801abb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801abb8:	f005 fc4a 	bl	8020450 <mp_mul>
 801abbc:	4603      	mov	r3, r0
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d002      	beq.n	801abc8 <wc_RsaFunctionSync+0x29a>
                    ret = MP_MUL_E;
 801abc2:	f06f 0373 	mvn.w	r3, #115	; 0x73
 801abc6:	647b      	str	r3, [r7, #68]	; 0x44

                if (ret == 0 && mp_add(tmp, tmpb, tmp) != MP_OKAY)
 801abc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d10a      	bne.n	801abe4 <wc_RsaFunctionSync+0x2b6>
 801abce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801abd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801abd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801abd4:	f005 fc1c 	bl	8020410 <mp_add>
 801abd8:	4603      	mov	r3, r0
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d002      	beq.n	801abe4 <wc_RsaFunctionSync+0x2b6>
                    ret = MP_ADD_E;
 801abde:	f06f 0372 	mvn.w	r3, #114	; 0x72
 801abe2:	647b      	str	r3, [r7, #68]	; 0x44

            #ifdef WOLFSSL_SMALL_STACK
                if (tmpa != NULL)
 801abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d013      	beq.n	801ac12 <wc_RsaFunctionSync+0x2e4>
            #endif
                {
                    if (cleara) {
 801abea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abec:	2b00      	cmp	r3, #0
 801abee:	d002      	beq.n	801abf6 <wc_RsaFunctionSync+0x2c8>
                        mp_forcezero(tmpa);
 801abf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801abf2:	f005 fbae 	bl	8020352 <mp_forcezero>
                    }
                    if (clearb) {
 801abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d002      	beq.n	801ac02 <wc_RsaFunctionSync+0x2d4>
                        mp_forcezero(tmpb);
 801abfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801abfe:	f005 fba8 	bl	8020352 <mp_forcezero>
                    }
            #ifdef WOLFSSL_SMALL_STACK
                    /* tmpb is allocated after tmpa. */
                    XFREE(tmpa, key->heap, DYNAMIC_TYPE_RSA);
 801ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac04:	623b      	str	r3, [r7, #32]
 801ac06:	6a3b      	ldr	r3, [r7, #32]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d002      	beq.n	801ac12 <wc_RsaFunctionSync+0x2e4>
 801ac0c:	6a38      	ldr	r0, [r7, #32]
 801ac0e:	f7fd ffe9 	bl	8018be4 <wolfSSL_Free>
            } /* tmpa/b scope */
        #endif   /* RSA_LOW_MEM */

        #ifdef WC_RSA_BLINDING
            /* unblind */
            if (ret == 0 && mp_mulmod(tmp, rndi, &key->n, tmp) != MP_OKAY)
 801ac12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d123      	bne.n	801ac60 <wc_RsaFunctionSync+0x332>
 801ac18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ac1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac20:	f005 fc26 	bl	8020470 <mp_mulmod>
 801ac24:	4603      	mov	r3, r0
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d01a      	beq.n	801ac60 <wc_RsaFunctionSync+0x332>
                ret = MP_MULMOD_E;
 801ac2a:	f06f 0374 	mvn.w	r3, #116	; 0x74
 801ac2e:	647b      	str	r3, [r7, #68]	; 0x44
        #endif /* WC_RSA_BLINDING */

            break;
 801ac30:	e016      	b.n	801ac60 <wc_RsaFunctionSync+0x332>
        }
    #endif
        case RSA_PUBLIC_ENCRYPT:
        case RSA_PUBLIC_DECRYPT:
            if (mp_exptmod_nct(tmp, &key->e, &key->n, tmp) != MP_OKAY)
 801ac32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac34:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 801ac38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac3e:	f005 fc91 	bl	8020564 <mp_exptmod_nct>
 801ac42:	4603      	mov	r3, r0
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d00d      	beq.n	801ac64 <wc_RsaFunctionSync+0x336>
                ret = MP_EXPTMOD_E;
 801ac48:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 801ac4c:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 801ac4e:	e009      	b.n	801ac64 <wc_RsaFunctionSync+0x336>
        default:
            ret = RSA_WRONG_TYPE_E;
 801ac50:	f06f 0381 	mvn.w	r3, #129	; 0x81
 801ac54:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 801ac56:	e006      	b.n	801ac66 <wc_RsaFunctionSync+0x338>
        }
    }
 801ac58:	bf00      	nop
 801ac5a:	e004      	b.n	801ac66 <wc_RsaFunctionSync+0x338>
                break;
 801ac5c:	bf00      	nop
 801ac5e:	e002      	b.n	801ac66 <wc_RsaFunctionSync+0x338>
            break;
 801ac60:	bf00      	nop
 801ac62:	e000      	b.n	801ac66 <wc_RsaFunctionSync+0x338>
            break;
 801ac64:	bf00      	nop

    if (ret == 0) {
 801ac66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d107      	bne.n	801ac7c <wc_RsaFunctionSync+0x34e>
        if (keyLen > *outLen)
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac72:	429a      	cmp	r2, r3
 801ac74:	d902      	bls.n	801ac7c <wc_RsaFunctionSync+0x34e>
            ret = RSA_BUFFER_E;
 801ac76:	f06f 0382 	mvn.w	r3, #130	; 0x82
 801ac7a:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (ret == 0) {
 801ac7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d10e      	bne.n	801aca0 <wc_RsaFunctionSync+0x372>
        *outLen = keyLen;
 801ac82:	683b      	ldr	r3, [r7, #0]
 801ac84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac86:	601a      	str	r2, [r3, #0]
        if (mp_to_unsigned_bin_len(tmp, out, keyLen) != MP_OKAY)
 801ac88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac8a:	461a      	mov	r2, r3
 801ac8c:	6879      	ldr	r1, [r7, #4]
 801ac8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac90:	f005 fcb0 	bl	80205f4 <mp_to_unsigned_bin_len>
 801ac94:	4603      	mov	r3, r0
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d002      	beq.n	801aca0 <wc_RsaFunctionSync+0x372>
             ret = MP_TO_E;
 801ac9a:	f06f 0370 	mvn.w	r3, #112	; 0x70
 801ac9e:	647b      	str	r3, [r7, #68]	; 0x44
    (void)key;
    XMEMCPY(out, in, inLen);
    *outLen = inLen;
#endif

    mp_forcezero(tmp);
 801aca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aca2:	f005 fb56 	bl	8020352 <mp_forcezero>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(tmp, key->heap, DYNAMIC_TYPE_RSA);
 801aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aca8:	61fb      	str	r3, [r7, #28]
 801acaa:	69fb      	ldr	r3, [r7, #28]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d002      	beq.n	801acb6 <wc_RsaFunctionSync+0x388>
 801acb0:	69f8      	ldr	r0, [r7, #28]
 801acb2:	f7fd ff97 	bl	8018be4 <wolfSSL_Free>
#elif defined(WOLFSSL_CHECK_MEM_ZERO)
    mp_memzero_check(tmp);
#endif
#ifdef WC_RSA_BLINDING
    if (type == RSA_PRIVATE_DECRYPT || type == RSA_PRIVATE_ENCRYPT) {
 801acb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801acb8:	2b03      	cmp	r3, #3
 801acba:	d002      	beq.n	801acc2 <wc_RsaFunctionSync+0x394>
 801acbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801acbe:	2b02      	cmp	r3, #2
 801acc0:	d105      	bne.n	801acce <wc_RsaFunctionSync+0x3a0>
        mp_forcezero(rndi);
 801acc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acc4:	f005 fb45 	bl	8020352 <mp_forcezero>
        mp_forcezero(rnd);
 801acc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801acca:	f005 fb42 	bl	8020352 <mp_forcezero>
    }
#ifdef WOLFSSL_SMALL_STACK
    XFREE(rnd, key->heap, DYNAMIC_TYPE_RSA);
 801acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acd0:	61bb      	str	r3, [r7, #24]
 801acd2:	69bb      	ldr	r3, [r7, #24]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d002      	beq.n	801acde <wc_RsaFunctionSync+0x3b0>
 801acd8:	69b8      	ldr	r0, [r7, #24]
 801acda:	f7fd ff83 	bl	8018be4 <wolfSSL_Free>
        mp_memzero_check(rnd);
        mp_memzero_check(rndi);
    }
#endif
#endif /* WC_RSA_BLINDING */
    return ret;
 801acde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
#endif /* WOLFSSL_SP_MATH */
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3748      	adds	r7, #72	; 0x48
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <wc_RsaFunction_ex>:
#endif /* WOLFSSL_CRYPTOCELL */

static int wc_RsaFunction_ex(const byte* in, word32 inLen, byte* out,
                             word32* outLen, int type, RsaKey* key, WC_RNG* rng,
                             int checkSmallCt)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b08c      	sub	sp, #48	; 0x30
 801acec:	af04      	add	r7, sp, #16
 801acee:	60f8      	str	r0, [r7, #12]
 801acf0:	60b9      	str	r1, [r7, #8]
 801acf2:	607a      	str	r2, [r7, #4]
 801acf4:	603b      	str	r3, [r7, #0]
    int ret = 0;
 801acf6:	2300      	movs	r3, #0
 801acf8:	61fb      	str	r3, [r7, #28]
    (void)rng;
    (void)checkSmallCt;

    if (key == NULL || in == NULL || inLen == 0 || out == NULL ||
 801acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d013      	beq.n	801ad28 <wc_RsaFunction_ex+0x40>
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d010      	beq.n	801ad28 <wc_RsaFunction_ex+0x40>
 801ad06:	68bb      	ldr	r3, [r7, #8]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d00d      	beq.n	801ad28 <wc_RsaFunction_ex+0x40>
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d00a      	beq.n	801ad28 <wc_RsaFunction_ex+0x40>
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d007      	beq.n	801ad28 <wc_RsaFunction_ex+0x40>
            outLen == NULL || *outLen == 0 || type == RSA_TYPE_UNKNOWN) {
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d003      	beq.n	801ad28 <wc_RsaFunction_ex+0x40>
 801ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad26:	d102      	bne.n	801ad2e <wc_RsaFunction_ex+0x46>
        return BAD_FUNC_ARG;
 801ad28:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801ad2c:	e08e      	b.n	801ae4c <wc_RsaFunction_ex+0x164>
#ifndef WOLF_CRYPTO_CB_ONLY_RSA
    SAVE_VECTOR_REGISTERS(return _svr_ret;);

#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(TEST_UNPAD_CONSTANT_TIME) && \
    !defined(NO_RSA_BOUNDS_CHECK)
    if (type == RSA_PRIVATE_DECRYPT &&
 801ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad30:	2b03      	cmp	r3, #3
 801ad32:	d16c      	bne.n	801ae0e <wc_RsaFunction_ex+0x126>
        key->state == RSA_STATE_DECRYPT_EXPTMOD) {
 801ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad3a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    if (type == RSA_PRIVATE_DECRYPT &&
 801ad3e:	2b04      	cmp	r3, #4
 801ad40:	d165      	bne.n	801ae0e <wc_RsaFunction_ex+0x126>
#else
        mp_int c[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
        c = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_RSA);
 801ad42:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801ad46:	f7fd ff31 	bl	8018bac <wolfSSL_Malloc>
 801ad4a:	61b8      	str	r0, [r7, #24]
        if (c == NULL)
 801ad4c:	69bb      	ldr	r3, [r7, #24]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d102      	bne.n	801ad58 <wc_RsaFunction_ex+0x70>
            ret = MEMORY_E;
 801ad52:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801ad56:	61fb      	str	r3, [r7, #28]
#endif

        if (ret == 0 && mp_init(c) != MP_OKAY)
 801ad58:	69fb      	ldr	r3, [r7, #28]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d108      	bne.n	801ad70 <wc_RsaFunction_ex+0x88>
 801ad5e:	69b8      	ldr	r0, [r7, #24]
 801ad60:	f005 fa86 	bl	8020270 <mp_init>
 801ad64:	4603      	mov	r3, r0
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d002      	beq.n	801ad70 <wc_RsaFunction_ex+0x88>
            ret = MP_INIT_E;
 801ad6a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801ad6e:	61fb      	str	r3, [r7, #28]
        if (ret == 0) {
 801ad70:	69fb      	ldr	r3, [r7, #28]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d10b      	bne.n	801ad8e <wc_RsaFunction_ex+0xa6>
            if (mp_read_unsigned_bin(c, in, inLen) != 0)
 801ad76:	68bb      	ldr	r3, [r7, #8]
 801ad78:	461a      	mov	r2, r3
 801ad7a:	68f9      	ldr	r1, [r7, #12]
 801ad7c:	69b8      	ldr	r0, [r7, #24]
 801ad7e:	f005 fc49 	bl	8020614 <mp_read_unsigned_bin>
 801ad82:	4603      	mov	r3, r0
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d002      	beq.n	801ad8e <wc_RsaFunction_ex+0xa6>
                ret = MP_READ_E;
 801ad88:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 801ad8c:	61fb      	str	r3, [r7, #28]
        }
        if (ret == 0) {
 801ad8e:	69fb      	ldr	r3, [r7, #28]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d10c      	bne.n	801adae <wc_RsaFunction_ex+0xc6>
            /* check c > 1 */
            if (checkSmallCt && (mp_cmp_d(c, 1) != MP_GT))
 801ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d009      	beq.n	801adae <wc_RsaFunction_ex+0xc6>
 801ad9a:	2101      	movs	r1, #1
 801ad9c:	69b8      	ldr	r0, [r7, #24]
 801ad9e:	f005 fc01 	bl	80205a4 <mp_cmp_d>
 801ada2:	4603      	mov	r3, r0
 801ada4:	2b01      	cmp	r3, #1
 801ada6:	d002      	beq.n	801adae <wc_RsaFunction_ex+0xc6>
                ret = RSA_OUT_OF_RANGE_E;
 801ada8:	f06f 03fc 	mvn.w	r3, #252	; 0xfc
 801adac:	61fb      	str	r3, [r7, #28]
        }
        if (ret == 0) {
 801adae:	69fb      	ldr	r3, [r7, #28]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d10a      	bne.n	801adca <wc_RsaFunction_ex+0xe2>
            /* add c+1 */
            if (mp_add_d(c, 1, c) != MP_OKAY)
 801adb4:	69ba      	ldr	r2, [r7, #24]
 801adb6:	2101      	movs	r1, #1
 801adb8:	69b8      	ldr	r0, [r7, #24]
 801adba:	f005 fdb5 	bl	8020928 <mp_add_d>
 801adbe:	4603      	mov	r3, r0
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d002      	beq.n	801adca <wc_RsaFunction_ex+0xe2>
                ret = MP_ADD_E;
 801adc4:	f06f 0372 	mvn.w	r3, #114	; 0x72
 801adc8:	61fb      	str	r3, [r7, #28]
        }
        if (ret == 0) {
 801adca:	69fb      	ldr	r3, [r7, #28]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d10b      	bne.n	801ade8 <wc_RsaFunction_ex+0x100>
            /* check c+1 < n */
            if (mp_cmp(c, &key->n) != MP_LT)
 801add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801add2:	4619      	mov	r1, r3
 801add4:	69b8      	ldr	r0, [r7, #24]
 801add6:	f005 fbd7 	bl	8020588 <mp_cmp>
 801adda:	4603      	mov	r3, r0
 801addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ade0:	d002      	beq.n	801ade8 <wc_RsaFunction_ex+0x100>
                ret = RSA_OUT_OF_RANGE_E;
 801ade2:	f06f 03fc 	mvn.w	r3, #252	; 0xfc
 801ade6:	61fb      	str	r3, [r7, #28]
        }
        mp_clear(c);
 801ade8:	69b8      	ldr	r0, [r7, #24]
 801adea:	f005 fac7 	bl	802037c <mp_clear>

#ifdef WOLFSSL_SMALL_STACK
        if (c != NULL)
 801adee:	69bb      	ldr	r3, [r7, #24]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d007      	beq.n	801ae04 <wc_RsaFunction_ex+0x11c>
            XFREE(c, key->heap, DYNAMIC_TYPE_RSA);
 801adf4:	69bb      	ldr	r3, [r7, #24]
 801adf6:	617b      	str	r3, [r7, #20]
 801adf8:	697b      	ldr	r3, [r7, #20]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d002      	beq.n	801ae04 <wc_RsaFunction_ex+0x11c>
 801adfe:	6978      	ldr	r0, [r7, #20]
 801ae00:	f7fd fef0 	bl	8018be4 <wolfSSL_Free>
#endif

        if (ret != 0) {
 801ae04:	69fb      	ldr	r3, [r7, #28]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d001      	beq.n	801ae0e <wc_RsaFunction_ex+0x126>
            RESTORE_VECTOR_REGISTERS();
            return ret;
 801ae0a:	69fb      	ldr	r3, [r7, #28]
 801ae0c:	e01e      	b.n	801ae4c <wc_RsaFunction_ex+0x164>
        ret = wc_RsaFunctionNonBlock(in, inLen, out, outLen, type, key);
    }
    else
#endif
    {
        ret = wc_RsaFunctionSync(in, inLen, out, outLen, type, key, rng);
 801ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae10:	9302      	str	r3, [sp, #8]
 801ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae14:	9301      	str	r3, [sp, #4]
 801ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae18:	9300      	str	r3, [sp, #0]
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	687a      	ldr	r2, [r7, #4]
 801ae1e:	68b9      	ldr	r1, [r7, #8]
 801ae20:	68f8      	ldr	r0, [r7, #12]
 801ae22:	f7ff fd84 	bl	801a92e <wc_RsaFunctionSync>
 801ae26:	61f8      	str	r0, [r7, #28]
    }

    RESTORE_VECTOR_REGISTERS();

    /* handle error */
    if (ret < 0 && ret != WC_PENDING_E
 801ae28:	69fb      	ldr	r3, [r7, #28]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	da0d      	bge.n	801ae4a <wc_RsaFunction_ex+0x162>
 801ae2e:	69fb      	ldr	r3, [r7, #28]
 801ae30:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 801ae34:	d009      	beq.n	801ae4a <wc_RsaFunction_ex+0x162>
        if (ret == MP_EXPTMOD_E) {
            /* This can happen due to incorrectly set FP_MAX_BITS or missing XREALLOC */
            WOLFSSL_MSG("RSA_FUNCTION MP_EXPTMOD_E: memory/config problem");
        }

        key->state = RSA_STATE_NONE;
 801ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae3c:	461a      	mov	r2, r3
 801ae3e:	2300      	movs	r3, #0
 801ae40:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
        wc_RsaCleanup(key);
 801ae44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ae46:	f7ff f805 	bl	8019e54 <wc_RsaCleanup>
    }
    return ret;
 801ae4a:	69fb      	ldr	r3, [r7, #28]
#endif /* WOLF_CRYPTO_CB_ONLY_RSA */
}
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	3720      	adds	r7, #32
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd80      	pop	{r7, pc}

0801ae54 <RsaPrivateDecryptEx>:
                            word32 outLen, byte** outPtr, RsaKey* key,
                            int rsa_type, byte pad_value, int pad_type,
                            enum wc_HashType hash, int mgf,
                            byte* label, word32 labelSz, int saltLen,
                            WC_RNG* rng)
{
 801ae54:	b5b0      	push	{r4, r5, r7, lr}
 801ae56:	b092      	sub	sp, #72	; 0x48
 801ae58:	af08      	add	r7, sp, #32
 801ae5a:	60f8      	str	r0, [r7, #12]
 801ae5c:	60b9      	str	r1, [r7, #8]
 801ae5e:	607a      	str	r2, [r7, #4]
 801ae60:	603b      	str	r3, [r7, #0]
    int ret = RSA_WRONG_TYPE_E;
 801ae62:	f06f 0381 	mvn.w	r3, #129	; 0x81
 801ae66:	627b      	str	r3, [r7, #36]	; 0x24
    byte* pad = NULL;
 801ae68:	2300      	movs	r3, #0
 801ae6a:	613b      	str	r3, [r7, #16]

    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d008      	beq.n	801ae84 <RsaPrivateDecryptEx+0x30>
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d005      	beq.n	801ae84 <RsaPrivateDecryptEx+0x30>
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d002      	beq.n	801ae84 <RsaPrivateDecryptEx+0x30>
 801ae7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d102      	bne.n	801ae8a <RsaPrivateDecryptEx+0x36>
        return BAD_FUNC_ARG;
 801ae84:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801ae88:	e15d      	b.n	801b146 <RsaPrivateDecryptEx+0x2f2>
    }

    switch (key->state) {
 801ae8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ae8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae90:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 801ae94:	2b06      	cmp	r3, #6
 801ae96:	f200 813e 	bhi.w	801b116 <RsaPrivateDecryptEx+0x2c2>
 801ae9a:	a201      	add	r2, pc, #4	; (adr r2, 801aea0 <RsaPrivateDecryptEx+0x4c>)
 801ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aea0:	0801aebd 	.word	0x0801aebd
 801aea4:	0801b117 	.word	0x0801b117
 801aea8:	0801b117 	.word	0x0801b117
 801aeac:	0801b117 	.word	0x0801b117
 801aeb0:	0801af59 	.word	0x0801af59
 801aeb4:	0801afbd 	.word	0x0801afbd
 801aeb8:	0801b11f 	.word	0x0801b11f
    case RSA_STATE_NONE:
        key->dataLen = inLen;
 801aebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aec2:	461a      	mov	r2, r3
 801aec4:	68bb      	ldr	r3, [r7, #8]
 801aec6:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170


#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE) && \
    !defined(WOLFSSL_NO_MALLOC)
        /* verify the tmp ptr is NULL, otherwise indicates bad state */
        if (key->data != NULL) {
 801aeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aed0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d003      	beq.n	801aee0 <RsaPrivateDecryptEx+0x8c>
            ret = BAD_STATE_E;
 801aed8:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 801aedc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801aede:	e121      	b.n	801b124 <RsaPrivateDecryptEx+0x2d0>
        }

        /* if not doing this inline then allocate a buffer for it */
        if (outPtr == NULL) {
 801aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d124      	bne.n	801af30 <RsaPrivateDecryptEx+0xdc>
            key->data = (byte*)XMALLOC(inLen, key->heap,
 801aee6:	68b8      	ldr	r0, [r7, #8]
 801aee8:	f7fd fe60 	bl	8018bac <wolfSSL_Malloc>
 801aeec:	4602      	mov	r2, r0
 801aeee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aef4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
                                                      DYNAMIC_TYPE_WOLF_BIGINT);
            key->dataIsAlloc = 1;
 801aef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aefe:	2201      	movs	r2, #1
 801af00:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
            if (key->data == NULL) {
 801af04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af0a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d103      	bne.n	801af1a <RsaPrivateDecryptEx+0xc6>
                ret = MEMORY_E;
 801af12:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801af16:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 801af18:	e104      	b.n	801b124 <RsaPrivateDecryptEx+0x2d0>
            }
            XMEMCPY(key->data, in, inLen);
 801af1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af20:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 801af24:	68ba      	ldr	r2, [r7, #8]
 801af26:	68f9      	ldr	r1, [r7, #12]
 801af28:	4618      	mov	r0, r3
 801af2a:	f006 f9db 	bl	80212e4 <memcpy>
 801af2e:	e00c      	b.n	801af4a <RsaPrivateDecryptEx+0xf6>
        }
        else {
            key->dataIsAlloc = 0;
 801af30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af36:	2200      	movs	r2, #0
 801af38:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
            key->data = out;
 801af3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af42:	461a      	mov	r2, r3
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
        }
#endif

        key->state = RSA_STATE_DECRYPT_EXPTMOD;
 801af4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af50:	461a      	mov	r2, r3
 801af52:	2304      	movs	r3, #4
 801af54:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
        FALL_THROUGH;

    case RSA_STATE_DECRYPT_EXPTMOD:
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE) && \
    !defined(WOLFSSL_NO_MALLOC)
        ret = wc_RsaFunction_ex(key->data, inLen, key->data, &key->dataLen,
 801af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af5e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 801af62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af68:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 801af6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af6e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 801af72:	3310      	adds	r3, #16
 801af74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801af76:	2a01      	cmp	r2, #1
 801af78:	bf14      	ite	ne
 801af7a:	2201      	movne	r2, #1
 801af7c:	2200      	moveq	r2, #0
 801af7e:	b2d2      	uxtb	r2, r2
 801af80:	9203      	str	r2, [sp, #12]
 801af82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801af84:	9202      	str	r2, [sp, #8]
 801af86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801af88:	9201      	str	r2, [sp, #4]
 801af8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801af8c:	9200      	str	r2, [sp, #0]
 801af8e:	460a      	mov	r2, r1
 801af90:	68b9      	ldr	r1, [r7, #8]
 801af92:	f7ff fea9 	bl	801ace8 <wc_RsaFunction_ex>
 801af96:	6278      	str	r0, [r7, #36]	; 0x24
#else
        ret = wc_RsaFunction_ex(in, inLen, out, &key->dataLen, rsa_type, key,
                                              rng, pad_type != WC_RSA_OAEP_PAD);
#endif

        if (ret >= 0 || ret == WC_PENDING_E) {
 801af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	da03      	bge.n	801afa6 <RsaPrivateDecryptEx+0x152>
 801af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa0:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 801afa4:	d106      	bne.n	801afb4 <RsaPrivateDecryptEx+0x160>
            key->state = RSA_STATE_DECRYPT_UNPAD;
 801afa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801afac:	461a      	mov	r2, r3
 801afae:	2305      	movs	r3, #5
 801afb0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
        }
        if (ret < 0) {
 801afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	f2c0 80b3 	blt.w	801b122 <RsaPrivateDecryptEx+0x2ce>
        FALL_THROUGH;

    case RSA_STATE_DECRYPT_UNPAD:
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE) && \
    !defined(WOLFSSL_NO_MALLOC)
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
 801afbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801afc2:	f8d3 4164 	ldr.w	r4, [r3, #356]	; 0x164
 801afc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801afcc:	f8d3 5170 	ldr.w	r5, [r3, #368]	; 0x170
                             hash, mgf, label, labelSz, saltLen,
                             mp_count_bits(&key->n), key->heap);
 801afd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
 801afd2:	4618      	mov	r0, r3
 801afd4:	f005 fbb0 	bl	8020738 <mp_count_bits>
 801afd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801afde:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801afe2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 801afe6:	f107 0210 	add.w	r2, r7, #16
 801afea:	9307      	str	r3, [sp, #28]
 801afec:	9006      	str	r0, [sp, #24]
 801afee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801aff0:	9305      	str	r3, [sp, #20]
 801aff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801aff4:	9304      	str	r3, [sp, #16]
 801aff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aff8:	9303      	str	r3, [sp, #12]
 801affa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801affc:	9302      	str	r3, [sp, #8]
 801affe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801b002:	9301      	str	r3, [sp, #4]
 801b004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b006:	9300      	str	r3, [sp, #0]
 801b008:	460b      	mov	r3, r1
 801b00a:	4629      	mov	r1, r5
 801b00c:	4620      	mov	r0, r4
 801b00e:	f7ff fc46 	bl	801a89e <wc_RsaUnPad_ex>
 801b012:	6278      	str	r0, [r7, #36]	; 0x24
#else
        ret = wc_RsaUnPad_ex(out, key->dataLen, &pad, pad_value, pad_type, hash,
                             mgf, label, labelSz, saltLen,
                             mp_count_bits(&key->n), key->heap);
#endif
        if (rsa_type == RSA_PUBLIC_DECRYPT && ret > (int)outLen)
 801b014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b016:	2b01      	cmp	r3, #1
 801b018:	d107      	bne.n	801b02a <RsaPrivateDecryptEx+0x1d6>
 801b01a:	683b      	ldr	r3, [r7, #0]
 801b01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b01e:	429a      	cmp	r2, r3
 801b020:	dd03      	ble.n	801b02a <RsaPrivateDecryptEx+0x1d6>
            ret = RSA_BUFFER_E;
 801b022:	f06f 0382 	mvn.w	r3, #130	; 0x82
 801b026:	627b      	str	r3, [r7, #36]	; 0x24
 801b028:	e06d      	b.n	801b106 <RsaPrivateDecryptEx+0x2b2>
        else if (ret >= 0 && pad != NULL) {
 801b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	db6a      	blt.n	801b106 <RsaPrivateDecryptEx+0x2b2>
 801b030:	693b      	ldr	r3, [r7, #16]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d067      	beq.n	801b106 <RsaPrivateDecryptEx+0x2b2>
    !defined(WOLFSSL_NO_MALLOC)
            signed char c;
#endif

            /* only copy output if not inline */
            if (outPtr == NULL) {
 801b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d148      	bne.n	801b0ce <RsaPrivateDecryptEx+0x27a>
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE) && \
    !defined(WOLFSSL_NO_MALLOC)
                if (rsa_type == RSA_PRIVATE_DECRYPT) {
 801b03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b03e:	2b03      	cmp	r3, #3
 801b040:	d13e      	bne.n	801b0c0 <RsaPrivateDecryptEx+0x26c>
                    word32 i = 0;
 801b042:	2300      	movs	r3, #0
 801b044:	623b      	str	r3, [r7, #32]
                    word32 j;
                    int start = (int)((size_t)pad - (size_t)key->data);
 801b046:	693b      	ldr	r3, [r7, #16]
 801b048:	461a      	mov	r2, r3
 801b04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b050:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 801b054:	1ad3      	subs	r3, r2, r3
 801b056:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < key->dataLen; j++) {
 801b058:	2300      	movs	r3, #0
 801b05a:	61fb      	str	r3, [r7, #28]
 801b05c:	e027      	b.n	801b0ae <RsaPrivateDecryptEx+0x25a>
                        out[i] = key->data[j];
 801b05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b064:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 801b068:	69fb      	ldr	r3, [r7, #28]
 801b06a:	441a      	add	r2, r3
 801b06c:	6879      	ldr	r1, [r7, #4]
 801b06e:	6a3b      	ldr	r3, [r7, #32]
 801b070:	440b      	add	r3, r1
 801b072:	7812      	ldrb	r2, [r2, #0]
 801b074:	701a      	strb	r2, [r3, #0]
                        c  = ctMaskGTE(j, start);
 801b076:	69fb      	ldr	r3, [r7, #28]
 801b078:	69b9      	ldr	r1, [r7, #24]
 801b07a:	4618      	mov	r0, r3
 801b07c:	f7fe fe2f 	bl	8019cde <ctMaskGTE>
 801b080:	4603      	mov	r3, r0
 801b082:	75fb      	strb	r3, [r7, #23]
                        c &= ctMaskLT(i, outLen);
 801b084:	6a3b      	ldr	r3, [r7, #32]
 801b086:	683a      	ldr	r2, [r7, #0]
 801b088:	4611      	mov	r1, r2
 801b08a:	4618      	mov	r0, r3
 801b08c:	f7fe fe39 	bl	8019d02 <ctMaskLT>
 801b090:	4603      	mov	r3, r0
 801b092:	b25a      	sxtb	r2, r3
 801b094:	7dfb      	ldrb	r3, [r7, #23]
 801b096:	4013      	ands	r3, r2
 801b098:	75fb      	strb	r3, [r7, #23]
                        /* 0 - no add, -1 add */
                        i += (word32)((byte)(-c));
 801b09a:	7dfb      	ldrb	r3, [r7, #23]
 801b09c:	425b      	negs	r3, r3
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	461a      	mov	r2, r3
 801b0a2:	6a3b      	ldr	r3, [r7, #32]
 801b0a4:	4413      	add	r3, r2
 801b0a6:	623b      	str	r3, [r7, #32]
                    for (j = 0; j < key->dataLen; j++) {
 801b0a8:	69fb      	ldr	r3, [r7, #28]
 801b0aa:	3301      	adds	r3, #1
 801b0ac:	61fb      	str	r3, [r7, #28]
 801b0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b0b4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b0b8:	69fa      	ldr	r2, [r7, #28]
 801b0ba:	429a      	cmp	r2, r3
 801b0bc:	d3cf      	bcc.n	801b05e <RsaPrivateDecryptEx+0x20a>
 801b0be:	e009      	b.n	801b0d4 <RsaPrivateDecryptEx+0x280>
                    }
                }
                else
#endif
                {
                    XMEMCPY(out, pad, ret);
 801b0c0:	693b      	ldr	r3, [r7, #16]
 801b0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0c4:	4619      	mov	r1, r3
 801b0c6:	6878      	ldr	r0, [r7, #4]
 801b0c8:	f006 f90c 	bl	80212e4 <memcpy>
 801b0cc:	e002      	b.n	801b0d4 <RsaPrivateDecryptEx+0x280>
                }
            }
            else
                *outPtr = pad;
 801b0ce:	693a      	ldr	r2, [r7, #16]
 801b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0d2:	601a      	str	r2, [r3, #0]

#if !defined(WOLFSSL_RSA_VERIFY_ONLY)
            ret = ctMaskSelInt(ctMaskLTE(ret, outLen), ret, RSA_BUFFER_E);
 801b0d4:	683b      	ldr	r3, [r7, #0]
 801b0d6:	4619      	mov	r1, r3
 801b0d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0da:	f7fe fe25 	bl	8019d28 <ctMaskLTE>
 801b0de:	4603      	mov	r3, r0
 801b0e0:	f06f 0282 	mvn.w	r2, #130	; 0x82
 801b0e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	f7fe fe9c 	bl	8019e24 <ctMaskSelInt>
 801b0ec:	6278      	str	r0, [r7, #36]	; 0x24
    #ifndef WOLFSSL_RSA_DECRYPT_TO_0_LEN
            ret = ctMaskSelInt(ctMaskNotEq(ret, 0), ret, RSA_BUFFER_E);
 801b0ee:	2100      	movs	r1, #0
 801b0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0f2:	f7fe fe81 	bl	8019df8 <ctMaskNotEq>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	f06f 0282 	mvn.w	r2, #130	; 0x82
 801b0fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b0fe:	4618      	mov	r0, r3
 801b100:	f7fe fe90 	bl	8019e24 <ctMaskSelInt>
 801b104:	6278      	str	r0, [r7, #36]	; 0x24
            if (outLen < (word32)ret)
                ret = RSA_BUFFER_E;
#endif
        }

        key->state = RSA_STATE_DECRYPT_RES;
 801b106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b10c:	461a      	mov	r2, r3
 801b10e:	2306      	movs	r3, #6
 801b110:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
                if (outPtr)
                    *outPtr = in;
            }
        }
    #endif
        break;
 801b114:	e003      	b.n	801b11e <RsaPrivateDecryptEx+0x2ca>

    default:
        ret = BAD_STATE_E;
 801b116:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 801b11a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801b11c:	e002      	b.n	801b124 <RsaPrivateDecryptEx+0x2d0>
        break;
 801b11e:	bf00      	nop
 801b120:	e000      	b.n	801b124 <RsaPrivateDecryptEx+0x2d0>
            break;
 801b122:	bf00      	nop
    }

    /* if async pending then return and skip done cleanup below */
    if (ret == WC_PENDING_E
 801b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b126:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 801b12a:	d101      	bne.n	801b130 <RsaPrivateDecryptEx+0x2dc>
    #ifdef WC_RSA_NONBLOCK
        || ret == FP_WOULDBLOCK
    #endif
    ) {
        return ret;
 801b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b12e:	e00a      	b.n	801b146 <RsaPrivateDecryptEx+0x2f2>
    }

    key->state = RSA_STATE_NONE;
 801b130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b136:	461a      	mov	r2, r3
 801b138:	2300      	movs	r3, #0
 801b13a:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
    wc_RsaCleanup(key);
 801b13e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b140:	f7fe fe88 	bl	8019e54 <wc_RsaCleanup>

    return ret;
 801b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b146:	4618      	mov	r0, r3
 801b148:	3728      	adds	r7, #40	; 0x28
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bdb0      	pop	{r4, r5, r7, pc}
 801b14e:	bf00      	nop

0801b150 <wc_RsaSSL_VerifyInline>:
#endif /* WC_NO_RSA_OAEP || WC_RSA_NO_PADDING */
#endif /* WOLFSSL_RSA_PUBLIC_ONLY */

#if !defined(WOLFSSL_CRYPTOCELL)
int wc_RsaSSL_VerifyInline(byte* in, word32 inLen, byte** out, RsaKey* key)
{
 801b150:	b580      	push	{r7, lr}
 801b152:	b092      	sub	sp, #72	; 0x48
 801b154:	af0c      	add	r7, sp, #48	; 0x30
 801b156:	60f8      	str	r0, [r7, #12]
 801b158:	60b9      	str	r1, [r7, #8]
 801b15a:	607a      	str	r2, [r7, #4]
 801b15c:	603b      	str	r3, [r7, #0]
    WC_RNG* rng;
    int ret;
#ifdef WC_RSA_BLINDING
    rng = key->rng;
 801b15e:	683b      	ldr	r3, [r7, #0]
 801b160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b164:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 801b168:	617b      	str	r3, [r7, #20]
#else
    rng = NULL;
#endif
    SAVE_VECTOR_REGISTERS(return _svr_ret;);
    ret = RsaPrivateDecryptEx(in, inLen, in, inLen, out, key,
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	930a      	str	r3, [sp, #40]	; 0x28
 801b16e:	2300      	movs	r3, #0
 801b170:	9309      	str	r3, [sp, #36]	; 0x24
 801b172:	2300      	movs	r3, #0
 801b174:	9308      	str	r3, [sp, #32]
 801b176:	2300      	movs	r3, #0
 801b178:	9307      	str	r3, [sp, #28]
 801b17a:	2300      	movs	r3, #0
 801b17c:	9306      	str	r3, [sp, #24]
 801b17e:	2300      	movs	r3, #0
 801b180:	9305      	str	r3, [sp, #20]
 801b182:	2300      	movs	r3, #0
 801b184:	9304      	str	r3, [sp, #16]
 801b186:	2301      	movs	r3, #1
 801b188:	9303      	str	r3, [sp, #12]
 801b18a:	2301      	movs	r3, #1
 801b18c:	9302      	str	r3, [sp, #8]
 801b18e:	683b      	ldr	r3, [r7, #0]
 801b190:	9301      	str	r3, [sp, #4]
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	9300      	str	r3, [sp, #0]
 801b196:	68bb      	ldr	r3, [r7, #8]
 801b198:	68fa      	ldr	r2, [r7, #12]
 801b19a:	68b9      	ldr	r1, [r7, #8]
 801b19c:	68f8      	ldr	r0, [r7, #12]
 801b19e:	f7ff fe59 	bl	801ae54 <RsaPrivateDecryptEx>
 801b1a2:	6138      	str	r0, [r7, #16]
        RSA_PUBLIC_DECRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, 0, rng);
    RESTORE_VECTOR_REGISTERS();
    return ret;
 801b1a4:	693b      	ldr	r3, [r7, #16]
}
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	3718      	adds	r7, #24
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd80      	pop	{r7, pc}

0801b1ae <wc_RsaPSS_VerifyInline_ex>:
 * returns the length of the PSS data on success and negative indicates failure.
 */
int wc_RsaPSS_VerifyInline_ex(byte* in, word32 inLen, byte** out,
                              enum wc_HashType hash, int mgf, int saltLen,
                              RsaKey* key)
{
 801b1ae:	b580      	push	{r7, lr}
 801b1b0:	b092      	sub	sp, #72	; 0x48
 801b1b2:	af0c      	add	r7, sp, #48	; 0x30
 801b1b4:	60f8      	str	r0, [r7, #12]
 801b1b6:	60b9      	str	r1, [r7, #8]
 801b1b8:	607a      	str	r2, [r7, #4]
 801b1ba:	70fb      	strb	r3, [r7, #3]
    WC_RNG* rng;
    int ret;
#ifdef WC_RSA_BLINDING
    rng = key->rng;
 801b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b1c2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 801b1c6:	617b      	str	r3, [r7, #20]
#else
    rng = NULL;
#endif
    SAVE_VECTOR_REGISTERS(return _svr_ret;);
    ret = RsaPrivateDecryptEx(in, inLen, in, inLen, out, key,
 801b1c8:	697b      	ldr	r3, [r7, #20]
 801b1ca:	930a      	str	r3, [sp, #40]	; 0x28
 801b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ce:	9309      	str	r3, [sp, #36]	; 0x24
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	9308      	str	r3, [sp, #32]
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	9307      	str	r3, [sp, #28]
 801b1d8:	6a3b      	ldr	r3, [r7, #32]
 801b1da:	9306      	str	r3, [sp, #24]
 801b1dc:	78fb      	ldrb	r3, [r7, #3]
 801b1de:	9305      	str	r3, [sp, #20]
 801b1e0:	2302      	movs	r3, #2
 801b1e2:	9304      	str	r3, [sp, #16]
 801b1e4:	2301      	movs	r3, #1
 801b1e6:	9303      	str	r3, [sp, #12]
 801b1e8:	2301      	movs	r3, #1
 801b1ea:	9302      	str	r3, [sp, #8]
 801b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1ee:	9301      	str	r3, [sp, #4]
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	9300      	str	r3, [sp, #0]
 801b1f4:	68bb      	ldr	r3, [r7, #8]
 801b1f6:	68fa      	ldr	r2, [r7, #12]
 801b1f8:	68b9      	ldr	r1, [r7, #8]
 801b1fa:	68f8      	ldr	r0, [r7, #12]
 801b1fc:	f7ff fe2a 	bl	801ae54 <RsaPrivateDecryptEx>
 801b200:	6138      	str	r0, [r7, #16]
        RSA_PUBLIC_DECRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PSS_PAD,
        hash, mgf, NULL, 0, saltLen, rng);
    RESTORE_VECTOR_REGISTERS();
    return ret;
 801b202:	693b      	ldr	r3, [r7, #16]
}
 801b204:	4618      	mov	r0, r3
 801b206:	3718      	adds	r7, #24
 801b208:	46bd      	mov	sp, r7
 801b20a:	bd80      	pop	{r7, pc}

0801b20c <wc_RsaPSS_CheckPadding_ex2>:
 * algorithm length and 0 on success.
 */
int wc_RsaPSS_CheckPadding_ex2(const byte* in, word32 inSz, byte* sig,
                               word32 sigSz, enum wc_HashType hashType,
                               int saltLen, int bits, void* heap)
{
 801b20c:	b580      	push	{r7, lr}
 801b20e:	b09a      	sub	sp, #104	; 0x68
 801b210:	af02      	add	r7, sp, #8
 801b212:	60f8      	str	r0, [r7, #12]
 801b214:	60b9      	str	r1, [r7, #8]
 801b216:	607a      	str	r2, [r7, #4]
 801b218:	603b      	str	r3, [r7, #0]
    int ret = 0;
 801b21a:	2300      	movs	r3, #0
 801b21c:	65fb      	str	r3, [r7, #92]	; 0x5c
    byte sigCheckBuf[WC_MAX_DIGEST_SIZE*2 + RSA_PSS_PAD_SZ];
    byte *sigCheck = sigCheckBuf;
 801b21e:	f107 0310 	add.w	r3, r7, #16
 801b222:	65bb      	str	r3, [r7, #88]	; 0x58

    (void)bits;

    if (in == NULL || sig == NULL ||
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d00c      	beq.n	801b244 <wc_RsaPSS_CheckPadding_ex2+0x38>
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d009      	beq.n	801b244 <wc_RsaPSS_CheckPadding_ex2+0x38>
                               inSz != (word32)wc_HashGetDigestSize(hashType)) {
 801b230:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801b234:	4618      	mov	r0, r3
 801b236:	f7fd f96f 	bl	8018518 <wc_HashGetDigestSize>
 801b23a:	4603      	mov	r3, r0
 801b23c:	461a      	mov	r2, r3
    if (in == NULL || sig == NULL ||
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	4293      	cmp	r3, r2
 801b242:	d002      	beq.n	801b24a <wc_RsaPSS_CheckPadding_ex2+0x3e>
        ret = BAD_FUNC_ARG;
 801b244:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801b248:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (ret == 0) {
 801b24a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d115      	bne.n	801b27c <wc_RsaPSS_CheckPadding_ex2+0x70>
        if (saltLen == RSA_PSS_SALT_LEN_DEFAULT) {
 801b250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b252:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b256:	d102      	bne.n	801b25e <wc_RsaPSS_CheckPadding_ex2+0x52>
            saltLen = inSz;
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b25c:	e00e      	b.n	801b27c <wc_RsaPSS_CheckPadding_ex2+0x70>
                    saltLen = RSA_PSS_SALT_MAX_SZ;
                }
            #endif
        }
#ifndef WOLFSSL_PSS_LONG_SALT
        else if (saltLen > (int)inSz) {
 801b25e:	68bb      	ldr	r3, [r7, #8]
 801b260:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b262:	429a      	cmp	r2, r3
 801b264:	dd03      	ble.n	801b26e <wc_RsaPSS_CheckPadding_ex2+0x62>
            ret = PSS_SALTLEN_E;
 801b266:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801b26a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b26c:	e006      	b.n	801b27c <wc_RsaPSS_CheckPadding_ex2+0x70>
        }
#endif
#ifndef WOLFSSL_PSS_SALT_LEN_DISCOVER
        else if (saltLen < RSA_PSS_SALT_LEN_DEFAULT) {
 801b26e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b270:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b274:	da02      	bge.n	801b27c <wc_RsaPSS_CheckPadding_ex2+0x70>
            ret = PSS_SALTLEN_E;
 801b276:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801b27a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
#endif
    }

    /* Sig = Salt | Exp Hash */
    if (ret == 0) {
 801b27c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d108      	bne.n	801b294 <wc_RsaPSS_CheckPadding_ex2+0x88>
        if (sigSz != inSz + saltLen) {
 801b282:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	4413      	add	r3, r2
 801b288:	683a      	ldr	r2, [r7, #0]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d002      	beq.n	801b294 <wc_RsaPSS_CheckPadding_ex2+0x88>
            ret = PSS_SALTLEN_E;
 801b28e:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 801b292:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
    }
#endif

    /* Exp Hash = HASH(8 * 0x00 | Message Hash | Salt) */
    if (ret == 0) {
 801b294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b296:	2b00      	cmp	r3, #0
 801b298:	d122      	bne.n	801b2e0 <wc_RsaPSS_CheckPadding_ex2+0xd4>
        XMEMSET(sigCheck, 0, RSA_PSS_PAD_SZ);
 801b29a:	2208      	movs	r2, #8
 801b29c:	2100      	movs	r1, #0
 801b29e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b2a0:	f006 f848 	bl	8021334 <memset>
        XMEMCPY(sigCheck + RSA_PSS_PAD_SZ, in, inSz);
 801b2a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b2a6:	3308      	adds	r3, #8
 801b2a8:	68ba      	ldr	r2, [r7, #8]
 801b2aa:	68f9      	ldr	r1, [r7, #12]
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	f006 f819 	bl	80212e4 <memcpy>
        XMEMCPY(sigCheck + RSA_PSS_PAD_SZ + inSz, sig, saltLen);
 801b2b2:	68bb      	ldr	r3, [r7, #8]
 801b2b4:	3308      	adds	r3, #8
 801b2b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b2b8:	4413      	add	r3, r2
 801b2ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b2bc:	6879      	ldr	r1, [r7, #4]
 801b2be:	4618      	mov	r0, r3
 801b2c0:	f006 f810 	bl	80212e4 <memcpy>
        ret = wc_Hash(hashType, sigCheck, RSA_PSS_PAD_SZ + inSz + saltLen,
 801b2c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b2c6:	68bb      	ldr	r3, [r7, #8]
 801b2c8:	4413      	add	r3, r2
 801b2ca:	f103 0208 	add.w	r2, r3, #8
 801b2ce:	f897 0068 	ldrb.w	r0, [r7, #104]	; 0x68
 801b2d2:	68bb      	ldr	r3, [r7, #8]
 801b2d4:	9300      	str	r3, [sp, #0]
 801b2d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b2d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b2da:	f7fd f95f 	bl	801859c <wc_Hash>
 801b2de:	65f8      	str	r0, [r7, #92]	; 0x5c
                      sigCheck, inSz);
    }
    if (ret == 0) {
 801b2e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d10d      	bne.n	801b302 <wc_RsaPSS_CheckPadding_ex2+0xf6>
        if (XMEMCMP(sigCheck, sig + saltLen, inSz) != 0) {
 801b2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b2e8:	687a      	ldr	r2, [r7, #4]
 801b2ea:	4413      	add	r3, r2
 801b2ec:	68ba      	ldr	r2, [r7, #8]
 801b2ee:	4619      	mov	r1, r3
 801b2f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b2f2:	f005 ffe7 	bl	80212c4 <memcmp>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d002      	beq.n	801b302 <wc_RsaPSS_CheckPadding_ex2+0xf6>
            WOLFSSL_MSG("RsaPSS_CheckPadding: Padding Error");
            ret = BAD_PADDING_E;
 801b2fc:	f06f 03c0 	mvn.w	r3, #192	; 0xc0
 801b300:	65fb      	str	r3, [r7, #92]	; 0x5c
        XFREE(sigCheck, heap, DYNAMIC_TYPE_RSA_BUFFER);
    }
#endif

    (void)heap; /* unused if memory is disabled */
    return ret;
 801b302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 801b304:	4618      	mov	r0, r3
 801b306:	3760      	adds	r7, #96	; 0x60
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd80      	pop	{r7, pc}

0801b30c <wc_RsaEncryptSize>:
}
#endif
#endif

int wc_RsaEncryptSize(const RsaKey* key)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b084      	sub	sp, #16
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
    int ret;

    if (key == NULL) {
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d102      	bne.n	801b320 <wc_RsaEncryptSize+0x14>
        return BAD_FUNC_ARG;
 801b31a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801b31e:	e005      	b.n	801b32c <wc_RsaEncryptSize+0x20>
    }

    ret = mp_unsigned_bin_size(&key->n);
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	4618      	mov	r0, r3
 801b324:	f005 f94c 	bl	80205c0 <mp_unsigned_bin_size>
 801b328:	60f8      	str	r0, [r7, #12]
    if (ret == 0 && key->devId != INVALID_DEVID) {
        ret = 2048/8; /* hardware handles, use 2048-bit as default */
    }
#endif

    return ret;
 801b32a:	68fb      	ldr	r3, [r7, #12]
}
 801b32c:	4618      	mov	r0, r3
 801b32e:	3710      	adds	r7, #16
 801b330:	46bd      	mov	sp, r7
 801b332:	bd80      	pop	{r7, pc}

0801b334 <wc_RsaSetRNG>:
#endif /* WOLFSSL_KEY_GEN */


#ifdef WC_RSA_BLINDING
int wc_RsaSetRNG(RsaKey* key, WC_RNG* rng)
{
 801b334:	b480      	push	{r7}
 801b336:	b083      	sub	sp, #12
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
 801b33c:	6039      	str	r1, [r7, #0]
    if (key == NULL || rng == NULL)
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d002      	beq.n	801b34a <wc_RsaSetRNG+0x16>
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d102      	bne.n	801b350 <wc_RsaSetRNG+0x1c>
        return BAD_FUNC_ARG;
 801b34a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801b34e:	e007      	b.n	801b360 <wc_RsaSetRNG+0x2c>

    key->rng = rng;
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b356:	461a      	mov	r2, r3
 801b358:	683b      	ldr	r3, [r7, #0]
 801b35a:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174

    return 0;
 801b35e:	2300      	movs	r3, #0
}
 801b360:	4618      	mov	r0, r3
 801b362:	370c      	adds	r7, #12
 801b364:	46bd      	mov	sp, r7
 801b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b36a:	4770      	bx	lr

0801b36c <rotlFixed>:
    {
 801b36c:	b480      	push	{r7}
 801b36e:	b083      	sub	sp, #12
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
 801b374:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 801b376:	687a      	ldr	r2, [r7, #4]
 801b378:	683b      	ldr	r3, [r7, #0]
 801b37a:	f1c3 0320 	rsb	r3, r3, #32
 801b37e:	fa62 f303 	ror.w	r3, r2, r3
    }
 801b382:	4618      	mov	r0, r3
 801b384:	370c      	adds	r7, #12
 801b386:	46bd      	mov	sp, r7
 801b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b38c:	4770      	bx	lr

0801b38e <rotrFixed>:
    {
 801b38e:	b480      	push	{r7}
 801b390:	b083      	sub	sp, #12
 801b392:	af00      	add	r7, sp, #0
 801b394:	6078      	str	r0, [r7, #4]
 801b396:	6039      	str	r1, [r7, #0]
        return (x >> y) | (x << (sizeof(y) * 8 - y));
 801b398:	687a      	ldr	r2, [r7, #4]
 801b39a:	683b      	ldr	r3, [r7, #0]
 801b39c:	fa62 f303 	ror.w	r3, r2, r3
    }
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	370c      	adds	r7, #12
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3aa:	4770      	bx	lr

0801b3ac <ByteReverseWord32>:
{
 801b3ac:	b580      	push	{r7, lr}
 801b3ae:	b082      	sub	sp, #8
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	0a1b      	lsrs	r3, r3, #8
 801b3b8:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	021b      	lsls	r3, r3, #8
 801b3c0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 801b3c4:	4313      	orrs	r3, r2
 801b3c6:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 801b3c8:	2110      	movs	r1, #16
 801b3ca:	6878      	ldr	r0, [r7, #4]
 801b3cc:	f7ff ffce 	bl	801b36c <rotlFixed>
 801b3d0:	4603      	mov	r3, r0
}
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	3708      	adds	r7, #8
 801b3d6:	46bd      	mov	sp, r7
 801b3d8:	bd80      	pop	{r7, pc}

0801b3da <ByteReverseWords>:
{
 801b3da:	b590      	push	{r4, r7, lr}
 801b3dc:	b087      	sub	sp, #28
 801b3de:	af00      	add	r7, sp, #0
 801b3e0:	60f8      	str	r0, [r7, #12]
 801b3e2:	60b9      	str	r1, [r7, #8]
 801b3e4:	607a      	str	r2, [r7, #4]
        count = byteCount/(word32)sizeof(word32);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	089b      	lsrs	r3, r3, #2
 801b3ea:	613b      	str	r3, [r7, #16]
        for (i = 0; i < count; i++)
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	617b      	str	r3, [r7, #20]
 801b3f0:	e010      	b.n	801b414 <ByteReverseWords+0x3a>
            out[i] = ByteReverseWord32(in[i]);
 801b3f2:	697b      	ldr	r3, [r7, #20]
 801b3f4:	009b      	lsls	r3, r3, #2
 801b3f6:	68ba      	ldr	r2, [r7, #8]
 801b3f8:	4413      	add	r3, r2
 801b3fa:	6819      	ldr	r1, [r3, #0]
 801b3fc:	697b      	ldr	r3, [r7, #20]
 801b3fe:	009b      	lsls	r3, r3, #2
 801b400:	68fa      	ldr	r2, [r7, #12]
 801b402:	18d4      	adds	r4, r2, r3
 801b404:	4608      	mov	r0, r1
 801b406:	f7ff ffd1 	bl	801b3ac <ByteReverseWord32>
 801b40a:	4603      	mov	r3, r0
 801b40c:	6023      	str	r3, [r4, #0]
        for (i = 0; i < count; i++)
 801b40e:	697b      	ldr	r3, [r7, #20]
 801b410:	3301      	adds	r3, #1
 801b412:	617b      	str	r3, [r7, #20]
 801b414:	697a      	ldr	r2, [r7, #20]
 801b416:	693b      	ldr	r3, [r7, #16]
 801b418:	429a      	cmp	r2, r3
 801b41a:	d3ea      	bcc.n	801b3f2 <ByteReverseWords+0x18>
}
 801b41c:	bf00      	nop
 801b41e:	bf00      	nop
 801b420:	371c      	adds	r7, #28
 801b422:	46bd      	mov	sp, r7
 801b424:	bd90      	pop	{r4, r7, pc}

0801b426 <min>:
    {
 801b426:	b480      	push	{r7}
 801b428:	b083      	sub	sp, #12
 801b42a:	af00      	add	r7, sp, #0
 801b42c:	6078      	str	r0, [r7, #4]
 801b42e:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 801b430:	687a      	ldr	r2, [r7, #4]
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	4293      	cmp	r3, r2
 801b436:	bf28      	it	cs
 801b438:	4613      	movcs	r3, r2
    }
 801b43a:	4618      	mov	r0, r3
 801b43c:	370c      	adds	r7, #12
 801b43e:	46bd      	mov	sp, r7
 801b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b444:	4770      	bx	lr
	...

0801b448 <InitSha256>:
    (!defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH))



static int InitSha256(wc_Sha256* sha256)
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b084      	sub	sp, #16
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	6078      	str	r0, [r7, #4]
    int ret = 0;
 801b450:	2300      	movs	r3, #0
 801b452:	60fb      	str	r3, [r7, #12]

    if (sha256 == NULL)
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	2b00      	cmp	r3, #0
 801b458:	d102      	bne.n	801b460 <InitSha256+0x18>
        return BAD_FUNC_ARG;
 801b45a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801b45e:	e027      	b.n	801b4b0 <InitSha256+0x68>

    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	2220      	movs	r2, #32
 801b464:	2100      	movs	r1, #0
 801b466:	4618      	mov	r0, r3
 801b468:	f005 ff64 	bl	8021334 <memset>
    sha256->digest[0] = 0x6A09E667L;
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	4a12      	ldr	r2, [pc, #72]	; (801b4b8 <InitSha256+0x70>)
 801b470:	601a      	str	r2, [r3, #0]
    sha256->digest[1] = 0xBB67AE85L;
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	4a11      	ldr	r2, [pc, #68]	; (801b4bc <InitSha256+0x74>)
 801b476:	605a      	str	r2, [r3, #4]
    sha256->digest[2] = 0x3C6EF372L;
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	4a11      	ldr	r2, [pc, #68]	; (801b4c0 <InitSha256+0x78>)
 801b47c:	609a      	str	r2, [r3, #8]
    sha256->digest[3] = 0xA54FF53AL;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	4a10      	ldr	r2, [pc, #64]	; (801b4c4 <InitSha256+0x7c>)
 801b482:	60da      	str	r2, [r3, #12]
    sha256->digest[4] = 0x510E527FL;
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	4a10      	ldr	r2, [pc, #64]	; (801b4c8 <InitSha256+0x80>)
 801b488:	611a      	str	r2, [r3, #16]
    sha256->digest[5] = 0x9B05688CL;
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	4a0f      	ldr	r2, [pc, #60]	; (801b4cc <InitSha256+0x84>)
 801b48e:	615a      	str	r2, [r3, #20]
    sha256->digest[6] = 0x1F83D9ABL;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	4a0f      	ldr	r2, [pc, #60]	; (801b4d0 <InitSha256+0x88>)
 801b494:	619a      	str	r2, [r3, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	4a0e      	ldr	r2, [pc, #56]	; (801b4d4 <InitSha256+0x8c>)
 801b49a:	61da      	str	r2, [r3, #28]

    sha256->buffLen = 0;
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	2200      	movs	r2, #0
 801b4a0:	661a      	str	r2, [r3, #96]	; 0x60
    sha256->loLen   = 0;
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	665a      	str	r2, [r3, #100]	; 0x64
    sha256->hiLen   = 0;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2200      	movs	r2, #0
 801b4ac:	669a      	str	r2, [r3, #104]	; 0x68

#ifdef WOLFSSL_MAXQ10XX_CRYPTO
    XMEMSET(&sha256->maxq_ctx, 0, sizeof(sha256->maxq_ctx));
#endif

    return ret;
 801b4ae:	68fb      	ldr	r3, [r7, #12]
}
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	3710      	adds	r7, #16
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}
 801b4b8:	6a09e667 	.word	0x6a09e667
 801b4bc:	bb67ae85 	.word	0xbb67ae85
 801b4c0:	3c6ef372 	.word	0x3c6ef372
 801b4c4:	a54ff53a 	.word	0xa54ff53a
 801b4c8:	510e527f 	.word	0x510e527f
 801b4cc:	9b05688c 	.word	0x9b05688c
 801b4d0:	1f83d9ab 	.word	0x1f83d9ab
 801b4d4:	5be0cd19 	.word	0x5be0cd19

0801b4d8 <wc_InitSha256_ex>:

#else
    #define NEED_SOFT_SHA256

    int wc_InitSha256_ex(wc_Sha256* sha256, void* heap, int devId)
    {
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b086      	sub	sp, #24
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	60f8      	str	r0, [r7, #12]
 801b4e0:	60b9      	str	r1, [r7, #8]
 801b4e2:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	617b      	str	r3, [r7, #20]
        if (sha256 == NULL)
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d102      	bne.n	801b4f4 <wc_InitSha256_ex+0x1c>
            return BAD_FUNC_ARG;
 801b4ee:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801b4f2:	e00c      	b.n	801b50e <wc_InitSha256_ex+0x36>
        ret = InitSha256(sha256);
 801b4f4:	68f8      	ldr	r0, [r7, #12]
 801b4f6:	f7ff ffa7 	bl	801b448 <InitSha256>
 801b4fa:	6178      	str	r0, [r7, #20]
        if (ret != 0)
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d001      	beq.n	801b506 <wc_InitSha256_ex+0x2e>
            return ret;
 801b502:	697b      	ldr	r3, [r7, #20]
 801b504:	e003      	b.n	801b50e <wc_InitSha256_ex+0x36>

        sha256->heap = heap;
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	68ba      	ldr	r2, [r7, #8]
 801b50a:	66da      	str	r2, [r3, #108]	; 0x6c
                            WOLFSSL_ASYNC_MARKER_SHA256, sha256->heap, devId);
    #else
        (void)devId;
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return ret;
 801b50c:	697b      	ldr	r3, [r7, #20]
    }
 801b50e:	4618      	mov	r0, r3
 801b510:	3718      	adds	r7, #24
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}
	...

0801b518 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 801b518:	b5b0      	push	{r4, r5, r7, lr}
 801b51a:	b090      	sub	sp, #64	; 0x40
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
 801b520:	6039      	str	r1, [r7, #0]
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 801b522:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b526:	f7fd fb41 	bl	8018bac <wolfSSL_Malloc>
 801b52a:	63b8      	str	r0, [r7, #56]	; 0x38
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 801b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d102      	bne.n	801b538 <Transform_Sha256+0x20>
            return MEMORY_E;
 801b532:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801b536:	e35f      	b.n	801bbf8 <Transform_Sha256+0x6e0>
    #else
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
 801b538:	2300      	movs	r3, #0
 801b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b53c:	e00c      	b.n	801b558 <Transform_Sha256+0x40>
            S[i] = sha256->digest[i];
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b542:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b548:	009b      	lsls	r3, r3, #2
 801b54a:	3340      	adds	r3, #64	; 0x40
 801b54c:	443b      	add	r3, r7
 801b54e:	f843 2c34 	str.w	r2, [r3, #-52]
        for (i = 0; i < 8; i++)
 801b552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b554:	3301      	adds	r3, #1
 801b556:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b55a:	2b07      	cmp	r3, #7
 801b55c:	ddef      	ble.n	801b53e <Transform_Sha256+0x26>

        for (i = 0; i < 16; i++)
 801b55e:	2300      	movs	r3, #0
 801b560:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b562:	e00c      	b.n	801b57e <Transform_Sha256+0x66>
            W[i] = *((const word32*)&data[i*sizeof(word32)]);
 801b564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b566:	009b      	lsls	r3, r3, #2
 801b568:	683a      	ldr	r2, [r7, #0]
 801b56a:	441a      	add	r2, r3
 801b56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b56e:	009b      	lsls	r3, r3, #2
 801b570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b572:	440b      	add	r3, r1
 801b574:	6812      	ldr	r2, [r2, #0]
 801b576:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 16; i++)
 801b578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b57a:	3301      	adds	r3, #1
 801b57c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b580:	2b0f      	cmp	r3, #15
 801b582:	ddef      	ble.n	801b564 <Transform_Sha256+0x4c>

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 801b584:	2310      	movs	r3, #16
 801b586:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b588:	e066      	b.n	801b658 <Transform_Sha256+0x140>
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 801b58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b58c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b590:	3b02      	subs	r3, #2
 801b592:	009b      	lsls	r3, r3, #2
 801b594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b596:	4413      	add	r3, r2
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	2111      	movs	r1, #17
 801b59c:	4618      	mov	r0, r3
 801b59e:	f7ff fef6 	bl	801b38e <rotrFixed>
 801b5a2:	4604      	mov	r4, r0
 801b5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b5aa:	3b02      	subs	r3, #2
 801b5ac:	009b      	lsls	r3, r3, #2
 801b5ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b5b0:	4413      	add	r3, r2
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	2113      	movs	r1, #19
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	f7ff fee9 	bl	801b38e <rotrFixed>
 801b5bc:	4603      	mov	r3, r0
 801b5be:	ea84 0203 	eor.w	r2, r4, r3
 801b5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b5c8:	3b02      	subs	r3, #2
 801b5ca:	009b      	lsls	r3, r3, #2
 801b5cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b5ce:	440b      	add	r3, r1
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	0a9b      	lsrs	r3, r3, #10
 801b5d4:	405a      	eors	r2, r3
 801b5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b5dc:	3b07      	subs	r3, #7
 801b5de:	009b      	lsls	r3, r3, #2
 801b5e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b5e2:	440b      	add	r3, r1
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	18d4      	adds	r4, r2, r3
 801b5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b5ee:	3b0f      	subs	r3, #15
 801b5f0:	009b      	lsls	r3, r3, #2
 801b5f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b5f4:	4413      	add	r3, r2
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	2107      	movs	r1, #7
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f7ff fec7 	bl	801b38e <rotrFixed>
 801b600:	4605      	mov	r5, r0
 801b602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b608:	3b0f      	subs	r3, #15
 801b60a:	009b      	lsls	r3, r3, #2
 801b60c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b60e:	4413      	add	r3, r2
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	2112      	movs	r1, #18
 801b614:	4618      	mov	r0, r3
 801b616:	f7ff feba 	bl	801b38e <rotrFixed>
 801b61a:	4603      	mov	r3, r0
 801b61c:	ea85 0203 	eor.w	r2, r5, r3
 801b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b626:	3b0f      	subs	r3, #15
 801b628:	009b      	lsls	r3, r3, #2
 801b62a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b62c:	440b      	add	r3, r1
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	08db      	lsrs	r3, r3, #3
 801b632:	4053      	eors	r3, r2
 801b634:	18e1      	adds	r1, r4, r3
 801b636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b63c:	3b10      	subs	r3, #16
 801b63e:	009b      	lsls	r3, r3, #2
 801b640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b642:	4413      	add	r3, r2
 801b644:	681a      	ldr	r2, [r3, #0]
 801b646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b648:	009b      	lsls	r3, r3, #2
 801b64a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b64c:	4403      	add	r3, r0
 801b64e:	440a      	add	r2, r1
 801b650:	601a      	str	r2, [r3, #0]
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 801b652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b654:	3301      	adds	r3, #1
 801b656:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b65a:	2b3f      	cmp	r3, #63	; 0x3f
 801b65c:	dd95      	ble.n	801b58a <Transform_Sha256+0x72>
                RND(j);
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 801b65e:	2300      	movs	r3, #0
 801b660:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b662:	e2a4      	b.n	801bbae <Transform_Sha256+0x696>
            RND(0); RND(1); RND(2); RND(3);
 801b664:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801b666:	69fb      	ldr	r3, [r7, #28]
 801b668:	2106      	movs	r1, #6
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7ff fe8f 	bl	801b38e <rotrFixed>
 801b670:	4605      	mov	r5, r0
 801b672:	69fb      	ldr	r3, [r7, #28]
 801b674:	210b      	movs	r1, #11
 801b676:	4618      	mov	r0, r3
 801b678:	f7ff fe89 	bl	801b38e <rotrFixed>
 801b67c:	4603      	mov	r3, r0
 801b67e:	405d      	eors	r5, r3
 801b680:	69fb      	ldr	r3, [r7, #28]
 801b682:	2119      	movs	r1, #25
 801b684:	4618      	mov	r0, r3
 801b686:	f7ff fe82 	bl	801b38e <rotrFixed>
 801b68a:	4603      	mov	r3, r0
 801b68c:	406b      	eors	r3, r5
 801b68e:	18e2      	adds	r2, r4, r3
 801b690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b692:	69f8      	ldr	r0, [r7, #28]
 801b694:	6a3c      	ldr	r4, [r7, #32]
 801b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b698:	4063      	eors	r3, r4
 801b69a:	4003      	ands	r3, r0
 801b69c:	404b      	eors	r3, r1
 801b69e:	441a      	add	r2, r3
 801b6a0:	49bd      	ldr	r1, [pc, #756]	; (801b998 <Transform_Sha256+0x480>)
 801b6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b6a8:	441a      	add	r2, r3
 801b6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6ac:	009b      	lsls	r3, r3, #2
 801b6ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b6b0:	440b      	add	r3, r1
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	4413      	add	r3, r2
 801b6b6:	633b      	str	r3, [r7, #48]	; 0x30
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	2102      	movs	r1, #2
 801b6bc:	4618      	mov	r0, r3
 801b6be:	f7ff fe66 	bl	801b38e <rotrFixed>
 801b6c2:	4604      	mov	r4, r0
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	210d      	movs	r1, #13
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7ff fe60 	bl	801b38e <rotrFixed>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	405c      	eors	r4, r3
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	2116      	movs	r1, #22
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f7ff fe59 	bl	801b38e <rotrFixed>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	ea84 0203 	eor.w	r2, r4, r3
 801b6e2:	68f9      	ldr	r1, [r7, #12]
 801b6e4:	693b      	ldr	r3, [r7, #16]
 801b6e6:	4319      	orrs	r1, r3
 801b6e8:	697b      	ldr	r3, [r7, #20]
 801b6ea:	4019      	ands	r1, r3
 801b6ec:	68f8      	ldr	r0, [r7, #12]
 801b6ee:	693b      	ldr	r3, [r7, #16]
 801b6f0:	4003      	ands	r3, r0
 801b6f2:	430b      	orrs	r3, r1
 801b6f4:	4413      	add	r3, r2
 801b6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b6f8:	69ba      	ldr	r2, [r7, #24]
 801b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6fc:	4413      	add	r3, r2
 801b6fe:	61bb      	str	r3, [r7, #24]
 801b700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b704:	4413      	add	r3, r2
 801b706:	62bb      	str	r3, [r7, #40]	; 0x28
 801b708:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801b70a:	69bb      	ldr	r3, [r7, #24]
 801b70c:	2106      	movs	r1, #6
 801b70e:	4618      	mov	r0, r3
 801b710:	f7ff fe3d 	bl	801b38e <rotrFixed>
 801b714:	4605      	mov	r5, r0
 801b716:	69bb      	ldr	r3, [r7, #24]
 801b718:	210b      	movs	r1, #11
 801b71a:	4618      	mov	r0, r3
 801b71c:	f7ff fe37 	bl	801b38e <rotrFixed>
 801b720:	4603      	mov	r3, r0
 801b722:	405d      	eors	r5, r3
 801b724:	69bb      	ldr	r3, [r7, #24]
 801b726:	2119      	movs	r1, #25
 801b728:	4618      	mov	r0, r3
 801b72a:	f7ff fe30 	bl	801b38e <rotrFixed>
 801b72e:	4603      	mov	r3, r0
 801b730:	406b      	eors	r3, r5
 801b732:	18e2      	adds	r2, r4, r3
 801b734:	6a39      	ldr	r1, [r7, #32]
 801b736:	69b8      	ldr	r0, [r7, #24]
 801b738:	69fc      	ldr	r4, [r7, #28]
 801b73a:	6a3b      	ldr	r3, [r7, #32]
 801b73c:	4063      	eors	r3, r4
 801b73e:	4003      	ands	r3, r0
 801b740:	404b      	eors	r3, r1
 801b742:	441a      	add	r2, r3
 801b744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b746:	3301      	adds	r3, #1
 801b748:	4993      	ldr	r1, [pc, #588]	; (801b998 <Transform_Sha256+0x480>)
 801b74a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b74e:	441a      	add	r2, r3
 801b750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b752:	3301      	adds	r3, #1
 801b754:	009b      	lsls	r3, r3, #2
 801b756:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b758:	440b      	add	r3, r1
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	4413      	add	r3, r2
 801b75e:	633b      	str	r3, [r7, #48]	; 0x30
 801b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b762:	2102      	movs	r1, #2
 801b764:	4618      	mov	r0, r3
 801b766:	f7ff fe12 	bl	801b38e <rotrFixed>
 801b76a:	4604      	mov	r4, r0
 801b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b76e:	210d      	movs	r1, #13
 801b770:	4618      	mov	r0, r3
 801b772:	f7ff fe0c 	bl	801b38e <rotrFixed>
 801b776:	4603      	mov	r3, r0
 801b778:	405c      	eors	r4, r3
 801b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b77c:	2116      	movs	r1, #22
 801b77e:	4618      	mov	r0, r3
 801b780:	f7ff fe05 	bl	801b38e <rotrFixed>
 801b784:	4603      	mov	r3, r0
 801b786:	ea84 0203 	eor.w	r2, r4, r3
 801b78a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	4319      	orrs	r1, r3
 801b790:	693b      	ldr	r3, [r7, #16]
 801b792:	4019      	ands	r1, r3
 801b794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	4003      	ands	r3, r0
 801b79a:	430b      	orrs	r3, r1
 801b79c:	4413      	add	r3, r2
 801b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b7a0:	697a      	ldr	r2, [r7, #20]
 801b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7a4:	4413      	add	r3, r2
 801b7a6:	617b      	str	r3, [r7, #20]
 801b7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ac:	4413      	add	r3, r2
 801b7ae:	627b      	str	r3, [r7, #36]	; 0x24
 801b7b0:	6a3c      	ldr	r4, [r7, #32]
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	2106      	movs	r1, #6
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7ff fde9 	bl	801b38e <rotrFixed>
 801b7bc:	4605      	mov	r5, r0
 801b7be:	697b      	ldr	r3, [r7, #20]
 801b7c0:	210b      	movs	r1, #11
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f7ff fde3 	bl	801b38e <rotrFixed>
 801b7c8:	4603      	mov	r3, r0
 801b7ca:	405d      	eors	r5, r3
 801b7cc:	697b      	ldr	r3, [r7, #20]
 801b7ce:	2119      	movs	r1, #25
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	f7ff fddc 	bl	801b38e <rotrFixed>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	406b      	eors	r3, r5
 801b7da:	18e2      	adds	r2, r4, r3
 801b7dc:	69f9      	ldr	r1, [r7, #28]
 801b7de:	6978      	ldr	r0, [r7, #20]
 801b7e0:	69bc      	ldr	r4, [r7, #24]
 801b7e2:	69fb      	ldr	r3, [r7, #28]
 801b7e4:	4063      	eors	r3, r4
 801b7e6:	4003      	ands	r3, r0
 801b7e8:	404b      	eors	r3, r1
 801b7ea:	441a      	add	r2, r3
 801b7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7ee:	3302      	adds	r3, #2
 801b7f0:	4969      	ldr	r1, [pc, #420]	; (801b998 <Transform_Sha256+0x480>)
 801b7f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b7f6:	441a      	add	r2, r3
 801b7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7fa:	3302      	adds	r3, #2
 801b7fc:	009b      	lsls	r3, r3, #2
 801b7fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b800:	440b      	add	r3, r1
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	4413      	add	r3, r2
 801b806:	633b      	str	r3, [r7, #48]	; 0x30
 801b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b80a:	2102      	movs	r1, #2
 801b80c:	4618      	mov	r0, r3
 801b80e:	f7ff fdbe 	bl	801b38e <rotrFixed>
 801b812:	4604      	mov	r4, r0
 801b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b816:	210d      	movs	r1, #13
 801b818:	4618      	mov	r0, r3
 801b81a:	f7ff fdb8 	bl	801b38e <rotrFixed>
 801b81e:	4603      	mov	r3, r0
 801b820:	405c      	eors	r4, r3
 801b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b824:	2116      	movs	r1, #22
 801b826:	4618      	mov	r0, r3
 801b828:	f7ff fdb1 	bl	801b38e <rotrFixed>
 801b82c:	4603      	mov	r3, r0
 801b82e:	ea84 0203 	eor.w	r2, r4, r3
 801b832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b836:	4319      	orrs	r1, r3
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	4019      	ands	r1, r3
 801b83c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b840:	4003      	ands	r3, r0
 801b842:	430b      	orrs	r3, r1
 801b844:	4413      	add	r3, r2
 801b846:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b848:	693a      	ldr	r2, [r7, #16]
 801b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b84c:	4413      	add	r3, r2
 801b84e:	613b      	str	r3, [r7, #16]
 801b850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b854:	4413      	add	r3, r2
 801b856:	623b      	str	r3, [r7, #32]
 801b858:	69fc      	ldr	r4, [r7, #28]
 801b85a:	693b      	ldr	r3, [r7, #16]
 801b85c:	2106      	movs	r1, #6
 801b85e:	4618      	mov	r0, r3
 801b860:	f7ff fd95 	bl	801b38e <rotrFixed>
 801b864:	4605      	mov	r5, r0
 801b866:	693b      	ldr	r3, [r7, #16]
 801b868:	210b      	movs	r1, #11
 801b86a:	4618      	mov	r0, r3
 801b86c:	f7ff fd8f 	bl	801b38e <rotrFixed>
 801b870:	4603      	mov	r3, r0
 801b872:	405d      	eors	r5, r3
 801b874:	693b      	ldr	r3, [r7, #16]
 801b876:	2119      	movs	r1, #25
 801b878:	4618      	mov	r0, r3
 801b87a:	f7ff fd88 	bl	801b38e <rotrFixed>
 801b87e:	4603      	mov	r3, r0
 801b880:	406b      	eors	r3, r5
 801b882:	18e2      	adds	r2, r4, r3
 801b884:	69b9      	ldr	r1, [r7, #24]
 801b886:	6938      	ldr	r0, [r7, #16]
 801b888:	697c      	ldr	r4, [r7, #20]
 801b88a:	69bb      	ldr	r3, [r7, #24]
 801b88c:	4063      	eors	r3, r4
 801b88e:	4003      	ands	r3, r0
 801b890:	404b      	eors	r3, r1
 801b892:	441a      	add	r2, r3
 801b894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b896:	3303      	adds	r3, #3
 801b898:	493f      	ldr	r1, [pc, #252]	; (801b998 <Transform_Sha256+0x480>)
 801b89a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b89e:	441a      	add	r2, r3
 801b8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b8a2:	3303      	adds	r3, #3
 801b8a4:	009b      	lsls	r3, r3, #2
 801b8a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b8a8:	440b      	add	r3, r1
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	4413      	add	r3, r2
 801b8ae:	633b      	str	r3, [r7, #48]	; 0x30
 801b8b0:	6a3b      	ldr	r3, [r7, #32]
 801b8b2:	2102      	movs	r1, #2
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7ff fd6a 	bl	801b38e <rotrFixed>
 801b8ba:	4604      	mov	r4, r0
 801b8bc:	6a3b      	ldr	r3, [r7, #32]
 801b8be:	210d      	movs	r1, #13
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	f7ff fd64 	bl	801b38e <rotrFixed>
 801b8c6:	4603      	mov	r3, r0
 801b8c8:	405c      	eors	r4, r3
 801b8ca:	6a3b      	ldr	r3, [r7, #32]
 801b8cc:	2116      	movs	r1, #22
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	f7ff fd5d 	bl	801b38e <rotrFixed>
 801b8d4:	4603      	mov	r3, r0
 801b8d6:	ea84 0203 	eor.w	r2, r4, r3
 801b8da:	6a39      	ldr	r1, [r7, #32]
 801b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8de:	4319      	orrs	r1, r3
 801b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8e2:	4019      	ands	r1, r3
 801b8e4:	6a38      	ldr	r0, [r7, #32]
 801b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8e8:	4003      	ands	r3, r0
 801b8ea:	430b      	orrs	r3, r1
 801b8ec:	4413      	add	r3, r2
 801b8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b8f0:	68fa      	ldr	r2, [r7, #12]
 801b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8f4:	4413      	add	r3, r2
 801b8f6:	60fb      	str	r3, [r7, #12]
 801b8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8fc:	4413      	add	r3, r2
 801b8fe:	61fb      	str	r3, [r7, #28]
            RND(4); RND(5); RND(6); RND(7);
 801b900:	69bc      	ldr	r4, [r7, #24]
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	2106      	movs	r1, #6
 801b906:	4618      	mov	r0, r3
 801b908:	f7ff fd41 	bl	801b38e <rotrFixed>
 801b90c:	4605      	mov	r5, r0
 801b90e:	68fb      	ldr	r3, [r7, #12]
 801b910:	210b      	movs	r1, #11
 801b912:	4618      	mov	r0, r3
 801b914:	f7ff fd3b 	bl	801b38e <rotrFixed>
 801b918:	4603      	mov	r3, r0
 801b91a:	405d      	eors	r5, r3
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	2119      	movs	r1, #25
 801b920:	4618      	mov	r0, r3
 801b922:	f7ff fd34 	bl	801b38e <rotrFixed>
 801b926:	4603      	mov	r3, r0
 801b928:	406b      	eors	r3, r5
 801b92a:	18e2      	adds	r2, r4, r3
 801b92c:	6979      	ldr	r1, [r7, #20]
 801b92e:	68f8      	ldr	r0, [r7, #12]
 801b930:	693c      	ldr	r4, [r7, #16]
 801b932:	697b      	ldr	r3, [r7, #20]
 801b934:	4063      	eors	r3, r4
 801b936:	4003      	ands	r3, r0
 801b938:	404b      	eors	r3, r1
 801b93a:	441a      	add	r2, r3
 801b93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b93e:	3304      	adds	r3, #4
 801b940:	4915      	ldr	r1, [pc, #84]	; (801b998 <Transform_Sha256+0x480>)
 801b942:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b946:	441a      	add	r2, r3
 801b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b94a:	3304      	adds	r3, #4
 801b94c:	009b      	lsls	r3, r3, #2
 801b94e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b950:	440b      	add	r3, r1
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	4413      	add	r3, r2
 801b956:	633b      	str	r3, [r7, #48]	; 0x30
 801b958:	69fb      	ldr	r3, [r7, #28]
 801b95a:	2102      	movs	r1, #2
 801b95c:	4618      	mov	r0, r3
 801b95e:	f7ff fd16 	bl	801b38e <rotrFixed>
 801b962:	4604      	mov	r4, r0
 801b964:	69fb      	ldr	r3, [r7, #28]
 801b966:	210d      	movs	r1, #13
 801b968:	4618      	mov	r0, r3
 801b96a:	f7ff fd10 	bl	801b38e <rotrFixed>
 801b96e:	4603      	mov	r3, r0
 801b970:	405c      	eors	r4, r3
 801b972:	69fb      	ldr	r3, [r7, #28]
 801b974:	2116      	movs	r1, #22
 801b976:	4618      	mov	r0, r3
 801b978:	f7ff fd09 	bl	801b38e <rotrFixed>
 801b97c:	4603      	mov	r3, r0
 801b97e:	ea84 0203 	eor.w	r2, r4, r3
 801b982:	69f9      	ldr	r1, [r7, #28]
 801b984:	6a3b      	ldr	r3, [r7, #32]
 801b986:	4319      	orrs	r1, r3
 801b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b98a:	4019      	ands	r1, r3
 801b98c:	69f8      	ldr	r0, [r7, #28]
 801b98e:	6a3b      	ldr	r3, [r7, #32]
 801b990:	4003      	ands	r3, r0
 801b992:	430b      	orrs	r3, r1
 801b994:	e002      	b.n	801b99c <Transform_Sha256+0x484>
 801b996:	bf00      	nop
 801b998:	0802c104 	.word	0x0802c104
 801b99c:	4413      	add	r3, r2
 801b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9a4:	4413      	add	r3, r2
 801b9a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801b9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9ac:	4413      	add	r3, r2
 801b9ae:	61bb      	str	r3, [r7, #24]
 801b9b0:	697c      	ldr	r4, [r7, #20]
 801b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9b4:	2106      	movs	r1, #6
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	f7ff fce9 	bl	801b38e <rotrFixed>
 801b9bc:	4605      	mov	r5, r0
 801b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9c0:	210b      	movs	r1, #11
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	f7ff fce3 	bl	801b38e <rotrFixed>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	405d      	eors	r5, r3
 801b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9ce:	2119      	movs	r1, #25
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	f7ff fcdc 	bl	801b38e <rotrFixed>
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	406b      	eors	r3, r5
 801b9da:	18e2      	adds	r2, r4, r3
 801b9dc:	6939      	ldr	r1, [r7, #16]
 801b9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b9e0:	68fc      	ldr	r4, [r7, #12]
 801b9e2:	693b      	ldr	r3, [r7, #16]
 801b9e4:	4063      	eors	r3, r4
 801b9e6:	4003      	ands	r3, r0
 801b9e8:	404b      	eors	r3, r1
 801b9ea:	441a      	add	r2, r3
 801b9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b9ee:	3305      	adds	r3, #5
 801b9f0:	4983      	ldr	r1, [pc, #524]	; (801bc00 <Transform_Sha256+0x6e8>)
 801b9f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b9f6:	441a      	add	r2, r3
 801b9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b9fa:	3305      	adds	r3, #5
 801b9fc:	009b      	lsls	r3, r3, #2
 801b9fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ba00:	440b      	add	r3, r1
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4413      	add	r3, r2
 801ba06:	633b      	str	r3, [r7, #48]	; 0x30
 801ba08:	69bb      	ldr	r3, [r7, #24]
 801ba0a:	2102      	movs	r1, #2
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	f7ff fcbe 	bl	801b38e <rotrFixed>
 801ba12:	4604      	mov	r4, r0
 801ba14:	69bb      	ldr	r3, [r7, #24]
 801ba16:	210d      	movs	r1, #13
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f7ff fcb8 	bl	801b38e <rotrFixed>
 801ba1e:	4603      	mov	r3, r0
 801ba20:	405c      	eors	r4, r3
 801ba22:	69bb      	ldr	r3, [r7, #24]
 801ba24:	2116      	movs	r1, #22
 801ba26:	4618      	mov	r0, r3
 801ba28:	f7ff fcb1 	bl	801b38e <rotrFixed>
 801ba2c:	4603      	mov	r3, r0
 801ba2e:	ea84 0203 	eor.w	r2, r4, r3
 801ba32:	69b9      	ldr	r1, [r7, #24]
 801ba34:	69fb      	ldr	r3, [r7, #28]
 801ba36:	4319      	orrs	r1, r3
 801ba38:	6a3b      	ldr	r3, [r7, #32]
 801ba3a:	4019      	ands	r1, r3
 801ba3c:	69b8      	ldr	r0, [r7, #24]
 801ba3e:	69fb      	ldr	r3, [r7, #28]
 801ba40:	4003      	ands	r3, r0
 801ba42:	430b      	orrs	r3, r1
 801ba44:	4413      	add	r3, r2
 801ba46:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba4c:	4413      	add	r3, r2
 801ba4e:	627b      	str	r3, [r7, #36]	; 0x24
 801ba50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba54:	4413      	add	r3, r2
 801ba56:	617b      	str	r3, [r7, #20]
 801ba58:	693c      	ldr	r4, [r7, #16]
 801ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba5c:	2106      	movs	r1, #6
 801ba5e:	4618      	mov	r0, r3
 801ba60:	f7ff fc95 	bl	801b38e <rotrFixed>
 801ba64:	4605      	mov	r5, r0
 801ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba68:	210b      	movs	r1, #11
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	f7ff fc8f 	bl	801b38e <rotrFixed>
 801ba70:	4603      	mov	r3, r0
 801ba72:	405d      	eors	r5, r3
 801ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba76:	2119      	movs	r1, #25
 801ba78:	4618      	mov	r0, r3
 801ba7a:	f7ff fc88 	bl	801b38e <rotrFixed>
 801ba7e:	4603      	mov	r3, r0
 801ba80:	406b      	eors	r3, r5
 801ba82:	18e2      	adds	r2, r4, r3
 801ba84:	68f9      	ldr	r1, [r7, #12]
 801ba86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ba88:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	4063      	eors	r3, r4
 801ba8e:	4003      	ands	r3, r0
 801ba90:	404b      	eors	r3, r1
 801ba92:	441a      	add	r2, r3
 801ba94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ba96:	3306      	adds	r3, #6
 801ba98:	4959      	ldr	r1, [pc, #356]	; (801bc00 <Transform_Sha256+0x6e8>)
 801ba9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ba9e:	441a      	add	r2, r3
 801baa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801baa2:	3306      	adds	r3, #6
 801baa4:	009b      	lsls	r3, r3, #2
 801baa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801baa8:	440b      	add	r3, r1
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	4413      	add	r3, r2
 801baae:	633b      	str	r3, [r7, #48]	; 0x30
 801bab0:	697b      	ldr	r3, [r7, #20]
 801bab2:	2102      	movs	r1, #2
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7ff fc6a 	bl	801b38e <rotrFixed>
 801baba:	4604      	mov	r4, r0
 801babc:	697b      	ldr	r3, [r7, #20]
 801babe:	210d      	movs	r1, #13
 801bac0:	4618      	mov	r0, r3
 801bac2:	f7ff fc64 	bl	801b38e <rotrFixed>
 801bac6:	4603      	mov	r3, r0
 801bac8:	405c      	eors	r4, r3
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	2116      	movs	r1, #22
 801bace:	4618      	mov	r0, r3
 801bad0:	f7ff fc5d 	bl	801b38e <rotrFixed>
 801bad4:	4603      	mov	r3, r0
 801bad6:	ea84 0203 	eor.w	r2, r4, r3
 801bada:	6979      	ldr	r1, [r7, #20]
 801badc:	69bb      	ldr	r3, [r7, #24]
 801bade:	4319      	orrs	r1, r3
 801bae0:	69fb      	ldr	r3, [r7, #28]
 801bae2:	4019      	ands	r1, r3
 801bae4:	6978      	ldr	r0, [r7, #20]
 801bae6:	69bb      	ldr	r3, [r7, #24]
 801bae8:	4003      	ands	r3, r0
 801baea:	430b      	orrs	r3, r1
 801baec:	4413      	add	r3, r2
 801baee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801baf0:	6a3a      	ldr	r2, [r7, #32]
 801baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801baf4:	4413      	add	r3, r2
 801baf6:	623b      	str	r3, [r7, #32]
 801baf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bafc:	4413      	add	r3, r2
 801bafe:	613b      	str	r3, [r7, #16]
 801bb00:	68fc      	ldr	r4, [r7, #12]
 801bb02:	6a3b      	ldr	r3, [r7, #32]
 801bb04:	2106      	movs	r1, #6
 801bb06:	4618      	mov	r0, r3
 801bb08:	f7ff fc41 	bl	801b38e <rotrFixed>
 801bb0c:	4605      	mov	r5, r0
 801bb0e:	6a3b      	ldr	r3, [r7, #32]
 801bb10:	210b      	movs	r1, #11
 801bb12:	4618      	mov	r0, r3
 801bb14:	f7ff fc3b 	bl	801b38e <rotrFixed>
 801bb18:	4603      	mov	r3, r0
 801bb1a:	405d      	eors	r5, r3
 801bb1c:	6a3b      	ldr	r3, [r7, #32]
 801bb1e:	2119      	movs	r1, #25
 801bb20:	4618      	mov	r0, r3
 801bb22:	f7ff fc34 	bl	801b38e <rotrFixed>
 801bb26:	4603      	mov	r3, r0
 801bb28:	406b      	eors	r3, r5
 801bb2a:	18e2      	adds	r2, r4, r3
 801bb2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bb2e:	6a38      	ldr	r0, [r7, #32]
 801bb30:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb34:	4063      	eors	r3, r4
 801bb36:	4003      	ands	r3, r0
 801bb38:	404b      	eors	r3, r1
 801bb3a:	441a      	add	r2, r3
 801bb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb3e:	3307      	adds	r3, #7
 801bb40:	492f      	ldr	r1, [pc, #188]	; (801bc00 <Transform_Sha256+0x6e8>)
 801bb42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801bb46:	441a      	add	r2, r3
 801bb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb4a:	3307      	adds	r3, #7
 801bb4c:	009b      	lsls	r3, r3, #2
 801bb4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bb50:	440b      	add	r3, r1
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	4413      	add	r3, r2
 801bb56:	633b      	str	r3, [r7, #48]	; 0x30
 801bb58:	693b      	ldr	r3, [r7, #16]
 801bb5a:	2102      	movs	r1, #2
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7ff fc16 	bl	801b38e <rotrFixed>
 801bb62:	4604      	mov	r4, r0
 801bb64:	693b      	ldr	r3, [r7, #16]
 801bb66:	210d      	movs	r1, #13
 801bb68:	4618      	mov	r0, r3
 801bb6a:	f7ff fc10 	bl	801b38e <rotrFixed>
 801bb6e:	4603      	mov	r3, r0
 801bb70:	405c      	eors	r4, r3
 801bb72:	693b      	ldr	r3, [r7, #16]
 801bb74:	2116      	movs	r1, #22
 801bb76:	4618      	mov	r0, r3
 801bb78:	f7ff fc09 	bl	801b38e <rotrFixed>
 801bb7c:	4603      	mov	r3, r0
 801bb7e:	ea84 0203 	eor.w	r2, r4, r3
 801bb82:	6939      	ldr	r1, [r7, #16]
 801bb84:	697b      	ldr	r3, [r7, #20]
 801bb86:	4319      	orrs	r1, r3
 801bb88:	69bb      	ldr	r3, [r7, #24]
 801bb8a:	4019      	ands	r1, r3
 801bb8c:	6938      	ldr	r0, [r7, #16]
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	4003      	ands	r3, r0
 801bb92:	430b      	orrs	r3, r1
 801bb94:	4413      	add	r3, r2
 801bb96:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bb98:	69fa      	ldr	r2, [r7, #28]
 801bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb9c:	4413      	add	r3, r2
 801bb9e:	61fb      	str	r3, [r7, #28]
 801bba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bba4:	4413      	add	r3, r2
 801bba6:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 801bba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbaa:	3308      	adds	r3, #8
 801bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbb0:	2b3f      	cmp	r3, #63	; 0x3f
 801bbb2:	f77f ad57 	ble.w	801b664 <Transform_Sha256+0x14c>
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bbba:	e011      	b.n	801bbe0 <Transform_Sha256+0x6c8>
            sha256->digest[i] += S[i];
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bbc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbc6:	009b      	lsls	r3, r3, #2
 801bbc8:	3340      	adds	r3, #64	; 0x40
 801bbca:	443b      	add	r3, r7
 801bbcc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801bbd0:	18d1      	adds	r1, r2, r3
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bbd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0; i < 8; i++) {
 801bbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbdc:	3301      	adds	r3, #1
 801bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bbe2:	2b07      	cmp	r3, #7
 801bbe4:	ddea      	ble.n	801bbbc <Transform_Sha256+0x6a4>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbe8:	637b      	str	r3, [r7, #52]	; 0x34
 801bbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d002      	beq.n	801bbf6 <Transform_Sha256+0x6de>
 801bbf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bbf2:	f7fc fff7 	bl	8018be4 <wolfSSL_Free>
    #endif
        return 0;
 801bbf6:	2300      	movs	r3, #0
    }
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	3740      	adds	r7, #64	; 0x40
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	bdb0      	pop	{r4, r5, r7, pc}
 801bc00:	0802c104 	.word	0x0802c104

0801bc04 <AddLength>:


#ifdef XTRANSFORM

    static WC_INLINE void AddLength(wc_Sha256* sha256, word32 len)
    {
 801bc04:	b480      	push	{r7}
 801bc06:	b085      	sub	sp, #20
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
 801bc0c:	6039      	str	r1, [r7, #0]
        word32 tmp = sha256->loLen;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bc12:	60fb      	str	r3, [r7, #12]
        if ((sha256->loLen += len) < tmp) {
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	441a      	add	r2, r3
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	665a      	str	r2, [r3, #100]	; 0x64
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bc24:	68fa      	ldr	r2, [r7, #12]
 801bc26:	429a      	cmp	r2, r3
 801bc28:	d904      	bls.n	801bc34 <AddLength+0x30>
            sha256->hiLen++;                       /* carry low to high */
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801bc2e:	1c5a      	adds	r2, r3, #1
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	669a      	str	r2, [r3, #104]	; 0x68
        }
    }
 801bc34:	bf00      	nop
 801bc36:	3714      	adds	r7, #20
 801bc38:	46bd      	mov	sp, r7
 801bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc3e:	4770      	bx	lr

0801bc40 <Sha256Update>:

    /* do block size increments/updates */
    static WC_INLINE int Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 801bc40:	b580      	push	{r7, lr}
 801bc42:	b088      	sub	sp, #32
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	60f8      	str	r0, [r7, #12]
 801bc48:	60b9      	str	r1, [r7, #8]
 801bc4a:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	61fb      	str	r3, [r7, #28]
        word32 blocksLen;
        byte* local;

        if (sha256 == NULL || (data == NULL && len > 0)) {
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d005      	beq.n	801bc62 <Sha256Update+0x22>
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d105      	bne.n	801bc68 <Sha256Update+0x28>
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d002      	beq.n	801bc68 <Sha256Update+0x28>
            return BAD_FUNC_ARG;
 801bc62:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801bc66:	e084      	b.n	801bd72 <Sha256Update+0x132>
        }

        if (data == NULL && len == 0) {
 801bc68:	68bb      	ldr	r3, [r7, #8]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d104      	bne.n	801bc78 <Sha256Update+0x38>
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d101      	bne.n	801bc78 <Sha256Update+0x38>
            /* valid, but do nothing */
            return 0;
 801bc74:	2300      	movs	r3, #0
 801bc76:	e07c      	b.n	801bd72 <Sha256Update+0x132>
        }

        /* check that internal buffLen is valid */
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bc7c:	2b3f      	cmp	r3, #63	; 0x3f
 801bc7e:	d902      	bls.n	801bc86 <Sha256Update+0x46>
            return BUFFER_E;
 801bc80:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801bc84:	e075      	b.n	801bd72 <Sha256Update+0x132>
        }

        /* add length for final */
        AddLength(sha256, len);
 801bc86:	6879      	ldr	r1, [r7, #4]
 801bc88:	68f8      	ldr	r0, [r7, #12]
 801bc8a:	f7ff ffbb 	bl	801bc04 <AddLength>

        local = (byte*)sha256->buffer;
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	3320      	adds	r3, #32
 801bc92:	61bb      	str	r3, [r7, #24]

        /* process any remainder from previous operation */
        if (sha256->buffLen > 0) {
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d056      	beq.n	801bd4a <Sha256Update+0x10a>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bca0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801bca4:	4619      	mov	r1, r3
 801bca6:	6878      	ldr	r0, [r7, #4]
 801bca8:	f7ff fbbd 	bl	801b426 <min>
 801bcac:	6178      	str	r0, [r7, #20]
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 801bcae:	68fb      	ldr	r3, [r7, #12]
 801bcb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bcb2:	69ba      	ldr	r2, [r7, #24]
 801bcb4:	4413      	add	r3, r2
 801bcb6:	697a      	ldr	r2, [r7, #20]
 801bcb8:	68b9      	ldr	r1, [r7, #8]
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f005 fb12 	bl	80212e4 <memcpy>

            sha256->buffLen += blocksLen;
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	441a      	add	r2, r3
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	661a      	str	r2, [r3, #96]	; 0x60
            data            += blocksLen;
 801bccc:	68ba      	ldr	r2, [r7, #8]
 801bcce:	697b      	ldr	r3, [r7, #20]
 801bcd0:	4413      	add	r3, r2
 801bcd2:	60bb      	str	r3, [r7, #8]
            len             -= blocksLen;
 801bcd4:	687a      	ldr	r2, [r7, #4]
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	1ad3      	subs	r3, r2, r3
 801bcda:	607b      	str	r3, [r7, #4]

            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 801bcdc:	68fb      	ldr	r3, [r7, #12]
 801bcde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bce0:	2b40      	cmp	r3, #64	; 0x40
 801bce2:	d132      	bne.n	801bd4a <Sha256Update+0x10a>
                          defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	f103 0020 	add.w	r0, r3, #32
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	3320      	adds	r3, #32
 801bcee:	2240      	movs	r2, #64	; 0x40
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	f7ff fb72 	bl	801b3da <ByteReverseWords>
                }
                else {
                    esp_sha256_process(sha256, (const byte*)local);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local);
 801bcf6:	69b9      	ldr	r1, [r7, #24]
 801bcf8:	68f8      	ldr	r0, [r7, #12]
 801bcfa:	f7ff fc0d 	bl	801b518 <Transform_Sha256>
 801bcfe:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret == 0)
 801bd00:	69fb      	ldr	r3, [r7, #28]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d103      	bne.n	801bd0e <Sha256Update+0xce>
                    sha256->buffLen = 0;
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	2200      	movs	r2, #0
 801bd0a:	661a      	str	r2, [r3, #96]	; 0x60
 801bd0c:	e01d      	b.n	801bd4a <Sha256Update+0x10a>
                else
                    len = 0; /* error */
 801bd0e:	2300      	movs	r3, #0
 801bd10:	607b      	str	r3, [r7, #4]
    #endif /* XTRANSFORM_LEN */
    #if !defined(XTRANSFORM_LEN) || \
        (defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)))
        {
            while (len >= WC_SHA256_BLOCK_SIZE) {
 801bd12:	e01a      	b.n	801bd4a <Sha256Update+0x10a>
                word32* local32 = sha256->buffer;
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	3320      	adds	r3, #32
 801bd18:	613b      	str	r3, [r7, #16]
                    local32 = (word32*)data;
                }
                else
            #endif
                {
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 801bd1a:	2240      	movs	r2, #64	; 0x40
 801bd1c:	68b9      	ldr	r1, [r7, #8]
 801bd1e:	6938      	ldr	r0, [r7, #16]
 801bd20:	f005 fae0 	bl	80212e4 <memcpy>
                }

                data += WC_SHA256_BLOCK_SIZE;
 801bd24:	68bb      	ldr	r3, [r7, #8]
 801bd26:	3340      	adds	r3, #64	; 0x40
 801bd28:	60bb      	str	r3, [r7, #8]
                len  -= WC_SHA256_BLOCK_SIZE;
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	3b40      	subs	r3, #64	; 0x40
 801bd2e:	607b      	str	r3, [r7, #4]
                          defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 801bd30:	2240      	movs	r2, #64	; 0x40
 801bd32:	6939      	ldr	r1, [r7, #16]
 801bd34:	6938      	ldr	r0, [r7, #16]
 801bd36:	f7ff fb50 	bl	801b3da <ByteReverseWords>
                }
                else {
                    esp_sha256_process(sha256, (const byte*)local32);
                }
#else
                ret = XTRANSFORM(sha256, (const byte*)local32);
 801bd3a:	6939      	ldr	r1, [r7, #16]
 801bd3c:	68f8      	ldr	r0, [r7, #12]
 801bd3e:	f7ff fbeb 	bl	801b518 <Transform_Sha256>
 801bd42:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret != 0)
 801bd44:	69fb      	ldr	r3, [r7, #28]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d103      	bne.n	801bd52 <Sha256Update+0x112>
            while (len >= WC_SHA256_BLOCK_SIZE) {
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	2b3f      	cmp	r3, #63	; 0x3f
 801bd4e:	d8e1      	bhi.n	801bd14 <Sha256Update+0xd4>
 801bd50:	e000      	b.n	801bd54 <Sha256Update+0x114>
                    break;
 801bd52:	bf00      	nop
            }
        }
    #endif

        /* save remainder */
        if (ret == 0 && len > 0) {
 801bd54:	69fb      	ldr	r3, [r7, #28]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d10a      	bne.n	801bd70 <Sha256Update+0x130>
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d007      	beq.n	801bd70 <Sha256Update+0x130>
            XMEMCPY(local, data, len);
 801bd60:	687a      	ldr	r2, [r7, #4]
 801bd62:	68b9      	ldr	r1, [r7, #8]
 801bd64:	69b8      	ldr	r0, [r7, #24]
 801bd66:	f005 fabd 	bl	80212e4 <memcpy>
            sha256->buffLen = len;
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	687a      	ldr	r2, [r7, #4]
 801bd6e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        return ret;
 801bd70:	69fb      	ldr	r3, [r7, #28]
    }
 801bd72:	4618      	mov	r0, r3
 801bd74:	3720      	adds	r7, #32
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}

0801bd7a <wc_Sha256Update>:
#if defined(WOLFSSL_KCAPI_HASH)
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 801bd7a:	b580      	push	{r7, lr}
 801bd7c:	b084      	sub	sp, #16
 801bd7e:	af00      	add	r7, sp, #0
 801bd80:	60f8      	str	r0, [r7, #12]
 801bd82:	60b9      	str	r1, [r7, #8]
 801bd84:	607a      	str	r2, [r7, #4]
        if (sha256 == NULL || (data == NULL && len > 0)) {
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d005      	beq.n	801bd98 <wc_Sha256Update+0x1e>
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d105      	bne.n	801bd9e <wc_Sha256Update+0x24>
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d002      	beq.n	801bd9e <wc_Sha256Update+0x24>
            return BAD_FUNC_ARG;
 801bd98:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801bd9c:	e00d      	b.n	801bdba <wc_Sha256Update+0x40>
        }

        if (data == NULL && len == 0) {
 801bd9e:	68bb      	ldr	r3, [r7, #8]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d104      	bne.n	801bdae <wc_Sha256Update+0x34>
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d101      	bne.n	801bdae <wc_Sha256Update+0x34>
            /* valid, but do nothing */
            return 0;
 801bdaa:	2300      	movs	r3, #0
 801bdac:	e005      	b.n	801bdba <wc_Sha256Update+0x40>
            return IntelQaSymSha256(&sha256->asyncDev, NULL, data, len);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
 801bdae:	687a      	ldr	r2, [r7, #4]
 801bdb0:	68b9      	ldr	r1, [r7, #8]
 801bdb2:	68f8      	ldr	r0, [r7, #12]
 801bdb4:	f7ff ff44 	bl	801bc40 <Sha256Update>
 801bdb8:	4603      	mov	r3, r0
    }
 801bdba:	4618      	mov	r0, r3
 801bdbc:	3710      	adds	r7, #16
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	bd80      	pop	{r7, pc}

0801bdc2 <Sha256Final>:
#endif

    static WC_INLINE int Sha256Final(wc_Sha256* sha256)
    {
 801bdc2:	b580      	push	{r7, lr}
 801bdc4:	b084      	sub	sp, #16
 801bdc6:	af00      	add	r7, sp, #0
 801bdc8:	6078      	str	r0, [r7, #4]

        int ret;
        byte* local;

        if (sha256 == NULL) {
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d102      	bne.n	801bdd6 <Sha256Final+0x14>
            return BAD_FUNC_ARG;
 801bdd0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801bdd4:	e069      	b.n	801beaa <Sha256Final+0xe8>
        }

        local = (byte*)sha256->buffer;
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	3320      	adds	r3, #32
 801bdda:	60fb      	str	r3, [r7, #12]
        local[sha256->buffLen++] = 0x80; /* add 1 */
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bde0:	1c59      	adds	r1, r3, #1
 801bde2:	687a      	ldr	r2, [r7, #4]
 801bde4:	6611      	str	r1, [r2, #96]	; 0x60
 801bde6:	68fa      	ldr	r2, [r7, #12]
 801bde8:	4413      	add	r3, r2
 801bdea:	2280      	movs	r2, #128	; 0x80
 801bdec:	701a      	strb	r2, [r3, #0]

        /* pad with zeros */
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bdf2:	2b38      	cmp	r3, #56	; 0x38
 801bdf4:	d924      	bls.n	801be40 <Sha256Final+0x7e>
            XMEMSET(&local[sha256->buffLen], 0,
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bdfa:	68fa      	ldr	r2, [r7, #12]
 801bdfc:	18d0      	adds	r0, r2, r3
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801be02:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801be06:	461a      	mov	r2, r3
 801be08:	2100      	movs	r1, #0
 801be0a:	f005 fa93 	bl	8021334 <memset>
                WC_SHA256_BLOCK_SIZE - sha256->buffLen);
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	2240      	movs	r2, #64	; 0x40
 801be12:	661a      	str	r2, [r3, #96]	; 0x60
            #if defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
            if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
            #endif
            {
                ByteReverseWords(sha256->buffer, sha256->buffer,
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	f103 0020 	add.w	r0, r3, #32
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	3320      	adds	r3, #32
 801be1e:	2240      	movs	r2, #64	; 0x40
 801be20:	4619      	mov	r1, r3
 801be22:	f7ff fada 	bl	801b3da <ByteReverseWords>
            }
            else {
                ret = esp_sha256_process(sha256, (const byte*)local);
            }
        #else
            ret = XTRANSFORM(sha256, (const byte*)local);
 801be26:	68f9      	ldr	r1, [r7, #12]
 801be28:	6878      	ldr	r0, [r7, #4]
 801be2a:	f7ff fb75 	bl	801b518 <Transform_Sha256>
 801be2e:	60b8      	str	r0, [r7, #8]
        #endif
            if (ret != 0)
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d001      	beq.n	801be3a <Sha256Final+0x78>
                return ret;
 801be36:	68bb      	ldr	r3, [r7, #8]
 801be38:	e037      	b.n	801beaa <Sha256Final+0xe8>

            sha256->buffLen = 0;
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	2200      	movs	r2, #0
 801be3e:	661a      	str	r2, [r3, #96]	; 0x60
        }
        XMEMSET(&local[sha256->buffLen], 0,
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801be44:	68fa      	ldr	r2, [r7, #12]
 801be46:	18d0      	adds	r0, r2, r3
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801be4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801be50:	461a      	mov	r2, r3
 801be52:	2100      	movs	r1, #0
 801be54:	f005 fa6e 	bl	8021334 <memset>
            WC_SHA256_PAD_SIZE - sha256->buffLen);

        /* put lengths in bits */
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801be5c:	0f5a      	lsrs	r2, r3, #29
                                                         (sha256->hiLen << 3);
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801be62:	00db      	lsls	r3, r3, #3
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 801be64:	441a      	add	r2, r3
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	669a      	str	r2, [r3, #104]	; 0x68
        sha256->loLen = sha256->loLen << 3;
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801be6e:	00da      	lsls	r2, r3, #3
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	665a      	str	r2, [r3, #100]	; 0x64
        #if defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
        if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
        #endif
        {
            ByteReverseWords(sha256->buffer, sha256->buffer,
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	f103 0020 	add.w	r0, r3, #32
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	3320      	adds	r3, #32
 801be7e:	2240      	movs	r2, #64	; 0x40
 801be80:	4619      	mov	r1, r3
 801be82:	f7ff faaa 	bl	801b3da <ByteReverseWords>
                WC_SHA256_BLOCK_SIZE);
        }
    #endif
        /* ! length ordering dependent on digest endian type ! */
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	3338      	adds	r3, #56	; 0x38
 801be8a:	687a      	ldr	r2, [r7, #4]
 801be8c:	3268      	adds	r2, #104	; 0x68
 801be8e:	6812      	ldr	r2, [r2, #0]
 801be90:	601a      	str	r2, [r3, #0]
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	333c      	adds	r3, #60	; 0x3c
 801be96:	687a      	ldr	r2, [r7, #4]
 801be98:	3264      	adds	r2, #100	; 0x64
 801be9a:	6812      	ldr	r2, [r2, #0]
 801be9c:	601a      	str	r2, [r3, #0]
        }
        else {
            ret = esp_sha256_digest_process(sha256, 1);
        }
    #else
        ret = XTRANSFORM(sha256, (const byte*)local);
 801be9e:	68f9      	ldr	r1, [r7, #12]
 801bea0:	6878      	ldr	r0, [r7, #4]
 801bea2:	f7ff fb39 	bl	801b518 <Transform_Sha256>
 801bea6:	60b8      	str	r0, [r7, #8]
    #endif

        return ret;
 801bea8:	68bb      	ldr	r3, [r7, #8]
    }
 801beaa:	4618      	mov	r0, r3
 801beac:	3710      	adds	r7, #16
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}

0801beb2 <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 801beb2:	b580      	push	{r7, lr}
 801beb4:	b084      	sub	sp, #16
 801beb6:	af00      	add	r7, sp, #0
 801beb8:	6078      	str	r0, [r7, #4]
 801beba:	6039      	str	r1, [r7, #0]
        int ret;

        if (sha256 == NULL || hash == NULL) {
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d002      	beq.n	801bec8 <wc_Sha256Final+0x16>
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d102      	bne.n	801bece <wc_Sha256Final+0x1c>
            return BAD_FUNC_ARG;
 801bec8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801becc:	e018      	b.n	801bf00 <wc_Sha256Final+0x4e>
                                            WC_SHA256_DIGEST_SIZE);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
 801bece:	6878      	ldr	r0, [r7, #4]
 801bed0:	f7ff ff77 	bl	801bdc2 <Sha256Final>
 801bed4:	60f8      	str	r0, [r7, #12]
        if (ret != 0)
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d001      	beq.n	801bee0 <wc_Sha256Final+0x2e>
            return ret;
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	e00f      	b.n	801bf00 <wc_Sha256Final+0x4e>

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	6879      	ldr	r1, [r7, #4]
 801bee4:	2220      	movs	r2, #32
 801bee6:	4618      	mov	r0, r3
 801bee8:	f7ff fa77 	bl	801b3da <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	2220      	movs	r2, #32
 801bef0:	4619      	mov	r1, r3
 801bef2:	6838      	ldr	r0, [r7, #0]
 801bef4:	f005 f9f6 	bl	80212e4 <memcpy>

        return InitSha256(sha256);  /* reset state */
 801bef8:	6878      	ldr	r0, [r7, #4]
 801befa:	f7ff faa5 	bl	801b448 <InitSha256>
 801befe:	4603      	mov	r3, r0
    }
 801bf00:	4618      	mov	r0, r3
 801bf02:	3710      	adds	r7, #16
 801bf04:	46bd      	mov	sp, r7
 801bf06:	bd80      	pop	{r7, pc}

0801bf08 <wc_InitSha256>:
#endif /* WOLFSSL_SHA224 */
#endif /* !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH) */


int wc_InitSha256(wc_Sha256* sha256)
{
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	b084      	sub	sp, #16
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	6078      	str	r0, [r7, #4]
    int devId = INVALID_DEVID;
 801bf10:	f06f 0301 	mvn.w	r3, #1
 801bf14:	60fb      	str	r3, [r7, #12]

#ifdef WOLF_CRYPTO_CB
    devId = wc_CryptoCb_DefaultDevID();
#endif
    return wc_InitSha256_ex(sha256, NULL, devId);
 801bf16:	68fa      	ldr	r2, [r7, #12]
 801bf18:	2100      	movs	r1, #0
 801bf1a:	6878      	ldr	r0, [r7, #4]
 801bf1c:	f7ff fadc 	bl	801b4d8 <wc_InitSha256_ex>
 801bf20:	4603      	mov	r3, r0
}
 801bf22:	4618      	mov	r0, r3
 801bf24:	3710      	adds	r7, #16
 801bf26:	46bd      	mov	sp, r7
 801bf28:	bd80      	pop	{r7, pc}

0801bf2a <wc_Sha256Free>:

#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
 801bf2a:	b480      	push	{r7}
 801bf2c:	b083      	sub	sp, #12
 801bf2e:	af00      	add	r7, sp, #0
 801bf30:	6078      	str	r0, [r7, #4]
    if (sha256 == NULL)
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	2b00      	cmp	r3, #0
    }
    else {
        ESP_LOGV("sha256", "Hardware unlock not needed in wc_Sha256Free.");
    }
#endif
}
 801bf36:	370c      	adds	r7, #12
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf3e:	4770      	bx	lr

0801bf40 <ForceZero>:
{
 801bf40:	b480      	push	{r7}
 801bf42:	b085      	sub	sp, #20
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
 801bf48:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 801bf4e:	e004      	b.n	801bf5a <ForceZero+0x1a>
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	1c5a      	adds	r2, r3, #1
 801bf54:	60fa      	str	r2, [r7, #12]
 801bf56:	2200      	movs	r2, #0
 801bf58:	701a      	strb	r2, [r3, #0]
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	1e5a      	subs	r2, r3, #1
 801bf5e:	603a      	str	r2, [r7, #0]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d1f5      	bne.n	801bf50 <ForceZero+0x10>
}
 801bf64:	bf00      	nop
 801bf66:	bf00      	nop
 801bf68:	3714      	adds	r7, #20
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf70:	4770      	bx	lr

0801bf72 <HexCharToByte>:
{
 801bf72:	b480      	push	{r7}
 801bf74:	b085      	sub	sp, #20
 801bf76:	af00      	add	r7, sp, #0
 801bf78:	4603      	mov	r3, r0
 801bf7a:	71fb      	strb	r3, [r7, #7]
    signed char ret = (signed char)ch;
 801bf7c:	79fb      	ldrb	r3, [r7, #7]
 801bf7e:	73fb      	strb	r3, [r7, #15]
    if (ret >= '0' && ret <= '9')
 801bf80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf84:	2b2f      	cmp	r3, #47	; 0x2f
 801bf86:	dd08      	ble.n	801bf9a <HexCharToByte+0x28>
 801bf88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf8c:	2b39      	cmp	r3, #57	; 0x39
 801bf8e:	dc04      	bgt.n	801bf9a <HexCharToByte+0x28>
        ret -= '0';
 801bf90:	7bfb      	ldrb	r3, [r7, #15]
 801bf92:	3b30      	subs	r3, #48	; 0x30
 801bf94:	b2db      	uxtb	r3, r3
 801bf96:	73fb      	strb	r3, [r7, #15]
 801bf98:	e01b      	b.n	801bfd2 <HexCharToByte+0x60>
    else if (ret >= 'A' && ret <= 'F')
 801bf9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf9e:	2b40      	cmp	r3, #64	; 0x40
 801bfa0:	dd08      	ble.n	801bfb4 <HexCharToByte+0x42>
 801bfa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfa6:	2b46      	cmp	r3, #70	; 0x46
 801bfa8:	dc04      	bgt.n	801bfb4 <HexCharToByte+0x42>
        ret -= 'A' - 10;
 801bfaa:	7bfb      	ldrb	r3, [r7, #15]
 801bfac:	3b37      	subs	r3, #55	; 0x37
 801bfae:	b2db      	uxtb	r3, r3
 801bfb0:	73fb      	strb	r3, [r7, #15]
 801bfb2:	e00e      	b.n	801bfd2 <HexCharToByte+0x60>
    else if (ret >= 'a' && ret <= 'f')
 801bfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfb8:	2b60      	cmp	r3, #96	; 0x60
 801bfba:	dd08      	ble.n	801bfce <HexCharToByte+0x5c>
 801bfbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfc0:	2b66      	cmp	r3, #102	; 0x66
 801bfc2:	dc04      	bgt.n	801bfce <HexCharToByte+0x5c>
        ret -= 'a' - 10;
 801bfc4:	7bfb      	ldrb	r3, [r7, #15]
 801bfc6:	3b57      	subs	r3, #87	; 0x57
 801bfc8:	b2db      	uxtb	r3, r3
 801bfca:	73fb      	strb	r3, [r7, #15]
 801bfcc:	e001      	b.n	801bfd2 <HexCharToByte+0x60>
        ret = -1; /* error case - return code must be signed */
 801bfce:	23ff      	movs	r3, #255	; 0xff
 801bfd0:	73fb      	strb	r3, [r7, #15]
    return ret;
 801bfd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	3714      	adds	r7, #20
 801bfda:	46bd      	mov	sp, r7
 801bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe0:	4770      	bx	lr

0801bfe2 <fp_add>:


/* Functions */

int fp_add(fp_int *a, fp_int *b, fp_int *c)
{
 801bfe2:	b580      	push	{r7, lr}
 801bfe4:	b088      	sub	sp, #32
 801bfe6:	af00      	add	r7, sp, #0
 801bfe8:	60f8      	str	r0, [r7, #12]
 801bfea:	60b9      	str	r1, [r7, #8]
 801bfec:	607a      	str	r2, [r7, #4]
  int sa, sb;
  int ret = FP_OKAY;
 801bfee:	2300      	movs	r3, #0
 801bff0:	61fb      	str	r3, [r7, #28]

  /* get sign of both inputs */
  sa = a->sign;
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	685b      	ldr	r3, [r3, #4]
 801bff6:	61bb      	str	r3, [r7, #24]
  sb = b->sign;
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	685b      	ldr	r3, [r3, #4]
 801bffc:	617b      	str	r3, [r7, #20]

  /* handle two cases, not four */
  if (sa == sb) {
 801bffe:	69ba      	ldr	r2, [r7, #24]
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	429a      	cmp	r2, r3
 801c004:	d109      	bne.n	801c01a <fp_add+0x38>
    /* both positive or both negative */
    /* add their magnitudes, copy the sign */
    c->sign = sa;
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	69ba      	ldr	r2, [r7, #24]
 801c00a:	605a      	str	r2, [r3, #4]
    ret = s_fp_add (a, b, c);
 801c00c:	687a      	ldr	r2, [r7, #4]
 801c00e:	68b9      	ldr	r1, [r7, #8]
 801c010:	68f8      	ldr	r0, [r7, #12]
 801c012:	f000 f820 	bl	801c056 <s_fp_add>
 801c016:	61f8      	str	r0, [r7, #28]
 801c018:	e018      	b.n	801c04c <fp_add+0x6a>
  } else {
    /* one positive, the other negative */
    /* subtract the one with the greater magnitude from */
    /* the one of the lesser magnitude.  The result gets */
    /* the sign of the one with the greater magnitude. */
    if (fp_cmp_mag (a, b) == FP_LT) {
 801c01a:	68b9      	ldr	r1, [r7, #8]
 801c01c:	68f8      	ldr	r0, [r7, #12]
 801c01e:	f003 fbd9 	bl	801f7d4 <fp_cmp_mag>
 801c022:	4603      	mov	r3, r0
 801c024:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c028:	d108      	bne.n	801c03c <fp_add+0x5a>
      c->sign = sb;
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	697a      	ldr	r2, [r7, #20]
 801c02e:	605a      	str	r2, [r3, #4]
      s_fp_sub (b, a, c);
 801c030:	687a      	ldr	r2, [r7, #4]
 801c032:	68f9      	ldr	r1, [r7, #12]
 801c034:	68b8      	ldr	r0, [r7, #8]
 801c036:	f000 f8f6 	bl	801c226 <s_fp_sub>
 801c03a:	e007      	b.n	801c04c <fp_add+0x6a>
    } else {
      c->sign = sa;
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	69ba      	ldr	r2, [r7, #24]
 801c040:	605a      	str	r2, [r3, #4]
      s_fp_sub (a, b, c);
 801c042:	687a      	ldr	r2, [r7, #4]
 801c044:	68b9      	ldr	r1, [r7, #8]
 801c046:	68f8      	ldr	r0, [r7, #12]
 801c048:	f000 f8ed 	bl	801c226 <s_fp_sub>
    }
  }

  return ret;
 801c04c:	69fb      	ldr	r3, [r7, #28]
}
 801c04e:	4618      	mov	r0, r3
 801c050:	3720      	adds	r7, #32
 801c052:	46bd      	mov	sp, r7
 801c054:	bd80      	pop	{r7, pc}

0801c056 <s_fp_add>:

/* unsigned addition */
int s_fp_add(fp_int *a, fp_int *b, fp_int *c)
{
 801c056:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c05a:	b08d      	sub	sp, #52	; 0x34
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6178      	str	r0, [r7, #20]
 801c060:	6139      	str	r1, [r7, #16]
 801c062:	60fa      	str	r2, [r7, #12]
  int      x, y, oldused;
  fp_word  t;

  y       = MAX(a->used, b->used);
 801c064:	693b      	ldr	r3, [r7, #16]
 801c066:	681a      	ldr	r2, [r3, #0]
 801c068:	697b      	ldr	r3, [r7, #20]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	4293      	cmp	r3, r2
 801c06e:	bfb8      	it	lt
 801c070:	4613      	movlt	r3, r2
 801c072:	61fb      	str	r3, [r7, #28]
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801c074:	68fb      	ldr	r3, [r7, #12]
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	2b88      	cmp	r3, #136	; 0x88
 801c07a:	bfa8      	it	ge
 801c07c:	2388      	movge	r3, #136	; 0x88
 801c07e:	61bb      	str	r3, [r7, #24]
  c->used = y;
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	69fa      	ldr	r2, [r7, #28]
 801c084:	601a      	str	r2, [r3, #0]

  t = 0;
 801c086:	f04f 0200 	mov.w	r2, #0
 801c08a:	f04f 0300 	mov.w	r3, #0
 801c08e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (x = 0; x < y; x++) {
 801c092:	2300      	movs	r3, #0
 801c094:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c096:	e033      	b.n	801c100 <s_fp_add+0xaa>
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 801c098:	697a      	ldr	r2, [r7, #20]
 801c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c09c:	3302      	adds	r3, #2
 801c09e:	009b      	lsls	r3, r3, #2
 801c0a0:	4413      	add	r3, r2
 801c0a2:	685b      	ldr	r3, [r3, #4]
 801c0a4:	2200      	movs	r2, #0
 801c0a6:	4698      	mov	r8, r3
 801c0a8:	4691      	mov	r9, r2
 801c0aa:	693a      	ldr	r2, [r7, #16]
 801c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0ae:	3302      	adds	r3, #2
 801c0b0:	009b      	lsls	r3, r3, #2
 801c0b2:	4413      	add	r3, r2
 801c0b4:	685b      	ldr	r3, [r3, #4]
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	469a      	mov	sl, r3
 801c0ba:	4693      	mov	fp, r2
 801c0bc:	eb18 040a 	adds.w	r4, r8, sl
 801c0c0:	eb49 050b 	adc.w	r5, r9, fp
 801c0c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c0c8:	1911      	adds	r1, r2, r4
 801c0ca:	6039      	str	r1, [r7, #0]
 801c0cc:	416b      	adcs	r3, r5
 801c0ce:	607b      	str	r3, [r7, #4]
 801c0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c0d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      c->dp[x]   = (fp_digit)t;
 801c0d8:	6a3a      	ldr	r2, [r7, #32]
 801c0da:	68f9      	ldr	r1, [r7, #12]
 801c0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0de:	3302      	adds	r3, #2
 801c0e0:	009b      	lsls	r3, r3, #2
 801c0e2:	440b      	add	r3, r1
 801c0e4:	605a      	str	r2, [r3, #4]
      t        >>= DIGIT_BIT;
 801c0e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801c0ea:	f04f 0200 	mov.w	r2, #0
 801c0ee:	f04f 0300 	mov.w	r3, #0
 801c0f2:	000a      	movs	r2, r1
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (x = 0; x < y; x++) {
 801c0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0fc:	3301      	adds	r3, #1
 801c0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c102:	69fb      	ldr	r3, [r7, #28]
 801c104:	429a      	cmp	r2, r3
 801c106:	dbc7      	blt.n	801c098 <s_fp_add+0x42>
  }
  if (t != 0) {
 801c108:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c10c:	4313      	orrs	r3, r2
 801c10e:	d013      	beq.n	801c138 <s_fp_add+0xe2>
     if (x == FP_SIZE)
 801c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c112:	2b88      	cmp	r3, #136	; 0x88
 801c114:	d102      	bne.n	801c11c <s_fp_add+0xc6>
         return FP_VAL;
 801c116:	f04f 33ff 	mov.w	r3, #4294967295
 801c11a:	e03e      	b.n	801c19a <s_fp_add+0x144>
     c->dp[c->used++] = (fp_digit)t;
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	1c59      	adds	r1, r3, #1
 801c122:	68fa      	ldr	r2, [r7, #12]
 801c124:	6011      	str	r1, [r2, #0]
 801c126:	6a3a      	ldr	r2, [r7, #32]
 801c128:	68f9      	ldr	r1, [r7, #12]
 801c12a:	3302      	adds	r3, #2
 801c12c:	009b      	lsls	r3, r3, #2
 801c12e:	440b      	add	r3, r1
 801c130:	605a      	str	r2, [r3, #4]
     ++x;
 801c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c134:	3301      	adds	r3, #1
 801c136:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  c->used = x;
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c13c:	601a      	str	r2, [r3, #0]

  /* zero any excess digits on the destination that we didn't write to */
  for (; x < oldused; x++) {
 801c13e:	e009      	b.n	801c154 <s_fp_add+0xfe>
     c->dp[x] = 0;
 801c140:	68fa      	ldr	r2, [r7, #12]
 801c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c144:	3302      	adds	r3, #2
 801c146:	009b      	lsls	r3, r3, #2
 801c148:	4413      	add	r3, r2
 801c14a:	2200      	movs	r2, #0
 801c14c:	605a      	str	r2, [r3, #4]
  for (; x < oldused; x++) {
 801c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c150:	3301      	adds	r3, #1
 801c152:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c156:	69bb      	ldr	r3, [r7, #24]
 801c158:	429a      	cmp	r2, r3
 801c15a:	dbf1      	blt.n	801c140 <s_fp_add+0xea>
  }
  fp_clamp(c);
 801c15c:	e004      	b.n	801c168 <s_fp_add+0x112>
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	1e5a      	subs	r2, r3, #1
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	601a      	str	r2, [r3, #0]
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d009      	beq.n	801c184 <s_fp_add+0x12e>
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	3b01      	subs	r3, #1
 801c176:	68fa      	ldr	r2, [r7, #12]
 801c178:	3302      	adds	r3, #2
 801c17a:	009b      	lsls	r3, r3, #2
 801c17c:	4413      	add	r3, r2
 801c17e:	685b      	ldr	r3, [r3, #4]
 801c180:	2b00      	cmp	r3, #0
 801c182:	d0ec      	beq.n	801c15e <s_fp_add+0x108>
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d002      	beq.n	801c192 <s_fp_add+0x13c>
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	685b      	ldr	r3, [r3, #4]
 801c190:	e000      	b.n	801c194 <s_fp_add+0x13e>
 801c192:	2300      	movs	r3, #0
 801c194:	68fa      	ldr	r2, [r7, #12]
 801c196:	6053      	str	r3, [r2, #4]
  return FP_OKAY;
 801c198:	2300      	movs	r3, #0
}
 801c19a:	4618      	mov	r0, r3
 801c19c:	3734      	adds	r7, #52	; 0x34
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c1a4:	4770      	bx	lr

0801c1a6 <fp_sub>:

/* c = a - b */
int fp_sub(fp_int *a, fp_int *b, fp_int *c)
{
 801c1a6:	b580      	push	{r7, lr}
 801c1a8:	b088      	sub	sp, #32
 801c1aa:	af00      	add	r7, sp, #0
 801c1ac:	60f8      	str	r0, [r7, #12]
 801c1ae:	60b9      	str	r1, [r7, #8]
 801c1b0:	607a      	str	r2, [r7, #4]
  int sa, sb;
  int ret = FP_OKAY;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	61fb      	str	r3, [r7, #28]

  sa = a->sign;
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	685b      	ldr	r3, [r3, #4]
 801c1ba:	61bb      	str	r3, [r7, #24]
  sb = b->sign;
 801c1bc:	68bb      	ldr	r3, [r7, #8]
 801c1be:	685b      	ldr	r3, [r3, #4]
 801c1c0:	617b      	str	r3, [r7, #20]

  if (sa != sb) {
 801c1c2:	69ba      	ldr	r2, [r7, #24]
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	429a      	cmp	r2, r3
 801c1c8:	d009      	beq.n	801c1de <fp_sub+0x38>
    /* subtract a negative from a positive, OR */
    /* subtract a positive from a negative. */
    /* In either case, ADD their magnitudes, */
    /* and use the sign of the first number. */
    c->sign = sa;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	69ba      	ldr	r2, [r7, #24]
 801c1ce:	605a      	str	r2, [r3, #4]
    ret = s_fp_add (a, b, c);
 801c1d0:	687a      	ldr	r2, [r7, #4]
 801c1d2:	68b9      	ldr	r1, [r7, #8]
 801c1d4:	68f8      	ldr	r0, [r7, #12]
 801c1d6:	f7ff ff3e 	bl	801c056 <s_fp_add>
 801c1da:	61f8      	str	r0, [r7, #28]
 801c1dc:	e01e      	b.n	801c21c <fp_sub+0x76>
  } else {
    /* subtract a positive from a positive, OR */
    /* subtract a negative from a negative. */
    /* First, take the difference between their */
    /* magnitudes, then... */
    if (fp_cmp_mag (a, b) != FP_LT) {
 801c1de:	68b9      	ldr	r1, [r7, #8]
 801c1e0:	68f8      	ldr	r0, [r7, #12]
 801c1e2:	f003 faf7 	bl	801f7d4 <fp_cmp_mag>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1ec:	d008      	beq.n	801c200 <fp_sub+0x5a>
      /* Copy the sign from the first */
      c->sign = sa;
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	69ba      	ldr	r2, [r7, #24]
 801c1f2:	605a      	str	r2, [r3, #4]
      /* The first has a larger or equal magnitude */
      s_fp_sub (a, b, c);
 801c1f4:	687a      	ldr	r2, [r7, #4]
 801c1f6:	68b9      	ldr	r1, [r7, #8]
 801c1f8:	68f8      	ldr	r0, [r7, #12]
 801c1fa:	f000 f814 	bl	801c226 <s_fp_sub>
 801c1fe:	e00d      	b.n	801c21c <fp_sub+0x76>
    } else {
      /* The result has the *opposite* sign from */
      /* the first number. */
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
 801c200:	69bb      	ldr	r3, [r7, #24]
 801c202:	2b00      	cmp	r3, #0
 801c204:	bf0c      	ite	eq
 801c206:	2301      	moveq	r3, #1
 801c208:	2300      	movne	r3, #0
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	461a      	mov	r2, r3
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	605a      	str	r2, [r3, #4]
      /* The second has a larger magnitude */
      s_fp_sub (b, a, c);
 801c212:	687a      	ldr	r2, [r7, #4]
 801c214:	68f9      	ldr	r1, [r7, #12]
 801c216:	68b8      	ldr	r0, [r7, #8]
 801c218:	f000 f805 	bl	801c226 <s_fp_sub>
    }
  }
  return ret;
 801c21c:	69fb      	ldr	r3, [r7, #28]
}
 801c21e:	4618      	mov	r0, r3
 801c220:	3720      	adds	r7, #32
 801c222:	46bd      	mov	sp, r7
 801c224:	bd80      	pop	{r7, pc}

0801c226 <s_fp_sub>:

/* unsigned subtraction ||a|| >= ||b|| ALWAYS! */
void s_fp_sub(fp_int *a, fp_int *b, fp_int *c)
{
 801c226:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c22a:	b095      	sub	sp, #84	; 0x54
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6378      	str	r0, [r7, #52]	; 0x34
 801c230:	6339      	str	r1, [r7, #48]	; 0x30
 801c232:	62fa      	str	r2, [r7, #44]	; 0x2c
  int      x, oldbused, oldused;
  fp_word  t;

  oldused  = c->used;
 801c234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	63fb      	str	r3, [r7, #60]	; 0x3c
  oldbused = b->used;
 801c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	63bb      	str	r3, [r7, #56]	; 0x38
  c->used  = a->used;
 801c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c242:	681a      	ldr	r2, [r3, #0]
 801c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c246:	601a      	str	r2, [r3, #0]
  t       = 0;
 801c248:	f04f 0200 	mov.w	r2, #0
 801c24c:	f04f 0300 	mov.w	r3, #0
 801c250:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (x = 0; x < oldbused; x++) {
 801c254:	2300      	movs	r3, #0
 801c256:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c258:	e040      	b.n	801c2dc <s_fp_sub+0xb6>
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
 801c25a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c25e:	3302      	adds	r3, #2
 801c260:	009b      	lsls	r3, r3, #2
 801c262:	4413      	add	r3, r2
 801c264:	685b      	ldr	r3, [r3, #4]
 801c266:	2200      	movs	r2, #0
 801c268:	61bb      	str	r3, [r7, #24]
 801c26a:	61fa      	str	r2, [r7, #28]
 801c26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c270:	3302      	adds	r3, #2
 801c272:	009b      	lsls	r3, r3, #2
 801c274:	4413      	add	r3, r2
 801c276:	685b      	ldr	r3, [r3, #4]
 801c278:	2200      	movs	r2, #0
 801c27a:	623b      	str	r3, [r7, #32]
 801c27c:	627a      	str	r2, [r7, #36]	; 0x24
 801c27e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c282:	6a39      	ldr	r1, [r7, #32]
 801c284:	188c      	adds	r4, r1, r2
 801c286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c288:	eb41 0503 	adc.w	r5, r1, r3
 801c28c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801c290:	460b      	mov	r3, r1
 801c292:	1b1b      	subs	r3, r3, r4
 801c294:	613b      	str	r3, [r7, #16]
 801c296:	4613      	mov	r3, r2
 801c298:	eb63 0305 	sbc.w	r3, r3, r5
 801c29c:	617b      	str	r3, [r7, #20]
 801c29e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c2a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
     c->dp[x]  = (fp_digit)t;
 801c2a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c2a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2ac:	3302      	adds	r3, #2
 801c2ae:	009b      	lsls	r3, r3, #2
 801c2b0:	4413      	add	r3, r2
 801c2b2:	6059      	str	r1, [r3, #4]
     t         = (t >> DIGIT_BIT)&1;
 801c2b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c2b8:	f04f 0000 	mov.w	r0, #0
 801c2bc:	f04f 0100 	mov.w	r1, #0
 801c2c0:	0018      	movs	r0, r3
 801c2c2:	2100      	movs	r1, #0
 801c2c4:	f000 0301 	and.w	r3, r0, #1
 801c2c8:	60bb      	str	r3, [r7, #8]
 801c2ca:	2300      	movs	r3, #0
 801c2cc:	60fb      	str	r3, [r7, #12]
 801c2ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c2d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (x = 0; x < oldbused; x++) {
 801c2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2d8:	3301      	adds	r3, #1
 801c2da:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c2dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	dbba      	blt.n	801c25a <s_fp_sub+0x34>
  }
  for (; x < a->used; x++) {
 801c2e4:	e02b      	b.n	801c33e <s_fp_sub+0x118>
     t         = ((fp_word)a->dp[x]) - t;
 801c2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2ea:	3302      	adds	r3, #2
 801c2ec:	009b      	lsls	r3, r3, #2
 801c2ee:	4413      	add	r3, r2
 801c2f0:	685b      	ldr	r3, [r3, #4]
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	4698      	mov	r8, r3
 801c2f6:	4691      	mov	r9, r2
 801c2f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c2fc:	ebb8 0a02 	subs.w	sl, r8, r2
 801c300:	eb69 0b03 	sbc.w	fp, r9, r3
 801c304:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
     c->dp[x]  = (fp_digit)t;
 801c308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c30a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c30e:	3302      	adds	r3, #2
 801c310:	009b      	lsls	r3, r3, #2
 801c312:	440b      	add	r3, r1
 801c314:	605a      	str	r2, [r3, #4]
     t         = (t >> DIGIT_BIT)&1;
 801c316:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801c31a:	f04f 0200 	mov.w	r2, #0
 801c31e:	f04f 0300 	mov.w	r3, #0
 801c322:	000a      	movs	r2, r1
 801c324:	2300      	movs	r3, #0
 801c326:	f002 0301 	and.w	r3, r2, #1
 801c32a:	603b      	str	r3, [r7, #0]
 801c32c:	2300      	movs	r3, #0
 801c32e:	607b      	str	r3, [r7, #4]
 801c330:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c334:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  for (; x < a->used; x++) {
 801c338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c33a:	3301      	adds	r3, #1
 801c33c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c344:	429a      	cmp	r2, r3
 801c346:	dbce      	blt.n	801c2e6 <s_fp_sub+0xc0>
   }

  /* zero any excess digits on the destination that we didn't write to */
  for (; x < oldused; x++) {
 801c348:	e009      	b.n	801c35e <s_fp_sub+0x138>
     c->dp[x] = 0;
 801c34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c34e:	3302      	adds	r3, #2
 801c350:	009b      	lsls	r3, r3, #2
 801c352:	4413      	add	r3, r2
 801c354:	2200      	movs	r2, #0
 801c356:	605a      	str	r2, [r3, #4]
  for (; x < oldused; x++) {
 801c358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c35a:	3301      	adds	r3, #1
 801c35c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c35e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c362:	429a      	cmp	r2, r3
 801c364:	dbf1      	blt.n	801c34a <s_fp_sub+0x124>
  }
  fp_clamp(c);
 801c366:	e004      	b.n	801c372 <s_fp_sub+0x14c>
 801c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	1e5a      	subs	r2, r3, #1
 801c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c370:	601a      	str	r2, [r3, #0]
 801c372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d009      	beq.n	801c38e <s_fp_sub+0x168>
 801c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	3b01      	subs	r3, #1
 801c380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c382:	3302      	adds	r3, #2
 801c384:	009b      	lsls	r3, r3, #2
 801c386:	4413      	add	r3, r2
 801c388:	685b      	ldr	r3, [r3, #4]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d0ec      	beq.n	801c368 <s_fp_sub+0x142>
 801c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d002      	beq.n	801c39c <s_fp_sub+0x176>
 801c396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c398:	685b      	ldr	r3, [r3, #4]
 801c39a:	e000      	b.n	801c39e <s_fp_sub+0x178>
 801c39c:	2300      	movs	r3, #0
 801c39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3a0:	6053      	str	r3, [r2, #4]
}
 801c3a2:	bf00      	nop
 801c3a4:	3754      	adds	r7, #84	; 0x54
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c3ac:	4770      	bx	lr

0801c3ae <fp_mul>:

/* c = a * b */
int fp_mul(fp_int *A, fp_int *B, fp_int *C)
{
 801c3ae:	b580      	push	{r7, lr}
 801c3b0:	b088      	sub	sp, #32
 801c3b2:	af00      	add	r7, sp, #0
 801c3b4:	60f8      	str	r0, [r7, #12]
 801c3b6:	60b9      	str	r1, [r7, #8]
 801c3b8:	607a      	str	r2, [r7, #4]
    int   ret = 0;
 801c3ba:	2300      	movs	r3, #0
 801c3bc:	61fb      	str	r3, [r7, #28]
   !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI)
  ret = esp_mp_mul(A, B, C);
  if(ret != -2) return ret;
#endif

    oldused = C->used;
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	617b      	str	r3, [r7, #20]

    y  = MAX(A->used, B->used);
 801c3c4:	68bb      	ldr	r3, [r7, #8]
 801c3c6:	681a      	ldr	r2, [r3, #0]
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	4293      	cmp	r3, r2
 801c3ce:	bfb8      	it	lt
 801c3d0:	4613      	movlt	r3, r2
 801c3d2:	61bb      	str	r3, [r7, #24]
    yy = MIN(A->used, B->used);
 801c3d4:	68bb      	ldr	r3, [r7, #8]
 801c3d6:	681a      	ldr	r2, [r3, #0]
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	4293      	cmp	r3, r2
 801c3de:	bfa8      	it	ge
 801c3e0:	4613      	movge	r3, r2
 801c3e2:	613b      	str	r3, [r7, #16]

    /* fail if we are out of range */
    if (y + yy >= FP_SIZE) {
 801c3e4:	69ba      	ldr	r2, [r7, #24]
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	4413      	add	r3, r2
 801c3ea:	2b87      	cmp	r3, #135	; 0x87
 801c3ec:	dd03      	ble.n	801c3f6 <fp_mul+0x48>
       ret = FP_VAL;
 801c3ee:	f04f 33ff 	mov.w	r3, #4294967295
 801c3f2:	61fb      	str	r3, [r7, #28]
       goto clean;
 801c3f4:	e005      	b.n	801c402 <fp_mul+0x54>
        if (yy >= 56 && y <= 64) {
           ret = fp_mul_comba64(A,B,C);
           goto clean;
        }
#endif
        ret = fp_mul_comba(A,B,C);
 801c3f6:	687a      	ldr	r2, [r7, #4]
 801c3f8:	68b9      	ldr	r1, [r7, #8]
 801c3fa:	68f8      	ldr	r0, [r7, #12]
 801c3fc:	f000 f9bb 	bl	801c776 <fp_mul_comba>
 801c400:	61f8      	str	r0, [r7, #28]

clean:
    /* zero any excess digits on the destination that we didn't write to */
    for (y = C->used; y >= 0 && y < oldused; y++) {
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	61bb      	str	r3, [r7, #24]
 801c408:	e009      	b.n	801c41e <fp_mul+0x70>
        C->dp[y] = 0;
 801c40a:	687a      	ldr	r2, [r7, #4]
 801c40c:	69bb      	ldr	r3, [r7, #24]
 801c40e:	3302      	adds	r3, #2
 801c410:	009b      	lsls	r3, r3, #2
 801c412:	4413      	add	r3, r2
 801c414:	2200      	movs	r2, #0
 801c416:	605a      	str	r2, [r3, #4]
    for (y = C->used; y >= 0 && y < oldused; y++) {
 801c418:	69bb      	ldr	r3, [r7, #24]
 801c41a:	3301      	adds	r3, #1
 801c41c:	61bb      	str	r3, [r7, #24]
 801c41e:	69bb      	ldr	r3, [r7, #24]
 801c420:	2b00      	cmp	r3, #0
 801c422:	db03      	blt.n	801c42c <fp_mul+0x7e>
 801c424:	69ba      	ldr	r2, [r7, #24]
 801c426:	697b      	ldr	r3, [r7, #20]
 801c428:	429a      	cmp	r2, r3
 801c42a:	dbee      	blt.n	801c40a <fp_mul+0x5c>
    }

    return ret;
 801c42c:	69fb      	ldr	r3, [r7, #28]
}
 801c42e:	4618      	mov	r0, r3
 801c430:	3720      	adds	r7, #32
 801c432:	46bd      	mov	sp, r7
 801c434:	bd80      	pop	{r7, pc}

0801c436 <fp_mul_2>:

int fp_mul_2(fp_int * a, fp_int * b)
{
 801c436:	b480      	push	{r7}
 801c438:	b089      	sub	sp, #36	; 0x24
 801c43a:	af00      	add	r7, sp, #0
 801c43c:	6078      	str	r0, [r7, #4]
 801c43e:	6039      	str	r1, [r7, #0]
  int     x, oldused;

  /* Make sure value to double and result are in range. */
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	2b87      	cmp	r3, #135	; 0x87
 801c446:	dc08      	bgt.n	801c45a <fp_mul_2+0x24>
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	2b87      	cmp	r3, #135	; 0x87
 801c44e:	d107      	bne.n	801c460 <fp_mul_2+0x2a>
              ((a->dp[FP_SIZE - 1] & ((fp_digit)1 << (DIGIT_BIT - 1))) != 0))) {
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 801c456:	2b00      	cmp	r3, #0
 801c458:	da02      	bge.n	801c460 <fp_mul_2+0x2a>
    return FP_VAL;
 801c45a:	f04f 33ff 	mov.w	r3, #4294967295
 801c45e:	e052      	b.n	801c506 <fp_mul_2+0xd0>
  }

  oldused = b->used;
 801c460:	683b      	ldr	r3, [r7, #0]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	60fb      	str	r3, [r7, #12]
  b->used = a->used;
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681a      	ldr	r2, [r3, #0]
 801c46a:	683b      	ldr	r3, [r7, #0]
 801c46c:	601a      	str	r2, [r3, #0]

  {
    fp_digit r, rr, *tmpa, *tmpb;

    /* alias for source */
    tmpa = a->dp;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	330c      	adds	r3, #12
 801c472:	617b      	str	r3, [r7, #20]

    /* alias for dest */
    tmpb = b->dp;
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	330c      	adds	r3, #12
 801c478:	613b      	str	r3, [r7, #16]

    /* carry */
    r = 0;
 801c47a:	2300      	movs	r3, #0
 801c47c:	61bb      	str	r3, [r7, #24]
    for (x = 0; x < a->used; x++) {
 801c47e:	2300      	movs	r3, #0
 801c480:	61fb      	str	r3, [r7, #28]
 801c482:	e013      	b.n	801c4ac <fp_mul_2+0x76>

      /* get what will be the *next* carry bit from the
       * MSB of the current digit
       */
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
 801c484:	697b      	ldr	r3, [r7, #20]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	0fdb      	lsrs	r3, r3, #31
 801c48a:	60bb      	str	r3, [r7, #8]

      /* now shift up this digit, add in the carry [from the previous] */
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
 801c48c:	697b      	ldr	r3, [r7, #20]
 801c48e:	1d1a      	adds	r2, r3, #4
 801c490:	617a      	str	r2, [r7, #20]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	0059      	lsls	r1, r3, #1
 801c496:	693b      	ldr	r3, [r7, #16]
 801c498:	1d1a      	adds	r2, r3, #4
 801c49a:	613a      	str	r2, [r7, #16]
 801c49c:	69ba      	ldr	r2, [r7, #24]
 801c49e:	430a      	orrs	r2, r1
 801c4a0:	601a      	str	r2, [r3, #0]

      /* copy the carry that would be from the source
       * digit into the next iteration
       */
      r = rr;
 801c4a2:	68bb      	ldr	r3, [r7, #8]
 801c4a4:	61bb      	str	r3, [r7, #24]
    for (x = 0; x < a->used; x++) {
 801c4a6:	69fb      	ldr	r3, [r7, #28]
 801c4a8:	3301      	adds	r3, #1
 801c4aa:	61fb      	str	r3, [r7, #28]
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	69fa      	ldr	r2, [r7, #28]
 801c4b2:	429a      	cmp	r2, r3
 801c4b4:	dbe6      	blt.n	801c484 <fp_mul_2+0x4e>
    }

    /* new leading digit? */
    if (r != 0) {
 801c4b6:	69bb      	ldr	r3, [r7, #24]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d007      	beq.n	801c4cc <fp_mul_2+0x96>
      /* add a MSB which is always 1 at this point */
      *tmpb = 1;
 801c4bc:	693b      	ldr	r3, [r7, #16]
 801c4be:	2201      	movs	r2, #1
 801c4c0:	601a      	str	r2, [r3, #0]
      ++(b->used);
 801c4c2:	683b      	ldr	r3, [r7, #0]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	1c5a      	adds	r2, r3, #1
 801c4c8:	683b      	ldr	r3, [r7, #0]
 801c4ca:	601a      	str	r2, [r3, #0]
    }

    /* zero any excess digits on the destination that we didn't write to */
    tmpb = b->dp + b->used;
 801c4cc:	683b      	ldr	r3, [r7, #0]
 801c4ce:	f103 020c 	add.w	r2, r3, #12
 801c4d2:	683b      	ldr	r3, [r7, #0]
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	009b      	lsls	r3, r3, #2
 801c4d8:	4413      	add	r3, r2
 801c4da:	613b      	str	r3, [r7, #16]
    for (x = b->used; x < oldused; x++) {
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	61fb      	str	r3, [r7, #28]
 801c4e2:	e007      	b.n	801c4f4 <fp_mul_2+0xbe>
      *tmpb++ = 0;
 801c4e4:	693b      	ldr	r3, [r7, #16]
 801c4e6:	1d1a      	adds	r2, r3, #4
 801c4e8:	613a      	str	r2, [r7, #16]
 801c4ea:	2200      	movs	r2, #0
 801c4ec:	601a      	str	r2, [r3, #0]
    for (x = b->used; x < oldused; x++) {
 801c4ee:	69fb      	ldr	r3, [r7, #28]
 801c4f0:	3301      	adds	r3, #1
 801c4f2:	61fb      	str	r3, [r7, #28]
 801c4f4:	69fa      	ldr	r2, [r7, #28]
 801c4f6:	68fb      	ldr	r3, [r7, #12]
 801c4f8:	429a      	cmp	r2, r3
 801c4fa:	dbf3      	blt.n	801c4e4 <fp_mul_2+0xae>
    }
  }
  b->sign = a->sign;
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	685a      	ldr	r2, [r3, #4]
 801c500:	683b      	ldr	r3, [r7, #0]
 801c502:	605a      	str	r2, [r3, #4]

  return FP_OKAY;
 801c504:	2300      	movs	r3, #0
}
 801c506:	4618      	mov	r0, r3
 801c508:	3724      	adds	r7, #36	; 0x24
 801c50a:	46bd      	mov	sp, r7
 801c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c510:	4770      	bx	lr

0801c512 <fp_mul_d>:

/* c = a * b */
int fp_mul_d(fp_int *a, fp_digit b, fp_int *c)
{
 801c512:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c516:	b08b      	sub	sp, #44	; 0x2c
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6178      	str	r0, [r7, #20]
 801c51c:	6139      	str	r1, [r7, #16]
 801c51e:	60fa      	str	r2, [r7, #12]
   fp_word  w;
   int      x, oldused;

   oldused = c->used;
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	61bb      	str	r3, [r7, #24]
   c->used = a->used;
 801c526:	697b      	ldr	r3, [r7, #20]
 801c528:	681a      	ldr	r2, [r3, #0]
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	601a      	str	r2, [r3, #0]
   c->sign = a->sign;
 801c52e:	697b      	ldr	r3, [r7, #20]
 801c530:	685a      	ldr	r2, [r3, #4]
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	605a      	str	r2, [r3, #4]
   w       = 0;
 801c536:	f04f 0200 	mov.w	r2, #0
 801c53a:	f04f 0300 	mov.w	r3, #0
 801c53e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for (x = 0; x < a->used; x++) {
 801c542:	2300      	movs	r3, #0
 801c544:	61fb      	str	r3, [r7, #28]
 801c546:	e033      	b.n	801c5b0 <fp_mul_d+0x9e>
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
 801c548:	697a      	ldr	r2, [r7, #20]
 801c54a:	69fb      	ldr	r3, [r7, #28]
 801c54c:	3302      	adds	r3, #2
 801c54e:	009b      	lsls	r3, r3, #2
 801c550:	4413      	add	r3, r2
 801c552:	685b      	ldr	r3, [r3, #4]
 801c554:	2200      	movs	r2, #0
 801c556:	4698      	mov	r8, r3
 801c558:	4691      	mov	r9, r2
 801c55a:	693b      	ldr	r3, [r7, #16]
 801c55c:	2200      	movs	r2, #0
 801c55e:	469a      	mov	sl, r3
 801c560:	4693      	mov	fp, r2
 801c562:	fb0a f209 	mul.w	r2, sl, r9
 801c566:	fb08 f30b 	mul.w	r3, r8, fp
 801c56a:	4413      	add	r3, r2
 801c56c:	fba8 450a 	umull	r4, r5, r8, sl
 801c570:	442b      	add	r3, r5
 801c572:	461d      	mov	r5, r3
 801c574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c578:	1911      	adds	r1, r2, r4
 801c57a:	6039      	str	r1, [r7, #0]
 801c57c:	416b      	adcs	r3, r5
 801c57e:	607b      	str	r3, [r7, #4]
 801c580:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c584:	e9c7 2308 	strd	r2, r3, [r7, #32]
       c->dp[x]  = (fp_digit)w;
 801c588:	6a3a      	ldr	r2, [r7, #32]
 801c58a:	68f9      	ldr	r1, [r7, #12]
 801c58c:	69fb      	ldr	r3, [r7, #28]
 801c58e:	3302      	adds	r3, #2
 801c590:	009b      	lsls	r3, r3, #2
 801c592:	440b      	add	r3, r1
 801c594:	605a      	str	r2, [r3, #4]
       w         = w >> DIGIT_BIT;
 801c596:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801c59a:	f04f 0200 	mov.w	r2, #0
 801c59e:	f04f 0300 	mov.w	r3, #0
 801c5a2:	000a      	movs	r2, r1
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for (x = 0; x < a->used; x++) {
 801c5aa:	69fb      	ldr	r3, [r7, #28]
 801c5ac:	3301      	adds	r3, #1
 801c5ae:	61fb      	str	r3, [r7, #28]
 801c5b0:	697b      	ldr	r3, [r7, #20]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	69fa      	ldr	r2, [r7, #28]
 801c5b6:	429a      	cmp	r2, r3
 801c5b8:	dbc6      	blt.n	801c548 <fp_mul_d+0x36>
   }
   if (w != 0) {
 801c5ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c5be:	4313      	orrs	r3, r2
 801c5c0:	d01f      	beq.n	801c602 <fp_mul_d+0xf0>
      if (a->used == FP_SIZE)
 801c5c2:	697b      	ldr	r3, [r7, #20]
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	2b88      	cmp	r3, #136	; 0x88
 801c5c8:	d102      	bne.n	801c5d0 <fp_mul_d+0xbe>
          return FP_VAL;
 801c5ca:	f04f 33ff 	mov.w	r3, #4294967295
 801c5ce:	e03e      	b.n	801c64e <fp_mul_d+0x13c>
      c->dp[c->used++] = (fp_digit) w;
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	1c59      	adds	r1, r3, #1
 801c5d6:	68fa      	ldr	r2, [r7, #12]
 801c5d8:	6011      	str	r1, [r2, #0]
 801c5da:	6a3a      	ldr	r2, [r7, #32]
 801c5dc:	68f9      	ldr	r1, [r7, #12]
 801c5de:	3302      	adds	r3, #2
 801c5e0:	009b      	lsls	r3, r3, #2
 801c5e2:	440b      	add	r3, r1
 801c5e4:	605a      	str	r2, [r3, #4]
      ++x;
 801c5e6:	69fb      	ldr	r3, [r7, #28]
 801c5e8:	3301      	adds	r3, #1
 801c5ea:	61fb      	str	r3, [r7, #28]
   }

   /* zero any excess digits on the destination that we didn't write to */
   /* also checking FP_SIZE here for static analysis */
   for (; x < oldused && x < FP_SIZE; x++) {
 801c5ec:	e009      	b.n	801c602 <fp_mul_d+0xf0>
      c->dp[x] = 0;
 801c5ee:	68fa      	ldr	r2, [r7, #12]
 801c5f0:	69fb      	ldr	r3, [r7, #28]
 801c5f2:	3302      	adds	r3, #2
 801c5f4:	009b      	lsls	r3, r3, #2
 801c5f6:	4413      	add	r3, r2
 801c5f8:	2200      	movs	r2, #0
 801c5fa:	605a      	str	r2, [r3, #4]
   for (; x < oldused && x < FP_SIZE; x++) {
 801c5fc:	69fb      	ldr	r3, [r7, #28]
 801c5fe:	3301      	adds	r3, #1
 801c600:	61fb      	str	r3, [r7, #28]
 801c602:	69fa      	ldr	r2, [r7, #28]
 801c604:	69bb      	ldr	r3, [r7, #24]
 801c606:	429a      	cmp	r2, r3
 801c608:	da08      	bge.n	801c61c <fp_mul_d+0x10a>
 801c60a:	69fb      	ldr	r3, [r7, #28]
 801c60c:	2b87      	cmp	r3, #135	; 0x87
 801c60e:	ddee      	ble.n	801c5ee <fp_mul_d+0xdc>
   }

   fp_clamp(c);
 801c610:	e004      	b.n	801c61c <fp_mul_d+0x10a>
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	1e5a      	subs	r2, r3, #1
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	601a      	str	r2, [r3, #0]
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d009      	beq.n	801c638 <fp_mul_d+0x126>
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	3b01      	subs	r3, #1
 801c62a:	68fa      	ldr	r2, [r7, #12]
 801c62c:	3302      	adds	r3, #2
 801c62e:	009b      	lsls	r3, r3, #2
 801c630:	4413      	add	r3, r2
 801c632:	685b      	ldr	r3, [r3, #4]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d0ec      	beq.n	801c612 <fp_mul_d+0x100>
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d002      	beq.n	801c646 <fp_mul_d+0x134>
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	685b      	ldr	r3, [r3, #4]
 801c644:	e000      	b.n	801c648 <fp_mul_d+0x136>
 801c646:	2300      	movs	r3, #0
 801c648:	68fa      	ldr	r2, [r7, #12]
 801c64a:	6053      	str	r3, [r2, #4]
   return FP_OKAY;
 801c64c:	2300      	movs	r3, #0
}
 801c64e:	4618      	mov	r0, r3
 801c650:	372c      	adds	r7, #44	; 0x2c
 801c652:	46bd      	mov	sp, r7
 801c654:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c658:	4770      	bx	lr

0801c65a <fp_mul_2d>:

/* c = a * 2**d */
int fp_mul_2d(fp_int *a, int b, fp_int *c)
{
 801c65a:	b580      	push	{r7, lr}
 801c65c:	b08a      	sub	sp, #40	; 0x28
 801c65e:	af00      	add	r7, sp, #0
 801c660:	60f8      	str	r0, [r7, #12]
 801c662:	60b9      	str	r1, [r7, #8]
 801c664:	607a      	str	r2, [r7, #4]
   fp_digit carry, carrytmp, shift;
   int x;

   /* copy it */
   fp_copy(a, c);
 801c666:	6879      	ldr	r1, [r7, #4]
 801c668:	68f8      	ldr	r0, [r7, #12]
 801c66a:	f003 fff3 	bl	8020654 <fp_copy>

   /* handle whole digits */
   if (b >= DIGIT_BIT) {
 801c66e:	68bb      	ldr	r3, [r7, #8]
 801c670:	2b1f      	cmp	r3, #31
 801c672:	dd0e      	ble.n	801c692 <fp_mul_2d+0x38>
      int ret = fp_lshd(c, b/DIGIT_BIT);
 801c674:	68bb      	ldr	r3, [r7, #8]
 801c676:	2b00      	cmp	r3, #0
 801c678:	da00      	bge.n	801c67c <fp_mul_2d+0x22>
 801c67a:	331f      	adds	r3, #31
 801c67c:	115b      	asrs	r3, r3, #5
 801c67e:	4619      	mov	r1, r3
 801c680:	6878      	ldr	r0, [r7, #4]
 801c682:	f003 fc74 	bl	801ff6e <fp_lshd>
 801c686:	61f8      	str	r0, [r7, #28]
      if (ret != FP_OKAY)
 801c688:	69fb      	ldr	r3, [r7, #28]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d001      	beq.n	801c692 <fp_mul_2d+0x38>
         return ret;
 801c68e:	69fb      	ldr	r3, [r7, #28]
 801c690:	e06d      	b.n	801c76e <fp_mul_2d+0x114>
   }
   b %= DIGIT_BIT;
 801c692:	68bb      	ldr	r3, [r7, #8]
 801c694:	425a      	negs	r2, r3
 801c696:	f003 031f 	and.w	r3, r3, #31
 801c69a:	f002 021f 	and.w	r2, r2, #31
 801c69e:	bf58      	it	pl
 801c6a0:	4253      	negpl	r3, r2
 801c6a2:	60bb      	str	r3, [r7, #8]

   /* shift the digits */
   if (b != 0) {
 801c6a4:	68bb      	ldr	r3, [r7, #8]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d048      	beq.n	801c73c <fp_mul_2d+0xe2>
      carry = 0;
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	627b      	str	r3, [r7, #36]	; 0x24
      shift = DIGIT_BIT - b;
 801c6ae:	68bb      	ldr	r3, [r7, #8]
 801c6b0:	f1c3 0320 	rsb	r3, r3, #32
 801c6b4:	61bb      	str	r3, [r7, #24]
      for (x = 0; x < c->used; x++) {
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	623b      	str	r3, [r7, #32]
 801c6ba:	e01e      	b.n	801c6fa <fp_mul_2d+0xa0>
          carrytmp = c->dp[x] >> shift;
 801c6bc:	687a      	ldr	r2, [r7, #4]
 801c6be:	6a3b      	ldr	r3, [r7, #32]
 801c6c0:	3302      	adds	r3, #2
 801c6c2:	009b      	lsls	r3, r3, #2
 801c6c4:	4413      	add	r3, r2
 801c6c6:	685a      	ldr	r2, [r3, #4]
 801c6c8:	69bb      	ldr	r3, [r7, #24]
 801c6ca:	fa22 f303 	lsr.w	r3, r2, r3
 801c6ce:	617b      	str	r3, [r7, #20]
          c->dp[x] = (c->dp[x] << b) + carry;
 801c6d0:	687a      	ldr	r2, [r7, #4]
 801c6d2:	6a3b      	ldr	r3, [r7, #32]
 801c6d4:	3302      	adds	r3, #2
 801c6d6:	009b      	lsls	r3, r3, #2
 801c6d8:	4413      	add	r3, r2
 801c6da:	685a      	ldr	r2, [r3, #4]
 801c6dc:	68bb      	ldr	r3, [r7, #8]
 801c6de:	409a      	lsls	r2, r3
 801c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6e2:	441a      	add	r2, r3
 801c6e4:	6879      	ldr	r1, [r7, #4]
 801c6e6:	6a3b      	ldr	r3, [r7, #32]
 801c6e8:	3302      	adds	r3, #2
 801c6ea:	009b      	lsls	r3, r3, #2
 801c6ec:	440b      	add	r3, r1
 801c6ee:	605a      	str	r2, [r3, #4]
          carry = carrytmp;
 801c6f0:	697b      	ldr	r3, [r7, #20]
 801c6f2:	627b      	str	r3, [r7, #36]	; 0x24
      for (x = 0; x < c->used; x++) {
 801c6f4:	6a3b      	ldr	r3, [r7, #32]
 801c6f6:	3301      	adds	r3, #1
 801c6f8:	623b      	str	r3, [r7, #32]
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	6a3a      	ldr	r2, [r7, #32]
 801c700:	429a      	cmp	r2, r3
 801c702:	dbdb      	blt.n	801c6bc <fp_mul_2d+0x62>
      }
      /* store last carry if room */
      if (carry && x < FP_SIZE) {
 801c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c706:	2b00      	cmp	r3, #0
 801c708:	d00d      	beq.n	801c726 <fp_mul_2d+0xcc>
 801c70a:	6a3b      	ldr	r3, [r7, #32]
 801c70c:	2b87      	cmp	r3, #135	; 0x87
 801c70e:	dc0a      	bgt.n	801c726 <fp_mul_2d+0xcc>
         c->dp[c->used++] = carry;
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	1c59      	adds	r1, r3, #1
 801c716:	687a      	ldr	r2, [r7, #4]
 801c718:	6011      	str	r1, [r2, #0]
 801c71a:	687a      	ldr	r2, [r7, #4]
 801c71c:	3302      	adds	r3, #2
 801c71e:	009b      	lsls	r3, r3, #2
 801c720:	4413      	add	r3, r2
 801c722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c724:	605a      	str	r2, [r3, #4]
      }
      if (x == FP_SIZE)
 801c726:	6a3b      	ldr	r3, [r7, #32]
 801c728:	2b88      	cmp	r3, #136	; 0x88
 801c72a:	d107      	bne.n	801c73c <fp_mul_2d+0xe2>
         return FP_VAL;
 801c72c:	f04f 33ff 	mov.w	r3, #4294967295
 801c730:	e01d      	b.n	801c76e <fp_mul_2d+0x114>
   }
   fp_clamp(c);
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	1e5a      	subs	r2, r3, #1
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	601a      	str	r2, [r3, #0]
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	2b00      	cmp	r3, #0
 801c742:	d009      	beq.n	801c758 <fp_mul_2d+0xfe>
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	3b01      	subs	r3, #1
 801c74a:	687a      	ldr	r2, [r7, #4]
 801c74c:	3302      	adds	r3, #2
 801c74e:	009b      	lsls	r3, r3, #2
 801c750:	4413      	add	r3, r2
 801c752:	685b      	ldr	r3, [r3, #4]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d0ec      	beq.n	801c732 <fp_mul_2d+0xd8>
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d002      	beq.n	801c766 <fp_mul_2d+0x10c>
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	685b      	ldr	r3, [r3, #4]
 801c764:	e000      	b.n	801c768 <fp_mul_2d+0x10e>
 801c766:	2300      	movs	r3, #0
 801c768:	687a      	ldr	r2, [r7, #4]
 801c76a:	6053      	str	r3, [r2, #4]
   return FP_OKAY;
 801c76c:	2300      	movs	r3, #0
}
 801c76e:	4618      	mov	r0, r3
 801c770:	3728      	adds	r7, #40	; 0x28
 801c772:	46bd      	mov	sp, r7
 801c774:	bd80      	pop	{r7, pc}

0801c776 <fp_mul_comba>:
  return FP_OKAY;
}
#endif

int fp_mul_comba(fp_int *A, fp_int *B, fp_int *C)
{
 801c776:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c77a:	b0a0      	sub	sp, #128	; 0x80
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c780:	62b9      	str	r1, [r7, #40]	; 0x28
 801c782:	627a      	str	r2, [r7, #36]	; 0x24
   int       ret = 0;
 801c784:	2300      	movs	r3, #0
 801c786:	65fb      	str	r3, [r7, #92]	; 0x5c
   fp_int    tmp[1];
#else
   fp_int    *tmp;
#endif

   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801c788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c78a:	681a      	ldr	r2, [r3, #0]
 801c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	4413      	add	r3, r2
 801c792:	2b87      	cmp	r3, #135	; 0x87
 801c794:	dd02      	ble.n	801c79c <fp_mul_comba+0x26>
 801c796:	f04f 33ff 	mov.w	r3, #4294967295
 801c79a:	e0f4      	b.n	801c986 <fp_mul_comba+0x210>

   IF_HAVE_INTEL_MULX(ret = fp_mul_comba_mulx(A, B, C), return ret) ;

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801c79c:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801c7a0:	f7fc fa04 	bl	8018bac <wolfSSL_Malloc>
 801c7a4:	65b8      	str	r0, [r7, #88]	; 0x58
   if (tmp == NULL)
 801c7a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d102      	bne.n	801c7b2 <fp_mul_comba+0x3c>
       return FP_MEM;
 801c7ac:	f06f 0301 	mvn.w	r3, #1
 801c7b0:	e0e9      	b.n	801c986 <fp_mul_comba+0x210>
#endif

   COMBA_START;
   COMBA_CLEAR;
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	66bb      	str	r3, [r7, #104]	; 0x68
 801c7b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c7b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7bc:	673b      	str	r3, [r7, #112]	; 0x70

   /* get size of output and trim */
   pa = A->used + B->used;
 801c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7c0:	681a      	ldr	r2, [r3, #0]
 801c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	4413      	add	r3, r2
 801c7c8:	677b      	str	r3, [r7, #116]	; 0x74
   if (pa >= FP_SIZE) {
 801c7ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c7cc:	2b87      	cmp	r3, #135	; 0x87
 801c7ce:	dd01      	ble.n	801c7d4 <fp_mul_comba+0x5e>
      pa = FP_SIZE-1;
 801c7d0:	2387      	movs	r3, #135	; 0x87
 801c7d2:	677b      	str	r3, [r7, #116]	; 0x74
   }

   /* Always take branch to use tmp variable. This avoids a cache attack for
    * determining if C equals A */
   if (1) {
      fp_init(tmp);
 801c7d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c7d6:	f003 fd5a 	bl	802028e <fp_init>
      dst = tmp;
 801c7da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c7dc:	657b      	str	r3, [r7, #84]	; 0x54
   }

   for (ix = 0; ix < pa; ix++) {
 801c7de:	2300      	movs	r3, #0
 801c7e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c7e2:	e096      	b.n	801c912 <fp_mul_comba+0x19c>
      /* get offsets into the two bignums */
      ty = MIN(ix, (B->used > 0 ? B->used - 1 : 0));
 801c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	2b01      	cmp	r3, #1
 801c7ea:	bfb8      	it	lt
 801c7ec:	2301      	movlt	r3, #1
 801c7ee:	1e5a      	subs	r2, r3, #1
 801c7f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c7f2:	4293      	cmp	r3, r2
 801c7f4:	bfa8      	it	ge
 801c7f6:	4613      	movge	r3, r2
 801c7f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      tx = ix - ty;
 801c7fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c7fe:	1ad3      	subs	r3, r2, r3
 801c800:	64bb      	str	r3, [r7, #72]	; 0x48

      /* setup temp aliases */
      tmpx = A->dp + tx;
 801c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c804:	f103 020c 	add.w	r2, r3, #12
 801c808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c80a:	009b      	lsls	r3, r3, #2
 801c80c:	4413      	add	r3, r2
 801c80e:	667b      	str	r3, [r7, #100]	; 0x64
      tmpy = B->dp + ty;
 801c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c812:	f103 020c 	add.w	r2, r3, #12
 801c816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c818:	009b      	lsls	r3, r3, #2
 801c81a:	4413      	add	r3, r2
 801c81c:	663b      	str	r3, [r7, #96]	; 0x60

      /* this is the number of times the loop will iterate, essentially its
         while (tx++ < a->used && ty-- >= 0) { ... }
       */
      iy = MIN(A->used-tx, ty+1);
 801c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c820:	681a      	ldr	r2, [r3, #0]
 801c822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c824:	1ad2      	subs	r2, r2, r3
 801c826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c828:	4293      	cmp	r3, r2
 801c82a:	db04      	blt.n	801c836 <fp_mul_comba+0xc0>
 801c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c82e:	681a      	ldr	r2, [r3, #0]
 801c830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c832:	1ad3      	subs	r3, r2, r3
 801c834:	e001      	b.n	801c83a <fp_mul_comba+0xc4>
 801c836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c838:	3301      	adds	r3, #1
 801c83a:	647b      	str	r3, [r7, #68]	; 0x44

      /* execute loop */
      COMBA_FORWARD;
 801c83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c83e:	673b      	str	r3, [r7, #112]	; 0x70
 801c840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c842:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c844:	2300      	movs	r3, #0
 801c846:	66bb      	str	r3, [r7, #104]	; 0x68
      for (iz = 0; iz < iy; ++iz) {
 801c848:	2300      	movs	r3, #0
 801c84a:	67bb      	str	r3, [r7, #120]	; 0x78
 801c84c:	e053      	b.n	801c8f6 <fp_mul_comba+0x180>
          fp_digit _tmpx = *tmpx++;
 801c84e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c850:	1d13      	adds	r3, r2, #4
 801c852:	667b      	str	r3, [r7, #100]	; 0x64
 801c854:	6813      	ldr	r3, [r2, #0]
 801c856:	643b      	str	r3, [r7, #64]	; 0x40
          fp_digit _tmpy = *tmpy--;
 801c858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c85a:	1f13      	subs	r3, r2, #4
 801c85c:	663b      	str	r3, [r7, #96]	; 0x60
 801c85e:	6813      	ldr	r3, [r2, #0]
 801c860:	63fb      	str	r3, [r7, #60]	; 0x3c
          MULADD(_tmpx, _tmpy);
 801c862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c864:	2200      	movs	r2, #0
 801c866:	613b      	str	r3, [r7, #16]
 801c868:	617a      	str	r2, [r7, #20]
 801c86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c86c:	2200      	movs	r2, #0
 801c86e:	4698      	mov	r8, r3
 801c870:	4691      	mov	r9, r2
 801c872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c874:	2200      	movs	r2, #0
 801c876:	469a      	mov	sl, r3
 801c878:	4693      	mov	fp, r2
 801c87a:	fb0a f209 	mul.w	r2, sl, r9
 801c87e:	fb08 f30b 	mul.w	r3, r8, fp
 801c882:	4413      	add	r3, r2
 801c884:	fba8 450a 	umull	r4, r5, r8, sl
 801c888:	442b      	add	r3, r5
 801c88a:	461d      	mov	r5, r3
 801c88c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801c890:	460b      	mov	r3, r1
 801c892:	191b      	adds	r3, r3, r4
 801c894:	60bb      	str	r3, [r7, #8]
 801c896:	4613      	mov	r3, r2
 801c898:	416b      	adcs	r3, r5
 801c89a:	60fb      	str	r3, [r7, #12]
 801c89c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c8a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801c8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8a6:	673b      	str	r3, [r7, #112]	; 0x70
 801c8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c8aa:	2200      	movs	r2, #0
 801c8ac:	61bb      	str	r3, [r7, #24]
 801c8ae:	61fa      	str	r2, [r7, #28]
 801c8b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801c8b4:	f04f 0000 	mov.w	r0, #0
 801c8b8:	f04f 0100 	mov.w	r1, #0
 801c8bc:	0018      	movs	r0, r3
 801c8be:	2100      	movs	r1, #0
 801c8c0:	69bb      	ldr	r3, [r7, #24]
 801c8c2:	181b      	adds	r3, r3, r0
 801c8c4:	603b      	str	r3, [r7, #0]
 801c8c6:	69fb      	ldr	r3, [r7, #28]
 801c8c8:	414b      	adcs	r3, r1
 801c8ca:	607b      	str	r3, [r7, #4]
 801c8cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c8d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801c8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c8d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801c8dc:	f04f 0000 	mov.w	r0, #0
 801c8e0:	f04f 0100 	mov.w	r1, #0
 801c8e4:	0018      	movs	r0, r3
 801c8e6:	2100      	movs	r1, #0
 801c8e8:	4602      	mov	r2, r0
 801c8ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8ec:	4413      	add	r3, r2
 801c8ee:	66bb      	str	r3, [r7, #104]	; 0x68
      for (iz = 0; iz < iy; ++iz) {
 801c8f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c8f2:	3301      	adds	r3, #1
 801c8f4:	67bb      	str	r3, [r7, #120]	; 0x78
 801c8f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	dba7      	blt.n	801c84e <fp_mul_comba+0xd8>
      }

      /* store term */
      COMBA_STORE(dst->dp[ix]);
 801c8fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c902:	3302      	adds	r3, #2
 801c904:	009a      	lsls	r2, r3, #2
 801c906:	440a      	add	r2, r1
 801c908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c90a:	6053      	str	r3, [r2, #4]
   for (ix = 0; ix < pa; ix++) {
 801c90c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c90e:	3301      	adds	r3, #1
 801c910:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c912:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c916:	429a      	cmp	r2, r3
 801c918:	f6ff af64 	blt.w	801c7e4 <fp_mul_comba+0x6e>
  }
  COMBA_FINI;

  dst->used = pa;
 801c91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c91e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c920:	601a      	str	r2, [r3, #0]
  dst->sign = A->sign ^ B->sign;
 801c922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c924:	685a      	ldr	r2, [r3, #4]
 801c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c928:	685b      	ldr	r3, [r3, #4]
 801c92a:	405a      	eors	r2, r3
 801c92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c92e:	605a      	str	r2, [r3, #4]
  fp_clamp(dst);
 801c930:	e004      	b.n	801c93c <fp_mul_comba+0x1c6>
 801c932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	1e5a      	subs	r2, r3, #1
 801c938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c93a:	601a      	str	r2, [r3, #0]
 801c93c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	2b00      	cmp	r3, #0
 801c942:	d009      	beq.n	801c958 <fp_mul_comba+0x1e2>
 801c944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	3b01      	subs	r3, #1
 801c94a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c94c:	3302      	adds	r3, #2
 801c94e:	009b      	lsls	r3, r3, #2
 801c950:	4413      	add	r3, r2
 801c952:	685b      	ldr	r3, [r3, #4]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d0ec      	beq.n	801c932 <fp_mul_comba+0x1bc>
 801c958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d002      	beq.n	801c966 <fp_mul_comba+0x1f0>
 801c960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c962:	685b      	ldr	r3, [r3, #4]
 801c964:	e000      	b.n	801c968 <fp_mul_comba+0x1f2>
 801c966:	2300      	movs	r3, #0
 801c968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c96a:	6053      	str	r3, [r2, #4]
  fp_copy(dst, C);
 801c96c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c96e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c970:	f003 fe70 	bl	8020654 <fp_copy>

  /* Variables used but not seen by cppcheck. */
  (void)c0; (void)c1; (void)c2;

#ifdef WOLFSSL_SMALL_STACK
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801c974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c976:	653b      	str	r3, [r7, #80]	; 0x50
 801c978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d002      	beq.n	801c984 <fp_mul_comba+0x20e>
 801c97e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801c980:	f7fc f930 	bl	8018be4 <wolfSSL_Free>
#endif
  return ret;
 801c984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 801c986:	4618      	mov	r0, r3
 801c988:	3780      	adds	r7, #128	; 0x80
 801c98a:	46bd      	mov	sp, r7
 801c98c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c990 <fp_div>:

/* a/b => cb + d == a */
int fp_div(fp_int *a, fp_int *b, fp_int *c, fp_int *d)
{
 801c990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c994:	b09e      	sub	sp, #120	; 0x78
 801c996:	af00      	add	r7, sp, #0
 801c998:	6178      	str	r0, [r7, #20]
 801c99a:	6139      	str	r1, [r7, #16]
 801c99c:	60fa      	str	r2, [r7, #12]
 801c99e:	60bb      	str	r3, [r7, #8]
#else
  fp_int  *q, *x, *y, *t1, *t2;
#endif

  /* is divisor zero ? */
  if (fp_iszero (b) == FP_YES) {
 801c9a0:	693b      	ldr	r3, [r7, #16]
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d102      	bne.n	801c9ae <fp_div+0x1e>
    return FP_VAL;
 801c9a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c9ac:	e2da      	b.n	801cf64 <fp_div+0x5d4>
  }

  /* if a < b then q=0, r = a */
  if (fp_cmp_mag (a, b) == FP_LT)
 801c9ae:	6939      	ldr	r1, [r7, #16]
 801c9b0:	6978      	ldr	r0, [r7, #20]
 801c9b2:	f002 ff0f 	bl	801f7d4 <fp_cmp_mag>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9bc:	d10e      	bne.n	801c9dc <fp_div+0x4c>
  {
    if (d != NULL) {
 801c9be:	68bb      	ldr	r3, [r7, #8]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d003      	beq.n	801c9cc <fp_div+0x3c>
      fp_copy (a, d);
 801c9c4:	68b9      	ldr	r1, [r7, #8]
 801c9c6:	6978      	ldr	r0, [r7, #20]
 801c9c8:	f003 fe44 	bl	8020654 <fp_copy>
    }
    if (c != NULL) {
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d002      	beq.n	801c9d8 <fp_div+0x48>
      fp_zero (c);
 801c9d2:	68f8      	ldr	r0, [r7, #12]
 801c9d4:	f003 fc69 	bl	80202aa <fp_zero>
    }
    return FP_OKAY;
 801c9d8:	2300      	movs	r3, #0
 801c9da:	e2c3      	b.n	801cf64 <fp_div+0x5d4>
  }

#ifdef WOLFSSL_SMALL_STACK
  q = (fp_int*)XMALLOC(sizeof(fp_int) * 5, NULL, DYNAMIC_TYPE_BIGINT);
 801c9dc:	f640 20dc 	movw	r0, #2780	; 0xadc
 801c9e0:	f7fc f8e4 	bl	8018bac <wolfSSL_Malloc>
 801c9e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (q == NULL) {
 801c9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d102      	bne.n	801c9f2 <fp_div+0x62>
      return FP_MEM;
 801c9ec:	f06f 0301 	mvn.w	r3, #1
 801c9f0:	e2b8      	b.n	801cf64 <fp_div+0x5d4>
  }
  x = &q[1]; y = &q[2]; t1 = &q[3]; t2 = &q[4];
 801c9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c9f4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801c9f8:	66bb      	str	r3, [r7, #104]	; 0x68
 801c9fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c9fc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801ca00:	667b      	str	r3, [r7, #100]	; 0x64
 801ca02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca04:	f203 6384 	addw	r3, r3, #1668	; 0x684
 801ca08:	663b      	str	r3, [r7, #96]	; 0x60
 801ca0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca0c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801ca10:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  fp_init(q);
 801ca12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ca14:	f003 fc3b 	bl	802028e <fp_init>
  /* qb + d = a, and b is an integer > 0, therefore q <= a */
  q->used = a->used;
 801ca18:	697b      	ldr	r3, [r7, #20]
 801ca1a:	681a      	ldr	r2, [r3, #0]
 801ca1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca1e:	601a      	str	r2, [r3, #0]

  fp_init(t1);
 801ca20:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801ca22:	f003 fc34 	bl	802028e <fp_init>
  fp_init(t2);
 801ca26:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ca28:	f003 fc31 	bl	802028e <fp_init>
  fp_init_copy(x, a);
 801ca2c:	6979      	ldr	r1, [r7, #20]
 801ca2e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801ca30:	f003 fe4f 	bl	80206d2 <fp_init_copy>
  fp_init_copy(y, b);
 801ca34:	6939      	ldr	r1, [r7, #16]
 801ca36:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ca38:	f003 fe4b 	bl	80206d2 <fp_init_copy>

  /* fix the sign */
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 801ca3c:	697b      	ldr	r3, [r7, #20]
 801ca3e:	685a      	ldr	r2, [r3, #4]
 801ca40:	693b      	ldr	r3, [r7, #16]
 801ca42:	685b      	ldr	r3, [r3, #4]
 801ca44:	429a      	cmp	r2, r3
 801ca46:	bf14      	ite	ne
 801ca48:	2301      	movne	r3, #1
 801ca4a:	2300      	moveq	r3, #0
 801ca4c:	b2db      	uxtb	r3, r3
 801ca4e:	65bb      	str	r3, [r7, #88]	; 0x58
  x->sign = y->sign = FP_ZPOS;
 801ca50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca52:	2200      	movs	r2, #0
 801ca54:	605a      	str	r2, [r3, #4]
 801ca56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca58:	685a      	ldr	r2, [r3, #4]
 801ca5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ca5c:	605a      	str	r2, [r3, #4]

  /* normalize both x and y, ensure that y >= b/2, [b == 2**DIGIT_BIT] */
  norm = fp_count_bits(y) % DIGIT_BIT;
 801ca5e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ca60:	f003 fa5c 	bl	801ff1c <fp_count_bits>
 801ca64:	4603      	mov	r3, r0
 801ca66:	425a      	negs	r2, r3
 801ca68:	f003 031f 	and.w	r3, r3, #31
 801ca6c:	f002 021f 	and.w	r2, r2, #31
 801ca70:	bf58      	it	pl
 801ca72:	4253      	negpl	r3, r2
 801ca74:	673b      	str	r3, [r7, #112]	; 0x70
  if (norm < (int)(DIGIT_BIT-1)) {
 801ca76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca78:	2b1e      	cmp	r3, #30
 801ca7a:	dc29      	bgt.n	801cad0 <fp_div+0x140>
    norm = (DIGIT_BIT-1) - norm;
 801ca7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca7e:	f1c3 031f 	rsb	r3, r3, #31
 801ca82:	673b      	str	r3, [r7, #112]	; 0x70
    ret = fp_mul_2d (x, norm, x);
 801ca84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ca86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801ca88:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801ca8a:	f7ff fde6 	bl	801c65a <fp_mul_2d>
 801ca8e:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 801ca90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d009      	beq.n	801caaa <fp_div+0x11a>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801ca96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca98:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ca9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d002      	beq.n	801caa6 <fp_div+0x116>
 801caa0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801caa2:	f7fc f89f 	bl	8018be4 <wolfSSL_Free>
    #endif
      return ret;
 801caa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801caa8:	e25c      	b.n	801cf64 <fp_div+0x5d4>
    }
    ret = fp_mul_2d (y, norm, y);
 801caaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801caac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801caae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801cab0:	f7ff fdd3 	bl	801c65a <fp_mul_2d>
 801cab4:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 801cab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d00b      	beq.n	801cad4 <fp_div+0x144>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cabc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cabe:	653b      	str	r3, [r7, #80]	; 0x50
 801cac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d002      	beq.n	801cacc <fp_div+0x13c>
 801cac6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801cac8:	f7fc f88c 	bl	8018be4 <wolfSSL_Free>
    #endif
      return ret;
 801cacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cace:	e249      	b.n	801cf64 <fp_div+0x5d4>
    }
  } else {
    norm = 0;
 801cad0:	2300      	movs	r3, #0
 801cad2:	673b      	str	r3, [r7, #112]	; 0x70
  }

  /* note hac does 0 based, so if used==5 then its 0,1,2,3,4, e.g. use 4 */
  n = x->used - 1;
 801cad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	3b01      	subs	r3, #1
 801cada:	64bb      	str	r3, [r7, #72]	; 0x48
  t = y->used - 1;
 801cadc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	3b01      	subs	r3, #1
 801cae2:	647b      	str	r3, [r7, #68]	; 0x44

  /* while (x >= y*b**n-t) do { q[n-t] += 1; x -= y*b**{n-t} } */
  ret = fp_lshd (y, n - t); /* y = y*b**{n-t} */
 801cae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cae8:	1ad3      	subs	r3, r2, r3
 801caea:	4619      	mov	r1, r3
 801caec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801caee:	f003 fa3e 	bl	801ff6e <fp_lshd>
 801caf2:	6578      	str	r0, [r7, #84]	; 0x54
  if (ret != FP_OKAY) {
 801caf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d02a      	beq.n	801cb50 <fp_div+0x1c0>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cafc:	61bb      	str	r3, [r7, #24]
 801cafe:	69bb      	ldr	r3, [r7, #24]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d002      	beq.n	801cb0a <fp_div+0x17a>
 801cb04:	69b8      	ldr	r0, [r7, #24]
 801cb06:	f7fc f86d 	bl	8018be4 <wolfSSL_Free>
  #endif
    return ret;
 801cb0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb0c:	e22a      	b.n	801cf64 <fp_div+0x5d4>
  }

  while (fp_cmp (x, y) != FP_LT) {
    ++(q->dp[n - t]);
 801cb0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cb10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb12:	1ad2      	subs	r2, r2, r3
 801cb14:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801cb16:	1c93      	adds	r3, r2, #2
 801cb18:	009b      	lsls	r3, r3, #2
 801cb1a:	440b      	add	r3, r1
 801cb1c:	685b      	ldr	r3, [r3, #4]
 801cb1e:	1c59      	adds	r1, r3, #1
 801cb20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801cb22:	1c93      	adds	r3, r2, #2
 801cb24:	009b      	lsls	r3, r3, #2
 801cb26:	4403      	add	r3, r0
 801cb28:	6059      	str	r1, [r3, #4]
    ret = fp_sub (x, y, x);
 801cb2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cb2c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801cb2e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801cb30:	f7ff fb39 	bl	801c1a6 <fp_sub>
 801cb34:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 801cb36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d009      	beq.n	801cb50 <fp_div+0x1c0>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cb3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cb3e:	61fb      	str	r3, [r7, #28]
 801cb40:	69fb      	ldr	r3, [r7, #28]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d002      	beq.n	801cb4c <fp_div+0x1bc>
 801cb46:	69f8      	ldr	r0, [r7, #28]
 801cb48:	f7fc f84c 	bl	8018be4 <wolfSSL_Free>
    #endif
      return ret;
 801cb4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb4e:	e209      	b.n	801cf64 <fp_div+0x5d4>
  while (fp_cmp (x, y) != FP_LT) {
 801cb50:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801cb52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801cb54:	f002 fdd9 	bl	801f70a <fp_cmp>
 801cb58:	4603      	mov	r3, r0
 801cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb5e:	d1d6      	bne.n	801cb0e <fp_div+0x17e>
    }
  }

  /* reset y by shifting it back down */
  fp_rshd (y, n - t);
 801cb60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb64:	1ad3      	subs	r3, r2, r3
 801cb66:	4619      	mov	r1, r3
 801cb68:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801cb6a:	f003 fae5 	bl	8020138 <fp_rshd>

  /* step 3. for i from n down to (t + 1) */
  for (i = n; i >= (t + 1); i--) {
 801cb6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb70:	677b      	str	r3, [r7, #116]	; 0x74
 801cb72:	e179      	b.n	801ce68 <fp_div+0x4d8>
    if (i > x->used) {
 801cb74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cb7a:	429a      	cmp	r2, r3
 801cb7c:	f300 8170 	bgt.w	801ce60 <fp_div+0x4d0>
      continue;
    }

    /* step 3.1 if xi == yt then set q{i-t-1} to b-1,
     * otherwise set q{i-t-1} to (xi*b + x{i-1})/yt */
    if (x->dp[i] == y->dp[t]) {
 801cb80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cb82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb84:	3302      	adds	r3, #2
 801cb86:	009b      	lsls	r3, r3, #2
 801cb88:	4413      	add	r3, r2
 801cb8a:	685a      	ldr	r2, [r3, #4]
 801cb8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801cb8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb90:	3302      	adds	r3, #2
 801cb92:	009b      	lsls	r3, r3, #2
 801cb94:	440b      	add	r3, r1
 801cb96:	685b      	ldr	r3, [r3, #4]
 801cb98:	429a      	cmp	r2, r3
 801cb9a:	d10b      	bne.n	801cbb4 <fp_div+0x224>
      q->dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
 801cb9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cb9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cba0:	1ad3      	subs	r3, r2, r3
 801cba2:	3b01      	subs	r3, #1
 801cba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cba6:	3302      	adds	r3, #2
 801cba8:	009b      	lsls	r3, r3, #2
 801cbaa:	4413      	add	r3, r2
 801cbac:	f04f 32ff 	mov.w	r2, #4294967295
 801cbb0:	605a      	str	r2, [r3, #4]
 801cbb2:	e03f      	b.n	801cc34 <fp_div+0x2a4>
    } else {
      fp_word tmp;
      tmp = ((fp_word) x->dp[i]) << ((fp_word) DIGIT_BIT);
 801cbb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cbb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cbb8:	3302      	adds	r3, #2
 801cbba:	009b      	lsls	r3, r3, #2
 801cbbc:	4413      	add	r3, r2
 801cbbe:	685b      	ldr	r3, [r3, #4]
 801cbc0:	2200      	movs	r2, #0
 801cbc2:	469a      	mov	sl, r3
 801cbc4:	4693      	mov	fp, r2
 801cbc6:	f04f 0200 	mov.w	r2, #0
 801cbca:	f04f 0300 	mov.w	r3, #0
 801cbce:	4653      	mov	r3, sl
 801cbd0:	2200      	movs	r2, #0
 801cbd2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      tmp |= ((fp_word) x->dp[i - 1]);
 801cbd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cbd8:	3b01      	subs	r3, #1
 801cbda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cbdc:	3302      	adds	r3, #2
 801cbde:	009b      	lsls	r3, r3, #2
 801cbe0:	4413      	add	r3, r2
 801cbe2:	685b      	ldr	r3, [r3, #4]
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	461c      	mov	r4, r3
 801cbe8:	4615      	mov	r5, r2
 801cbea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801cbee:	ea42 0804 	orr.w	r8, r2, r4
 801cbf2:	ea43 0905 	orr.w	r9, r3, r5
 801cbf6:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
#ifdef WOLFSSL_LINUXKM
      /* Linux kernel macro for in-place 64 bit integer division. */
      do_div(tmp, (fp_word)y->dp[t]);
#else
      tmp /= ((fp_word)y->dp[t]);
 801cbfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801cbfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbfe:	3302      	adds	r3, #2
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	4413      	add	r3, r2
 801cc04:	685b      	ldr	r3, [r3, #4]
 801cc06:	2200      	movs	r2, #0
 801cc08:	603b      	str	r3, [r7, #0]
 801cc0a:	607a      	str	r2, [r7, #4]
 801cc0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cc10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801cc14:	f7e3 fb54 	bl	80002c0 <__aeabi_uldivmod>
 801cc18:	4602      	mov	r2, r0
 801cc1a:	460b      	mov	r3, r1
 801cc1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
#endif
      q->dp[i - t - 1] = (fp_digit) (tmp);
 801cc20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc24:	1ad3      	subs	r3, r2, r3
 801cc26:	3b01      	subs	r3, #1
 801cc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cc2a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801cc2c:	3302      	adds	r3, #2
 801cc2e:	009b      	lsls	r3, r3, #2
 801cc30:	440b      	add	r3, r1
 801cc32:	605a      	str	r2, [r3, #4]
    /* while (q{i-t-1} * (yt * b + y{t-1})) >
             xi * b**2 + xi-1 * b + xi-2

       do q{i-t-1} -= 1;
    */
    q->dp[i - t - 1] = (q->dp[i - t - 1] + 1);
 801cc34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cc36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc38:	1ad3      	subs	r3, r2, r3
 801cc3a:	3b01      	subs	r3, #1
 801cc3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cc3e:	3302      	adds	r3, #2
 801cc40:	009b      	lsls	r3, r3, #2
 801cc42:	4413      	add	r3, r2
 801cc44:	685a      	ldr	r2, [r3, #4]
 801cc46:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc4a:	1acb      	subs	r3, r1, r3
 801cc4c:	3b01      	subs	r3, #1
 801cc4e:	3201      	adds	r2, #1
 801cc50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801cc52:	3302      	adds	r3, #2
 801cc54:	009b      	lsls	r3, r3, #2
 801cc56:	440b      	add	r3, r1
 801cc58:	605a      	str	r2, [r3, #4]
    do {
      q->dp[i - t - 1] = (q->dp[i - t - 1] - 1);
 801cc5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cc5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc5e:	1ad3      	subs	r3, r2, r3
 801cc60:	3b01      	subs	r3, #1
 801cc62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cc64:	3302      	adds	r3, #2
 801cc66:	009b      	lsls	r3, r3, #2
 801cc68:	4413      	add	r3, r2
 801cc6a:	685a      	ldr	r2, [r3, #4]
 801cc6c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc70:	1acb      	subs	r3, r1, r3
 801cc72:	3b01      	subs	r3, #1
 801cc74:	3a01      	subs	r2, #1
 801cc76:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801cc78:	3302      	adds	r3, #2
 801cc7a:	009b      	lsls	r3, r3, #2
 801cc7c:	440b      	add	r3, r1
 801cc7e:	605a      	str	r2, [r3, #4]

      /* find left hand */
      fp_zero (t1);
 801cc80:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801cc82:	f003 fb12 	bl	80202aa <fp_zero>
      t1->dp[0] = (t - 1 < 0) ? 0 : y->dp[t - 1];
 801cc86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	dd07      	ble.n	801cc9c <fp_div+0x30c>
 801cc8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc8e:	3b01      	subs	r3, #1
 801cc90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801cc92:	3302      	adds	r3, #2
 801cc94:	009b      	lsls	r3, r3, #2
 801cc96:	4413      	add	r3, r2
 801cc98:	685b      	ldr	r3, [r3, #4]
 801cc9a:	e000      	b.n	801cc9e <fp_div+0x30e>
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cca0:	60d3      	str	r3, [r2, #12]
      t1->dp[1] = y->dp[t];
 801cca2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801cca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cca6:	3302      	adds	r3, #2
 801cca8:	009b      	lsls	r3, r3, #2
 801ccaa:	4413      	add	r3, r2
 801ccac:	685a      	ldr	r2, [r3, #4]
 801ccae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ccb0:	611a      	str	r2, [r3, #16]
      t1->used = 2;
 801ccb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ccb4:	2202      	movs	r2, #2
 801ccb6:	601a      	str	r2, [r3, #0]
      ret = fp_mul_d (t1, q->dp[i - t - 1], t1);
 801ccb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ccba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ccbc:	1ad3      	subs	r3, r2, r3
 801ccbe:	3b01      	subs	r3, #1
 801ccc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ccc2:	3302      	adds	r3, #2
 801ccc4:	009b      	lsls	r3, r3, #2
 801ccc6:	4413      	add	r3, r2
 801ccc8:	685b      	ldr	r3, [r3, #4]
 801ccca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cccc:	4619      	mov	r1, r3
 801ccce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801ccd0:	f7ff fc1f 	bl	801c512 <fp_mul_d>
 801ccd4:	6578      	str	r0, [r7, #84]	; 0x54
      if (ret != FP_OKAY) {
 801ccd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d009      	beq.n	801ccf0 <fp_div+0x360>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801ccdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ccde:	623b      	str	r3, [r7, #32]
 801cce0:	6a3b      	ldr	r3, [r7, #32]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d002      	beq.n	801ccec <fp_div+0x35c>
 801cce6:	6a38      	ldr	r0, [r7, #32]
 801cce8:	f7fb ff7c 	bl	8018be4 <wolfSSL_Free>
      #endif
        return ret;
 801ccec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ccee:	e139      	b.n	801cf64 <fp_div+0x5d4>
      }

      /* find right hand */
      t2->dp[0] = (i - 2 < 0) ? 0 : x->dp[i - 2];
 801ccf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ccf2:	2b01      	cmp	r3, #1
 801ccf4:	dd07      	ble.n	801cd06 <fp_div+0x376>
 801ccf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ccf8:	3b02      	subs	r3, #2
 801ccfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ccfc:	3302      	adds	r3, #2
 801ccfe:	009b      	lsls	r3, r3, #2
 801cd00:	4413      	add	r3, r2
 801cd02:	685b      	ldr	r3, [r3, #4]
 801cd04:	e000      	b.n	801cd08 <fp_div+0x378>
 801cd06:	2300      	movs	r3, #0
 801cd08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cd0a:	60d3      	str	r3, [r2, #12]
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 801cd0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	dd07      	ble.n	801cd22 <fp_div+0x392>
 801cd12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd14:	3b01      	subs	r3, #1
 801cd16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cd18:	3302      	adds	r3, #2
 801cd1a:	009b      	lsls	r3, r3, #2
 801cd1c:	4413      	add	r3, r2
 801cd1e:	685b      	ldr	r3, [r3, #4]
 801cd20:	e000      	b.n	801cd24 <fp_div+0x394>
 801cd22:	2300      	movs	r3, #0
 801cd24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cd26:	6113      	str	r3, [r2, #16]
      t2->dp[2] = x->dp[i];
 801cd28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cd2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd2c:	3302      	adds	r3, #2
 801cd2e:	009b      	lsls	r3, r3, #2
 801cd30:	4413      	add	r3, r2
 801cd32:	685a      	ldr	r2, [r3, #4]
 801cd34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cd36:	615a      	str	r2, [r3, #20]
      t2->used = 3;
 801cd38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cd3a:	2203      	movs	r2, #3
 801cd3c:	601a      	str	r2, [r3, #0]
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 801cd3e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801cd40:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801cd42:	f002 fd47 	bl	801f7d4 <fp_cmp_mag>
 801cd46:	4603      	mov	r3, r0
 801cd48:	2b01      	cmp	r3, #1
 801cd4a:	d086      	beq.n	801cc5a <fp_div+0x2ca>

    /* step 3.3 x = x - q{i-t-1} * y * b**{i-t-1} */
    ret = fp_mul_d (y, q->dp[i - t - 1], t1);
 801cd4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cd4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd50:	1ad3      	subs	r3, r2, r3
 801cd52:	3b01      	subs	r3, #1
 801cd54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cd56:	3302      	adds	r3, #2
 801cd58:	009b      	lsls	r3, r3, #2
 801cd5a:	4413      	add	r3, r2
 801cd5c:	685b      	ldr	r3, [r3, #4]
 801cd5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cd60:	4619      	mov	r1, r3
 801cd62:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801cd64:	f7ff fbd5 	bl	801c512 <fp_mul_d>
 801cd68:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 801cd6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d009      	beq.n	801cd84 <fp_div+0x3f4>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cd70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cd72:	627b      	str	r3, [r7, #36]	; 0x24
 801cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d002      	beq.n	801cd80 <fp_div+0x3f0>
 801cd7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cd7c:	f7fb ff32 	bl	8018be4 <wolfSSL_Free>
    #endif
      return ret;
 801cd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cd82:	e0ef      	b.n	801cf64 <fp_div+0x5d4>
    }
    ret = fp_lshd  (t1, i - t - 1);
 801cd84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd88:	1ad3      	subs	r3, r2, r3
 801cd8a:	3b01      	subs	r3, #1
 801cd8c:	4619      	mov	r1, r3
 801cd8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801cd90:	f003 f8ed 	bl	801ff6e <fp_lshd>
 801cd94:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 801cd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d009      	beq.n	801cdb0 <fp_div+0x420>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cd9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cd9e:	62bb      	str	r3, [r7, #40]	; 0x28
 801cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d002      	beq.n	801cdac <fp_div+0x41c>
 801cda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cda8:	f7fb ff1c 	bl	8018be4 <wolfSSL_Free>
    #endif
      return ret;
 801cdac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cdae:	e0d9      	b.n	801cf64 <fp_div+0x5d4>
    }
    ret = fp_sub   (x, t1, x);
 801cdb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cdb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801cdb4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801cdb6:	f7ff f9f6 	bl	801c1a6 <fp_sub>
 801cdba:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 801cdbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d009      	beq.n	801cdd6 <fp_div+0x446>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cdc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d002      	beq.n	801cdd2 <fp_div+0x442>
 801cdcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cdce:	f7fb ff09 	bl	8018be4 <wolfSSL_Free>
    #endif
      return ret;
 801cdd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cdd4:	e0c6      	b.n	801cf64 <fp_div+0x5d4>
    }

    /* if x < 0 then { x = x + y*b**{i-t-1}; q{i-t-1} -= 1; } */
    if (x->sign == FP_NEG) {
 801cdd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cdd8:	685b      	ldr	r3, [r3, #4]
 801cdda:	2b01      	cmp	r3, #1
 801cddc:	d141      	bne.n	801ce62 <fp_div+0x4d2>
      fp_copy (y, t1);
 801cdde:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801cde0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801cde2:	f003 fc37 	bl	8020654 <fp_copy>
      ret = fp_lshd (t1, i - t - 1);
 801cde6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdea:	1ad3      	subs	r3, r2, r3
 801cdec:	3b01      	subs	r3, #1
 801cdee:	4619      	mov	r1, r3
 801cdf0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801cdf2:	f003 f8bc 	bl	801ff6e <fp_lshd>
 801cdf6:	6578      	str	r0, [r7, #84]	; 0x54
      if (ret != FP_OKAY) {
 801cdf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d009      	beq.n	801ce12 <fp_div+0x482>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cdfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ce00:	633b      	str	r3, [r7, #48]	; 0x30
 801ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d002      	beq.n	801ce0e <fp_div+0x47e>
 801ce08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ce0a:	f7fb feeb 	bl	8018be4 <wolfSSL_Free>
      #endif
        return ret;
 801ce0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce10:	e0a8      	b.n	801cf64 <fp_div+0x5d4>
      }
      ret = fp_add (x, t1, x);
 801ce12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ce14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801ce16:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801ce18:	f7ff f8e3 	bl	801bfe2 <fp_add>
 801ce1c:	6578      	str	r0, [r7, #84]	; 0x54
      if (ret != FP_OKAY) {
 801ce1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d009      	beq.n	801ce38 <fp_div+0x4a8>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801ce24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ce26:	637b      	str	r3, [r7, #52]	; 0x34
 801ce28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d002      	beq.n	801ce34 <fp_div+0x4a4>
 801ce2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ce30:	f7fb fed8 	bl	8018be4 <wolfSSL_Free>
      #endif
        return ret;
 801ce34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce36:	e095      	b.n	801cf64 <fp_div+0x5d4>
      }
      q->dp[i - t - 1] = q->dp[i - t - 1] - 1;
 801ce38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ce3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce3c:	1ad3      	subs	r3, r2, r3
 801ce3e:	3b01      	subs	r3, #1
 801ce40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ce42:	3302      	adds	r3, #2
 801ce44:	009b      	lsls	r3, r3, #2
 801ce46:	4413      	add	r3, r2
 801ce48:	685a      	ldr	r2, [r3, #4]
 801ce4a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801ce4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce4e:	1acb      	subs	r3, r1, r3
 801ce50:	3b01      	subs	r3, #1
 801ce52:	3a01      	subs	r2, #1
 801ce54:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801ce56:	3302      	adds	r3, #2
 801ce58:	009b      	lsls	r3, r3, #2
 801ce5a:	440b      	add	r3, r1
 801ce5c:	605a      	str	r2, [r3, #4]
 801ce5e:	e000      	b.n	801ce62 <fp_div+0x4d2>
      continue;
 801ce60:	bf00      	nop
  for (i = n; i >= (t + 1); i--) {
 801ce62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce64:	3b01      	subs	r3, #1
 801ce66:	677b      	str	r3, [r7, #116]	; 0x74
 801ce68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ce6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce6c:	429a      	cmp	r2, r3
 801ce6e:	f6ff ae81 	blt.w	801cb74 <fp_div+0x1e4>
  /* now q is the quotient and x is the remainder
   * [which we have to normalize]
   */

  /* get sign before writing to c */
  x->sign = x->used == 0 ? FP_ZPOS : a->sign;
 801ce72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d002      	beq.n	801ce80 <fp_div+0x4f0>
 801ce7a:	697b      	ldr	r3, [r7, #20]
 801ce7c:	685b      	ldr	r3, [r3, #4]
 801ce7e:	e000      	b.n	801ce82 <fp_div+0x4f2>
 801ce80:	2300      	movs	r3, #0
 801ce82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ce84:	6053      	str	r3, [r2, #4]

  if (c != NULL) {
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d024      	beq.n	801ced6 <fp_div+0x546>
    fp_clamp (q);
 801ce8c:	e004      	b.n	801ce98 <fp_div+0x508>
 801ce8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	1e5a      	subs	r2, r3, #1
 801ce94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ce96:	601a      	str	r2, [r3, #0]
 801ce98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d009      	beq.n	801ceb4 <fp_div+0x524>
 801cea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	3b01      	subs	r3, #1
 801cea6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cea8:	3302      	adds	r3, #2
 801ceaa:	009b      	lsls	r3, r3, #2
 801ceac:	4413      	add	r3, r2
 801ceae:	685b      	ldr	r3, [r3, #4]
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d0ec      	beq.n	801ce8e <fp_div+0x4fe>
 801ceb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d002      	beq.n	801cec2 <fp_div+0x532>
 801cebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cebe:	685b      	ldr	r3, [r3, #4]
 801cec0:	e000      	b.n	801cec4 <fp_div+0x534>
 801cec2:	2300      	movs	r3, #0
 801cec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cec6:	6053      	str	r3, [r2, #4]
    fp_copy (q, c);
 801cec8:	68f9      	ldr	r1, [r7, #12]
 801ceca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801cecc:	f003 fbc2 	bl	8020654 <fp_copy>
    c->sign = neg;
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ced4:	605a      	str	r2, [r3, #4]
  }

  if (d != NULL) {
 801ced6:	68bb      	ldr	r3, [r7, #8]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d03a      	beq.n	801cf52 <fp_div+0x5c2>
    fp_div_2d (x, norm, x, NULL);
 801cedc:	2300      	movs	r3, #0
 801cede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cee0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801cee2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801cee4:	f000 f986 	bl	801d1f4 <fp_div_2d>

    /* zero any excess digits on the destination that we didn't write to */
    for (i = b->used; i < x->used; i++) {
 801cee8:	693b      	ldr	r3, [r7, #16]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	677b      	str	r3, [r7, #116]	; 0x74
 801ceee:	e009      	b.n	801cf04 <fp_div+0x574>
        x->dp[i] = 0;
 801cef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cef4:	3302      	adds	r3, #2
 801cef6:	009b      	lsls	r3, r3, #2
 801cef8:	4413      	add	r3, r2
 801cefa:	2200      	movs	r2, #0
 801cefc:	605a      	str	r2, [r3, #4]
    for (i = b->used; i < x->used; i++) {
 801cefe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf00:	3301      	adds	r3, #1
 801cf02:	677b      	str	r3, [r7, #116]	; 0x74
 801cf04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cf0a:	429a      	cmp	r2, r3
 801cf0c:	dbf0      	blt.n	801cef0 <fp_div+0x560>
    }
    fp_clamp(x);
 801cf0e:	e004      	b.n	801cf1a <fp_div+0x58a>
 801cf10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	1e5a      	subs	r2, r3, #1
 801cf16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf18:	601a      	str	r2, [r3, #0]
 801cf1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d009      	beq.n	801cf36 <fp_div+0x5a6>
 801cf22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	3b01      	subs	r3, #1
 801cf28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cf2a:	3302      	adds	r3, #2
 801cf2c:	009b      	lsls	r3, r3, #2
 801cf2e:	4413      	add	r3, r2
 801cf30:	685b      	ldr	r3, [r3, #4]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d0ec      	beq.n	801cf10 <fp_div+0x580>
 801cf36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d002      	beq.n	801cf44 <fp_div+0x5b4>
 801cf3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf40:	685b      	ldr	r3, [r3, #4]
 801cf42:	e000      	b.n	801cf46 <fp_div+0x5b6>
 801cf44:	2300      	movs	r3, #0
 801cf46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cf48:	6053      	str	r3, [r2, #4]
    fp_copy (x, d);
 801cf4a:	68b9      	ldr	r1, [r7, #8]
 801cf4c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801cf4e:	f003 fb81 	bl	8020654 <fp_copy>
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801cf52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cf54:	643b      	str	r3, [r7, #64]	; 0x40
 801cf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d002      	beq.n	801cf62 <fp_div+0x5d2>
 801cf5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801cf5e:	f7fb fe41 	bl	8018be4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 801cf62:	2300      	movs	r3, #0
}
 801cf64:	4618      	mov	r0, r3
 801cf66:	3778      	adds	r7, #120	; 0x78
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801cf6e <fp_div_2>:

/* b = a/2 */
void fp_div_2(fp_int * a, fp_int * b)
{
 801cf6e:	b480      	push	{r7}
 801cf70:	b089      	sub	sp, #36	; 0x24
 801cf72:	af00      	add	r7, sp, #0
 801cf74:	6078      	str	r0, [r7, #4]
 801cf76:	6039      	str	r1, [r7, #0]
  int     x, oldused;

  oldused = b->used;
 801cf78:	683b      	ldr	r3, [r7, #0]
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	60fb      	str	r3, [r7, #12]
  b->used = a->used;
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681a      	ldr	r2, [r3, #0]
 801cf82:	683b      	ldr	r3, [r7, #0]
 801cf84:	601a      	str	r2, [r3, #0]
  {
    fp_digit r, rr, *tmpa, *tmpb;

    /* source alias */
    tmpa = a->dp + b->used - 1;
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	f103 020c 	add.w	r2, r3, #12
 801cf8c:	683b      	ldr	r3, [r7, #0]
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801cf94:	3b01      	subs	r3, #1
 801cf96:	009b      	lsls	r3, r3, #2
 801cf98:	4413      	add	r3, r2
 801cf9a:	617b      	str	r3, [r7, #20]

    /* dest alias */
    tmpb = b->dp + b->used - 1;
 801cf9c:	683b      	ldr	r3, [r7, #0]
 801cf9e:	f103 020c 	add.w	r2, r3, #12
 801cfa2:	683b      	ldr	r3, [r7, #0]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801cfaa:	3b01      	subs	r3, #1
 801cfac:	009b      	lsls	r3, r3, #2
 801cfae:	4413      	add	r3, r2
 801cfb0:	613b      	str	r3, [r7, #16]

    /* carry */
    r = 0;
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	61bb      	str	r3, [r7, #24]
    for (x = b->used - 1; x >= 0; x--) {
 801cfb6:	683b      	ldr	r3, [r7, #0]
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	3b01      	subs	r3, #1
 801cfbc:	61fb      	str	r3, [r7, #28]
 801cfbe:	e015      	b.n	801cfec <fp_div_2+0x7e>
      /* get the carry for the next iteration */
      rr = *tmpa & 1;
 801cfc0:	697b      	ldr	r3, [r7, #20]
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	f003 0301 	and.w	r3, r3, #1
 801cfc8:	60bb      	str	r3, [r7, #8]

      /* shift the current digit, add in carry and store */
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
 801cfca:	697b      	ldr	r3, [r7, #20]
 801cfcc:	1f1a      	subs	r2, r3, #4
 801cfce:	617a      	str	r2, [r7, #20]
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	0859      	lsrs	r1, r3, #1
 801cfd4:	69bb      	ldr	r3, [r7, #24]
 801cfd6:	07da      	lsls	r2, r3, #31
 801cfd8:	693b      	ldr	r3, [r7, #16]
 801cfda:	1f18      	subs	r0, r3, #4
 801cfdc:	6138      	str	r0, [r7, #16]
 801cfde:	430a      	orrs	r2, r1
 801cfe0:	601a      	str	r2, [r3, #0]

      /* forward carry to next iteration */
      r = rr;
 801cfe2:	68bb      	ldr	r3, [r7, #8]
 801cfe4:	61bb      	str	r3, [r7, #24]
    for (x = b->used - 1; x >= 0; x--) {
 801cfe6:	69fb      	ldr	r3, [r7, #28]
 801cfe8:	3b01      	subs	r3, #1
 801cfea:	61fb      	str	r3, [r7, #28]
 801cfec:	69fb      	ldr	r3, [r7, #28]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	dae6      	bge.n	801cfc0 <fp_div_2+0x52>
    }

    /* zero any excess digits on the destination that we didn't write to */
    tmpb = b->dp + b->used;
 801cff2:	683b      	ldr	r3, [r7, #0]
 801cff4:	f103 020c 	add.w	r2, r3, #12
 801cff8:	683b      	ldr	r3, [r7, #0]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	009b      	lsls	r3, r3, #2
 801cffe:	4413      	add	r3, r2
 801d000:	613b      	str	r3, [r7, #16]
    for (x = b->used; x < oldused; x++) {
 801d002:	683b      	ldr	r3, [r7, #0]
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	61fb      	str	r3, [r7, #28]
 801d008:	e007      	b.n	801d01a <fp_div_2+0xac>
      *tmpb++ = 0;
 801d00a:	693b      	ldr	r3, [r7, #16]
 801d00c:	1d1a      	adds	r2, r3, #4
 801d00e:	613a      	str	r2, [r7, #16]
 801d010:	2200      	movs	r2, #0
 801d012:	601a      	str	r2, [r3, #0]
    for (x = b->used; x < oldused; x++) {
 801d014:	69fb      	ldr	r3, [r7, #28]
 801d016:	3301      	adds	r3, #1
 801d018:	61fb      	str	r3, [r7, #28]
 801d01a:	69fa      	ldr	r2, [r7, #28]
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	429a      	cmp	r2, r3
 801d020:	dbf3      	blt.n	801d00a <fp_div_2+0x9c>
    }
  }
  b->sign = a->sign;
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	685a      	ldr	r2, [r3, #4]
 801d026:	683b      	ldr	r3, [r7, #0]
 801d028:	605a      	str	r2, [r3, #4]
  fp_clamp (b);
 801d02a:	e004      	b.n	801d036 <fp_div_2+0xc8>
 801d02c:	683b      	ldr	r3, [r7, #0]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	1e5a      	subs	r2, r3, #1
 801d032:	683b      	ldr	r3, [r7, #0]
 801d034:	601a      	str	r2, [r3, #0]
 801d036:	683b      	ldr	r3, [r7, #0]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d009      	beq.n	801d052 <fp_div_2+0xe4>
 801d03e:	683b      	ldr	r3, [r7, #0]
 801d040:	681b      	ldr	r3, [r3, #0]
 801d042:	3b01      	subs	r3, #1
 801d044:	683a      	ldr	r2, [r7, #0]
 801d046:	3302      	adds	r3, #2
 801d048:	009b      	lsls	r3, r3, #2
 801d04a:	4413      	add	r3, r2
 801d04c:	685b      	ldr	r3, [r3, #4]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d0ec      	beq.n	801d02c <fp_div_2+0xbe>
 801d052:	683b      	ldr	r3, [r7, #0]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	2b00      	cmp	r3, #0
 801d058:	d002      	beq.n	801d060 <fp_div_2+0xf2>
 801d05a:	683b      	ldr	r3, [r7, #0]
 801d05c:	685b      	ldr	r3, [r3, #4]
 801d05e:	e000      	b.n	801d062 <fp_div_2+0xf4>
 801d060:	2300      	movs	r3, #0
 801d062:	683a      	ldr	r2, [r7, #0]
 801d064:	6053      	str	r3, [r2, #4]
}
 801d066:	bf00      	nop
 801d068:	3724      	adds	r7, #36	; 0x24
 801d06a:	46bd      	mov	sp, r7
 801d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d070:	4770      	bx	lr

0801d072 <fp_div_2_mod_ct>:

/* c = a / 2 (mod b) - constant time (a < b and positive) */
int fp_div_2_mod_ct(fp_int *a, fp_int *b, fp_int *c)
{
 801d072:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801d076:	b08d      	sub	sp, #52	; 0x34
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6178      	str	r0, [r7, #20]
 801d07c:	6139      	str	r1, [r7, #16]
 801d07e:	60fa      	str	r2, [r7, #12]
  fp_word  w = 0;
 801d080:	f04f 0200 	mov.w	r2, #0
 801d084:	f04f 0300 	mov.w	r3, #0
 801d088:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  fp_digit mask;
  int i;

  mask = 0 - (a->dp[0] & 1);
 801d08c:	697b      	ldr	r3, [r7, #20]
 801d08e:	68db      	ldr	r3, [r3, #12]
 801d090:	f003 0301 	and.w	r3, r3, #1
 801d094:	425b      	negs	r3, r3
 801d096:	623b      	str	r3, [r7, #32]
  for (i = 0; i < b->used; i++) {
 801d098:	2300      	movs	r3, #0
 801d09a:	627b      	str	r3, [r7, #36]	; 0x24
 801d09c:	e047      	b.n	801d12e <fp_div_2_mod_ct+0xbc>
      fp_digit mask_a = 0 - (i < a->used);
 801d09e:	697b      	ldr	r3, [r7, #20]
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	bfb4      	ite	lt
 801d0a8:	2301      	movlt	r3, #1
 801d0aa:	2300      	movge	r3, #0
 801d0ac:	b2db      	uxtb	r3, r3
 801d0ae:	425b      	negs	r3, r3
 801d0b0:	61fb      	str	r3, [r7, #28]

      w         += b->dp[i] & mask;
 801d0b2:	693a      	ldr	r2, [r7, #16]
 801d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0b6:	3302      	adds	r3, #2
 801d0b8:	009b      	lsls	r3, r3, #2
 801d0ba:	4413      	add	r3, r2
 801d0bc:	685a      	ldr	r2, [r3, #4]
 801d0be:	6a3b      	ldr	r3, [r7, #32]
 801d0c0:	4013      	ands	r3, r2
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	461c      	mov	r4, r3
 801d0c6:	4615      	mov	r5, r2
 801d0c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d0cc:	eb12 0a04 	adds.w	sl, r2, r4
 801d0d0:	eb43 0b05 	adc.w	fp, r3, r5
 801d0d4:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
      w         += a->dp[i] & mask_a;
 801d0d8:	697a      	ldr	r2, [r7, #20]
 801d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0dc:	3302      	adds	r3, #2
 801d0de:	009b      	lsls	r3, r3, #2
 801d0e0:	4413      	add	r3, r2
 801d0e2:	685a      	ldr	r2, [r3, #4]
 801d0e4:	69fb      	ldr	r3, [r7, #28]
 801d0e6:	4013      	ands	r3, r2
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	4698      	mov	r8, r3
 801d0ec:	4691      	mov	r9, r2
 801d0ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d0f2:	eb12 0108 	adds.w	r1, r2, r8
 801d0f6:	6039      	str	r1, [r7, #0]
 801d0f8:	eb43 0309 	adc.w	r3, r3, r9
 801d0fc:	607b      	str	r3, [r7, #4]
 801d0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d102:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      c->dp[i]   = (fp_digit)w;
 801d106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d108:	68f9      	ldr	r1, [r7, #12]
 801d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d10c:	3302      	adds	r3, #2
 801d10e:	009b      	lsls	r3, r3, #2
 801d110:	440b      	add	r3, r1
 801d112:	605a      	str	r2, [r3, #4]
      w        >>= DIGIT_BIT;
 801d114:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d118:	f04f 0200 	mov.w	r2, #0
 801d11c:	f04f 0300 	mov.w	r3, #0
 801d120:	000a      	movs	r2, r1
 801d122:	2300      	movs	r3, #0
 801d124:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (i = 0; i < b->used; i++) {
 801d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d12a:	3301      	adds	r3, #1
 801d12c:	627b      	str	r3, [r7, #36]	; 0x24
 801d12e:	693b      	ldr	r3, [r7, #16]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d134:	429a      	cmp	r2, r3
 801d136:	dbb2      	blt.n	801d09e <fp_div_2_mod_ct+0x2c>
  }
  for (i = 0; i < b->used-1; i++) {
 801d138:	2300      	movs	r3, #0
 801d13a:	627b      	str	r3, [r7, #36]	; 0x24
 801d13c:	e018      	b.n	801d170 <fp_div_2_mod_ct+0xfe>
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 801d13e:	68fa      	ldr	r2, [r7, #12]
 801d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d142:	3302      	adds	r3, #2
 801d144:	009b      	lsls	r3, r3, #2
 801d146:	4413      	add	r3, r2
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	085a      	lsrs	r2, r3, #1
 801d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d14e:	3301      	adds	r3, #1
 801d150:	68f9      	ldr	r1, [r7, #12]
 801d152:	3302      	adds	r3, #2
 801d154:	009b      	lsls	r3, r3, #2
 801d156:	440b      	add	r3, r1
 801d158:	685b      	ldr	r3, [r3, #4]
 801d15a:	07db      	lsls	r3, r3, #31
 801d15c:	431a      	orrs	r2, r3
 801d15e:	68f9      	ldr	r1, [r7, #12]
 801d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d162:	3302      	adds	r3, #2
 801d164:	009b      	lsls	r3, r3, #2
 801d166:	440b      	add	r3, r1
 801d168:	605a      	str	r2, [r3, #4]
  for (i = 0; i < b->used-1; i++) {
 801d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d16c:	3301      	adds	r3, #1
 801d16e:	627b      	str	r3, [r7, #36]	; 0x24
 801d170:	693b      	ldr	r3, [r7, #16]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	3b01      	subs	r3, #1
 801d176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d178:	429a      	cmp	r2, r3
 801d17a:	dbe0      	blt.n	801d13e <fp_div_2_mod_ct+0xcc>
  }
  c->dp[i] = (c->dp[i] >> 1) | ((fp_digit)w << (DIGIT_BIT - 1));
 801d17c:	68fa      	ldr	r2, [r7, #12]
 801d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d180:	3302      	adds	r3, #2
 801d182:	009b      	lsls	r3, r3, #2
 801d184:	4413      	add	r3, r2
 801d186:	685b      	ldr	r3, [r3, #4]
 801d188:	085a      	lsrs	r2, r3, #1
 801d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d18c:	07db      	lsls	r3, r3, #31
 801d18e:	431a      	orrs	r2, r3
 801d190:	68f9      	ldr	r1, [r7, #12]
 801d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d194:	3302      	adds	r3, #2
 801d196:	009b      	lsls	r3, r3, #2
 801d198:	440b      	add	r3, r1
 801d19a:	605a      	str	r2, [r3, #4]
  c->used = i + 1;
 801d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19e:	1c5a      	adds	r2, r3, #1
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	601a      	str	r2, [r3, #0]
  c->sign = FP_ZPOS;
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	605a      	str	r2, [r3, #4]
  fp_clamp(c);
 801d1aa:	e004      	b.n	801d1b6 <fp_div_2_mod_ct+0x144>
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	1e5a      	subs	r2, r3, #1
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	601a      	str	r2, [r3, #0]
 801d1b6:	68fb      	ldr	r3, [r7, #12]
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d009      	beq.n	801d1d2 <fp_div_2_mod_ct+0x160>
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	3b01      	subs	r3, #1
 801d1c4:	68fa      	ldr	r2, [r7, #12]
 801d1c6:	3302      	adds	r3, #2
 801d1c8:	009b      	lsls	r3, r3, #2
 801d1ca:	4413      	add	r3, r2
 801d1cc:	685b      	ldr	r3, [r3, #4]
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d0ec      	beq.n	801d1ac <fp_div_2_mod_ct+0x13a>
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d002      	beq.n	801d1e0 <fp_div_2_mod_ct+0x16e>
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	685b      	ldr	r3, [r3, #4]
 801d1de:	e000      	b.n	801d1e2 <fp_div_2_mod_ct+0x170>
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	68fa      	ldr	r2, [r7, #12]
 801d1e4:	6053      	str	r3, [r2, #4]

  return FP_OKAY;
 801d1e6:	2300      	movs	r3, #0
}
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	3734      	adds	r7, #52	; 0x34
 801d1ec:	46bd      	mov	sp, r7
 801d1ee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801d1f2:	4770      	bx	lr

0801d1f4 <fp_div_2d>:

/* c = a / 2**b */
void fp_div_2d(fp_int *a, int b, fp_int *c, fp_int *d)
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b086      	sub	sp, #24
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	60f8      	str	r0, [r7, #12]
 801d1fc:	60b9      	str	r1, [r7, #8]
 801d1fe:	607a      	str	r2, [r7, #4]
 801d200:	603b      	str	r3, [r7, #0]
  int      D;

  /* if the shift count is <= 0 then we do no work */
  if (b <= 0) {
 801d202:	68bb      	ldr	r3, [r7, #8]
 801d204:	2b00      	cmp	r3, #0
 801d206:	dc0a      	bgt.n	801d21e <fp_div_2d+0x2a>
    fp_copy (a, c);
 801d208:	6879      	ldr	r1, [r7, #4]
 801d20a:	68f8      	ldr	r0, [r7, #12]
 801d20c:	f003 fa22 	bl	8020654 <fp_copy>
    if (d != NULL) {
 801d210:	683b      	ldr	r3, [r7, #0]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d05a      	beq.n	801d2cc <fp_div_2d+0xd8>
      fp_zero (d);
 801d216:	6838      	ldr	r0, [r7, #0]
 801d218:	f003 f847 	bl	80202aa <fp_zero>
    }
    return;
 801d21c:	e056      	b.n	801d2cc <fp_div_2d+0xd8>
  }

  /* get the remainder before a is changed in calculating c */
  if (a == c && d != NULL) {
 801d21e:	68fa      	ldr	r2, [r7, #12]
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	429a      	cmp	r2, r3
 801d224:	d107      	bne.n	801d236 <fp_div_2d+0x42>
 801d226:	683b      	ldr	r3, [r7, #0]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d004      	beq.n	801d236 <fp_div_2d+0x42>
    fp_mod_2d (a, b, d);
 801d22c:	683a      	ldr	r2, [r7, #0]
 801d22e:	68b9      	ldr	r1, [r7, #8]
 801d230:	68f8      	ldr	r0, [r7, #12]
 801d232:	f000 f88f 	bl	801d354 <fp_mod_2d>
  }

  /* copy */
  fp_copy(a, c);
 801d236:	6879      	ldr	r1, [r7, #4]
 801d238:	68f8      	ldr	r0, [r7, #12]
 801d23a:	f003 fa0b 	bl	8020654 <fp_copy>

  /* shift by as many digits in the bit count */
  if (b >= (int)DIGIT_BIT) {
 801d23e:	68bb      	ldr	r3, [r7, #8]
 801d240:	2b1f      	cmp	r3, #31
 801d242:	dd08      	ble.n	801d256 <fp_div_2d+0x62>
    fp_rshd (c, b / DIGIT_BIT);
 801d244:	68bb      	ldr	r3, [r7, #8]
 801d246:	2b00      	cmp	r3, #0
 801d248:	da00      	bge.n	801d24c <fp_div_2d+0x58>
 801d24a:	331f      	adds	r3, #31
 801d24c:	115b      	asrs	r3, r3, #5
 801d24e:	4619      	mov	r1, r3
 801d250:	6878      	ldr	r0, [r7, #4]
 801d252:	f002 ff71 	bl	8020138 <fp_rshd>
  }

  /* shift any bit count < DIGIT_BIT */
  D = (b % DIGIT_BIT);
 801d256:	68bb      	ldr	r3, [r7, #8]
 801d258:	425a      	negs	r2, r3
 801d25a:	f003 031f 	and.w	r3, r3, #31
 801d25e:	f002 021f 	and.w	r2, r2, #31
 801d262:	bf58      	it	pl
 801d264:	4253      	negpl	r3, r2
 801d266:	617b      	str	r3, [r7, #20]
  if (D != 0) {
 801d268:	697b      	ldr	r3, [r7, #20]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d003      	beq.n	801d276 <fp_div_2d+0x82>
    fp_rshb(c, D);
 801d26e:	6979      	ldr	r1, [r7, #20]
 801d270:	6878      	ldr	r0, [r7, #4]
 801d272:	f002 fedd 	bl	8020030 <fp_rshb>
  }

  /* get the remainder if a is not changed in calculating c */
  if (a != c && d != NULL) {
 801d276:	68fa      	ldr	r2, [r7, #12]
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	429a      	cmp	r2, r3
 801d27c:	d00d      	beq.n	801d29a <fp_div_2d+0xa6>
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d00a      	beq.n	801d29a <fp_div_2d+0xa6>
    fp_mod_2d (a, b, d);
 801d284:	683a      	ldr	r2, [r7, #0]
 801d286:	68b9      	ldr	r1, [r7, #8]
 801d288:	68f8      	ldr	r0, [r7, #12]
 801d28a:	f000 f863 	bl	801d354 <fp_mod_2d>
  }

  fp_clamp (c);
 801d28e:	e004      	b.n	801d29a <fp_div_2d+0xa6>
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	1e5a      	subs	r2, r3, #1
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	601a      	str	r2, [r3, #0]
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	681b      	ldr	r3, [r3, #0]
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d009      	beq.n	801d2b6 <fp_div_2d+0xc2>
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	3b01      	subs	r3, #1
 801d2a8:	687a      	ldr	r2, [r7, #4]
 801d2aa:	3302      	adds	r3, #2
 801d2ac:	009b      	lsls	r3, r3, #2
 801d2ae:	4413      	add	r3, r2
 801d2b0:	685b      	ldr	r3, [r3, #4]
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d0ec      	beq.n	801d290 <fp_div_2d+0x9c>
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d002      	beq.n	801d2c4 <fp_div_2d+0xd0>
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	685b      	ldr	r3, [r3, #4]
 801d2c2:	e000      	b.n	801d2c6 <fp_div_2d+0xd2>
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	687a      	ldr	r2, [r7, #4]
 801d2c8:	6053      	str	r3, [r2, #4]
 801d2ca:	e000      	b.n	801d2ce <fp_div_2d+0xda>
    return;
 801d2cc:	bf00      	nop
}
 801d2ce:	3718      	adds	r7, #24
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}

0801d2d4 <fp_mod>:

/* c = a mod b, 0 <= c < b  */
int fp_mod(fp_int *a, fp_int *b, fp_int *c)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b088      	sub	sp, #32
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	60f8      	str	r0, [r7, #12]
 801d2dc:	60b9      	str	r1, [r7, #8]
 801d2de:	607a      	str	r2, [r7, #4]
   fp_int *t;
#endif
   int    err;

#ifdef WOLFSSL_SMALL_STACK
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801d2e0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801d2e4:	f7fb fc62 	bl	8018bac <wolfSSL_Malloc>
 801d2e8:	61b8      	str	r0, [r7, #24]
   if (t == NULL)
 801d2ea:	69bb      	ldr	r3, [r7, #24]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d102      	bne.n	801d2f6 <fp_mod+0x22>
       return FP_MEM;
 801d2f0:	f06f 0301 	mvn.w	r3, #1
 801d2f4:	e02a      	b.n	801d34c <fp_mod+0x78>
#endif

   fp_init(t);
 801d2f6:	69b8      	ldr	r0, [r7, #24]
 801d2f8:	f002 ffc9 	bl	802028e <fp_init>
   err = fp_div(a, b, NULL, t);
 801d2fc:	69bb      	ldr	r3, [r7, #24]
 801d2fe:	2200      	movs	r2, #0
 801d300:	68b9      	ldr	r1, [r7, #8]
 801d302:	68f8      	ldr	r0, [r7, #12]
 801d304:	f7ff fb44 	bl	801c990 <fp_div>
 801d308:	61f8      	str	r0, [r7, #28]
   if (err == FP_OKAY) {
 801d30a:	69fb      	ldr	r3, [r7, #28]
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	d114      	bne.n	801d33a <fp_mod+0x66>
      if (!fp_iszero(t) && (t->sign != b->sign)) {
 801d310:	69bb      	ldr	r3, [r7, #24]
 801d312:	681b      	ldr	r3, [r3, #0]
 801d314:	2b00      	cmp	r3, #0
 801d316:	d00c      	beq.n	801d332 <fp_mod+0x5e>
 801d318:	69bb      	ldr	r3, [r7, #24]
 801d31a:	685a      	ldr	r2, [r3, #4]
 801d31c:	68bb      	ldr	r3, [r7, #8]
 801d31e:	685b      	ldr	r3, [r3, #4]
 801d320:	429a      	cmp	r2, r3
 801d322:	d006      	beq.n	801d332 <fp_mod+0x5e>
         err = fp_add(t, b, c);
 801d324:	687a      	ldr	r2, [r7, #4]
 801d326:	68b9      	ldr	r1, [r7, #8]
 801d328:	69b8      	ldr	r0, [r7, #24]
 801d32a:	f7fe fe5a 	bl	801bfe2 <fp_add>
 801d32e:	61f8      	str	r0, [r7, #28]
 801d330:	e003      	b.n	801d33a <fp_mod+0x66>
      } else {
         fp_copy(t, c);
 801d332:	6879      	ldr	r1, [r7, #4]
 801d334:	69b8      	ldr	r0, [r7, #24]
 801d336:	f003 f98d 	bl	8020654 <fp_copy>
     }
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801d33a:	69bb      	ldr	r3, [r7, #24]
 801d33c:	617b      	str	r3, [r7, #20]
 801d33e:	697b      	ldr	r3, [r7, #20]
 801d340:	2b00      	cmp	r3, #0
 801d342:	d002      	beq.n	801d34a <fp_mod+0x76>
 801d344:	6978      	ldr	r0, [r7, #20]
 801d346:	f7fb fc4d 	bl	8018be4 <wolfSSL_Free>
#endif
  return err;
 801d34a:	69fb      	ldr	r3, [r7, #28]
}
 801d34c:	4618      	mov	r0, r3
 801d34e:	3720      	adds	r7, #32
 801d350:	46bd      	mov	sp, r7
 801d352:	bd80      	pop	{r7, pc}

0801d354 <fp_mod_2d>:

/* c = a mod 2**d */
void fp_mod_2d(fp_int *a, int b, fp_int *c)
{
 801d354:	b580      	push	{r7, lr}
 801d356:	b088      	sub	sp, #32
 801d358:	af00      	add	r7, sp, #0
 801d35a:	60f8      	str	r0, [r7, #12]
 801d35c:	60b9      	str	r1, [r7, #8]
 801d35e:	607a      	str	r2, [r7, #4]
   unsigned int x;
   unsigned int bmax;

   /* zero if count less than or equal to zero */
   if (b <= 0) {
 801d360:	68bb      	ldr	r3, [r7, #8]
 801d362:	2b00      	cmp	r3, #0
 801d364:	dc03      	bgt.n	801d36e <fp_mod_2d+0x1a>
      fp_zero(c);
 801d366:	6878      	ldr	r0, [r7, #4]
 801d368:	f002 ff9f 	bl	80202aa <fp_zero>
      return;
 801d36c:	e0ad      	b.n	801d4ca <fp_mod_2d+0x176>
   }

   /* get copy of input */
   fp_copy(a, c);
 801d36e:	6879      	ldr	r1, [r7, #4]
 801d370:	68f8      	ldr	r0, [r7, #12]
 801d372:	f003 f96f 	bl	8020654 <fp_copy>

   /* if 2**d is larger than we just return */
   if (c->sign == FP_ZPOS && b >= (DIGIT_BIT * a->used)) {
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	685b      	ldr	r3, [r3, #4]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d106      	bne.n	801d38c <fp_mod_2d+0x38>
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	015b      	lsls	r3, r3, #5
 801d384:	68ba      	ldr	r2, [r7, #8]
 801d386:	429a      	cmp	r2, r3
 801d388:	f280 809e 	bge.w	801d4c8 <fp_mod_2d+0x174>
      return;
   }

   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 801d38c:	68bb      	ldr	r3, [r7, #8]
 801d38e:	331f      	adds	r3, #31
 801d390:	095b      	lsrs	r3, r3, #5
 801d392:	617b      	str	r3, [r7, #20]
  /* zero digits above the last digit of the modulus */
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801d394:	697b      	ldr	r3, [r7, #20]
 801d396:	61fb      	str	r3, [r7, #28]
 801d398:	e009      	b.n	801d3ae <fp_mod_2d+0x5a>
    c->dp[x] = 0;
 801d39a:	687a      	ldr	r2, [r7, #4]
 801d39c:	69fb      	ldr	r3, [r7, #28]
 801d39e:	3302      	adds	r3, #2
 801d3a0:	009b      	lsls	r3, r3, #2
 801d3a2:	4413      	add	r3, r2
 801d3a4:	2200      	movs	r2, #0
 801d3a6:	605a      	str	r2, [r3, #4]
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801d3a8:	69fb      	ldr	r3, [r7, #28]
 801d3aa:	3301      	adds	r3, #1
 801d3ac:	61fb      	str	r3, [r7, #28]
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	461a      	mov	r2, r3
 801d3b4:	69fb      	ldr	r3, [r7, #28]
 801d3b6:	4293      	cmp	r3, r2
 801d3b8:	d3ef      	bcc.n	801d39a <fp_mod_2d+0x46>
  }

  if (c->sign == FP_NEG) {
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	685b      	ldr	r3, [r3, #4]
 801d3be:	2b01      	cmp	r3, #1
 801d3c0:	d142      	bne.n	801d448 <fp_mod_2d+0xf4>
     fp_digit carry = 0;
 801d3c2:	2300      	movs	r3, #0
 801d3c4:	61bb      	str	r3, [r7, #24]
     /* negate value */
     for (x = 0; x < (unsigned int)c->used; x++) {
 801d3c6:	2300      	movs	r3, #0
 801d3c8:	61fb      	str	r3, [r7, #28]
 801d3ca:	e021      	b.n	801d410 <fp_mod_2d+0xbc>
         fp_digit next = c->dp[x] > 0;
 801d3cc:	687a      	ldr	r2, [r7, #4]
 801d3ce:	69fb      	ldr	r3, [r7, #28]
 801d3d0:	3302      	adds	r3, #2
 801d3d2:	009b      	lsls	r3, r3, #2
 801d3d4:	4413      	add	r3, r2
 801d3d6:	685b      	ldr	r3, [r3, #4]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	bf14      	ite	ne
 801d3dc:	2301      	movne	r3, #1
 801d3de:	2300      	moveq	r3, #0
 801d3e0:	b2db      	uxtb	r3, r3
 801d3e2:	613b      	str	r3, [r7, #16]
         c->dp[x] = (fp_digit)0 - c->dp[x] - carry;
 801d3e4:	687a      	ldr	r2, [r7, #4]
 801d3e6:	69fb      	ldr	r3, [r7, #28]
 801d3e8:	3302      	adds	r3, #2
 801d3ea:	009b      	lsls	r3, r3, #2
 801d3ec:	4413      	add	r3, r2
 801d3ee:	685b      	ldr	r3, [r3, #4]
 801d3f0:	425a      	negs	r2, r3
 801d3f2:	69bb      	ldr	r3, [r7, #24]
 801d3f4:	1ad2      	subs	r2, r2, r3
 801d3f6:	6879      	ldr	r1, [r7, #4]
 801d3f8:	69fb      	ldr	r3, [r7, #28]
 801d3fa:	3302      	adds	r3, #2
 801d3fc:	009b      	lsls	r3, r3, #2
 801d3fe:	440b      	add	r3, r1
 801d400:	605a      	str	r2, [r3, #4]
         carry |= next;
 801d402:	69ba      	ldr	r2, [r7, #24]
 801d404:	693b      	ldr	r3, [r7, #16]
 801d406:	4313      	orrs	r3, r2
 801d408:	61bb      	str	r3, [r7, #24]
     for (x = 0; x < (unsigned int)c->used; x++) {
 801d40a:	69fb      	ldr	r3, [r7, #28]
 801d40c:	3301      	adds	r3, #1
 801d40e:	61fb      	str	r3, [r7, #28]
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	461a      	mov	r2, r3
 801d416:	69fb      	ldr	r3, [r7, #28]
 801d418:	4293      	cmp	r3, r2
 801d41a:	d3d7      	bcc.n	801d3cc <fp_mod_2d+0x78>
     }
     for (; x < bmax; x++) {
 801d41c:	e00a      	b.n	801d434 <fp_mod_2d+0xe0>
         c->dp[x] = (fp_digit)0 - carry;
 801d41e:	69bb      	ldr	r3, [r7, #24]
 801d420:	425a      	negs	r2, r3
 801d422:	6879      	ldr	r1, [r7, #4]
 801d424:	69fb      	ldr	r3, [r7, #28]
 801d426:	3302      	adds	r3, #2
 801d428:	009b      	lsls	r3, r3, #2
 801d42a:	440b      	add	r3, r1
 801d42c:	605a      	str	r2, [r3, #4]
     for (; x < bmax; x++) {
 801d42e:	69fb      	ldr	r3, [r7, #28]
 801d430:	3301      	adds	r3, #1
 801d432:	61fb      	str	r3, [r7, #28]
 801d434:	69fa      	ldr	r2, [r7, #28]
 801d436:	697b      	ldr	r3, [r7, #20]
 801d438:	429a      	cmp	r2, r3
 801d43a:	d3f0      	bcc.n	801d41e <fp_mod_2d+0xca>
     }
     c->used = (int)bmax;
 801d43c:	697a      	ldr	r2, [r7, #20]
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	601a      	str	r2, [r3, #0]
     c->sign = FP_ZPOS;
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	2200      	movs	r2, #0
 801d446:	605a      	str	r2, [r3, #4]
  }

  /* clear the digit that is not completely outside/inside the modulus */
  x = DIGIT_BIT - (b % DIGIT_BIT);
 801d448:	68bb      	ldr	r3, [r7, #8]
 801d44a:	425a      	negs	r2, r3
 801d44c:	f003 031f 	and.w	r3, r3, #31
 801d450:	f002 021f 	and.w	r2, r2, #31
 801d454:	bf58      	it	pl
 801d456:	4253      	negpl	r3, r2
 801d458:	f1c3 0320 	rsb	r3, r3, #32
 801d45c:	61fb      	str	r3, [r7, #28]
  if (x != DIGIT_BIT) {
 801d45e:	69fb      	ldr	r3, [r7, #28]
 801d460:	2b20      	cmp	r3, #32
 801d462:	d018      	beq.n	801d496 <fp_mod_2d+0x142>
     c->dp[bmax - 1] &= ~((fp_digit)0) >> x;
 801d464:	697b      	ldr	r3, [r7, #20]
 801d466:	3b01      	subs	r3, #1
 801d468:	687a      	ldr	r2, [r7, #4]
 801d46a:	3302      	adds	r3, #2
 801d46c:	009b      	lsls	r3, r3, #2
 801d46e:	4413      	add	r3, r2
 801d470:	6859      	ldr	r1, [r3, #4]
 801d472:	f04f 32ff 	mov.w	r2, #4294967295
 801d476:	69fb      	ldr	r3, [r7, #28]
 801d478:	40da      	lsrs	r2, r3
 801d47a:	697b      	ldr	r3, [r7, #20]
 801d47c:	3b01      	subs	r3, #1
 801d47e:	400a      	ands	r2, r1
 801d480:	6879      	ldr	r1, [r7, #4]
 801d482:	3302      	adds	r3, #2
 801d484:	009b      	lsls	r3, r3, #2
 801d486:	440b      	add	r3, r1
 801d488:	605a      	str	r2, [r3, #4]
  }

  fp_clamp (c);
 801d48a:	e004      	b.n	801d496 <fp_mod_2d+0x142>
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	1e5a      	subs	r2, r3, #1
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	601a      	str	r2, [r3, #0]
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d009      	beq.n	801d4b2 <fp_mod_2d+0x15e>
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	3b01      	subs	r3, #1
 801d4a4:	687a      	ldr	r2, [r7, #4]
 801d4a6:	3302      	adds	r3, #2
 801d4a8:	009b      	lsls	r3, r3, #2
 801d4aa:	4413      	add	r3, r2
 801d4ac:	685b      	ldr	r3, [r3, #4]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d0ec      	beq.n	801d48c <fp_mod_2d+0x138>
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d002      	beq.n	801d4c0 <fp_mod_2d+0x16c>
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	685b      	ldr	r3, [r3, #4]
 801d4be:	e000      	b.n	801d4c2 <fp_mod_2d+0x16e>
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	687a      	ldr	r2, [r7, #4]
 801d4c4:	6053      	str	r3, [r2, #4]
 801d4c6:	e000      	b.n	801d4ca <fp_mod_2d+0x176>
      return;
 801d4c8:	bf00      	nop
}
 801d4ca:	3720      	adds	r7, #32
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	bd80      	pop	{r7, pc}

0801d4d0 <fp_invmod_slow>:

static int fp_invmod_slow (fp_int * a, fp_int * b, fp_int * c)
{
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b09e      	sub	sp, #120	; 0x78
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	60f8      	str	r0, [r7, #12]
 801d4d8:	60b9      	str	r1, [r7, #8]
 801d4da:	607a      	str	r2, [r7, #4]
  fp_int  *x, *y, *u, *v, *A, *B, *C, *D;
#endif
  int     err;

  /* b cannot be negative */
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 801d4dc:	68bb      	ldr	r3, [r7, #8]
 801d4de:	685b      	ldr	r3, [r3, #4]
 801d4e0:	2b01      	cmp	r3, #1
 801d4e2:	d003      	beq.n	801d4ec <fp_invmod_slow+0x1c>
 801d4e4:	68bb      	ldr	r3, [r7, #8]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d102      	bne.n	801d4f2 <fp_invmod_slow+0x22>
    return FP_VAL;
 801d4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801d4f0:	e22a      	b.n	801d948 <fp_invmod_slow+0x478>
  }
  if (fp_iszero(a) == FP_YES) {
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d102      	bne.n	801d500 <fp_invmod_slow+0x30>
    return FP_VAL;
 801d4fa:	f04f 33ff 	mov.w	r3, #4294967295
 801d4fe:	e223      	b.n	801d948 <fp_invmod_slow+0x478>
  }

#ifdef WOLFSSL_SMALL_STACK
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 8, NULL, DYNAMIC_TYPE_BIGINT);
 801d500:	f44f 508b 	mov.w	r0, #4448	; 0x1160
 801d504:	f7fb fb52 	bl	8018bac <wolfSSL_Malloc>
 801d508:	6778      	str	r0, [r7, #116]	; 0x74
  if (x == NULL) {
 801d50a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d102      	bne.n	801d516 <fp_invmod_slow+0x46>
      return FP_MEM;
 801d510:	f06f 0301 	mvn.w	r3, #1
 801d514:	e218      	b.n	801d948 <fp_invmod_slow+0x478>
  }
  y = &x[1]; u = &x[2]; v = &x[3]; A = &x[4]; B = &x[5]; C = &x[6]; D = &x[7];
 801d516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d518:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801d51c:	673b      	str	r3, [r7, #112]	; 0x70
 801d51e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d520:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801d524:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d528:	f203 6384 	addw	r3, r3, #1668	; 0x684
 801d52c:	66bb      	str	r3, [r7, #104]	; 0x68
 801d52e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d530:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801d534:	667b      	str	r3, [r7, #100]	; 0x64
 801d536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d538:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 801d53c:	663b      	str	r3, [r7, #96]	; 0x60
 801d53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d540:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 801d544:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d548:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 801d54c:	65bb      	str	r3, [r7, #88]	; 0x58
#endif

  /* init temps */
  fp_init(x);    fp_init(y);
 801d54e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d550:	f002 fe9d 	bl	802028e <fp_init>
 801d554:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801d556:	f002 fe9a 	bl	802028e <fp_init>
  fp_init(u);    fp_init(v);
 801d55a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d55c:	f002 fe97 	bl	802028e <fp_init>
 801d560:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d562:	f002 fe94 	bl	802028e <fp_init>
  fp_init(A);    fp_init(B);
 801d566:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d568:	f002 fe91 	bl	802028e <fp_init>
 801d56c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d56e:	f002 fe8e 	bl	802028e <fp_init>
  fp_init(C);    fp_init(D);
 801d572:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d574:	f002 fe8b 	bl	802028e <fp_init>
 801d578:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d57a:	f002 fe88 	bl	802028e <fp_init>

  /* x = a, y = b */
  if ((err = fp_mod(a, b, x)) != FP_OKAY) {
 801d57e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d580:	68b9      	ldr	r1, [r7, #8]
 801d582:	68f8      	ldr	r0, [r7, #12]
 801d584:	f7ff fea6 	bl	801d2d4 <fp_mod>
 801d588:	6578      	str	r0, [r7, #84]	; 0x54
 801d58a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d009      	beq.n	801d5a4 <fp_invmod_slow+0xd4>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d592:	617b      	str	r3, [r7, #20]
 801d594:	697b      	ldr	r3, [r7, #20]
 801d596:	2b00      	cmp	r3, #0
 801d598:	d002      	beq.n	801d5a0 <fp_invmod_slow+0xd0>
 801d59a:	6978      	ldr	r0, [r7, #20]
 801d59c:	f7fb fb22 	bl	8018be4 <wolfSSL_Free>
  #endif
    return err;
 801d5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d5a2:	e1d1      	b.n	801d948 <fp_invmod_slow+0x478>
  }
  fp_copy(b, y);
 801d5a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d5a6:	68b8      	ldr	r0, [r7, #8]
 801d5a8:	f003 f854 	bl	8020654 <fp_copy>

  /* 2. [modified] if x,y are both even then return an error! */
  if (fp_iseven(x) == FP_YES && fp_iseven(y) == FP_YES) {
 801d5ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	dd07      	ble.n	801d5c4 <fp_invmod_slow+0xf4>
 801d5b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5b6:	68db      	ldr	r3, [r3, #12]
 801d5b8:	f003 0301 	and.w	r3, r3, #1
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d101      	bne.n	801d5c4 <fp_invmod_slow+0xf4>
 801d5c0:	2301      	movs	r3, #1
 801d5c2:	e000      	b.n	801d5c6 <fp_invmod_slow+0xf6>
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	2b01      	cmp	r3, #1
 801d5c8:	d119      	bne.n	801d5fe <fp_invmod_slow+0x12e>
 801d5ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	dd07      	ble.n	801d5e2 <fp_invmod_slow+0x112>
 801d5d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d5d4:	68db      	ldr	r3, [r3, #12]
 801d5d6:	f003 0301 	and.w	r3, r3, #1
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d101      	bne.n	801d5e2 <fp_invmod_slow+0x112>
 801d5de:	2301      	movs	r3, #1
 801d5e0:	e000      	b.n	801d5e4 <fp_invmod_slow+0x114>
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	2b01      	cmp	r3, #1
 801d5e6:	d10a      	bne.n	801d5fe <fp_invmod_slow+0x12e>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d5e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5ea:	653b      	str	r3, [r7, #80]	; 0x50
 801d5ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d002      	beq.n	801d5f8 <fp_invmod_slow+0x128>
 801d5f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801d5f4:	f7fb faf6 	bl	8018be4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 801d5f8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5fc:	e1a4      	b.n	801d948 <fp_invmod_slow+0x478>
  }

  /* 3. u=x, v=y, A=1, B=0, C=0,D=1 */
  fp_copy (x, u);
 801d5fe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801d600:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d602:	f003 f827 	bl	8020654 <fp_copy>
  fp_copy (y, v);
 801d606:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d608:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801d60a:	f003 f823 	bl	8020654 <fp_copy>
  fp_set (A, 1);
 801d60e:	2101      	movs	r1, #1
 801d610:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d612:	f002 fc40 	bl	801fe96 <fp_set>
  fp_set (D, 1);
 801d616:	2101      	movs	r1, #1
 801d618:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d61a:	f002 fc3c 	bl	801fe96 <fp_set>

top:
  /* 4.  while u is even do */
  while (fp_iseven (u) == FP_YES) {
 801d61e:	e04f      	b.n	801d6c0 <fp_invmod_slow+0x1f0>
    /* 4.1 u = u/2 */
    fp_div_2 (u, u);
 801d620:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801d622:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d624:	f7ff fca3 	bl	801cf6e <fp_div_2>

    /* 4.2 if A or B is odd then */
    if (fp_isodd (A) == FP_YES || fp_isodd (B) == FP_YES) {
 801d628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	dd07      	ble.n	801d640 <fp_invmod_slow+0x170>
 801d630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d632:	68db      	ldr	r3, [r3, #12]
 801d634:	f003 0301 	and.w	r3, r3, #1
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d001      	beq.n	801d640 <fp_invmod_slow+0x170>
 801d63c:	2301      	movs	r3, #1
 801d63e:	e000      	b.n	801d642 <fp_invmod_slow+0x172>
 801d640:	2300      	movs	r3, #0
 801d642:	2b01      	cmp	r3, #1
 801d644:	d00e      	beq.n	801d664 <fp_invmod_slow+0x194>
 801d646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	dd07      	ble.n	801d65e <fp_invmod_slow+0x18e>
 801d64e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d650:	68db      	ldr	r3, [r3, #12]
 801d652:	f003 0301 	and.w	r3, r3, #1
 801d656:	2b00      	cmp	r3, #0
 801d658:	d001      	beq.n	801d65e <fp_invmod_slow+0x18e>
 801d65a:	2301      	movs	r3, #1
 801d65c:	e000      	b.n	801d660 <fp_invmod_slow+0x190>
 801d65e:	2300      	movs	r3, #0
 801d660:	2b01      	cmp	r3, #1
 801d662:	d125      	bne.n	801d6b0 <fp_invmod_slow+0x1e0>
      /* A = (A+y)/2, B = (B-x)/2 */
      err = fp_add (A, y, A);
 801d664:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d666:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d668:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d66a:	f7fe fcba 	bl	801bfe2 <fp_add>
 801d66e:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 801d670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d672:	2b00      	cmp	r3, #0
 801d674:	d009      	beq.n	801d68a <fp_invmod_slow+0x1ba>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d678:	61bb      	str	r3, [r7, #24]
 801d67a:	69bb      	ldr	r3, [r7, #24]
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d002      	beq.n	801d686 <fp_invmod_slow+0x1b6>
 801d680:	69b8      	ldr	r0, [r7, #24]
 801d682:	f7fb faaf 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801d686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d688:	e15e      	b.n	801d948 <fp_invmod_slow+0x478>
      }
      err = fp_sub (B, x, B);
 801d68a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d68c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d68e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d690:	f7fe fd89 	bl	801c1a6 <fp_sub>
 801d694:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 801d696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d009      	beq.n	801d6b0 <fp_invmod_slow+0x1e0>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d69c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d69e:	61fb      	str	r3, [r7, #28]
 801d6a0:	69fb      	ldr	r3, [r7, #28]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d002      	beq.n	801d6ac <fp_invmod_slow+0x1dc>
 801d6a6:	69f8      	ldr	r0, [r7, #28]
 801d6a8:	f7fb fa9c 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801d6ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d6ae:	e14b      	b.n	801d948 <fp_invmod_slow+0x478>
      }
    }
    /* A = A/2, B = B/2 */
    fp_div_2 (A, A);
 801d6b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d6b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d6b4:	f7ff fc5b 	bl	801cf6e <fp_div_2>
    fp_div_2 (B, B);
 801d6b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d6ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d6bc:	f7ff fc57 	bl	801cf6e <fp_div_2>
  while (fp_iseven (u) == FP_YES) {
 801d6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	dd07      	ble.n	801d6d8 <fp_invmod_slow+0x208>
 801d6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d6ca:	68db      	ldr	r3, [r3, #12]
 801d6cc:	f003 0301 	and.w	r3, r3, #1
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d101      	bne.n	801d6d8 <fp_invmod_slow+0x208>
 801d6d4:	2301      	movs	r3, #1
 801d6d6:	e000      	b.n	801d6da <fp_invmod_slow+0x20a>
 801d6d8:	2300      	movs	r3, #0
 801d6da:	2b01      	cmp	r3, #1
 801d6dc:	d0a0      	beq.n	801d620 <fp_invmod_slow+0x150>
  }

  /* 5.  while v is even do */
  while (fp_iseven (v) == FP_YES) {
 801d6de:	e04f      	b.n	801d780 <fp_invmod_slow+0x2b0>
    /* 5.1 v = v/2 */
    fp_div_2 (v, v);
 801d6e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d6e2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d6e4:	f7ff fc43 	bl	801cf6e <fp_div_2>

    /* 5.2 if C or D is odd then */
    if (fp_isodd (C) == FP_YES || fp_isodd (D) == FP_YES) {
 801d6e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	dd07      	ble.n	801d700 <fp_invmod_slow+0x230>
 801d6f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d6f2:	68db      	ldr	r3, [r3, #12]
 801d6f4:	f003 0301 	and.w	r3, r3, #1
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d001      	beq.n	801d700 <fp_invmod_slow+0x230>
 801d6fc:	2301      	movs	r3, #1
 801d6fe:	e000      	b.n	801d702 <fp_invmod_slow+0x232>
 801d700:	2300      	movs	r3, #0
 801d702:	2b01      	cmp	r3, #1
 801d704:	d00e      	beq.n	801d724 <fp_invmod_slow+0x254>
 801d706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	dd07      	ble.n	801d71e <fp_invmod_slow+0x24e>
 801d70e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d710:	68db      	ldr	r3, [r3, #12]
 801d712:	f003 0301 	and.w	r3, r3, #1
 801d716:	2b00      	cmp	r3, #0
 801d718:	d001      	beq.n	801d71e <fp_invmod_slow+0x24e>
 801d71a:	2301      	movs	r3, #1
 801d71c:	e000      	b.n	801d720 <fp_invmod_slow+0x250>
 801d71e:	2300      	movs	r3, #0
 801d720:	2b01      	cmp	r3, #1
 801d722:	d125      	bne.n	801d770 <fp_invmod_slow+0x2a0>
      /* C = (C+y)/2, D = (D-x)/2 */
      err = fp_add (C, y, C);
 801d724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d726:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d728:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d72a:	f7fe fc5a 	bl	801bfe2 <fp_add>
 801d72e:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 801d730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d732:	2b00      	cmp	r3, #0
 801d734:	d009      	beq.n	801d74a <fp_invmod_slow+0x27a>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d738:	623b      	str	r3, [r7, #32]
 801d73a:	6a3b      	ldr	r3, [r7, #32]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d002      	beq.n	801d746 <fp_invmod_slow+0x276>
 801d740:	6a38      	ldr	r0, [r7, #32]
 801d742:	f7fb fa4f 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801d746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d748:	e0fe      	b.n	801d948 <fp_invmod_slow+0x478>
      }
      err = fp_sub (D, x, D);
 801d74a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d74c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d74e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d750:	f7fe fd29 	bl	801c1a6 <fp_sub>
 801d754:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 801d756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d009      	beq.n	801d770 <fp_invmod_slow+0x2a0>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d75c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d75e:	627b      	str	r3, [r7, #36]	; 0x24
 801d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d762:	2b00      	cmp	r3, #0
 801d764:	d002      	beq.n	801d76c <fp_invmod_slow+0x29c>
 801d766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d768:	f7fb fa3c 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801d76c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d76e:	e0eb      	b.n	801d948 <fp_invmod_slow+0x478>
      }
    }
    /* C = C/2, D = D/2 */
    fp_div_2 (C, C);
 801d770:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d772:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d774:	f7ff fbfb 	bl	801cf6e <fp_div_2>
    fp_div_2 (D, D);
 801d778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d77a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d77c:	f7ff fbf7 	bl	801cf6e <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 801d780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	2b00      	cmp	r3, #0
 801d786:	dd07      	ble.n	801d798 <fp_invmod_slow+0x2c8>
 801d788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d78a:	68db      	ldr	r3, [r3, #12]
 801d78c:	f003 0301 	and.w	r3, r3, #1
 801d790:	2b00      	cmp	r3, #0
 801d792:	d101      	bne.n	801d798 <fp_invmod_slow+0x2c8>
 801d794:	2301      	movs	r3, #1
 801d796:	e000      	b.n	801d79a <fp_invmod_slow+0x2ca>
 801d798:	2300      	movs	r3, #0
 801d79a:	2b01      	cmp	r3, #1
 801d79c:	d0a0      	beq.n	801d6e0 <fp_invmod_slow+0x210>
  }

  /* 6.  if u >= v then */
  if (fp_cmp (u, v) != FP_LT) {
 801d79e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d7a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d7a2:	f001 ffb2 	bl	801f70a <fp_cmp>
 801d7a6:	4603      	mov	r3, r0
 801d7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7ac:	d038      	beq.n	801d820 <fp_invmod_slow+0x350>
    /* u = u - v, A = A - C, B = B - D */
    err = fp_sub (u, v, u);
 801d7ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d7b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d7b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d7b4:	f7fe fcf7 	bl	801c1a6 <fp_sub>
 801d7b8:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d009      	beq.n	801d7d4 <fp_invmod_slow+0x304>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d7c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d7c2:	63bb      	str	r3, [r7, #56]	; 0x38
 801d7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d002      	beq.n	801d7d0 <fp_invmod_slow+0x300>
 801d7ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d7cc:	f7fb fa0a 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d7d2:	e0b9      	b.n	801d948 <fp_invmod_slow+0x478>
    }
    err = fp_sub (A, C, A);
 801d7d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d7d6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d7d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d7da:	f7fe fce4 	bl	801c1a6 <fp_sub>
 801d7de:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d7e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d009      	beq.n	801d7fa <fp_invmod_slow+0x32a>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d7e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d002      	beq.n	801d7f6 <fp_invmod_slow+0x326>
 801d7f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801d7f2:	f7fb f9f7 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d7f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d7f8:	e0a6      	b.n	801d948 <fp_invmod_slow+0x478>
    }
    err = fp_sub (B, D, B);
 801d7fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d7fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d7fe:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d800:	f7fe fcd1 	bl	801c1a6 <fp_sub>
 801d804:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d042      	beq.n	801d892 <fp_invmod_slow+0x3c2>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d80c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d80e:	643b      	str	r3, [r7, #64]	; 0x40
 801d810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d812:	2b00      	cmp	r3, #0
 801d814:	d002      	beq.n	801d81c <fp_invmod_slow+0x34c>
 801d816:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d818:	f7fb f9e4 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d81c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d81e:	e093      	b.n	801d948 <fp_invmod_slow+0x478>
    }
  } else {
    /* v - v - u, C = C - A, D = D - B */
    err = fp_sub (v, u, v);
 801d820:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d822:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801d824:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d826:	f7fe fcbe 	bl	801c1a6 <fp_sub>
 801d82a:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d82c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d009      	beq.n	801d846 <fp_invmod_slow+0x376>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d834:	647b      	str	r3, [r7, #68]	; 0x44
 801d836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d002      	beq.n	801d842 <fp_invmod_slow+0x372>
 801d83c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d83e:	f7fb f9d1 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d844:	e080      	b.n	801d948 <fp_invmod_slow+0x478>
    }
    err = fp_sub (C, A, C);
 801d846:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d848:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d84a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d84c:	f7fe fcab 	bl	801c1a6 <fp_sub>
 801d850:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d854:	2b00      	cmp	r3, #0
 801d856:	d009      	beq.n	801d86c <fp_invmod_slow+0x39c>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d85a:	64bb      	str	r3, [r7, #72]	; 0x48
 801d85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d002      	beq.n	801d868 <fp_invmod_slow+0x398>
 801d862:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d864:	f7fb f9be 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d86a:	e06d      	b.n	801d948 <fp_invmod_slow+0x478>
    }
    err = fp_sub (D, B, D);
 801d86c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d86e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d870:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d872:	f7fe fc98 	bl	801c1a6 <fp_sub>
 801d876:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d009      	beq.n	801d892 <fp_invmod_slow+0x3c2>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d87e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d880:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d884:	2b00      	cmp	r3, #0
 801d886:	d002      	beq.n	801d88e <fp_invmod_slow+0x3be>
 801d888:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d88a:	f7fb f9ab 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d88e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d890:	e05a      	b.n	801d948 <fp_invmod_slow+0x478>
    }
  }

  /* if not zero goto step 4 */
  if (fp_iszero (u) == FP_NO)
 801d892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d000      	beq.n	801d89c <fp_invmod_slow+0x3cc>
    goto top;
 801d89a:	e6c0      	b.n	801d61e <fp_invmod_slow+0x14e>

  /* now a = C, b = D, gcd == g*v */

  /* if v != 1 then there is no inverse */
  if (fp_cmp_d (v, 1) != FP_EQ) {
 801d89c:	2101      	movs	r1, #1
 801d89e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d8a0:	f001 ff60 	bl	801f764 <fp_cmp_d>
 801d8a4:	4603      	mov	r3, r0
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d01d      	beq.n	801d8e6 <fp_invmod_slow+0x416>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d8aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d8ac:	62bb      	str	r3, [r7, #40]	; 0x28
 801d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d002      	beq.n	801d8ba <fp_invmod_slow+0x3ea>
 801d8b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d8b6:	f7fb f995 	bl	8018be4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 801d8ba:	f04f 33ff 	mov.w	r3, #4294967295
 801d8be:	e043      	b.n	801d948 <fp_invmod_slow+0x478>
  }

  /* if its too low */
  while (fp_cmp_d(C, 0) == FP_LT) {
    err = fp_add(C, b, C);
 801d8c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d8c2:	68b9      	ldr	r1, [r7, #8]
 801d8c4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d8c6:	f7fe fb8c 	bl	801bfe2 <fp_add>
 801d8ca:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d009      	beq.n	801d8e6 <fp_invmod_slow+0x416>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d8d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d002      	beq.n	801d8e2 <fp_invmod_slow+0x412>
 801d8dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d8de:	f7fb f981 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d8e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8e4:	e030      	b.n	801d948 <fp_invmod_slow+0x478>
  while (fp_cmp_d(C, 0) == FP_LT) {
 801d8e6:	2100      	movs	r1, #0
 801d8e8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d8ea:	f001 ff3b 	bl	801f764 <fp_cmp_d>
 801d8ee:	4603      	mov	r3, r0
 801d8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d8f4:	d0e4      	beq.n	801d8c0 <fp_invmod_slow+0x3f0>
    }
  }

  /* too big */
  while (fp_cmp_mag(C, b) != FP_LT) {
 801d8f6:	e012      	b.n	801d91e <fp_invmod_slow+0x44e>
    err = fp_sub(C, b, C);
 801d8f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d8fa:	68b9      	ldr	r1, [r7, #8]
 801d8fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d8fe:	f7fe fc52 	bl	801c1a6 <fp_sub>
 801d902:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 801d904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d906:	2b00      	cmp	r3, #0
 801d908:	d009      	beq.n	801d91e <fp_invmod_slow+0x44e>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d90a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d90c:	633b      	str	r3, [r7, #48]	; 0x30
 801d90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d910:	2b00      	cmp	r3, #0
 801d912:	d002      	beq.n	801d91a <fp_invmod_slow+0x44a>
 801d914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d916:	f7fb f965 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801d91a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d91c:	e014      	b.n	801d948 <fp_invmod_slow+0x478>
  while (fp_cmp_mag(C, b) != FP_LT) {
 801d91e:	68b9      	ldr	r1, [r7, #8]
 801d920:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d922:	f001 ff57 	bl	801f7d4 <fp_cmp_mag>
 801d926:	4603      	mov	r3, r0
 801d928:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d92c:	d1e4      	bne.n	801d8f8 <fp_invmod_slow+0x428>
    }
  }

  /* C is now the inverse */
  fp_copy(C, c);
 801d92e:	6879      	ldr	r1, [r7, #4]
 801d930:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d932:	f002 fe8f 	bl	8020654 <fp_copy>
#ifdef WOLFSSL_SMALL_STACK
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801d936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d938:	637b      	str	r3, [r7, #52]	; 0x34
 801d93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d002      	beq.n	801d946 <fp_invmod_slow+0x476>
 801d940:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d942:	f7fb f94f 	bl	8018be4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 801d946:	2300      	movs	r3, #0
}
 801d948:	4618      	mov	r0, r3
 801d94a:	3778      	adds	r7, #120	; 0x78
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bd80      	pop	{r7, pc}

0801d950 <fp_invmod>:

/* c = 1/a (mod b) for odd b only */
int fp_invmod(fp_int *a, fp_int *b, fp_int *c)
{
 801d950:	b580      	push	{r7, lr}
 801d952:	b098      	sub	sp, #96	; 0x60
 801d954:	af00      	add	r7, sp, #0
 801d956:	60f8      	str	r0, [r7, #12]
 801d958:	60b9      	str	r1, [r7, #8]
 801d95a:	607a      	str	r2, [r7, #4]
  fp_int  *x, *y, *u, *v, *B, *D;
#endif
  int     neg;
  int     err;

  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 801d95c:	68bb      	ldr	r3, [r7, #8]
 801d95e:	685b      	ldr	r3, [r3, #4]
 801d960:	2b01      	cmp	r3, #1
 801d962:	d003      	beq.n	801d96c <fp_invmod+0x1c>
 801d964:	68bb      	ldr	r3, [r7, #8]
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d102      	bne.n	801d972 <fp_invmod+0x22>
    return FP_VAL;
 801d96c:	f04f 33ff 	mov.w	r3, #4294967295
 801d970:	e1b6      	b.n	801dce0 <fp_invmod+0x390>
  }

  /* [modified] sanity check on "a" */
  if (fp_iszero(a) == FP_YES) {
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	2b00      	cmp	r3, #0
 801d978:	d102      	bne.n	801d980 <fp_invmod+0x30>
    return FP_VAL; /* can not divide by 0 here */
 801d97a:	f04f 33ff 	mov.w	r3, #4294967295
 801d97e:	e1af      	b.n	801dce0 <fp_invmod+0x390>
  }

  /* 2. [modified] b must be odd   */
  if (fp_iseven(b) == FP_YES) {
 801d980:	68bb      	ldr	r3, [r7, #8]
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	2b00      	cmp	r3, #0
 801d986:	dd07      	ble.n	801d998 <fp_invmod+0x48>
 801d988:	68bb      	ldr	r3, [r7, #8]
 801d98a:	68db      	ldr	r3, [r3, #12]
 801d98c:	f003 0301 	and.w	r3, r3, #1
 801d990:	2b00      	cmp	r3, #0
 801d992:	d101      	bne.n	801d998 <fp_invmod+0x48>
 801d994:	2301      	movs	r3, #1
 801d996:	e000      	b.n	801d99a <fp_invmod+0x4a>
 801d998:	2300      	movs	r3, #0
 801d99a:	2b01      	cmp	r3, #1
 801d99c:	d106      	bne.n	801d9ac <fp_invmod+0x5c>
    return fp_invmod_slow(a,b,c);
 801d99e:	687a      	ldr	r2, [r7, #4]
 801d9a0:	68b9      	ldr	r1, [r7, #8]
 801d9a2:	68f8      	ldr	r0, [r7, #12]
 801d9a4:	f7ff fd94 	bl	801d4d0 <fp_invmod_slow>
 801d9a8:	4603      	mov	r3, r0
 801d9aa:	e199      	b.n	801dce0 <fp_invmod+0x390>
  }

#ifdef WOLFSSL_SMALL_STACK
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 6, NULL, DYNAMIC_TYPE_BIGINT);
 801d9ac:	f640 5008 	movw	r0, #3336	; 0xd08
 801d9b0:	f7fb f8fc 	bl	8018bac <wolfSSL_Malloc>
 801d9b4:	65f8      	str	r0, [r7, #92]	; 0x5c
  if (x == NULL) {
 801d9b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d102      	bne.n	801d9c2 <fp_invmod+0x72>
      return FP_MEM;
 801d9bc:	f06f 0301 	mvn.w	r3, #1
 801d9c0:	e18e      	b.n	801dce0 <fp_invmod+0x390>
  }
  y = &x[1]; u = &x[2]; v = &x[3]; B = &x[4]; D = &x[5];
 801d9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d9c4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801d9c8:	65bb      	str	r3, [r7, #88]	; 0x58
 801d9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d9cc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801d9d0:	657b      	str	r3, [r7, #84]	; 0x54
 801d9d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d9d4:	f203 6384 	addw	r3, r3, #1668	; 0x684
 801d9d8:	653b      	str	r3, [r7, #80]	; 0x50
 801d9da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d9dc:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801d9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d9e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d9e4:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 801d9e8:	64bb      	str	r3, [r7, #72]	; 0x48
#endif

  /* init all our temps */
  fp_init(x);  fp_init(y);
 801d9ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801d9ec:	f002 fc4f 	bl	802028e <fp_init>
 801d9f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d9f2:	f002 fc4c 	bl	802028e <fp_init>
  fp_init(u);  fp_init(v);
 801d9f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d9f8:	f002 fc49 	bl	802028e <fp_init>
 801d9fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801d9fe:	f002 fc46 	bl	802028e <fp_init>
  fp_init(B);  fp_init(D);
 801da02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801da04:	f002 fc43 	bl	802028e <fp_init>
 801da08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801da0a:	f002 fc40 	bl	802028e <fp_init>

  if (fp_cmp(a, b) != MP_LT) {
 801da0e:	68b9      	ldr	r1, [r7, #8]
 801da10:	68f8      	ldr	r0, [r7, #12]
 801da12:	f001 fe7a 	bl	801f70a <fp_cmp>
 801da16:	4603      	mov	r3, r0
 801da18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da1c:	d014      	beq.n	801da48 <fp_invmod+0xf8>
    err = mp_mod(a, b, y);
 801da1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801da20:	68b9      	ldr	r1, [r7, #8]
 801da22:	68f8      	ldr	r0, [r7, #12]
 801da24:	f002 fd5a 	bl	80204dc <mp_mod>
 801da28:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 801da2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d009      	beq.n	801da44 <fp_invmod+0xf4>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801da30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801da32:	643b      	str	r3, [r7, #64]	; 0x40
 801da34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801da36:	2b00      	cmp	r3, #0
 801da38:	d002      	beq.n	801da40 <fp_invmod+0xf0>
 801da3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801da3c:	f7fb f8d2 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801da40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da42:	e14d      	b.n	801dce0 <fp_invmod+0x390>
    }
    a = y;
 801da44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801da46:	60fb      	str	r3, [r7, #12]
  }

  if (fp_iszero(a) == FP_YES) {
 801da48:	68fb      	ldr	r3, [r7, #12]
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d10a      	bne.n	801da66 <fp_invmod+0x116>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801da50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801da52:	613b      	str	r3, [r7, #16]
 801da54:	693b      	ldr	r3, [r7, #16]
 801da56:	2b00      	cmp	r3, #0
 801da58:	d002      	beq.n	801da60 <fp_invmod+0x110>
 801da5a:	6938      	ldr	r0, [r7, #16]
 801da5c:	f7fb f8c2 	bl	8018be4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 801da60:	f04f 33ff 	mov.w	r3, #4294967295
 801da64:	e13c      	b.n	801dce0 <fp_invmod+0x390>
  }

  /* x == modulus, y == value to invert */
  fp_copy(b, x);
 801da66:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801da68:	68b8      	ldr	r0, [r7, #8]
 801da6a:	f002 fdf3 	bl	8020654 <fp_copy>

  /* we need y = |a| */
  fp_abs(a, y);
 801da6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801da70:	68f8      	ldr	r0, [r7, #12]
 801da72:	f002 fdef 	bl	8020654 <fp_copy>
 801da76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801da78:	2200      	movs	r2, #0
 801da7a:	605a      	str	r2, [r3, #4]

  /* 3. u=x, v=y, A=1, B=0, C=0,D=1 */
  fp_copy(x, u);
 801da7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801da7e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801da80:	f002 fde8 	bl	8020654 <fp_copy>
  fp_copy(y, v);
 801da84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801da86:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801da88:	f002 fde4 	bl	8020654 <fp_copy>
  fp_set (D, 1);
 801da8c:	2101      	movs	r1, #1
 801da8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801da90:	f002 fa01 	bl	801fe96 <fp_set>

top:
  /* 4.  while u is even do */
  while (fp_iseven (u) == FP_YES) {
 801da94:	e029      	b.n	801daea <fp_invmod+0x19a>
    /* 4.1 u = u/2 */
    fp_div_2 (u, u);
 801da96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801da98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801da9a:	f7ff fa68 	bl	801cf6e <fp_div_2>

    /* 4.2 if B is odd then */
    if (fp_isodd (B) == FP_YES) {
 801da9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801daa0:	681b      	ldr	r3, [r3, #0]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	dd07      	ble.n	801dab6 <fp_invmod+0x166>
 801daa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801daa8:	68db      	ldr	r3, [r3, #12]
 801daaa:	f003 0301 	and.w	r3, r3, #1
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d001      	beq.n	801dab6 <fp_invmod+0x166>
 801dab2:	2301      	movs	r3, #1
 801dab4:	e000      	b.n	801dab8 <fp_invmod+0x168>
 801dab6:	2300      	movs	r3, #0
 801dab8:	2b01      	cmp	r3, #1
 801daba:	d112      	bne.n	801dae2 <fp_invmod+0x192>
      err = fp_sub (B, x, B);
 801dabc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dabe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801dac0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801dac2:	f7fe fb70 	bl	801c1a6 <fp_sub>
 801dac6:	6478      	str	r0, [r7, #68]	; 0x44
      if (err != FP_OKAY) {
 801dac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d009      	beq.n	801dae2 <fp_invmod+0x192>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dad0:	617b      	str	r3, [r7, #20]
 801dad2:	697b      	ldr	r3, [r7, #20]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d002      	beq.n	801dade <fp_invmod+0x18e>
 801dad8:	6978      	ldr	r0, [r7, #20]
 801dada:	f7fb f883 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801dade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dae0:	e0fe      	b.n	801dce0 <fp_invmod+0x390>
      }
    }
    /* B = B/2 */
    fp_div_2 (B, B);
 801dae2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801dae4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801dae6:	f7ff fa42 	bl	801cf6e <fp_div_2>
  while (fp_iseven (u) == FP_YES) {
 801daea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	dd07      	ble.n	801db02 <fp_invmod+0x1b2>
 801daf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801daf4:	68db      	ldr	r3, [r3, #12]
 801daf6:	f003 0301 	and.w	r3, r3, #1
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d101      	bne.n	801db02 <fp_invmod+0x1b2>
 801dafe:	2301      	movs	r3, #1
 801db00:	e000      	b.n	801db04 <fp_invmod+0x1b4>
 801db02:	2300      	movs	r3, #0
 801db04:	2b01      	cmp	r3, #1
 801db06:	d0c6      	beq.n	801da96 <fp_invmod+0x146>
  }

  /* 5.  while v is even do */
  while (fp_iseven (v) == FP_YES) {
 801db08:	e029      	b.n	801db5e <fp_invmod+0x20e>
    /* 5.1 v = v/2 */
    fp_div_2 (v, v);
 801db0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801db0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801db0e:	f7ff fa2e 	bl	801cf6e <fp_div_2>

    /* 5.2 if D is odd then */
    if (fp_isodd (D) == FP_YES) {
 801db12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	2b00      	cmp	r3, #0
 801db18:	dd07      	ble.n	801db2a <fp_invmod+0x1da>
 801db1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db1c:	68db      	ldr	r3, [r3, #12]
 801db1e:	f003 0301 	and.w	r3, r3, #1
 801db22:	2b00      	cmp	r3, #0
 801db24:	d001      	beq.n	801db2a <fp_invmod+0x1da>
 801db26:	2301      	movs	r3, #1
 801db28:	e000      	b.n	801db2c <fp_invmod+0x1dc>
 801db2a:	2300      	movs	r3, #0
 801db2c:	2b01      	cmp	r3, #1
 801db2e:	d112      	bne.n	801db56 <fp_invmod+0x206>
      /* D = (D-x)/2 */
      err = fp_sub (D, x, D);
 801db30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801db32:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801db34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801db36:	f7fe fb36 	bl	801c1a6 <fp_sub>
 801db3a:	6478      	str	r0, [r7, #68]	; 0x44
      if (err != FP_OKAY) {
 801db3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d009      	beq.n	801db56 <fp_invmod+0x206>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801db42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801db44:	61bb      	str	r3, [r7, #24]
 801db46:	69bb      	ldr	r3, [r7, #24]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d002      	beq.n	801db52 <fp_invmod+0x202>
 801db4c:	69b8      	ldr	r0, [r7, #24]
 801db4e:	f7fb f849 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801db52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db54:	e0c4      	b.n	801dce0 <fp_invmod+0x390>
      }
    }
    /* D = D/2 */
    fp_div_2 (D, D);
 801db56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801db58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801db5a:	f7ff fa08 	bl	801cf6e <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 801db5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	2b00      	cmp	r3, #0
 801db64:	dd07      	ble.n	801db76 <fp_invmod+0x226>
 801db66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db68:	68db      	ldr	r3, [r3, #12]
 801db6a:	f003 0301 	and.w	r3, r3, #1
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d101      	bne.n	801db76 <fp_invmod+0x226>
 801db72:	2301      	movs	r3, #1
 801db74:	e000      	b.n	801db78 <fp_invmod+0x228>
 801db76:	2300      	movs	r3, #0
 801db78:	2b01      	cmp	r3, #1
 801db7a:	d0c6      	beq.n	801db0a <fp_invmod+0x1ba>
  }

  /* 6.  if u >= v then */
  if (fp_cmp (u, v) != FP_LT) {
 801db7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801db7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801db80:	f001 fdc3 	bl	801f70a <fp_cmp>
 801db84:	4603      	mov	r3, r0
 801db86:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db8a:	d025      	beq.n	801dbd8 <fp_invmod+0x288>
    /* u = u - v, B = B - D */
    err = fp_sub (u, v, u);
 801db8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801db8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801db90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801db92:	f7fe fb08 	bl	801c1a6 <fp_sub>
 801db96:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 801db98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d009      	beq.n	801dbb2 <fp_invmod+0x262>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801db9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dba0:	633b      	str	r3, [r7, #48]	; 0x30
 801dba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d002      	beq.n	801dbae <fp_invmod+0x25e>
 801dba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dbaa:	f7fb f81b 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801dbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbb0:	e096      	b.n	801dce0 <fp_invmod+0x390>
    }
    err = fp_sub (B, D, B);
 801dbb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dbb4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801dbb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801dbb8:	f7fe faf5 	bl	801c1a6 <fp_sub>
 801dbbc:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 801dbbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d02f      	beq.n	801dc24 <fp_invmod+0x2d4>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dbc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dbc6:	637b      	str	r3, [r7, #52]	; 0x34
 801dbc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d002      	beq.n	801dbd4 <fp_invmod+0x284>
 801dbce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801dbd0:	f7fb f808 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801dbd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbd6:	e083      	b.n	801dce0 <fp_invmod+0x390>
    }
  } else {
    /* v - v - u, D = D - B */
    err = fp_sub (v, u, v);
 801dbd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dbda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801dbdc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801dbde:	f7fe fae2 	bl	801c1a6 <fp_sub>
 801dbe2:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 801dbe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d009      	beq.n	801dbfe <fp_invmod+0x2ae>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dbea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dbec:	63bb      	str	r3, [r7, #56]	; 0x38
 801dbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	d002      	beq.n	801dbfa <fp_invmod+0x2aa>
 801dbf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dbf6:	f7fa fff5 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801dbfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbfc:	e070      	b.n	801dce0 <fp_invmod+0x390>
    }
    err = fp_sub (D, B, D);
 801dbfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dc00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801dc02:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dc04:	f7fe facf 	bl	801c1a6 <fp_sub>
 801dc08:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 801dc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d009      	beq.n	801dc24 <fp_invmod+0x2d4>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dc10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc12:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d002      	beq.n	801dc20 <fp_invmod+0x2d0>
 801dc1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dc1c:	f7fa ffe2 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801dc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc22:	e05d      	b.n	801dce0 <fp_invmod+0x390>
    }
  }

  /* if not zero goto step 4 */
  if (fp_iszero (u) == FP_NO) {
 801dc24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d000      	beq.n	801dc2e <fp_invmod+0x2de>
    goto top;
 801dc2c:	e732      	b.n	801da94 <fp_invmod+0x144>
  }

  /* now a = C, b = D, gcd == g*v */

  /* if v != 1 then there is no inverse */
  if (fp_cmp_d (v, 1) != FP_EQ) {
 801dc2e:	2101      	movs	r1, #1
 801dc30:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801dc32:	f001 fd97 	bl	801f764 <fp_cmp_d>
 801dc36:	4603      	mov	r3, r0
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	d00a      	beq.n	801dc52 <fp_invmod+0x302>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dc3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc3e:	61fb      	str	r3, [r7, #28]
 801dc40:	69fb      	ldr	r3, [r7, #28]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d002      	beq.n	801dc4c <fp_invmod+0x2fc>
 801dc46:	69f8      	ldr	r0, [r7, #28]
 801dc48:	f7fa ffcc 	bl	8018be4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 801dc4c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc50:	e046      	b.n	801dce0 <fp_invmod+0x390>
  }

  /* b is now the inverse */
  neg = a->sign;
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	685b      	ldr	r3, [r3, #4]
 801dc56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (D->sign == FP_NEG) {
 801dc58:	e012      	b.n	801dc80 <fp_invmod+0x330>
    err = fp_add (D, b, D);
 801dc5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dc5c:	68b9      	ldr	r1, [r7, #8]
 801dc5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dc60:	f7fe f9bf 	bl	801bfe2 <fp_add>
 801dc64:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 801dc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d009      	beq.n	801dc80 <fp_invmod+0x330>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dc6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc6e:	623b      	str	r3, [r7, #32]
 801dc70:	6a3b      	ldr	r3, [r7, #32]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d002      	beq.n	801dc7c <fp_invmod+0x32c>
 801dc76:	6a38      	ldr	r0, [r7, #32]
 801dc78:	f7fa ffb4 	bl	8018be4 <wolfSSL_Free>
    #endif
      return FP_OKAY;
 801dc7c:	2300      	movs	r3, #0
 801dc7e:	e02f      	b.n	801dce0 <fp_invmod+0x390>
  while (D->sign == FP_NEG) {
 801dc80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc82:	685b      	ldr	r3, [r3, #4]
 801dc84:	2b01      	cmp	r3, #1
 801dc86:	d0e8      	beq.n	801dc5a <fp_invmod+0x30a>
    }
  }
  /* too big */
  while (fp_cmp_mag(D, b) != FP_LT) {
 801dc88:	e012      	b.n	801dcb0 <fp_invmod+0x360>
    err = fp_sub(D, b, D);
 801dc8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dc8c:	68b9      	ldr	r1, [r7, #8]
 801dc8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dc90:	f7fe fa89 	bl	801c1a6 <fp_sub>
 801dc94:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 801dc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d009      	beq.n	801dcb0 <fp_invmod+0x360>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dc9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc9e:	627b      	str	r3, [r7, #36]	; 0x24
 801dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	d002      	beq.n	801dcac <fp_invmod+0x35c>
 801dca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dca8:	f7fa ff9c 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801dcac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcae:	e017      	b.n	801dce0 <fp_invmod+0x390>
  while (fp_cmp_mag(D, b) != FP_LT) {
 801dcb0:	68b9      	ldr	r1, [r7, #8]
 801dcb2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dcb4:	f001 fd8e 	bl	801f7d4 <fp_cmp_mag>
 801dcb8:	4603      	mov	r3, r0
 801dcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dcbe:	d1e4      	bne.n	801dc8a <fp_invmod+0x33a>
    }
  }
  fp_copy (D, c);
 801dcc0:	6879      	ldr	r1, [r7, #4]
 801dcc2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dcc4:	f002 fcc6 	bl	8020654 <fp_copy>
  c->sign = neg;
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dccc:	605a      	str	r2, [r3, #4]
#ifdef WOLFSSL_SMALL_STACK
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801dcce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dcd0:	62bb      	str	r3, [r7, #40]	; 0x28
 801dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d002      	beq.n	801dcde <fp_invmod+0x38e>
 801dcd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dcda:	f7fa ff83 	bl	8018be4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 801dcde:	2300      	movs	r3, #0
}
 801dce0:	4618      	mov	r0, r3
 801dce2:	3760      	adds	r7, #96	; 0x60
 801dce4:	46bd      	mov	sp, r7
 801dce6:	bd80      	pop	{r7, pc}

0801dce8 <fp_invmod_mont_ct>:

#define CT_INV_MOD_PRE_CNT      8

/* modulus (b) must be greater than 2 and a prime */
int fp_invmod_mont_ct(fp_int *a, fp_int *b, fp_int *c, fp_digit mp)
{
 801dce8:	b580      	push	{r7, lr}
 801dcea:	b08c      	sub	sp, #48	; 0x30
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	60f8      	str	r0, [r7, #12]
 801dcf0:	60b9      	str	r1, [r7, #8]
 801dcf2:	607a      	str	r2, [r7, #4]
 801dcf4:	603b      	str	r3, [r7, #0]
  int i, j, err = FP_OKAY;
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	627b      	str	r3, [r7, #36]	; 0x24
  fp_int* t;
  fp_int* e;
  fp_int* pre;
#endif

  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	005b      	lsls	r3, r3, #1
 801dd00:	2b88      	cmp	r3, #136	; 0x88
 801dd02:	dc04      	bgt.n	801dd0e <fp_invmod_mont_ct+0x26>
 801dd04:	68bb      	ldr	r3, [r7, #8]
 801dd06:	681b      	ldr	r3, [r3, #0]
 801dd08:	005b      	lsls	r3, r3, #1
 801dd0a:	2b88      	cmp	r3, #136	; 0x88
 801dd0c:	dd02      	ble.n	801dd14 <fp_invmod_mont_ct+0x2c>
    return FP_VAL;
 801dd0e:	f04f 33ff 	mov.w	r3, #4294967295
 801dd12:	e128      	b.n	801df66 <fp_invmod_mont_ct+0x27e>
  }

#ifdef WOLFSSL_SMALL_STACK
  t = (fp_int*)XMALLOC(sizeof(fp_int) * (2 + CT_INV_MOD_PRE_CNT), NULL,
 801dd14:	f241 50b8 	movw	r0, #5560	; 0x15b8
 801dd18:	f7fa ff48 	bl	8018bac <wolfSSL_Malloc>
 801dd1c:	6238      	str	r0, [r7, #32]
                                                           DYNAMIC_TYPE_BIGINT);
  if (t == NULL)
 801dd1e:	6a3b      	ldr	r3, [r7, #32]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d102      	bne.n	801dd2a <fp_invmod_mont_ct+0x42>
    return FP_MEM;
 801dd24:	f06f 0301 	mvn.w	r3, #1
 801dd28:	e11d      	b.n	801df66 <fp_invmod_mont_ct+0x27e>
  e = t + 1;
 801dd2a:	6a3b      	ldr	r3, [r7, #32]
 801dd2c:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801dd30:	61fb      	str	r3, [r7, #28]
  pre = t + 2;
 801dd32:	6a3b      	ldr	r3, [r7, #32]
 801dd34:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801dd38:	61bb      	str	r3, [r7, #24]
#endif

  fp_init(t);
 801dd3a:	6a38      	ldr	r0, [r7, #32]
 801dd3c:	f002 faa7 	bl	802028e <fp_init>
  fp_init(e);
 801dd40:	69f8      	ldr	r0, [r7, #28]
 801dd42:	f002 faa4 	bl	802028e <fp_init>

  fp_init(&pre[0]);
 801dd46:	69b8      	ldr	r0, [r7, #24]
 801dd48:	f002 faa1 	bl	802028e <fp_init>
  fp_copy(a, &pre[0]);
 801dd4c:	69b9      	ldr	r1, [r7, #24]
 801dd4e:	68f8      	ldr	r0, [r7, #12]
 801dd50:	f002 fc80 	bl	8020654 <fp_copy>
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801dd54:	2301      	movs	r3, #1
 801dd56:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dd58:	e059      	b.n	801de0e <fp_invmod_mont_ct+0x126>
    fp_init(&pre[i]);
 801dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd5c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801dd60:	fb02 f303 	mul.w	r3, r2, r3
 801dd64:	69ba      	ldr	r2, [r7, #24]
 801dd66:	4413      	add	r3, r2
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f002 fa90 	bl	802028e <fp_init>
    err |= fp_sqr(&pre[i-1], &pre[i]);
 801dd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd70:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801dd74:	fb02 f303 	mul.w	r3, r2, r3
 801dd78:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801dd7c:	69ba      	ldr	r2, [r7, #24]
 801dd7e:	18d0      	adds	r0, r2, r3
 801dd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd82:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801dd86:	fb02 f303 	mul.w	r3, r2, r3
 801dd8a:	69ba      	ldr	r2, [r7, #24]
 801dd8c:	4413      	add	r3, r2
 801dd8e:	4619      	mov	r1, r3
 801dd90:	f001 fa74 	bl	801f27c <fp_sqr>
 801dd94:	4602      	mov	r2, r0
 801dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd98:	4313      	orrs	r3, r2
 801dd9a:	627b      	str	r3, [r7, #36]	; 0x24
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd9e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801dda2:	fb02 f303 	mul.w	r3, r2, r3
 801dda6:	69ba      	ldr	r2, [r7, #24]
 801dda8:	4413      	add	r3, r2
 801ddaa:	683a      	ldr	r2, [r7, #0]
 801ddac:	68b9      	ldr	r1, [r7, #8]
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f001 ff20 	bl	801fbf4 <fp_montgomery_reduce>
 801ddb4:	4602      	mov	r2, r0
 801ddb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddb8:	4313      	orrs	r3, r2
 801ddba:	627b      	str	r3, [r7, #36]	; 0x24
    err |= fp_mul(&pre[i], a, &pre[i]);
 801ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddbe:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801ddc2:	fb02 f303 	mul.w	r3, r2, r3
 801ddc6:	69ba      	ldr	r2, [r7, #24]
 801ddc8:	18d0      	adds	r0, r2, r3
 801ddca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddcc:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801ddd0:	fb02 f303 	mul.w	r3, r2, r3
 801ddd4:	69ba      	ldr	r2, [r7, #24]
 801ddd6:	4413      	add	r3, r2
 801ddd8:	461a      	mov	r2, r3
 801ddda:	68f9      	ldr	r1, [r7, #12]
 801dddc:	f7fe fae7 	bl	801c3ae <fp_mul>
 801dde0:	4602      	mov	r2, r0
 801dde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde4:	4313      	orrs	r3, r2
 801dde6:	627b      	str	r3, [r7, #36]	; 0x24
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801dde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddea:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801ddee:	fb02 f303 	mul.w	r3, r2, r3
 801ddf2:	69ba      	ldr	r2, [r7, #24]
 801ddf4:	4413      	add	r3, r2
 801ddf6:	683a      	ldr	r2, [r7, #0]
 801ddf8:	68b9      	ldr	r1, [r7, #8]
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	f001 fefa 	bl	801fbf4 <fp_montgomery_reduce>
 801de00:	4602      	mov	r2, r0
 801de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de04:	4313      	orrs	r3, r2
 801de06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801de08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de0a:	3301      	adds	r3, #1
 801de0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801de0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de10:	2b07      	cmp	r3, #7
 801de12:	dda2      	ble.n	801dd5a <fp_invmod_mont_ct+0x72>
  }

  err |= fp_sub_d(b, 2, e);
 801de14:	69fa      	ldr	r2, [r7, #28]
 801de16:	2102      	movs	r1, #2
 801de18:	68b8      	ldr	r0, [r7, #8]
 801de1a:	f002 f9ed 	bl	80201f8 <fp_sub_d>
 801de1e:	4602      	mov	r2, r0
 801de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de22:	4313      	orrs	r3, r2
 801de24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Highest bit is always set. */
  j = 1;
 801de26:	2301      	movs	r3, #1
 801de28:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801de2a:	69f8      	ldr	r0, [r7, #28]
 801de2c:	f002 f876 	bl	801ff1c <fp_count_bits>
 801de30:	4603      	mov	r3, r0
 801de32:	3b02      	subs	r3, #2
 801de34:	62fb      	str	r3, [r7, #44]	; 0x2c
 801de36:	e010      	b.n	801de5a <fp_invmod_mont_ct+0x172>
      if (!fp_is_bit_set(e, i) || j == CT_INV_MOD_PRE_CNT)
 801de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de3a:	4619      	mov	r1, r3
 801de3c:	69f8      	ldr	r0, [r7, #28]
 801de3e:	f002 f843 	bl	801fec8 <fp_is_bit_set>
 801de42:	4603      	mov	r3, r0
 801de44:	2b00      	cmp	r3, #0
 801de46:	d00b      	beq.n	801de60 <fp_invmod_mont_ct+0x178>
 801de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de4a:	2b08      	cmp	r3, #8
 801de4c:	d008      	beq.n	801de60 <fp_invmod_mont_ct+0x178>
          break;
      j++;
 801de4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de50:	3301      	adds	r3, #1
 801de52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de56:	3b01      	subs	r3, #1
 801de58:	62fb      	str	r3, [r7, #44]	; 0x2c
 801de5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	daeb      	bge.n	801de38 <fp_invmod_mont_ct+0x150>
  }
  fp_copy(&pre[j-1], t);
 801de60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de62:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801de66:	fb02 f303 	mul.w	r3, r2, r3
 801de6a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801de6e:	69ba      	ldr	r2, [r7, #24]
 801de70:	4413      	add	r3, r2
 801de72:	6a39      	ldr	r1, [r7, #32]
 801de74:	4618      	mov	r0, r3
 801de76:	f002 fbed 	bl	8020654 <fp_copy>
  j = 0;
 801de7a:	2300      	movs	r3, #0
 801de7c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (; i >= 0; i--) {
 801de7e:	e043      	b.n	801df08 <fp_invmod_mont_ct+0x220>
    int set = fp_is_bit_set(e, i);
 801de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de82:	4619      	mov	r1, r3
 801de84:	69f8      	ldr	r0, [r7, #28]
 801de86:	f002 f81f 	bl	801fec8 <fp_is_bit_set>
 801de8a:	6138      	str	r0, [r7, #16]

    if ((j == CT_INV_MOD_PRE_CNT) || (!set && j > 0)) {
 801de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de8e:	2b08      	cmp	r3, #8
 801de90:	d005      	beq.n	801de9e <fp_invmod_mont_ct+0x1b6>
 801de92:	693b      	ldr	r3, [r7, #16]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d11f      	bne.n	801ded8 <fp_invmod_mont_ct+0x1f0>
 801de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	dd1c      	ble.n	801ded8 <fp_invmod_mont_ct+0x1f0>
      err |= fp_mul(t, &pre[j-1], t);
 801de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dea0:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801dea4:	fb02 f303 	mul.w	r3, r2, r3
 801dea8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801deac:	69ba      	ldr	r2, [r7, #24]
 801deae:	4413      	add	r3, r2
 801deb0:	6a3a      	ldr	r2, [r7, #32]
 801deb2:	4619      	mov	r1, r3
 801deb4:	6a38      	ldr	r0, [r7, #32]
 801deb6:	f7fe fa7a 	bl	801c3ae <fp_mul>
 801deba:	4602      	mov	r2, r0
 801debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801debe:	4313      	orrs	r3, r2
 801dec0:	627b      	str	r3, [r7, #36]	; 0x24
      err |= fp_montgomery_reduce(t, b, mp);
 801dec2:	683a      	ldr	r2, [r7, #0]
 801dec4:	68b9      	ldr	r1, [r7, #8]
 801dec6:	6a38      	ldr	r0, [r7, #32]
 801dec8:	f001 fe94 	bl	801fbf4 <fp_montgomery_reduce>
 801decc:	4602      	mov	r2, r0
 801dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ded0:	4313      	orrs	r3, r2
 801ded2:	627b      	str	r3, [r7, #36]	; 0x24
      j = 0;
 801ded4:	2300      	movs	r3, #0
 801ded6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    err |= fp_sqr(t, t);
 801ded8:	6a39      	ldr	r1, [r7, #32]
 801deda:	6a38      	ldr	r0, [r7, #32]
 801dedc:	f001 f9ce 	bl	801f27c <fp_sqr>
 801dee0:	4602      	mov	r2, r0
 801dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dee4:	4313      	orrs	r3, r2
 801dee6:	627b      	str	r3, [r7, #36]	; 0x24
    err |= fp_montgomery_reduce(t, b, mp);
 801dee8:	683a      	ldr	r2, [r7, #0]
 801deea:	68b9      	ldr	r1, [r7, #8]
 801deec:	6a38      	ldr	r0, [r7, #32]
 801deee:	f001 fe81 	bl	801fbf4 <fp_montgomery_reduce>
 801def2:	4602      	mov	r2, r0
 801def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801def6:	4313      	orrs	r3, r2
 801def8:	627b      	str	r3, [r7, #36]	; 0x24
    j += set;
 801defa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801defc:	693b      	ldr	r3, [r7, #16]
 801defe:	4413      	add	r3, r2
 801df00:	62bb      	str	r3, [r7, #40]	; 0x28
  for (; i >= 0; i--) {
 801df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df04:	3b01      	subs	r3, #1
 801df06:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	dab8      	bge.n	801de80 <fp_invmod_mont_ct+0x198>
  }
  if (j > 0) {
 801df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df10:	2b00      	cmp	r3, #0
 801df12:	dd1b      	ble.n	801df4c <fp_invmod_mont_ct+0x264>
    err |= fp_mul(t, &pre[j-1], c);
 801df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df16:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801df1a:	fb02 f303 	mul.w	r3, r2, r3
 801df1e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801df22:	69ba      	ldr	r2, [r7, #24]
 801df24:	4413      	add	r3, r2
 801df26:	687a      	ldr	r2, [r7, #4]
 801df28:	4619      	mov	r1, r3
 801df2a:	6a38      	ldr	r0, [r7, #32]
 801df2c:	f7fe fa3f 	bl	801c3ae <fp_mul>
 801df30:	4602      	mov	r2, r0
 801df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df34:	4313      	orrs	r3, r2
 801df36:	627b      	str	r3, [r7, #36]	; 0x24
    err |= fp_montgomery_reduce(c, b, mp);
 801df38:	683a      	ldr	r2, [r7, #0]
 801df3a:	68b9      	ldr	r1, [r7, #8]
 801df3c:	6878      	ldr	r0, [r7, #4]
 801df3e:	f001 fe59 	bl	801fbf4 <fp_montgomery_reduce>
 801df42:	4602      	mov	r2, r0
 801df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df46:	4313      	orrs	r3, r2
 801df48:	627b      	str	r3, [r7, #36]	; 0x24
 801df4a:	e003      	b.n	801df54 <fp_invmod_mont_ct+0x26c>
  }
  else
    fp_copy(t, c);
 801df4c:	6879      	ldr	r1, [r7, #4]
 801df4e:	6a38      	ldr	r0, [r7, #32]
 801df50:	f002 fb80 	bl	8020654 <fp_copy>

#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801df54:	6a3b      	ldr	r3, [r7, #32]
 801df56:	617b      	str	r3, [r7, #20]
 801df58:	697b      	ldr	r3, [r7, #20]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d002      	beq.n	801df64 <fp_invmod_mont_ct+0x27c>
 801df5e:	6978      	ldr	r0, [r7, #20]
 801df60:	f7fa fe40 	bl	8018be4 <wolfSSL_Free>
#endif

  return err;
 801df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801df66:	4618      	mov	r0, r3
 801df68:	3730      	adds	r7, #48	; 0x30
 801df6a:	46bd      	mov	sp, r7
 801df6c:	bd80      	pop	{r7, pc}

0801df6e <fp_mulmod>:

/* d = a * b (mod c) */
int fp_mulmod(fp_int *a, fp_int *b, fp_int *c, fp_int *d)
{
 801df6e:	b580      	push	{r7, lr}
 801df70:	b088      	sub	sp, #32
 801df72:	af00      	add	r7, sp, #0
 801df74:	60f8      	str	r0, [r7, #12]
 801df76:	60b9      	str	r1, [r7, #8]
 801df78:	607a      	str	r2, [r7, #4]
 801df7a:	603b      	str	r3, [r7, #0]
#else
   fp_int *t;
#endif

#ifdef WOLFSSL_SMALL_STACK
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801df7c:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801df80:	f7fa fe14 	bl	8018bac <wolfSSL_Malloc>
 801df84:	61b8      	str	r0, [r7, #24]
   if (t == NULL)
 801df86:	69bb      	ldr	r3, [r7, #24]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d102      	bne.n	801df92 <fp_mulmod+0x24>
       return FP_MEM;
 801df8c:	f06f 0301 	mvn.w	r3, #1
 801df90:	e029      	b.n	801dfe6 <fp_mulmod+0x78>
#endif

  fp_init(t);
 801df92:	69b8      	ldr	r0, [r7, #24]
 801df94:	f002 f97b 	bl	802028e <fp_init>
  err = fp_mul(a, b, t);
 801df98:	69ba      	ldr	r2, [r7, #24]
 801df9a:	68b9      	ldr	r1, [r7, #8]
 801df9c:	68f8      	ldr	r0, [r7, #12]
 801df9e:	f7fe fa06 	bl	801c3ae <fp_mul>
 801dfa2:	61f8      	str	r0, [r7, #28]
  if (err == FP_OKAY) {
 801dfa4:	69fb      	ldr	r3, [r7, #28]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d114      	bne.n	801dfd4 <fp_mulmod+0x66>
  #if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    if (d->size < FP_SIZE) {
 801dfaa:	683b      	ldr	r3, [r7, #0]
 801dfac:	689b      	ldr	r3, [r3, #8]
 801dfae:	2b87      	cmp	r3, #135	; 0x87
 801dfb0:	dc0a      	bgt.n	801dfc8 <fp_mulmod+0x5a>
      err = fp_mod(t, c, t);
 801dfb2:	69ba      	ldr	r2, [r7, #24]
 801dfb4:	6879      	ldr	r1, [r7, #4]
 801dfb6:	69b8      	ldr	r0, [r7, #24]
 801dfb8:	f7ff f98c 	bl	801d2d4 <fp_mod>
 801dfbc:	61f8      	str	r0, [r7, #28]
      fp_copy(t, d);
 801dfbe:	6839      	ldr	r1, [r7, #0]
 801dfc0:	69b8      	ldr	r0, [r7, #24]
 801dfc2:	f002 fb47 	bl	8020654 <fp_copy>
 801dfc6:	e005      	b.n	801dfd4 <fp_mulmod+0x66>
    } else
  #endif
    {
      err = fp_mod(t, c, d);
 801dfc8:	683a      	ldr	r2, [r7, #0]
 801dfca:	6879      	ldr	r1, [r7, #4]
 801dfcc:	69b8      	ldr	r0, [r7, #24]
 801dfce:	f7ff f981 	bl	801d2d4 <fp_mod>
 801dfd2:	61f8      	str	r0, [r7, #28]
    }
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801dfd4:	69bb      	ldr	r3, [r7, #24]
 801dfd6:	617b      	str	r3, [r7, #20]
 801dfd8:	697b      	ldr	r3, [r7, #20]
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d002      	beq.n	801dfe4 <fp_mulmod+0x76>
 801dfde:	6978      	ldr	r0, [r7, #20]
 801dfe0:	f7fa fe00 	bl	8018be4 <wolfSSL_Free>
#endif
  return err;
 801dfe4:	69fb      	ldr	r3, [r7, #28]
}
 801dfe6:	4618      	mov	r0, r3
 801dfe8:	3720      	adds	r7, #32
 801dfea:	46bd      	mov	sp, r7
 801dfec:	bd80      	pop	{r7, pc}

0801dfee <fp_submod_ct>:

/* d = a - b (mod c) - constant time (a < c and b < c and all positive)
 * c and d must not be the same pointers.
 */
int fp_submod_ct(fp_int *a, fp_int *b, fp_int *c, fp_int *d)
{
 801dfee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801dff2:	b09b      	sub	sp, #108	; 0x6c
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6578      	str	r0, [r7, #84]	; 0x54
 801dff8:	6539      	str	r1, [r7, #80]	; 0x50
 801dffa:	64fa      	str	r2, [r7, #76]	; 0x4c
 801dffc:	64bb      	str	r3, [r7, #72]	; 0x48
  fp_sword w;
  fp_digit mask;
  int i;

  if (c->used + 1 > FP_SIZE) {
 801dffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	2b87      	cmp	r3, #135	; 0x87
 801e004:	dd02      	ble.n	801e00c <fp_submod_ct+0x1e>
    return FP_VAL;
 801e006:	f04f 33ff 	mov.w	r3, #4294967295
 801e00a:	e100      	b.n	801e20e <fp_submod_ct+0x220>
  }
  if (c == d) {
 801e00c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e010:	429a      	cmp	r2, r3
 801e012:	d102      	bne.n	801e01a <fp_submod_ct+0x2c>
    return FP_VAL;
 801e014:	f04f 33ff 	mov.w	r3, #4294967295
 801e018:	e0f9      	b.n	801e20e <fp_submod_ct+0x220>
  }

  /* In constant time, subtract b from a putting result in d. */
  w = 0;
 801e01a:	f04f 0200 	mov.w	r2, #0
 801e01e:	f04f 0300 	mov.w	r3, #0
 801e022:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (i = 0; i < c->used; i++) {
 801e026:	2300      	movs	r3, #0
 801e028:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e02a:	e03e      	b.n	801e0aa <fp_submod_ct+0xbc>
    w         += a->dp[i];
 801e02c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e02e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e030:	3302      	adds	r3, #2
 801e032:	009b      	lsls	r3, r3, #2
 801e034:	4413      	add	r3, r2
 801e036:	685b      	ldr	r3, [r3, #4]
 801e038:	2200      	movs	r2, #0
 801e03a:	643b      	str	r3, [r7, #64]	; 0x40
 801e03c:	647a      	str	r2, [r7, #68]	; 0x44
 801e03e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e042:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e044:	1851      	adds	r1, r2, r1
 801e046:	62b9      	str	r1, [r7, #40]	; 0x28
 801e048:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e04a:	414b      	adcs	r3, r1
 801e04c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e04e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801e052:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    w         -= b->dp[i];
 801e056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e05a:	3302      	adds	r3, #2
 801e05c:	009b      	lsls	r3, r3, #2
 801e05e:	4413      	add	r3, r2
 801e060:	685b      	ldr	r3, [r3, #4]
 801e062:	2200      	movs	r2, #0
 801e064:	63bb      	str	r3, [r7, #56]	; 0x38
 801e066:	63fa      	str	r2, [r7, #60]	; 0x3c
 801e068:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e06c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e06e:	1a51      	subs	r1, r2, r1
 801e070:	6239      	str	r1, [r7, #32]
 801e072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e074:	eb63 0301 	sbc.w	r3, r3, r1
 801e078:	627b      	str	r3, [r7, #36]	; 0x24
 801e07a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e07e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    d->dp[i]   = (fp_digit)w;
 801e082:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801e084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e088:	3302      	adds	r3, #2
 801e08a:	009b      	lsls	r3, r3, #2
 801e08c:	4413      	add	r3, r2
 801e08e:	6059      	str	r1, [r3, #4]
    w        >>= DIGIT_BIT;
 801e090:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e094:	f04f 0000 	mov.w	r0, #0
 801e098:	f04f 0100 	mov.w	r1, #0
 801e09c:	0018      	movs	r0, r3
 801e09e:	17d9      	asrs	r1, r3, #31
 801e0a0:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
  for (i = 0; i < c->used; i++) {
 801e0a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e0a6:	3301      	adds	r3, #1
 801e0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e0ac:	681a      	ldr	r2, [r3, #0]
 801e0ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e0b0:	4293      	cmp	r3, r2
 801e0b2:	dbbb      	blt.n	801e02c <fp_submod_ct+0x3e>
  }
  w  += a->dp[i];
 801e0b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e0b8:	3302      	adds	r3, #2
 801e0ba:	009b      	lsls	r3, r3, #2
 801e0bc:	4413      	add	r3, r2
 801e0be:	685b      	ldr	r3, [r3, #4]
 801e0c0:	2200      	movs	r2, #0
 801e0c2:	461c      	mov	r4, r3
 801e0c4:	4615      	mov	r5, r2
 801e0c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e0ca:	1911      	adds	r1, r2, r4
 801e0cc:	61b9      	str	r1, [r7, #24]
 801e0ce:	416b      	adcs	r3, r5
 801e0d0:	61fb      	str	r3, [r7, #28]
 801e0d2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801e0d6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  w  -= b->dp[i];
 801e0da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e0dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e0de:	3302      	adds	r3, #2
 801e0e0:	009b      	lsls	r3, r3, #2
 801e0e2:	4413      	add	r3, r2
 801e0e4:	685b      	ldr	r3, [r3, #4]
 801e0e6:	2200      	movs	r2, #0
 801e0e8:	633b      	str	r3, [r7, #48]	; 0x30
 801e0ea:	637a      	str	r2, [r7, #52]	; 0x34
 801e0ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e0f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801e0f4:	4621      	mov	r1, r4
 801e0f6:	1a51      	subs	r1, r2, r1
 801e0f8:	6139      	str	r1, [r7, #16]
 801e0fa:	4629      	mov	r1, r5
 801e0fc:	eb63 0301 	sbc.w	r3, r3, r1
 801e100:	617b      	str	r3, [r7, #20]
 801e102:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801e106:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  w >>= DIGIT_BIT;
 801e10a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801e10e:	f04f 0200 	mov.w	r2, #0
 801e112:	f04f 0300 	mov.w	r3, #0
 801e116:	000a      	movs	r2, r1
 801e118:	17cb      	asrs	r3, r1, #31
 801e11a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  /* When w is negative then we need to add modulus to make result positive. */
  mask = (fp_digit)0 - (w < 0);
 801e11e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e120:	0fdb      	lsrs	r3, r3, #31
 801e122:	b2db      	uxtb	r3, r3
 801e124:	425b      	negs	r3, r3
 801e126:	65bb      	str	r3, [r7, #88]	; 0x58
  /* Constant time, conditionally, add modulus to difference. */
  w = 0;
 801e128:	f04f 0200 	mov.w	r2, #0
 801e12c:	f04f 0300 	mov.w	r3, #0
 801e130:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (i = 0; i < c->used; i++) {
 801e134:	2300      	movs	r3, #0
 801e136:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e138:	e03f      	b.n	801e1ba <fp_submod_ct+0x1cc>
    w         += d->dp[i];
 801e13a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e13c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e13e:	3302      	adds	r3, #2
 801e140:	009b      	lsls	r3, r3, #2
 801e142:	4413      	add	r3, r2
 801e144:	685b      	ldr	r3, [r3, #4]
 801e146:	2200      	movs	r2, #0
 801e148:	4698      	mov	r8, r3
 801e14a:	4691      	mov	r9, r2
 801e14c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e150:	eb12 0108 	adds.w	r1, r2, r8
 801e154:	60b9      	str	r1, [r7, #8]
 801e156:	eb43 0309 	adc.w	r3, r3, r9
 801e15a:	60fb      	str	r3, [r7, #12]
 801e15c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e160:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    w         += c->dp[i] & mask;
 801e164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e168:	3302      	adds	r3, #2
 801e16a:	009b      	lsls	r3, r3, #2
 801e16c:	4413      	add	r3, r2
 801e16e:	685a      	ldr	r2, [r3, #4]
 801e170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e172:	4013      	ands	r3, r2
 801e174:	2200      	movs	r2, #0
 801e176:	469a      	mov	sl, r3
 801e178:	4693      	mov	fp, r2
 801e17a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e17e:	eb12 010a 	adds.w	r1, r2, sl
 801e182:	6039      	str	r1, [r7, #0]
 801e184:	eb43 030b 	adc.w	r3, r3, fp
 801e188:	607b      	str	r3, [r7, #4]
 801e18a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e18e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    d->dp[i]   = (fp_digit)w;
 801e192:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e194:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801e196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e198:	3302      	adds	r3, #2
 801e19a:	009b      	lsls	r3, r3, #2
 801e19c:	440b      	add	r3, r1
 801e19e:	605a      	str	r2, [r3, #4]
    w        >>= DIGIT_BIT;
 801e1a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801e1a4:	f04f 0200 	mov.w	r2, #0
 801e1a8:	f04f 0300 	mov.w	r3, #0
 801e1ac:	000a      	movs	r2, r1
 801e1ae:	17cb      	asrs	r3, r1, #31
 801e1b0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (i = 0; i < c->used; i++) {
 801e1b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e1b6:	3301      	adds	r3, #1
 801e1b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e1bc:	681b      	ldr	r3, [r3, #0]
 801e1be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e1c0:	429a      	cmp	r2, r3
 801e1c2:	dbba      	blt.n	801e13a <fp_submod_ct+0x14c>
  }
  /* Result will always have digits equal to or less than those in modulus. */
  d->used = i;
 801e1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e1c8:	601a      	str	r2, [r3, #0]
  d->sign = FP_ZPOS;
 801e1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1cc:	2200      	movs	r2, #0
 801e1ce:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 801e1d0:	e004      	b.n	801e1dc <fp_submod_ct+0x1ee>
 801e1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1d4:	681b      	ldr	r3, [r3, #0]
 801e1d6:	1e5a      	subs	r2, r3, #1
 801e1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1da:	601a      	str	r2, [r3, #0]
 801e1dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d009      	beq.n	801e1f8 <fp_submod_ct+0x20a>
 801e1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	3b01      	subs	r3, #1
 801e1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e1ec:	3302      	adds	r3, #2
 801e1ee:	009b      	lsls	r3, r3, #2
 801e1f0:	4413      	add	r3, r2
 801e1f2:	685b      	ldr	r3, [r3, #4]
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d0ec      	beq.n	801e1d2 <fp_submod_ct+0x1e4>
 801e1f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d002      	beq.n	801e206 <fp_submod_ct+0x218>
 801e200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e202:	685b      	ldr	r3, [r3, #4]
 801e204:	e000      	b.n	801e208 <fp_submod_ct+0x21a>
 801e206:	2300      	movs	r3, #0
 801e208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e20a:	6053      	str	r3, [r2, #4]

  return FP_OKAY;
 801e20c:	2300      	movs	r3, #0
}
 801e20e:	4618      	mov	r0, r3
 801e210:	376c      	adds	r7, #108	; 0x6c
 801e212:	46bd      	mov	sp, r7
 801e214:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e218:	4770      	bx	lr

0801e21a <fp_addmod_ct>:

/* d = a + b (mod c) - constant time (a < c and b < c and all positive)
 * c and d must not be the same pointers.
 */
int fp_addmod_ct(fp_int *a, fp_int *b, fp_int *c, fp_int *d)
{
 801e21a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e21e:	b0a3      	sub	sp, #140	; 0x8c
 801e220:	af00      	add	r7, sp, #0
 801e222:	66f8      	str	r0, [r7, #108]	; 0x6c
 801e224:	66b9      	str	r1, [r7, #104]	; 0x68
 801e226:	667a      	str	r2, [r7, #100]	; 0x64
 801e228:	663b      	str	r3, [r7, #96]	; 0x60
  fp_word  w;
  fp_sword s;
  fp_digit mask;
  int i;

  if (c == d) {
 801e22a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801e22c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e22e:	429a      	cmp	r2, r3
 801e230:	d102      	bne.n	801e238 <fp_addmod_ct+0x1e>
    return FP_VAL;
 801e232:	f04f 33ff 	mov.w	r3, #4294967295
 801e236:	e113      	b.n	801e460 <fp_addmod_ct+0x246>

  /* Add a to b into d. Do the subtract of modulus but don't store result.
   * When subtract result is negative, the overflow will be negative.
   * Only need to subtract mod when result is positive - overflow is positive.
   */
  w = 0;
 801e238:	f04f 0200 	mov.w	r2, #0
 801e23c:	f04f 0300 	mov.w	r3, #0
 801e240:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  s = 0;
 801e244:	f04f 0200 	mov.w	r2, #0
 801e248:	f04f 0300 	mov.w	r3, #0
 801e24c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (i = 0; i < c->used; i++) {
 801e250:	2300      	movs	r3, #0
 801e252:	677b      	str	r3, [r7, #116]	; 0x74
 801e254:	e06f      	b.n	801e336 <fp_addmod_ct+0x11c>
    w         += a->dp[i];
 801e256:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e25a:	3302      	adds	r3, #2
 801e25c:	009b      	lsls	r3, r3, #2
 801e25e:	4413      	add	r3, r2
 801e260:	685b      	ldr	r3, [r3, #4]
 801e262:	2200      	movs	r2, #0
 801e264:	65bb      	str	r3, [r7, #88]	; 0x58
 801e266:	65fa      	str	r2, [r7, #92]	; 0x5c
 801e268:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801e26c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801e26e:	1851      	adds	r1, r2, r1
 801e270:	63b9      	str	r1, [r7, #56]	; 0x38
 801e272:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801e274:	414b      	adcs	r3, r1
 801e276:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801e27c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    w         += b->dp[i];
 801e280:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e284:	3302      	adds	r3, #2
 801e286:	009b      	lsls	r3, r3, #2
 801e288:	4413      	add	r3, r2
 801e28a:	685b      	ldr	r3, [r3, #4]
 801e28c:	2200      	movs	r2, #0
 801e28e:	653b      	str	r3, [r7, #80]	; 0x50
 801e290:	657a      	str	r2, [r7, #84]	; 0x54
 801e292:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801e296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801e298:	1851      	adds	r1, r2, r1
 801e29a:	6339      	str	r1, [r7, #48]	; 0x30
 801e29c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e29e:	414b      	adcs	r3, r1
 801e2a0:	637b      	str	r3, [r7, #52]	; 0x34
 801e2a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801e2a6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    d->dp[i]   = (fp_digit)w;
 801e2aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801e2ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e2b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e2b2:	3302      	adds	r3, #2
 801e2b4:	009b      	lsls	r3, r3, #2
 801e2b6:	4413      	add	r3, r2
 801e2b8:	6059      	str	r1, [r3, #4]
    s         += (fp_digit)w;
 801e2ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e2be:	2200      	movs	r2, #0
 801e2c0:	64bb      	str	r3, [r7, #72]	; 0x48
 801e2c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 801e2c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801e2c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801e2ca:	1851      	adds	r1, r2, r1
 801e2cc:	62b9      	str	r1, [r7, #40]	; 0x28
 801e2ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e2d0:	414b      	adcs	r3, r1
 801e2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e2d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801e2d8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    s         -= c->dp[i];
 801e2dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801e2de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e2e0:	3302      	adds	r3, #2
 801e2e2:	009b      	lsls	r3, r3, #2
 801e2e4:	4413      	add	r3, r2
 801e2e6:	685b      	ldr	r3, [r3, #4]
 801e2e8:	2200      	movs	r2, #0
 801e2ea:	643b      	str	r3, [r7, #64]	; 0x40
 801e2ec:	647a      	str	r2, [r7, #68]	; 0x44
 801e2ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801e2f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e2f4:	1a51      	subs	r1, r2, r1
 801e2f6:	6239      	str	r1, [r7, #32]
 801e2f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e2fa:	eb63 0301 	sbc.w	r3, r3, r1
 801e2fe:	627b      	str	r3, [r7, #36]	; 0x24
 801e300:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e304:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    w        >>= DIGIT_BIT;
 801e308:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801e30c:	f04f 0000 	mov.w	r0, #0
 801e310:	f04f 0100 	mov.w	r1, #0
 801e314:	0018      	movs	r0, r3
 801e316:	2100      	movs	r1, #0
 801e318:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    s        >>= DIGIT_BIT;
 801e31c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801e320:	f04f 0000 	mov.w	r0, #0
 801e324:	f04f 0100 	mov.w	r1, #0
 801e328:	0018      	movs	r0, r3
 801e32a:	17d9      	asrs	r1, r3, #31
 801e32c:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
  for (i = 0; i < c->used; i++) {
 801e330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e332:	3301      	adds	r3, #1
 801e334:	677b      	str	r3, [r7, #116]	; 0x74
 801e336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e338:	681a      	ldr	r2, [r3, #0]
 801e33a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e33c:	4293      	cmp	r3, r2
 801e33e:	db8a      	blt.n	801e256 <fp_addmod_ct+0x3c>
  }
  s += (fp_digit)w;
 801e340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e344:	2200      	movs	r2, #0
 801e346:	469a      	mov	sl, r3
 801e348:	4693      	mov	fp, r2
 801e34a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801e34e:	eb12 010a 	adds.w	r1, r2, sl
 801e352:	61b9      	str	r1, [r7, #24]
 801e354:	eb43 030b 	adc.w	r3, r3, fp
 801e358:	61fb      	str	r3, [r7, #28]
 801e35a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e35e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  /* s will be positive when subtracting modulus is needed. */
  mask = (fp_digit)0 - (s >= 0);
 801e362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e364:	43db      	mvns	r3, r3
 801e366:	0fdb      	lsrs	r3, r3, #31
 801e368:	b2db      	uxtb	r3, r3
 801e36a:	425b      	negs	r3, r3
 801e36c:	673b      	str	r3, [r7, #112]	; 0x70

  /* Constant time, conditionally, subtract modulus from sum. */
  w = 0;
 801e36e:	f04f 0200 	mov.w	r2, #0
 801e372:	f04f 0300 	mov.w	r3, #0
 801e376:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (i = 0; i < c->used; i++) {
 801e37a:	2300      	movs	r3, #0
 801e37c:	677b      	str	r3, [r7, #116]	; 0x74
 801e37e:	e045      	b.n	801e40c <fp_addmod_ct+0x1f2>
    w        += c->dp[i] & mask;
 801e380:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801e382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e384:	3302      	adds	r3, #2
 801e386:	009b      	lsls	r3, r3, #2
 801e388:	4413      	add	r3, r2
 801e38a:	685a      	ldr	r2, [r3, #4]
 801e38c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e38e:	4013      	ands	r3, r2
 801e390:	2200      	movs	r2, #0
 801e392:	461c      	mov	r4, r3
 801e394:	4615      	mov	r5, r2
 801e396:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801e39a:	1911      	adds	r1, r2, r4
 801e39c:	6139      	str	r1, [r7, #16]
 801e39e:	416b      	adcs	r3, r5
 801e3a0:	617b      	str	r3, [r7, #20]
 801e3a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e3a6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    w         = d->dp[i] - w;
 801e3aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e3ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e3ae:	3302      	adds	r3, #2
 801e3b0:	009b      	lsls	r3, r3, #2
 801e3b2:	4413      	add	r3, r2
 801e3b4:	685b      	ldr	r3, [r3, #4]
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	4698      	mov	r8, r3
 801e3ba:	4691      	mov	r9, r2
 801e3bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801e3c0:	ebb8 0102 	subs.w	r1, r8, r2
 801e3c4:	60b9      	str	r1, [r7, #8]
 801e3c6:	eb69 0303 	sbc.w	r3, r9, r3
 801e3ca:	60fb      	str	r3, [r7, #12]
 801e3cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e3d0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    d->dp[i]  = (fp_digit)w;
 801e3d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801e3d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801e3da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e3dc:	3302      	adds	r3, #2
 801e3de:	009b      	lsls	r3, r3, #2
 801e3e0:	440b      	add	r3, r1
 801e3e2:	605a      	str	r2, [r3, #4]
    w         = (w >> DIGIT_BIT)&1;
 801e3e4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801e3e8:	f04f 0200 	mov.w	r2, #0
 801e3ec:	f04f 0300 	mov.w	r3, #0
 801e3f0:	000a      	movs	r2, r1
 801e3f2:	2300      	movs	r3, #0
 801e3f4:	f002 0301 	and.w	r3, r2, #1
 801e3f8:	603b      	str	r3, [r7, #0]
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	607b      	str	r3, [r7, #4]
 801e3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e402:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (i = 0; i < c->used; i++) {
 801e406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e408:	3301      	adds	r3, #1
 801e40a:	677b      	str	r3, [r7, #116]	; 0x74
 801e40c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e40e:	681b      	ldr	r3, [r3, #0]
 801e410:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e412:	429a      	cmp	r2, r3
 801e414:	dbb4      	blt.n	801e380 <fp_addmod_ct+0x166>
  }
  /* Result will always have digits equal to or less than those in modulus. */
  d->used = i;
 801e416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e418:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e41a:	601a      	str	r2, [r3, #0]
  d->sign = FP_ZPOS;
 801e41c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e41e:	2200      	movs	r2, #0
 801e420:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 801e422:	e004      	b.n	801e42e <fp_addmod_ct+0x214>
 801e424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	1e5a      	subs	r2, r3, #1
 801e42a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e42c:	601a      	str	r2, [r3, #0]
 801e42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	2b00      	cmp	r3, #0
 801e434:	d009      	beq.n	801e44a <fp_addmod_ct+0x230>
 801e436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	3b01      	subs	r3, #1
 801e43c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e43e:	3302      	adds	r3, #2
 801e440:	009b      	lsls	r3, r3, #2
 801e442:	4413      	add	r3, r2
 801e444:	685b      	ldr	r3, [r3, #4]
 801e446:	2b00      	cmp	r3, #0
 801e448:	d0ec      	beq.n	801e424 <fp_addmod_ct+0x20a>
 801e44a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d002      	beq.n	801e458 <fp_addmod_ct+0x23e>
 801e452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e454:	685b      	ldr	r3, [r3, #4]
 801e456:	e000      	b.n	801e45a <fp_addmod_ct+0x240>
 801e458:	2300      	movs	r3, #0
 801e45a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e45c:	6053      	str	r3, [r2, #4]

  return FP_OKAY;
 801e45e:	2300      	movs	r3, #0
}
 801e460:	4618      	mov	r0, r3
 801e462:	378c      	adds	r7, #140	; 0x8c
 801e464:	46bd      	mov	sp, r7
 801e466:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e46a:	4770      	bx	lr

0801e46c <_fp_exptmod_ct>:
   Based on work by Marc Joye, Sung-Ming Yen, "The Montgomery Powering Ladder",
   Cryptographic Hardware and Embedded Systems, CHES 2002
*/
static int _fp_exptmod_ct(fp_int * G, fp_int * X, int digits, fp_int * P,
                          fp_int * Y)
{
 801e46c:	b590      	push	{r4, r7, lr}
 801e46e:	b095      	sub	sp, #84	; 0x54
 801e470:	af00      	add	r7, sp, #0
 801e472:	60f8      	str	r0, [r7, #12]
 801e474:	60b9      	str	r1, [r7, #8]
 801e476:	607a      	str	r2, [r7, #4]
 801e478:	603b      	str	r3, [r7, #0]
#endif
  fp_digit buf, mp;
  int      err, bitcnt, digidx, y;

  /* now setup montgomery  */
  if ((err = fp_montgomery_setup (P, &mp)) != FP_OKAY) {
 801e47a:	f107 0314 	add.w	r3, r7, #20
 801e47e:	4619      	mov	r1, r3
 801e480:	6838      	ldr	r0, [r7, #0]
 801e482:	f001 f9f0 	bl	801f866 <fp_montgomery_setup>
 801e486:	6438      	str	r0, [r7, #64]	; 0x40
 801e488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d001      	beq.n	801e492 <_fp_exptmod_ct+0x26>
     return err;
 801e48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e490:	e146      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
  }

#ifdef WOLFSSL_SMALL_STACK
#ifndef WC_NO_CACHE_RESISTANT
   R = (fp_int*)XMALLOC(sizeof(fp_int) * 3, NULL, DYNAMIC_TYPE_BIGINT);
 801e492:	f240 6084 	movw	r0, #1668	; 0x684
 801e496:	f7fa fb89 	bl	8018bac <wolfSSL_Malloc>
 801e49a:	63f8      	str	r0, [r7, #60]	; 0x3c
#else
   R = (fp_int*)XMALLOC(sizeof(fp_int) * 2, NULL, DYNAMIC_TYPE_BIGINT);
#endif
   if (R == NULL)
 801e49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d102      	bne.n	801e4a8 <_fp_exptmod_ct+0x3c>
       return FP_MEM;
 801e4a2:	f06f 0301 	mvn.w	r3, #1
 801e4a6:	e13b      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
#endif
  fp_init(&R[0]);
 801e4a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e4aa:	f001 fef0 	bl	802028e <fp_init>
  fp_init(&R[1]);
 801e4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4b0:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	f001 feea 	bl	802028e <fp_init>
#ifndef WC_NO_CACHE_RESISTANT
  fp_init(&R[2]);
 801e4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4bc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801e4c0:	4618      	mov	r0, r3
 801e4c2:	f001 fee4 	bl	802028e <fp_init>
#endif

  /* now we need R mod m */
  err = fp_montgomery_calc_normalization (&R[0], P);
 801e4c6:	6839      	ldr	r1, [r7, #0]
 801e4c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e4ca:	f001 fa0d 	bl	801f8e8 <fp_montgomery_calc_normalization>
 801e4ce:	6438      	str	r0, [r7, #64]	; 0x40
  if (err != FP_OKAY) {
 801e4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	d009      	beq.n	801e4ea <_fp_exptmod_ct+0x7e>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4d8:	61bb      	str	r3, [r7, #24]
 801e4da:	69bb      	ldr	r3, [r7, #24]
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d002      	beq.n	801e4e6 <_fp_exptmod_ct+0x7a>
 801e4e0:	69b8      	ldr	r0, [r7, #24]
 801e4e2:	f7fa fb7f 	bl	8018be4 <wolfSSL_Free>
  #endif
    return err;
 801e4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e4e8:	e11a      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
  }

  /* now set R[0][1] to G * R mod m */
  if (fp_cmp_mag(P, G) != FP_GT) {
 801e4ea:	68f9      	ldr	r1, [r7, #12]
 801e4ec:	6838      	ldr	r0, [r7, #0]
 801e4ee:	f001 f971 	bl	801f7d4 <fp_cmp_mag>
 801e4f2:	4603      	mov	r3, r0
 801e4f4:	2b01      	cmp	r3, #1
 801e4f6:	d015      	beq.n	801e524 <_fp_exptmod_ct+0xb8>
     /* G > P so we reduce it first */
     err = fp_mod(G, P, &R[1]);
 801e4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4fa:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e4fe:	461a      	mov	r2, r3
 801e500:	6839      	ldr	r1, [r7, #0]
 801e502:	68f8      	ldr	r0, [r7, #12]
 801e504:	f7fe fee6 	bl	801d2d4 <fp_mod>
 801e508:	6438      	str	r0, [r7, #64]	; 0x40
     if (err != FP_OKAY) {
 801e50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d010      	beq.n	801e532 <_fp_exptmod_ct+0xc6>
#ifdef WOLFSSL_SMALL_STACK
         XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e512:	63bb      	str	r3, [r7, #56]	; 0x38
 801e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e516:	2b00      	cmp	r3, #0
 801e518:	d002      	beq.n	801e520 <_fp_exptmod_ct+0xb4>
 801e51a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e51c:	f7fa fb62 	bl	8018be4 <wolfSSL_Free>
#endif
         return err;
 801e520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e522:	e0fd      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
     }
  } else {
     fp_copy(G, &R[1]);
 801e524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e526:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e52a:	4619      	mov	r1, r3
 801e52c:	68f8      	ldr	r0, [r7, #12]
 801e52e:	f002 f891 	bl	8020654 <fp_copy>
  }
  err = fp_mulmod (&R[1], &R[0], P, &R[1]);
 801e532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e534:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 801e538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e53a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e53e:	683a      	ldr	r2, [r7, #0]
 801e540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e542:	f7ff fd14 	bl	801df6e <fp_mulmod>
 801e546:	6438      	str	r0, [r7, #64]	; 0x40
  if (err != FP_OKAY) {
 801e548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d009      	beq.n	801e562 <_fp_exptmod_ct+0xf6>
#ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e550:	61fb      	str	r3, [r7, #28]
 801e552:	69fb      	ldr	r3, [r7, #28]
 801e554:	2b00      	cmp	r3, #0
 801e556:	d002      	beq.n	801e55e <_fp_exptmod_ct+0xf2>
 801e558:	69f8      	ldr	r0, [r7, #28]
 801e55a:	f7fa fb43 	bl	8018be4 <wolfSSL_Free>
#endif
      return err;
 801e55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e560:	e0de      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
  /* for j = t-1 downto 0 do
        r_!k = R0*R1; r_k = r_k^2
  */

  /* set initial mode and bit cnt */
  bitcnt = 1;
 801e562:	2301      	movs	r3, #1
 801e564:	64bb      	str	r3, [r7, #72]	; 0x48
  buf    = 0;
 801e566:	2300      	movs	r3, #0
 801e568:	64fb      	str	r3, [r7, #76]	; 0x4c
  digidx = digits - 1;
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	3b01      	subs	r3, #1
 801e56e:	647b      	str	r3, [r7, #68]	; 0x44

  for (;;) {
    /* grab next digit as required */
    if (--bitcnt == 0) {
 801e570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e572:	3b01      	subs	r3, #1
 801e574:	64bb      	str	r3, [r7, #72]	; 0x48
 801e576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e578:	2b00      	cmp	r3, #0
 801e57a:	d10f      	bne.n	801e59c <_fp_exptmod_ct+0x130>
      /* if digidx == -1 we are out of digits so break */
      if (digidx == -1) {
 801e57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e582:	f000 80b8 	beq.w	801e6f6 <_fp_exptmod_ct+0x28a>
        break;
      }
      /* read next digit and reset bitcnt */
      buf    = X->dp[digidx--];
 801e586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e588:	1e5a      	subs	r2, r3, #1
 801e58a:	647a      	str	r2, [r7, #68]	; 0x44
 801e58c:	68ba      	ldr	r2, [r7, #8]
 801e58e:	3302      	adds	r3, #2
 801e590:	009b      	lsls	r3, r3, #2
 801e592:	4413      	add	r3, r2
 801e594:	685b      	ldr	r3, [r3, #4]
 801e596:	64fb      	str	r3, [r7, #76]	; 0x4c
      bitcnt = (int)DIGIT_BIT;
 801e598:	2320      	movs	r3, #32
 801e59a:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* grab the next msb from the exponent */
    y     = (int)(buf >> (DIGIT_BIT - 1)) & 1;
 801e59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e59e:	0fdb      	lsrs	r3, r3, #31
 801e5a0:	633b      	str	r3, [r7, #48]	; 0x30
    buf <<= (fp_digit)1;
 801e5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e5a4:	005b      	lsls	r3, r3, #1
 801e5a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    #endif
      return err;
    }
#else
    /* do ops */
    err = fp_mul(&R[0], &R[1], &R[2]);
 801e5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5aa:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 801e5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5b0:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801e5b4:	461a      	mov	r2, r3
 801e5b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e5b8:	f7fd fef9 	bl	801c3ae <fp_mul>
 801e5bc:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 801e5be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d009      	beq.n	801e5d8 <_fp_exptmod_ct+0x16c>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5c6:	623b      	str	r3, [r7, #32]
 801e5c8:	6a3b      	ldr	r3, [r7, #32]
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d002      	beq.n	801e5d4 <_fp_exptmod_ct+0x168>
 801e5ce:	6a38      	ldr	r0, [r7, #32]
 801e5d0:	f7fa fb08 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801e5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e5d6:	e0a3      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
    }
    err = fp_montgomery_reduce(&R[2], P, mp);
 801e5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5da:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801e5de:	697a      	ldr	r2, [r7, #20]
 801e5e0:	6839      	ldr	r1, [r7, #0]
 801e5e2:	4618      	mov	r0, r3
 801e5e4:	f001 fb06 	bl	801fbf4 <fp_montgomery_reduce>
 801e5e8:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 801e5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d009      	beq.n	801e604 <_fp_exptmod_ct+0x198>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5f2:	627b      	str	r3, [r7, #36]	; 0x24
 801e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d002      	beq.n	801e600 <_fp_exptmod_ct+0x194>
 801e5fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e5fc:	f7fa faf2 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801e600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e602:	e08d      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
    }
    /* instead of using R[y^1] for mul, which leaks key bit to cache monitor,
     * use R[2] as temp, make sure address calc is constant, keep
     * &R[0] and &R[1] in cache */
    fp_copy(&R[2],
 801e604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e606:	f503 608b 	add.w	r0, r3, #1112	; 0x458
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y]) +
 801e60a:	4a47      	ldr	r2, [pc, #284]	; (801e728 <_fp_exptmod_ct+0x2bc>)
 801e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e60e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801e612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e614:	401a      	ands	r2, r3
                        ((wc_ptr_t)&R[1] & wc_off_on_addr[y^1]) ) );
 801e616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e618:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e61c:	461c      	mov	r4, r3
 801e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e620:	f083 0301 	eor.w	r3, r3, #1
 801e624:	4940      	ldr	r1, [pc, #256]	; (801e728 <_fp_exptmod_ct+0x2bc>)
 801e626:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801e62a:	4023      	ands	r3, r4
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y]) +
 801e62c:	4413      	add	r3, r2
    fp_copy(&R[2],
 801e62e:	4619      	mov	r1, r3
 801e630:	f002 f810 	bl	8020654 <fp_copy>

    /* instead of using R[y] for sqr, which leaks key bit to cache monitor,
     * use R[2] as temp, make sure address calc is constant, keep
     * &R[0] and &R[1] in cache */
    fp_copy((fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 801e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e636:	f083 0301 	eor.w	r3, r3, #1
 801e63a:	4a3b      	ldr	r2, [pc, #236]	; (801e728 <_fp_exptmod_ct+0x2bc>)
 801e63c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801e640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e642:	401a      	ands	r2, r3
                        ((wc_ptr_t)&R[1] & wc_off_on_addr[y]) ),
 801e644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e646:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e64a:	4618      	mov	r0, r3
 801e64c:	4936      	ldr	r1, [pc, #216]	; (801e728 <_fp_exptmod_ct+0x2bc>)
 801e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e650:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801e654:	4003      	ands	r3, r0
    fp_copy((fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 801e656:	4413      	add	r3, r2
 801e658:	461a      	mov	r2, r3
 801e65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e65c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801e660:	4619      	mov	r1, r3
 801e662:	4610      	mov	r0, r2
 801e664:	f001 fff6 	bl	8020654 <fp_copy>
            &R[2]);
    err = fp_sqr(&R[2], &R[2]);
 801e668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e66a:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 801e66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e670:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801e674:	4619      	mov	r1, r3
 801e676:	4610      	mov	r0, r2
 801e678:	f000 fe00 	bl	801f27c <fp_sqr>
 801e67c:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 801e67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e680:	2b00      	cmp	r3, #0
 801e682:	d009      	beq.n	801e698 <_fp_exptmod_ct+0x22c>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e686:	62bb      	str	r3, [r7, #40]	; 0x28
 801e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d002      	beq.n	801e694 <_fp_exptmod_ct+0x228>
 801e68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e690:	f7fa faa8 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801e694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e696:	e043      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
    }
    err = fp_montgomery_reduce(&R[2], P, mp);
 801e698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e69a:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801e69e:	697a      	ldr	r2, [r7, #20]
 801e6a0:	6839      	ldr	r1, [r7, #0]
 801e6a2:	4618      	mov	r0, r3
 801e6a4:	f001 faa6 	bl	801fbf4 <fp_montgomery_reduce>
 801e6a8:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 801e6aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d009      	beq.n	801e6c4 <_fp_exptmod_ct+0x258>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d002      	beq.n	801e6c0 <_fp_exptmod_ct+0x254>
 801e6ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e6bc:	f7fa fa92 	bl	8018be4 <wolfSSL_Free>
    #endif
      return err;
 801e6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6c2:	e02d      	b.n	801e720 <_fp_exptmod_ct+0x2b4>
    }
    fp_copy(&R[2],
 801e6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6c6:	f503 608b 	add.w	r0, r3, #1112	; 0x458
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 801e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6cc:	f083 0301 	eor.w	r3, r3, #1
 801e6d0:	4a15      	ldr	r2, [pc, #84]	; (801e728 <_fp_exptmod_ct+0x2bc>)
 801e6d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801e6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6d8:	401a      	ands	r2, r3
                        ((wc_ptr_t)&R[1] & wc_off_on_addr[y]) ) );
 801e6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6dc:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e6e0:	461c      	mov	r4, r3
 801e6e2:	4911      	ldr	r1, [pc, #68]	; (801e728 <_fp_exptmod_ct+0x2bc>)
 801e6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801e6ea:	4023      	ands	r3, r4
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 801e6ec:	4413      	add	r3, r2
    fp_copy(&R[2],
 801e6ee:	4619      	mov	r1, r3
 801e6f0:	f001 ffb0 	bl	8020654 <fp_copy>
    if (--bitcnt == 0) {
 801e6f4:	e73c      	b.n	801e570 <_fp_exptmod_ct+0x104>
        break;
 801e6f6:	bf00      	nop
#endif /* WC_NO_CACHE_RESISTANT */
  }

   err = fp_montgomery_reduce(&R[0], P, mp);
 801e6f8:	697b      	ldr	r3, [r7, #20]
 801e6fa:	461a      	mov	r2, r3
 801e6fc:	6839      	ldr	r1, [r7, #0]
 801e6fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e700:	f001 fa78 	bl	801fbf4 <fp_montgomery_reduce>
 801e704:	6438      	str	r0, [r7, #64]	; 0x40
   fp_copy(&R[0], Y);
 801e706:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801e708:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e70a:	f001 ffa3 	bl	8020654 <fp_copy>
#ifdef WOLFSSL_SMALL_STACK
   XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 801e70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e710:	637b      	str	r3, [r7, #52]	; 0x34
 801e712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e714:	2b00      	cmp	r3, #0
 801e716:	d002      	beq.n	801e71e <_fp_exptmod_ct+0x2b2>
 801e718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e71a:	f7fa fa63 	bl	8018be4 <wolfSSL_Free>
#endif
   return err;
 801e71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 801e720:	4618      	mov	r0, r3
 801e722:	3754      	adds	r7, #84	; 0x54
 801e724:	46bd      	mov	sp, r7
 801e726:	bd90      	pop	{r4, r7, pc}
 801e728:	0802c204 	.word	0x0802c204

0801e72c <_fp_exptmod_nct>:

/* y = g**x (mod b)
 * Some restrictions... x must be positive and < b
 */
static int _fp_exptmod_nct(fp_int * G, fp_int * X, fp_int * P, fp_int * Y)
{
 801e72c:	b580      	push	{r7, lr}
 801e72e:	b0a4      	sub	sp, #144	; 0x90
 801e730:	af00      	add	r7, sp, #0
 801e732:	60f8      	str	r0, [r7, #12]
 801e734:	60b9      	str	r1, [r7, #8]
 801e736:	607a      	str	r2, [r7, #4]
 801e738:	603b      	str	r3, [r7, #0]
#else
  fp_int   M[(1 << 6) + 1];
#endif

  /* find window size */
  x = fp_count_bits (X);
 801e73a:	68b8      	ldr	r0, [r7, #8]
 801e73c:	f001 fbee 	bl	801ff1c <fp_count_bits>
 801e740:	6778      	str	r0, [r7, #116]	; 0x74
  if (x <= 21) {
 801e742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e744:	2b15      	cmp	r3, #21
 801e746:	dc02      	bgt.n	801e74e <_fp_exptmod_nct+0x22>
    winsize = 1;
 801e748:	2301      	movs	r3, #1
 801e74a:	673b      	str	r3, [r7, #112]	; 0x70
 801e74c:	e014      	b.n	801e778 <_fp_exptmod_nct+0x4c>
  } else if (x <= 36) {
 801e74e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e750:	2b24      	cmp	r3, #36	; 0x24
 801e752:	dc02      	bgt.n	801e75a <_fp_exptmod_nct+0x2e>
    winsize = 3;
 801e754:	2303      	movs	r3, #3
 801e756:	673b      	str	r3, [r7, #112]	; 0x70
 801e758:	e00e      	b.n	801e778 <_fp_exptmod_nct+0x4c>
  } else if (x <= 140) {
 801e75a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e75c:	2b8c      	cmp	r3, #140	; 0x8c
 801e75e:	dc02      	bgt.n	801e766 <_fp_exptmod_nct+0x3a>
    winsize = 4;
 801e760:	2304      	movs	r3, #4
 801e762:	673b      	str	r3, [r7, #112]	; 0x70
 801e764:	e008      	b.n	801e778 <_fp_exptmod_nct+0x4c>
  } else if (x <= 450) {
 801e766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e768:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 801e76c:	dc02      	bgt.n	801e774 <_fp_exptmod_nct+0x48>
    winsize = 5;
 801e76e:	2305      	movs	r3, #5
 801e770:	673b      	str	r3, [r7, #112]	; 0x70
 801e772:	e001      	b.n	801e778 <_fp_exptmod_nct+0x4c>
  } else {
    winsize = 6;
 801e774:	2306      	movs	r3, #6
 801e776:	673b      	str	r3, [r7, #112]	; 0x70
  }

  /* now setup montgomery  */
  if ((err = fp_montgomery_setup (P, &mp)) != FP_OKAY) {
 801e778:	f107 0314 	add.w	r3, r7, #20
 801e77c:	4619      	mov	r1, r3
 801e77e:	6878      	ldr	r0, [r7, #4]
 801e780:	f001 f871 	bl	801f866 <fp_montgomery_setup>
 801e784:	66f8      	str	r0, [r7, #108]	; 0x6c
 801e786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d001      	beq.n	801e790 <_fp_exptmod_nct+0x64>
     return err;
 801e78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e78e:	e2a3      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
  }

#ifndef WOLFSSL_NO_MALLOC
  /* only allocate space for what's needed for window plus res */
  M = (fp_int*)XMALLOC(sizeof(fp_int)*((1 << winsize) + 1), NULL,
 801e790:	2201      	movs	r2, #1
 801e792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e794:	fa02 f303 	lsl.w	r3, r2, r3
 801e798:	3301      	adds	r3, #1
 801e79a:	461a      	mov	r2, r3
 801e79c:	f44f 730b 	mov.w	r3, #556	; 0x22c
 801e7a0:	fb02 f303 	mul.w	r3, r2, r3
 801e7a4:	4618      	mov	r0, r3
 801e7a6:	f7fa fa01 	bl	8018bac <wolfSSL_Malloc>
 801e7aa:	66b8      	str	r0, [r7, #104]	; 0x68
                                                           DYNAMIC_TYPE_BIGINT);
  if (M == NULL) {
 801e7ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d102      	bne.n	801e7b8 <_fp_exptmod_nct+0x8c>
     return FP_MEM;
 801e7b2:	f06f 0301 	mvn.w	r3, #1
 801e7b6:	e28f      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
  }
#endif
  res = &M[(word32)(1 << winsize)];
 801e7b8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e7bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e7be:	fa02 f303 	lsl.w	r3, r2, r3
 801e7c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e7c4:	4413      	add	r3, r2
 801e7c6:	667b      	str	r3, [r7, #100]	; 0x64

  /* init M array */
  for(x = 0; x < (1 << winsize); x++)
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	677b      	str	r3, [r7, #116]	; 0x74
 801e7cc:	e00c      	b.n	801e7e8 <_fp_exptmod_nct+0xbc>
    fp_init(&M[x]);
 801e7ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e7d0:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e7d4:	fb02 f303 	mul.w	r3, r2, r3
 801e7d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e7da:	4413      	add	r3, r2
 801e7dc:	4618      	mov	r0, r3
 801e7de:	f001 fd56 	bl	802028e <fp_init>
  for(x = 0; x < (1 << winsize); x++)
 801e7e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e7e4:	3301      	adds	r3, #1
 801e7e6:	677b      	str	r3, [r7, #116]	; 0x74
 801e7e8:	2201      	movs	r2, #1
 801e7ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e7ec:	fa02 f303 	lsl.w	r3, r2, r3
 801e7f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e7f2:	429a      	cmp	r2, r3
 801e7f4:	dbeb      	blt.n	801e7ce <_fp_exptmod_nct+0xa2>

  /* setup result */
  fp_init(res);
 801e7f6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801e7f8:	f001 fd49 	bl	802028e <fp_init>
   *
   * The first half of the table is not computed though except for M[0] and M[1]
   */

  /* now we need R mod m */
  err = fp_montgomery_calc_normalization (res, P);
 801e7fc:	6879      	ldr	r1, [r7, #4]
 801e7fe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801e800:	f001 f872 	bl	801f8e8 <fp_montgomery_calc_normalization>
 801e804:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (err != FP_OKAY) {
 801e806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d009      	beq.n	801e820 <_fp_exptmod_nct+0xf4>
#ifndef WOLFSSL_NO_MALLOC
    XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801e80c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e80e:	61bb      	str	r3, [r7, #24]
 801e810:	69bb      	ldr	r3, [r7, #24]
 801e812:	2b00      	cmp	r3, #0
 801e814:	d002      	beq.n	801e81c <_fp_exptmod_nct+0xf0>
 801e816:	69b8      	ldr	r0, [r7, #24]
 801e818:	f7fa f9e4 	bl	8018be4 <wolfSSL_Free>
#endif
    return err;
 801e81c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e81e:	e25b      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
  }

  /* now set M[1] to G * R mod m */
  if (fp_cmp_mag(P, G) != FP_GT) {
 801e820:	68f9      	ldr	r1, [r7, #12]
 801e822:	6878      	ldr	r0, [r7, #4]
 801e824:	f000 ffd6 	bl	801f7d4 <fp_cmp_mag>
 801e828:	4603      	mov	r3, r0
 801e82a:	2b01      	cmp	r3, #1
 801e82c:	d015      	beq.n	801e85a <_fp_exptmod_nct+0x12e>
     /* G > P so we reduce it first */
     err = fp_mod(G, P, &M[1]);
 801e82e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e830:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e834:	461a      	mov	r2, r3
 801e836:	6879      	ldr	r1, [r7, #4]
 801e838:	68f8      	ldr	r0, [r7, #12]
 801e83a:	f7fe fd4b 	bl	801d2d4 <fp_mod>
 801e83e:	66f8      	str	r0, [r7, #108]	; 0x6c
     if (err != FP_OKAY) {
 801e840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e842:	2b00      	cmp	r3, #0
 801e844:	d010      	beq.n	801e868 <_fp_exptmod_nct+0x13c>
     #ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801e846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e848:	663b      	str	r3, [r7, #96]	; 0x60
 801e84a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d002      	beq.n	801e856 <_fp_exptmod_nct+0x12a>
 801e850:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e852:	f7fa f9c7 	bl	8018be4 <wolfSSL_Free>
     #endif
        return err;
 801e856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e858:	e23e      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
     }
  } else {
     fp_copy(G, &M[1]);
 801e85a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e85c:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e860:	4619      	mov	r1, r3
 801e862:	68f8      	ldr	r0, [r7, #12]
 801e864:	f001 fef6 	bl	8020654 <fp_copy>
  }
  err = fp_mulmod (&M[1], res, P, &M[1]);
 801e868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e86a:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 801e86e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e870:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801e874:	687a      	ldr	r2, [r7, #4]
 801e876:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801e878:	f7ff fb79 	bl	801df6e <fp_mulmod>
 801e87c:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (err != FP_OKAY) {
 801e87e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e880:	2b00      	cmp	r3, #0
 801e882:	d009      	beq.n	801e898 <_fp_exptmod_nct+0x16c>
  #ifndef WOLFSSL_NO_MALLOC
     XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801e884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e886:	61fb      	str	r3, [r7, #28]
 801e888:	69fb      	ldr	r3, [r7, #28]
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d002      	beq.n	801e894 <_fp_exptmod_nct+0x168>
 801e88e:	69f8      	ldr	r0, [r7, #28]
 801e890:	f7fa f9a8 	bl	8018be4 <wolfSSL_Free>
  #endif
     return err;
 801e894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e896:	e21f      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
  }

  /* compute the value at M[1<<(winsize-1)] by
   * squaring M[1] (winsize-1) times */
  fp_copy (&M[1], &M[(word32)(1 << (winsize - 1))]);
 801e898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e89a:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 801e89e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e8a0:	3b01      	subs	r3, #1
 801e8a2:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e8a6:	fa02 f303 	lsl.w	r3, r2, r3
 801e8aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e8ac:	4413      	add	r3, r2
 801e8ae:	4619      	mov	r1, r3
 801e8b0:	f001 fed0 	bl	8020654 <fp_copy>
  for (x = 0; x < (winsize - 1); x++) {
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	677b      	str	r3, [r7, #116]	; 0x74
 801e8b8:	e03e      	b.n	801e938 <_fp_exptmod_nct+0x20c>
    err = fp_sqr (&M[(word32)(1 << (winsize - 1))],
 801e8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e8bc:	3b01      	subs	r3, #1
 801e8be:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e8c2:	fa02 f303 	lsl.w	r3, r2, r3
 801e8c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e8c8:	18d0      	adds	r0, r2, r3
                  &M[(word32)(1 << (winsize - 1))]);
 801e8ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e8cc:	3b01      	subs	r3, #1
 801e8ce:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e8d2:	fa02 f303 	lsl.w	r3, r2, r3
    err = fp_sqr (&M[(word32)(1 << (winsize - 1))],
 801e8d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e8d8:	4413      	add	r3, r2
 801e8da:	4619      	mov	r1, r3
 801e8dc:	f000 fcce 	bl	801f27c <fp_sqr>
 801e8e0:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 801e8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d009      	beq.n	801e8fc <_fp_exptmod_nct+0x1d0>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801e8e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e8ea:	623b      	str	r3, [r7, #32]
 801e8ec:	6a3b      	ldr	r3, [r7, #32]
 801e8ee:	2b00      	cmp	r3, #0
 801e8f0:	d002      	beq.n	801e8f8 <_fp_exptmod_nct+0x1cc>
 801e8f2:	6a38      	ldr	r0, [r7, #32]
 801e8f4:	f7fa f976 	bl	8018be4 <wolfSSL_Free>
#endif
      return err;
 801e8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e8fa:	e1ed      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
    }
    err = fp_montgomery_reduce_ex(&M[(word32)(1 << (winsize - 1))], P, mp, 0);
 801e8fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e8fe:	3b01      	subs	r3, #1
 801e900:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e904:	fa02 f303 	lsl.w	r3, r2, r3
 801e908:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e90a:	18d0      	adds	r0, r2, r3
 801e90c:	697a      	ldr	r2, [r7, #20]
 801e90e:	2300      	movs	r3, #0
 801e910:	6879      	ldr	r1, [r7, #4]
 801e912:	f001 f83b 	bl	801f98c <fp_montgomery_reduce_ex>
 801e916:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 801e918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d009      	beq.n	801e932 <_fp_exptmod_nct+0x206>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801e91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e920:	627b      	str	r3, [r7, #36]	; 0x24
 801e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e924:	2b00      	cmp	r3, #0
 801e926:	d002      	beq.n	801e92e <_fp_exptmod_nct+0x202>
 801e928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e92a:	f7fa f95b 	bl	8018be4 <wolfSSL_Free>
#endif
      return err;
 801e92e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e930:	e1d2      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
  for (x = 0; x < (winsize - 1); x++) {
 801e932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e934:	3301      	adds	r3, #1
 801e936:	677b      	str	r3, [r7, #116]	; 0x74
 801e938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e93a:	3b01      	subs	r3, #1
 801e93c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e93e:	429a      	cmp	r2, r3
 801e940:	dbbb      	blt.n	801e8ba <_fp_exptmod_nct+0x18e>
    }
  }

  /* create upper table */
  for (x = (1 << (winsize - 1)) + 1; x < (1 << winsize); x++) {
 801e942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e944:	3b01      	subs	r3, #1
 801e946:	2201      	movs	r2, #1
 801e948:	fa02 f303 	lsl.w	r3, r2, r3
 801e94c:	3301      	adds	r3, #1
 801e94e:	677b      	str	r3, [r7, #116]	; 0x74
 801e950:	e040      	b.n	801e9d4 <_fp_exptmod_nct+0x2a8>
    err = fp_mul(&M[x - 1], &M[1], &M[x]);
 801e952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e954:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e958:	fb02 f303 	mul.w	r3, r2, r3
 801e95c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801e960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e962:	18d0      	adds	r0, r2, r3
 801e964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e966:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 801e96a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e96c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e970:	fb02 f303 	mul.w	r3, r2, r3
 801e974:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e976:	4413      	add	r3, r2
 801e978:	461a      	mov	r2, r3
 801e97a:	f7fd fd18 	bl	801c3ae <fp_mul>
 801e97e:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 801e980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e982:	2b00      	cmp	r3, #0
 801e984:	d009      	beq.n	801e99a <_fp_exptmod_nct+0x26e>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801e986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e988:	62bb      	str	r3, [r7, #40]	; 0x28
 801e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	d002      	beq.n	801e996 <_fp_exptmod_nct+0x26a>
 801e990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e992:	f7fa f927 	bl	8018be4 <wolfSSL_Free>
#endif
      return err;
 801e996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e998:	e19e      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
    }
    err = fp_montgomery_reduce_ex(&M[x], P, mp, 0);
 801e99a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e99c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801e9a0:	fb02 f303 	mul.w	r3, r2, r3
 801e9a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e9a6:	18d0      	adds	r0, r2, r3
 801e9a8:	697a      	ldr	r2, [r7, #20]
 801e9aa:	2300      	movs	r3, #0
 801e9ac:	6879      	ldr	r1, [r7, #4]
 801e9ae:	f000 ffed 	bl	801f98c <fp_montgomery_reduce_ex>
 801e9b2:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 801e9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d009      	beq.n	801e9ce <_fp_exptmod_nct+0x2a2>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801e9ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d002      	beq.n	801e9ca <_fp_exptmod_nct+0x29e>
 801e9c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e9c6:	f7fa f90d 	bl	8018be4 <wolfSSL_Free>
#endif
      return err;
 801e9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9cc:	e184      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
  for (x = (1 << (winsize - 1)) + 1; x < (1 << winsize); x++) {
 801e9ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9d0:	3301      	adds	r3, #1
 801e9d2:	677b      	str	r3, [r7, #116]	; 0x74
 801e9d4:	2201      	movs	r2, #1
 801e9d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e9d8:	fa02 f303 	lsl.w	r3, r2, r3
 801e9dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e9de:	429a      	cmp	r2, r3
 801e9e0:	dbb7      	blt.n	801e952 <_fp_exptmod_nct+0x226>
    }
  }

  /* set initial mode and bit cnt */
  mode   = 0;
 801e9e2:	2300      	movs	r3, #0
 801e9e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  bitcnt = (x % DIGIT_BIT) + 1;
 801e9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9e8:	425a      	negs	r2, r3
 801e9ea:	f003 031f 	and.w	r3, r3, #31
 801e9ee:	f002 021f 	and.w	r2, r2, #31
 801e9f2:	bf58      	it	pl
 801e9f4:	4253      	negpl	r3, r2
 801e9f6:	3301      	adds	r3, #1
 801e9f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  buf    = 0;
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  digidx = X->used - 1;
 801ea02:	68bb      	ldr	r3, [r7, #8]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	3b01      	subs	r3, #1
 801ea08:	67bb      	str	r3, [r7, #120]	; 0x78
  bitcpy = 0;
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  bitbuf = 0;
 801ea10:	2300      	movs	r3, #0
 801ea12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  for (;;) {
    /* grab next digit as required */
    if (--bitcnt == 0) {
 801ea16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ea1a:	3b01      	subs	r3, #1
 801ea1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801ea20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d111      	bne.n	801ea4c <_fp_exptmod_nct+0x320>
      /* if digidx == -1 we are out of digits so break */
      if (digidx == -1) {
 801ea28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea2e:	f000 80ce 	beq.w	801ebce <_fp_exptmod_nct+0x4a2>
        break;
      }
      /* read next digit and reset bitcnt */
      buf    = X->dp[digidx--];
 801ea32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea34:	1e5a      	subs	r2, r3, #1
 801ea36:	67ba      	str	r2, [r7, #120]	; 0x78
 801ea38:	68ba      	ldr	r2, [r7, #8]
 801ea3a:	3302      	adds	r3, #2
 801ea3c:	009b      	lsls	r3, r3, #2
 801ea3e:	4413      	add	r3, r2
 801ea40:	685b      	ldr	r3, [r3, #4]
 801ea42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bitcnt = (int)DIGIT_BIT;
 801ea46:	2320      	movs	r3, #32
 801ea48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    /* grab the next msb from the exponent */
    y     = (int)(buf >> (DIGIT_BIT - 1)) & 1;
 801ea4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ea50:	0fdb      	lsrs	r3, r3, #31
 801ea52:	64bb      	str	r3, [r7, #72]	; 0x48
    buf <<= (fp_digit)1;
 801ea54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ea58:	005b      	lsls	r3, r3, #1
 801ea5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* if the bit is zero and mode == 0 then we ignore it
     * These represent the leading zero bits before the first 1 bit
     * in the exponent.  Technically this opt is not required but it
     * does lower the # of trivial squaring/reductions used
     */
    if (mode == 0 && y == 0) {
 801ea5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	d103      	bne.n	801ea6c <_fp_exptmod_nct+0x340>
 801ea64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	f000 80ad 	beq.w	801ebc6 <_fp_exptmod_nct+0x49a>
      continue;
    }

    /* if the bit is zero and mode == 1 then we square */
    if (mode == 1 && y == 0) {
 801ea6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ea6e:	2b01      	cmp	r3, #1
 801ea70:	d129      	bne.n	801eac6 <_fp_exptmod_nct+0x39a>
 801ea72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d126      	bne.n	801eac6 <_fp_exptmod_nct+0x39a>
      err = fp_sqr(res, res);
 801ea78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801ea7a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ea7c:	f000 fbfe 	bl	801f27c <fp_sqr>
 801ea80:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 801ea82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d009      	beq.n	801ea9c <_fp_exptmod_nct+0x370>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801ea88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ea8a:	643b      	str	r3, [r7, #64]	; 0x40
 801ea8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d002      	beq.n	801ea98 <_fp_exptmod_nct+0x36c>
 801ea92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801ea94:	f7fa f8a6 	bl	8018be4 <wolfSSL_Free>
#endif
        return err;
 801ea98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ea9a:	e11d      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
      }
      err = fp_montgomery_reduce_ex(res, P, mp, 0);
 801ea9c:	697a      	ldr	r2, [r7, #20]
 801ea9e:	2300      	movs	r3, #0
 801eaa0:	6879      	ldr	r1, [r7, #4]
 801eaa2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801eaa4:	f000 ff72 	bl	801f98c <fp_montgomery_reduce_ex>
 801eaa8:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 801eaaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	f000 808c 	beq.w	801ebca <_fp_exptmod_nct+0x49e>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801eab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eab4:	647b      	str	r3, [r7, #68]	; 0x44
 801eab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d002      	beq.n	801eac2 <_fp_exptmod_nct+0x396>
 801eabc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801eabe:	f7fa f891 	bl	8018be4 <wolfSSL_Free>
#endif
        return err;
 801eac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eac4:	e108      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
      }
      continue;
    }

    /* else we add it to the window */
    bitbuf |= (y << (winsize - ++bitcpy));
 801eac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801eaca:	3301      	adds	r3, #1
 801eacc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ead0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ead2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ead6:	1ad3      	subs	r3, r2, r3
 801ead8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801eada:	fa02 f303 	lsl.w	r3, r2, r3
 801eade:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801eae2:	4313      	orrs	r3, r2
 801eae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    mode    = 2;
 801eae8:	2302      	movs	r3, #2
 801eaea:	67fb      	str	r3, [r7, #124]	; 0x7c

    if (bitcpy == winsize) {
 801eaec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801eaf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eaf2:	429a      	cmp	r2, r3
 801eaf4:	d18f      	bne.n	801ea16 <_fp_exptmod_nct+0x2ea>
      /* ok window is filled so square as required and multiply  */
      /* square first */
      for (x = 0; x < winsize; x++) {
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	677b      	str	r3, [r7, #116]	; 0x74
 801eafa:	e028      	b.n	801eb4e <_fp_exptmod_nct+0x422>
        err = fp_sqr(res, res);
 801eafc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801eafe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801eb00:	f000 fbbc 	bl	801f27c <fp_sqr>
 801eb04:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 801eb06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d009      	beq.n	801eb20 <_fp_exptmod_nct+0x3f4>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801eb0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eb0e:	633b      	str	r3, [r7, #48]	; 0x30
 801eb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d002      	beq.n	801eb1c <_fp_exptmod_nct+0x3f0>
 801eb16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801eb18:	f7fa f864 	bl	8018be4 <wolfSSL_Free>
#endif
          return err;
 801eb1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb1e:	e0db      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
        }
        err = fp_montgomery_reduce_ex(res, P, mp, 0);
 801eb20:	697a      	ldr	r2, [r7, #20]
 801eb22:	2300      	movs	r3, #0
 801eb24:	6879      	ldr	r1, [r7, #4]
 801eb26:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801eb28:	f000 ff30 	bl	801f98c <fp_montgomery_reduce_ex>
 801eb2c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 801eb2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	d009      	beq.n	801eb48 <_fp_exptmod_nct+0x41c>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801eb34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eb36:	637b      	str	r3, [r7, #52]	; 0x34
 801eb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d002      	beq.n	801eb44 <_fp_exptmod_nct+0x418>
 801eb3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801eb40:	f7fa f850 	bl	8018be4 <wolfSSL_Free>
#endif
          return err;
 801eb44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb46:	e0c7      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
      for (x = 0; x < winsize; x++) {
 801eb48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eb4a:	3301      	adds	r3, #1
 801eb4c:	677b      	str	r3, [r7, #116]	; 0x74
 801eb4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801eb50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eb52:	429a      	cmp	r2, r3
 801eb54:	dbd2      	blt.n	801eafc <_fp_exptmod_nct+0x3d0>
        }
      }

      /* then multiply */
      err = fp_mul(res, &M[bitbuf], res);
 801eb56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801eb5a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801eb5e:	fb02 f303 	mul.w	r3, r2, r3
 801eb62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eb64:	4413      	add	r3, r2
 801eb66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801eb68:	4619      	mov	r1, r3
 801eb6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801eb6c:	f7fd fc1f 	bl	801c3ae <fp_mul>
 801eb70:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 801eb72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d009      	beq.n	801eb8c <_fp_exptmod_nct+0x460>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801eb78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eb7a:	63bb      	str	r3, [r7, #56]	; 0x38
 801eb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d002      	beq.n	801eb88 <_fp_exptmod_nct+0x45c>
 801eb82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801eb84:	f7fa f82e 	bl	8018be4 <wolfSSL_Free>
#endif
        return err;
 801eb88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb8a:	e0a5      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
      }
      err = fp_montgomery_reduce_ex(res, P, mp, 0);
 801eb8c:	697a      	ldr	r2, [r7, #20]
 801eb8e:	2300      	movs	r3, #0
 801eb90:	6879      	ldr	r1, [r7, #4]
 801eb92:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801eb94:	f000 fefa 	bl	801f98c <fp_montgomery_reduce_ex>
 801eb98:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 801eb9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d009      	beq.n	801ebb4 <_fp_exptmod_nct+0x488>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801eba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801eba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d002      	beq.n	801ebb0 <_fp_exptmod_nct+0x484>
 801ebaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ebac:	f7fa f81a 	bl	8018be4 <wolfSSL_Free>
#endif
        return err;
 801ebb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ebb2:	e091      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
      }

      /* empty window and reset */
      bitcpy = 0;
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      bitbuf = 0;
 801ebba:	2300      	movs	r3, #0
 801ebbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      mode   = 1;
 801ebc0:	2301      	movs	r3, #1
 801ebc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ebc4:	e727      	b.n	801ea16 <_fp_exptmod_nct+0x2ea>
      continue;
 801ebc6:	bf00      	nop
 801ebc8:	e725      	b.n	801ea16 <_fp_exptmod_nct+0x2ea>
      continue;
 801ebca:	bf00      	nop
    if (--bitcnt == 0) {
 801ebcc:	e723      	b.n	801ea16 <_fp_exptmod_nct+0x2ea>
        break;
 801ebce:	bf00      	nop
    }
  }

  /* if bits remain then square/multiply */
  if (mode == 2 && bitcpy > 0) {
 801ebd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ebd2:	2b02      	cmp	r3, #2
 801ebd4:	d16c      	bne.n	801ecb0 <_fp_exptmod_nct+0x584>
 801ebd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	dd68      	ble.n	801ecb0 <_fp_exptmod_nct+0x584>
    /* square then multiply if the bit is set */
    for (x = 0; x < bitcpy; x++) {
 801ebde:	2300      	movs	r3, #0
 801ebe0:	677b      	str	r3, [r7, #116]	; 0x74
 801ebe2:	e060      	b.n	801eca6 <_fp_exptmod_nct+0x57a>
      err = fp_sqr(res, res);
 801ebe4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801ebe6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ebe8:	f000 fb48 	bl	801f27c <fp_sqr>
 801ebec:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 801ebee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d009      	beq.n	801ec08 <_fp_exptmod_nct+0x4dc>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801ebf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ebf6:	653b      	str	r3, [r7, #80]	; 0x50
 801ebf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d002      	beq.n	801ec04 <_fp_exptmod_nct+0x4d8>
 801ebfe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ec00:	f7f9 fff0 	bl	8018be4 <wolfSSL_Free>
#endif
        return err;
 801ec04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec06:	e067      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
      }
      err = fp_montgomery_reduce_ex(res, P, mp, 0);
 801ec08:	697a      	ldr	r2, [r7, #20]
 801ec0a:	2300      	movs	r3, #0
 801ec0c:	6879      	ldr	r1, [r7, #4]
 801ec0e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ec10:	f000 febc 	bl	801f98c <fp_montgomery_reduce_ex>
 801ec14:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 801ec16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	d009      	beq.n	801ec30 <_fp_exptmod_nct+0x504>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801ec1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec1e:	657b      	str	r3, [r7, #84]	; 0x54
 801ec20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d002      	beq.n	801ec2c <_fp_exptmod_nct+0x500>
 801ec26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ec28:	f7f9 ffdc 	bl	8018be4 <wolfSSL_Free>
#endif
        return err;
 801ec2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec2e:	e053      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
      }

      /* get next bit of the window */
      bitbuf <<= 1;
 801ec30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ec34:	005b      	lsls	r3, r3, #1
 801ec36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      if ((bitbuf & (1 << winsize)) != 0) {
 801ec3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801ec3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ec40:	fa42 f303 	asr.w	r3, r2, r3
 801ec44:	f003 0301 	and.w	r3, r3, #1
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d029      	beq.n	801eca0 <_fp_exptmod_nct+0x574>
        /* then multiply */
        err = fp_mul(res, &M[1], res);
 801ec4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec4e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801ec52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ec54:	4619      	mov	r1, r3
 801ec56:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ec58:	f7fd fba9 	bl	801c3ae <fp_mul>
 801ec5c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 801ec5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d009      	beq.n	801ec78 <_fp_exptmod_nct+0x54c>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801ec64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec66:	65bb      	str	r3, [r7, #88]	; 0x58
 801ec68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d002      	beq.n	801ec74 <_fp_exptmod_nct+0x548>
 801ec6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ec70:	f7f9 ffb8 	bl	8018be4 <wolfSSL_Free>
#endif
          return err;
 801ec74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec76:	e02f      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
        }
        err = fp_montgomery_reduce_ex(res, P, mp, 0);
 801ec78:	697a      	ldr	r2, [r7, #20]
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	6879      	ldr	r1, [r7, #4]
 801ec7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ec80:	f000 fe84 	bl	801f98c <fp_montgomery_reduce_ex>
 801ec84:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 801ec86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d009      	beq.n	801eca0 <_fp_exptmod_nct+0x574>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801ec8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ec90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d002      	beq.n	801ec9c <_fp_exptmod_nct+0x570>
 801ec96:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ec98:	f7f9 ffa4 	bl	8018be4 <wolfSSL_Free>
#endif
          return err;
 801ec9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec9e:	e01b      	b.n	801ecd8 <_fp_exptmod_nct+0x5ac>
    for (x = 0; x < bitcpy; x++) {
 801eca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eca2:	3301      	adds	r3, #1
 801eca4:	677b      	str	r3, [r7, #116]	; 0x74
 801eca6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801eca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ecac:	429a      	cmp	r2, r3
 801ecae:	db99      	blt.n	801ebe4 <_fp_exptmod_nct+0x4b8>
   * recall that any value in a Montgomery system is
   * actually multiplied by R mod n.  So we have
   * to reduce one more time to cancel out the factor
   * of R.
   */
  err = fp_montgomery_reduce_ex(res, P, mp, 0);
 801ecb0:	697a      	ldr	r2, [r7, #20]
 801ecb2:	2300      	movs	r3, #0
 801ecb4:	6879      	ldr	r1, [r7, #4]
 801ecb6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ecb8:	f000 fe68 	bl	801f98c <fp_montgomery_reduce_ex>
 801ecbc:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* swap res with Y */
  fp_copy (res, Y);
 801ecbe:	6839      	ldr	r1, [r7, #0]
 801ecc0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801ecc2:	f001 fcc7 	bl	8020654 <fp_copy>

#ifndef WOLFSSL_NO_MALLOC
  XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 801ecc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ecc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ecca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d002      	beq.n	801ecd6 <_fp_exptmod_nct+0x5aa>
 801ecd0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ecd2:	f7f9 ff87 	bl	8018be4 <wolfSSL_Free>
#endif
  return err;
 801ecd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 801ecd8:	4618      	mov	r0, r3
 801ecda:	3790      	adds	r7, #144	; 0x90
 801ecdc:	46bd      	mov	sp, r7
 801ecde:	bd80      	pop	{r7, pc}

0801ece0 <_fp_exptmod_base_2>:
/* y = 2**x (mod b)
 * Some restrictions... x must be positive and < b
 */
static int _fp_exptmod_base_2(fp_int * X, int digits, fp_int * P,
                              fp_int * Y)
{
 801ece0:	b580      	push	{r7, lr}
 801ece2:	b09c      	sub	sp, #112	; 0x70
 801ece4:	af00      	add	r7, sp, #0
 801ece6:	60f8      	str	r0, [r7, #12]
 801ece8:	60b9      	str	r1, [r7, #8]
 801ecea:	607a      	str	r2, [r7, #4]
 801ecec:	603b      	str	r3, [r7, #0]
  fp_int   res[1];
  fp_int   tmp[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
  res = (fp_int*)XMALLOC(2*sizeof(fp_int), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ecee:	f44f 608b 	mov.w	r0, #1112	; 0x458
 801ecf2:	f7f9 ff5b 	bl	8018bac <wolfSSL_Malloc>
 801ecf6:	6578      	str	r0, [r7, #84]	; 0x54
  if (res == NULL) {
 801ecf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d102      	bne.n	801ed04 <_fp_exptmod_base_2+0x24>
     return FP_MEM;
 801ecfe:	f06f 0301 	mvn.w	r3, #1
 801ed02:	e15d      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
  }
  tmp = &res[1];
 801ed04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ed06:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801ed0a:	653b      	str	r3, [r7, #80]	; 0x50
#endif

  /* now setup montgomery  */
  if ((err = fp_montgomery_setup(P, &mp)) != FP_OKAY) {
 801ed0c:	f107 0314 	add.w	r3, r7, #20
 801ed10:	4619      	mov	r1, r3
 801ed12:	6878      	ldr	r0, [r7, #4]
 801ed14:	f000 fda7 	bl	801f866 <fp_montgomery_setup>
 801ed18:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ed1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d009      	beq.n	801ed34 <_fp_exptmod_base_2+0x54>
#ifdef WOLFSSL_SMALL_STACK
     XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ed20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ed22:	61bb      	str	r3, [r7, #24]
 801ed24:	69bb      	ldr	r3, [r7, #24]
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d002      	beq.n	801ed30 <_fp_exptmod_base_2+0x50>
 801ed2a:	69b8      	ldr	r0, [r7, #24]
 801ed2c:	f7f9 ff5a 	bl	8018be4 <wolfSSL_Free>
#endif
     return err;
 801ed30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed32:	e145      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
  }

  /* setup result */
  fp_init(res);
 801ed34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ed36:	f001 faaa 	bl	802028e <fp_init>
  fp_init(tmp);
 801ed3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ed3c:	f001 faa7 	bl	802028e <fp_init>

  err = fp_mul_2d(P, 1 << WINSIZE, tmp);
 801ed40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ed42:	2108      	movs	r1, #8
 801ed44:	6878      	ldr	r0, [r7, #4]
 801ed46:	f7fd fc88 	bl	801c65a <fp_mul_2d>
 801ed4a:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (err != FP_OKAY) {
 801ed4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d009      	beq.n	801ed66 <_fp_exptmod_base_2+0x86>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ed52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ed54:	61fb      	str	r3, [r7, #28]
 801ed56:	69fb      	ldr	r3, [r7, #28]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d002      	beq.n	801ed62 <_fp_exptmod_base_2+0x82>
 801ed5c:	69f8      	ldr	r0, [r7, #28]
 801ed5e:	f7f9 ff41 	bl	8018be4 <wolfSSL_Free>
  #endif
    return err;
 801ed62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed64:	e12c      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
  }

  /* now we need R mod m */
  err = fp_montgomery_calc_normalization(res, P);
 801ed66:	6879      	ldr	r1, [r7, #4]
 801ed68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ed6a:	f000 fdbd 	bl	801f8e8 <fp_montgomery_calc_normalization>
 801ed6e:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (err != FP_OKAY) {
 801ed70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	d009      	beq.n	801ed8a <_fp_exptmod_base_2+0xaa>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ed76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ed78:	623b      	str	r3, [r7, #32]
 801ed7a:	6a3b      	ldr	r3, [r7, #32]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d002      	beq.n	801ed86 <_fp_exptmod_base_2+0xa6>
 801ed80:	6a38      	ldr	r0, [r7, #32]
 801ed82:	f7f9 ff2f 	bl	8018be4 <wolfSSL_Free>
  #endif
    return err;
 801ed86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed88:	e11a      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
  }

  /* Get the top bits left over after taking WINSIZE bits starting at the
   * least-significant.
   */
  digidx = digits - 1;
 801ed8a:	68bb      	ldr	r3, [r7, #8]
 801ed8c:	3b01      	subs	r3, #1
 801ed8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  bitcpy = (digits * DIGIT_BIT) % WINSIZE;
 801ed90:	68bb      	ldr	r3, [r7, #8]
 801ed92:	015a      	lsls	r2, r3, #5
 801ed94:	4b8c      	ldr	r3, [pc, #560]	; (801efc8 <_fp_exptmod_base_2+0x2e8>)
 801ed96:	fb83 3102 	smull	r3, r1, r3, r2
 801ed9a:	17d3      	asrs	r3, r2, #31
 801ed9c:	1ac9      	subs	r1, r1, r3
 801ed9e:	460b      	mov	r3, r1
 801eda0:	005b      	lsls	r3, r3, #1
 801eda2:	440b      	add	r3, r1
 801eda4:	1ad3      	subs	r3, r2, r3
 801eda6:	667b      	str	r3, [r7, #100]	; 0x64
  if (bitcpy > 0) {
 801eda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801edaa:	2b00      	cmp	r3, #0
 801edac:	dd53      	ble.n	801ee56 <_fp_exptmod_base_2+0x176>
      bitcnt = (int)DIGIT_BIT - bitcpy;
 801edae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801edb0:	f1c3 0320 	rsb	r3, r3, #32
 801edb4:	663b      	str	r3, [r7, #96]	; 0x60
      buf    = X->dp[digidx--];
 801edb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801edb8:	1e5a      	subs	r2, r3, #1
 801edba:	65fa      	str	r2, [r7, #92]	; 0x5c
 801edbc:	68fa      	ldr	r2, [r7, #12]
 801edbe:	3302      	adds	r3, #2
 801edc0:	009b      	lsls	r3, r3, #2
 801edc2:	4413      	add	r3, r2
 801edc4:	685b      	ldr	r3, [r3, #4]
 801edc6:	66fb      	str	r3, [r7, #108]	; 0x6c
      bitbuf = (int)(buf >> bitcnt);
 801edc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801edca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801edcc:	fa22 f303 	lsr.w	r3, r2, r3
 801edd0:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Multiply montgomery representation of 1 by 2 ^ top */
      err = fp_mul_2d(res, bitbuf, res);
 801edd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801edd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801edd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801edd8:	f7fd fc3f 	bl	801c65a <fp_mul_2d>
 801eddc:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 801edde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d009      	beq.n	801edf8 <_fp_exptmod_base_2+0x118>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ede4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ede6:	643b      	str	r3, [r7, #64]	; 0x40
 801ede8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801edea:	2b00      	cmp	r3, #0
 801edec:	d002      	beq.n	801edf4 <_fp_exptmod_base_2+0x114>
 801edee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801edf0:	f7f9 fef8 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801edf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801edf6:	e0e3      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
      }
      err = fp_add(res, tmp, res);
 801edf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801edfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801edfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801edfe:	f7fd f8f0 	bl	801bfe2 <fp_add>
 801ee02:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 801ee04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d009      	beq.n	801ee1e <_fp_exptmod_base_2+0x13e>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ee0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee0c:	647b      	str	r3, [r7, #68]	; 0x44
 801ee0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d002      	beq.n	801ee1a <_fp_exptmod_base_2+0x13a>
 801ee14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ee16:	f7f9 fee5 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801ee1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee1c:	e0d0      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
      }
      err = fp_mod(res, P, res);
 801ee1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ee20:	6879      	ldr	r1, [r7, #4]
 801ee22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ee24:	f7fe fa56 	bl	801d2d4 <fp_mod>
 801ee28:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 801ee2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	d009      	beq.n	801ee44 <_fp_exptmod_base_2+0x164>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ee30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee32:	64bb      	str	r3, [r7, #72]	; 0x48
 801ee34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d002      	beq.n	801ee40 <_fp_exptmod_base_2+0x160>
 801ee3a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801ee3c:	f7f9 fed2 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801ee40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee42:	e0bd      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
      }
      /* Move out bits used */
      buf  <<= bitcpy;
 801ee44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ee46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ee48:	fa02 f303 	lsl.w	r3, r2, r3
 801ee4c:	66fb      	str	r3, [r7, #108]	; 0x6c
      bitcnt++;
 801ee4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ee50:	3301      	adds	r3, #1
 801ee52:	663b      	str	r3, [r7, #96]	; 0x60
 801ee54:	e003      	b.n	801ee5e <_fp_exptmod_base_2+0x17e>
  }
  else {
      bitcnt = 1;
 801ee56:	2301      	movs	r3, #1
 801ee58:	663b      	str	r3, [r7, #96]	; 0x60
      buf    = 0;
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* empty window and reset  */
  bitbuf = 0;
 801ee5e:	2300      	movs	r3, #0
 801ee60:	66bb      	str	r3, [r7, #104]	; 0x68
  bitcpy = 0;
 801ee62:	2300      	movs	r3, #0
 801ee64:	667b      	str	r3, [r7, #100]	; 0x64

  for (;;) {
    /* grab next digit as required */
    if (--bitcnt == 0) {
 801ee66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ee68:	3b01      	subs	r3, #1
 801ee6a:	663b      	str	r3, [r7, #96]	; 0x60
 801ee6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d10f      	bne.n	801ee92 <_fp_exptmod_base_2+0x1b2>
      /* if digidx == -1 we are out of digits so break */
      if (digidx == -1) {
 801ee72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee78:	f000 808d 	beq.w	801ef96 <_fp_exptmod_base_2+0x2b6>
        break;
      }
      /* read next digit and reset bitcnt */
      buf    = X->dp[digidx--];
 801ee7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee7e:	1e5a      	subs	r2, r3, #1
 801ee80:	65fa      	str	r2, [r7, #92]	; 0x5c
 801ee82:	68fa      	ldr	r2, [r7, #12]
 801ee84:	3302      	adds	r3, #2
 801ee86:	009b      	lsls	r3, r3, #2
 801ee88:	4413      	add	r3, r2
 801ee8a:	685b      	ldr	r3, [r3, #4]
 801ee8c:	66fb      	str	r3, [r7, #108]	; 0x6c
      bitcnt = (int)DIGIT_BIT;
 801ee8e:	2320      	movs	r3, #32
 801ee90:	663b      	str	r3, [r7, #96]	; 0x60
    }

    /* grab the next msb from the exponent */
    y       = (int)(buf >> (DIGIT_BIT - 1)) & 1;
 801ee92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ee94:	0fdb      	lsrs	r3, r3, #31
 801ee96:	63bb      	str	r3, [r7, #56]	; 0x38
    buf   <<= (fp_digit)1;
 801ee98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ee9a:	005b      	lsls	r3, r3, #1
 801ee9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* add bit to the window */
  #ifndef WC_PROTECT_ENCRYPTED_MEM
    bitbuf |= (y << (WINSIZE - ++bitcpy));
 801ee9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eea0:	3301      	adds	r3, #1
 801eea2:	667b      	str	r3, [r7, #100]	; 0x64
 801eea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eea6:	f1c3 0303 	rsb	r3, r3, #3
 801eeaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801eeac:	fa02 f303 	lsl.w	r3, r2, r3
 801eeb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eeb2:	4313      	orrs	r3, r2
 801eeb4:	66bb      	str	r3, [r7, #104]	; 0x68
  #else
    /* Ensure value changes even when y is zero. */
    bitbuf += (WINMASK + 1) + (y << (WINSIZE - ++bitcpy));
  #endif

    if (bitcpy == WINSIZE) {
 801eeb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eeb8:	2b03      	cmp	r3, #3
 801eeba:	d1d4      	bne.n	801ee66 <_fp_exptmod_base_2+0x186>
      /* ok window is filled so square as required and multiply  */
      /* square first */
      for (x = 0; x < WINSIZE; x++) {
 801eebc:	2300      	movs	r3, #0
 801eebe:	65bb      	str	r3, [r7, #88]	; 0x58
 801eec0:	e028      	b.n	801ef14 <_fp_exptmod_base_2+0x234>
        err = fp_sqr(res, res);
 801eec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801eec4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801eec6:	f000 f9d9 	bl	801f27c <fp_sqr>
 801eeca:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err != FP_OKAY) {
 801eecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d009      	beq.n	801eee6 <_fp_exptmod_base_2+0x206>
        #ifdef WOLFSSL_SMALL_STACK
          XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801eed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eed4:	627b      	str	r3, [r7, #36]	; 0x24
 801eed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d002      	beq.n	801eee2 <_fp_exptmod_base_2+0x202>
 801eedc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eede:	f7f9 fe81 	bl	8018be4 <wolfSSL_Free>
        #endif
          return err;
 801eee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eee4:	e06c      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
        }
        err = fp_montgomery_reduce(res, P, mp);
 801eee6:	697b      	ldr	r3, [r7, #20]
 801eee8:	461a      	mov	r2, r3
 801eeea:	6879      	ldr	r1, [r7, #4]
 801eeec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801eeee:	f000 fe81 	bl	801fbf4 <fp_montgomery_reduce>
 801eef2:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err != FP_OKAY) {
 801eef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d009      	beq.n	801ef0e <_fp_exptmod_base_2+0x22e>
        #ifdef WOLFSSL_SMALL_STACK
          XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801eefa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eefc:	62bb      	str	r3, [r7, #40]	; 0x28
 801eefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d002      	beq.n	801ef0a <_fp_exptmod_base_2+0x22a>
 801ef04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ef06:	f7f9 fe6d 	bl	8018be4 <wolfSSL_Free>
        #endif
          return err;
 801ef0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef0c:	e058      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
      for (x = 0; x < WINSIZE; x++) {
 801ef0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ef10:	3301      	adds	r3, #1
 801ef12:	65bb      	str	r3, [r7, #88]	; 0x58
 801ef14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ef16:	2b02      	cmp	r3, #2
 801ef18:	ddd3      	ble.n	801eec2 <_fp_exptmod_base_2+0x1e2>
        }
      }

      /* then multiply by 2^bitbuf */
    #ifndef WC_PROTECT_ENCRYPTED_MEM
      err = fp_mul_2d(res, bitbuf, res);
 801ef1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801ef1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ef20:	f7fd fb9b 	bl	801c65a <fp_mul_2d>
 801ef24:	64f8      	str	r0, [r7, #76]	; 0x4c
    #else
      /* Get the window bits. */
      err = fp_mul_2d(res, bitbuf & WINMASK, res);
    #endif
      if (err != FP_OKAY) {
 801ef26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d009      	beq.n	801ef40 <_fp_exptmod_base_2+0x260>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ef2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ef2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef32:	2b00      	cmp	r3, #0
 801ef34:	d002      	beq.n	801ef3c <_fp_exptmod_base_2+0x25c>
 801ef36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ef38:	f7f9 fe54 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801ef3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef3e:	e03f      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
      }
      /* Add in value to make mod operation take same time */
      err = fp_add(res, tmp, res);
 801ef40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ef44:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ef46:	f7fd f84c 	bl	801bfe2 <fp_add>
 801ef4a:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 801ef4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d009      	beq.n	801ef66 <_fp_exptmod_base_2+0x286>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ef52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ef54:	633b      	str	r3, [r7, #48]	; 0x30
 801ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d002      	beq.n	801ef62 <_fp_exptmod_base_2+0x282>
 801ef5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ef5e:	f7f9 fe41 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801ef62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef64:	e02c      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
      }
      err = fp_mod(res, P, res);
 801ef66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef68:	6879      	ldr	r1, [r7, #4]
 801ef6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ef6c:	f7fe f9b2 	bl	801d2d4 <fp_mod>
 801ef70:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 801ef72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d009      	beq.n	801ef8c <_fp_exptmod_base_2+0x2ac>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ef78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ef7a:	637b      	str	r3, [r7, #52]	; 0x34
 801ef7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d002      	beq.n	801ef88 <_fp_exptmod_base_2+0x2a8>
 801ef82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ef84:	f7f9 fe2e 	bl	8018be4 <wolfSSL_Free>
      #endif
        return err;
 801ef88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ef8a:	e019      	b.n	801efc0 <_fp_exptmod_base_2+0x2e0>
      }

      /* empty window and reset */
      bitcpy = 0;
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	667b      	str	r3, [r7, #100]	; 0x64
    #ifndef WC_PROTECT_ENCRYPTED_MEM
      bitbuf = 0;
 801ef90:	2300      	movs	r3, #0
 801ef92:	66bb      	str	r3, [r7, #104]	; 0x68
    if (--bitcnt == 0) {
 801ef94:	e767      	b.n	801ee66 <_fp_exptmod_base_2+0x186>
        break;
 801ef96:	bf00      	nop
   * recall that any value in a Montgomery system is
   * actually multiplied by R mod n.  So we have
   * to reduce one more time to cancel out the factor
   * of R.
   */
  err = fp_montgomery_reduce(res, P, mp);
 801ef98:	697b      	ldr	r3, [r7, #20]
 801ef9a:	461a      	mov	r2, r3
 801ef9c:	6879      	ldr	r1, [r7, #4]
 801ef9e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801efa0:	f000 fe28 	bl	801fbf4 <fp_montgomery_reduce>
 801efa4:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* swap res with Y */
  fp_copy(res, Y);
 801efa6:	6839      	ldr	r1, [r7, #0]
 801efa8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801efaa:	f001 fb53 	bl	8020654 <fp_copy>

#ifdef WOLFSSL_SMALL_STACK
  XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801efae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801efb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801efb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d002      	beq.n	801efbe <_fp_exptmod_base_2+0x2de>
 801efb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801efba:	f7f9 fe13 	bl	8018be4 <wolfSSL_Free>
#endif
  return err;
 801efbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801efc0:	4618      	mov	r0, r3
 801efc2:	3770      	adds	r7, #112	; 0x70
 801efc4:	46bd      	mov	sp, r7
 801efc6:	bd80      	pop	{r7, pc}
 801efc8:	55555556 	.word	0x55555556

0801efcc <fp_exptmod>:
#undef WINSIZE
#endif


int fp_exptmod(fp_int * G, fp_int * X, fp_int * P, fp_int * Y)
{
 801efcc:	b580      	push	{r7, lr}
 801efce:	b08a      	sub	sp, #40	; 0x28
 801efd0:	af02      	add	r7, sp, #8
 801efd2:	60f8      	str	r0, [r7, #12]
 801efd4:	60b9      	str	r1, [r7, #8]
 801efd6:	607a      	str	r2, [r7, #4]
 801efd8:	603b      	str	r3, [r7, #0]
   !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI)
   int x = fp_count_bits (X);
#endif

   /* handle modulus of zero and prevent overflows */
   if (fp_iszero(P) || (P->used > (FP_SIZE/2))) {
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d003      	beq.n	801efea <fp_exptmod+0x1e>
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	2b44      	cmp	r3, #68	; 0x44
 801efe8:	dd02      	ble.n	801eff0 <fp_exptmod+0x24>
      return FP_VAL;
 801efea:	f04f 33ff 	mov.w	r3, #4294967295
 801efee:	e09c      	b.n	801f12a <fp_exptmod+0x15e>
   }
   if (fp_isone(P)) {
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	681b      	ldr	r3, [r3, #0]
 801eff4:	2b01      	cmp	r3, #1
 801eff6:	d10d      	bne.n	801f014 <fp_exptmod+0x48>
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	68db      	ldr	r3, [r3, #12]
 801effc:	2b01      	cmp	r3, #1
 801effe:	d109      	bne.n	801f014 <fp_exptmod+0x48>
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	685b      	ldr	r3, [r3, #4]
 801f004:	2b00      	cmp	r3, #0
 801f006:	d105      	bne.n	801f014 <fp_exptmod+0x48>
      fp_set(Y, 0);
 801f008:	2100      	movs	r1, #0
 801f00a:	6838      	ldr	r0, [r7, #0]
 801f00c:	f000 ff43 	bl	801fe96 <fp_set>
      return FP_OKAY;
 801f010:	2300      	movs	r3, #0
 801f012:	e08a      	b.n	801f12a <fp_exptmod+0x15e>
   }
   if (fp_iszero(X)) {
 801f014:	68bb      	ldr	r3, [r7, #8]
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d105      	bne.n	801f028 <fp_exptmod+0x5c>
      fp_set(Y, 1);
 801f01c:	2101      	movs	r1, #1
 801f01e:	6838      	ldr	r0, [r7, #0]
 801f020:	f000 ff39 	bl	801fe96 <fp_set>
      return FP_OKAY;
 801f024:	2300      	movs	r3, #0
 801f026:	e080      	b.n	801f12a <fp_exptmod+0x15e>
   }
   if (fp_iszero(G)) {
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d105      	bne.n	801f03c <fp_exptmod+0x70>
      fp_set(Y, 0);
 801f030:	2100      	movs	r1, #0
 801f032:	6838      	ldr	r0, [r7, #0]
 801f034:	f000 ff2f 	bl	801fe96 <fp_set>
      return FP_OKAY;
 801f038:	2300      	movs	r3, #0
 801f03a:	e076      	b.n	801f12a <fp_exptmod+0x15e>
   if(x > EPS_RSA_EXPT_XBTIS) {
      return esp_mp_exptmod(G, X, x, P, Y);
   }
#endif

   if (X->sign == FP_NEG) {
 801f03c:	68bb      	ldr	r3, [r7, #8]
 801f03e:	685b      	ldr	r3, [r3, #4]
 801f040:	2b01      	cmp	r3, #1
 801f042:	d157      	bne.n	801f0f4 <fp_exptmod+0x128>
   #else
      fp_int *tmp;
   #endif

   #ifdef WOLFSSL_SMALL_STACK
      tmp = (fp_int*)XMALLOC(sizeof(fp_int) * 2, NULL, DYNAMIC_TYPE_BIGINT);
 801f044:	f44f 608b 	mov.w	r0, #1112	; 0x458
 801f048:	f7f9 fdb0 	bl	8018bac <wolfSSL_Malloc>
 801f04c:	61b8      	str	r0, [r7, #24]
      if (tmp == NULL)
 801f04e:	69bb      	ldr	r3, [r7, #24]
 801f050:	2b00      	cmp	r3, #0
 801f052:	d102      	bne.n	801f05a <fp_exptmod+0x8e>
          return FP_MEM;
 801f054:	f06f 0301 	mvn.w	r3, #1
 801f058:	e067      	b.n	801f12a <fp_exptmod+0x15e>
   #endif

      /* yes, copy G and invmod it */
      fp_init_copy(&tmp[0], G);
 801f05a:	68f9      	ldr	r1, [r7, #12]
 801f05c:	69b8      	ldr	r0, [r7, #24]
 801f05e:	f001 fb38 	bl	80206d2 <fp_init_copy>
      fp_init_copy(&tmp[1], P);
 801f062:	69bb      	ldr	r3, [r7, #24]
 801f064:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f068:	6879      	ldr	r1, [r7, #4]
 801f06a:	4618      	mov	r0, r3
 801f06c:	f001 fb31 	bl	80206d2 <fp_init_copy>
      tmp[1].sign = FP_ZPOS;
 801f070:	69bb      	ldr	r3, [r7, #24]
 801f072:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f076:	2200      	movs	r2, #0
 801f078:	605a      	str	r2, [r3, #4]
      err = fp_invmod(&tmp[0], &tmp[1], &tmp[0]);
 801f07a:	69bb      	ldr	r3, [r7, #24]
 801f07c:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f080:	69ba      	ldr	r2, [r7, #24]
 801f082:	4619      	mov	r1, r3
 801f084:	69b8      	ldr	r0, [r7, #24]
 801f086:	f7fe fc63 	bl	801d950 <fp_invmod>
 801f08a:	61f8      	str	r0, [r7, #28]
      if (err == FP_OKAY) {
 801f08c:	69fb      	ldr	r3, [r7, #28]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d126      	bne.n	801f0e0 <fp_exptmod+0x114>
         fp_copy(X, &tmp[1]);
 801f092:	69bb      	ldr	r3, [r7, #24]
 801f094:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f098:	4619      	mov	r1, r3
 801f09a:	68b8      	ldr	r0, [r7, #8]
 801f09c:	f001 fada 	bl	8020654 <fp_copy>
         tmp[1].sign = FP_ZPOS;
 801f0a0:	69bb      	ldr	r3, [r7, #24]
 801f0a2:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f0a6:	2200      	movs	r2, #0
 801f0a8:	605a      	str	r2, [r3, #4]
#ifdef TFM_TIMING_RESISTANT
         err =  _fp_exptmod_ct(&tmp[0], &tmp[1], tmp[1].used, P, Y);
 801f0aa:	69bb      	ldr	r3, [r7, #24]
 801f0ac:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 801f0b0:	69bb      	ldr	r3, [r7, #24]
 801f0b2:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f0b6:	681a      	ldr	r2, [r3, #0]
 801f0b8:	683b      	ldr	r3, [r7, #0]
 801f0ba:	9300      	str	r3, [sp, #0]
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	69b8      	ldr	r0, [r7, #24]
 801f0c0:	f7ff f9d4 	bl	801e46c <_fp_exptmod_ct>
 801f0c4:	61f8      	str	r0, [r7, #28]
#else
         err =  _fp_exptmod_nct(&tmp[0], &tmp[1], P, Y);
#endif
         if ((err == 0) && (P->sign == FP_NEG)) {
 801f0c6:	69fb      	ldr	r3, [r7, #28]
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d109      	bne.n	801f0e0 <fp_exptmod+0x114>
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	685b      	ldr	r3, [r3, #4]
 801f0d0:	2b01      	cmp	r3, #1
 801f0d2:	d105      	bne.n	801f0e0 <fp_exptmod+0x114>
            err = fp_add(Y, P, Y);
 801f0d4:	683a      	ldr	r2, [r7, #0]
 801f0d6:	6879      	ldr	r1, [r7, #4]
 801f0d8:	6838      	ldr	r0, [r7, #0]
 801f0da:	f7fc ff82 	bl	801bfe2 <fp_add>
 801f0de:	61f8      	str	r0, [r7, #28]
         }
      }
   #ifdef WOLFSSL_SMALL_STACK
      XFREE(tmp, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801f0e0:	69bb      	ldr	r3, [r7, #24]
 801f0e2:	617b      	str	r3, [r7, #20]
 801f0e4:	697b      	ldr	r3, [r7, #20]
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d002      	beq.n	801f0f0 <fp_exptmod+0x124>
 801f0ea:	6978      	ldr	r0, [r7, #20]
 801f0ec:	f7f9 fd7a 	bl	8018be4 <wolfSSL_Free>
   #endif
      return err;
 801f0f0:	69fb      	ldr	r3, [r7, #28]
 801f0f2:	e01a      	b.n	801f12a <fp_exptmod+0x15e>
#else
      return FP_VAL;
#endif
   }
   else if (G->used == 1 && G->dp[0] == 2) {
 801f0f4:	68fb      	ldr	r3, [r7, #12]
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	2b01      	cmp	r3, #1
 801f0fa:	d10c      	bne.n	801f116 <fp_exptmod+0x14a>
 801f0fc:	68fb      	ldr	r3, [r7, #12]
 801f0fe:	68db      	ldr	r3, [r3, #12]
 801f100:	2b02      	cmp	r3, #2
 801f102:	d108      	bne.n	801f116 <fp_exptmod+0x14a>
      return _fp_exptmod_base_2(X, X->used, P, Y);
 801f104:	68bb      	ldr	r3, [r7, #8]
 801f106:	6819      	ldr	r1, [r3, #0]
 801f108:	683b      	ldr	r3, [r7, #0]
 801f10a:	687a      	ldr	r2, [r7, #4]
 801f10c:	68b8      	ldr	r0, [r7, #8]
 801f10e:	f7ff fde7 	bl	801ece0 <_fp_exptmod_base_2>
 801f112:	4603      	mov	r3, r0
 801f114:	e009      	b.n	801f12a <fp_exptmod+0x15e>
   }
   else {
      /* Positive exponent so just exptmod */
#ifdef TFM_TIMING_RESISTANT
      return _fp_exptmod_ct(G, X, X->used, P, Y);
 801f116:	68bb      	ldr	r3, [r7, #8]
 801f118:	681a      	ldr	r2, [r3, #0]
 801f11a:	683b      	ldr	r3, [r7, #0]
 801f11c:	9300      	str	r3, [sp, #0]
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	68b9      	ldr	r1, [r7, #8]
 801f122:	68f8      	ldr	r0, [r7, #12]
 801f124:	f7ff f9a2 	bl	801e46c <_fp_exptmod_ct>
 801f128:	4603      	mov	r3, r0
#else
      return _fp_exptmod_nct(G, X, P, Y);
#endif
   }
}
 801f12a:	4618      	mov	r0, r3
 801f12c:	3720      	adds	r7, #32
 801f12e:	46bd      	mov	sp, r7
 801f130:	bd80      	pop	{r7, pc}

0801f132 <fp_exptmod_nct>:
#endif
   }
}

int fp_exptmod_nct(fp_int * G, fp_int * X, fp_int * P, fp_int * Y)
{
 801f132:	b580      	push	{r7, lr}
 801f134:	b088      	sub	sp, #32
 801f136:	af00      	add	r7, sp, #0
 801f138:	60f8      	str	r0, [r7, #12]
 801f13a:	60b9      	str	r1, [r7, #8]
 801f13c:	607a      	str	r2, [r7, #4]
 801f13e:	603b      	str	r3, [r7, #0]
#if defined(WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI) && \
   !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI)
   int x = fp_count_bits (X);
#endif

   if (fp_iszero(G)) {
 801f140:	68fb      	ldr	r3, [r7, #12]
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	2b00      	cmp	r3, #0
 801f146:	d105      	bne.n	801f154 <fp_exptmod_nct+0x22>
      fp_set(G, 0);
 801f148:	2100      	movs	r1, #0
 801f14a:	68f8      	ldr	r0, [r7, #12]
 801f14c:	f000 fea3 	bl	801fe96 <fp_set>
      return FP_OKAY;
 801f150:	2300      	movs	r3, #0
 801f152:	e060      	b.n	801f216 <fp_exptmod_nct+0xe4>
   }

   /* prevent overflows */
   if (P->used > (FP_SIZE/2)) {
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	2b44      	cmp	r3, #68	; 0x44
 801f15a:	dd02      	ble.n	801f162 <fp_exptmod_nct+0x30>
      return FP_VAL;
 801f15c:	f04f 33ff 	mov.w	r3, #4294967295
 801f160:	e059      	b.n	801f216 <fp_exptmod_nct+0xe4>
   if(x > EPS_RSA_EXPT_XBTIS) {
      return esp_mp_exptmod(G, X, x, P, Y);
   }
#endif

   if (X->sign == FP_NEG) {
 801f162:	68bb      	ldr	r3, [r7, #8]
 801f164:	685b      	ldr	r3, [r3, #4]
 801f166:	2b01      	cmp	r3, #1
 801f168:	d14e      	bne.n	801f208 <fp_exptmod_nct+0xd6>
   #else
      fp_int *tmp;
   #endif

   #ifdef WOLFSSL_SMALL_STACK
      tmp = (fp_int*)XMALLOC(sizeof(fp_int) * 2, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801f16a:	f44f 608b 	mov.w	r0, #1112	; 0x458
 801f16e:	f7f9 fd1d 	bl	8018bac <wolfSSL_Malloc>
 801f172:	61b8      	str	r0, [r7, #24]
      if (tmp == NULL)
 801f174:	69bb      	ldr	r3, [r7, #24]
 801f176:	2b00      	cmp	r3, #0
 801f178:	d102      	bne.n	801f180 <fp_exptmod_nct+0x4e>
          return FP_MEM;
 801f17a:	f06f 0301 	mvn.w	r3, #1
 801f17e:	e04a      	b.n	801f216 <fp_exptmod_nct+0xe4>
   #endif

      /* yes, copy G and invmod it */
      fp_init_copy(&tmp[0], G);
 801f180:	68f9      	ldr	r1, [r7, #12]
 801f182:	69b8      	ldr	r0, [r7, #24]
 801f184:	f001 faa5 	bl	80206d2 <fp_init_copy>
      fp_init_copy(&tmp[1], P);
 801f188:	69bb      	ldr	r3, [r7, #24]
 801f18a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f18e:	6879      	ldr	r1, [r7, #4]
 801f190:	4618      	mov	r0, r3
 801f192:	f001 fa9e 	bl	80206d2 <fp_init_copy>
      tmp[1].sign = FP_ZPOS;
 801f196:	69bb      	ldr	r3, [r7, #24]
 801f198:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f19c:	2200      	movs	r2, #0
 801f19e:	605a      	str	r2, [r3, #4]
      err = fp_invmod(&tmp[0], &tmp[1], &tmp[0]);
 801f1a0:	69bb      	ldr	r3, [r7, #24]
 801f1a2:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801f1a6:	69ba      	ldr	r2, [r7, #24]
 801f1a8:	4619      	mov	r1, r3
 801f1aa:	69b8      	ldr	r0, [r7, #24]
 801f1ac:	f7fe fbd0 	bl	801d950 <fp_invmod>
 801f1b0:	61f8      	str	r0, [r7, #28]
      if (err == FP_OKAY) {
 801f1b2:	69fb      	ldr	r3, [r7, #28]
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d11d      	bne.n	801f1f4 <fp_exptmod_nct+0xc2>
         X->sign = FP_ZPOS;
 801f1b8:	68bb      	ldr	r3, [r7, #8]
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	605a      	str	r2, [r3, #4]
         err =  _fp_exptmod_nct(&tmp[0], X, P, Y);
 801f1be:	683b      	ldr	r3, [r7, #0]
 801f1c0:	687a      	ldr	r2, [r7, #4]
 801f1c2:	68b9      	ldr	r1, [r7, #8]
 801f1c4:	69b8      	ldr	r0, [r7, #24]
 801f1c6:	f7ff fab1 	bl	801e72c <_fp_exptmod_nct>
 801f1ca:	61f8      	str	r0, [r7, #28]
         if (X != Y) {
 801f1cc:	68ba      	ldr	r2, [r7, #8]
 801f1ce:	683b      	ldr	r3, [r7, #0]
 801f1d0:	429a      	cmp	r2, r3
 801f1d2:	d002      	beq.n	801f1da <fp_exptmod_nct+0xa8>
            X->sign = FP_NEG;
 801f1d4:	68bb      	ldr	r3, [r7, #8]
 801f1d6:	2201      	movs	r2, #1
 801f1d8:	605a      	str	r2, [r3, #4]
         }
         if ((err == 0) && (P->sign == FP_NEG)) {
 801f1da:	69fb      	ldr	r3, [r7, #28]
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d109      	bne.n	801f1f4 <fp_exptmod_nct+0xc2>
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	685b      	ldr	r3, [r3, #4]
 801f1e4:	2b01      	cmp	r3, #1
 801f1e6:	d105      	bne.n	801f1f4 <fp_exptmod_nct+0xc2>
            err = fp_add(Y, P, Y);
 801f1e8:	683a      	ldr	r2, [r7, #0]
 801f1ea:	6879      	ldr	r1, [r7, #4]
 801f1ec:	6838      	ldr	r0, [r7, #0]
 801f1ee:	f7fc fef8 	bl	801bfe2 <fp_add>
 801f1f2:	61f8      	str	r0, [r7, #28]
         }
      }
   #ifdef WOLFSSL_SMALL_STACK
      XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801f1f4:	69bb      	ldr	r3, [r7, #24]
 801f1f6:	617b      	str	r3, [r7, #20]
 801f1f8:	697b      	ldr	r3, [r7, #20]
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d002      	beq.n	801f204 <fp_exptmod_nct+0xd2>
 801f1fe:	6978      	ldr	r0, [r7, #20]
 801f200:	f7f9 fcf0 	bl	8018be4 <wolfSSL_Free>
   #endif
      return err;
 801f204:	69fb      	ldr	r3, [r7, #28]
 801f206:	e006      	b.n	801f216 <fp_exptmod_nct+0xe4>
      return FP_VAL;
#endif
   }
   else {
      /* Positive exponent so just exptmod */
      return  _fp_exptmod_nct(G, X, P, Y);
 801f208:	683b      	ldr	r3, [r7, #0]
 801f20a:	687a      	ldr	r2, [r7, #4]
 801f20c:	68b9      	ldr	r1, [r7, #8]
 801f20e:	68f8      	ldr	r0, [r7, #12]
 801f210:	f7ff fa8c 	bl	801e72c <_fp_exptmod_nct>
 801f214:	4603      	mov	r3, r0
   }
}
 801f216:	4618      	mov	r0, r3
 801f218:	3720      	adds	r7, #32
 801f21a:	46bd      	mov	sp, r7
 801f21c:	bd80      	pop	{r7, pc}

0801f21e <fp_2expt>:

/* computes a = 2**b */
void fp_2expt(fp_int *a, int b)
{
 801f21e:	b580      	push	{r7, lr}
 801f220:	b084      	sub	sp, #16
 801f222:	af00      	add	r7, sp, #0
 801f224:	6078      	str	r0, [r7, #4]
 801f226:	6039      	str	r1, [r7, #0]
   int     z;

   /* zero a as per default */
   fp_zero (a);
 801f228:	6878      	ldr	r0, [r7, #4]
 801f22a:	f001 f83e 	bl	80202aa <fp_zero>

   if (b < 0) {
 801f22e:	683b      	ldr	r3, [r7, #0]
 801f230:	2b00      	cmp	r3, #0
 801f232:	db1d      	blt.n	801f270 <fp_2expt+0x52>
      return;
   }

   z = b / DIGIT_BIT;
 801f234:	683b      	ldr	r3, [r7, #0]
 801f236:	2b00      	cmp	r3, #0
 801f238:	da00      	bge.n	801f23c <fp_2expt+0x1e>
 801f23a:	331f      	adds	r3, #31
 801f23c:	115b      	asrs	r3, r3, #5
 801f23e:	60fb      	str	r3, [r7, #12]
   if (z >= FP_SIZE) {
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	2b87      	cmp	r3, #135	; 0x87
 801f244:	dc16      	bgt.n	801f274 <fp_2expt+0x56>
      return;
   }

  /* set the used count of where the bit will go */
  a->used = z + 1;
 801f246:	68fb      	ldr	r3, [r7, #12]
 801f248:	1c5a      	adds	r2, r3, #1
 801f24a:	687b      	ldr	r3, [r7, #4]
 801f24c:	601a      	str	r2, [r3, #0]

  /* put the single bit in its place */
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 801f24e:	683b      	ldr	r3, [r7, #0]
 801f250:	425a      	negs	r2, r3
 801f252:	f003 031f 	and.w	r3, r3, #31
 801f256:	f002 021f 	and.w	r2, r2, #31
 801f25a:	bf58      	it	pl
 801f25c:	4253      	negpl	r3, r2
 801f25e:	2201      	movs	r2, #1
 801f260:	409a      	lsls	r2, r3
 801f262:	6879      	ldr	r1, [r7, #4]
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	3302      	adds	r3, #2
 801f268:	009b      	lsls	r3, r3, #2
 801f26a:	440b      	add	r3, r1
 801f26c:	605a      	str	r2, [r3, #4]
 801f26e:	e002      	b.n	801f276 <fp_2expt+0x58>
      return;
 801f270:	bf00      	nop
 801f272:	e000      	b.n	801f276 <fp_2expt+0x58>
      return;
 801f274:	bf00      	nop
}
 801f276:	3710      	adds	r7, #16
 801f278:	46bd      	mov	sp, r7
 801f27a:	bd80      	pop	{r7, pc}

0801f27c <fp_sqr>:

/* b = a*a  */
int fp_sqr(fp_int *A, fp_int *B)
{
 801f27c:	b580      	push	{r7, lr}
 801f27e:	b086      	sub	sp, #24
 801f280:	af00      	add	r7, sp, #0
 801f282:	6078      	str	r0, [r7, #4]
 801f284:	6039      	str	r1, [r7, #0]
    int err;
    int y, oldused;

    oldused = B->used;
 801f286:	683b      	ldr	r3, [r7, #0]
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	60fb      	str	r3, [r7, #12]
    y = A->used;
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	613b      	str	r3, [r7, #16]

    /* error if we're out of range */
    if (y + y >= FP_SIZE) {
 801f292:	693b      	ldr	r3, [r7, #16]
 801f294:	005b      	lsls	r3, r3, #1
 801f296:	2b87      	cmp	r3, #135	; 0x87
 801f298:	dd03      	ble.n	801f2a2 <fp_sqr+0x26>
       err = FP_VAL;
 801f29a:	f04f 33ff 	mov.w	r3, #4294967295
 801f29e:	617b      	str	r3, [r7, #20]
       goto clean;
 801f2a0:	e004      	b.n	801f2ac <fp_sqr+0x30>
        if (y <= 64) {
           err = fp_sqr_comba64(A,B);
           goto clean;
        }
#endif
       err = fp_sqr_comba(A, B);
 801f2a2:	6839      	ldr	r1, [r7, #0]
 801f2a4:	6878      	ldr	r0, [r7, #4]
 801f2a6:	f000 f81b 	bl	801f2e0 <fp_sqr_comba>
 801f2aa:	6178      	str	r0, [r7, #20]

clean:
  /* zero any excess digits on the destination that we didn't write to */
  for (y = B->used; y >= 0 && y < oldused; y++) {
 801f2ac:	683b      	ldr	r3, [r7, #0]
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	613b      	str	r3, [r7, #16]
 801f2b2:	e009      	b.n	801f2c8 <fp_sqr+0x4c>
    B->dp[y] = 0;
 801f2b4:	683a      	ldr	r2, [r7, #0]
 801f2b6:	693b      	ldr	r3, [r7, #16]
 801f2b8:	3302      	adds	r3, #2
 801f2ba:	009b      	lsls	r3, r3, #2
 801f2bc:	4413      	add	r3, r2
 801f2be:	2200      	movs	r2, #0
 801f2c0:	605a      	str	r2, [r3, #4]
  for (y = B->used; y >= 0 && y < oldused; y++) {
 801f2c2:	693b      	ldr	r3, [r7, #16]
 801f2c4:	3301      	adds	r3, #1
 801f2c6:	613b      	str	r3, [r7, #16]
 801f2c8:	693b      	ldr	r3, [r7, #16]
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	db03      	blt.n	801f2d6 <fp_sqr+0x5a>
 801f2ce:	693a      	ldr	r2, [r7, #16]
 801f2d0:	68fb      	ldr	r3, [r7, #12]
 801f2d2:	429a      	cmp	r2, r3
 801f2d4:	dbee      	blt.n	801f2b4 <fp_sqr+0x38>
  }

  return err;
 801f2d6:	697b      	ldr	r3, [r7, #20]
}
 801f2d8:	4618      	mov	r0, r3
 801f2da:	3718      	adds	r7, #24
 801f2dc:	46bd      	mov	sp, r7
 801f2de:	bd80      	pop	{r7, pc}

0801f2e0 <fp_sqr_comba>:

/* generic comba squarer */
int fp_sqr_comba(fp_int *A, fp_int *B)
{
 801f2e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f2e4:	b0b6      	sub	sp, #216	; 0xd8
 801f2e6:	af00      	add	r7, sp, #0
 801f2e8:	67f8      	str	r0, [r7, #124]	; 0x7c
 801f2ea:	67b9      	str	r1, [r7, #120]	; 0x78
  int       pa, ix, iz;
  fp_digit  c0, c1, c2;
#ifdef TFM_ISO
  fp_word   tt = 0;
 801f2ec:	f04f 0200 	mov.w	r2, #0
 801f2f0:	f04f 0300 	mov.w	r3, #0
 801f2f4:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
#else
   fp_int    *tmp;
#endif

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801f2f8:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801f2fc:	f7f9 fc56 	bl	8018bac <wolfSSL_Malloc>
 801f300:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
   if (tmp == NULL)
 801f304:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f308:	2b00      	cmp	r3, #0
 801f30a:	d102      	bne.n	801f312 <fp_sqr_comba+0x32>
       return FP_MEM;
 801f30c:	f06f 0301 	mvn.w	r3, #1
 801f310:	e1f6      	b.n	801f700 <fp_sqr_comba+0x420>
#endif

  /* get size of output and trim */
  pa = A->used + A->used;
 801f312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	005b      	lsls	r3, r3, #1
 801f318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (pa >= FP_SIZE) {
 801f31c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801f320:	2b87      	cmp	r3, #135	; 0x87
 801f322:	dd02      	ble.n	801f32a <fp_sqr_comba+0x4a>
     pa = FP_SIZE-1;
 801f324:	2387      	movs	r3, #135	; 0x87
 801f326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  }

  /* number of output digits to produce */
  COMBA_START;
  COMBA_CLEAR;
 801f32a:	2300      	movs	r3, #0
 801f32c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801f330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801f33c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  if (A == B) {
 801f340:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801f342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f344:	429a      	cmp	r2, r3
 801f346:	d108      	bne.n	801f35a <fp_sqr_comba+0x7a>
     fp_init(tmp);
 801f348:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801f34c:	f000 ff9f 	bl	802028e <fp_init>
     dst = tmp;
 801f350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801f358:	e005      	b.n	801f366 <fp_sqr_comba+0x86>
  } else {
     fp_zero(B);
 801f35a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801f35c:	f000 ffa5 	bl	80202aa <fp_zero>
     dst = B;
 801f360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  }

  for (ix = 0; ix < pa; ix++) {
 801f366:	2300      	movs	r3, #0
 801f368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801f36c:	e17f      	b.n	801f66e <fp_sqr_comba+0x38e>
      int      tx, ty, iy;
      fp_digit *tmpy, *tmpx;

      /* get offsets into the two bignums */
      ty = MIN(A->used-1, ix);
 801f36e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f370:	681a      	ldr	r2, [r3, #0]
 801f372:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801f376:	4293      	cmp	r3, r2
 801f378:	db03      	blt.n	801f382 <fp_sqr_comba+0xa2>
 801f37a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	3b01      	subs	r3, #1
 801f380:	e001      	b.n	801f386 <fp_sqr_comba+0xa6>
 801f382:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801f386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      tx = ix - ty;
 801f38a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801f38e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f392:	1ad3      	subs	r3, r2, r3
 801f394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

      /* setup temp aliases */
      tmpx = A->dp + tx;
 801f398:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f39a:	f103 020c 	add.w	r2, r3, #12
 801f39e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f3a2:	009b      	lsls	r3, r3, #2
 801f3a4:	4413      	add	r3, r2
 801f3a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      tmpy = A->dp + ty;
 801f3aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f3ac:	f103 020c 	add.w	r2, r3, #12
 801f3b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f3b4:	009b      	lsls	r3, r3, #2
 801f3b6:	4413      	add	r3, r2
 801f3b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

      /* this is the number of times the loop will iterate,
         while (tx++ < a->used && ty-- >= 0) { ... }
       */
      iy = MIN(A->used-tx, ty+1);
 801f3bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f3be:	681a      	ldr	r2, [r3, #0]
 801f3c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f3c4:	1ad2      	subs	r2, r2, r3
 801f3c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f3ca:	4293      	cmp	r3, r2
 801f3cc:	db05      	blt.n	801f3da <fp_sqr_comba+0xfa>
 801f3ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f3d0:	681a      	ldr	r2, [r3, #0]
 801f3d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f3d6:	1ad3      	subs	r3, r2, r3
 801f3d8:	e002      	b.n	801f3e0 <fp_sqr_comba+0x100>
 801f3da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f3de:	3301      	adds	r3, #1
 801f3e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* now for squaring tx can never equal ty
       * we halve the distance since they approach
       * at a rate of 2x and we have to round because
       * odd cases need to be executed
       */
      iy = MIN(iy, (ty-tx+1)>>1);
 801f3e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801f3e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f3ec:	1ad3      	subs	r3, r2, r3
 801f3ee:	3301      	adds	r3, #1
 801f3f0:	105a      	asrs	r2, r3, #1
 801f3f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f3f6:	4293      	cmp	r3, r2
 801f3f8:	bfa8      	it	ge
 801f3fa:	4613      	movge	r3, r2
 801f3fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* forward carries */
      COMBA_FORWARD;
 801f400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801f404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801f408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f40c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f410:	2300      	movs	r3, #0
 801f412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

      /* execute loop */
      for (iz = 0; iz < iy; iz++) {
 801f416:	2300      	movs	r3, #0
 801f418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801f41c:	e0a9      	b.n	801f572 <fp_sqr_comba+0x292>
          SQRADD2(*tmpx++, *tmpy--);
 801f41e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801f422:	1d13      	adds	r3, r2, #4
 801f424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801f428:	6813      	ldr	r3, [r2, #0]
 801f42a:	2200      	movs	r2, #0
 801f42c:	673b      	str	r3, [r7, #112]	; 0x70
 801f42e:	677a      	str	r2, [r7, #116]	; 0x74
 801f430:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801f434:	1f13      	subs	r3, r2, #4
 801f436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801f43a:	6813      	ldr	r3, [r2, #0]
 801f43c:	2200      	movs	r2, #0
 801f43e:	66bb      	str	r3, [r7, #104]	; 0x68
 801f440:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f442:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801f446:	460b      	mov	r3, r1
 801f448:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f44a:	fb02 f203 	mul.w	r2, r2, r3
 801f44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f450:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 801f454:	4601      	mov	r1, r0
 801f456:	fb01 f303 	mul.w	r3, r1, r3
 801f45a:	4413      	add	r3, r2
 801f45c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f45e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801f460:	fba2 8901 	umull	r8, r9, r2, r1
 801f464:	444b      	add	r3, r9
 801f466:	4699      	mov	r9, r3
 801f468:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 801f46c:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 801f470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801f474:	2200      	movs	r2, #0
 801f476:	663b      	str	r3, [r7, #96]	; 0x60
 801f478:	667a      	str	r2, [r7, #100]	; 0x64
 801f47a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801f47e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801f480:	1851      	adds	r1, r2, r1
 801f482:	62b9      	str	r1, [r7, #40]	; 0x28
 801f484:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f486:	414b      	adcs	r3, r1
 801f488:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f48a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801f48e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 801f492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801f49a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801f49e:	2200      	movs	r2, #0
 801f4a0:	65bb      	str	r3, [r7, #88]	; 0x58
 801f4a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 801f4a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801f4a8:	f04f 0000 	mov.w	r0, #0
 801f4ac:	f04f 0100 	mov.w	r1, #0
 801f4b0:	0018      	movs	r0, r3
 801f4b2:	2100      	movs	r1, #0
 801f4b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f4b6:	181b      	adds	r3, r3, r0
 801f4b8:	623b      	str	r3, [r7, #32]
 801f4ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f4bc:	414b      	adcs	r3, r1
 801f4be:	627b      	str	r3, [r7, #36]	; 0x24
 801f4c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f4c4:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 801f4c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f4cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f4d0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801f4d4:	f04f 0000 	mov.w	r0, #0
 801f4d8:	f04f 0100 	mov.w	r1, #0
 801f4dc:	0018      	movs	r0, r3
 801f4de:	2100      	movs	r1, #0
 801f4e0:	4602      	mov	r2, r0
 801f4e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f4e6:	4413      	add	r3, r2
 801f4e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801f4ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801f4f0:	2200      	movs	r2, #0
 801f4f2:	653b      	str	r3, [r7, #80]	; 0x50
 801f4f4:	657a      	str	r2, [r7, #84]	; 0x54
 801f4f6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801f4fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801f4fc:	1851      	adds	r1, r2, r1
 801f4fe:	61b9      	str	r1, [r7, #24]
 801f500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f502:	414b      	adcs	r3, r1
 801f504:	61fb      	str	r3, [r7, #28]
 801f506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f50a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 801f50e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801f516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801f51a:	2200      	movs	r2, #0
 801f51c:	64bb      	str	r3, [r7, #72]	; 0x48
 801f51e:	64fa      	str	r2, [r7, #76]	; 0x4c
 801f520:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801f524:	f04f 0000 	mov.w	r0, #0
 801f528:	f04f 0100 	mov.w	r1, #0
 801f52c:	0018      	movs	r0, r3
 801f52e:	2100      	movs	r1, #0
 801f530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f532:	181b      	adds	r3, r3, r0
 801f534:	613b      	str	r3, [r7, #16]
 801f536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f538:	414b      	adcs	r3, r1
 801f53a:	617b      	str	r3, [r7, #20]
 801f53c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f540:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 801f544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f54c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801f550:	f04f 0000 	mov.w	r0, #0
 801f554:	f04f 0100 	mov.w	r1, #0
 801f558:	0018      	movs	r0, r3
 801f55a:	2100      	movs	r1, #0
 801f55c:	4602      	mov	r2, r0
 801f55e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f562:	4413      	add	r3, r2
 801f564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      for (iz = 0; iz < iy; iz++) {
 801f568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801f56c:	3301      	adds	r3, #1
 801f56e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801f572:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801f576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f57a:	429a      	cmp	r2, r3
 801f57c:	f6ff af4f 	blt.w	801f41e <fp_sqr_comba+0x13e>
      }

      /* even columns have the square term in them */
      if ((ix&1) == 0) {
 801f580:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801f584:	f003 0301 	and.w	r3, r3, #1
 801f588:	2b00      	cmp	r3, #0
 801f58a:	d161      	bne.n	801f650 <fp_sqr_comba+0x370>
          /* TAO change COMBA_ADD back to SQRADD */
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
 801f58c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801f590:	2200      	movs	r2, #0
 801f592:	63bb      	str	r3, [r7, #56]	; 0x38
 801f594:	63fa      	str	r2, [r7, #60]	; 0x3c
 801f596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801f59a:	105b      	asrs	r3, r3, #1
 801f59c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801f59e:	3302      	adds	r3, #2
 801f5a0:	009b      	lsls	r3, r3, #2
 801f5a2:	4413      	add	r3, r2
 801f5a4:	685b      	ldr	r3, [r3, #4]
 801f5a6:	2200      	movs	r2, #0
 801f5a8:	633b      	str	r3, [r7, #48]	; 0x30
 801f5aa:	637a      	str	r2, [r7, #52]	; 0x34
 801f5ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801f5b0:	105b      	asrs	r3, r3, #1
 801f5b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801f5b4:	3302      	adds	r3, #2
 801f5b6:	009b      	lsls	r3, r3, #2
 801f5b8:	4413      	add	r3, r2
 801f5ba:	685b      	ldr	r3, [r3, #4]
 801f5bc:	2200      	movs	r2, #0
 801f5be:	469a      	mov	sl, r3
 801f5c0:	4693      	mov	fp, r2
 801f5c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801f5c6:	460b      	mov	r3, r1
 801f5c8:	fb0a f203 	mul.w	r2, sl, r3
 801f5cc:	4603      	mov	r3, r0
 801f5ce:	fb03 f30b 	mul.w	r3, r3, fp
 801f5d2:	4413      	add	r3, r2
 801f5d4:	4602      	mov	r2, r0
 801f5d6:	fba2 450a 	umull	r4, r5, r2, sl
 801f5da:	442b      	add	r3, r5
 801f5dc:	461d      	mov	r5, r3
 801f5de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801f5e2:	460b      	mov	r3, r1
 801f5e4:	191b      	adds	r3, r3, r4
 801f5e6:	60bb      	str	r3, [r7, #8]
 801f5e8:	4613      	mov	r3, r2
 801f5ea:	416b      	adcs	r3, r5
 801f5ec:	60fb      	str	r3, [r7, #12]
 801f5ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801f5f2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801f5f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801f5fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801f5fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801f602:	2200      	movs	r2, #0
 801f604:	643b      	str	r3, [r7, #64]	; 0x40
 801f606:	647a      	str	r2, [r7, #68]	; 0x44
 801f608:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801f60c:	f04f 0000 	mov.w	r0, #0
 801f610:	f04f 0100 	mov.w	r1, #0
 801f614:	0018      	movs	r0, r3
 801f616:	2100      	movs	r1, #0
 801f618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f61a:	181b      	adds	r3, r3, r0
 801f61c:	603b      	str	r3, [r7, #0]
 801f61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f620:	414b      	adcs	r3, r1
 801f622:	607b      	str	r3, [r7, #4]
 801f624:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f628:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801f62c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801f630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f634:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801f638:	f04f 0000 	mov.w	r0, #0
 801f63c:	f04f 0100 	mov.w	r1, #0
 801f640:	0018      	movs	r0, r3
 801f642:	2100      	movs	r1, #0
 801f644:	4602      	mov	r2, r0
 801f646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f64a:	4413      	add	r3, r2
 801f64c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }

      /* store it */
      COMBA_STORE(dst->dp[ix]);
 801f650:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801f654:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801f658:	3302      	adds	r3, #2
 801f65a:	009a      	lsls	r2, r3, #2
 801f65c:	440a      	add	r2, r1
 801f65e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801f662:	6053      	str	r3, [r2, #4]
  for (ix = 0; ix < pa; ix++) {
 801f664:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801f668:	3301      	adds	r3, #1
 801f66a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801f66e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801f672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801f676:	429a      	cmp	r2, r3
 801f678:	f6ff ae79 	blt.w	801f36e <fp_sqr_comba+0x8e>
  }

  COMBA_FINI;

  /* setup dest */
  dst->used = pa;
 801f67c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f680:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801f684:	601a      	str	r2, [r3, #0]
  fp_clamp (dst);
 801f686:	e006      	b.n	801f696 <fp_sqr_comba+0x3b6>
 801f688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	1e5a      	subs	r2, r3, #1
 801f690:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f694:	601a      	str	r2, [r3, #0]
 801f696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	d00b      	beq.n	801f6b8 <fp_sqr_comba+0x3d8>
 801f6a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f6a4:	681b      	ldr	r3, [r3, #0]
 801f6a6:	3b01      	subs	r3, #1
 801f6a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801f6ac:	3302      	adds	r3, #2
 801f6ae:	009b      	lsls	r3, r3, #2
 801f6b0:	4413      	add	r3, r2
 801f6b2:	685b      	ldr	r3, [r3, #4]
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d0e7      	beq.n	801f688 <fp_sqr_comba+0x3a8>
 801f6b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d003      	beq.n	801f6ca <fp_sqr_comba+0x3ea>
 801f6c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f6c6:	685b      	ldr	r3, [r3, #4]
 801f6c8:	e000      	b.n	801f6cc <fp_sqr_comba+0x3ec>
 801f6ca:	2300      	movs	r3, #0
 801f6cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801f6d0:	6053      	str	r3, [r2, #4]
  if (dst != B) {
 801f6d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801f6d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f6d8:	429a      	cmp	r2, r3
 801f6da:	d004      	beq.n	801f6e6 <fp_sqr_comba+0x406>
     fp_copy(dst, B);
 801f6dc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801f6de:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801f6e2:	f000 ffb7 	bl	8020654 <fp_copy>
#ifdef TFM_ISO
  (void)tt;
#endif

#ifdef WOLFSSL_SMALL_STACK
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801f6e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f6ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801f6ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d003      	beq.n	801f6fe <fp_sqr_comba+0x41e>
 801f6f6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801f6fa:	f7f9 fa73 	bl	8018be4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 801f6fe:	2300      	movs	r3, #0
}
 801f700:	4618      	mov	r0, r3
 801f702:	37d8      	adds	r7, #216	; 0xd8
 801f704:	46bd      	mov	sp, r7
 801f706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801f70a <fp_cmp>:

int fp_cmp(fp_int *a, fp_int *b)
{
 801f70a:	b580      	push	{r7, lr}
 801f70c:	b082      	sub	sp, #8
 801f70e:	af00      	add	r7, sp, #0
 801f710:	6078      	str	r0, [r7, #4]
 801f712:	6039      	str	r1, [r7, #0]
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	685b      	ldr	r3, [r3, #4]
 801f718:	2b01      	cmp	r3, #1
 801f71a:	d106      	bne.n	801f72a <fp_cmp+0x20>
 801f71c:	683b      	ldr	r3, [r7, #0]
 801f71e:	685b      	ldr	r3, [r3, #4]
 801f720:	2b00      	cmp	r3, #0
 801f722:	d102      	bne.n	801f72a <fp_cmp+0x20>
      return FP_LT;
 801f724:	f04f 33ff 	mov.w	r3, #4294967295
 801f728:	e018      	b.n	801f75c <fp_cmp+0x52>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	685b      	ldr	r3, [r3, #4]
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d105      	bne.n	801f73e <fp_cmp+0x34>
 801f732:	683b      	ldr	r3, [r7, #0]
 801f734:	685b      	ldr	r3, [r3, #4]
 801f736:	2b01      	cmp	r3, #1
 801f738:	d101      	bne.n	801f73e <fp_cmp+0x34>
      return FP_GT;
 801f73a:	2301      	movs	r3, #1
 801f73c:	e00e      	b.n	801f75c <fp_cmp+0x52>
   } else {
      /* compare digits */
      if (a->sign == FP_NEG) {
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	685b      	ldr	r3, [r3, #4]
 801f742:	2b01      	cmp	r3, #1
 801f744:	d105      	bne.n	801f752 <fp_cmp+0x48>
         /* if negative compare opposite direction */
         return fp_cmp_mag(b, a);
 801f746:	6879      	ldr	r1, [r7, #4]
 801f748:	6838      	ldr	r0, [r7, #0]
 801f74a:	f000 f843 	bl	801f7d4 <fp_cmp_mag>
 801f74e:	4603      	mov	r3, r0
 801f750:	e004      	b.n	801f75c <fp_cmp+0x52>
      } else {
         return fp_cmp_mag(a, b);
 801f752:	6839      	ldr	r1, [r7, #0]
 801f754:	6878      	ldr	r0, [r7, #4]
 801f756:	f000 f83d 	bl	801f7d4 <fp_cmp_mag>
 801f75a:	4603      	mov	r3, r0
      }
   }
}
 801f75c:	4618      	mov	r0, r3
 801f75e:	3708      	adds	r7, #8
 801f760:	46bd      	mov	sp, r7
 801f762:	bd80      	pop	{r7, pc}

0801f764 <fp_cmp_d>:

/* compare against a single digit */
int fp_cmp_d(fp_int *a, fp_digit b)
{
 801f764:	b480      	push	{r7}
 801f766:	b083      	sub	sp, #12
 801f768:	af00      	add	r7, sp, #0
 801f76a:	6078      	str	r0, [r7, #4]
 801f76c:	6039      	str	r1, [r7, #0]
  /* special case for zero*/
  if (a->used == 0 && b == 0)
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	2b00      	cmp	r3, #0
 801f774:	d104      	bne.n	801f780 <fp_cmp_d+0x1c>
 801f776:	683b      	ldr	r3, [r7, #0]
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d101      	bne.n	801f780 <fp_cmp_d+0x1c>
    return FP_EQ;
 801f77c:	2300      	movs	r3, #0
 801f77e:	e023      	b.n	801f7c8 <fp_cmp_d+0x64>

  /* compare based on sign */
  if ((b && a->used == 0) || a->sign == FP_NEG) {
 801f780:	683b      	ldr	r3, [r7, #0]
 801f782:	2b00      	cmp	r3, #0
 801f784:	d003      	beq.n	801f78e <fp_cmp_d+0x2a>
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	681b      	ldr	r3, [r3, #0]
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d003      	beq.n	801f796 <fp_cmp_d+0x32>
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	685b      	ldr	r3, [r3, #4]
 801f792:	2b01      	cmp	r3, #1
 801f794:	d102      	bne.n	801f79c <fp_cmp_d+0x38>
    return FP_LT;
 801f796:	f04f 33ff 	mov.w	r3, #4294967295
 801f79a:	e015      	b.n	801f7c8 <fp_cmp_d+0x64>
  }

  /* compare based on magnitude */
  if (a->used > 1) {
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	681b      	ldr	r3, [r3, #0]
 801f7a0:	2b01      	cmp	r3, #1
 801f7a2:	dd01      	ble.n	801f7a8 <fp_cmp_d+0x44>
    return FP_GT;
 801f7a4:	2301      	movs	r3, #1
 801f7a6:	e00f      	b.n	801f7c8 <fp_cmp_d+0x64>
  }

  /* compare the only digit of a to b */
  if (a->dp[0] > b) {
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	68db      	ldr	r3, [r3, #12]
 801f7ac:	683a      	ldr	r2, [r7, #0]
 801f7ae:	429a      	cmp	r2, r3
 801f7b0:	d201      	bcs.n	801f7b6 <fp_cmp_d+0x52>
    return FP_GT;
 801f7b2:	2301      	movs	r3, #1
 801f7b4:	e008      	b.n	801f7c8 <fp_cmp_d+0x64>
  } else if (a->dp[0] < b) {
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	68db      	ldr	r3, [r3, #12]
 801f7ba:	683a      	ldr	r2, [r7, #0]
 801f7bc:	429a      	cmp	r2, r3
 801f7be:	d902      	bls.n	801f7c6 <fp_cmp_d+0x62>
    return FP_LT;
 801f7c0:	f04f 33ff 	mov.w	r3, #4294967295
 801f7c4:	e000      	b.n	801f7c8 <fp_cmp_d+0x64>
  } else {
    return FP_EQ;
 801f7c6:	2300      	movs	r3, #0
  }

}
 801f7c8:	4618      	mov	r0, r3
 801f7ca:	370c      	adds	r7, #12
 801f7cc:	46bd      	mov	sp, r7
 801f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7d2:	4770      	bx	lr

0801f7d4 <fp_cmp_mag>:

int fp_cmp_mag(fp_int *a, fp_int *b)
{
 801f7d4:	b480      	push	{r7}
 801f7d6:	b085      	sub	sp, #20
 801f7d8:	af00      	add	r7, sp, #0
 801f7da:	6078      	str	r0, [r7, #4]
 801f7dc:	6039      	str	r1, [r7, #0]
   int x;

   if (a->used > b->used) {
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	681a      	ldr	r2, [r3, #0]
 801f7e2:	683b      	ldr	r3, [r7, #0]
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	429a      	cmp	r2, r3
 801f7e8:	dd01      	ble.n	801f7ee <fp_cmp_mag+0x1a>
      return FP_GT;
 801f7ea:	2301      	movs	r3, #1
 801f7ec:	e035      	b.n	801f85a <fp_cmp_mag+0x86>
   } else if (a->used < b->used) {
 801f7ee:	687b      	ldr	r3, [r7, #4]
 801f7f0:	681a      	ldr	r2, [r3, #0]
 801f7f2:	683b      	ldr	r3, [r7, #0]
 801f7f4:	681b      	ldr	r3, [r3, #0]
 801f7f6:	429a      	cmp	r2, r3
 801f7f8:	da02      	bge.n	801f800 <fp_cmp_mag+0x2c>
      return FP_LT;
 801f7fa:	f04f 33ff 	mov.w	r3, #4294967295
 801f7fe:	e02c      	b.n	801f85a <fp_cmp_mag+0x86>
   } else {
      for (x = a->used - 1; x >= 0; x--) {
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	3b01      	subs	r3, #1
 801f806:	60fb      	str	r3, [r7, #12]
 801f808:	e023      	b.n	801f852 <fp_cmp_mag+0x7e>
          if (a->dp[x] > b->dp[x]) {
 801f80a:	687a      	ldr	r2, [r7, #4]
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	3302      	adds	r3, #2
 801f810:	009b      	lsls	r3, r3, #2
 801f812:	4413      	add	r3, r2
 801f814:	685a      	ldr	r2, [r3, #4]
 801f816:	6839      	ldr	r1, [r7, #0]
 801f818:	68fb      	ldr	r3, [r7, #12]
 801f81a:	3302      	adds	r3, #2
 801f81c:	009b      	lsls	r3, r3, #2
 801f81e:	440b      	add	r3, r1
 801f820:	685b      	ldr	r3, [r3, #4]
 801f822:	429a      	cmp	r2, r3
 801f824:	d901      	bls.n	801f82a <fp_cmp_mag+0x56>
             return FP_GT;
 801f826:	2301      	movs	r3, #1
 801f828:	e017      	b.n	801f85a <fp_cmp_mag+0x86>
          } else if (a->dp[x] < b->dp[x]) {
 801f82a:	687a      	ldr	r2, [r7, #4]
 801f82c:	68fb      	ldr	r3, [r7, #12]
 801f82e:	3302      	adds	r3, #2
 801f830:	009b      	lsls	r3, r3, #2
 801f832:	4413      	add	r3, r2
 801f834:	685a      	ldr	r2, [r3, #4]
 801f836:	6839      	ldr	r1, [r7, #0]
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	3302      	adds	r3, #2
 801f83c:	009b      	lsls	r3, r3, #2
 801f83e:	440b      	add	r3, r1
 801f840:	685b      	ldr	r3, [r3, #4]
 801f842:	429a      	cmp	r2, r3
 801f844:	d202      	bcs.n	801f84c <fp_cmp_mag+0x78>
             return FP_LT;
 801f846:	f04f 33ff 	mov.w	r3, #4294967295
 801f84a:	e006      	b.n	801f85a <fp_cmp_mag+0x86>
      for (x = a->used - 1; x >= 0; x--) {
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	3b01      	subs	r3, #1
 801f850:	60fb      	str	r3, [r7, #12]
 801f852:	68fb      	ldr	r3, [r7, #12]
 801f854:	2b00      	cmp	r3, #0
 801f856:	dad8      	bge.n	801f80a <fp_cmp_mag+0x36>
          }
      }
   }
   return FP_EQ;
 801f858:	2300      	movs	r3, #0
}
 801f85a:	4618      	mov	r0, r3
 801f85c:	3714      	adds	r7, #20
 801f85e:	46bd      	mov	sp, r7
 801f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f864:	4770      	bx	lr

0801f866 <fp_montgomery_setup>:


/* sets up the montgomery reduction */
int fp_montgomery_setup(fp_int *a, fp_digit *rho)
{
 801f866:	b480      	push	{r7}
 801f868:	b085      	sub	sp, #20
 801f86a:	af00      	add	r7, sp, #0
 801f86c:	6078      	str	r0, [r7, #4]
 801f86e:	6039      	str	r1, [r7, #0]
 *
 * XA = 1 (mod 2**n)  =>  (X(2-XA)) A = 1 (mod 2**2n)
 *                    =>  2*X*A - X*X*A*A = 1
 *                    =>  2*(1) - (1)     = 1
 */
  b = a->dp[0];
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	68db      	ldr	r3, [r3, #12]
 801f874:	60fb      	str	r3, [r7, #12]

  if ((b & 1) == 0) {
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	f003 0301 	and.w	r3, r3, #1
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d102      	bne.n	801f886 <fp_montgomery_setup+0x20>
    return FP_VAL;
 801f880:	f04f 33ff 	mov.w	r3, #4294967295
 801f884:	e02a      	b.n	801f8dc <fp_montgomery_setup+0x76>
  }

  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 801f886:	68fb      	ldr	r3, [r7, #12]
 801f888:	3302      	adds	r3, #2
 801f88a:	005b      	lsls	r3, r3, #1
 801f88c:	f003 0308 	and.w	r3, r3, #8
 801f890:	68fa      	ldr	r2, [r7, #12]
 801f892:	4413      	add	r3, r2
 801f894:	60bb      	str	r3, [r7, #8]
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	68ba      	ldr	r2, [r7, #8]
 801f89a:	fb02 f303 	mul.w	r3, r2, r3
 801f89e:	f1c3 0202 	rsb	r2, r3, #2
 801f8a2:	68bb      	ldr	r3, [r7, #8]
 801f8a4:	fb02 f303 	mul.w	r3, r2, r3
 801f8a8:	60bb      	str	r3, [r7, #8]
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 801f8aa:	68fb      	ldr	r3, [r7, #12]
 801f8ac:	68ba      	ldr	r2, [r7, #8]
 801f8ae:	fb02 f303 	mul.w	r3, r2, r3
 801f8b2:	f1c3 0202 	rsb	r2, r3, #2
 801f8b6:	68bb      	ldr	r3, [r7, #8]
 801f8b8:	fb02 f303 	mul.w	r3, r2, r3
 801f8bc:	60bb      	str	r3, [r7, #8]
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	68ba      	ldr	r2, [r7, #8]
 801f8c2:	fb02 f303 	mul.w	r3, r2, r3
 801f8c6:	f1c3 0202 	rsb	r2, r3, #2
 801f8ca:	68bb      	ldr	r3, [r7, #8]
 801f8cc:	fb02 f303 	mul.w	r3, r2, r3
 801f8d0:	60bb      	str	r3, [r7, #8]
#ifdef FP_64BIT
  x *= 2 - b * x;               /* here x*a==1 mod 2**64 */
#endif

  /* rho = -1/m mod b */
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
 801f8d2:	68bb      	ldr	r3, [r7, #8]
 801f8d4:	425a      	negs	r2, r3
 801f8d6:	683b      	ldr	r3, [r7, #0]
 801f8d8:	601a      	str	r2, [r3, #0]

  return FP_OKAY;
 801f8da:	2300      	movs	r3, #0
}
 801f8dc:	4618      	mov	r0, r3
 801f8de:	3714      	adds	r7, #20
 801f8e0:	46bd      	mov	sp, r7
 801f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8e6:	4770      	bx	lr

0801f8e8 <fp_montgomery_calc_normalization>:

/* computes a = B**n mod b without division or multiplication useful for
 * normalizing numbers in a Montgomery system.
 */
int fp_montgomery_calc_normalization(fp_int *a, fp_int *b)
{
 801f8e8:	b580      	push	{r7, lr}
 801f8ea:	b086      	sub	sp, #24
 801f8ec:	af00      	add	r7, sp, #0
 801f8ee:	6078      	str	r0, [r7, #4]
 801f8f0:	6039      	str	r1, [r7, #0]
  int     x, bits;

  /* how many bits of last digit does b use */
  bits = fp_count_bits (b) % DIGIT_BIT;
 801f8f2:	6838      	ldr	r0, [r7, #0]
 801f8f4:	f000 fb12 	bl	801ff1c <fp_count_bits>
 801f8f8:	4603      	mov	r3, r0
 801f8fa:	425a      	negs	r2, r3
 801f8fc:	f003 031f 	and.w	r3, r3, #31
 801f900:	f002 021f 	and.w	r2, r2, #31
 801f904:	bf58      	it	pl
 801f906:	4253      	negpl	r3, r2
 801f908:	613b      	str	r3, [r7, #16]
  if (!bits) bits = DIGIT_BIT;
 801f90a:	693b      	ldr	r3, [r7, #16]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d101      	bne.n	801f914 <fp_montgomery_calc_normalization+0x2c>
 801f910:	2320      	movs	r3, #32
 801f912:	613b      	str	r3, [r7, #16]

  /* compute A = B^(n-1) * 2^(bits-1) */
  if (b->used > 1) {
 801f914:	683b      	ldr	r3, [r7, #0]
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	2b01      	cmp	r3, #1
 801f91a:	dd0b      	ble.n	801f934 <fp_montgomery_calc_normalization+0x4c>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
 801f91c:	683b      	ldr	r3, [r7, #0]
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	3b01      	subs	r3, #1
 801f922:	015a      	lsls	r2, r3, #5
 801f924:	693b      	ldr	r3, [r7, #16]
 801f926:	4413      	add	r3, r2
 801f928:	3b01      	subs	r3, #1
 801f92a:	4619      	mov	r1, r3
 801f92c:	6878      	ldr	r0, [r7, #4]
 801f92e:	f7ff fc76 	bl	801f21e <fp_2expt>
 801f932:	e005      	b.n	801f940 <fp_montgomery_calc_normalization+0x58>
  } else {
     fp_set(a, 1);
 801f934:	2101      	movs	r1, #1
 801f936:	6878      	ldr	r0, [r7, #4]
 801f938:	f000 faad 	bl	801fe96 <fp_set>
     bits = 1;
 801f93c:	2301      	movs	r3, #1
 801f93e:	613b      	str	r3, [r7, #16]
  }

  /* now compute C = A * B mod b */
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 801f940:	693b      	ldr	r3, [r7, #16]
 801f942:	3b01      	subs	r3, #1
 801f944:	617b      	str	r3, [r7, #20]
 801f946:	e019      	b.n	801f97c <fp_montgomery_calc_normalization+0x94>
    int err = fp_mul_2 (a, a);
 801f948:	6879      	ldr	r1, [r7, #4]
 801f94a:	6878      	ldr	r0, [r7, #4]
 801f94c:	f7fc fd73 	bl	801c436 <fp_mul_2>
 801f950:	60f8      	str	r0, [r7, #12]
    if (err != FP_OKAY) {
 801f952:	68fb      	ldr	r3, [r7, #12]
 801f954:	2b00      	cmp	r3, #0
 801f956:	d001      	beq.n	801f95c <fp_montgomery_calc_normalization+0x74>
      return err;
 801f958:	68fb      	ldr	r3, [r7, #12]
 801f95a:	e013      	b.n	801f984 <fp_montgomery_calc_normalization+0x9c>
    }
    if (fp_cmp_mag (a, b) != FP_LT) {
 801f95c:	6839      	ldr	r1, [r7, #0]
 801f95e:	6878      	ldr	r0, [r7, #4]
 801f960:	f7ff ff38 	bl	801f7d4 <fp_cmp_mag>
 801f964:	4603      	mov	r3, r0
 801f966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f96a:	d004      	beq.n	801f976 <fp_montgomery_calc_normalization+0x8e>
      s_fp_sub (a, b, a);
 801f96c:	687a      	ldr	r2, [r7, #4]
 801f96e:	6839      	ldr	r1, [r7, #0]
 801f970:	6878      	ldr	r0, [r7, #4]
 801f972:	f7fc fc58 	bl	801c226 <s_fp_sub>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 801f976:	697b      	ldr	r3, [r7, #20]
 801f978:	3301      	adds	r3, #1
 801f97a:	617b      	str	r3, [r7, #20]
 801f97c:	697b      	ldr	r3, [r7, #20]
 801f97e:	2b1f      	cmp	r3, #31
 801f980:	dde2      	ble.n	801f948 <fp_montgomery_calc_normalization+0x60>
    }
  }
  return FP_OKAY;
 801f982:	2300      	movs	r3, #0
}
 801f984:	4618      	mov	r0, r3
 801f986:	3718      	adds	r7, #24
 801f988:	46bd      	mov	sp, r7
 801f98a:	bd80      	pop	{r7, pc}

0801f98c <fp_montgomery_reduce_ex>:
}
#endif

/* computes x/R == x (mod N) via Montgomery Reduction */
int fp_montgomery_reduce_ex(fp_int *a, fp_int *m, fp_digit mp, int ct)
{
 801f98c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f990:	b09a      	sub	sp, #104	; 0x68
 801f992:	af00      	add	r7, sp, #0
 801f994:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f996:	62b9      	str	r1, [r7, #40]	; 0x28
 801f998:	627a      	str	r2, [r7, #36]	; 0x24
 801f99a:	623b      	str	r3, [r7, #32]
#ifndef WOLFSSL_SMALL_STACK
   fp_digit c[FP_SIZE+1];
#else
   fp_digit *c;
#endif
   fp_digit *_c, *tmpm, mu = 0;
 801f99c:	2300      	movs	r3, #0
 801f99e:	64fb      	str	r3, [r7, #76]	; 0x4c
   int      oldused, x, y, pa, err = 0;
 801f9a0:	2300      	movs	r3, #0
 801f9a2:	64bb      	str	r3, [r7, #72]	; 0x48

   IF_HAVE_INTEL_MULX(err=fp_montgomery_reduce_mulx(a, m, mp, ct), return err) ;
   (void)err;

   /* bail if too large */
   if (m->used > (FP_SIZE/2)) {
 801f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9a6:	681b      	ldr	r3, [r3, #0]
 801f9a8:	2b44      	cmp	r3, #68	; 0x44
 801f9aa:	dd02      	ble.n	801f9b2 <fp_montgomery_reduce_ex+0x26>
      (void)mu;                     /* shut up compiler */
      return FP_VAL;
 801f9ac:	f04f 33ff 	mov.w	r3, #4294967295
 801f9b0:	e11b      	b.n	801fbea <fp_montgomery_reduce_ex+0x25e>
   }
#endif

#ifdef WOLFSSL_SMALL_STACK
   /* only allocate space for what's needed for window plus res */
   c = (fp_digit*)XMALLOC(sizeof(fp_digit)*(FP_SIZE + 1), NULL, DYNAMIC_TYPE_BIGINT);
 801f9b2:	f44f 7009 	mov.w	r0, #548	; 0x224
 801f9b6:	f7f9 f8f9 	bl	8018bac <wolfSSL_Malloc>
 801f9ba:	6478      	str	r0, [r7, #68]	; 0x44
   if (c == NULL) {
 801f9bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d102      	bne.n	801f9c8 <fp_montgomery_reduce_ex+0x3c>
      return FP_MEM;
 801f9c2:	f06f 0301 	mvn.w	r3, #1
 801f9c6:	e110      	b.n	801fbea <fp_montgomery_reduce_ex+0x25e>
   }
#endif

   /* now zero the buff */
   XMEMSET(c, 0, sizeof(fp_digit)*(FP_SIZE + 1));
 801f9c8:	f44f 7209 	mov.w	r2, #548	; 0x224
 801f9cc:	2100      	movs	r1, #0
 801f9ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f9d0:	f001 fcb0 	bl	8021334 <memset>
   pa = m->used;
 801f9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9d6:	681b      	ldr	r3, [r3, #0]
 801f9d8:	643b      	str	r3, [r7, #64]	; 0x40

   /* copy the input */
#ifdef TFM_TIMING_RESISTANT
   if (a->used <= m->used) {
 801f9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9dc:	681a      	ldr	r2, [r3, #0]
 801f9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	429a      	cmp	r2, r3
 801f9e4:	dc03      	bgt.n	801f9ee <fp_montgomery_reduce_ex+0x62>
      oldused = m->used;
 801f9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9e8:	681b      	ldr	r3, [r3, #0]
 801f9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f9ec:	e003      	b.n	801f9f6 <fp_montgomery_reduce_ex+0x6a>
   }
   else {
      oldused = m->used * 2;
 801f9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9f0:	681b      	ldr	r3, [r3, #0]
 801f9f2:	005b      	lsls	r3, r3, #1
 801f9f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   }
#else
   oldused = a->used;
#endif
   for (x = 0; x < oldused; x++) {
 801f9f6:	2300      	movs	r3, #0
 801f9f8:	65bb      	str	r3, [r7, #88]	; 0x58
 801f9fa:	e00d      	b.n	801fa18 <fp_montgomery_reduce_ex+0x8c>
       c[x] = a->dp[x];
 801f9fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f9fe:	009a      	lsls	r2, r3, #2
 801fa00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa02:	1899      	adds	r1, r3, r2
 801fa04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fa06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa08:	3302      	adds	r3, #2
 801fa0a:	009b      	lsls	r3, r3, #2
 801fa0c:	4413      	add	r3, r2
 801fa0e:	685b      	ldr	r3, [r3, #4]
 801fa10:	600b      	str	r3, [r1, #0]
   for (x = 0; x < oldused; x++) {
 801fa12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa14:	3301      	adds	r3, #1
 801fa16:	65bb      	str	r3, [r7, #88]	; 0x58
 801fa18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fa1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801fa1c:	429a      	cmp	r2, r3
 801fa1e:	dbed      	blt.n	801f9fc <fp_montgomery_reduce_ex+0x70>
   }
   MONT_START;

   for (x = 0; x < pa; x++) {
 801fa20:	2300      	movs	r3, #0
 801fa22:	65bb      	str	r3, [r7, #88]	; 0x58
 801fa24:	e07d      	b.n	801fb22 <fp_montgomery_reduce_ex+0x196>
       fp_digit cy = 0;
 801fa26:	2300      	movs	r3, #0
 801fa28:	653b      	str	r3, [r7, #80]	; 0x50
       /* get Mu for this round */
       LOOP_START;
 801fa2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa2c:	009a      	lsls	r2, r3, #2
 801fa2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa30:	4413      	add	r3, r2
 801fa32:	681a      	ldr	r2, [r3, #0]
 801fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa36:	fb02 f303 	mul.w	r3, r2, r3
 801fa3a:	64fb      	str	r3, [r7, #76]	; 0x4c
       _c   = c + x;
 801fa3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa3e:	009a      	lsls	r2, r3, #2
 801fa40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa42:	4413      	add	r3, r2
 801fa44:	667b      	str	r3, [r7, #100]	; 0x64
       tmpm = m->dp;
 801fa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa48:	330c      	adds	r3, #12
 801fa4a:	663b      	str	r3, [r7, #96]	; 0x60
       y = 0;
 801fa4c:	2300      	movs	r3, #0
 801fa4e:	657b      	str	r3, [r7, #84]	; 0x54
              INNERMUL8 ;
              _c   += 8;
              tmpm += 8;
           }
#endif
       for (; y < pa; y++) {
 801fa50:	e048      	b.n	801fae4 <fp_montgomery_reduce_ex+0x158>
          INNERMUL;
 801fa52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	2200      	movs	r2, #0
 801fa58:	61bb      	str	r3, [r7, #24]
 801fa5a:	61fa      	str	r2, [r7, #28]
 801fa5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fa5e:	2200      	movs	r2, #0
 801fa60:	613b      	str	r3, [r7, #16]
 801fa62:	617a      	str	r2, [r7, #20]
 801fa64:	69bb      	ldr	r3, [r7, #24]
 801fa66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fa6a:	4602      	mov	r2, r0
 801fa6c:	eb13 0802 	adds.w	r8, r3, r2
 801fa70:	69fb      	ldr	r3, [r7, #28]
 801fa72:	460a      	mov	r2, r1
 801fa74:	eb43 0902 	adc.w	r9, r3, r2
 801fa78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fa7a:	2200      	movs	r2, #0
 801fa7c:	469a      	mov	sl, r3
 801fa7e:	4693      	mov	fp, r2
 801fa80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fa82:	1d13      	adds	r3, r2, #4
 801fa84:	663b      	str	r3, [r7, #96]	; 0x60
 801fa86:	6813      	ldr	r3, [r2, #0]
 801fa88:	2200      	movs	r2, #0
 801fa8a:	60bb      	str	r3, [r7, #8]
 801fa8c:	60fa      	str	r2, [r7, #12]
 801fa8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801fa92:	4603      	mov	r3, r0
 801fa94:	fb03 f20b 	mul.w	r2, r3, fp
 801fa98:	460b      	mov	r3, r1
 801fa9a:	fb0a f303 	mul.w	r3, sl, r3
 801fa9e:	4413      	add	r3, r2
 801faa0:	4602      	mov	r2, r0
 801faa2:	fbaa 4502 	umull	r4, r5, sl, r2
 801faa6:	442b      	add	r3, r5
 801faa8:	461d      	mov	r5, r3
 801faaa:	eb18 0304 	adds.w	r3, r8, r4
 801faae:	603b      	str	r3, [r7, #0]
 801fab0:	eb49 0305 	adc.w	r3, r9, r5
 801fab4:	607b      	str	r3, [r7, #4]
 801fab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801faba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801fabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fac2:	601a      	str	r2, [r3, #0]
 801fac4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801fac8:	f04f 0000 	mov.w	r0, #0
 801facc:	f04f 0100 	mov.w	r1, #0
 801fad0:	0018      	movs	r0, r3
 801fad2:	2100      	movs	r1, #0
 801fad4:	4603      	mov	r3, r0
 801fad6:	653b      	str	r3, [r7, #80]	; 0x50
          ++_c;
 801fad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fada:	3304      	adds	r3, #4
 801fadc:	667b      	str	r3, [r7, #100]	; 0x64
       for (; y < pa; y++) {
 801fade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fae0:	3301      	adds	r3, #1
 801fae2:	657b      	str	r3, [r7, #84]	; 0x54
 801fae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fae8:	429a      	cmp	r2, r3
 801faea:	dbb2      	blt.n	801fa52 <fp_montgomery_reduce_ex+0xc6>
       }
       LOOP_END;
       while (cy) { /* //NOLINT(bugprone-infinite-loop) */ /* PROPCARRY is an asm macro */
 801faec:	e013      	b.n	801fb16 <fp_montgomery_reduce_ex+0x18a>
           PROPCARRY;
 801faee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801faf0:	681a      	ldr	r2, [r3, #0]
 801faf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801faf4:	441a      	add	r2, r3
 801faf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801faf8:	601a      	str	r2, [r3, #0]
 801fafa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fafc:	681b      	ldr	r3, [r3, #0]
 801fafe:	63bb      	str	r3, [r7, #56]	; 0x38
 801fb00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb04:	429a      	cmp	r2, r3
 801fb06:	bf34      	ite	cc
 801fb08:	2301      	movcc	r3, #1
 801fb0a:	2300      	movcs	r3, #0
 801fb0c:	b2db      	uxtb	r3, r3
 801fb0e:	653b      	str	r3, [r7, #80]	; 0x50
           ++_c;
 801fb10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fb12:	3304      	adds	r3, #4
 801fb14:	667b      	str	r3, [r7, #100]	; 0x64
       while (cy) { /* //NOLINT(bugprone-infinite-loop) */ /* PROPCARRY is an asm macro */
 801fb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	d1e8      	bne.n	801faee <fp_montgomery_reduce_ex+0x162>
   for (x = 0; x < pa; x++) {
 801fb1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fb1e:	3301      	adds	r3, #1
 801fb20:	65bb      	str	r3, [r7, #88]	; 0x58
 801fb22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb26:	429a      	cmp	r2, r3
 801fb28:	f6ff af7d 	blt.w	801fa26 <fp_montgomery_reduce_ex+0x9a>
       }
  }

  /* now copy out */
  _c   = c + pa;
 801fb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb2e:	009b      	lsls	r3, r3, #2
 801fb30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb32:	4413      	add	r3, r2
 801fb34:	667b      	str	r3, [r7, #100]	; 0x64
  tmpm = a->dp;
 801fb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb38:	330c      	adds	r3, #12
 801fb3a:	663b      	str	r3, [r7, #96]	; 0x60
  for (x = 0; x < pa+1; x++) {
 801fb3c:	2300      	movs	r3, #0
 801fb3e:	65bb      	str	r3, [r7, #88]	; 0x58
 801fb40:	e00a      	b.n	801fb58 <fp_montgomery_reduce_ex+0x1cc>
     *tmpm++ = *_c++;
 801fb42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801fb44:	1d13      	adds	r3, r2, #4
 801fb46:	667b      	str	r3, [r7, #100]	; 0x64
 801fb48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801fb4a:	1d19      	adds	r1, r3, #4
 801fb4c:	6639      	str	r1, [r7, #96]	; 0x60
 801fb4e:	6812      	ldr	r2, [r2, #0]
 801fb50:	601a      	str	r2, [r3, #0]
  for (x = 0; x < pa+1; x++) {
 801fb52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fb54:	3301      	adds	r3, #1
 801fb56:	65bb      	str	r3, [r7, #88]	; 0x58
 801fb58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fb5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fb5c:	429a      	cmp	r2, r3
 801fb5e:	daf0      	bge.n	801fb42 <fp_montgomery_reduce_ex+0x1b6>
  }

  /* zero any excess digits on the destination that we didn't write to */
  for (; x < oldused; x++) {
 801fb60:	e007      	b.n	801fb72 <fp_montgomery_reduce_ex+0x1e6>
     *tmpm++ = 0;
 801fb62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801fb64:	1d1a      	adds	r2, r3, #4
 801fb66:	663a      	str	r2, [r7, #96]	; 0x60
 801fb68:	2200      	movs	r2, #0
 801fb6a:	601a      	str	r2, [r3, #0]
  for (; x < oldused; x++) {
 801fb6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fb6e:	3301      	adds	r3, #1
 801fb70:	65bb      	str	r3, [r7, #88]	; 0x58
 801fb72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fb74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801fb76:	429a      	cmp	r2, r3
 801fb78:	dbf3      	blt.n	801fb62 <fp_montgomery_reduce_ex+0x1d6>
  }

  MONT_FINI;

  a->used = pa+1;
 801fb7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb7c:	1c5a      	adds	r2, r3, #1
 801fb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb80:	601a      	str	r2, [r3, #0]
  fp_clamp(a);
 801fb82:	e004      	b.n	801fb8e <fp_montgomery_reduce_ex+0x202>
 801fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	1e5a      	subs	r2, r3, #1
 801fb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb8c:	601a      	str	r2, [r3, #0]
 801fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb90:	681b      	ldr	r3, [r3, #0]
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d009      	beq.n	801fbaa <fp_montgomery_reduce_ex+0x21e>
 801fb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb98:	681b      	ldr	r3, [r3, #0]
 801fb9a:	3b01      	subs	r3, #1
 801fb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fb9e:	3302      	adds	r3, #2
 801fba0:	009b      	lsls	r3, r3, #2
 801fba2:	4413      	add	r3, r2
 801fba4:	685b      	ldr	r3, [r3, #4]
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	d0ec      	beq.n	801fb84 <fp_montgomery_reduce_ex+0x1f8>
 801fbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	d002      	beq.n	801fbb8 <fp_montgomery_reduce_ex+0x22c>
 801fbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbb4:	685b      	ldr	r3, [r3, #4]
 801fbb6:	e000      	b.n	801fbba <fp_montgomery_reduce_ex+0x22e>
 801fbb8:	2300      	movs	r3, #0
 801fbba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fbbc:	6053      	str	r3, [r2, #4]

#ifndef WOLFSSL_MONT_RED_CT
  /* if A >= m then A = A - m */
  if (fp_cmp_mag (a, m) != FP_LT) {
 801fbbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801fbc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801fbc2:	f7ff fe07 	bl	801f7d4 <fp_cmp_mag>
 801fbc6:	4603      	mov	r3, r0
 801fbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fbcc:	d004      	beq.n	801fbd8 <fp_montgomery_reduce_ex+0x24c>
    s_fp_sub (a, m, a);
 801fbce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fbd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801fbd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801fbd4:	f7fc fb27 	bl	801c226 <s_fp_sub>
    s_fp_sub (a, m, a);
  }
#endif

#ifdef WOLFSSL_SMALL_STACK
  XFREE(c, NULL, DYNAMIC_TYPE_BIGINT);
 801fbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbda:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d002      	beq.n	801fbe8 <fp_montgomery_reduce_ex+0x25c>
 801fbe2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801fbe4:	f7f8 fffe 	bl	8018be4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 801fbe8:	2300      	movs	r3, #0
}
 801fbea:	4618      	mov	r0, r3
 801fbec:	3768      	adds	r7, #104	; 0x68
 801fbee:	46bd      	mov	sp, r7
 801fbf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801fbf4 <fp_montgomery_reduce>:

int fp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
 801fbf4:	b580      	push	{r7, lr}
 801fbf6:	b084      	sub	sp, #16
 801fbf8:	af00      	add	r7, sp, #0
 801fbfa:	60f8      	str	r0, [r7, #12]
 801fbfc:	60b9      	str	r1, [r7, #8]
 801fbfe:	607a      	str	r2, [r7, #4]
  return fp_montgomery_reduce_ex(a, m, mp, 1);
 801fc00:	2301      	movs	r3, #1
 801fc02:	687a      	ldr	r2, [r7, #4]
 801fc04:	68b9      	ldr	r1, [r7, #8]
 801fc06:	68f8      	ldr	r0, [r7, #12]
 801fc08:	f7ff fec0 	bl	801f98c <fp_montgomery_reduce_ex>
 801fc0c:	4603      	mov	r3, r0
}
 801fc0e:	4618      	mov	r0, r3
 801fc10:	3710      	adds	r7, #16
 801fc12:	46bd      	mov	sp, r7
 801fc14:	bd80      	pop	{r7, pc}

0801fc16 <fp_read_unsigned_bin>:

int fp_read_unsigned_bin(fp_int *a, const unsigned char *b, int c)
{
 801fc16:	b580      	push	{r7, lr}
 801fc18:	b088      	sub	sp, #32
 801fc1a:	af00      	add	r7, sp, #0
 801fc1c:	60f8      	str	r0, [r7, #12]
 801fc1e:	60b9      	str	r1, [r7, #8]
 801fc20:	607a      	str	r2, [r7, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
  const word32 maxC = (a->size * sizeof(fp_digit));
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	689b      	ldr	r3, [r3, #8]
 801fc26:	009b      	lsls	r3, r3, #2
 801fc28:	61fb      	str	r3, [r7, #28]
#else
  const word32 maxC = (FP_SIZE * sizeof(fp_digit));
#endif

  /* zero the int */
  fp_zero (a);
 801fc2a:	68f8      	ldr	r0, [r7, #12]
 801fc2c:	f000 fb3d 	bl	80202aa <fp_zero>

  /* if input b excess max, then truncate */
  if (c > 0 && (word32)c > maxC) {
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	dd0f      	ble.n	801fc56 <fp_read_unsigned_bin+0x40>
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	69fa      	ldr	r2, [r7, #28]
 801fc3a:	429a      	cmp	r2, r3
 801fc3c:	d20b      	bcs.n	801fc56 <fp_read_unsigned_bin+0x40>
     int excess = (c - maxC);
 801fc3e:	687a      	ldr	r2, [r7, #4]
 801fc40:	69fb      	ldr	r3, [r7, #28]
 801fc42:	1ad3      	subs	r3, r2, r3
 801fc44:	61bb      	str	r3, [r7, #24]
     c -= excess;
 801fc46:	687a      	ldr	r2, [r7, #4]
 801fc48:	69bb      	ldr	r3, [r7, #24]
 801fc4a:	1ad3      	subs	r3, r2, r3
 801fc4c:	607b      	str	r3, [r7, #4]
     b += excess;
 801fc4e:	69bb      	ldr	r3, [r7, #24]
 801fc50:	68ba      	ldr	r2, [r7, #8]
 801fc52:	4413      	add	r3, r2
 801fc54:	60bb      	str	r3, [r7, #8]
    (defined(FP_32BIT) || defined(FP_64BIT))
#ifdef FP_32BIT
  /* If we know the endianness of this architecture, and we're using
     32-bit fp_digits, we can optimize this */
  {
     unsigned char *pd = (unsigned char *)a->dp;
 801fc56:	68fb      	ldr	r3, [r7, #12]
 801fc58:	330c      	adds	r3, #12
 801fc5a:	617b      	str	r3, [r7, #20]

     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
 801fc5c:	687b      	ldr	r3, [r7, #4]
 801fc5e:	3303      	adds	r3, #3
 801fc60:	089b      	lsrs	r3, r3, #2
 801fc62:	461a      	mov	r2, r3
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	601a      	str	r2, [r3, #0]
                 } while ((c -= 4) > 0);
       }
     }
#else
     /* read the bytes in one at a time. */
     for (c -= 1; c >= 0; c -= 1) {
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	3b01      	subs	r3, #1
 801fc6c:	607b      	str	r3, [r7, #4]
 801fc6e:	e00a      	b.n	801fc86 <fp_read_unsigned_bin+0x70>
       pd[c] = *b++;
 801fc70:	68bb      	ldr	r3, [r7, #8]
 801fc72:	1c5a      	adds	r2, r3, #1
 801fc74:	60ba      	str	r2, [r7, #8]
 801fc76:	687a      	ldr	r2, [r7, #4]
 801fc78:	6979      	ldr	r1, [r7, #20]
 801fc7a:	440a      	add	r2, r1
 801fc7c:	781b      	ldrb	r3, [r3, #0]
 801fc7e:	7013      	strb	r3, [r2, #0]
     for (c -= 1; c >= 0; c -= 1) {
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	3b01      	subs	r3, #1
 801fc84:	607b      	str	r3, [r7, #4]
 801fc86:	687b      	ldr	r3, [r7, #4]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	daf1      	bge.n	801fc70 <fp_read_unsigned_bin+0x5a>
     if (a->used == 0) {
         a->used = 1;
     }
  }
#endif
  fp_clamp (a);
 801fc8c:	e004      	b.n	801fc98 <fp_read_unsigned_bin+0x82>
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	681b      	ldr	r3, [r3, #0]
 801fc92:	1e5a      	subs	r2, r3, #1
 801fc94:	68fb      	ldr	r3, [r7, #12]
 801fc96:	601a      	str	r2, [r3, #0]
 801fc98:	68fb      	ldr	r3, [r7, #12]
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d009      	beq.n	801fcb4 <fp_read_unsigned_bin+0x9e>
 801fca0:	68fb      	ldr	r3, [r7, #12]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	3b01      	subs	r3, #1
 801fca6:	68fa      	ldr	r2, [r7, #12]
 801fca8:	3302      	adds	r3, #2
 801fcaa:	009b      	lsls	r3, r3, #2
 801fcac:	4413      	add	r3, r2
 801fcae:	685b      	ldr	r3, [r3, #4]
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	d0ec      	beq.n	801fc8e <fp_read_unsigned_bin+0x78>
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	681b      	ldr	r3, [r3, #0]
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d002      	beq.n	801fcc2 <fp_read_unsigned_bin+0xac>
 801fcbc:	68fb      	ldr	r3, [r7, #12]
 801fcbe:	685b      	ldr	r3, [r3, #4]
 801fcc0:	e000      	b.n	801fcc4 <fp_read_unsigned_bin+0xae>
 801fcc2:	2300      	movs	r3, #0
 801fcc4:	68fa      	ldr	r2, [r7, #12]
 801fcc6:	6053      	str	r3, [r2, #4]

  return FP_OKAY;
 801fcc8:	2300      	movs	r3, #0
}
 801fcca:	4618      	mov	r0, r3
 801fccc:	3720      	adds	r7, #32
 801fcce:	46bd      	mov	sp, r7
 801fcd0:	bd80      	pop	{r7, pc}

0801fcd2 <fp_to_unsigned_bin_at_pos>:

int fp_to_unsigned_bin_at_pos(int x, fp_int *t, unsigned char *b)
{
 801fcd2:	b480      	push	{r7}
 801fcd4:	b089      	sub	sp, #36	; 0x24
 801fcd6:	af00      	add	r7, sp, #0
 801fcd8:	60f8      	str	r0, [r7, #12]
 801fcda:	60b9      	str	r1, [r7, #8]
 801fcdc:	607a      	str	r2, [r7, #4]
#if DIGIT_BIT == 64 || DIGIT_BIT == 32
   int i;
   int j = 0;
 801fcde:	2300      	movs	r3, #0
 801fce0:	61bb      	str	r3, [r7, #24]
   fp_digit n;

   for (i = 0; i < t->used-1; ) {
 801fce2:	2300      	movs	r3, #0
 801fce4:	61fb      	str	r3, [r7, #28]
 801fce6:	e021      	b.n	801fd2c <fp_to_unsigned_bin_at_pos+0x5a>
       b[x++] = (unsigned char)(t->dp[i] >> j);
 801fce8:	68ba      	ldr	r2, [r7, #8]
 801fcea:	69fb      	ldr	r3, [r7, #28]
 801fcec:	3302      	adds	r3, #2
 801fcee:	009b      	lsls	r3, r3, #2
 801fcf0:	4413      	add	r3, r2
 801fcf2:	685a      	ldr	r2, [r3, #4]
 801fcf4:	69bb      	ldr	r3, [r7, #24]
 801fcf6:	fa22 f103 	lsr.w	r1, r2, r3
 801fcfa:	68fb      	ldr	r3, [r7, #12]
 801fcfc:	1c5a      	adds	r2, r3, #1
 801fcfe:	60fa      	str	r2, [r7, #12]
 801fd00:	461a      	mov	r2, r3
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	4413      	add	r3, r2
 801fd06:	b2ca      	uxtb	r2, r1
 801fd08:	701a      	strb	r2, [r3, #0]
       j += 8;
 801fd0a:	69bb      	ldr	r3, [r7, #24]
 801fd0c:	3308      	adds	r3, #8
 801fd0e:	61bb      	str	r3, [r7, #24]
       i += j == DIGIT_BIT;
 801fd10:	69bb      	ldr	r3, [r7, #24]
 801fd12:	2b20      	cmp	r3, #32
 801fd14:	bf0c      	ite	eq
 801fd16:	2301      	moveq	r3, #1
 801fd18:	2300      	movne	r3, #0
 801fd1a:	b2db      	uxtb	r3, r3
 801fd1c:	461a      	mov	r2, r3
 801fd1e:	69fb      	ldr	r3, [r7, #28]
 801fd20:	4413      	add	r3, r2
 801fd22:	61fb      	str	r3, [r7, #28]
       j &= DIGIT_BIT - 1;
 801fd24:	69bb      	ldr	r3, [r7, #24]
 801fd26:	f003 031f 	and.w	r3, r3, #31
 801fd2a:	61bb      	str	r3, [r7, #24]
   for (i = 0; i < t->used-1; ) {
 801fd2c:	68bb      	ldr	r3, [r7, #8]
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	3b01      	subs	r3, #1
 801fd32:	69fa      	ldr	r2, [r7, #28]
 801fd34:	429a      	cmp	r2, r3
 801fd36:	dbd7      	blt.n	801fce8 <fp_to_unsigned_bin_at_pos+0x16>
   }
   n = t->dp[i];
 801fd38:	68ba      	ldr	r2, [r7, #8]
 801fd3a:	69fb      	ldr	r3, [r7, #28]
 801fd3c:	3302      	adds	r3, #2
 801fd3e:	009b      	lsls	r3, r3, #2
 801fd40:	4413      	add	r3, r2
 801fd42:	685b      	ldr	r3, [r3, #4]
 801fd44:	617b      	str	r3, [r7, #20]
   while (n != 0) {
 801fd46:	e00b      	b.n	801fd60 <fp_to_unsigned_bin_at_pos+0x8e>
       b[x++] = (unsigned char)n;
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	1c5a      	adds	r2, r3, #1
 801fd4c:	60fa      	str	r2, [r7, #12]
 801fd4e:	461a      	mov	r2, r3
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	4413      	add	r3, r2
 801fd54:	697a      	ldr	r2, [r7, #20]
 801fd56:	b2d2      	uxtb	r2, r2
 801fd58:	701a      	strb	r2, [r3, #0]
       n >>= 8;
 801fd5a:	697b      	ldr	r3, [r7, #20]
 801fd5c:	0a1b      	lsrs	r3, r3, #8
 801fd5e:	617b      	str	r3, [r7, #20]
   while (n != 0) {
 801fd60:	697b      	ldr	r3, [r7, #20]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d1f0      	bne.n	801fd48 <fp_to_unsigned_bin_at_pos+0x76>
   }
   return x;
 801fd66:	68fb      	ldr	r3, [r7, #12]
      b[x++] = (unsigned char) (t->dp[0] & 255);
      fp_div_2d (t, 8, t, NULL);
  }
  return x;
#endif
}
 801fd68:	4618      	mov	r0, r3
 801fd6a:	3724      	adds	r7, #36	; 0x24
 801fd6c:	46bd      	mov	sp, r7
 801fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd72:	4770      	bx	lr

0801fd74 <fp_to_unsigned_bin>:

int fp_to_unsigned_bin(fp_int *a, unsigned char *b)
{
 801fd74:	b580      	push	{r7, lr}
 801fd76:	b086      	sub	sp, #24
 801fd78:	af00      	add	r7, sp, #0
 801fd7a:	6078      	str	r0, [r7, #4]
 801fd7c:	6039      	str	r1, [r7, #0]
#else
   fp_int *t;
#endif

#ifdef WOLFSSL_SMALL_STACK
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801fd7e:	f44f 700b 	mov.w	r0, #556	; 0x22c
 801fd82:	f7f8 ff13 	bl	8018bac <wolfSSL_Malloc>
 801fd86:	6178      	str	r0, [r7, #20]
   if (t == NULL)
 801fd88:	697b      	ldr	r3, [r7, #20]
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	d102      	bne.n	801fd94 <fp_to_unsigned_bin+0x20>
       return FP_MEM;
 801fd8e:	f06f 0301 	mvn.w	r3, #1
 801fd92:	e016      	b.n	801fdc2 <fp_to_unsigned_bin+0x4e>
#endif

  fp_init_copy(t, a);
 801fd94:	6879      	ldr	r1, [r7, #4]
 801fd96:	6978      	ldr	r0, [r7, #20]
 801fd98:	f000 fc9b 	bl	80206d2 <fp_init_copy>

  x = fp_to_unsigned_bin_at_pos(0, t, b);
 801fd9c:	683a      	ldr	r2, [r7, #0]
 801fd9e:	6979      	ldr	r1, [r7, #20]
 801fda0:	2000      	movs	r0, #0
 801fda2:	f7ff ff96 	bl	801fcd2 <fp_to_unsigned_bin_at_pos>
 801fda6:	6138      	str	r0, [r7, #16]
  mp_reverse (b, x);
 801fda8:	6939      	ldr	r1, [r7, #16]
 801fdaa:	6838      	ldr	r0, [r7, #0]
 801fdac:	f001 f900 	bl	8020fb0 <mp_reverse>

#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801fdb0:	697b      	ldr	r3, [r7, #20]
 801fdb2:	60fb      	str	r3, [r7, #12]
 801fdb4:	68fb      	ldr	r3, [r7, #12]
 801fdb6:	2b00      	cmp	r3, #0
 801fdb8:	d002      	beq.n	801fdc0 <fp_to_unsigned_bin+0x4c>
 801fdba:	68f8      	ldr	r0, [r7, #12]
 801fdbc:	f7f8 ff12 	bl	8018be4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 801fdc0:	2300      	movs	r3, #0
}
 801fdc2:	4618      	mov	r0, r3
 801fdc4:	3718      	adds	r7, #24
 801fdc6:	46bd      	mov	sp, r7
 801fdc8:	bd80      	pop	{r7, pc}

0801fdca <fp_to_unsigned_bin_len>:

int fp_to_unsigned_bin_len(fp_int *a, unsigned char *b, int c)
{
 801fdca:	b480      	push	{r7}
 801fdcc:	b089      	sub	sp, #36	; 0x24
 801fdce:	af00      	add	r7, sp, #0
 801fdd0:	60f8      	str	r0, [r7, #12]
 801fdd2:	60b9      	str	r1, [r7, #8]
 801fdd4:	607a      	str	r2, [r7, #4]
#if DIGIT_BIT == 64 || DIGIT_BIT == 32
  int i = 0;
 801fdd6:	2300      	movs	r3, #0
 801fdd8:	61fb      	str	r3, [r7, #28]
  int j = 0;
 801fdda:	2300      	movs	r3, #0
 801fddc:	61bb      	str	r3, [r7, #24]
  int x;

  for (x=c-1; x >= 0 && i < a->used; x--) {
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	3b01      	subs	r3, #1
 801fde2:	617b      	str	r3, [r7, #20]
 801fde4:	e021      	b.n	801fe2a <fp_to_unsigned_bin_len+0x60>
     b[x] = (unsigned char)(a->dp[i] >> j);
 801fde6:	68fa      	ldr	r2, [r7, #12]
 801fde8:	69fb      	ldr	r3, [r7, #28]
 801fdea:	3302      	adds	r3, #2
 801fdec:	009b      	lsls	r3, r3, #2
 801fdee:	4413      	add	r3, r2
 801fdf0:	685a      	ldr	r2, [r3, #4]
 801fdf2:	69bb      	ldr	r3, [r7, #24]
 801fdf4:	fa22 f103 	lsr.w	r1, r2, r3
 801fdf8:	697b      	ldr	r3, [r7, #20]
 801fdfa:	68ba      	ldr	r2, [r7, #8]
 801fdfc:	4413      	add	r3, r2
 801fdfe:	b2ca      	uxtb	r2, r1
 801fe00:	701a      	strb	r2, [r3, #0]
     j += 8;
 801fe02:	69bb      	ldr	r3, [r7, #24]
 801fe04:	3308      	adds	r3, #8
 801fe06:	61bb      	str	r3, [r7, #24]
     i += j == DIGIT_BIT;
 801fe08:	69bb      	ldr	r3, [r7, #24]
 801fe0a:	2b20      	cmp	r3, #32
 801fe0c:	bf0c      	ite	eq
 801fe0e:	2301      	moveq	r3, #1
 801fe10:	2300      	movne	r3, #0
 801fe12:	b2db      	uxtb	r3, r3
 801fe14:	461a      	mov	r2, r3
 801fe16:	69fb      	ldr	r3, [r7, #28]
 801fe18:	4413      	add	r3, r2
 801fe1a:	61fb      	str	r3, [r7, #28]
     j &= DIGIT_BIT - 1;
 801fe1c:	69bb      	ldr	r3, [r7, #24]
 801fe1e:	f003 031f 	and.w	r3, r3, #31
 801fe22:	61bb      	str	r3, [r7, #24]
  for (x=c-1; x >= 0 && i < a->used; x--) {
 801fe24:	697b      	ldr	r3, [r7, #20]
 801fe26:	3b01      	subs	r3, #1
 801fe28:	617b      	str	r3, [r7, #20]
 801fe2a:	697b      	ldr	r3, [r7, #20]
 801fe2c:	2b00      	cmp	r3, #0
 801fe2e:	db0d      	blt.n	801fe4c <fp_to_unsigned_bin_len+0x82>
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	681b      	ldr	r3, [r3, #0]
 801fe34:	69fa      	ldr	r2, [r7, #28]
 801fe36:	429a      	cmp	r2, r3
 801fe38:	dbd5      	blt.n	801fde6 <fp_to_unsigned_bin_len+0x1c>
  }
  for (; x >= 0; x--) {
 801fe3a:	e007      	b.n	801fe4c <fp_to_unsigned_bin_len+0x82>
     b[x] = 0;
 801fe3c:	697b      	ldr	r3, [r7, #20]
 801fe3e:	68ba      	ldr	r2, [r7, #8]
 801fe40:	4413      	add	r3, r2
 801fe42:	2200      	movs	r2, #0
 801fe44:	701a      	strb	r2, [r3, #0]
  for (; x >= 0; x--) {
 801fe46:	697b      	ldr	r3, [r7, #20]
 801fe48:	3b01      	subs	r3, #1
 801fe4a:	617b      	str	r3, [r7, #20]
 801fe4c:	697b      	ldr	r3, [r7, #20]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	daf4      	bge.n	801fe3c <fp_to_unsigned_bin_len+0x72>
  }

  return FP_OKAY;
 801fe52:	2300      	movs	r3, #0
#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
#endif
  return FP_OKAY;
#endif
}
 801fe54:	4618      	mov	r0, r3
 801fe56:	3724      	adds	r7, #36	; 0x24
 801fe58:	46bd      	mov	sp, r7
 801fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe5e:	4770      	bx	lr

0801fe60 <fp_unsigned_bin_size>:

int fp_unsigned_bin_size(const fp_int *a)
{
 801fe60:	b580      	push	{r7, lr}
 801fe62:	b084      	sub	sp, #16
 801fe64:	af00      	add	r7, sp, #0
 801fe66:	6078      	str	r0, [r7, #4]
  int     size = fp_count_bits (a);
 801fe68:	6878      	ldr	r0, [r7, #4]
 801fe6a:	f000 f857 	bl	801ff1c <fp_count_bits>
 801fe6e:	60f8      	str	r0, [r7, #12]
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	da00      	bge.n	801fe78 <fp_unsigned_bin_size+0x18>
 801fe76:	3307      	adds	r3, #7
 801fe78:	10db      	asrs	r3, r3, #3
 801fe7a:	461a      	mov	r2, r3
 801fe7c:	68fb      	ldr	r3, [r7, #12]
 801fe7e:	f003 0307 	and.w	r3, r3, #7
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	bf14      	ite	ne
 801fe86:	2301      	movne	r3, #1
 801fe88:	2300      	moveq	r3, #0
 801fe8a:	b2db      	uxtb	r3, r3
 801fe8c:	4413      	add	r3, r2
}
 801fe8e:	4618      	mov	r0, r3
 801fe90:	3710      	adds	r7, #16
 801fe92:	46bd      	mov	sp, r7
 801fe94:	bd80      	pop	{r7, pc}

0801fe96 <fp_set>:

void fp_set(fp_int *a, fp_digit b)
{
 801fe96:	b580      	push	{r7, lr}
 801fe98:	b082      	sub	sp, #8
 801fe9a:	af00      	add	r7, sp, #0
 801fe9c:	6078      	str	r0, [r7, #4]
 801fe9e:	6039      	str	r1, [r7, #0]
   fp_zero(a);
 801fea0:	6878      	ldr	r0, [r7, #4]
 801fea2:	f000 fa02 	bl	80202aa <fp_zero>
   a->dp[0] = b;
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	683a      	ldr	r2, [r7, #0]
 801feaa:	60da      	str	r2, [r3, #12]
   a->used  = a->dp[0] ? 1 : 0;
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	68db      	ldr	r3, [r3, #12]
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	bf14      	ite	ne
 801feb4:	2301      	movne	r3, #1
 801feb6:	2300      	moveq	r3, #0
 801feb8:	b2db      	uxtb	r3, r3
 801feba:	461a      	mov	r2, r3
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	601a      	str	r2, [r3, #0]
}
 801fec0:	bf00      	nop
 801fec2:	3708      	adds	r7, #8
 801fec4:	46bd      	mov	sp, r7
 801fec6:	bd80      	pop	{r7, pc}

0801fec8 <fp_is_bit_set>:
  return FP_OKAY;
}

/* check if a bit is set */
int fp_is_bit_set (fp_int *a, fp_digit b)
{
 801fec8:	b480      	push	{r7}
 801feca:	b085      	sub	sp, #20
 801fecc:	af00      	add	r7, sp, #0
 801fece:	6078      	str	r0, [r7, #4]
 801fed0:	6039      	str	r1, [r7, #0]
    fp_digit i;

    if (b > FP_MAX_BITS)
 801fed2:	683b      	ldr	r3, [r7, #0]
 801fed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fed8:	d902      	bls.n	801fee0 <fp_is_bit_set+0x18>
        return FP_VAL;
 801feda:	f04f 33ff 	mov.w	r3, #4294967295
 801fede:	e017      	b.n	801ff10 <fp_is_bit_set+0x48>

    i = b/DIGIT_BIT;
 801fee0:	683b      	ldr	r3, [r7, #0]
 801fee2:	095b      	lsrs	r3, r3, #5
 801fee4:	60fb      	str	r3, [r7, #12]

    if ((fp_digit)a->used < i)
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	681b      	ldr	r3, [r3, #0]
 801feea:	461a      	mov	r2, r3
 801feec:	68fb      	ldr	r3, [r7, #12]
 801feee:	4293      	cmp	r3, r2
 801fef0:	d901      	bls.n	801fef6 <fp_is_bit_set+0x2e>
        return 0;
 801fef2:	2300      	movs	r3, #0
 801fef4:	e00c      	b.n	801ff10 <fp_is_bit_set+0x48>

    return (int)((a->dp[i] >> b%DIGIT_BIT) & (fp_digit)1);
 801fef6:	687a      	ldr	r2, [r7, #4]
 801fef8:	68fb      	ldr	r3, [r7, #12]
 801fefa:	3302      	adds	r3, #2
 801fefc:	009b      	lsls	r3, r3, #2
 801fefe:	4413      	add	r3, r2
 801ff00:	685a      	ldr	r2, [r3, #4]
 801ff02:	683b      	ldr	r3, [r7, #0]
 801ff04:	f003 031f 	and.w	r3, r3, #31
 801ff08:	fa22 f303 	lsr.w	r3, r2, r3
 801ff0c:	f003 0301 	and.w	r3, r3, #1
}
 801ff10:	4618      	mov	r0, r3
 801ff12:	3714      	adds	r7, #20
 801ff14:	46bd      	mov	sp, r7
 801ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff1a:	4770      	bx	lr

0801ff1c <fp_count_bits>:

    return MP_OKAY;
}

int fp_count_bits (const fp_int * a)
{
 801ff1c:	b480      	push	{r7}
 801ff1e:	b085      	sub	sp, #20
 801ff20:	af00      	add	r7, sp, #0
 801ff22:	6078      	str	r0, [r7, #4]
  int     r;
  fp_digit q;

  /* shortcut */
  if (a->used == 0) {
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d101      	bne.n	801ff30 <fp_count_bits+0x14>
    return 0;
 801ff2c:	2300      	movs	r3, #0
 801ff2e:	e018      	b.n	801ff62 <fp_count_bits+0x46>
  }

  /* get number of digits and add that */
  r = (a->used - 1) * DIGIT_BIT;
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	3b01      	subs	r3, #1
 801ff36:	015b      	lsls	r3, r3, #5
 801ff38:	60fb      	str	r3, [r7, #12]

  /* take the last digit and count the bits in it */
  q = a->dp[a->used - 1];
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	3b01      	subs	r3, #1
 801ff40:	687a      	ldr	r2, [r7, #4]
 801ff42:	3302      	adds	r3, #2
 801ff44:	009b      	lsls	r3, r3, #2
 801ff46:	4413      	add	r3, r2
 801ff48:	685b      	ldr	r3, [r3, #4]
 801ff4a:	60bb      	str	r3, [r7, #8]
  while (q > ((fp_digit) 0)) {
 801ff4c:	e005      	b.n	801ff5a <fp_count_bits+0x3e>
    ++r;
 801ff4e:	68fb      	ldr	r3, [r7, #12]
 801ff50:	3301      	adds	r3, #1
 801ff52:	60fb      	str	r3, [r7, #12]
    q >>= ((fp_digit) 1);
 801ff54:	68bb      	ldr	r3, [r7, #8]
 801ff56:	085b      	lsrs	r3, r3, #1
 801ff58:	60bb      	str	r3, [r7, #8]
  while (q > ((fp_digit) 0)) {
 801ff5a:	68bb      	ldr	r3, [r7, #8]
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d1f6      	bne.n	801ff4e <fp_count_bits+0x32>
  }

  return r;
 801ff60:	68fb      	ldr	r3, [r7, #12]
}
 801ff62:	4618      	mov	r0, r3
 801ff64:	3714      	adds	r7, #20
 801ff66:	46bd      	mov	sp, r7
 801ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff6c:	4770      	bx	lr

0801ff6e <fp_lshd>:

    return bit;
}

int fp_lshd(fp_int *a, int x)
{
 801ff6e:	b480      	push	{r7}
 801ff70:	b085      	sub	sp, #20
 801ff72:	af00      	add	r7, sp, #0
 801ff74:	6078      	str	r0, [r7, #4]
 801ff76:	6039      	str	r1, [r7, #0]
    int y;

    if (a->used + x > FP_SIZE) return FP_VAL;
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	681a      	ldr	r2, [r3, #0]
 801ff7c:	683b      	ldr	r3, [r7, #0]
 801ff7e:	4413      	add	r3, r2
 801ff80:	2b88      	cmp	r3, #136	; 0x88
 801ff82:	dd02      	ble.n	801ff8a <fp_lshd+0x1c>
 801ff84:	f04f 33ff 	mov.w	r3, #4294967295
 801ff88:	e04c      	b.n	8020024 <fp_lshd+0xb6>

    y = a->used + x - 1;
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	681a      	ldr	r2, [r3, #0]
 801ff8e:	683b      	ldr	r3, [r7, #0]
 801ff90:	4413      	add	r3, r2
 801ff92:	3b01      	subs	r3, #1
 801ff94:	60fb      	str	r3, [r7, #12]

    /* store new size */
    a->used = y + 1;
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	1c5a      	adds	r2, r3, #1
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	601a      	str	r2, [r3, #0]

    /* move digits */
    for (; y >= x; y--) {
 801ff9e:	e010      	b.n	801ffc2 <fp_lshd+0x54>
        a->dp[y] = a->dp[y-x];
 801ffa0:	68fa      	ldr	r2, [r7, #12]
 801ffa2:	683b      	ldr	r3, [r7, #0]
 801ffa4:	1ad3      	subs	r3, r2, r3
 801ffa6:	687a      	ldr	r2, [r7, #4]
 801ffa8:	3302      	adds	r3, #2
 801ffaa:	009b      	lsls	r3, r3, #2
 801ffac:	4413      	add	r3, r2
 801ffae:	685a      	ldr	r2, [r3, #4]
 801ffb0:	6879      	ldr	r1, [r7, #4]
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	3302      	adds	r3, #2
 801ffb6:	009b      	lsls	r3, r3, #2
 801ffb8:	440b      	add	r3, r1
 801ffba:	605a      	str	r2, [r3, #4]
    for (; y >= x; y--) {
 801ffbc:	68fb      	ldr	r3, [r7, #12]
 801ffbe:	3b01      	subs	r3, #1
 801ffc0:	60fb      	str	r3, [r7, #12]
 801ffc2:	68fa      	ldr	r2, [r7, #12]
 801ffc4:	683b      	ldr	r3, [r7, #0]
 801ffc6:	429a      	cmp	r2, r3
 801ffc8:	daea      	bge.n	801ffa0 <fp_lshd+0x32>
    }

    /* zero lower digits */
    for (; y >= 0; y--) {
 801ffca:	e009      	b.n	801ffe0 <fp_lshd+0x72>
        a->dp[y] = 0;
 801ffcc:	687a      	ldr	r2, [r7, #4]
 801ffce:	68fb      	ldr	r3, [r7, #12]
 801ffd0:	3302      	adds	r3, #2
 801ffd2:	009b      	lsls	r3, r3, #2
 801ffd4:	4413      	add	r3, r2
 801ffd6:	2200      	movs	r2, #0
 801ffd8:	605a      	str	r2, [r3, #4]
    for (; y >= 0; y--) {
 801ffda:	68fb      	ldr	r3, [r7, #12]
 801ffdc:	3b01      	subs	r3, #1
 801ffde:	60fb      	str	r3, [r7, #12]
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	daf2      	bge.n	801ffcc <fp_lshd+0x5e>
    }

    /* clamp digits */
    fp_clamp(a);
 801ffe6:	e004      	b.n	801fff2 <fp_lshd+0x84>
 801ffe8:	687b      	ldr	r3, [r7, #4]
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	1e5a      	subs	r2, r3, #1
 801ffee:	687b      	ldr	r3, [r7, #4]
 801fff0:	601a      	str	r2, [r3, #0]
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	681b      	ldr	r3, [r3, #0]
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d009      	beq.n	802000e <fp_lshd+0xa0>
 801fffa:	687b      	ldr	r3, [r7, #4]
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	3b01      	subs	r3, #1
 8020000:	687a      	ldr	r2, [r7, #4]
 8020002:	3302      	adds	r3, #2
 8020004:	009b      	lsls	r3, r3, #2
 8020006:	4413      	add	r3, r2
 8020008:	685b      	ldr	r3, [r3, #4]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d0ec      	beq.n	801ffe8 <fp_lshd+0x7a>
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	2b00      	cmp	r3, #0
 8020014:	d002      	beq.n	802001c <fp_lshd+0xae>
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	685b      	ldr	r3, [r3, #4]
 802001a:	e000      	b.n	802001e <fp_lshd+0xb0>
 802001c:	2300      	movs	r3, #0
 802001e:	687a      	ldr	r2, [r7, #4]
 8020020:	6053      	str	r3, [r2, #4]
    return FP_OKAY;
 8020022:	2300      	movs	r3, #0
}
 8020024:	4618      	mov	r0, r3
 8020026:	3714      	adds	r7, #20
 8020028:	46bd      	mov	sp, r7
 802002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802002e:	4770      	bx	lr

08020030 <fp_rshb>:


/* right shift by bit count */
void fp_rshb(fp_int *c, int x)
{
 8020030:	b580      	push	{r7, lr}
 8020032:	b088      	sub	sp, #32
 8020034:	af00      	add	r7, sp, #0
 8020036:	6078      	str	r0, [r7, #4]
 8020038:	6039      	str	r1, [r7, #0]
    fp_digit *tmpc, mask, shift;
    fp_digit r, rr;
    fp_digit D = x;
 802003a:	683b      	ldr	r3, [r7, #0]
 802003c:	617b      	str	r3, [r7, #20]

    /* shifting by a negative number not supported, and shifting by
     * zero changes nothing.
     */
    if (x <= 0) return;
 802003e:	683b      	ldr	r3, [r7, #0]
 8020040:	2b00      	cmp	r3, #0
 8020042:	dd71      	ble.n	8020128 <fp_rshb+0xf8>

    /* shift digits first if needed */
    if (x >= DIGIT_BIT) {
 8020044:	683b      	ldr	r3, [r7, #0]
 8020046:	2b1f      	cmp	r3, #31
 8020048:	dd14      	ble.n	8020074 <fp_rshb+0x44>
        fp_rshd(c, x / DIGIT_BIT);
 802004a:	683b      	ldr	r3, [r7, #0]
 802004c:	2b00      	cmp	r3, #0
 802004e:	da00      	bge.n	8020052 <fp_rshb+0x22>
 8020050:	331f      	adds	r3, #31
 8020052:	115b      	asrs	r3, r3, #5
 8020054:	4619      	mov	r1, r3
 8020056:	6878      	ldr	r0, [r7, #4]
 8020058:	f000 f86e 	bl	8020138 <fp_rshd>
        /* recalculate number of bits to shift */
        D = x % DIGIT_BIT;
 802005c:	683b      	ldr	r3, [r7, #0]
 802005e:	425a      	negs	r2, r3
 8020060:	f003 031f 	and.w	r3, r3, #31
 8020064:	f002 021f 	and.w	r2, r2, #31
 8020068:	bf58      	it	pl
 802006a:	4253      	negpl	r3, r2
 802006c:	617b      	str	r3, [r7, #20]
        /* check if any more shifting needed */
        if (D == 0) return;
 802006e:	697b      	ldr	r3, [r7, #20]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d05b      	beq.n	802012c <fp_rshb+0xfc>

    }

    /* zero shifted is always zero */
    if (fp_iszero(c)) return;
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	2b00      	cmp	r3, #0
 802007a:	d059      	beq.n	8020130 <fp_rshb+0x100>

    /* mask */
    mask = (((fp_digit)1) << D) - 1;
 802007c:	2201      	movs	r2, #1
 802007e:	697b      	ldr	r3, [r7, #20]
 8020080:	fa02 f303 	lsl.w	r3, r2, r3
 8020084:	3b01      	subs	r3, #1
 8020086:	613b      	str	r3, [r7, #16]

    /* shift for lsb */
    shift = DIGIT_BIT - D;
 8020088:	697b      	ldr	r3, [r7, #20]
 802008a:	f1c3 0320 	rsb	r3, r3, #32
 802008e:	60fb      	str	r3, [r7, #12]

    /* alias */
    tmpc = c->dp + (c->used - 1);
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	f103 020c 	add.w	r2, r3, #12
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	681b      	ldr	r3, [r3, #0]
 802009a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802009e:	3b01      	subs	r3, #1
 80200a0:	009b      	lsls	r3, r3, #2
 80200a2:	4413      	add	r3, r2
 80200a4:	61fb      	str	r3, [r7, #28]

    /* carry */
    r = 0;
 80200a6:	2300      	movs	r3, #0
 80200a8:	61bb      	str	r3, [r7, #24]
    for (x = c->used - 1; x >= 0; x--) {
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	3b01      	subs	r3, #1
 80200b0:	603b      	str	r3, [r7, #0]
 80200b2:	e017      	b.n	80200e4 <fp_rshb+0xb4>
      /* get the lower  bits of this word in a temp */
      rr = *tmpc & mask;
 80200b4:	69fb      	ldr	r3, [r7, #28]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	693a      	ldr	r2, [r7, #16]
 80200ba:	4013      	ands	r3, r2
 80200bc:	60bb      	str	r3, [r7, #8]

      /* shift the current word and mix in the carry bits from previous word */
      *tmpc = (*tmpc >> D) | (r << shift);
 80200be:	69fb      	ldr	r3, [r7, #28]
 80200c0:	681a      	ldr	r2, [r3, #0]
 80200c2:	697b      	ldr	r3, [r7, #20]
 80200c4:	40da      	lsrs	r2, r3
 80200c6:	69b9      	ldr	r1, [r7, #24]
 80200c8:	68fb      	ldr	r3, [r7, #12]
 80200ca:	fa01 f303 	lsl.w	r3, r1, r3
 80200ce:	431a      	orrs	r2, r3
 80200d0:	69fb      	ldr	r3, [r7, #28]
 80200d2:	601a      	str	r2, [r3, #0]
      --tmpc;
 80200d4:	69fb      	ldr	r3, [r7, #28]
 80200d6:	3b04      	subs	r3, #4
 80200d8:	61fb      	str	r3, [r7, #28]

      /* set the carry to the carry bits of the current word found above */
      r = rr;
 80200da:	68bb      	ldr	r3, [r7, #8]
 80200dc:	61bb      	str	r3, [r7, #24]
    for (x = c->used - 1; x >= 0; x--) {
 80200de:	683b      	ldr	r3, [r7, #0]
 80200e0:	3b01      	subs	r3, #1
 80200e2:	603b      	str	r3, [r7, #0]
 80200e4:	683b      	ldr	r3, [r7, #0]
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	dae4      	bge.n	80200b4 <fp_rshb+0x84>
    }

    /* clamp digits */
    fp_clamp(c);
 80200ea:	e004      	b.n	80200f6 <fp_rshb+0xc6>
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	1e5a      	subs	r2, r3, #1
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	601a      	str	r2, [r3, #0]
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	681b      	ldr	r3, [r3, #0]
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d009      	beq.n	8020112 <fp_rshb+0xe2>
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	681b      	ldr	r3, [r3, #0]
 8020102:	3b01      	subs	r3, #1
 8020104:	687a      	ldr	r2, [r7, #4]
 8020106:	3302      	adds	r3, #2
 8020108:	009b      	lsls	r3, r3, #2
 802010a:	4413      	add	r3, r2
 802010c:	685b      	ldr	r3, [r3, #4]
 802010e:	2b00      	cmp	r3, #0
 8020110:	d0ec      	beq.n	80200ec <fp_rshb+0xbc>
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	2b00      	cmp	r3, #0
 8020118:	d002      	beq.n	8020120 <fp_rshb+0xf0>
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	685b      	ldr	r3, [r3, #4]
 802011e:	e000      	b.n	8020122 <fp_rshb+0xf2>
 8020120:	2300      	movs	r3, #0
 8020122:	687a      	ldr	r2, [r7, #4]
 8020124:	6053      	str	r3, [r2, #4]
 8020126:	e004      	b.n	8020132 <fp_rshb+0x102>
    if (x <= 0) return;
 8020128:	bf00      	nop
 802012a:	e002      	b.n	8020132 <fp_rshb+0x102>
        if (D == 0) return;
 802012c:	bf00      	nop
 802012e:	e000      	b.n	8020132 <fp_rshb+0x102>
    if (fp_iszero(c)) return;
 8020130:	bf00      	nop
}
 8020132:	3720      	adds	r7, #32
 8020134:	46bd      	mov	sp, r7
 8020136:	bd80      	pop	{r7, pc}

08020138 <fp_rshd>:


void fp_rshd(fp_int *a, int x)
{
 8020138:	b580      	push	{r7, lr}
 802013a:	b084      	sub	sp, #16
 802013c:	af00      	add	r7, sp, #0
 802013e:	6078      	str	r0, [r7, #4]
 8020140:	6039      	str	r1, [r7, #0]
  int y;

  /* too many digits just zero and return */
  if (x >= a->used) {
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	683a      	ldr	r2, [r7, #0]
 8020148:	429a      	cmp	r2, r3
 802014a:	db03      	blt.n	8020154 <fp_rshd+0x1c>
     fp_zero(a);
 802014c:	6878      	ldr	r0, [r7, #4]
 802014e:	f000 f8ac 	bl	80202aa <fp_zero>
     return;
 8020152:	e04e      	b.n	80201f2 <fp_rshd+0xba>
  }

   /* shift */
   for (y = 0; y < a->used - x; y++) {
 8020154:	2300      	movs	r3, #0
 8020156:	60fb      	str	r3, [r7, #12]
 8020158:	e010      	b.n	802017c <fp_rshd+0x44>
      a->dp[y] = a->dp[y+x];
 802015a:	68fa      	ldr	r2, [r7, #12]
 802015c:	683b      	ldr	r3, [r7, #0]
 802015e:	4413      	add	r3, r2
 8020160:	687a      	ldr	r2, [r7, #4]
 8020162:	3302      	adds	r3, #2
 8020164:	009b      	lsls	r3, r3, #2
 8020166:	4413      	add	r3, r2
 8020168:	685a      	ldr	r2, [r3, #4]
 802016a:	6879      	ldr	r1, [r7, #4]
 802016c:	68fb      	ldr	r3, [r7, #12]
 802016e:	3302      	adds	r3, #2
 8020170:	009b      	lsls	r3, r3, #2
 8020172:	440b      	add	r3, r1
 8020174:	605a      	str	r2, [r3, #4]
   for (y = 0; y < a->used - x; y++) {
 8020176:	68fb      	ldr	r3, [r7, #12]
 8020178:	3301      	adds	r3, #1
 802017a:	60fb      	str	r3, [r7, #12]
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	681a      	ldr	r2, [r3, #0]
 8020180:	683b      	ldr	r3, [r7, #0]
 8020182:	1ad3      	subs	r3, r2, r3
 8020184:	68fa      	ldr	r2, [r7, #12]
 8020186:	429a      	cmp	r2, r3
 8020188:	dbe7      	blt.n	802015a <fp_rshd+0x22>
   }

   /* zero rest */
   for (; y < a->used; y++) {
 802018a:	e009      	b.n	80201a0 <fp_rshd+0x68>
      a->dp[y] = 0;
 802018c:	687a      	ldr	r2, [r7, #4]
 802018e:	68fb      	ldr	r3, [r7, #12]
 8020190:	3302      	adds	r3, #2
 8020192:	009b      	lsls	r3, r3, #2
 8020194:	4413      	add	r3, r2
 8020196:	2200      	movs	r2, #0
 8020198:	605a      	str	r2, [r3, #4]
   for (; y < a->used; y++) {
 802019a:	68fb      	ldr	r3, [r7, #12]
 802019c:	3301      	adds	r3, #1
 802019e:	60fb      	str	r3, [r7, #12]
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	68fa      	ldr	r2, [r7, #12]
 80201a6:	429a      	cmp	r2, r3
 80201a8:	dbf0      	blt.n	802018c <fp_rshd+0x54>
   }

   /* decrement count */
   a->used -= x;
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	681a      	ldr	r2, [r3, #0]
 80201ae:	683b      	ldr	r3, [r7, #0]
 80201b0:	1ad2      	subs	r2, r2, r3
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	601a      	str	r2, [r3, #0]
   fp_clamp(a);
 80201b6:	e004      	b.n	80201c2 <fp_rshd+0x8a>
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	681b      	ldr	r3, [r3, #0]
 80201bc:	1e5a      	subs	r2, r3, #1
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	601a      	str	r2, [r3, #0]
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	681b      	ldr	r3, [r3, #0]
 80201c6:	2b00      	cmp	r3, #0
 80201c8:	d009      	beq.n	80201de <fp_rshd+0xa6>
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	3b01      	subs	r3, #1
 80201d0:	687a      	ldr	r2, [r7, #4]
 80201d2:	3302      	adds	r3, #2
 80201d4:	009b      	lsls	r3, r3, #2
 80201d6:	4413      	add	r3, r2
 80201d8:	685b      	ldr	r3, [r3, #4]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d0ec      	beq.n	80201b8 <fp_rshd+0x80>
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d002      	beq.n	80201ec <fp_rshd+0xb4>
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	685b      	ldr	r3, [r3, #4]
 80201ea:	e000      	b.n	80201ee <fp_rshd+0xb6>
 80201ec:	2300      	movs	r3, #0
 80201ee:	687a      	ldr	r2, [r7, #4]
 80201f0:	6053      	str	r3, [r2, #4]
}
 80201f2:	3710      	adds	r7, #16
 80201f4:	46bd      	mov	sp, r7
 80201f6:	bd80      	pop	{r7, pc}

080201f8 <fp_sub_d>:


/* c = a - b */
int fp_sub_d(fp_int *a, fp_digit b, fp_int *c)
{
 80201f8:	b580      	push	{r7, lr}
 80201fa:	b088      	sub	sp, #32
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	60f8      	str	r0, [r7, #12]
 8020200:	60b9      	str	r1, [r7, #8]
 8020202:	607a      	str	r2, [r7, #4]
#ifndef WOLFSSL_SMALL_STACK
   fp_int    tmp[1];
#else
   fp_int    *tmp;
#endif
   int       err = FP_OKAY;
 8020204:	2300      	movs	r3, #0
 8020206:	61fb      	str	r3, [r7, #28]

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8020208:	f44f 700b 	mov.w	r0, #556	; 0x22c
 802020c:	f7f8 fcce 	bl	8018bac <wolfSSL_Malloc>
 8020210:	61b8      	str	r0, [r7, #24]
   if (tmp == NULL)
 8020212:	69bb      	ldr	r3, [r7, #24]
 8020214:	2b00      	cmp	r3, #0
 8020216:	d102      	bne.n	802021e <fp_sub_d+0x26>
       return FP_MEM;
 8020218:	f06f 0301 	mvn.w	r3, #1
 802021c:	e024      	b.n	8020268 <fp_sub_d+0x70>
#endif

   fp_init(tmp);
 802021e:	69b8      	ldr	r0, [r7, #24]
 8020220:	f000 f835 	bl	802028e <fp_init>
   fp_set(tmp, b);
 8020224:	68b9      	ldr	r1, [r7, #8]
 8020226:	69b8      	ldr	r0, [r7, #24]
 8020228:	f7ff fe35 	bl	801fe96 <fp_set>
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
   if (c->size < FP_SIZE) {
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	689b      	ldr	r3, [r3, #8]
 8020230:	2b87      	cmp	r3, #135	; 0x87
 8020232:	dc0a      	bgt.n	802024a <fp_sub_d+0x52>
     err = fp_sub(a, tmp, tmp);
 8020234:	69ba      	ldr	r2, [r7, #24]
 8020236:	69b9      	ldr	r1, [r7, #24]
 8020238:	68f8      	ldr	r0, [r7, #12]
 802023a:	f7fb ffb4 	bl	801c1a6 <fp_sub>
 802023e:	61f8      	str	r0, [r7, #28]
     fp_copy(tmp, c);
 8020240:	6879      	ldr	r1, [r7, #4]
 8020242:	69b8      	ldr	r0, [r7, #24]
 8020244:	f000 fa06 	bl	8020654 <fp_copy>
 8020248:	e005      	b.n	8020256 <fp_sub_d+0x5e>
   }
   else
#endif
   {
     err = fp_sub(a, tmp, c);
 802024a:	687a      	ldr	r2, [r7, #4]
 802024c:	69b9      	ldr	r1, [r7, #24]
 802024e:	68f8      	ldr	r0, [r7, #12]
 8020250:	f7fb ffa9 	bl	801c1a6 <fp_sub>
 8020254:	61f8      	str	r0, [r7, #28]
   }

#ifdef WOLFSSL_SMALL_STACK
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8020256:	69bb      	ldr	r3, [r7, #24]
 8020258:	617b      	str	r3, [r7, #20]
 802025a:	697b      	ldr	r3, [r7, #20]
 802025c:	2b00      	cmp	r3, #0
 802025e:	d002      	beq.n	8020266 <fp_sub_d+0x6e>
 8020260:	6978      	ldr	r0, [r7, #20]
 8020262:	f7f8 fcbf 	bl	8018be4 <wolfSSL_Free>
#endif
   return err;
 8020266:	69fb      	ldr	r3, [r7, #28]
}
 8020268:	4618      	mov	r0, r3
 802026a:	3720      	adds	r7, #32
 802026c:	46bd      	mov	sp, r7
 802026e:	bd80      	pop	{r7, pc}

08020270 <mp_init>:

/* wolfSSL callers from normal lib */

/* init a new mp_int */
int mp_init (mp_int * a)
{
 8020270:	b580      	push	{r7, lr}
 8020272:	b082      	sub	sp, #8
 8020274:	af00      	add	r7, sp, #0
 8020276:	6078      	str	r0, [r7, #4]
  if (a)
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	2b00      	cmp	r3, #0
 802027c:	d002      	beq.n	8020284 <mp_init+0x14>
    fp_init(a);
 802027e:	6878      	ldr	r0, [r7, #4]
 8020280:	f000 f805 	bl	802028e <fp_init>
  return MP_OKAY;
 8020284:	2300      	movs	r3, #0
}
 8020286:	4618      	mov	r0, r3
 8020288:	3708      	adds	r7, #8
 802028a:	46bd      	mov	sp, r7
 802028c:	bd80      	pop	{r7, pc}

0802028e <fp_init>:

void fp_init(fp_int *a)
{
 802028e:	b580      	push	{r7, lr}
 8020290:	b082      	sub	sp, #8
 8020292:	af00      	add	r7, sp, #0
 8020294:	6078      	str	r0, [r7, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    a->size = FP_SIZE;
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	2288      	movs	r2, #136	; 0x88
 802029a:	609a      	str	r2, [r3, #8]
#endif
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_init(&a->raw);
#endif
    fp_zero(a);
 802029c:	6878      	ldr	r0, [r7, #4]
 802029e:	f000 f804 	bl	80202aa <fp_zero>
}
 80202a2:	bf00      	nop
 80202a4:	3708      	adds	r7, #8
 80202a6:	46bd      	mov	sp, r7
 80202a8:	bd80      	pop	{r7, pc}

080202aa <fp_zero>:

void fp_zero(fp_int *a)
{
 80202aa:	b580      	push	{r7, lr}
 80202ac:	b084      	sub	sp, #16
 80202ae:	af00      	add	r7, sp, #0
 80202b0:	6078      	str	r0, [r7, #4]
    int size;
    a->used = 0;
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	2200      	movs	r2, #0
 80202b6:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	2200      	movs	r2, #0
 80202bc:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	689b      	ldr	r3, [r3, #8]
 80202c2:	60fb      	str	r3, [r7, #12]
#else
    size = FP_SIZE;
#endif
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	f103 000c 	add.w	r0, r3, #12
 80202ca:	68fb      	ldr	r3, [r7, #12]
 80202cc:	009b      	lsls	r3, r3, #2
 80202ce:	461a      	mov	r2, r3
 80202d0:	2100      	movs	r1, #0
 80202d2:	f001 f82f 	bl	8021334 <memset>
}
 80202d6:	bf00      	nop
 80202d8:	3710      	adds	r7, #16
 80202da:	46bd      	mov	sp, r7
 80202dc:	bd80      	pop	{r7, pc}

080202de <fp_clear>:

void fp_clear(fp_int *a)
{
 80202de:	b580      	push	{r7, lr}
 80202e0:	b084      	sub	sp, #16
 80202e2:	af00      	add	r7, sp, #0
 80202e4:	6078      	str	r0, [r7, #4]
    int size;
    a->used = 0;
 80202e6:	687b      	ldr	r3, [r7, #4]
 80202e8:	2200      	movs	r2, #0
 80202ea:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	2200      	movs	r2, #0
 80202f0:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	689b      	ldr	r3, [r3, #8]
 80202f6:	60fb      	str	r3, [r7, #12]
#else
    size = FP_SIZE;
#endif
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	f103 000c 	add.w	r0, r3, #12
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	009b      	lsls	r3, r3, #2
 8020302:	461a      	mov	r2, r3
 8020304:	2100      	movs	r1, #0
 8020306:	f001 f815 	bl	8021334 <memset>
    fp_free(a);
 802030a:	6878      	ldr	r0, [r7, #4]
 802030c:	f000 f82c 	bl	8020368 <fp_free>
}
 8020310:	bf00      	nop
 8020312:	3710      	adds	r7, #16
 8020314:	46bd      	mov	sp, r7
 8020316:	bd80      	pop	{r7, pc}

08020318 <fp_forcezero>:

void fp_forcezero (mp_int * a)
{
 8020318:	b580      	push	{r7, lr}
 802031a:	b084      	sub	sp, #16
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]
    int size;
    a->used = 0;
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	2200      	movs	r2, #0
 8020324:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	2200      	movs	r2, #0
 802032a:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	689b      	ldr	r3, [r3, #8]
 8020330:	60fb      	str	r3, [r7, #12]
#else
    size = FP_SIZE;
#endif
    ForceZero(a->dp, size * sizeof(fp_digit));
 8020332:	687b      	ldr	r3, [r7, #4]
 8020334:	f103 020c 	add.w	r2, r3, #12
 8020338:	68fb      	ldr	r3, [r7, #12]
 802033a:	009b      	lsls	r3, r3, #2
 802033c:	4619      	mov	r1, r3
 802033e:	4610      	mov	r0, r2
 8020340:	f7fb fdfe 	bl	801bf40 <ForceZero>
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_zero(&a->raw);
#endif
    fp_free(a);
 8020344:	6878      	ldr	r0, [r7, #4]
 8020346:	f000 f80f 	bl	8020368 <fp_free>
}
 802034a:	bf00      	nop
 802034c:	3710      	adds	r7, #16
 802034e:	46bd      	mov	sp, r7
 8020350:	bd80      	pop	{r7, pc}

08020352 <mp_forcezero>:

void mp_forcezero (mp_int * a)
{
 8020352:	b580      	push	{r7, lr}
 8020354:	b082      	sub	sp, #8
 8020356:	af00      	add	r7, sp, #0
 8020358:	6078      	str	r0, [r7, #4]
    fp_forcezero(a);
 802035a:	6878      	ldr	r0, [r7, #4]
 802035c:	f7ff ffdc 	bl	8020318 <fp_forcezero>
}
 8020360:	bf00      	nop
 8020362:	3708      	adds	r7, #8
 8020364:	46bd      	mov	sp, r7
 8020366:	bd80      	pop	{r7, pc}

08020368 <fp_free>:

void fp_free(fp_int* a)
{
 8020368:	b480      	push	{r7}
 802036a:	b083      	sub	sp, #12
 802036c:	af00      	add	r7, sp, #0
 802036e:	6078      	str	r0, [r7, #4]
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_free(&a->raw);
#else
    (void)a;
#endif
}
 8020370:	bf00      	nop
 8020372:	370c      	adds	r7, #12
 8020374:	46bd      	mov	sp, r7
 8020376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802037a:	4770      	bx	lr

0802037c <mp_clear>:


/* clear one (frees)  */
void mp_clear (mp_int * a)
{
 802037c:	b580      	push	{r7, lr}
 802037e:	b082      	sub	sp, #8
 8020380:	af00      	add	r7, sp, #0
 8020382:	6078      	str	r0, [r7, #4]
    if (a == NULL)
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	2b00      	cmp	r3, #0
 8020388:	d003      	beq.n	8020392 <mp_clear+0x16>
        return;
    fp_clear(a);
 802038a:	6878      	ldr	r0, [r7, #4]
 802038c:	f7ff ffa7 	bl	80202de <fp_clear>
 8020390:	e000      	b.n	8020394 <mp_clear+0x18>
        return;
 8020392:	bf00      	nop
}
 8020394:	3708      	adds	r7, #8
 8020396:	46bd      	mov	sp, r7
 8020398:	bd80      	pop	{r7, pc}

0802039a <mp_free>:

void mp_free(mp_int* a)
{
 802039a:	b580      	push	{r7, lr}
 802039c:	b082      	sub	sp, #8
 802039e:	af00      	add	r7, sp, #0
 80203a0:	6078      	str	r0, [r7, #4]
    fp_free(a);
 80203a2:	6878      	ldr	r0, [r7, #4]
 80203a4:	f7ff ffe0 	bl	8020368 <fp_free>
}
 80203a8:	bf00      	nop
 80203aa:	3708      	adds	r7, #8
 80203ac:	46bd      	mov	sp, r7
 80203ae:	bd80      	pop	{r7, pc}

080203b0 <mp_init_multi>:

/* handle up to 6 inits */
int mp_init_multi(mp_int* a, mp_int* b, mp_int* c, mp_int* d,
                  mp_int* e, mp_int* f)
{
 80203b0:	b580      	push	{r7, lr}
 80203b2:	b084      	sub	sp, #16
 80203b4:	af00      	add	r7, sp, #0
 80203b6:	60f8      	str	r0, [r7, #12]
 80203b8:	60b9      	str	r1, [r7, #8]
 80203ba:	607a      	str	r2, [r7, #4]
 80203bc:	603b      	str	r3, [r7, #0]
    if (a)
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	d002      	beq.n	80203ca <mp_init_multi+0x1a>
        fp_init(a);
 80203c4:	68f8      	ldr	r0, [r7, #12]
 80203c6:	f7ff ff62 	bl	802028e <fp_init>
    if (b)
 80203ca:	68bb      	ldr	r3, [r7, #8]
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	d002      	beq.n	80203d6 <mp_init_multi+0x26>
        fp_init(b);
 80203d0:	68b8      	ldr	r0, [r7, #8]
 80203d2:	f7ff ff5c 	bl	802028e <fp_init>
    if (c)
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d002      	beq.n	80203e2 <mp_init_multi+0x32>
        fp_init(c);
 80203dc:	6878      	ldr	r0, [r7, #4]
 80203de:	f7ff ff56 	bl	802028e <fp_init>
    if (d)
 80203e2:	683b      	ldr	r3, [r7, #0]
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	d002      	beq.n	80203ee <mp_init_multi+0x3e>
        fp_init(d);
 80203e8:	6838      	ldr	r0, [r7, #0]
 80203ea:	f7ff ff50 	bl	802028e <fp_init>
    if (e)
 80203ee:	69bb      	ldr	r3, [r7, #24]
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	d002      	beq.n	80203fa <mp_init_multi+0x4a>
        fp_init(e);
 80203f4:	69b8      	ldr	r0, [r7, #24]
 80203f6:	f7ff ff4a 	bl	802028e <fp_init>
    if (f)
 80203fa:	69fb      	ldr	r3, [r7, #28]
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	d002      	beq.n	8020406 <mp_init_multi+0x56>
        fp_init(f);
 8020400:	69f8      	ldr	r0, [r7, #28]
 8020402:	f7ff ff44 	bl	802028e <fp_init>

    return MP_OKAY;
 8020406:	2300      	movs	r3, #0
}
 8020408:	4618      	mov	r0, r3
 802040a:	3710      	adds	r7, #16
 802040c:	46bd      	mov	sp, r7
 802040e:	bd80      	pop	{r7, pc}

08020410 <mp_add>:

/* high level addition (handles signs) */
int mp_add (mp_int * a, mp_int * b, mp_int * c)
{
 8020410:	b580      	push	{r7, lr}
 8020412:	b084      	sub	sp, #16
 8020414:	af00      	add	r7, sp, #0
 8020416:	60f8      	str	r0, [r7, #12]
 8020418:	60b9      	str	r1, [r7, #8]
 802041a:	607a      	str	r2, [r7, #4]
  return fp_add(a, b, c);
 802041c:	687a      	ldr	r2, [r7, #4]
 802041e:	68b9      	ldr	r1, [r7, #8]
 8020420:	68f8      	ldr	r0, [r7, #12]
 8020422:	f7fb fdde 	bl	801bfe2 <fp_add>
 8020426:	4603      	mov	r3, r0
}
 8020428:	4618      	mov	r0, r3
 802042a:	3710      	adds	r7, #16
 802042c:	46bd      	mov	sp, r7
 802042e:	bd80      	pop	{r7, pc}

08020430 <mp_sub>:

/* high level subtraction (handles signs) */
int mp_sub (mp_int * a, mp_int * b, mp_int * c)
{
 8020430:	b580      	push	{r7, lr}
 8020432:	b084      	sub	sp, #16
 8020434:	af00      	add	r7, sp, #0
 8020436:	60f8      	str	r0, [r7, #12]
 8020438:	60b9      	str	r1, [r7, #8]
 802043a:	607a      	str	r2, [r7, #4]
  return fp_sub(a, b, c);
 802043c:	687a      	ldr	r2, [r7, #4]
 802043e:	68b9      	ldr	r1, [r7, #8]
 8020440:	68f8      	ldr	r0, [r7, #12]
 8020442:	f7fb feb0 	bl	801c1a6 <fp_sub>
 8020446:	4603      	mov	r3, r0
}
 8020448:	4618      	mov	r0, r3
 802044a:	3710      	adds	r7, #16
 802044c:	46bd      	mov	sp, r7
 802044e:	bd80      	pop	{r7, pc}

08020450 <mp_mul>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_mul(mp_int * a, mp_int * b, mp_int * c)
#else
int mp_mul (mp_int * a, mp_int * b, mp_int * c)
#endif
{
 8020450:	b580      	push	{r7, lr}
 8020452:	b084      	sub	sp, #16
 8020454:	af00      	add	r7, sp, #0
 8020456:	60f8      	str	r0, [r7, #12]
 8020458:	60b9      	str	r1, [r7, #8]
 802045a:	607a      	str	r2, [r7, #4]
  return fp_mul(a, b, c);
 802045c:	687a      	ldr	r2, [r7, #4]
 802045e:	68b9      	ldr	r1, [r7, #8]
 8020460:	68f8      	ldr	r0, [r7, #12]
 8020462:	f7fb ffa4 	bl	801c3ae <fp_mul>
 8020466:	4603      	mov	r3, r0
}
 8020468:	4618      	mov	r0, r3
 802046a:	3710      	adds	r7, #16
 802046c:	46bd      	mov	sp, r7
 802046e:	bd80      	pop	{r7, pc}

08020470 <mp_mulmod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_mulmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)
#else
int mp_mulmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)
#endif
{
 8020470:	b580      	push	{r7, lr}
 8020472:	b084      	sub	sp, #16
 8020474:	af00      	add	r7, sp, #0
 8020476:	60f8      	str	r0, [r7, #12]
 8020478:	60b9      	str	r1, [r7, #8]
 802047a:	607a      	str	r2, [r7, #4]
 802047c:	603b      	str	r3, [r7, #0]

    if( A >= ESP_RSA_MULM_BITS && B >= ESP_RSA_MULM_BITS)
        return esp_mp_mulmod(a, b, c, d);
    else
 #endif
   return fp_mulmod(a, b, c, d);
 802047e:	683b      	ldr	r3, [r7, #0]
 8020480:	687a      	ldr	r2, [r7, #4]
 8020482:	68b9      	ldr	r1, [r7, #8]
 8020484:	68f8      	ldr	r0, [r7, #12]
 8020486:	f7fd fd72 	bl	801df6e <fp_mulmod>
 802048a:	4603      	mov	r3, r0
}
 802048c:	4618      	mov	r0, r3
 802048e:	3710      	adds	r7, #16
 8020490:	46bd      	mov	sp, r7
 8020492:	bd80      	pop	{r7, pc}

08020494 <mp_submod_ct>:
  return fp_addmod(a, b, c, d);
}

/* d = a - b (mod c) - constant time (a < c and b < c) */
int mp_submod_ct(mp_int *a, mp_int *b, mp_int *c, mp_int *d)
{
 8020494:	b580      	push	{r7, lr}
 8020496:	b084      	sub	sp, #16
 8020498:	af00      	add	r7, sp, #0
 802049a:	60f8      	str	r0, [r7, #12]
 802049c:	60b9      	str	r1, [r7, #8]
 802049e:	607a      	str	r2, [r7, #4]
 80204a0:	603b      	str	r3, [r7, #0]
  return fp_submod_ct(a, b, c, d);
 80204a2:	683b      	ldr	r3, [r7, #0]
 80204a4:	687a      	ldr	r2, [r7, #4]
 80204a6:	68b9      	ldr	r1, [r7, #8]
 80204a8:	68f8      	ldr	r0, [r7, #12]
 80204aa:	f7fd fda0 	bl	801dfee <fp_submod_ct>
 80204ae:	4603      	mov	r3, r0
}
 80204b0:	4618      	mov	r0, r3
 80204b2:	3710      	adds	r7, #16
 80204b4:	46bd      	mov	sp, r7
 80204b6:	bd80      	pop	{r7, pc}

080204b8 <mp_addmod_ct>:

/* d = a + b (mod c) - constant time (a < c and b < c) */
int mp_addmod_ct(mp_int *a, mp_int *b, mp_int *c, mp_int *d)
{
 80204b8:	b580      	push	{r7, lr}
 80204ba:	b084      	sub	sp, #16
 80204bc:	af00      	add	r7, sp, #0
 80204be:	60f8      	str	r0, [r7, #12]
 80204c0:	60b9      	str	r1, [r7, #8]
 80204c2:	607a      	str	r2, [r7, #4]
 80204c4:	603b      	str	r3, [r7, #0]
  return fp_addmod_ct(a, b, c, d);
 80204c6:	683b      	ldr	r3, [r7, #0]
 80204c8:	687a      	ldr	r2, [r7, #4]
 80204ca:	68b9      	ldr	r1, [r7, #8]
 80204cc:	68f8      	ldr	r0, [r7, #12]
 80204ce:	f7fd fea4 	bl	801e21a <fp_addmod_ct>
 80204d2:	4603      	mov	r3, r0
}
 80204d4:	4618      	mov	r0, r3
 80204d6:	3710      	adds	r7, #16
 80204d8:	46bd      	mov	sp, r7
 80204da:	bd80      	pop	{r7, pc}

080204dc <mp_mod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_mod (mp_int * a, mp_int * b, mp_int * c)
#else
int mp_mod (mp_int * a, mp_int * b, mp_int * c)
#endif
{
 80204dc:	b580      	push	{r7, lr}
 80204de:	b084      	sub	sp, #16
 80204e0:	af00      	add	r7, sp, #0
 80204e2:	60f8      	str	r0, [r7, #12]
 80204e4:	60b9      	str	r1, [r7, #8]
 80204e6:	607a      	str	r2, [r7, #4]
  return fp_mod (a, b, c);
 80204e8:	687a      	ldr	r2, [r7, #4]
 80204ea:	68b9      	ldr	r1, [r7, #8]
 80204ec:	68f8      	ldr	r0, [r7, #12]
 80204ee:	f7fc fef1 	bl	801d2d4 <fp_mod>
 80204f2:	4603      	mov	r3, r0
}
 80204f4:	4618      	mov	r0, r3
 80204f6:	3710      	adds	r7, #16
 80204f8:	46bd      	mov	sp, r7
 80204fa:	bd80      	pop	{r7, pc}

080204fc <mp_invmod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_invmod (mp_int * a, mp_int * b, mp_int * c)
#else
int mp_invmod (mp_int * a, mp_int * b, mp_int * c)
#endif
{
 80204fc:	b580      	push	{r7, lr}
 80204fe:	b084      	sub	sp, #16
 8020500:	af00      	add	r7, sp, #0
 8020502:	60f8      	str	r0, [r7, #12]
 8020504:	60b9      	str	r1, [r7, #8]
 8020506:	607a      	str	r2, [r7, #4]
  return fp_invmod(a, b, c);
 8020508:	687a      	ldr	r2, [r7, #4]
 802050a:	68b9      	ldr	r1, [r7, #8]
 802050c:	68f8      	ldr	r0, [r7, #12]
 802050e:	f7fd fa1f 	bl	801d950 <fp_invmod>
 8020512:	4603      	mov	r3, r0
}
 8020514:	4618      	mov	r0, r3
 8020516:	3710      	adds	r7, #16
 8020518:	46bd      	mov	sp, r7
 802051a:	bd80      	pop	{r7, pc}

0802051c <mp_invmod_mont_ct>:

/* hac 14.61, pp608 */
int mp_invmod_mont_ct (mp_int * a, mp_int * b, mp_int * c, mp_digit mp)
{
 802051c:	b580      	push	{r7, lr}
 802051e:	b084      	sub	sp, #16
 8020520:	af00      	add	r7, sp, #0
 8020522:	60f8      	str	r0, [r7, #12]
 8020524:	60b9      	str	r1, [r7, #8]
 8020526:	607a      	str	r2, [r7, #4]
 8020528:	603b      	str	r3, [r7, #0]
  return fp_invmod_mont_ct(a, b, c, mp);
 802052a:	683b      	ldr	r3, [r7, #0]
 802052c:	687a      	ldr	r2, [r7, #4]
 802052e:	68b9      	ldr	r1, [r7, #8]
 8020530:	68f8      	ldr	r0, [r7, #12]
 8020532:	f7fd fbd9 	bl	801dce8 <fp_invmod_mont_ct>
 8020536:	4603      	mov	r3, r0
}
 8020538:	4618      	mov	r0, r3
 802053a:	3710      	adds	r7, #16
 802053c:	46bd      	mov	sp, r7
 802053e:	bd80      	pop	{r7, pc}

08020540 <mp_exptmod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#else
int mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#endif
{
 8020540:	b580      	push	{r7, lr}
 8020542:	b084      	sub	sp, #16
 8020544:	af00      	add	r7, sp, #0
 8020546:	60f8      	str	r0, [r7, #12]
 8020548:	60b9      	str	r1, [r7, #8]
 802054a:	607a      	str	r2, [r7, #4]
 802054c:	603b      	str	r3, [r7, #0]
  return fp_exptmod(G, X, P, Y);
 802054e:	683b      	ldr	r3, [r7, #0]
 8020550:	687a      	ldr	r2, [r7, #4]
 8020552:	68b9      	ldr	r1, [r7, #8]
 8020554:	68f8      	ldr	r0, [r7, #12]
 8020556:	f7fe fd39 	bl	801efcc <fp_exptmod>
 802055a:	4603      	mov	r3, r0
}
 802055c:	4618      	mov	r0, r3
 802055e:	3710      	adds	r7, #16
 8020560:	46bd      	mov	sp, r7
 8020562:	bd80      	pop	{r7, pc}

08020564 <mp_exptmod_nct>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_exptmod_nct (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#else
int mp_exptmod_nct (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#endif
{
 8020564:	b580      	push	{r7, lr}
 8020566:	b084      	sub	sp, #16
 8020568:	af00      	add	r7, sp, #0
 802056a:	60f8      	str	r0, [r7, #12]
 802056c:	60b9      	str	r1, [r7, #8]
 802056e:	607a      	str	r2, [r7, #4]
 8020570:	603b      	str	r3, [r7, #0]
  return fp_exptmod_nct(G, X, P, Y);
 8020572:	683b      	ldr	r3, [r7, #0]
 8020574:	687a      	ldr	r2, [r7, #4]
 8020576:	68b9      	ldr	r1, [r7, #8]
 8020578:	68f8      	ldr	r0, [r7, #12]
 802057a:	f7fe fdda 	bl	801f132 <fp_exptmod_nct>
 802057e:	4603      	mov	r3, r0
}
 8020580:	4618      	mov	r0, r3
 8020582:	3710      	adds	r7, #16
 8020584:	46bd      	mov	sp, r7
 8020586:	bd80      	pop	{r7, pc}

08020588 <mp_cmp>:


/* compare two ints (signed)*/
int mp_cmp (mp_int * a, mp_int * b)
{
 8020588:	b580      	push	{r7, lr}
 802058a:	b082      	sub	sp, #8
 802058c:	af00      	add	r7, sp, #0
 802058e:	6078      	str	r0, [r7, #4]
 8020590:	6039      	str	r1, [r7, #0]
  return fp_cmp(a, b);
 8020592:	6839      	ldr	r1, [r7, #0]
 8020594:	6878      	ldr	r0, [r7, #4]
 8020596:	f7ff f8b8 	bl	801f70a <fp_cmp>
 802059a:	4603      	mov	r3, r0
}
 802059c:	4618      	mov	r0, r3
 802059e:	3708      	adds	r7, #8
 80205a0:	46bd      	mov	sp, r7
 80205a2:	bd80      	pop	{r7, pc}

080205a4 <mp_cmp_d>:

/* compare a digit */
int mp_cmp_d(mp_int * a, mp_digit b)
{
 80205a4:	b580      	push	{r7, lr}
 80205a6:	b082      	sub	sp, #8
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	6078      	str	r0, [r7, #4]
 80205ac:	6039      	str	r1, [r7, #0]
  return fp_cmp_d(a, b);
 80205ae:	6839      	ldr	r1, [r7, #0]
 80205b0:	6878      	ldr	r0, [r7, #4]
 80205b2:	f7ff f8d7 	bl	801f764 <fp_cmp_d>
 80205b6:	4603      	mov	r3, r0
}
 80205b8:	4618      	mov	r0, r3
 80205ba:	3708      	adds	r7, #8
 80205bc:	46bd      	mov	sp, r7
 80205be:	bd80      	pop	{r7, pc}

080205c0 <mp_unsigned_bin_size>:

/* get the size for an unsigned equivalent */
int mp_unsigned_bin_size (const mp_int * a)
{
 80205c0:	b580      	push	{r7, lr}
 80205c2:	b082      	sub	sp, #8
 80205c4:	af00      	add	r7, sp, #0
 80205c6:	6078      	str	r0, [r7, #4]
  return fp_unsigned_bin_size(a);
 80205c8:	6878      	ldr	r0, [r7, #4]
 80205ca:	f7ff fc49 	bl	801fe60 <fp_unsigned_bin_size>
 80205ce:	4603      	mov	r3, r0
}
 80205d0:	4618      	mov	r0, r3
 80205d2:	3708      	adds	r7, #8
 80205d4:	46bd      	mov	sp, r7
 80205d6:	bd80      	pop	{r7, pc}

080205d8 <mp_to_unsigned_bin>:
  return fp_to_unsigned_bin_at_pos(x, t, b);
}

/* store in unsigned [big endian] format */
int mp_to_unsigned_bin (mp_int * a, unsigned char *b)
{
 80205d8:	b580      	push	{r7, lr}
 80205da:	b082      	sub	sp, #8
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
 80205e0:	6039      	str	r1, [r7, #0]
  return fp_to_unsigned_bin(a,b);
 80205e2:	6839      	ldr	r1, [r7, #0]
 80205e4:	6878      	ldr	r0, [r7, #4]
 80205e6:	f7ff fbc5 	bl	801fd74 <fp_to_unsigned_bin>
 80205ea:	4603      	mov	r3, r0
}
 80205ec:	4618      	mov	r0, r3
 80205ee:	3708      	adds	r7, #8
 80205f0:	46bd      	mov	sp, r7
 80205f2:	bd80      	pop	{r7, pc}

080205f4 <mp_to_unsigned_bin_len>:

int mp_to_unsigned_bin_len(mp_int * a, unsigned char *b, int c)
{
 80205f4:	b580      	push	{r7, lr}
 80205f6:	b084      	sub	sp, #16
 80205f8:	af00      	add	r7, sp, #0
 80205fa:	60f8      	str	r0, [r7, #12]
 80205fc:	60b9      	str	r1, [r7, #8]
 80205fe:	607a      	str	r2, [r7, #4]
  return fp_to_unsigned_bin_len(a, b, c);
 8020600:	687a      	ldr	r2, [r7, #4]
 8020602:	68b9      	ldr	r1, [r7, #8]
 8020604:	68f8      	ldr	r0, [r7, #12]
 8020606:	f7ff fbe0 	bl	801fdca <fp_to_unsigned_bin_len>
 802060a:	4603      	mov	r3, r0
}
 802060c:	4618      	mov	r0, r3
 802060e:	3710      	adds	r7, #16
 8020610:	46bd      	mov	sp, r7
 8020612:	bd80      	pop	{r7, pc}

08020614 <mp_read_unsigned_bin>:
/* reads a unsigned char array, assumes the msb is stored first [big endian] */
int mp_read_unsigned_bin (mp_int * a, const unsigned char *b, int c)
{
 8020614:	b580      	push	{r7, lr}
 8020616:	b084      	sub	sp, #16
 8020618:	af00      	add	r7, sp, #0
 802061a:	60f8      	str	r0, [r7, #12]
 802061c:	60b9      	str	r1, [r7, #8]
 802061e:	607a      	str	r2, [r7, #4]
  return fp_read_unsigned_bin(a, b, c);
 8020620:	687a      	ldr	r2, [r7, #4]
 8020622:	68b9      	ldr	r1, [r7, #8]
 8020624:	68f8      	ldr	r0, [r7, #12]
 8020626:	f7ff faf6 	bl	801fc16 <fp_read_unsigned_bin>
 802062a:	4603      	mov	r3, r0
}
 802062c:	4618      	mov	r0, r3
 802062e:	3710      	adds	r7, #16
 8020630:	46bd      	mov	sp, r7
 8020632:	bd80      	pop	{r7, pc}

08020634 <mp_sub_d>:


int mp_sub_d(fp_int *a, fp_digit b, fp_int *c)
{
 8020634:	b580      	push	{r7, lr}
 8020636:	b084      	sub	sp, #16
 8020638:	af00      	add	r7, sp, #0
 802063a:	60f8      	str	r0, [r7, #12]
 802063c:	60b9      	str	r1, [r7, #8]
 802063e:	607a      	str	r2, [r7, #4]
  return fp_sub_d(a, b, c);
 8020640:	687a      	ldr	r2, [r7, #4]
 8020642:	68b9      	ldr	r1, [r7, #8]
 8020644:	68f8      	ldr	r0, [r7, #12]
 8020646:	f7ff fdd7 	bl	80201f8 <fp_sub_d>
 802064a:	4603      	mov	r3, r0
}
 802064c:	4618      	mov	r0, r3
 802064e:	3710      	adds	r7, #16
 8020650:	46bd      	mov	sp, r7
 8020652:	bd80      	pop	{r7, pc}

08020654 <fp_copy>:
  fp_div_2d(a, b, c, d);
  return MP_OKAY;
}

void fp_copy(const fp_int *a, fp_int *b)
{
 8020654:	b580      	push	{r7, lr}
 8020656:	b084      	sub	sp, #16
 8020658:	af00      	add	r7, sp, #0
 802065a:	6078      	str	r0, [r7, #4]
 802065c:	6039      	str	r1, [r7, #0]
    /* if source and destination are different */
    if (a != b) {
 802065e:	687a      	ldr	r2, [r7, #4]
 8020660:	683b      	ldr	r3, [r7, #0]
 8020662:	429a      	cmp	r2, r3
 8020664:	d031      	beq.n	80206ca <fp_copy+0x76>
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
        /* verify a will fit in b */
        if (b->size >= a->used) {
 8020666:	683b      	ldr	r3, [r7, #0]
 8020668:	689a      	ldr	r2, [r3, #8]
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	429a      	cmp	r2, r3
 8020670:	db2b      	blt.n	80206ca <fp_copy+0x76>
            int x, oldused;
            oldused = b->used;
 8020672:	683b      	ldr	r3, [r7, #0]
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	60bb      	str	r3, [r7, #8]
            b->used = a->used;
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	681a      	ldr	r2, [r3, #0]
 802067c:	683b      	ldr	r3, [r7, #0]
 802067e:	601a      	str	r2, [r3, #0]
            b->sign = a->sign;
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	685a      	ldr	r2, [r3, #4]
 8020684:	683b      	ldr	r3, [r7, #0]
 8020686:	605a      	str	r2, [r3, #4]

            XMEMCPY(b->dp, a->dp, a->used * sizeof(fp_digit));
 8020688:	683b      	ldr	r3, [r7, #0]
 802068a:	f103 000c 	add.w	r0, r3, #12
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	f103 010c 	add.w	r1, r3, #12
 8020694:	687b      	ldr	r3, [r7, #4]
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	009b      	lsls	r3, r3, #2
 802069a:	461a      	mov	r2, r3
 802069c:	f000 fe22 	bl	80212e4 <memcpy>

            /* zero any excess digits on the destination that we didn't write to */
            for (x = b->used; x >= 0 && x < oldused; x++) {
 80206a0:	683b      	ldr	r3, [r7, #0]
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	60fb      	str	r3, [r7, #12]
 80206a6:	e009      	b.n	80206bc <fp_copy+0x68>
                b->dp[x] = 0;
 80206a8:	683a      	ldr	r2, [r7, #0]
 80206aa:	68fb      	ldr	r3, [r7, #12]
 80206ac:	3302      	adds	r3, #2
 80206ae:	009b      	lsls	r3, r3, #2
 80206b0:	4413      	add	r3, r2
 80206b2:	2200      	movs	r2, #0
 80206b4:	605a      	str	r2, [r3, #4]
            for (x = b->used; x >= 0 && x < oldused; x++) {
 80206b6:	68fb      	ldr	r3, [r7, #12]
 80206b8:	3301      	adds	r3, #1
 80206ba:	60fb      	str	r3, [r7, #12]
 80206bc:	68fb      	ldr	r3, [r7, #12]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	db03      	blt.n	80206ca <fp_copy+0x76>
 80206c2:	68fa      	ldr	r2, [r7, #12]
 80206c4:	68bb      	ldr	r3, [r7, #8]
 80206c6:	429a      	cmp	r2, r3
 80206c8:	dbee      	blt.n	80206a8 <fp_copy+0x54>
        b->used = a->used;
        b->sign = a->sign;
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
#endif
    }
}
 80206ca:	bf00      	nop
 80206cc:	3710      	adds	r7, #16
 80206ce:	46bd      	mov	sp, r7
 80206d0:	bd80      	pop	{r7, pc}

080206d2 <fp_init_copy>:
    fp_init_copy(a, b);
    return MP_OKAY;
}

void fp_init_copy(fp_int *a, fp_int* b)
{
 80206d2:	b580      	push	{r7, lr}
 80206d4:	b082      	sub	sp, #8
 80206d6:	af00      	add	r7, sp, #0
 80206d8:	6078      	str	r0, [r7, #4]
 80206da:	6039      	str	r1, [r7, #0]
    if (a != b) {
 80206dc:	687a      	ldr	r2, [r7, #4]
 80206de:	683b      	ldr	r3, [r7, #0]
 80206e0:	429a      	cmp	r2, r3
 80206e2:	d006      	beq.n	80206f2 <fp_init_copy+0x20>
        fp_init(a);
 80206e4:	6878      	ldr	r0, [r7, #4]
 80206e6:	f7ff fdd2 	bl	802028e <fp_init>
        fp_copy(b, a);
 80206ea:	6879      	ldr	r1, [r7, #4]
 80206ec:	6838      	ldr	r0, [r7, #0]
 80206ee:	f7ff ffb1 	bl	8020654 <fp_copy>
    }
}
 80206f2:	bf00      	nop
 80206f4:	3708      	adds	r7, #8
 80206f6:	46bd      	mov	sp, r7
 80206f8:	bd80      	pop	{r7, pc}

080206fa <mp_copy>:

/* fast math wrappers */
int mp_copy(const fp_int* a, fp_int* b)
{
 80206fa:	b580      	push	{r7, lr}
 80206fc:	b082      	sub	sp, #8
 80206fe:	af00      	add	r7, sp, #0
 8020700:	6078      	str	r0, [r7, #4]
 8020702:	6039      	str	r1, [r7, #0]
    fp_copy(a, b);
 8020704:	6839      	ldr	r1, [r7, #0]
 8020706:	6878      	ldr	r0, [r7, #4]
 8020708:	f7ff ffa4 	bl	8020654 <fp_copy>
    return MP_OKAY;
 802070c:	2300      	movs	r3, #0
}
 802070e:	4618      	mov	r0, r3
 8020710:	3708      	adds	r7, #8
 8020712:	46bd      	mov	sp, r7
 8020714:	bd80      	pop	{r7, pc}

08020716 <mp_iszero>:
{
    return fp_isodd(a);
}

int mp_iszero(mp_int* a)
{
 8020716:	b480      	push	{r7}
 8020718:	b083      	sub	sp, #12
 802071a:	af00      	add	r7, sp, #0
 802071c:	6078      	str	r0, [r7, #4]
    return fp_iszero(a);
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	2b00      	cmp	r3, #0
 8020724:	bf0c      	ite	eq
 8020726:	2301      	moveq	r3, #1
 8020728:	2300      	movne	r3, #0
 802072a:	b2db      	uxtb	r3, r3
}
 802072c:	4618      	mov	r0, r3
 802072e:	370c      	adds	r7, #12
 8020730:	46bd      	mov	sp, r7
 8020732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020736:	4770      	bx	lr

08020738 <mp_count_bits>:

int mp_count_bits (const mp_int* a)
{
 8020738:	b580      	push	{r7, lr}
 802073a:	b082      	sub	sp, #8
 802073c:	af00      	add	r7, sp, #0
 802073e:	6078      	str	r0, [r7, #4]
    return fp_count_bits(a);
 8020740:	6878      	ldr	r0, [r7, #4]
 8020742:	f7ff fbeb 	bl	801ff1c <fp_count_bits>
 8020746:	4603      	mov	r3, r0
}
 8020748:	4618      	mov	r0, r3
 802074a:	3708      	adds	r7, #8
 802074c:	46bd      	mov	sp, r7
 802074e:	bd80      	pop	{r7, pc}

08020750 <mp_rshb>:
{
    return fp_leading_bit(a);
}

void mp_rshb (mp_int* a, int x)
{
 8020750:	b580      	push	{r7, lr}
 8020752:	b082      	sub	sp, #8
 8020754:	af00      	add	r7, sp, #0
 8020756:	6078      	str	r0, [r7, #4]
 8020758:	6039      	str	r1, [r7, #0]
    fp_rshb(a, x);
 802075a:	6839      	ldr	r1, [r7, #0]
 802075c:	6878      	ldr	r0, [r7, #4]
 802075e:	f7ff fc67 	bl	8020030 <fp_rshb>
}
 8020762:	bf00      	nop
 8020764:	3708      	adds	r7, #8
 8020766:	46bd      	mov	sp, r7
 8020768:	bd80      	pop	{r7, pc}

0802076a <mp_montgomery_calc_normalization>:
    return fp_sqrmod(a, b, c);
}

/* fast math conversion */
int mp_montgomery_calc_normalization(mp_int *a, mp_int *b)
{
 802076a:	b580      	push	{r7, lr}
 802076c:	b082      	sub	sp, #8
 802076e:	af00      	add	r7, sp, #0
 8020770:	6078      	str	r0, [r7, #4]
 8020772:	6039      	str	r1, [r7, #0]
    return fp_montgomery_calc_normalization(a, b);
 8020774:	6839      	ldr	r1, [r7, #0]
 8020776:	6878      	ldr	r0, [r7, #4]
 8020778:	f7ff f8b6 	bl	801f8e8 <fp_montgomery_calc_normalization>
 802077c:	4603      	mov	r3, r0
}
 802077e:	4618      	mov	r0, r3
 8020780:	3708      	adds	r7, #8
 8020782:	46bd      	mov	sp, r7
 8020784:	bd80      	pop	{r7, pc}

08020786 <fp_cond_swap_ct>:

#endif /* WOLFSSL_KEY_GEN || HAVE_ECC */

static int fp_cond_swap_ct (mp_int * a, mp_int * b, int c, int m)
{
 8020786:	b580      	push	{r7, lr}
 8020788:	b088      	sub	sp, #32
 802078a:	af00      	add	r7, sp, #0
 802078c:	60f8      	str	r0, [r7, #12]
 802078e:	60b9      	str	r1, [r7, #8]
 8020790:	607a      	str	r2, [r7, #4]
 8020792:	603b      	str	r3, [r7, #0]
    int i;
    mp_digit mask = (mp_digit)0 - m;
 8020794:	683b      	ldr	r3, [r7, #0]
 8020796:	425b      	negs	r3, r3
 8020798:	61bb      	str	r3, [r7, #24]
#else
    fp_int* t;
#endif

#ifdef WOLFSSL_SMALL_STACK
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 802079a:	f44f 700b 	mov.w	r0, #556	; 0x22c
 802079e:	f7f8 fa05 	bl	8018bac <wolfSSL_Malloc>
 80207a2:	6178      	str	r0, [r7, #20]
   if (t == NULL)
 80207a4:	697b      	ldr	r3, [r7, #20]
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d102      	bne.n	80207b0 <fp_cond_swap_ct+0x2a>
       return FP_MEM;
 80207aa:	f06f 0301 	mvn.w	r3, #1
 80207ae:	e07a      	b.n	80208a6 <fp_cond_swap_ct+0x120>
#endif

    t->used = (a->used ^ b->used) & mask;
 80207b0:	68fb      	ldr	r3, [r7, #12]
 80207b2:	681a      	ldr	r2, [r3, #0]
 80207b4:	68bb      	ldr	r3, [r7, #8]
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	4053      	eors	r3, r2
 80207ba:	461a      	mov	r2, r3
 80207bc:	69bb      	ldr	r3, [r7, #24]
 80207be:	4013      	ands	r3, r2
 80207c0:	461a      	mov	r2, r3
 80207c2:	697b      	ldr	r3, [r7, #20]
 80207c4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < c; i++) {
 80207c6:	2300      	movs	r3, #0
 80207c8:	61fb      	str	r3, [r7, #28]
 80207ca:	e017      	b.n	80207fc <fp_cond_swap_ct+0x76>
        t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
 80207cc:	68fa      	ldr	r2, [r7, #12]
 80207ce:	69fb      	ldr	r3, [r7, #28]
 80207d0:	3302      	adds	r3, #2
 80207d2:	009b      	lsls	r3, r3, #2
 80207d4:	4413      	add	r3, r2
 80207d6:	685a      	ldr	r2, [r3, #4]
 80207d8:	68b9      	ldr	r1, [r7, #8]
 80207da:	69fb      	ldr	r3, [r7, #28]
 80207dc:	3302      	adds	r3, #2
 80207de:	009b      	lsls	r3, r3, #2
 80207e0:	440b      	add	r3, r1
 80207e2:	685b      	ldr	r3, [r3, #4]
 80207e4:	405a      	eors	r2, r3
 80207e6:	69bb      	ldr	r3, [r7, #24]
 80207e8:	401a      	ands	r2, r3
 80207ea:	6979      	ldr	r1, [r7, #20]
 80207ec:	69fb      	ldr	r3, [r7, #28]
 80207ee:	3302      	adds	r3, #2
 80207f0:	009b      	lsls	r3, r3, #2
 80207f2:	440b      	add	r3, r1
 80207f4:	605a      	str	r2, [r3, #4]
    for (i = 0; i < c; i++) {
 80207f6:	69fb      	ldr	r3, [r7, #28]
 80207f8:	3301      	adds	r3, #1
 80207fa:	61fb      	str	r3, [r7, #28]
 80207fc:	69fa      	ldr	r2, [r7, #28]
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	429a      	cmp	r2, r3
 8020802:	dbe3      	blt.n	80207cc <fp_cond_swap_ct+0x46>
    }
    a->used ^= t->used;
 8020804:	68fb      	ldr	r3, [r7, #12]
 8020806:	681a      	ldr	r2, [r3, #0]
 8020808:	697b      	ldr	r3, [r7, #20]
 802080a:	681b      	ldr	r3, [r3, #0]
 802080c:	405a      	eors	r2, r3
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	601a      	str	r2, [r3, #0]
    for (i = 0; i < c; i++) {
 8020812:	2300      	movs	r3, #0
 8020814:	61fb      	str	r3, [r7, #28]
 8020816:	e015      	b.n	8020844 <fp_cond_swap_ct+0xbe>
        a->dp[i] ^= t->dp[i];
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	69fb      	ldr	r3, [r7, #28]
 802081c:	3302      	adds	r3, #2
 802081e:	009b      	lsls	r3, r3, #2
 8020820:	4413      	add	r3, r2
 8020822:	685a      	ldr	r2, [r3, #4]
 8020824:	6979      	ldr	r1, [r7, #20]
 8020826:	69fb      	ldr	r3, [r7, #28]
 8020828:	3302      	adds	r3, #2
 802082a:	009b      	lsls	r3, r3, #2
 802082c:	440b      	add	r3, r1
 802082e:	685b      	ldr	r3, [r3, #4]
 8020830:	405a      	eors	r2, r3
 8020832:	68f9      	ldr	r1, [r7, #12]
 8020834:	69fb      	ldr	r3, [r7, #28]
 8020836:	3302      	adds	r3, #2
 8020838:	009b      	lsls	r3, r3, #2
 802083a:	440b      	add	r3, r1
 802083c:	605a      	str	r2, [r3, #4]
    for (i = 0; i < c; i++) {
 802083e:	69fb      	ldr	r3, [r7, #28]
 8020840:	3301      	adds	r3, #1
 8020842:	61fb      	str	r3, [r7, #28]
 8020844:	69fa      	ldr	r2, [r7, #28]
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	429a      	cmp	r2, r3
 802084a:	dbe5      	blt.n	8020818 <fp_cond_swap_ct+0x92>
    }
    b->used ^= t->used;
 802084c:	68bb      	ldr	r3, [r7, #8]
 802084e:	681a      	ldr	r2, [r3, #0]
 8020850:	697b      	ldr	r3, [r7, #20]
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	405a      	eors	r2, r3
 8020856:	68bb      	ldr	r3, [r7, #8]
 8020858:	601a      	str	r2, [r3, #0]
    for (i = 0; i < c; i++) {
 802085a:	2300      	movs	r3, #0
 802085c:	61fb      	str	r3, [r7, #28]
 802085e:	e015      	b.n	802088c <fp_cond_swap_ct+0x106>
        b->dp[i] ^= t->dp[i];
 8020860:	68ba      	ldr	r2, [r7, #8]
 8020862:	69fb      	ldr	r3, [r7, #28]
 8020864:	3302      	adds	r3, #2
 8020866:	009b      	lsls	r3, r3, #2
 8020868:	4413      	add	r3, r2
 802086a:	685a      	ldr	r2, [r3, #4]
 802086c:	6979      	ldr	r1, [r7, #20]
 802086e:	69fb      	ldr	r3, [r7, #28]
 8020870:	3302      	adds	r3, #2
 8020872:	009b      	lsls	r3, r3, #2
 8020874:	440b      	add	r3, r1
 8020876:	685b      	ldr	r3, [r3, #4]
 8020878:	405a      	eors	r2, r3
 802087a:	68b9      	ldr	r1, [r7, #8]
 802087c:	69fb      	ldr	r3, [r7, #28]
 802087e:	3302      	adds	r3, #2
 8020880:	009b      	lsls	r3, r3, #2
 8020882:	440b      	add	r3, r1
 8020884:	605a      	str	r2, [r3, #4]
    for (i = 0; i < c; i++) {
 8020886:	69fb      	ldr	r3, [r7, #28]
 8020888:	3301      	adds	r3, #1
 802088a:	61fb      	str	r3, [r7, #28]
 802088c:	69fa      	ldr	r2, [r7, #28]
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	429a      	cmp	r2, r3
 8020892:	dbe5      	blt.n	8020860 <fp_cond_swap_ct+0xda>
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 8020894:	697b      	ldr	r3, [r7, #20]
 8020896:	613b      	str	r3, [r7, #16]
 8020898:	693b      	ldr	r3, [r7, #16]
 802089a:	2b00      	cmp	r3, #0
 802089c:	d002      	beq.n	80208a4 <fp_cond_swap_ct+0x11e>
 802089e:	6938      	ldr	r0, [r7, #16]
 80208a0:	f7f8 f9a0 	bl	8018be4 <wolfSSL_Free>
#endif
    return FP_OKAY;
 80208a4:	2300      	movs	r3, #0
}
 80208a6:	4618      	mov	r0, r3
 80208a8:	3720      	adds	r7, #32
 80208aa:	46bd      	mov	sp, r7
 80208ac:	bd80      	pop	{r7, pc}

080208ae <mp_cond_swap_ct>:
}
#endif /* !NO_RSA || !NO_DSA || !NO_DH || WOLFSSL_KEY_GEN */


int mp_cond_swap_ct(mp_int * a, mp_int * b, int c, int m)
{
 80208ae:	b580      	push	{r7, lr}
 80208b0:	b084      	sub	sp, #16
 80208b2:	af00      	add	r7, sp, #0
 80208b4:	60f8      	str	r0, [r7, #12]
 80208b6:	60b9      	str	r1, [r7, #8]
 80208b8:	607a      	str	r2, [r7, #4]
 80208ba:	603b      	str	r3, [r7, #0]
    return fp_cond_swap_ct(a, b, c, m);
 80208bc:	683b      	ldr	r3, [r7, #0]
 80208be:	687a      	ldr	r2, [r7, #4]
 80208c0:	68b9      	ldr	r1, [r7, #8]
 80208c2:	68f8      	ldr	r0, [r7, #12]
 80208c4:	f7ff ff5f 	bl	8020786 <fp_cond_swap_ct>
 80208c8:	4603      	mov	r3, r0
}
 80208ca:	4618      	mov	r0, r3
 80208cc:	3710      	adds	r7, #16
 80208ce:	46bd      	mov	sp, r7
 80208d0:	bd80      	pop	{r7, pc}

080208d2 <fp_add_d>:
#if defined(HAVE_ECC) || !defined(NO_PWDBASED) || defined(OPENSSL_EXTRA) || \
    defined(WC_RSA_BLINDING) || !defined(NO_DSA) || \
    (!defined(NO_RSA) && !defined(NO_RSA_BOUNDS_CHECK))
/* c = a + b */
int fp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
 80208d2:	b580      	push	{r7, lr}
 80208d4:	b088      	sub	sp, #32
 80208d6:	af00      	add	r7, sp, #0
 80208d8:	60f8      	str	r0, [r7, #12]
 80208da:	60b9      	str	r1, [r7, #8]
 80208dc:	607a      	str	r2, [r7, #4]
   fp_int* tmp;
#endif
   int     err;

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 80208de:	f44f 700b 	mov.w	r0, #556	; 0x22c
 80208e2:	f7f8 f963 	bl	8018bac <wolfSSL_Malloc>
 80208e6:	61f8      	str	r0, [r7, #28]
   if (tmp == NULL)
 80208e8:	69fb      	ldr	r3, [r7, #28]
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d102      	bne.n	80208f4 <fp_add_d+0x22>
       return FP_MEM;
 80208ee:	f06f 0301 	mvn.w	r3, #1
 80208f2:	e015      	b.n	8020920 <fp_add_d+0x4e>
#endif

   fp_init(tmp);
 80208f4:	69f8      	ldr	r0, [r7, #28]
 80208f6:	f7ff fcca 	bl	802028e <fp_init>
   fp_set(tmp, b);
 80208fa:	68b9      	ldr	r1, [r7, #8]
 80208fc:	69f8      	ldr	r0, [r7, #28]
 80208fe:	f7ff faca 	bl	801fe96 <fp_set>
   err = fp_add(a, tmp, c);
 8020902:	687a      	ldr	r2, [r7, #4]
 8020904:	69f9      	ldr	r1, [r7, #28]
 8020906:	68f8      	ldr	r0, [r7, #12]
 8020908:	f7fb fb6b 	bl	801bfe2 <fp_add>
 802090c:	61b8      	str	r0, [r7, #24]

#ifdef WOLFSSL_SMALL_STACK
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 802090e:	69fb      	ldr	r3, [r7, #28]
 8020910:	617b      	str	r3, [r7, #20]
 8020912:	697b      	ldr	r3, [r7, #20]
 8020914:	2b00      	cmp	r3, #0
 8020916:	d002      	beq.n	802091e <fp_add_d+0x4c>
 8020918:	6978      	ldr	r0, [r7, #20]
 802091a:	f7f8 f963 	bl	8018be4 <wolfSSL_Free>
#endif
   return err;
 802091e:	69bb      	ldr	r3, [r7, #24]
}
 8020920:	4618      	mov	r0, r3
 8020922:	3720      	adds	r7, #32
 8020924:	46bd      	mov	sp, r7
 8020926:	bd80      	pop	{r7, pc}

08020928 <mp_add_d>:

/* external compatibility */
int mp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
 8020928:	b580      	push	{r7, lr}
 802092a:	b084      	sub	sp, #16
 802092c:	af00      	add	r7, sp, #0
 802092e:	60f8      	str	r0, [r7, #12]
 8020930:	60b9      	str	r1, [r7, #8]
 8020932:	607a      	str	r2, [r7, #4]
    return fp_add_d(a, b, c);
 8020934:	687a      	ldr	r2, [r7, #4]
 8020936:	68b9      	ldr	r1, [r7, #8]
 8020938:	68f8      	ldr	r0, [r7, #12]
 802093a:	f7ff ffca 	bl	80208d2 <fp_add_d>
 802093e:	4603      	mov	r3, r0
}
 8020940:	4618      	mov	r0, r3
 8020942:	3710      	adds	r7, #16
 8020944:	46bd      	mov	sp, r7
 8020946:	bd80      	pop	{r7, pc}

08020948 <fp_read_radix_16>:
#endif

#if !defined(NO_DSA) || defined(HAVE_ECC)
#if DIGIT_BIT == 64 || DIGIT_BIT == 32
static int fp_read_radix_16(fp_int *a, const char *str)
{
 8020948:	b580      	push	{r7, lr}
 802094a:	b088      	sub	sp, #32
 802094c:	af00      	add	r7, sp, #0
 802094e:	6078      	str	r0, [r7, #4]
 8020950:	6039      	str	r1, [r7, #0]
  int     ch;

  /* if the leading digit is a
   * minus set the sign to negative.
   */
  if (*str == '-') {
 8020952:	683b      	ldr	r3, [r7, #0]
 8020954:	781b      	ldrb	r3, [r3, #0]
 8020956:	2b2d      	cmp	r3, #45	; 0x2d
 8020958:	d105      	bne.n	8020966 <fp_read_radix_16+0x1e>
    ++str;
 802095a:	683b      	ldr	r3, [r7, #0]
 802095c:	3301      	adds	r3, #1
 802095e:	603b      	str	r3, [r7, #0]
    neg = FP_NEG;
 8020960:	2301      	movs	r3, #1
 8020962:	613b      	str	r3, [r7, #16]
 8020964:	e001      	b.n	802096a <fp_read_radix_16+0x22>
  } else {
    neg = FP_ZPOS;
 8020966:	2300      	movs	r3, #0
 8020968:	613b      	str	r3, [r7, #16]
  }

  j = 0;
 802096a:	2300      	movs	r3, #0
 802096c:	61bb      	str	r3, [r7, #24]
  k = 0;
 802096e:	2300      	movs	r3, #0
 8020970:	617b      	str	r3, [r7, #20]
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 8020972:	6838      	ldr	r0, [r7, #0]
 8020974:	f7df fc46 	bl	8000204 <strlen>
 8020978:	4603      	mov	r3, r0
 802097a:	3b01      	subs	r3, #1
 802097c:	61fb      	str	r3, [r7, #28]
 802097e:	e039      	b.n	80209f4 <fp_read_radix_16+0xac>
      ch = (int)HexCharToByte(str[i]);
 8020980:	69fb      	ldr	r3, [r7, #28]
 8020982:	683a      	ldr	r2, [r7, #0]
 8020984:	4413      	add	r3, r2
 8020986:	781b      	ldrb	r3, [r3, #0]
 8020988:	4618      	mov	r0, r3
 802098a:	f7fb faf2 	bl	801bf72 <HexCharToByte>
 802098e:	4603      	mov	r3, r0
 8020990:	60fb      	str	r3, [r7, #12]
      if (ch < 0) {
 8020992:	68fb      	ldr	r3, [r7, #12]
 8020994:	2b00      	cmp	r3, #0
 8020996:	da02      	bge.n	802099e <fp_read_radix_16+0x56>
        return FP_VAL;
 8020998:	f04f 33ff 	mov.w	r3, #4294967295
 802099c:	e057      	b.n	8020a4e <fp_read_radix_16+0x106>
      }

      k += j == DIGIT_BIT;
 802099e:	69bb      	ldr	r3, [r7, #24]
 80209a0:	2b20      	cmp	r3, #32
 80209a2:	bf0c      	ite	eq
 80209a4:	2301      	moveq	r3, #1
 80209a6:	2300      	movne	r3, #0
 80209a8:	b2db      	uxtb	r3, r3
 80209aa:	461a      	mov	r2, r3
 80209ac:	697b      	ldr	r3, [r7, #20]
 80209ae:	4413      	add	r3, r2
 80209b0:	617b      	str	r3, [r7, #20]
      j &= DIGIT_BIT - 1;
 80209b2:	69bb      	ldr	r3, [r7, #24]
 80209b4:	f003 031f 	and.w	r3, r3, #31
 80209b8:	61bb      	str	r3, [r7, #24]
      if (k >= FP_SIZE)
 80209ba:	697b      	ldr	r3, [r7, #20]
 80209bc:	2b87      	cmp	r3, #135	; 0x87
 80209be:	dd02      	ble.n	80209c6 <fp_read_radix_16+0x7e>
          return FP_VAL;
 80209c0:	f04f 33ff 	mov.w	r3, #4294967295
 80209c4:	e043      	b.n	8020a4e <fp_read_radix_16+0x106>

      a->dp[k] |= ((fp_digit)ch) << j;
 80209c6:	687a      	ldr	r2, [r7, #4]
 80209c8:	697b      	ldr	r3, [r7, #20]
 80209ca:	3302      	adds	r3, #2
 80209cc:	009b      	lsls	r3, r3, #2
 80209ce:	4413      	add	r3, r2
 80209d0:	685a      	ldr	r2, [r3, #4]
 80209d2:	68f9      	ldr	r1, [r7, #12]
 80209d4:	69bb      	ldr	r3, [r7, #24]
 80209d6:	fa01 f303 	lsl.w	r3, r1, r3
 80209da:	431a      	orrs	r2, r3
 80209dc:	6879      	ldr	r1, [r7, #4]
 80209de:	697b      	ldr	r3, [r7, #20]
 80209e0:	3302      	adds	r3, #2
 80209e2:	009b      	lsls	r3, r3, #2
 80209e4:	440b      	add	r3, r1
 80209e6:	605a      	str	r2, [r3, #4]
      j += 4;
 80209e8:	69bb      	ldr	r3, [r7, #24]
 80209ea:	3304      	adds	r3, #4
 80209ec:	61bb      	str	r3, [r7, #24]
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 80209ee:	69fb      	ldr	r3, [r7, #28]
 80209f0:	3b01      	subs	r3, #1
 80209f2:	61fb      	str	r3, [r7, #28]
 80209f4:	69fb      	ldr	r3, [r7, #28]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	dac2      	bge.n	8020980 <fp_read_radix_16+0x38>
  }

  a->used = k + 1;
 80209fa:	697b      	ldr	r3, [r7, #20]
 80209fc:	1c5a      	adds	r2, r3, #1
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	601a      	str	r2, [r3, #0]
  fp_clamp(a);
 8020a02:	e004      	b.n	8020a0e <fp_read_radix_16+0xc6>
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	1e5a      	subs	r2, r3, #1
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	601a      	str	r2, [r3, #0]
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d009      	beq.n	8020a2a <fp_read_radix_16+0xe2>
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	3b01      	subs	r3, #1
 8020a1c:	687a      	ldr	r2, [r7, #4]
 8020a1e:	3302      	adds	r3, #2
 8020a20:	009b      	lsls	r3, r3, #2
 8020a22:	4413      	add	r3, r2
 8020a24:	685b      	ldr	r3, [r3, #4]
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d0ec      	beq.n	8020a04 <fp_read_radix_16+0xbc>
 8020a2a:	687b      	ldr	r3, [r7, #4]
 8020a2c:	681b      	ldr	r3, [r3, #0]
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d002      	beq.n	8020a38 <fp_read_radix_16+0xf0>
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	685b      	ldr	r3, [r3, #4]
 8020a36:	e000      	b.n	8020a3a <fp_read_radix_16+0xf2>
 8020a38:	2300      	movs	r3, #0
 8020a3a:	687a      	ldr	r2, [r7, #4]
 8020a3c:	6053      	str	r3, [r2, #4]
  /* set the sign only if a != 0 */
  if (fp_iszero(a) != FP_YES) {
 8020a3e:	687b      	ldr	r3, [r7, #4]
 8020a40:	681b      	ldr	r3, [r3, #0]
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d002      	beq.n	8020a4c <fp_read_radix_16+0x104>
     a->sign = neg;
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	693a      	ldr	r2, [r7, #16]
 8020a4a:	605a      	str	r2, [r3, #4]
  }
  return FP_OKAY;
 8020a4c:	2300      	movs	r3, #0
}
 8020a4e:	4618      	mov	r0, r3
 8020a50:	3720      	adds	r7, #32
 8020a52:	46bd      	mov	sp, r7
 8020a54:	bd80      	pop	{r7, pc}
	...

08020a58 <fp_read_radix>:
#endif

static int fp_read_radix(fp_int *a, const char *str, int radix)
{
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	b088      	sub	sp, #32
 8020a5c:	af00      	add	r7, sp, #0
 8020a5e:	60f8      	str	r0, [r7, #12]
 8020a60:	60b9      	str	r1, [r7, #8]
 8020a62:	607a      	str	r2, [r7, #4]
  int     y, neg;
  char    ch;

  /* set the integer to the default of zero */
  fp_zero (a);
 8020a64:	68f8      	ldr	r0, [r7, #12]
 8020a66:	f7ff fc20 	bl	80202aa <fp_zero>

#if DIGIT_BIT == 64 || DIGIT_BIT == 32
  if (radix == 16)
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	2b10      	cmp	r3, #16
 8020a6e:	d105      	bne.n	8020a7c <fp_read_radix+0x24>
      return fp_read_radix_16(a, str);
 8020a70:	68b9      	ldr	r1, [r7, #8]
 8020a72:	68f8      	ldr	r0, [r7, #12]
 8020a74:	f7ff ff68 	bl	8020948 <fp_read_radix_16>
 8020a78:	4603      	mov	r3, r0
 8020a7a:	e073      	b.n	8020b64 <fp_read_radix+0x10c>
#endif

  /* make sure the radix is ok */
  if (radix < 2 || radix > 64) {
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	2b01      	cmp	r3, #1
 8020a80:	dd02      	ble.n	8020a88 <fp_read_radix+0x30>
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	2b40      	cmp	r3, #64	; 0x40
 8020a86:	dd02      	ble.n	8020a8e <fp_read_radix+0x36>
    return FP_VAL;
 8020a88:	f04f 33ff 	mov.w	r3, #4294967295
 8020a8c:	e06a      	b.n	8020b64 <fp_read_radix+0x10c>
  }

  /* if the leading digit is a
   * minus set the sign to negative.
   */
  if (*str == '-') {
 8020a8e:	68bb      	ldr	r3, [r7, #8]
 8020a90:	781b      	ldrb	r3, [r3, #0]
 8020a92:	2b2d      	cmp	r3, #45	; 0x2d
 8020a94:	d105      	bne.n	8020aa2 <fp_read_radix+0x4a>
    ++str;
 8020a96:	68bb      	ldr	r3, [r7, #8]
 8020a98:	3301      	adds	r3, #1
 8020a9a:	60bb      	str	r3, [r7, #8]
    neg = FP_NEG;
 8020a9c:	2301      	movs	r3, #1
 8020a9e:	61bb      	str	r3, [r7, #24]
 8020aa0:	e052      	b.n	8020b48 <fp_read_radix+0xf0>
  } else {
    neg = FP_ZPOS;
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	61bb      	str	r3, [r7, #24]
  }

  /* process each digit of the string */
  while (*str) {
 8020aa6:	e04f      	b.n	8020b48 <fp_read_radix+0xf0>
    /* if the radix <= 36 the conversion is case insensitive
     * this allows numbers like 1AB and 1ab to represent the same  value
     * [e.g. in hex]
     */
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	2b24      	cmp	r3, #36	; 0x24
 8020aac:	dc11      	bgt.n	8020ad2 <fp_read_radix+0x7a>
 8020aae:	68bb      	ldr	r3, [r7, #8]
 8020ab0:	781b      	ldrb	r3, [r3, #0]
 8020ab2:	75fb      	strb	r3, [r7, #23]
 8020ab4:	7dfb      	ldrb	r3, [r7, #23]
 8020ab6:	3301      	adds	r3, #1
 8020ab8:	4a2c      	ldr	r2, [pc, #176]	; (8020b6c <fp_read_radix+0x114>)
 8020aba:	4413      	add	r3, r2
 8020abc:	781b      	ldrb	r3, [r3, #0]
 8020abe:	f003 0303 	and.w	r3, r3, #3
 8020ac2:	2b02      	cmp	r3, #2
 8020ac4:	d102      	bne.n	8020acc <fp_read_radix+0x74>
 8020ac6:	7dfb      	ldrb	r3, [r7, #23]
 8020ac8:	3b20      	subs	r3, #32
 8020aca:	e000      	b.n	8020ace <fp_read_radix+0x76>
 8020acc:	7dfb      	ldrb	r3, [r7, #23]
 8020ace:	b2db      	uxtb	r3, r3
 8020ad0:	e001      	b.n	8020ad6 <fp_read_radix+0x7e>
 8020ad2:	68bb      	ldr	r3, [r7, #8]
 8020ad4:	781b      	ldrb	r3, [r3, #0]
 8020ad6:	75bb      	strb	r3, [r7, #22]
    for (y = 0; y < 64; y++) {
 8020ad8:	2300      	movs	r3, #0
 8020ada:	61fb      	str	r3, [r7, #28]
 8020adc:	e009      	b.n	8020af2 <fp_read_radix+0x9a>
      if (ch == fp_s_rmap[y]) {
 8020ade:	4a24      	ldr	r2, [pc, #144]	; (8020b70 <fp_read_radix+0x118>)
 8020ae0:	69fb      	ldr	r3, [r7, #28]
 8020ae2:	4413      	add	r3, r2
 8020ae4:	781b      	ldrb	r3, [r3, #0]
 8020ae6:	7dba      	ldrb	r2, [r7, #22]
 8020ae8:	429a      	cmp	r2, r3
 8020aea:	d006      	beq.n	8020afa <fp_read_radix+0xa2>
    for (y = 0; y < 64; y++) {
 8020aec:	69fb      	ldr	r3, [r7, #28]
 8020aee:	3301      	adds	r3, #1
 8020af0:	61fb      	str	r3, [r7, #28]
 8020af2:	69fb      	ldr	r3, [r7, #28]
 8020af4:	2b3f      	cmp	r3, #63	; 0x3f
 8020af6:	ddf2      	ble.n	8020ade <fp_read_radix+0x86>
 8020af8:	e000      	b.n	8020afc <fp_read_radix+0xa4>
         break;
 8020afa:	bf00      	nop
      }
    }
    if (y >= radix) {
 8020afc:	69fa      	ldr	r2, [r7, #28]
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	429a      	cmp	r2, r3
 8020b02:	db02      	blt.n	8020b0a <fp_read_radix+0xb2>
      return FP_VAL;
 8020b04:	f04f 33ff 	mov.w	r3, #4294967295
 8020b08:	e02c      	b.n	8020b64 <fp_read_radix+0x10c>

    /* if the char was found in the map
     * and is less than the given radix add it
     * to the number, otherwise exit the loop.
     */
    if (y < radix) {
 8020b0a:	69fa      	ldr	r2, [r7, #28]
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	429a      	cmp	r2, r3
 8020b10:	da1f      	bge.n	8020b52 <fp_read_radix+0xfa>
      int ret = fp_mul_d (a, (fp_digit) radix, a);
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	68fa      	ldr	r2, [r7, #12]
 8020b16:	4619      	mov	r1, r3
 8020b18:	68f8      	ldr	r0, [r7, #12]
 8020b1a:	f7fb fcfa 	bl	801c512 <fp_mul_d>
 8020b1e:	6138      	str	r0, [r7, #16]
      if (ret != FP_OKAY)
 8020b20:	693b      	ldr	r3, [r7, #16]
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d001      	beq.n	8020b2a <fp_read_radix+0xd2>
        return ret;
 8020b26:	693b      	ldr	r3, [r7, #16]
 8020b28:	e01c      	b.n	8020b64 <fp_read_radix+0x10c>
      ret = fp_add_d (a, (fp_digit) y, a);
 8020b2a:	69fb      	ldr	r3, [r7, #28]
 8020b2c:	68fa      	ldr	r2, [r7, #12]
 8020b2e:	4619      	mov	r1, r3
 8020b30:	68f8      	ldr	r0, [r7, #12]
 8020b32:	f7ff fece 	bl	80208d2 <fp_add_d>
 8020b36:	6138      	str	r0, [r7, #16]
      if (ret != FP_OKAY)
 8020b38:	693b      	ldr	r3, [r7, #16]
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d001      	beq.n	8020b42 <fp_read_radix+0xea>
        return ret;
 8020b3e:	693b      	ldr	r3, [r7, #16]
 8020b40:	e010      	b.n	8020b64 <fp_read_radix+0x10c>
    } else {
      break;
    }
    ++str;
 8020b42:	68bb      	ldr	r3, [r7, #8]
 8020b44:	3301      	adds	r3, #1
 8020b46:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8020b48:	68bb      	ldr	r3, [r7, #8]
 8020b4a:	781b      	ldrb	r3, [r3, #0]
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d1ab      	bne.n	8020aa8 <fp_read_radix+0x50>
 8020b50:	e000      	b.n	8020b54 <fp_read_radix+0xfc>
      break;
 8020b52:	bf00      	nop
  }

  /* set the sign only if a != 0 */
  if (fp_iszero(a) != FP_YES) {
 8020b54:	68fb      	ldr	r3, [r7, #12]
 8020b56:	681b      	ldr	r3, [r3, #0]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d002      	beq.n	8020b62 <fp_read_radix+0x10a>
     a->sign = neg;
 8020b5c:	68fb      	ldr	r3, [r7, #12]
 8020b5e:	69ba      	ldr	r2, [r7, #24]
 8020b60:	605a      	str	r2, [r3, #4]
  }
  return FP_OKAY;
 8020b62:	2300      	movs	r3, #0
}
 8020b64:	4618      	mov	r0, r3
 8020b66:	3720      	adds	r7, #32
 8020b68:	46bd      	mov	sp, r7
 8020b6a:	bd80      	pop	{r7, pc}
 8020b6c:	0802c20c 	.word	0x0802c20c
 8020b70:	08029488 	.word	0x08029488

08020b74 <mp_read_radix>:

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b084      	sub	sp, #16
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	60f8      	str	r0, [r7, #12]
 8020b7c:	60b9      	str	r1, [r7, #8]
 8020b7e:	607a      	str	r2, [r7, #4]
    return fp_read_radix(a, str, radix);
 8020b80:	687a      	ldr	r2, [r7, #4]
 8020b82:	68b9      	ldr	r1, [r7, #8]
 8020b84:	68f8      	ldr	r0, [r7, #12]
 8020b86:	f7ff ff67 	bl	8020a58 <fp_read_radix>
 8020b8a:	4603      	mov	r3, r0
}
 8020b8c:	4618      	mov	r0, r3
 8020b8e:	3710      	adds	r7, #16
 8020b90:	46bd      	mov	sp, r7
 8020b92:	bd80      	pop	{r7, pc}

08020b94 <mp_sqr>:

#ifdef HAVE_ECC

/* fast math conversion */
int mp_sqr(fp_int *A, fp_int *B)
{
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b082      	sub	sp, #8
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
 8020b9c:	6039      	str	r1, [r7, #0]
    return fp_sqr(A, B);
 8020b9e:	6839      	ldr	r1, [r7, #0]
 8020ba0:	6878      	ldr	r0, [r7, #4]
 8020ba2:	f7fe fb6b 	bl	801f27c <fp_sqr>
 8020ba6:	4603      	mov	r3, r0
}
 8020ba8:	4618      	mov	r0, r3
 8020baa:	3708      	adds	r7, #8
 8020bac:	46bd      	mov	sp, r7
 8020bae:	bd80      	pop	{r7, pc}

08020bb0 <mp_montgomery_reduce>:

/* fast math conversion */
int mp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
 8020bb0:	b580      	push	{r7, lr}
 8020bb2:	b084      	sub	sp, #16
 8020bb4:	af00      	add	r7, sp, #0
 8020bb6:	60f8      	str	r0, [r7, #12]
 8020bb8:	60b9      	str	r1, [r7, #8]
 8020bba:	607a      	str	r2, [r7, #4]
    return fp_montgomery_reduce(a, m, mp);
 8020bbc:	687a      	ldr	r2, [r7, #4]
 8020bbe:	68b9      	ldr	r1, [r7, #8]
 8020bc0:	68f8      	ldr	r0, [r7, #12]
 8020bc2:	f7ff f817 	bl	801fbf4 <fp_montgomery_reduce>
 8020bc6:	4603      	mov	r3, r0
}
 8020bc8:	4618      	mov	r0, r3
 8020bca:	3710      	adds	r7, #16
 8020bcc:	46bd      	mov	sp, r7
 8020bce:	bd80      	pop	{r7, pc}

08020bd0 <mp_montgomery_setup>:
}


/* fast math conversion */
int mp_montgomery_setup(fp_int *a, fp_digit *rho)
{
 8020bd0:	b580      	push	{r7, lr}
 8020bd2:	b082      	sub	sp, #8
 8020bd4:	af00      	add	r7, sp, #0
 8020bd6:	6078      	str	r0, [r7, #4]
 8020bd8:	6039      	str	r1, [r7, #0]
    return fp_montgomery_setup(a, rho);
 8020bda:	6839      	ldr	r1, [r7, #0]
 8020bdc:	6878      	ldr	r0, [r7, #4]
 8020bde:	f7fe fe42 	bl	801f866 <fp_montgomery_setup>
 8020be2:	4603      	mov	r3, r0
}
 8020be4:	4618      	mov	r0, r3
 8020be6:	3708      	adds	r7, #8
 8020be8:	46bd      	mov	sp, r7
 8020bea:	bd80      	pop	{r7, pc}

08020bec <mp_div_2_mod_ct>:
    return MP_OKAY;
}

/* c = a / 2 (mod b) - constant time (a < b and positive) */
int mp_div_2_mod_ct(mp_int *a, mp_int *b, mp_int *c)
{
 8020bec:	b580      	push	{r7, lr}
 8020bee:	b084      	sub	sp, #16
 8020bf0:	af00      	add	r7, sp, #0
 8020bf2:	60f8      	str	r0, [r7, #12]
 8020bf4:	60b9      	str	r1, [r7, #8]
 8020bf6:	607a      	str	r2, [r7, #4]
  return fp_div_2_mod_ct(a, b, c);
 8020bf8:	687a      	ldr	r2, [r7, #4]
 8020bfa:	68b9      	ldr	r1, [r7, #8]
 8020bfc:	68f8      	ldr	r0, [r7, #12]
 8020bfe:	f7fc fa38 	bl	801d072 <fp_div_2_mod_ct>
 8020c02:	4603      	mov	r3, r0
}
 8020c04:	4618      	mov	r0, r3
 8020c06:	3710      	adds	r7, #16
 8020c08:	46bd      	mov	sp, r7
 8020c0a:	bd80      	pop	{r7, pc}

08020c0c <mp_set>:

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA) || \
    defined(WOLFSSL_KEY_GEN)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
 8020c0c:	b580      	push	{r7, lr}
 8020c0e:	b082      	sub	sp, #8
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	6078      	str	r0, [r7, #4]
 8020c14:	6039      	str	r1, [r7, #0]
    fp_set(a,b);
 8020c16:	6839      	ldr	r1, [r7, #0]
 8020c18:	6878      	ldr	r0, [r7, #4]
 8020c1a:	f7ff f93c 	bl	801fe96 <fp_set>
    return MP_OKAY;
 8020c1e:	2300      	movs	r3, #0
}
 8020c20:	4618      	mov	r0, r3
 8020c22:	3708      	adds	r7, #8
 8020c24:	46bd      	mov	sp, r7
 8020c26:	bd80      	pop	{r7, pc}

08020c28 <ForceZero>:
{
 8020c28:	b480      	push	{r7}
 8020c2a:	b085      	sub	sp, #20
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	6078      	str	r0, [r7, #4]
 8020c30:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 8020c36:	e004      	b.n	8020c42 <ForceZero+0x1a>
 8020c38:	68fb      	ldr	r3, [r7, #12]
 8020c3a:	1c5a      	adds	r2, r3, #1
 8020c3c:	60fa      	str	r2, [r7, #12]
 8020c3e:	2200      	movs	r2, #0
 8020c40:	701a      	strb	r2, [r3, #0]
 8020c42:	683b      	ldr	r3, [r7, #0]
 8020c44:	1e5a      	subs	r2, r3, #1
 8020c46:	603a      	str	r2, [r7, #0]
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	d1f5      	bne.n	8020c38 <ForceZero+0x10>
}
 8020c4c:	bf00      	nop
 8020c4e:	bf00      	nop
 8020c50:	3714      	adds	r7, #20
 8020c52:	46bd      	mov	sp, r7
 8020c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c58:	4770      	bx	lr

08020c5a <wc_AesCbcDecryptWithKey>:

#if !defined(NO_AES) && defined(HAVE_AES_CBC)
#ifdef HAVE_AES_DECRYPT
int wc_AesCbcDecryptWithKey(byte* out, const byte* in, word32 inSz,
                                  const byte* key, word32 keySz, const byte* iv)
{
 8020c5a:	b580      	push	{r7, lr}
 8020c5c:	b08a      	sub	sp, #40	; 0x28
 8020c5e:	af02      	add	r7, sp, #8
 8020c60:	60f8      	str	r0, [r7, #12]
 8020c62:	60b9      	str	r1, [r7, #8]
 8020c64:	607a      	str	r2, [r7, #4]
 8020c66:	603b      	str	r3, [r7, #0]
    int  ret = 0;
 8020c68:	2300      	movs	r3, #0
 8020c6a:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_SMALL_STACK
    Aes* aes = NULL;
 8020c6c:	2300      	movs	r3, #0
 8020c6e:	61bb      	str	r3, [r7, #24]
#else
    Aes  aes[1];
#endif

    if (out == NULL || in == NULL || key == NULL || iv == NULL) {
 8020c70:	68fb      	ldr	r3, [r7, #12]
 8020c72:	2b00      	cmp	r3, #0
 8020c74:	d008      	beq.n	8020c88 <wc_AesCbcDecryptWithKey+0x2e>
 8020c76:	68bb      	ldr	r3, [r7, #8]
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d005      	beq.n	8020c88 <wc_AesCbcDecryptWithKey+0x2e>
 8020c7c:	683b      	ldr	r3, [r7, #0]
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d002      	beq.n	8020c88 <wc_AesCbcDecryptWithKey+0x2e>
 8020c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d102      	bne.n	8020c8e <wc_AesCbcDecryptWithKey+0x34>
        return BAD_FUNC_ARG;
 8020c88:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020c8c:	e033      	b.n	8020cf6 <wc_AesCbcDecryptWithKey+0x9c>
    }

#ifdef WOLFSSL_SMALL_STACK
    aes = (Aes*)XMALLOC(sizeof(Aes), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8020c8e:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8020c92:	f7f7 ff8b 	bl	8018bac <wolfSSL_Malloc>
 8020c96:	61b8      	str	r0, [r7, #24]
    if (aes == NULL)
 8020c98:	69bb      	ldr	r3, [r7, #24]
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	d102      	bne.n	8020ca4 <wc_AesCbcDecryptWithKey+0x4a>
        return MEMORY_E;
 8020c9e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8020ca2:	e028      	b.n	8020cf6 <wc_AesCbcDecryptWithKey+0x9c>
#endif

    ret = wc_AesInit(aes, NULL, INVALID_DEVID);
 8020ca4:	f06f 0201 	mvn.w	r2, #1
 8020ca8:	2100      	movs	r1, #0
 8020caa:	69b8      	ldr	r0, [r7, #24]
 8020cac:	f7ec fbe8 	bl	800d480 <wc_AesInit>
 8020cb0:	61f8      	str	r0, [r7, #28]
    if (ret == 0) {
 8020cb2:	69fb      	ldr	r3, [r7, #28]
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d115      	bne.n	8020ce4 <wc_AesCbcDecryptWithKey+0x8a>
        ret = wc_AesSetKey(aes, key, keySz, iv, AES_DECRYPTION);
 8020cb8:	2301      	movs	r3, #1
 8020cba:	9300      	str	r3, [sp, #0]
 8020cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020cc0:	6839      	ldr	r1, [r7, #0]
 8020cc2:	69b8      	ldr	r0, [r7, #24]
 8020cc4:	f7ec fb3e 	bl	800d344 <wc_AesSetKey>
 8020cc8:	61f8      	str	r0, [r7, #28]
        if (ret == 0)
 8020cca:	69fb      	ldr	r3, [r7, #28]
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d106      	bne.n	8020cde <wc_AesCbcDecryptWithKey+0x84>
            ret = wc_AesCbcDecrypt(aes, out, in, inSz);
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	68ba      	ldr	r2, [r7, #8]
 8020cd4:	68f9      	ldr	r1, [r7, #12]
 8020cd6:	69b8      	ldr	r0, [r7, #24]
 8020cd8:	f7ec fb78 	bl	800d3cc <wc_AesCbcDecrypt>
 8020cdc:	61f8      	str	r0, [r7, #28]

        wc_AesFree(aes);
 8020cde:	69b8      	ldr	r0, [r7, #24]
 8020ce0:	f7ec fbe7 	bl	800d4b2 <wc_AesFree>
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(aes, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8020ce4:	69bb      	ldr	r3, [r7, #24]
 8020ce6:	617b      	str	r3, [r7, #20]
 8020ce8:	697b      	ldr	r3, [r7, #20]
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	d002      	beq.n	8020cf4 <wc_AesCbcDecryptWithKey+0x9a>
 8020cee:	6978      	ldr	r0, [r7, #20]
 8020cf0:	f7f7 ff78 	bl	8018be4 <wolfSSL_Free>
#endif

    return ret;
 8020cf4:	69fb      	ldr	r3, [r7, #28]
}
 8020cf6:	4618      	mov	r0, r3
 8020cf8:	3720      	adds	r7, #32
 8020cfa:	46bd      	mov	sp, r7
 8020cfc:	bd80      	pop	{r7, pc}

08020cfe <wc_BufferKeyDecrypt>:

#if !defined(NO_ASN) && defined(WOLFSSL_ENCRYPTED_KEYS)

int wc_BufferKeyDecrypt(EncryptedInfo* info, byte* der, word32 derSz,
    const byte* password, int passwordSz, int hashType)
{
 8020cfe:	b580      	push	{r7, lr}
 8020d00:	b08a      	sub	sp, #40	; 0x28
 8020d02:	af02      	add	r7, sp, #8
 8020d04:	60f8      	str	r0, [r7, #12]
 8020d06:	60b9      	str	r1, [r7, #8]
 8020d08:	607a      	str	r2, [r7, #4]
 8020d0a:	603b      	str	r3, [r7, #0]
    int ret = NOT_COMPILED_IN;
 8020d0c:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 8020d10:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_SMALL_STACK
    byte* key      = NULL;
 8020d12:	2300      	movs	r3, #0
 8020d14:	61bb      	str	r3, [r7, #24]

    (void)derSz;
    (void)passwordSz;
    (void)hashType;

    if (der == NULL || password == NULL || info == NULL || info->keySz == 0) {
 8020d16:	68bb      	ldr	r3, [r7, #8]
 8020d18:	2b00      	cmp	r3, #0
 8020d1a:	d009      	beq.n	8020d30 <wc_BufferKeyDecrypt+0x32>
 8020d1c:	683b      	ldr	r3, [r7, #0]
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	d006      	beq.n	8020d30 <wc_BufferKeyDecrypt+0x32>
 8020d22:	68fb      	ldr	r3, [r7, #12]
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d003      	beq.n	8020d30 <wc_BufferKeyDecrypt+0x32>
 8020d28:	68fb      	ldr	r3, [r7, #12]
 8020d2a:	691b      	ldr	r3, [r3, #16]
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d102      	bne.n	8020d36 <wc_BufferKeyDecrypt+0x38>
        return BAD_FUNC_ARG;
 8020d30:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020d34:	e045      	b.n	8020dc2 <wc_BufferKeyDecrypt+0xc4>
    }

    /* use file's salt for key derivation, hex decode first */
    if (Base16_Decode(info->iv, info->ivSz, info->iv, &info->ivSz) != 0) {
 8020d36:	68fb      	ldr	r3, [r7, #12]
 8020d38:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8020d3c:	68fb      	ldr	r3, [r7, #12]
 8020d3e:	6959      	ldr	r1, [r3, #20]
 8020d40:	68fb      	ldr	r3, [r7, #12]
 8020d42:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8020d46:	68fb      	ldr	r3, [r7, #12]
 8020d48:	3314      	adds	r3, #20
 8020d4a:	f7f3 fe79 	bl	8014a40 <Base16_Decode>
 8020d4e:	4603      	mov	r3, r0
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d002      	beq.n	8020d5a <wc_BufferKeyDecrypt+0x5c>
        WOLFSSL_ERROR_VERBOSE(BUFFER_E);
        return BUFFER_E;
 8020d54:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8020d58:	e033      	b.n	8020dc2 <wc_BufferKeyDecrypt+0xc4>
    }
    if (info->ivSz < PKCS5_SALT_SZ) {
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	695b      	ldr	r3, [r3, #20]
 8020d5e:	2b07      	cmp	r3, #7
 8020d60:	d802      	bhi.n	8020d68 <wc_BufferKeyDecrypt+0x6a>
        WOLFSSL_ERROR_VERBOSE(BUFFER_E);
        return BUFFER_E;
 8020d62:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8020d66:	e02c      	b.n	8020dc2 <wc_BufferKeyDecrypt+0xc4>
    }

#ifdef WOLFSSL_SMALL_STACK
    key = (byte*)XMALLOC(WC_MAX_SYM_KEY_SIZE, NULL, DYNAMIC_TYPE_SYMMETRIC_KEY);
 8020d68:	2020      	movs	r0, #32
 8020d6a:	f7f7 ff1f 	bl	8018bac <wolfSSL_Malloc>
 8020d6e:	61b8      	str	r0, [r7, #24]
    if (key == NULL) {
 8020d70:	69bb      	ldr	r3, [r7, #24]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d102      	bne.n	8020d7c <wc_BufferKeyDecrypt+0x7e>
        return MEMORY_E;
 8020d76:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8020d7a:	e022      	b.n	8020dc2 <wc_BufferKeyDecrypt+0xc4>
#endif
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("wc_BufferKeyDecrypt key", key, WC_MAX_SYM_KEY_SIZE);
#endif

    (void)XMEMSET(key, 0, WC_MAX_SYM_KEY_SIZE);
 8020d7c:	2220      	movs	r2, #32
 8020d7e:	2100      	movs	r1, #0
 8020d80:	69b8      	ldr	r0, [r7, #24]
 8020d82:	f000 fad7 	bl	8021334 <memset>
        ret = wc_Des_CbcDecryptWithKey(der, der, derSz, key, info->iv);
    if (info->cipherType == WC_CIPHER_DES3)
        ret = wc_Des3_CbcDecryptWithKey(der, der, derSz, key, info->iv);
#endif /* NO_DES3 */
#if !defined(NO_AES) && defined(HAVE_AES_CBC) && defined(HAVE_AES_DECRYPT)
    if (info->cipherType == WC_CIPHER_AES_CBC)
 8020d86:	68fb      	ldr	r3, [r7, #12]
 8020d88:	68db      	ldr	r3, [r3, #12]
 8020d8a:	2b02      	cmp	r3, #2
 8020d8c:	d10c      	bne.n	8020da8 <wc_BufferKeyDecrypt+0xaa>
        ret = wc_AesCbcDecryptWithKey(der, der, derSz, key, info->keySz,
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	691b      	ldr	r3, [r3, #16]
            info->iv);
 8020d92:	68fa      	ldr	r2, [r7, #12]
 8020d94:	32b8      	adds	r2, #184	; 0xb8
        ret = wc_AesCbcDecryptWithKey(der, der, derSz, key, info->keySz,
 8020d96:	9201      	str	r2, [sp, #4]
 8020d98:	9300      	str	r3, [sp, #0]
 8020d9a:	69bb      	ldr	r3, [r7, #24]
 8020d9c:	687a      	ldr	r2, [r7, #4]
 8020d9e:	68b9      	ldr	r1, [r7, #8]
 8020da0:	68b8      	ldr	r0, [r7, #8]
 8020da2:	f7ff ff5a 	bl	8020c5a <wc_AesCbcDecryptWithKey>
 8020da6:	61f8      	str	r0, [r7, #28]
#endif /* !NO_AES && HAVE_AES_CBC && HAVE_AES_DECRYPT */

    ForceZero(key, WC_MAX_SYM_KEY_SIZE);
 8020da8:	2120      	movs	r1, #32
 8020daa:	69b8      	ldr	r0, [r7, #24]
 8020dac:	f7ff ff3c 	bl	8020c28 <ForceZero>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(key, NULL, DYNAMIC_TYPE_SYMMETRIC_KEY);
 8020db0:	69bb      	ldr	r3, [r7, #24]
 8020db2:	617b      	str	r3, [r7, #20]
 8020db4:	697b      	ldr	r3, [r7, #20]
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d002      	beq.n	8020dc0 <wc_BufferKeyDecrypt+0xc2>
 8020dba:	6978      	ldr	r0, [r7, #20]
 8020dbc:	f7f7 ff12 	bl	8018be4 <wolfSSL_Free>
#elif defined(WOLFSSL_CHECK_MEM_ZERO)
    wc_MemZero_Check(key, WC_MAX_SYM_KEY_SIZE);
#endif

    return ret;
 8020dc0:	69fb      	ldr	r3, [r7, #28]
}
 8020dc2:	4618      	mov	r0, r3
 8020dc4:	3720      	adds	r7, #32
 8020dc6:	46bd      	mov	sp, r7
 8020dc8:	bd80      	pop	{r7, pc}
	...

08020dcc <wolfCrypt_Init>:
/* Used to initialize state for wolfcrypt
   return 0 on success
 */
WOLFSSL_ABI
int wolfCrypt_Init(void)
{
 8020dcc:	b580      	push	{r7, lr}
 8020dce:	b082      	sub	sp, #8
 8020dd0:	af00      	add	r7, sp, #0
    int ret = 0;
 8020dd2:	2300      	movs	r3, #0
 8020dd4:	607b      	str	r3, [r7, #4]
    if (initRefCount == 0) {
 8020dd6:	4b10      	ldr	r3, [pc, #64]	; (8020e18 <wolfCrypt_Init+0x4c>)
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	d111      	bne.n	8020e02 <wolfCrypt_Init+0x36>
        }
    #endif

    #if WOLFSSL_CRYPT_HW_MUTEX
        /* If crypto hardware mutex protection is enabled, then initialize it */
        ret = wolfSSL_CryptHwMutexInit();
 8020dde:	f000 f83d 	bl	8020e5c <wolfSSL_CryptHwMutexInit>
 8020de2:	6078      	str	r0, [r7, #4]
        if (ret != 0) {
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d001      	beq.n	8020dee <wolfCrypt_Init+0x22>
            WOLFSSL_MSG("Hw crypt mutex init failed");
            return ret;
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	e00f      	b.n	8020e0e <wolfCrypt_Init+0x42>
    #ifdef WOLFSSL_AFALG
        WOLFSSL_MSG("Using AF_ALG for crypto acceleration");
    #endif

    #if !defined(WOLFCRYPT_ONLY) && defined(OPENSSL_EXTRA)
        wolfSSL_EVP_init();
 8020dee:	f7e4 fd9a 	bl	8005926 <wolfSSL_EVP_init>
    #endif

    #if defined(OPENSSL_EXTRA) || defined(DEBUG_WOLFSSL_VERBOSE)
        if ((ret = wc_LoggingInit()) != 0) {
 8020df2:	f7f7 fc77 	bl	80186e4 <wc_LoggingInit>
 8020df6:	6078      	str	r0, [r7, #4]
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d001      	beq.n	8020e02 <wolfCrypt_Init+0x36>
            WOLFSSL_MSG("Error creating logging mutex");
            return ret;
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	e005      	b.n	8020e0e <wolfCrypt_Init+0x42>
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 8020e02:	4b05      	ldr	r3, [pc, #20]	; (8020e18 <wolfCrypt_Init+0x4c>)
 8020e04:	681b      	ldr	r3, [r3, #0]
 8020e06:	3301      	adds	r3, #1
 8020e08:	4a03      	ldr	r2, [pc, #12]	; (8020e18 <wolfCrypt_Init+0x4c>)
 8020e0a:	6013      	str	r3, [r2, #0]

    return ret;
 8020e0c:	687b      	ldr	r3, [r7, #4]
}
 8020e0e:	4618      	mov	r0, r3
 8020e10:	3708      	adds	r7, #8
 8020e12:	46bd      	mov	sp, r7
 8020e14:	bd80      	pop	{r7, pc}
 8020e16:	bf00      	nop
 8020e18:	20000398 	.word	0x20000398

08020e1c <wolfCrypt_Cleanup>:
#endif

/* return success value is the same as wolfCrypt_Init */
WOLFSSL_ABI
int wolfCrypt_Cleanup(void)
{
 8020e1c:	b580      	push	{r7, lr}
 8020e1e:	b082      	sub	sp, #8
 8020e20:	af00      	add	r7, sp, #0
    int ret = 0;
 8020e22:	2300      	movs	r3, #0
 8020e24:	607b      	str	r3, [r7, #4]

    initRefCount--;
 8020e26:	4b0c      	ldr	r3, [pc, #48]	; (8020e58 <wolfCrypt_Cleanup+0x3c>)
 8020e28:	681b      	ldr	r3, [r3, #0]
 8020e2a:	3b01      	subs	r3, #1
 8020e2c:	4a0a      	ldr	r2, [pc, #40]	; (8020e58 <wolfCrypt_Cleanup+0x3c>)
 8020e2e:	6013      	str	r3, [r2, #0]
    if (initRefCount < 0)
 8020e30:	4b09      	ldr	r3, [pc, #36]	; (8020e58 <wolfCrypt_Cleanup+0x3c>)
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	da02      	bge.n	8020e3e <wolfCrypt_Cleanup+0x22>
        initRefCount = 0;
 8020e38:	4b07      	ldr	r3, [pc, #28]	; (8020e58 <wolfCrypt_Cleanup+0x3c>)
 8020e3a:	2200      	movs	r2, #0
 8020e3c:	601a      	str	r2, [r3, #0]

    if (initRefCount == 0) {
 8020e3e:	4b06      	ldr	r3, [pc, #24]	; (8020e58 <wolfCrypt_Cleanup+0x3c>)
 8020e40:	681b      	ldr	r3, [r3, #0]
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	d102      	bne.n	8020e4c <wolfCrypt_Cleanup+0x30>
        wc_ecc_curve_cache_free();
    #endif
#endif /* HAVE_ECC */

    #if defined(OPENSSL_EXTRA) || defined(DEBUG_WOLFSSL_VERBOSE)
        ret = wc_LoggingCleanup();
 8020e46:	f7f7 fc71 	bl	801872c <wc_LoggingCleanup>
 8020e4a:	6078      	str	r0, [r7, #4]
         * must be freed. */
        wc_MemZero_Free();
    #endif
    }

    return ret;
 8020e4c:	687b      	ldr	r3, [r7, #4]
}
 8020e4e:	4618      	mov	r0, r3
 8020e50:	3708      	adds	r7, #8
 8020e52:	46bd      	mov	sp, r7
 8020e54:	bd80      	pop	{r7, pc}
 8020e56:	bf00      	nop
 8020e58:	20000398 	.word	0x20000398

08020e5c <wolfSSL_CryptHwMutexInit>:
/* Mutex for protection of cryptography hardware */
static wolfSSL_Mutex wcCryptHwMutex;
static int wcCryptHwMutexInit = 0;

int wolfSSL_CryptHwMutexInit(void)
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b082      	sub	sp, #8
 8020e60:	af00      	add	r7, sp, #0
    int ret = 0;
 8020e62:	2300      	movs	r3, #0
 8020e64:	607b      	str	r3, [r7, #4]
    if (wcCryptHwMutexInit == 0) {
 8020e66:	4b09      	ldr	r3, [pc, #36]	; (8020e8c <wolfSSL_CryptHwMutexInit+0x30>)
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d109      	bne.n	8020e82 <wolfSSL_CryptHwMutexInit+0x26>
        ret = wc_InitMutex(&wcCryptHwMutex);
 8020e6e:	4808      	ldr	r0, [pc, #32]	; (8020e90 <wolfSSL_CryptHwMutexInit+0x34>)
 8020e70:	f000 f840 	bl	8020ef4 <wc_InitMutex>
 8020e74:	6078      	str	r0, [r7, #4]
        if (ret == 0) {
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d102      	bne.n	8020e82 <wolfSSL_CryptHwMutexInit+0x26>
            wcCryptHwMutexInit = 1;
 8020e7c:	4b03      	ldr	r3, [pc, #12]	; (8020e8c <wolfSSL_CryptHwMutexInit+0x30>)
 8020e7e:	2201      	movs	r2, #1
 8020e80:	601a      	str	r2, [r3, #0]
        }
    }
    return ret;
 8020e82:	687b      	ldr	r3, [r7, #4]
}
 8020e84:	4618      	mov	r0, r3
 8020e86:	3708      	adds	r7, #8
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd80      	pop	{r7, pc}
 8020e8c:	200003a0 	.word	0x200003a0
 8020e90:	2000039c 	.word	0x2000039c

08020e94 <wolfSSL_CryptHwMutexLock>:
int wolfSSL_CryptHwMutexLock(void)
{
 8020e94:	b580      	push	{r7, lr}
 8020e96:	b082      	sub	sp, #8
 8020e98:	af00      	add	r7, sp, #0
    int ret = BAD_MUTEX_E;
 8020e9a:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8020e9e:	607b      	str	r3, [r7, #4]
    /* Make sure HW Mutex has been initialized */
    ret = wolfSSL_CryptHwMutexInit();
 8020ea0:	f7ff ffdc 	bl	8020e5c <wolfSSL_CryptHwMutexInit>
 8020ea4:	6078      	str	r0, [r7, #4]
    if (ret == 0) {
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	2b00      	cmp	r3, #0
 8020eaa:	d103      	bne.n	8020eb4 <wolfSSL_CryptHwMutexLock+0x20>
        ret = wc_LockMutex(&wcCryptHwMutex);
 8020eac:	4804      	ldr	r0, [pc, #16]	; (8020ec0 <wolfSSL_CryptHwMutexLock+0x2c>)
 8020eae:	f000 f837 	bl	8020f20 <wc_LockMutex>
 8020eb2:	6078      	str	r0, [r7, #4]
    }
    return ret;
 8020eb4:	687b      	ldr	r3, [r7, #4]
}
 8020eb6:	4618      	mov	r0, r3
 8020eb8:	3708      	adds	r7, #8
 8020eba:	46bd      	mov	sp, r7
 8020ebc:	bd80      	pop	{r7, pc}
 8020ebe:	bf00      	nop
 8020ec0:	2000039c 	.word	0x2000039c

08020ec4 <wolfSSL_CryptHwMutexUnLock>:
int wolfSSL_CryptHwMutexUnLock(void)
{
 8020ec4:	b580      	push	{r7, lr}
 8020ec6:	b082      	sub	sp, #8
 8020ec8:	af00      	add	r7, sp, #0
    int ret = BAD_MUTEX_E;
 8020eca:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8020ece:	607b      	str	r3, [r7, #4]
    if (wcCryptHwMutexInit) {
 8020ed0:	4b06      	ldr	r3, [pc, #24]	; (8020eec <wolfSSL_CryptHwMutexUnLock+0x28>)
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d003      	beq.n	8020ee0 <wolfSSL_CryptHwMutexUnLock+0x1c>
        ret = wc_UnLockMutex(&wcCryptHwMutex);
 8020ed8:	4805      	ldr	r0, [pc, #20]	; (8020ef0 <wolfSSL_CryptHwMutexUnLock+0x2c>)
 8020eda:	f000 f82c 	bl	8020f36 <wc_UnLockMutex>
 8020ede:	6078      	str	r0, [r7, #4]
    }
    return ret;
 8020ee0:	687b      	ldr	r3, [r7, #4]
}
 8020ee2:	4618      	mov	r0, r3
 8020ee4:	3708      	adds	r7, #8
 8020ee6:	46bd      	mov	sp, r7
 8020ee8:	bd80      	pop	{r7, pc}
 8020eea:	bf00      	nop
 8020eec:	200003a0 	.word	0x200003a0
 8020ef0:	2000039c 	.word	0x2000039c

08020ef4 <wc_InitMutex>:
    }
#endif /* defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER) */
#ifdef SINGLE_THREADED

    int wc_InitMutex(wolfSSL_Mutex* m)
    {
 8020ef4:	b480      	push	{r7}
 8020ef6:	b083      	sub	sp, #12
 8020ef8:	af00      	add	r7, sp, #0
 8020efa:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 8020efc:	2300      	movs	r3, #0
    }
 8020efe:	4618      	mov	r0, r3
 8020f00:	370c      	adds	r7, #12
 8020f02:	46bd      	mov	sp, r7
 8020f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f08:	4770      	bx	lr

08020f0a <wc_FreeMutex>:

    int wc_FreeMutex(wolfSSL_Mutex *m)
    {
 8020f0a:	b480      	push	{r7}
 8020f0c:	b083      	sub	sp, #12
 8020f0e:	af00      	add	r7, sp, #0
 8020f10:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 8020f12:	2300      	movs	r3, #0
    }
 8020f14:	4618      	mov	r0, r3
 8020f16:	370c      	adds	r7, #12
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f1e:	4770      	bx	lr

08020f20 <wc_LockMutex>:


    int wc_LockMutex(wolfSSL_Mutex *m)
    {
 8020f20:	b480      	push	{r7}
 8020f22:	b083      	sub	sp, #12
 8020f24:	af00      	add	r7, sp, #0
 8020f26:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 8020f28:	2300      	movs	r3, #0
    }
 8020f2a:	4618      	mov	r0, r3
 8020f2c:	370c      	adds	r7, #12
 8020f2e:	46bd      	mov	sp, r7
 8020f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f34:	4770      	bx	lr

08020f36 <wc_UnLockMutex>:


    int wc_UnLockMutex(wolfSSL_Mutex *m)
    {
 8020f36:	b480      	push	{r7}
 8020f38:	b083      	sub	sp, #12
 8020f3a:	af00      	add	r7, sp, #0
 8020f3c:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 8020f3e:	2300      	movs	r3, #0
    }
 8020f40:	4618      	mov	r0, r3
 8020f42:	370c      	adds	r7, #12
 8020f44:	46bd      	mov	sp, r7
 8020f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f4a:	4770      	bx	lr

08020f4c <mystrnstr>:

#endif /* !NO_ASN_TIME */

#if !defined(WOLFSSL_LEANPSK) && !defined(STRING_USER)
char* mystrnstr(const char* s1, const char* s2, unsigned int n)
{
 8020f4c:	b580      	push	{r7, lr}
 8020f4e:	b086      	sub	sp, #24
 8020f50:	af00      	add	r7, sp, #0
 8020f52:	60f8      	str	r0, [r7, #12]
 8020f54:	60b9      	str	r1, [r7, #8]
 8020f56:	607a      	str	r2, [r7, #4]
    unsigned int s2_len = (unsigned int)XSTRLEN(s2);
 8020f58:	68b8      	ldr	r0, [r7, #8]
 8020f5a:	f7df f953 	bl	8000204 <strlen>
 8020f5e:	6178      	str	r0, [r7, #20]

    if (s2_len == 0)
 8020f60:	697b      	ldr	r3, [r7, #20]
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	d117      	bne.n	8020f96 <mystrnstr+0x4a>
        return (char*)s1;
 8020f66:	68fb      	ldr	r3, [r7, #12]
 8020f68:	e01e      	b.n	8020fa8 <mystrnstr+0x5c>

    while (n >= s2_len && s1[0]) {
        if (s1[0] == s2[0])
 8020f6a:	68fb      	ldr	r3, [r7, #12]
 8020f6c:	781a      	ldrb	r2, [r3, #0]
 8020f6e:	68bb      	ldr	r3, [r7, #8]
 8020f70:	781b      	ldrb	r3, [r3, #0]
 8020f72:	429a      	cmp	r2, r3
 8020f74:	d109      	bne.n	8020f8a <mystrnstr+0x3e>
            if (XMEMCMP(s1, s2, s2_len) == 0)
 8020f76:	697a      	ldr	r2, [r7, #20]
 8020f78:	68b9      	ldr	r1, [r7, #8]
 8020f7a:	68f8      	ldr	r0, [r7, #12]
 8020f7c:	f000 f9a2 	bl	80212c4 <memcmp>
 8020f80:	4603      	mov	r3, r0
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d101      	bne.n	8020f8a <mystrnstr+0x3e>
                return (char*)s1;
 8020f86:	68fb      	ldr	r3, [r7, #12]
 8020f88:	e00e      	b.n	8020fa8 <mystrnstr+0x5c>
        s1++;
 8020f8a:	68fb      	ldr	r3, [r7, #12]
 8020f8c:	3301      	adds	r3, #1
 8020f8e:	60fb      	str	r3, [r7, #12]
        n--;
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	3b01      	subs	r3, #1
 8020f94:	607b      	str	r3, [r7, #4]
    while (n >= s2_len && s1[0]) {
 8020f96:	687a      	ldr	r2, [r7, #4]
 8020f98:	697b      	ldr	r3, [r7, #20]
 8020f9a:	429a      	cmp	r2, r3
 8020f9c:	d303      	bcc.n	8020fa6 <mystrnstr+0x5a>
 8020f9e:	68fb      	ldr	r3, [r7, #12]
 8020fa0:	781b      	ldrb	r3, [r3, #0]
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d1e1      	bne.n	8020f6a <mystrnstr+0x1e>
    }

    return NULL;
 8020fa6:	2300      	movs	r3, #0
}
 8020fa8:	4618      	mov	r0, r3
 8020faa:	3718      	adds	r7, #24
 8020fac:	46bd      	mov	sp, r7
 8020fae:	bd80      	pop	{r7, pc}

08020fb0 <mp_reverse>:
#endif


/* reverse an array, used for radix code */
void mp_reverse (unsigned char *s, int len)
{
 8020fb0:	b480      	push	{r7}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	6078      	str	r0, [r7, #4]
 8020fb8:	6039      	str	r1, [r7, #0]
    int ix, iy;
    unsigned char t;

    if (s == NULL)
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d022      	beq.n	8021006 <mp_reverse+0x56>
        return;

    ix = 0;
 8020fc0:	2300      	movs	r3, #0
 8020fc2:	617b      	str	r3, [r7, #20]
    iy = len - 1;
 8020fc4:	683b      	ldr	r3, [r7, #0]
 8020fc6:	3b01      	subs	r3, #1
 8020fc8:	613b      	str	r3, [r7, #16]
    while (ix < iy) {
 8020fca:	e017      	b.n	8020ffc <mp_reverse+0x4c>
        t = s[ix];
 8020fcc:	697b      	ldr	r3, [r7, #20]
 8020fce:	687a      	ldr	r2, [r7, #4]
 8020fd0:	4413      	add	r3, r2
 8020fd2:	781b      	ldrb	r3, [r3, #0]
 8020fd4:	73fb      	strb	r3, [r7, #15]
        s[ix] = s[iy];
 8020fd6:	693b      	ldr	r3, [r7, #16]
 8020fd8:	687a      	ldr	r2, [r7, #4]
 8020fda:	441a      	add	r2, r3
 8020fdc:	697b      	ldr	r3, [r7, #20]
 8020fde:	6879      	ldr	r1, [r7, #4]
 8020fe0:	440b      	add	r3, r1
 8020fe2:	7812      	ldrb	r2, [r2, #0]
 8020fe4:	701a      	strb	r2, [r3, #0]
        s[iy] = t;
 8020fe6:	693b      	ldr	r3, [r7, #16]
 8020fe8:	687a      	ldr	r2, [r7, #4]
 8020fea:	4413      	add	r3, r2
 8020fec:	7bfa      	ldrb	r2, [r7, #15]
 8020fee:	701a      	strb	r2, [r3, #0]
        ++ix;
 8020ff0:	697b      	ldr	r3, [r7, #20]
 8020ff2:	3301      	adds	r3, #1
 8020ff4:	617b      	str	r3, [r7, #20]
        --iy;
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	3b01      	subs	r3, #1
 8020ffa:	613b      	str	r3, [r7, #16]
    while (ix < iy) {
 8020ffc:	697a      	ldr	r2, [r7, #20]
 8020ffe:	693b      	ldr	r3, [r7, #16]
 8021000:	429a      	cmp	r2, r3
 8021002:	dbe3      	blt.n	8020fcc <mp_reverse+0x1c>
 8021004:	e000      	b.n	8021008 <mp_reverse+0x58>
        return;
 8021006:	bf00      	nop
    }
}
 8021008:	371c      	adds	r7, #28
 802100a:	46bd      	mov	sp, r7
 802100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021010:	4770      	bx	lr

08021012 <get_digit_count>:

int get_digit_count(const mp_int* a)
{
 8021012:	b480      	push	{r7}
 8021014:	b083      	sub	sp, #12
 8021016:	af00      	add	r7, sp, #0
 8021018:	6078      	str	r0, [r7, #4]
    if (a == NULL)
 802101a:	687b      	ldr	r3, [r7, #4]
 802101c:	2b00      	cmp	r3, #0
 802101e:	d101      	bne.n	8021024 <get_digit_count+0x12>
        return 0;
 8021020:	2300      	movs	r3, #0
 8021022:	e001      	b.n	8021028 <get_digit_count+0x16>

    return a->used;
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	681b      	ldr	r3, [r3, #0]
}
 8021028:	4618      	mov	r0, r3
 802102a:	370c      	adds	r7, #12
 802102c:	46bd      	mov	sp, r7
 802102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021032:	4770      	bx	lr

08021034 <get_digit>:

mp_digit get_digit(const mp_int* a, int n)
{
 8021034:	b480      	push	{r7}
 8021036:	b083      	sub	sp, #12
 8021038:	af00      	add	r7, sp, #0
 802103a:	6078      	str	r0, [r7, #4]
 802103c:	6039      	str	r1, [r7, #0]
    if (a == NULL)
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	2b00      	cmp	r3, #0
 8021042:	d101      	bne.n	8021048 <get_digit+0x14>
        return 0;
 8021044:	2300      	movs	r3, #0
 8021046:	e00f      	b.n	8021068 <get_digit+0x34>

    return (n >= a->used || n < 0) ? 0 : a->dp[n];
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	683a      	ldr	r2, [r7, #0]
 802104e:	429a      	cmp	r2, r3
 8021050:	da09      	bge.n	8021066 <get_digit+0x32>
 8021052:	683b      	ldr	r3, [r7, #0]
 8021054:	2b00      	cmp	r3, #0
 8021056:	db06      	blt.n	8021066 <get_digit+0x32>
 8021058:	687a      	ldr	r2, [r7, #4]
 802105a:	683b      	ldr	r3, [r7, #0]
 802105c:	3302      	adds	r3, #2
 802105e:	009b      	lsls	r3, r3, #2
 8021060:	4413      	add	r3, r2
 8021062:	685b      	ldr	r3, [r3, #4]
 8021064:	e000      	b.n	8021068 <get_digit+0x34>
 8021066:	2300      	movs	r3, #0
}
 8021068:	4618      	mov	r0, r3
 802106a:	370c      	adds	r7, #12
 802106c:	46bd      	mov	sp, r7
 802106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021072:	4770      	bx	lr

08021074 <mp_cond_copy>:
 * b     MP integer to copy into.
 * returns BAD_FUNC_ARG when a or b is NULL, MEMORY_E when growing b fails and
 *         MP_OKAY otherwise.
 */
int mp_cond_copy(mp_int* a, int copy, mp_int* b)
{
 8021074:	b590      	push	{r4, r7, lr}
 8021076:	b089      	sub	sp, #36	; 0x24
 8021078:	af00      	add	r7, sp, #0
 802107a:	60f8      	str	r0, [r7, #12]
 802107c:	60b9      	str	r1, [r7, #8]
 802107e:	607a      	str	r2, [r7, #4]
    int err = MP_OKAY;
 8021080:	2300      	movs	r3, #0
 8021082:	61fb      	str	r3, [r7, #28]
    int i;
#if defined(SP_WORD_SIZE) && SP_WORD_SIZE == 8
    unsigned int mask = (unsigned int)0 - copy;
#else
    mp_digit mask = (mp_digit)0 - copy;
 8021084:	68bb      	ldr	r3, [r7, #8]
 8021086:	425b      	negs	r3, r3
 8021088:	617b      	str	r3, [r7, #20]
#endif

    if (a == NULL || b == NULL)
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	2b00      	cmp	r3, #0
 802108e:	d002      	beq.n	8021096 <mp_cond_copy+0x22>
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	2b00      	cmp	r3, #0
 8021094:	d102      	bne.n	802109c <mp_cond_copy+0x28>
        err = BAD_FUNC_ARG;
 8021096:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 802109a:	61fb      	str	r3, [r7, #28]

    /* Ensure b has enough space to copy a into */
    if (err == MP_OKAY)
 802109c:	69fb      	ldr	r3, [r7, #28]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d101      	bne.n	80210a6 <mp_cond_copy+0x32>
        err = mp_grow(b, a->used + 1);
 80210a2:	2300      	movs	r3, #0
 80210a4:	61fb      	str	r3, [r7, #28]
    if (err == MP_OKAY) {
 80210a6:	69fb      	ldr	r3, [r7, #28]
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d161      	bne.n	8021170 <mp_cond_copy+0xfc>
         * When mask all set, b ^ b ^ a = a
         */
        /* Conditionaly copy all digits and then number of used diigits.
         * get_digit() returns 0 when index greater than available digit.
         */
        for (i = 0; i < a->used; i++) {
 80210ac:	2300      	movs	r3, #0
 80210ae:	61bb      	str	r3, [r7, #24]
 80210b0:	e01d      	b.n	80210ee <mp_cond_copy+0x7a>
            b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 80210b2:	69b9      	ldr	r1, [r7, #24]
 80210b4:	68f8      	ldr	r0, [r7, #12]
 80210b6:	f7ff ffbd 	bl	8021034 <get_digit>
 80210ba:	4604      	mov	r4, r0
 80210bc:	69b9      	ldr	r1, [r7, #24]
 80210be:	6878      	ldr	r0, [r7, #4]
 80210c0:	f7ff ffb8 	bl	8021034 <get_digit>
 80210c4:	4603      	mov	r3, r0
 80210c6:	ea84 0203 	eor.w	r2, r4, r3
 80210ca:	697b      	ldr	r3, [r7, #20]
 80210cc:	401a      	ands	r2, r3
 80210ce:	6879      	ldr	r1, [r7, #4]
 80210d0:	69bb      	ldr	r3, [r7, #24]
 80210d2:	3302      	adds	r3, #2
 80210d4:	009b      	lsls	r3, r3, #2
 80210d6:	440b      	add	r3, r1
 80210d8:	685b      	ldr	r3, [r3, #4]
 80210da:	405a      	eors	r2, r3
 80210dc:	6879      	ldr	r1, [r7, #4]
 80210de:	69bb      	ldr	r3, [r7, #24]
 80210e0:	3302      	adds	r3, #2
 80210e2:	009b      	lsls	r3, r3, #2
 80210e4:	440b      	add	r3, r1
 80210e6:	605a      	str	r2, [r3, #4]
        for (i = 0; i < a->used; i++) {
 80210e8:	69bb      	ldr	r3, [r7, #24]
 80210ea:	3301      	adds	r3, #1
 80210ec:	61bb      	str	r3, [r7, #24]
 80210ee:	68fb      	ldr	r3, [r7, #12]
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	69ba      	ldr	r2, [r7, #24]
 80210f4:	429a      	cmp	r2, r3
 80210f6:	dbdc      	blt.n	80210b2 <mp_cond_copy+0x3e>
        }
        for (; i < b->used; i++) {
 80210f8:	e01d      	b.n	8021136 <mp_cond_copy+0xc2>
            b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 80210fa:	69b9      	ldr	r1, [r7, #24]
 80210fc:	68f8      	ldr	r0, [r7, #12]
 80210fe:	f7ff ff99 	bl	8021034 <get_digit>
 8021102:	4604      	mov	r4, r0
 8021104:	69b9      	ldr	r1, [r7, #24]
 8021106:	6878      	ldr	r0, [r7, #4]
 8021108:	f7ff ff94 	bl	8021034 <get_digit>
 802110c:	4603      	mov	r3, r0
 802110e:	ea84 0203 	eor.w	r2, r4, r3
 8021112:	697b      	ldr	r3, [r7, #20]
 8021114:	401a      	ands	r2, r3
 8021116:	6879      	ldr	r1, [r7, #4]
 8021118:	69bb      	ldr	r3, [r7, #24]
 802111a:	3302      	adds	r3, #2
 802111c:	009b      	lsls	r3, r3, #2
 802111e:	440b      	add	r3, r1
 8021120:	685b      	ldr	r3, [r3, #4]
 8021122:	405a      	eors	r2, r3
 8021124:	6879      	ldr	r1, [r7, #4]
 8021126:	69bb      	ldr	r3, [r7, #24]
 8021128:	3302      	adds	r3, #2
 802112a:	009b      	lsls	r3, r3, #2
 802112c:	440b      	add	r3, r1
 802112e:	605a      	str	r2, [r3, #4]
        for (; i < b->used; i++) {
 8021130:	69bb      	ldr	r3, [r7, #24]
 8021132:	3301      	adds	r3, #1
 8021134:	61bb      	str	r3, [r7, #24]
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	681b      	ldr	r3, [r3, #0]
 802113a:	69ba      	ldr	r2, [r7, #24]
 802113c:	429a      	cmp	r2, r3
 802113e:	dbdc      	blt.n	80210fa <mp_cond_copy+0x86>
        }
        b->used ^= (a->used ^ b->used) & (int)mask;
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	681a      	ldr	r2, [r3, #0]
 8021144:	68fb      	ldr	r3, [r7, #12]
 8021146:	6819      	ldr	r1, [r3, #0]
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	4059      	eors	r1, r3
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	400b      	ands	r3, r1
 8021152:	405a      	eors	r2, r3
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	601a      	str	r2, [r3, #0]
#if (!defined(WOLFSSL_SP_MATH) && !defined(WOLFSSL_SP_MATH_ALL)) || \
    defined(WOLFSSL_SP_INT_NEGATIVE)
        b->sign ^= (a->sign ^ b->sign) & (int)mask;
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	685a      	ldr	r2, [r3, #4]
 802115c:	68fb      	ldr	r3, [r7, #12]
 802115e:	6859      	ldr	r1, [r3, #4]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	685b      	ldr	r3, [r3, #4]
 8021164:	4059      	eors	r1, r3
 8021166:	697b      	ldr	r3, [r7, #20]
 8021168:	400b      	ands	r3, r1
 802116a:	405a      	eors	r2, r3
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	605a      	str	r2, [r3, #4]
#endif
    }

    return err;
 8021170:	69fb      	ldr	r3, [r7, #28]
}
 8021172:	4618      	mov	r0, r3
 8021174:	3724      	adds	r7, #36	; 0x24
 8021176:	46bd      	mov	sp, r7
 8021178:	bd90      	pop	{r4, r7, pc}

0802117a <get_rand_digit>:
#endif

#ifndef WC_NO_RNG
int get_rand_digit(WC_RNG* rng, mp_digit* d)
{
 802117a:	b580      	push	{r7, lr}
 802117c:	b082      	sub	sp, #8
 802117e:	af00      	add	r7, sp, #0
 8021180:	6078      	str	r0, [r7, #4]
 8021182:	6039      	str	r1, [r7, #0]
    return wc_RNG_GenerateBlock(rng, (byte*)d, sizeof(mp_digit));
 8021184:	2204      	movs	r2, #4
 8021186:	6839      	ldr	r1, [r7, #0]
 8021188:	6878      	ldr	r0, [r7, #4]
 802118a:	f7f8 fae8 	bl	801975e <wc_RNG_GenerateBlock>
 802118e:	4603      	mov	r3, r0
}
 8021190:	4618      	mov	r0, r3
 8021192:	3708      	adds	r7, #8
 8021194:	46bd      	mov	sp, r7
 8021196:	bd80      	pop	{r7, pc}

08021198 <mp_rand>:

#if defined(WC_RSA_BLINDING) || defined(WOLFCRYPT_HAVE_SAKKE)
int mp_rand(mp_int* a, int digits, WC_RNG* rng)
{
 8021198:	b580      	push	{r7, lr}
 802119a:	b086      	sub	sp, #24
 802119c:	af00      	add	r7, sp, #0
 802119e:	60f8      	str	r0, [r7, #12]
 80211a0:	60b9      	str	r1, [r7, #8]
 80211a2:	607a      	str	r2, [r7, #4]
    int ret = 0;
 80211a4:	2300      	movs	r3, #0
 80211a6:	617b      	str	r3, [r7, #20]
    int cnt = digits * sizeof(mp_digit);
 80211a8:	68bb      	ldr	r3, [r7, #8]
 80211aa:	009b      	lsls	r3, r3, #2
 80211ac:	613b      	str	r3, [r7, #16]
#ifdef USE_INTEGER_HEAP_MATH
    int i;
#endif

    if (rng == NULL) {
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d103      	bne.n	80211bc <mp_rand+0x24>
        ret = MISSING_RNG_E;
 80211b4:	f06f 03eb 	mvn.w	r3, #235	; 0xeb
 80211b8:	617b      	str	r3, [r7, #20]
 80211ba:	e008      	b.n	80211ce <mp_rand+0x36>
    }
    else if (a == NULL || digits == 0) {
 80211bc:	68fb      	ldr	r3, [r7, #12]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d002      	beq.n	80211c8 <mp_rand+0x30>
 80211c2:	68bb      	ldr	r3, [r7, #8]
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	d102      	bne.n	80211ce <mp_rand+0x36>
        ret = BAD_FUNC_ARG;
 80211c8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80211cc:	617b      	str	r3, [r7, #20]
    }
#else
#if defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_SP_MATH_ALL)
    if ((ret == MP_OKAY) && (digits > a->size))
#else
    if ((ret == MP_OKAY) && (digits > FP_SIZE))
 80211ce:	697b      	ldr	r3, [r7, #20]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d105      	bne.n	80211e0 <mp_rand+0x48>
 80211d4:	68bb      	ldr	r3, [r7, #8]
 80211d6:	2b88      	cmp	r3, #136	; 0x88
 80211d8:	dd02      	ble.n	80211e0 <mp_rand+0x48>
#endif
    {
        ret = BAD_FUNC_ARG;
 80211da:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80211de:	617b      	str	r3, [r7, #20]
    }
    if (ret == MP_OKAY) {
 80211e0:	697b      	ldr	r3, [r7, #20]
 80211e2:	2b00      	cmp	r3, #0
 80211e4:	d102      	bne.n	80211ec <mp_rand+0x54>
        a->used = digits;
 80211e6:	68fb      	ldr	r3, [r7, #12]
 80211e8:	68ba      	ldr	r2, [r7, #8]
 80211ea:	601a      	str	r2, [r3, #0]
    }
#endif
    /* fill the data with random bytes */
    if (ret == MP_OKAY) {
 80211ec:	697b      	ldr	r3, [r7, #20]
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d107      	bne.n	8021202 <mp_rand+0x6a>
        ret = wc_RNG_GenerateBlock(rng, (byte*)a->dp, cnt);
 80211f2:	68fb      	ldr	r3, [r7, #12]
 80211f4:	330c      	adds	r3, #12
 80211f6:	693a      	ldr	r2, [r7, #16]
 80211f8:	4619      	mov	r1, r3
 80211fa:	6878      	ldr	r0, [r7, #4]
 80211fc:	f7f8 faaf 	bl	801975e <wc_RNG_GenerateBlock>
 8021200:	6178      	str	r0, [r7, #20]
    }
    if (ret == MP_OKAY) {
 8021202:	697b      	ldr	r3, [r7, #20]
 8021204:	2b00      	cmp	r3, #0
 8021206:	d11a      	bne.n	802123e <mp_rand+0xa6>
        for (i = 0; i < a->used; i++) {
            a->dp[i] &= MP_MASK;
        }
#endif
        /* ensure top digit is not zero */
        while ((ret == MP_OKAY) && (a->dp[a->used - 1] == 0)) {
 8021208:	e00c      	b.n	8021224 <mp_rand+0x8c>
            ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 802120a:	68fb      	ldr	r3, [r7, #12]
 802120c:	681b      	ldr	r3, [r3, #0]
 802120e:	3b01      	subs	r3, #1
 8021210:	3302      	adds	r3, #2
 8021212:	009b      	lsls	r3, r3, #2
 8021214:	68fa      	ldr	r2, [r7, #12]
 8021216:	4413      	add	r3, r2
 8021218:	3304      	adds	r3, #4
 802121a:	4619      	mov	r1, r3
 802121c:	6878      	ldr	r0, [r7, #4]
 802121e:	f7ff ffac 	bl	802117a <get_rand_digit>
 8021222:	6178      	str	r0, [r7, #20]
        while ((ret == MP_OKAY) && (a->dp[a->used - 1] == 0)) {
 8021224:	697b      	ldr	r3, [r7, #20]
 8021226:	2b00      	cmp	r3, #0
 8021228:	d109      	bne.n	802123e <mp_rand+0xa6>
 802122a:	68fb      	ldr	r3, [r7, #12]
 802122c:	681b      	ldr	r3, [r3, #0]
 802122e:	3b01      	subs	r3, #1
 8021230:	68fa      	ldr	r2, [r7, #12]
 8021232:	3302      	adds	r3, #2
 8021234:	009b      	lsls	r3, r3, #2
 8021236:	4413      	add	r3, r2
 8021238:	685b      	ldr	r3, [r3, #4]
 802123a:	2b00      	cmp	r3, #0
 802123c:	d0e5      	beq.n	802120a <mp_rand+0x72>
            a->dp[a->used - 1] &= MP_MASK;
#endif
        }
    }

    return ret;
 802123e:	697b      	ldr	r3, [r7, #20]
}
 8021240:	4618      	mov	r0, r3
 8021242:	3718      	adds	r7, #24
 8021244:	46bd      	mov	sp, r7
 8021246:	bd80      	pop	{r7, pc}

08021248 <atoi>:
 8021248:	220a      	movs	r2, #10
 802124a:	2100      	movs	r1, #0
 802124c:	f000 bad6 	b.w	80217fc <strtol>

08021250 <__errno>:
 8021250:	4b01      	ldr	r3, [pc, #4]	; (8021258 <__errno+0x8>)
 8021252:	6818      	ldr	r0, [r3, #0]
 8021254:	4770      	bx	lr
 8021256:	bf00      	nop
 8021258:	20000214 	.word	0x20000214

0802125c <__libc_init_array>:
 802125c:	b570      	push	{r4, r5, r6, lr}
 802125e:	4d0d      	ldr	r5, [pc, #52]	; (8021294 <__libc_init_array+0x38>)
 8021260:	4c0d      	ldr	r4, [pc, #52]	; (8021298 <__libc_init_array+0x3c>)
 8021262:	1b64      	subs	r4, r4, r5
 8021264:	10a4      	asrs	r4, r4, #2
 8021266:	2600      	movs	r6, #0
 8021268:	42a6      	cmp	r6, r4
 802126a:	d109      	bne.n	8021280 <__libc_init_array+0x24>
 802126c:	4d0b      	ldr	r5, [pc, #44]	; (802129c <__libc_init_array+0x40>)
 802126e:	4c0c      	ldr	r4, [pc, #48]	; (80212a0 <__libc_init_array+0x44>)
 8021270:	f001 fae6 	bl	8022840 <_init>
 8021274:	1b64      	subs	r4, r4, r5
 8021276:	10a4      	asrs	r4, r4, #2
 8021278:	2600      	movs	r6, #0
 802127a:	42a6      	cmp	r6, r4
 802127c:	d105      	bne.n	802128a <__libc_init_array+0x2e>
 802127e:	bd70      	pop	{r4, r5, r6, pc}
 8021280:	f855 3b04 	ldr.w	r3, [r5], #4
 8021284:	4798      	blx	r3
 8021286:	3601      	adds	r6, #1
 8021288:	e7ee      	b.n	8021268 <__libc_init_array+0xc>
 802128a:	f855 3b04 	ldr.w	r3, [r5], #4
 802128e:	4798      	blx	r3
 8021290:	3601      	adds	r6, #1
 8021292:	e7f2      	b.n	802127a <__libc_init_array+0x1e>
 8021294:	0802c3b0 	.word	0x0802c3b0
 8021298:	0802c3b0 	.word	0x0802c3b0
 802129c:	0802c3b0 	.word	0x0802c3b0
 80212a0:	0802c3b4 	.word	0x0802c3b4

080212a4 <malloc>:
 80212a4:	4b02      	ldr	r3, [pc, #8]	; (80212b0 <malloc+0xc>)
 80212a6:	4601      	mov	r1, r0
 80212a8:	6818      	ldr	r0, [r3, #0]
 80212aa:	f000 b8b7 	b.w	802141c <_malloc_r>
 80212ae:	bf00      	nop
 80212b0:	20000214 	.word	0x20000214

080212b4 <free>:
 80212b4:	4b02      	ldr	r3, [pc, #8]	; (80212c0 <free+0xc>)
 80212b6:	4601      	mov	r1, r0
 80212b8:	6818      	ldr	r0, [r3, #0]
 80212ba:	f000 b843 	b.w	8021344 <_free_r>
 80212be:	bf00      	nop
 80212c0:	20000214 	.word	0x20000214

080212c4 <memcmp>:
 80212c4:	b510      	push	{r4, lr}
 80212c6:	3901      	subs	r1, #1
 80212c8:	4402      	add	r2, r0
 80212ca:	4290      	cmp	r0, r2
 80212cc:	d101      	bne.n	80212d2 <memcmp+0xe>
 80212ce:	2000      	movs	r0, #0
 80212d0:	e005      	b.n	80212de <memcmp+0x1a>
 80212d2:	7803      	ldrb	r3, [r0, #0]
 80212d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80212d8:	42a3      	cmp	r3, r4
 80212da:	d001      	beq.n	80212e0 <memcmp+0x1c>
 80212dc:	1b18      	subs	r0, r3, r4
 80212de:	bd10      	pop	{r4, pc}
 80212e0:	3001      	adds	r0, #1
 80212e2:	e7f2      	b.n	80212ca <memcmp+0x6>

080212e4 <memcpy>:
 80212e4:	440a      	add	r2, r1
 80212e6:	4291      	cmp	r1, r2
 80212e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80212ec:	d100      	bne.n	80212f0 <memcpy+0xc>
 80212ee:	4770      	bx	lr
 80212f0:	b510      	push	{r4, lr}
 80212f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80212f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80212fa:	4291      	cmp	r1, r2
 80212fc:	d1f9      	bne.n	80212f2 <memcpy+0xe>
 80212fe:	bd10      	pop	{r4, pc}

08021300 <memmove>:
 8021300:	4288      	cmp	r0, r1
 8021302:	b510      	push	{r4, lr}
 8021304:	eb01 0402 	add.w	r4, r1, r2
 8021308:	d902      	bls.n	8021310 <memmove+0x10>
 802130a:	4284      	cmp	r4, r0
 802130c:	4623      	mov	r3, r4
 802130e:	d807      	bhi.n	8021320 <memmove+0x20>
 8021310:	1e43      	subs	r3, r0, #1
 8021312:	42a1      	cmp	r1, r4
 8021314:	d008      	beq.n	8021328 <memmove+0x28>
 8021316:	f811 2b01 	ldrb.w	r2, [r1], #1
 802131a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802131e:	e7f8      	b.n	8021312 <memmove+0x12>
 8021320:	4402      	add	r2, r0
 8021322:	4601      	mov	r1, r0
 8021324:	428a      	cmp	r2, r1
 8021326:	d100      	bne.n	802132a <memmove+0x2a>
 8021328:	bd10      	pop	{r4, pc}
 802132a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802132e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021332:	e7f7      	b.n	8021324 <memmove+0x24>

08021334 <memset>:
 8021334:	4402      	add	r2, r0
 8021336:	4603      	mov	r3, r0
 8021338:	4293      	cmp	r3, r2
 802133a:	d100      	bne.n	802133e <memset+0xa>
 802133c:	4770      	bx	lr
 802133e:	f803 1b01 	strb.w	r1, [r3], #1
 8021342:	e7f9      	b.n	8021338 <memset+0x4>

08021344 <_free_r>:
 8021344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021346:	2900      	cmp	r1, #0
 8021348:	d044      	beq.n	80213d4 <_free_r+0x90>
 802134a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802134e:	9001      	str	r0, [sp, #4]
 8021350:	2b00      	cmp	r3, #0
 8021352:	f1a1 0404 	sub.w	r4, r1, #4
 8021356:	bfb8      	it	lt
 8021358:	18e4      	addlt	r4, r4, r3
 802135a:	f000 fd39 	bl	8021dd0 <__malloc_lock>
 802135e:	4a1e      	ldr	r2, [pc, #120]	; (80213d8 <_free_r+0x94>)
 8021360:	9801      	ldr	r0, [sp, #4]
 8021362:	6813      	ldr	r3, [r2, #0]
 8021364:	b933      	cbnz	r3, 8021374 <_free_r+0x30>
 8021366:	6063      	str	r3, [r4, #4]
 8021368:	6014      	str	r4, [r2, #0]
 802136a:	b003      	add	sp, #12
 802136c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021370:	f000 bd34 	b.w	8021ddc <__malloc_unlock>
 8021374:	42a3      	cmp	r3, r4
 8021376:	d908      	bls.n	802138a <_free_r+0x46>
 8021378:	6825      	ldr	r5, [r4, #0]
 802137a:	1961      	adds	r1, r4, r5
 802137c:	428b      	cmp	r3, r1
 802137e:	bf01      	itttt	eq
 8021380:	6819      	ldreq	r1, [r3, #0]
 8021382:	685b      	ldreq	r3, [r3, #4]
 8021384:	1949      	addeq	r1, r1, r5
 8021386:	6021      	streq	r1, [r4, #0]
 8021388:	e7ed      	b.n	8021366 <_free_r+0x22>
 802138a:	461a      	mov	r2, r3
 802138c:	685b      	ldr	r3, [r3, #4]
 802138e:	b10b      	cbz	r3, 8021394 <_free_r+0x50>
 8021390:	42a3      	cmp	r3, r4
 8021392:	d9fa      	bls.n	802138a <_free_r+0x46>
 8021394:	6811      	ldr	r1, [r2, #0]
 8021396:	1855      	adds	r5, r2, r1
 8021398:	42a5      	cmp	r5, r4
 802139a:	d10b      	bne.n	80213b4 <_free_r+0x70>
 802139c:	6824      	ldr	r4, [r4, #0]
 802139e:	4421      	add	r1, r4
 80213a0:	1854      	adds	r4, r2, r1
 80213a2:	42a3      	cmp	r3, r4
 80213a4:	6011      	str	r1, [r2, #0]
 80213a6:	d1e0      	bne.n	802136a <_free_r+0x26>
 80213a8:	681c      	ldr	r4, [r3, #0]
 80213aa:	685b      	ldr	r3, [r3, #4]
 80213ac:	6053      	str	r3, [r2, #4]
 80213ae:	4421      	add	r1, r4
 80213b0:	6011      	str	r1, [r2, #0]
 80213b2:	e7da      	b.n	802136a <_free_r+0x26>
 80213b4:	d902      	bls.n	80213bc <_free_r+0x78>
 80213b6:	230c      	movs	r3, #12
 80213b8:	6003      	str	r3, [r0, #0]
 80213ba:	e7d6      	b.n	802136a <_free_r+0x26>
 80213bc:	6825      	ldr	r5, [r4, #0]
 80213be:	1961      	adds	r1, r4, r5
 80213c0:	428b      	cmp	r3, r1
 80213c2:	bf04      	itt	eq
 80213c4:	6819      	ldreq	r1, [r3, #0]
 80213c6:	685b      	ldreq	r3, [r3, #4]
 80213c8:	6063      	str	r3, [r4, #4]
 80213ca:	bf04      	itt	eq
 80213cc:	1949      	addeq	r1, r1, r5
 80213ce:	6021      	streq	r1, [r4, #0]
 80213d0:	6054      	str	r4, [r2, #4]
 80213d2:	e7ca      	b.n	802136a <_free_r+0x26>
 80213d4:	b003      	add	sp, #12
 80213d6:	bd30      	pop	{r4, r5, pc}
 80213d8:	200003a4 	.word	0x200003a4

080213dc <sbrk_aligned>:
 80213dc:	b570      	push	{r4, r5, r6, lr}
 80213de:	4e0e      	ldr	r6, [pc, #56]	; (8021418 <sbrk_aligned+0x3c>)
 80213e0:	460c      	mov	r4, r1
 80213e2:	6831      	ldr	r1, [r6, #0]
 80213e4:	4605      	mov	r5, r0
 80213e6:	b911      	cbnz	r1, 80213ee <sbrk_aligned+0x12>
 80213e8:	f000 f91a 	bl	8021620 <_sbrk_r>
 80213ec:	6030      	str	r0, [r6, #0]
 80213ee:	4621      	mov	r1, r4
 80213f0:	4628      	mov	r0, r5
 80213f2:	f000 f915 	bl	8021620 <_sbrk_r>
 80213f6:	1c43      	adds	r3, r0, #1
 80213f8:	d00a      	beq.n	8021410 <sbrk_aligned+0x34>
 80213fa:	1cc4      	adds	r4, r0, #3
 80213fc:	f024 0403 	bic.w	r4, r4, #3
 8021400:	42a0      	cmp	r0, r4
 8021402:	d007      	beq.n	8021414 <sbrk_aligned+0x38>
 8021404:	1a21      	subs	r1, r4, r0
 8021406:	4628      	mov	r0, r5
 8021408:	f000 f90a 	bl	8021620 <_sbrk_r>
 802140c:	3001      	adds	r0, #1
 802140e:	d101      	bne.n	8021414 <sbrk_aligned+0x38>
 8021410:	f04f 34ff 	mov.w	r4, #4294967295
 8021414:	4620      	mov	r0, r4
 8021416:	bd70      	pop	{r4, r5, r6, pc}
 8021418:	200003a8 	.word	0x200003a8

0802141c <_malloc_r>:
 802141c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021420:	1ccd      	adds	r5, r1, #3
 8021422:	f025 0503 	bic.w	r5, r5, #3
 8021426:	3508      	adds	r5, #8
 8021428:	2d0c      	cmp	r5, #12
 802142a:	bf38      	it	cc
 802142c:	250c      	movcc	r5, #12
 802142e:	2d00      	cmp	r5, #0
 8021430:	4607      	mov	r7, r0
 8021432:	db01      	blt.n	8021438 <_malloc_r+0x1c>
 8021434:	42a9      	cmp	r1, r5
 8021436:	d905      	bls.n	8021444 <_malloc_r+0x28>
 8021438:	230c      	movs	r3, #12
 802143a:	603b      	str	r3, [r7, #0]
 802143c:	2600      	movs	r6, #0
 802143e:	4630      	mov	r0, r6
 8021440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021444:	4e2e      	ldr	r6, [pc, #184]	; (8021500 <_malloc_r+0xe4>)
 8021446:	f000 fcc3 	bl	8021dd0 <__malloc_lock>
 802144a:	6833      	ldr	r3, [r6, #0]
 802144c:	461c      	mov	r4, r3
 802144e:	bb34      	cbnz	r4, 802149e <_malloc_r+0x82>
 8021450:	4629      	mov	r1, r5
 8021452:	4638      	mov	r0, r7
 8021454:	f7ff ffc2 	bl	80213dc <sbrk_aligned>
 8021458:	1c43      	adds	r3, r0, #1
 802145a:	4604      	mov	r4, r0
 802145c:	d14d      	bne.n	80214fa <_malloc_r+0xde>
 802145e:	6834      	ldr	r4, [r6, #0]
 8021460:	4626      	mov	r6, r4
 8021462:	2e00      	cmp	r6, #0
 8021464:	d140      	bne.n	80214e8 <_malloc_r+0xcc>
 8021466:	6823      	ldr	r3, [r4, #0]
 8021468:	4631      	mov	r1, r6
 802146a:	4638      	mov	r0, r7
 802146c:	eb04 0803 	add.w	r8, r4, r3
 8021470:	f000 f8d6 	bl	8021620 <_sbrk_r>
 8021474:	4580      	cmp	r8, r0
 8021476:	d13a      	bne.n	80214ee <_malloc_r+0xd2>
 8021478:	6821      	ldr	r1, [r4, #0]
 802147a:	3503      	adds	r5, #3
 802147c:	1a6d      	subs	r5, r5, r1
 802147e:	f025 0503 	bic.w	r5, r5, #3
 8021482:	3508      	adds	r5, #8
 8021484:	2d0c      	cmp	r5, #12
 8021486:	bf38      	it	cc
 8021488:	250c      	movcc	r5, #12
 802148a:	4629      	mov	r1, r5
 802148c:	4638      	mov	r0, r7
 802148e:	f7ff ffa5 	bl	80213dc <sbrk_aligned>
 8021492:	3001      	adds	r0, #1
 8021494:	d02b      	beq.n	80214ee <_malloc_r+0xd2>
 8021496:	6823      	ldr	r3, [r4, #0]
 8021498:	442b      	add	r3, r5
 802149a:	6023      	str	r3, [r4, #0]
 802149c:	e00e      	b.n	80214bc <_malloc_r+0xa0>
 802149e:	6822      	ldr	r2, [r4, #0]
 80214a0:	1b52      	subs	r2, r2, r5
 80214a2:	d41e      	bmi.n	80214e2 <_malloc_r+0xc6>
 80214a4:	2a0b      	cmp	r2, #11
 80214a6:	d916      	bls.n	80214d6 <_malloc_r+0xba>
 80214a8:	1961      	adds	r1, r4, r5
 80214aa:	42a3      	cmp	r3, r4
 80214ac:	6025      	str	r5, [r4, #0]
 80214ae:	bf18      	it	ne
 80214b0:	6059      	strne	r1, [r3, #4]
 80214b2:	6863      	ldr	r3, [r4, #4]
 80214b4:	bf08      	it	eq
 80214b6:	6031      	streq	r1, [r6, #0]
 80214b8:	5162      	str	r2, [r4, r5]
 80214ba:	604b      	str	r3, [r1, #4]
 80214bc:	4638      	mov	r0, r7
 80214be:	f104 060b 	add.w	r6, r4, #11
 80214c2:	f000 fc8b 	bl	8021ddc <__malloc_unlock>
 80214c6:	f026 0607 	bic.w	r6, r6, #7
 80214ca:	1d23      	adds	r3, r4, #4
 80214cc:	1af2      	subs	r2, r6, r3
 80214ce:	d0b6      	beq.n	802143e <_malloc_r+0x22>
 80214d0:	1b9b      	subs	r3, r3, r6
 80214d2:	50a3      	str	r3, [r4, r2]
 80214d4:	e7b3      	b.n	802143e <_malloc_r+0x22>
 80214d6:	6862      	ldr	r2, [r4, #4]
 80214d8:	42a3      	cmp	r3, r4
 80214da:	bf0c      	ite	eq
 80214dc:	6032      	streq	r2, [r6, #0]
 80214de:	605a      	strne	r2, [r3, #4]
 80214e0:	e7ec      	b.n	80214bc <_malloc_r+0xa0>
 80214e2:	4623      	mov	r3, r4
 80214e4:	6864      	ldr	r4, [r4, #4]
 80214e6:	e7b2      	b.n	802144e <_malloc_r+0x32>
 80214e8:	4634      	mov	r4, r6
 80214ea:	6876      	ldr	r6, [r6, #4]
 80214ec:	e7b9      	b.n	8021462 <_malloc_r+0x46>
 80214ee:	230c      	movs	r3, #12
 80214f0:	603b      	str	r3, [r7, #0]
 80214f2:	4638      	mov	r0, r7
 80214f4:	f000 fc72 	bl	8021ddc <__malloc_unlock>
 80214f8:	e7a1      	b.n	802143e <_malloc_r+0x22>
 80214fa:	6025      	str	r5, [r4, #0]
 80214fc:	e7de      	b.n	80214bc <_malloc_r+0xa0>
 80214fe:	bf00      	nop
 8021500:	200003a4 	.word	0x200003a4

08021504 <iprintf>:
 8021504:	b40f      	push	{r0, r1, r2, r3}
 8021506:	4b0a      	ldr	r3, [pc, #40]	; (8021530 <iprintf+0x2c>)
 8021508:	b513      	push	{r0, r1, r4, lr}
 802150a:	681c      	ldr	r4, [r3, #0]
 802150c:	b124      	cbz	r4, 8021518 <iprintf+0x14>
 802150e:	69a3      	ldr	r3, [r4, #24]
 8021510:	b913      	cbnz	r3, 8021518 <iprintf+0x14>
 8021512:	4620      	mov	r0, r4
 8021514:	f000 fb56 	bl	8021bc4 <__sinit>
 8021518:	ab05      	add	r3, sp, #20
 802151a:	9a04      	ldr	r2, [sp, #16]
 802151c:	68a1      	ldr	r1, [r4, #8]
 802151e:	9301      	str	r3, [sp, #4]
 8021520:	4620      	mov	r0, r4
 8021522:	f000 fe15 	bl	8022150 <_vfiprintf_r>
 8021526:	b002      	add	sp, #8
 8021528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802152c:	b004      	add	sp, #16
 802152e:	4770      	bx	lr
 8021530:	20000214 	.word	0x20000214

08021534 <_puts_r>:
 8021534:	b570      	push	{r4, r5, r6, lr}
 8021536:	460e      	mov	r6, r1
 8021538:	4605      	mov	r5, r0
 802153a:	b118      	cbz	r0, 8021544 <_puts_r+0x10>
 802153c:	6983      	ldr	r3, [r0, #24]
 802153e:	b90b      	cbnz	r3, 8021544 <_puts_r+0x10>
 8021540:	f000 fb40 	bl	8021bc4 <__sinit>
 8021544:	69ab      	ldr	r3, [r5, #24]
 8021546:	68ac      	ldr	r4, [r5, #8]
 8021548:	b913      	cbnz	r3, 8021550 <_puts_r+0x1c>
 802154a:	4628      	mov	r0, r5
 802154c:	f000 fb3a 	bl	8021bc4 <__sinit>
 8021550:	4b2c      	ldr	r3, [pc, #176]	; (8021604 <_puts_r+0xd0>)
 8021552:	429c      	cmp	r4, r3
 8021554:	d120      	bne.n	8021598 <_puts_r+0x64>
 8021556:	686c      	ldr	r4, [r5, #4]
 8021558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802155a:	07db      	lsls	r3, r3, #31
 802155c:	d405      	bmi.n	802156a <_puts_r+0x36>
 802155e:	89a3      	ldrh	r3, [r4, #12]
 8021560:	0598      	lsls	r0, r3, #22
 8021562:	d402      	bmi.n	802156a <_puts_r+0x36>
 8021564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021566:	f000 fbcb 	bl	8021d00 <__retarget_lock_acquire_recursive>
 802156a:	89a3      	ldrh	r3, [r4, #12]
 802156c:	0719      	lsls	r1, r3, #28
 802156e:	d51d      	bpl.n	80215ac <_puts_r+0x78>
 8021570:	6923      	ldr	r3, [r4, #16]
 8021572:	b1db      	cbz	r3, 80215ac <_puts_r+0x78>
 8021574:	3e01      	subs	r6, #1
 8021576:	68a3      	ldr	r3, [r4, #8]
 8021578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802157c:	3b01      	subs	r3, #1
 802157e:	60a3      	str	r3, [r4, #8]
 8021580:	bb39      	cbnz	r1, 80215d2 <_puts_r+0x9e>
 8021582:	2b00      	cmp	r3, #0
 8021584:	da38      	bge.n	80215f8 <_puts_r+0xc4>
 8021586:	4622      	mov	r2, r4
 8021588:	210a      	movs	r1, #10
 802158a:	4628      	mov	r0, r5
 802158c:	f000 f940 	bl	8021810 <__swbuf_r>
 8021590:	3001      	adds	r0, #1
 8021592:	d011      	beq.n	80215b8 <_puts_r+0x84>
 8021594:	250a      	movs	r5, #10
 8021596:	e011      	b.n	80215bc <_puts_r+0x88>
 8021598:	4b1b      	ldr	r3, [pc, #108]	; (8021608 <_puts_r+0xd4>)
 802159a:	429c      	cmp	r4, r3
 802159c:	d101      	bne.n	80215a2 <_puts_r+0x6e>
 802159e:	68ac      	ldr	r4, [r5, #8]
 80215a0:	e7da      	b.n	8021558 <_puts_r+0x24>
 80215a2:	4b1a      	ldr	r3, [pc, #104]	; (802160c <_puts_r+0xd8>)
 80215a4:	429c      	cmp	r4, r3
 80215a6:	bf08      	it	eq
 80215a8:	68ec      	ldreq	r4, [r5, #12]
 80215aa:	e7d5      	b.n	8021558 <_puts_r+0x24>
 80215ac:	4621      	mov	r1, r4
 80215ae:	4628      	mov	r0, r5
 80215b0:	f000 f980 	bl	80218b4 <__swsetup_r>
 80215b4:	2800      	cmp	r0, #0
 80215b6:	d0dd      	beq.n	8021574 <_puts_r+0x40>
 80215b8:	f04f 35ff 	mov.w	r5, #4294967295
 80215bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80215be:	07da      	lsls	r2, r3, #31
 80215c0:	d405      	bmi.n	80215ce <_puts_r+0x9a>
 80215c2:	89a3      	ldrh	r3, [r4, #12]
 80215c4:	059b      	lsls	r3, r3, #22
 80215c6:	d402      	bmi.n	80215ce <_puts_r+0x9a>
 80215c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80215ca:	f000 fb9a 	bl	8021d02 <__retarget_lock_release_recursive>
 80215ce:	4628      	mov	r0, r5
 80215d0:	bd70      	pop	{r4, r5, r6, pc}
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	da04      	bge.n	80215e0 <_puts_r+0xac>
 80215d6:	69a2      	ldr	r2, [r4, #24]
 80215d8:	429a      	cmp	r2, r3
 80215da:	dc06      	bgt.n	80215ea <_puts_r+0xb6>
 80215dc:	290a      	cmp	r1, #10
 80215de:	d004      	beq.n	80215ea <_puts_r+0xb6>
 80215e0:	6823      	ldr	r3, [r4, #0]
 80215e2:	1c5a      	adds	r2, r3, #1
 80215e4:	6022      	str	r2, [r4, #0]
 80215e6:	7019      	strb	r1, [r3, #0]
 80215e8:	e7c5      	b.n	8021576 <_puts_r+0x42>
 80215ea:	4622      	mov	r2, r4
 80215ec:	4628      	mov	r0, r5
 80215ee:	f000 f90f 	bl	8021810 <__swbuf_r>
 80215f2:	3001      	adds	r0, #1
 80215f4:	d1bf      	bne.n	8021576 <_puts_r+0x42>
 80215f6:	e7df      	b.n	80215b8 <_puts_r+0x84>
 80215f8:	6823      	ldr	r3, [r4, #0]
 80215fa:	250a      	movs	r5, #10
 80215fc:	1c5a      	adds	r2, r3, #1
 80215fe:	6022      	str	r2, [r4, #0]
 8021600:	701d      	strb	r5, [r3, #0]
 8021602:	e7db      	b.n	80215bc <_puts_r+0x88>
 8021604:	0802c334 	.word	0x0802c334
 8021608:	0802c354 	.word	0x0802c354
 802160c:	0802c314 	.word	0x0802c314

08021610 <puts>:
 8021610:	4b02      	ldr	r3, [pc, #8]	; (802161c <puts+0xc>)
 8021612:	4601      	mov	r1, r0
 8021614:	6818      	ldr	r0, [r3, #0]
 8021616:	f7ff bf8d 	b.w	8021534 <_puts_r>
 802161a:	bf00      	nop
 802161c:	20000214 	.word	0x20000214

08021620 <_sbrk_r>:
 8021620:	b538      	push	{r3, r4, r5, lr}
 8021622:	4d06      	ldr	r5, [pc, #24]	; (802163c <_sbrk_r+0x1c>)
 8021624:	2300      	movs	r3, #0
 8021626:	4604      	mov	r4, r0
 8021628:	4608      	mov	r0, r1
 802162a:	602b      	str	r3, [r5, #0]
 802162c:	f7df ff54 	bl	80014d8 <_sbrk>
 8021630:	1c43      	adds	r3, r0, #1
 8021632:	d102      	bne.n	802163a <_sbrk_r+0x1a>
 8021634:	682b      	ldr	r3, [r5, #0]
 8021636:	b103      	cbz	r3, 802163a <_sbrk_r+0x1a>
 8021638:	6023      	str	r3, [r4, #0]
 802163a:	bd38      	pop	{r3, r4, r5, pc}
 802163c:	200003b0 	.word	0x200003b0

08021640 <sniprintf>:
 8021640:	b40c      	push	{r2, r3}
 8021642:	b530      	push	{r4, r5, lr}
 8021644:	4b17      	ldr	r3, [pc, #92]	; (80216a4 <sniprintf+0x64>)
 8021646:	1e0c      	subs	r4, r1, #0
 8021648:	681d      	ldr	r5, [r3, #0]
 802164a:	b09d      	sub	sp, #116	; 0x74
 802164c:	da08      	bge.n	8021660 <sniprintf+0x20>
 802164e:	238b      	movs	r3, #139	; 0x8b
 8021650:	602b      	str	r3, [r5, #0]
 8021652:	f04f 30ff 	mov.w	r0, #4294967295
 8021656:	b01d      	add	sp, #116	; 0x74
 8021658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802165c:	b002      	add	sp, #8
 802165e:	4770      	bx	lr
 8021660:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021664:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021668:	bf14      	ite	ne
 802166a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802166e:	4623      	moveq	r3, r4
 8021670:	9304      	str	r3, [sp, #16]
 8021672:	9307      	str	r3, [sp, #28]
 8021674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021678:	9002      	str	r0, [sp, #8]
 802167a:	9006      	str	r0, [sp, #24]
 802167c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021680:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021682:	ab21      	add	r3, sp, #132	; 0x84
 8021684:	a902      	add	r1, sp, #8
 8021686:	4628      	mov	r0, r5
 8021688:	9301      	str	r3, [sp, #4]
 802168a:	f000 fc37 	bl	8021efc <_svfiprintf_r>
 802168e:	1c43      	adds	r3, r0, #1
 8021690:	bfbc      	itt	lt
 8021692:	238b      	movlt	r3, #139	; 0x8b
 8021694:	602b      	strlt	r3, [r5, #0]
 8021696:	2c00      	cmp	r4, #0
 8021698:	d0dd      	beq.n	8021656 <sniprintf+0x16>
 802169a:	9b02      	ldr	r3, [sp, #8]
 802169c:	2200      	movs	r2, #0
 802169e:	701a      	strb	r2, [r3, #0]
 80216a0:	e7d9      	b.n	8021656 <sniprintf+0x16>
 80216a2:	bf00      	nop
 80216a4:	20000214 	.word	0x20000214

080216a8 <strncmp>:
 80216a8:	b510      	push	{r4, lr}
 80216aa:	b17a      	cbz	r2, 80216cc <strncmp+0x24>
 80216ac:	4603      	mov	r3, r0
 80216ae:	3901      	subs	r1, #1
 80216b0:	1884      	adds	r4, r0, r2
 80216b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80216b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80216ba:	4290      	cmp	r0, r2
 80216bc:	d101      	bne.n	80216c2 <strncmp+0x1a>
 80216be:	42a3      	cmp	r3, r4
 80216c0:	d101      	bne.n	80216c6 <strncmp+0x1e>
 80216c2:	1a80      	subs	r0, r0, r2
 80216c4:	bd10      	pop	{r4, pc}
 80216c6:	2800      	cmp	r0, #0
 80216c8:	d1f3      	bne.n	80216b2 <strncmp+0xa>
 80216ca:	e7fa      	b.n	80216c2 <strncmp+0x1a>
 80216cc:	4610      	mov	r0, r2
 80216ce:	e7f9      	b.n	80216c4 <strncmp+0x1c>

080216d0 <strncpy>:
 80216d0:	b510      	push	{r4, lr}
 80216d2:	3901      	subs	r1, #1
 80216d4:	4603      	mov	r3, r0
 80216d6:	b132      	cbz	r2, 80216e6 <strncpy+0x16>
 80216d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80216dc:	f803 4b01 	strb.w	r4, [r3], #1
 80216e0:	3a01      	subs	r2, #1
 80216e2:	2c00      	cmp	r4, #0
 80216e4:	d1f7      	bne.n	80216d6 <strncpy+0x6>
 80216e6:	441a      	add	r2, r3
 80216e8:	2100      	movs	r1, #0
 80216ea:	4293      	cmp	r3, r2
 80216ec:	d100      	bne.n	80216f0 <strncpy+0x20>
 80216ee:	bd10      	pop	{r4, pc}
 80216f0:	f803 1b01 	strb.w	r1, [r3], #1
 80216f4:	e7f9      	b.n	80216ea <strncpy+0x1a>
	...

080216f8 <_strtol_l.constprop.0>:
 80216f8:	2b01      	cmp	r3, #1
 80216fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216fe:	d001      	beq.n	8021704 <_strtol_l.constprop.0+0xc>
 8021700:	2b24      	cmp	r3, #36	; 0x24
 8021702:	d906      	bls.n	8021712 <_strtol_l.constprop.0+0x1a>
 8021704:	f7ff fda4 	bl	8021250 <__errno>
 8021708:	2316      	movs	r3, #22
 802170a:	6003      	str	r3, [r0, #0]
 802170c:	2000      	movs	r0, #0
 802170e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021712:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80217f8 <_strtol_l.constprop.0+0x100>
 8021716:	460d      	mov	r5, r1
 8021718:	462e      	mov	r6, r5
 802171a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802171e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8021722:	f017 0708 	ands.w	r7, r7, #8
 8021726:	d1f7      	bne.n	8021718 <_strtol_l.constprop.0+0x20>
 8021728:	2c2d      	cmp	r4, #45	; 0x2d
 802172a:	d132      	bne.n	8021792 <_strtol_l.constprop.0+0x9a>
 802172c:	782c      	ldrb	r4, [r5, #0]
 802172e:	2701      	movs	r7, #1
 8021730:	1cb5      	adds	r5, r6, #2
 8021732:	2b00      	cmp	r3, #0
 8021734:	d05b      	beq.n	80217ee <_strtol_l.constprop.0+0xf6>
 8021736:	2b10      	cmp	r3, #16
 8021738:	d109      	bne.n	802174e <_strtol_l.constprop.0+0x56>
 802173a:	2c30      	cmp	r4, #48	; 0x30
 802173c:	d107      	bne.n	802174e <_strtol_l.constprop.0+0x56>
 802173e:	782c      	ldrb	r4, [r5, #0]
 8021740:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021744:	2c58      	cmp	r4, #88	; 0x58
 8021746:	d14d      	bne.n	80217e4 <_strtol_l.constprop.0+0xec>
 8021748:	786c      	ldrb	r4, [r5, #1]
 802174a:	2310      	movs	r3, #16
 802174c:	3502      	adds	r5, #2
 802174e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8021752:	f108 38ff 	add.w	r8, r8, #4294967295
 8021756:	f04f 0c00 	mov.w	ip, #0
 802175a:	fbb8 f9f3 	udiv	r9, r8, r3
 802175e:	4666      	mov	r6, ip
 8021760:	fb03 8a19 	mls	sl, r3, r9, r8
 8021764:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8021768:	f1be 0f09 	cmp.w	lr, #9
 802176c:	d816      	bhi.n	802179c <_strtol_l.constprop.0+0xa4>
 802176e:	4674      	mov	r4, lr
 8021770:	42a3      	cmp	r3, r4
 8021772:	dd24      	ble.n	80217be <_strtol_l.constprop.0+0xc6>
 8021774:	f1bc 0f00 	cmp.w	ip, #0
 8021778:	db1e      	blt.n	80217b8 <_strtol_l.constprop.0+0xc0>
 802177a:	45b1      	cmp	r9, r6
 802177c:	d31c      	bcc.n	80217b8 <_strtol_l.constprop.0+0xc0>
 802177e:	d101      	bne.n	8021784 <_strtol_l.constprop.0+0x8c>
 8021780:	45a2      	cmp	sl, r4
 8021782:	db19      	blt.n	80217b8 <_strtol_l.constprop.0+0xc0>
 8021784:	fb06 4603 	mla	r6, r6, r3, r4
 8021788:	f04f 0c01 	mov.w	ip, #1
 802178c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021790:	e7e8      	b.n	8021764 <_strtol_l.constprop.0+0x6c>
 8021792:	2c2b      	cmp	r4, #43	; 0x2b
 8021794:	bf04      	itt	eq
 8021796:	782c      	ldrbeq	r4, [r5, #0]
 8021798:	1cb5      	addeq	r5, r6, #2
 802179a:	e7ca      	b.n	8021732 <_strtol_l.constprop.0+0x3a>
 802179c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80217a0:	f1be 0f19 	cmp.w	lr, #25
 80217a4:	d801      	bhi.n	80217aa <_strtol_l.constprop.0+0xb2>
 80217a6:	3c37      	subs	r4, #55	; 0x37
 80217a8:	e7e2      	b.n	8021770 <_strtol_l.constprop.0+0x78>
 80217aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80217ae:	f1be 0f19 	cmp.w	lr, #25
 80217b2:	d804      	bhi.n	80217be <_strtol_l.constprop.0+0xc6>
 80217b4:	3c57      	subs	r4, #87	; 0x57
 80217b6:	e7db      	b.n	8021770 <_strtol_l.constprop.0+0x78>
 80217b8:	f04f 3cff 	mov.w	ip, #4294967295
 80217bc:	e7e6      	b.n	802178c <_strtol_l.constprop.0+0x94>
 80217be:	f1bc 0f00 	cmp.w	ip, #0
 80217c2:	da05      	bge.n	80217d0 <_strtol_l.constprop.0+0xd8>
 80217c4:	2322      	movs	r3, #34	; 0x22
 80217c6:	6003      	str	r3, [r0, #0]
 80217c8:	4646      	mov	r6, r8
 80217ca:	b942      	cbnz	r2, 80217de <_strtol_l.constprop.0+0xe6>
 80217cc:	4630      	mov	r0, r6
 80217ce:	e79e      	b.n	802170e <_strtol_l.constprop.0+0x16>
 80217d0:	b107      	cbz	r7, 80217d4 <_strtol_l.constprop.0+0xdc>
 80217d2:	4276      	negs	r6, r6
 80217d4:	2a00      	cmp	r2, #0
 80217d6:	d0f9      	beq.n	80217cc <_strtol_l.constprop.0+0xd4>
 80217d8:	f1bc 0f00 	cmp.w	ip, #0
 80217dc:	d000      	beq.n	80217e0 <_strtol_l.constprop.0+0xe8>
 80217de:	1e69      	subs	r1, r5, #1
 80217e0:	6011      	str	r1, [r2, #0]
 80217e2:	e7f3      	b.n	80217cc <_strtol_l.constprop.0+0xd4>
 80217e4:	2430      	movs	r4, #48	; 0x30
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d1b1      	bne.n	802174e <_strtol_l.constprop.0+0x56>
 80217ea:	2308      	movs	r3, #8
 80217ec:	e7af      	b.n	802174e <_strtol_l.constprop.0+0x56>
 80217ee:	2c30      	cmp	r4, #48	; 0x30
 80217f0:	d0a5      	beq.n	802173e <_strtol_l.constprop.0+0x46>
 80217f2:	230a      	movs	r3, #10
 80217f4:	e7ab      	b.n	802174e <_strtol_l.constprop.0+0x56>
 80217f6:	bf00      	nop
 80217f8:	0802c20d 	.word	0x0802c20d

080217fc <strtol>:
 80217fc:	4613      	mov	r3, r2
 80217fe:	460a      	mov	r2, r1
 8021800:	4601      	mov	r1, r0
 8021802:	4802      	ldr	r0, [pc, #8]	; (802180c <strtol+0x10>)
 8021804:	6800      	ldr	r0, [r0, #0]
 8021806:	f7ff bf77 	b.w	80216f8 <_strtol_l.constprop.0>
 802180a:	bf00      	nop
 802180c:	20000214 	.word	0x20000214

08021810 <__swbuf_r>:
 8021810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021812:	460e      	mov	r6, r1
 8021814:	4614      	mov	r4, r2
 8021816:	4605      	mov	r5, r0
 8021818:	b118      	cbz	r0, 8021822 <__swbuf_r+0x12>
 802181a:	6983      	ldr	r3, [r0, #24]
 802181c:	b90b      	cbnz	r3, 8021822 <__swbuf_r+0x12>
 802181e:	f000 f9d1 	bl	8021bc4 <__sinit>
 8021822:	4b21      	ldr	r3, [pc, #132]	; (80218a8 <__swbuf_r+0x98>)
 8021824:	429c      	cmp	r4, r3
 8021826:	d12b      	bne.n	8021880 <__swbuf_r+0x70>
 8021828:	686c      	ldr	r4, [r5, #4]
 802182a:	69a3      	ldr	r3, [r4, #24]
 802182c:	60a3      	str	r3, [r4, #8]
 802182e:	89a3      	ldrh	r3, [r4, #12]
 8021830:	071a      	lsls	r2, r3, #28
 8021832:	d52f      	bpl.n	8021894 <__swbuf_r+0x84>
 8021834:	6923      	ldr	r3, [r4, #16]
 8021836:	b36b      	cbz	r3, 8021894 <__swbuf_r+0x84>
 8021838:	6923      	ldr	r3, [r4, #16]
 802183a:	6820      	ldr	r0, [r4, #0]
 802183c:	1ac0      	subs	r0, r0, r3
 802183e:	6963      	ldr	r3, [r4, #20]
 8021840:	b2f6      	uxtb	r6, r6
 8021842:	4283      	cmp	r3, r0
 8021844:	4637      	mov	r7, r6
 8021846:	dc04      	bgt.n	8021852 <__swbuf_r+0x42>
 8021848:	4621      	mov	r1, r4
 802184a:	4628      	mov	r0, r5
 802184c:	f000 f926 	bl	8021a9c <_fflush_r>
 8021850:	bb30      	cbnz	r0, 80218a0 <__swbuf_r+0x90>
 8021852:	68a3      	ldr	r3, [r4, #8]
 8021854:	3b01      	subs	r3, #1
 8021856:	60a3      	str	r3, [r4, #8]
 8021858:	6823      	ldr	r3, [r4, #0]
 802185a:	1c5a      	adds	r2, r3, #1
 802185c:	6022      	str	r2, [r4, #0]
 802185e:	701e      	strb	r6, [r3, #0]
 8021860:	6963      	ldr	r3, [r4, #20]
 8021862:	3001      	adds	r0, #1
 8021864:	4283      	cmp	r3, r0
 8021866:	d004      	beq.n	8021872 <__swbuf_r+0x62>
 8021868:	89a3      	ldrh	r3, [r4, #12]
 802186a:	07db      	lsls	r3, r3, #31
 802186c:	d506      	bpl.n	802187c <__swbuf_r+0x6c>
 802186e:	2e0a      	cmp	r6, #10
 8021870:	d104      	bne.n	802187c <__swbuf_r+0x6c>
 8021872:	4621      	mov	r1, r4
 8021874:	4628      	mov	r0, r5
 8021876:	f000 f911 	bl	8021a9c <_fflush_r>
 802187a:	b988      	cbnz	r0, 80218a0 <__swbuf_r+0x90>
 802187c:	4638      	mov	r0, r7
 802187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021880:	4b0a      	ldr	r3, [pc, #40]	; (80218ac <__swbuf_r+0x9c>)
 8021882:	429c      	cmp	r4, r3
 8021884:	d101      	bne.n	802188a <__swbuf_r+0x7a>
 8021886:	68ac      	ldr	r4, [r5, #8]
 8021888:	e7cf      	b.n	802182a <__swbuf_r+0x1a>
 802188a:	4b09      	ldr	r3, [pc, #36]	; (80218b0 <__swbuf_r+0xa0>)
 802188c:	429c      	cmp	r4, r3
 802188e:	bf08      	it	eq
 8021890:	68ec      	ldreq	r4, [r5, #12]
 8021892:	e7ca      	b.n	802182a <__swbuf_r+0x1a>
 8021894:	4621      	mov	r1, r4
 8021896:	4628      	mov	r0, r5
 8021898:	f000 f80c 	bl	80218b4 <__swsetup_r>
 802189c:	2800      	cmp	r0, #0
 802189e:	d0cb      	beq.n	8021838 <__swbuf_r+0x28>
 80218a0:	f04f 37ff 	mov.w	r7, #4294967295
 80218a4:	e7ea      	b.n	802187c <__swbuf_r+0x6c>
 80218a6:	bf00      	nop
 80218a8:	0802c334 	.word	0x0802c334
 80218ac:	0802c354 	.word	0x0802c354
 80218b0:	0802c314 	.word	0x0802c314

080218b4 <__swsetup_r>:
 80218b4:	4b32      	ldr	r3, [pc, #200]	; (8021980 <__swsetup_r+0xcc>)
 80218b6:	b570      	push	{r4, r5, r6, lr}
 80218b8:	681d      	ldr	r5, [r3, #0]
 80218ba:	4606      	mov	r6, r0
 80218bc:	460c      	mov	r4, r1
 80218be:	b125      	cbz	r5, 80218ca <__swsetup_r+0x16>
 80218c0:	69ab      	ldr	r3, [r5, #24]
 80218c2:	b913      	cbnz	r3, 80218ca <__swsetup_r+0x16>
 80218c4:	4628      	mov	r0, r5
 80218c6:	f000 f97d 	bl	8021bc4 <__sinit>
 80218ca:	4b2e      	ldr	r3, [pc, #184]	; (8021984 <__swsetup_r+0xd0>)
 80218cc:	429c      	cmp	r4, r3
 80218ce:	d10f      	bne.n	80218f0 <__swsetup_r+0x3c>
 80218d0:	686c      	ldr	r4, [r5, #4]
 80218d2:	89a3      	ldrh	r3, [r4, #12]
 80218d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80218d8:	0719      	lsls	r1, r3, #28
 80218da:	d42c      	bmi.n	8021936 <__swsetup_r+0x82>
 80218dc:	06dd      	lsls	r5, r3, #27
 80218de:	d411      	bmi.n	8021904 <__swsetup_r+0x50>
 80218e0:	2309      	movs	r3, #9
 80218e2:	6033      	str	r3, [r6, #0]
 80218e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80218e8:	81a3      	strh	r3, [r4, #12]
 80218ea:	f04f 30ff 	mov.w	r0, #4294967295
 80218ee:	e03e      	b.n	802196e <__swsetup_r+0xba>
 80218f0:	4b25      	ldr	r3, [pc, #148]	; (8021988 <__swsetup_r+0xd4>)
 80218f2:	429c      	cmp	r4, r3
 80218f4:	d101      	bne.n	80218fa <__swsetup_r+0x46>
 80218f6:	68ac      	ldr	r4, [r5, #8]
 80218f8:	e7eb      	b.n	80218d2 <__swsetup_r+0x1e>
 80218fa:	4b24      	ldr	r3, [pc, #144]	; (802198c <__swsetup_r+0xd8>)
 80218fc:	429c      	cmp	r4, r3
 80218fe:	bf08      	it	eq
 8021900:	68ec      	ldreq	r4, [r5, #12]
 8021902:	e7e6      	b.n	80218d2 <__swsetup_r+0x1e>
 8021904:	0758      	lsls	r0, r3, #29
 8021906:	d512      	bpl.n	802192e <__swsetup_r+0x7a>
 8021908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802190a:	b141      	cbz	r1, 802191e <__swsetup_r+0x6a>
 802190c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021910:	4299      	cmp	r1, r3
 8021912:	d002      	beq.n	802191a <__swsetup_r+0x66>
 8021914:	4630      	mov	r0, r6
 8021916:	f7ff fd15 	bl	8021344 <_free_r>
 802191a:	2300      	movs	r3, #0
 802191c:	6363      	str	r3, [r4, #52]	; 0x34
 802191e:	89a3      	ldrh	r3, [r4, #12]
 8021920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021924:	81a3      	strh	r3, [r4, #12]
 8021926:	2300      	movs	r3, #0
 8021928:	6063      	str	r3, [r4, #4]
 802192a:	6923      	ldr	r3, [r4, #16]
 802192c:	6023      	str	r3, [r4, #0]
 802192e:	89a3      	ldrh	r3, [r4, #12]
 8021930:	f043 0308 	orr.w	r3, r3, #8
 8021934:	81a3      	strh	r3, [r4, #12]
 8021936:	6923      	ldr	r3, [r4, #16]
 8021938:	b94b      	cbnz	r3, 802194e <__swsetup_r+0x9a>
 802193a:	89a3      	ldrh	r3, [r4, #12]
 802193c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021944:	d003      	beq.n	802194e <__swsetup_r+0x9a>
 8021946:	4621      	mov	r1, r4
 8021948:	4630      	mov	r0, r6
 802194a:	f000 fa01 	bl	8021d50 <__smakebuf_r>
 802194e:	89a0      	ldrh	r0, [r4, #12]
 8021950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021954:	f010 0301 	ands.w	r3, r0, #1
 8021958:	d00a      	beq.n	8021970 <__swsetup_r+0xbc>
 802195a:	2300      	movs	r3, #0
 802195c:	60a3      	str	r3, [r4, #8]
 802195e:	6963      	ldr	r3, [r4, #20]
 8021960:	425b      	negs	r3, r3
 8021962:	61a3      	str	r3, [r4, #24]
 8021964:	6923      	ldr	r3, [r4, #16]
 8021966:	b943      	cbnz	r3, 802197a <__swsetup_r+0xc6>
 8021968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802196c:	d1ba      	bne.n	80218e4 <__swsetup_r+0x30>
 802196e:	bd70      	pop	{r4, r5, r6, pc}
 8021970:	0781      	lsls	r1, r0, #30
 8021972:	bf58      	it	pl
 8021974:	6963      	ldrpl	r3, [r4, #20]
 8021976:	60a3      	str	r3, [r4, #8]
 8021978:	e7f4      	b.n	8021964 <__swsetup_r+0xb0>
 802197a:	2000      	movs	r0, #0
 802197c:	e7f7      	b.n	802196e <__swsetup_r+0xba>
 802197e:	bf00      	nop
 8021980:	20000214 	.word	0x20000214
 8021984:	0802c334 	.word	0x0802c334
 8021988:	0802c354 	.word	0x0802c354
 802198c:	0802c314 	.word	0x0802c314

08021990 <__sflush_r>:
 8021990:	898a      	ldrh	r2, [r1, #12]
 8021992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021996:	4605      	mov	r5, r0
 8021998:	0710      	lsls	r0, r2, #28
 802199a:	460c      	mov	r4, r1
 802199c:	d458      	bmi.n	8021a50 <__sflush_r+0xc0>
 802199e:	684b      	ldr	r3, [r1, #4]
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	dc05      	bgt.n	80219b0 <__sflush_r+0x20>
 80219a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	dc02      	bgt.n	80219b0 <__sflush_r+0x20>
 80219aa:	2000      	movs	r0, #0
 80219ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80219b2:	2e00      	cmp	r6, #0
 80219b4:	d0f9      	beq.n	80219aa <__sflush_r+0x1a>
 80219b6:	2300      	movs	r3, #0
 80219b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80219bc:	682f      	ldr	r7, [r5, #0]
 80219be:	602b      	str	r3, [r5, #0]
 80219c0:	d032      	beq.n	8021a28 <__sflush_r+0x98>
 80219c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80219c4:	89a3      	ldrh	r3, [r4, #12]
 80219c6:	075a      	lsls	r2, r3, #29
 80219c8:	d505      	bpl.n	80219d6 <__sflush_r+0x46>
 80219ca:	6863      	ldr	r3, [r4, #4]
 80219cc:	1ac0      	subs	r0, r0, r3
 80219ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80219d0:	b10b      	cbz	r3, 80219d6 <__sflush_r+0x46>
 80219d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80219d4:	1ac0      	subs	r0, r0, r3
 80219d6:	2300      	movs	r3, #0
 80219d8:	4602      	mov	r2, r0
 80219da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80219dc:	6a21      	ldr	r1, [r4, #32]
 80219de:	4628      	mov	r0, r5
 80219e0:	47b0      	blx	r6
 80219e2:	1c43      	adds	r3, r0, #1
 80219e4:	89a3      	ldrh	r3, [r4, #12]
 80219e6:	d106      	bne.n	80219f6 <__sflush_r+0x66>
 80219e8:	6829      	ldr	r1, [r5, #0]
 80219ea:	291d      	cmp	r1, #29
 80219ec:	d82c      	bhi.n	8021a48 <__sflush_r+0xb8>
 80219ee:	4a2a      	ldr	r2, [pc, #168]	; (8021a98 <__sflush_r+0x108>)
 80219f0:	40ca      	lsrs	r2, r1
 80219f2:	07d6      	lsls	r6, r2, #31
 80219f4:	d528      	bpl.n	8021a48 <__sflush_r+0xb8>
 80219f6:	2200      	movs	r2, #0
 80219f8:	6062      	str	r2, [r4, #4]
 80219fa:	04d9      	lsls	r1, r3, #19
 80219fc:	6922      	ldr	r2, [r4, #16]
 80219fe:	6022      	str	r2, [r4, #0]
 8021a00:	d504      	bpl.n	8021a0c <__sflush_r+0x7c>
 8021a02:	1c42      	adds	r2, r0, #1
 8021a04:	d101      	bne.n	8021a0a <__sflush_r+0x7a>
 8021a06:	682b      	ldr	r3, [r5, #0]
 8021a08:	b903      	cbnz	r3, 8021a0c <__sflush_r+0x7c>
 8021a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8021a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021a0e:	602f      	str	r7, [r5, #0]
 8021a10:	2900      	cmp	r1, #0
 8021a12:	d0ca      	beq.n	80219aa <__sflush_r+0x1a>
 8021a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021a18:	4299      	cmp	r1, r3
 8021a1a:	d002      	beq.n	8021a22 <__sflush_r+0x92>
 8021a1c:	4628      	mov	r0, r5
 8021a1e:	f7ff fc91 	bl	8021344 <_free_r>
 8021a22:	2000      	movs	r0, #0
 8021a24:	6360      	str	r0, [r4, #52]	; 0x34
 8021a26:	e7c1      	b.n	80219ac <__sflush_r+0x1c>
 8021a28:	6a21      	ldr	r1, [r4, #32]
 8021a2a:	2301      	movs	r3, #1
 8021a2c:	4628      	mov	r0, r5
 8021a2e:	47b0      	blx	r6
 8021a30:	1c41      	adds	r1, r0, #1
 8021a32:	d1c7      	bne.n	80219c4 <__sflush_r+0x34>
 8021a34:	682b      	ldr	r3, [r5, #0]
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d0c4      	beq.n	80219c4 <__sflush_r+0x34>
 8021a3a:	2b1d      	cmp	r3, #29
 8021a3c:	d001      	beq.n	8021a42 <__sflush_r+0xb2>
 8021a3e:	2b16      	cmp	r3, #22
 8021a40:	d101      	bne.n	8021a46 <__sflush_r+0xb6>
 8021a42:	602f      	str	r7, [r5, #0]
 8021a44:	e7b1      	b.n	80219aa <__sflush_r+0x1a>
 8021a46:	89a3      	ldrh	r3, [r4, #12]
 8021a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a4c:	81a3      	strh	r3, [r4, #12]
 8021a4e:	e7ad      	b.n	80219ac <__sflush_r+0x1c>
 8021a50:	690f      	ldr	r7, [r1, #16]
 8021a52:	2f00      	cmp	r7, #0
 8021a54:	d0a9      	beq.n	80219aa <__sflush_r+0x1a>
 8021a56:	0793      	lsls	r3, r2, #30
 8021a58:	680e      	ldr	r6, [r1, #0]
 8021a5a:	bf08      	it	eq
 8021a5c:	694b      	ldreq	r3, [r1, #20]
 8021a5e:	600f      	str	r7, [r1, #0]
 8021a60:	bf18      	it	ne
 8021a62:	2300      	movne	r3, #0
 8021a64:	eba6 0807 	sub.w	r8, r6, r7
 8021a68:	608b      	str	r3, [r1, #8]
 8021a6a:	f1b8 0f00 	cmp.w	r8, #0
 8021a6e:	dd9c      	ble.n	80219aa <__sflush_r+0x1a>
 8021a70:	6a21      	ldr	r1, [r4, #32]
 8021a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021a74:	4643      	mov	r3, r8
 8021a76:	463a      	mov	r2, r7
 8021a78:	4628      	mov	r0, r5
 8021a7a:	47b0      	blx	r6
 8021a7c:	2800      	cmp	r0, #0
 8021a7e:	dc06      	bgt.n	8021a8e <__sflush_r+0xfe>
 8021a80:	89a3      	ldrh	r3, [r4, #12]
 8021a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a86:	81a3      	strh	r3, [r4, #12]
 8021a88:	f04f 30ff 	mov.w	r0, #4294967295
 8021a8c:	e78e      	b.n	80219ac <__sflush_r+0x1c>
 8021a8e:	4407      	add	r7, r0
 8021a90:	eba8 0800 	sub.w	r8, r8, r0
 8021a94:	e7e9      	b.n	8021a6a <__sflush_r+0xda>
 8021a96:	bf00      	nop
 8021a98:	20400001 	.word	0x20400001

08021a9c <_fflush_r>:
 8021a9c:	b538      	push	{r3, r4, r5, lr}
 8021a9e:	690b      	ldr	r3, [r1, #16]
 8021aa0:	4605      	mov	r5, r0
 8021aa2:	460c      	mov	r4, r1
 8021aa4:	b913      	cbnz	r3, 8021aac <_fflush_r+0x10>
 8021aa6:	2500      	movs	r5, #0
 8021aa8:	4628      	mov	r0, r5
 8021aaa:	bd38      	pop	{r3, r4, r5, pc}
 8021aac:	b118      	cbz	r0, 8021ab6 <_fflush_r+0x1a>
 8021aae:	6983      	ldr	r3, [r0, #24]
 8021ab0:	b90b      	cbnz	r3, 8021ab6 <_fflush_r+0x1a>
 8021ab2:	f000 f887 	bl	8021bc4 <__sinit>
 8021ab6:	4b14      	ldr	r3, [pc, #80]	; (8021b08 <_fflush_r+0x6c>)
 8021ab8:	429c      	cmp	r4, r3
 8021aba:	d11b      	bne.n	8021af4 <_fflush_r+0x58>
 8021abc:	686c      	ldr	r4, [r5, #4]
 8021abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d0ef      	beq.n	8021aa6 <_fflush_r+0xa>
 8021ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021ac8:	07d0      	lsls	r0, r2, #31
 8021aca:	d404      	bmi.n	8021ad6 <_fflush_r+0x3a>
 8021acc:	0599      	lsls	r1, r3, #22
 8021ace:	d402      	bmi.n	8021ad6 <_fflush_r+0x3a>
 8021ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021ad2:	f000 f915 	bl	8021d00 <__retarget_lock_acquire_recursive>
 8021ad6:	4628      	mov	r0, r5
 8021ad8:	4621      	mov	r1, r4
 8021ada:	f7ff ff59 	bl	8021990 <__sflush_r>
 8021ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ae0:	07da      	lsls	r2, r3, #31
 8021ae2:	4605      	mov	r5, r0
 8021ae4:	d4e0      	bmi.n	8021aa8 <_fflush_r+0xc>
 8021ae6:	89a3      	ldrh	r3, [r4, #12]
 8021ae8:	059b      	lsls	r3, r3, #22
 8021aea:	d4dd      	bmi.n	8021aa8 <_fflush_r+0xc>
 8021aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021aee:	f000 f908 	bl	8021d02 <__retarget_lock_release_recursive>
 8021af2:	e7d9      	b.n	8021aa8 <_fflush_r+0xc>
 8021af4:	4b05      	ldr	r3, [pc, #20]	; (8021b0c <_fflush_r+0x70>)
 8021af6:	429c      	cmp	r4, r3
 8021af8:	d101      	bne.n	8021afe <_fflush_r+0x62>
 8021afa:	68ac      	ldr	r4, [r5, #8]
 8021afc:	e7df      	b.n	8021abe <_fflush_r+0x22>
 8021afe:	4b04      	ldr	r3, [pc, #16]	; (8021b10 <_fflush_r+0x74>)
 8021b00:	429c      	cmp	r4, r3
 8021b02:	bf08      	it	eq
 8021b04:	68ec      	ldreq	r4, [r5, #12]
 8021b06:	e7da      	b.n	8021abe <_fflush_r+0x22>
 8021b08:	0802c334 	.word	0x0802c334
 8021b0c:	0802c354 	.word	0x0802c354
 8021b10:	0802c314 	.word	0x0802c314

08021b14 <std>:
 8021b14:	2300      	movs	r3, #0
 8021b16:	b510      	push	{r4, lr}
 8021b18:	4604      	mov	r4, r0
 8021b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8021b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021b22:	6083      	str	r3, [r0, #8]
 8021b24:	8181      	strh	r1, [r0, #12]
 8021b26:	6643      	str	r3, [r0, #100]	; 0x64
 8021b28:	81c2      	strh	r2, [r0, #14]
 8021b2a:	6183      	str	r3, [r0, #24]
 8021b2c:	4619      	mov	r1, r3
 8021b2e:	2208      	movs	r2, #8
 8021b30:	305c      	adds	r0, #92	; 0x5c
 8021b32:	f7ff fbff 	bl	8021334 <memset>
 8021b36:	4b05      	ldr	r3, [pc, #20]	; (8021b4c <std+0x38>)
 8021b38:	6263      	str	r3, [r4, #36]	; 0x24
 8021b3a:	4b05      	ldr	r3, [pc, #20]	; (8021b50 <std+0x3c>)
 8021b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8021b3e:	4b05      	ldr	r3, [pc, #20]	; (8021b54 <std+0x40>)
 8021b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021b42:	4b05      	ldr	r3, [pc, #20]	; (8021b58 <std+0x44>)
 8021b44:	6224      	str	r4, [r4, #32]
 8021b46:	6323      	str	r3, [r4, #48]	; 0x30
 8021b48:	bd10      	pop	{r4, pc}
 8021b4a:	bf00      	nop
 8021b4c:	080226d9 	.word	0x080226d9
 8021b50:	080226fb 	.word	0x080226fb
 8021b54:	08022733 	.word	0x08022733
 8021b58:	08022757 	.word	0x08022757

08021b5c <_cleanup_r>:
 8021b5c:	4901      	ldr	r1, [pc, #4]	; (8021b64 <_cleanup_r+0x8>)
 8021b5e:	f000 b8af 	b.w	8021cc0 <_fwalk_reent>
 8021b62:	bf00      	nop
 8021b64:	08021a9d 	.word	0x08021a9d

08021b68 <__sfmoreglue>:
 8021b68:	b570      	push	{r4, r5, r6, lr}
 8021b6a:	2268      	movs	r2, #104	; 0x68
 8021b6c:	1e4d      	subs	r5, r1, #1
 8021b6e:	4355      	muls	r5, r2
 8021b70:	460e      	mov	r6, r1
 8021b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021b76:	f7ff fc51 	bl	802141c <_malloc_r>
 8021b7a:	4604      	mov	r4, r0
 8021b7c:	b140      	cbz	r0, 8021b90 <__sfmoreglue+0x28>
 8021b7e:	2100      	movs	r1, #0
 8021b80:	e9c0 1600 	strd	r1, r6, [r0]
 8021b84:	300c      	adds	r0, #12
 8021b86:	60a0      	str	r0, [r4, #8]
 8021b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021b8c:	f7ff fbd2 	bl	8021334 <memset>
 8021b90:	4620      	mov	r0, r4
 8021b92:	bd70      	pop	{r4, r5, r6, pc}

08021b94 <__sfp_lock_acquire>:
 8021b94:	4801      	ldr	r0, [pc, #4]	; (8021b9c <__sfp_lock_acquire+0x8>)
 8021b96:	f000 b8b3 	b.w	8021d00 <__retarget_lock_acquire_recursive>
 8021b9a:	bf00      	nop
 8021b9c:	200003ad 	.word	0x200003ad

08021ba0 <__sfp_lock_release>:
 8021ba0:	4801      	ldr	r0, [pc, #4]	; (8021ba8 <__sfp_lock_release+0x8>)
 8021ba2:	f000 b8ae 	b.w	8021d02 <__retarget_lock_release_recursive>
 8021ba6:	bf00      	nop
 8021ba8:	200003ad 	.word	0x200003ad

08021bac <__sinit_lock_acquire>:
 8021bac:	4801      	ldr	r0, [pc, #4]	; (8021bb4 <__sinit_lock_acquire+0x8>)
 8021bae:	f000 b8a7 	b.w	8021d00 <__retarget_lock_acquire_recursive>
 8021bb2:	bf00      	nop
 8021bb4:	200003ae 	.word	0x200003ae

08021bb8 <__sinit_lock_release>:
 8021bb8:	4801      	ldr	r0, [pc, #4]	; (8021bc0 <__sinit_lock_release+0x8>)
 8021bba:	f000 b8a2 	b.w	8021d02 <__retarget_lock_release_recursive>
 8021bbe:	bf00      	nop
 8021bc0:	200003ae 	.word	0x200003ae

08021bc4 <__sinit>:
 8021bc4:	b510      	push	{r4, lr}
 8021bc6:	4604      	mov	r4, r0
 8021bc8:	f7ff fff0 	bl	8021bac <__sinit_lock_acquire>
 8021bcc:	69a3      	ldr	r3, [r4, #24]
 8021bce:	b11b      	cbz	r3, 8021bd8 <__sinit+0x14>
 8021bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bd4:	f7ff bff0 	b.w	8021bb8 <__sinit_lock_release>
 8021bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8021bde:	4b13      	ldr	r3, [pc, #76]	; (8021c2c <__sinit+0x68>)
 8021be0:	4a13      	ldr	r2, [pc, #76]	; (8021c30 <__sinit+0x6c>)
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8021be6:	42a3      	cmp	r3, r4
 8021be8:	bf04      	itt	eq
 8021bea:	2301      	moveq	r3, #1
 8021bec:	61a3      	streq	r3, [r4, #24]
 8021bee:	4620      	mov	r0, r4
 8021bf0:	f000 f820 	bl	8021c34 <__sfp>
 8021bf4:	6060      	str	r0, [r4, #4]
 8021bf6:	4620      	mov	r0, r4
 8021bf8:	f000 f81c 	bl	8021c34 <__sfp>
 8021bfc:	60a0      	str	r0, [r4, #8]
 8021bfe:	4620      	mov	r0, r4
 8021c00:	f000 f818 	bl	8021c34 <__sfp>
 8021c04:	2200      	movs	r2, #0
 8021c06:	60e0      	str	r0, [r4, #12]
 8021c08:	2104      	movs	r1, #4
 8021c0a:	6860      	ldr	r0, [r4, #4]
 8021c0c:	f7ff ff82 	bl	8021b14 <std>
 8021c10:	68a0      	ldr	r0, [r4, #8]
 8021c12:	2201      	movs	r2, #1
 8021c14:	2109      	movs	r1, #9
 8021c16:	f7ff ff7d 	bl	8021b14 <std>
 8021c1a:	68e0      	ldr	r0, [r4, #12]
 8021c1c:	2202      	movs	r2, #2
 8021c1e:	2112      	movs	r1, #18
 8021c20:	f7ff ff78 	bl	8021b14 <std>
 8021c24:	2301      	movs	r3, #1
 8021c26:	61a3      	str	r3, [r4, #24]
 8021c28:	e7d2      	b.n	8021bd0 <__sinit+0xc>
 8021c2a:	bf00      	nop
 8021c2c:	0802c310 	.word	0x0802c310
 8021c30:	08021b5d 	.word	0x08021b5d

08021c34 <__sfp>:
 8021c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c36:	4607      	mov	r7, r0
 8021c38:	f7ff ffac 	bl	8021b94 <__sfp_lock_acquire>
 8021c3c:	4b1e      	ldr	r3, [pc, #120]	; (8021cb8 <__sfp+0x84>)
 8021c3e:	681e      	ldr	r6, [r3, #0]
 8021c40:	69b3      	ldr	r3, [r6, #24]
 8021c42:	b913      	cbnz	r3, 8021c4a <__sfp+0x16>
 8021c44:	4630      	mov	r0, r6
 8021c46:	f7ff ffbd 	bl	8021bc4 <__sinit>
 8021c4a:	3648      	adds	r6, #72	; 0x48
 8021c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021c50:	3b01      	subs	r3, #1
 8021c52:	d503      	bpl.n	8021c5c <__sfp+0x28>
 8021c54:	6833      	ldr	r3, [r6, #0]
 8021c56:	b30b      	cbz	r3, 8021c9c <__sfp+0x68>
 8021c58:	6836      	ldr	r6, [r6, #0]
 8021c5a:	e7f7      	b.n	8021c4c <__sfp+0x18>
 8021c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021c60:	b9d5      	cbnz	r5, 8021c98 <__sfp+0x64>
 8021c62:	4b16      	ldr	r3, [pc, #88]	; (8021cbc <__sfp+0x88>)
 8021c64:	60e3      	str	r3, [r4, #12]
 8021c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8021c6c:	f000 f847 	bl	8021cfe <__retarget_lock_init_recursive>
 8021c70:	f7ff ff96 	bl	8021ba0 <__sfp_lock_release>
 8021c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021c7c:	6025      	str	r5, [r4, #0]
 8021c7e:	61a5      	str	r5, [r4, #24]
 8021c80:	2208      	movs	r2, #8
 8021c82:	4629      	mov	r1, r5
 8021c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021c88:	f7ff fb54 	bl	8021334 <memset>
 8021c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021c94:	4620      	mov	r0, r4
 8021c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c98:	3468      	adds	r4, #104	; 0x68
 8021c9a:	e7d9      	b.n	8021c50 <__sfp+0x1c>
 8021c9c:	2104      	movs	r1, #4
 8021c9e:	4638      	mov	r0, r7
 8021ca0:	f7ff ff62 	bl	8021b68 <__sfmoreglue>
 8021ca4:	4604      	mov	r4, r0
 8021ca6:	6030      	str	r0, [r6, #0]
 8021ca8:	2800      	cmp	r0, #0
 8021caa:	d1d5      	bne.n	8021c58 <__sfp+0x24>
 8021cac:	f7ff ff78 	bl	8021ba0 <__sfp_lock_release>
 8021cb0:	230c      	movs	r3, #12
 8021cb2:	603b      	str	r3, [r7, #0]
 8021cb4:	e7ee      	b.n	8021c94 <__sfp+0x60>
 8021cb6:	bf00      	nop
 8021cb8:	0802c310 	.word	0x0802c310
 8021cbc:	ffff0001 	.word	0xffff0001

08021cc0 <_fwalk_reent>:
 8021cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021cc4:	4606      	mov	r6, r0
 8021cc6:	4688      	mov	r8, r1
 8021cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021ccc:	2700      	movs	r7, #0
 8021cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8021cd6:	d505      	bpl.n	8021ce4 <_fwalk_reent+0x24>
 8021cd8:	6824      	ldr	r4, [r4, #0]
 8021cda:	2c00      	cmp	r4, #0
 8021cdc:	d1f7      	bne.n	8021cce <_fwalk_reent+0xe>
 8021cde:	4638      	mov	r0, r7
 8021ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ce4:	89ab      	ldrh	r3, [r5, #12]
 8021ce6:	2b01      	cmp	r3, #1
 8021ce8:	d907      	bls.n	8021cfa <_fwalk_reent+0x3a>
 8021cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021cee:	3301      	adds	r3, #1
 8021cf0:	d003      	beq.n	8021cfa <_fwalk_reent+0x3a>
 8021cf2:	4629      	mov	r1, r5
 8021cf4:	4630      	mov	r0, r6
 8021cf6:	47c0      	blx	r8
 8021cf8:	4307      	orrs	r7, r0
 8021cfa:	3568      	adds	r5, #104	; 0x68
 8021cfc:	e7e9      	b.n	8021cd2 <_fwalk_reent+0x12>

08021cfe <__retarget_lock_init_recursive>:
 8021cfe:	4770      	bx	lr

08021d00 <__retarget_lock_acquire_recursive>:
 8021d00:	4770      	bx	lr

08021d02 <__retarget_lock_release_recursive>:
 8021d02:	4770      	bx	lr

08021d04 <__swhatbuf_r>:
 8021d04:	b570      	push	{r4, r5, r6, lr}
 8021d06:	460e      	mov	r6, r1
 8021d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d0c:	2900      	cmp	r1, #0
 8021d0e:	b096      	sub	sp, #88	; 0x58
 8021d10:	4614      	mov	r4, r2
 8021d12:	461d      	mov	r5, r3
 8021d14:	da08      	bge.n	8021d28 <__swhatbuf_r+0x24>
 8021d16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021d1a:	2200      	movs	r2, #0
 8021d1c:	602a      	str	r2, [r5, #0]
 8021d1e:	061a      	lsls	r2, r3, #24
 8021d20:	d410      	bmi.n	8021d44 <__swhatbuf_r+0x40>
 8021d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021d26:	e00e      	b.n	8021d46 <__swhatbuf_r+0x42>
 8021d28:	466a      	mov	r2, sp
 8021d2a:	f000 fd3b 	bl	80227a4 <_fstat_r>
 8021d2e:	2800      	cmp	r0, #0
 8021d30:	dbf1      	blt.n	8021d16 <__swhatbuf_r+0x12>
 8021d32:	9a01      	ldr	r2, [sp, #4]
 8021d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021d3c:	425a      	negs	r2, r3
 8021d3e:	415a      	adcs	r2, r3
 8021d40:	602a      	str	r2, [r5, #0]
 8021d42:	e7ee      	b.n	8021d22 <__swhatbuf_r+0x1e>
 8021d44:	2340      	movs	r3, #64	; 0x40
 8021d46:	2000      	movs	r0, #0
 8021d48:	6023      	str	r3, [r4, #0]
 8021d4a:	b016      	add	sp, #88	; 0x58
 8021d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08021d50 <__smakebuf_r>:
 8021d50:	898b      	ldrh	r3, [r1, #12]
 8021d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021d54:	079d      	lsls	r5, r3, #30
 8021d56:	4606      	mov	r6, r0
 8021d58:	460c      	mov	r4, r1
 8021d5a:	d507      	bpl.n	8021d6c <__smakebuf_r+0x1c>
 8021d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021d60:	6023      	str	r3, [r4, #0]
 8021d62:	6123      	str	r3, [r4, #16]
 8021d64:	2301      	movs	r3, #1
 8021d66:	6163      	str	r3, [r4, #20]
 8021d68:	b002      	add	sp, #8
 8021d6a:	bd70      	pop	{r4, r5, r6, pc}
 8021d6c:	ab01      	add	r3, sp, #4
 8021d6e:	466a      	mov	r2, sp
 8021d70:	f7ff ffc8 	bl	8021d04 <__swhatbuf_r>
 8021d74:	9900      	ldr	r1, [sp, #0]
 8021d76:	4605      	mov	r5, r0
 8021d78:	4630      	mov	r0, r6
 8021d7a:	f7ff fb4f 	bl	802141c <_malloc_r>
 8021d7e:	b948      	cbnz	r0, 8021d94 <__smakebuf_r+0x44>
 8021d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d84:	059a      	lsls	r2, r3, #22
 8021d86:	d4ef      	bmi.n	8021d68 <__smakebuf_r+0x18>
 8021d88:	f023 0303 	bic.w	r3, r3, #3
 8021d8c:	f043 0302 	orr.w	r3, r3, #2
 8021d90:	81a3      	strh	r3, [r4, #12]
 8021d92:	e7e3      	b.n	8021d5c <__smakebuf_r+0xc>
 8021d94:	4b0d      	ldr	r3, [pc, #52]	; (8021dcc <__smakebuf_r+0x7c>)
 8021d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8021d98:	89a3      	ldrh	r3, [r4, #12]
 8021d9a:	6020      	str	r0, [r4, #0]
 8021d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021da0:	81a3      	strh	r3, [r4, #12]
 8021da2:	9b00      	ldr	r3, [sp, #0]
 8021da4:	6163      	str	r3, [r4, #20]
 8021da6:	9b01      	ldr	r3, [sp, #4]
 8021da8:	6120      	str	r0, [r4, #16]
 8021daa:	b15b      	cbz	r3, 8021dc4 <__smakebuf_r+0x74>
 8021dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021db0:	4630      	mov	r0, r6
 8021db2:	f000 fd09 	bl	80227c8 <_isatty_r>
 8021db6:	b128      	cbz	r0, 8021dc4 <__smakebuf_r+0x74>
 8021db8:	89a3      	ldrh	r3, [r4, #12]
 8021dba:	f023 0303 	bic.w	r3, r3, #3
 8021dbe:	f043 0301 	orr.w	r3, r3, #1
 8021dc2:	81a3      	strh	r3, [r4, #12]
 8021dc4:	89a0      	ldrh	r0, [r4, #12]
 8021dc6:	4305      	orrs	r5, r0
 8021dc8:	81a5      	strh	r5, [r4, #12]
 8021dca:	e7cd      	b.n	8021d68 <__smakebuf_r+0x18>
 8021dcc:	08021b5d 	.word	0x08021b5d

08021dd0 <__malloc_lock>:
 8021dd0:	4801      	ldr	r0, [pc, #4]	; (8021dd8 <__malloc_lock+0x8>)
 8021dd2:	f7ff bf95 	b.w	8021d00 <__retarget_lock_acquire_recursive>
 8021dd6:	bf00      	nop
 8021dd8:	200003ac 	.word	0x200003ac

08021ddc <__malloc_unlock>:
 8021ddc:	4801      	ldr	r0, [pc, #4]	; (8021de4 <__malloc_unlock+0x8>)
 8021dde:	f7ff bf90 	b.w	8021d02 <__retarget_lock_release_recursive>
 8021de2:	bf00      	nop
 8021de4:	200003ac 	.word	0x200003ac

08021de8 <_realloc_r>:
 8021de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021dec:	4680      	mov	r8, r0
 8021dee:	4614      	mov	r4, r2
 8021df0:	460e      	mov	r6, r1
 8021df2:	b921      	cbnz	r1, 8021dfe <_realloc_r+0x16>
 8021df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021df8:	4611      	mov	r1, r2
 8021dfa:	f7ff bb0f 	b.w	802141c <_malloc_r>
 8021dfe:	b92a      	cbnz	r2, 8021e0c <_realloc_r+0x24>
 8021e00:	f7ff faa0 	bl	8021344 <_free_r>
 8021e04:	4625      	mov	r5, r4
 8021e06:	4628      	mov	r0, r5
 8021e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e0c:	f000 fcfe 	bl	802280c <_malloc_usable_size_r>
 8021e10:	4284      	cmp	r4, r0
 8021e12:	4607      	mov	r7, r0
 8021e14:	d802      	bhi.n	8021e1c <_realloc_r+0x34>
 8021e16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021e1a:	d812      	bhi.n	8021e42 <_realloc_r+0x5a>
 8021e1c:	4621      	mov	r1, r4
 8021e1e:	4640      	mov	r0, r8
 8021e20:	f7ff fafc 	bl	802141c <_malloc_r>
 8021e24:	4605      	mov	r5, r0
 8021e26:	2800      	cmp	r0, #0
 8021e28:	d0ed      	beq.n	8021e06 <_realloc_r+0x1e>
 8021e2a:	42bc      	cmp	r4, r7
 8021e2c:	4622      	mov	r2, r4
 8021e2e:	4631      	mov	r1, r6
 8021e30:	bf28      	it	cs
 8021e32:	463a      	movcs	r2, r7
 8021e34:	f7ff fa56 	bl	80212e4 <memcpy>
 8021e38:	4631      	mov	r1, r6
 8021e3a:	4640      	mov	r0, r8
 8021e3c:	f7ff fa82 	bl	8021344 <_free_r>
 8021e40:	e7e1      	b.n	8021e06 <_realloc_r+0x1e>
 8021e42:	4635      	mov	r5, r6
 8021e44:	e7df      	b.n	8021e06 <_realloc_r+0x1e>

08021e46 <__ssputs_r>:
 8021e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e4a:	688e      	ldr	r6, [r1, #8]
 8021e4c:	429e      	cmp	r6, r3
 8021e4e:	4682      	mov	sl, r0
 8021e50:	460c      	mov	r4, r1
 8021e52:	4690      	mov	r8, r2
 8021e54:	461f      	mov	r7, r3
 8021e56:	d838      	bhi.n	8021eca <__ssputs_r+0x84>
 8021e58:	898a      	ldrh	r2, [r1, #12]
 8021e5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021e5e:	d032      	beq.n	8021ec6 <__ssputs_r+0x80>
 8021e60:	6825      	ldr	r5, [r4, #0]
 8021e62:	6909      	ldr	r1, [r1, #16]
 8021e64:	eba5 0901 	sub.w	r9, r5, r1
 8021e68:	6965      	ldr	r5, [r4, #20]
 8021e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021e72:	3301      	adds	r3, #1
 8021e74:	444b      	add	r3, r9
 8021e76:	106d      	asrs	r5, r5, #1
 8021e78:	429d      	cmp	r5, r3
 8021e7a:	bf38      	it	cc
 8021e7c:	461d      	movcc	r5, r3
 8021e7e:	0553      	lsls	r3, r2, #21
 8021e80:	d531      	bpl.n	8021ee6 <__ssputs_r+0xa0>
 8021e82:	4629      	mov	r1, r5
 8021e84:	f7ff faca 	bl	802141c <_malloc_r>
 8021e88:	4606      	mov	r6, r0
 8021e8a:	b950      	cbnz	r0, 8021ea2 <__ssputs_r+0x5c>
 8021e8c:	230c      	movs	r3, #12
 8021e8e:	f8ca 3000 	str.w	r3, [sl]
 8021e92:	89a3      	ldrh	r3, [r4, #12]
 8021e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021e98:	81a3      	strh	r3, [r4, #12]
 8021e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8021e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ea2:	6921      	ldr	r1, [r4, #16]
 8021ea4:	464a      	mov	r2, r9
 8021ea6:	f7ff fa1d 	bl	80212e4 <memcpy>
 8021eaa:	89a3      	ldrh	r3, [r4, #12]
 8021eac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021eb4:	81a3      	strh	r3, [r4, #12]
 8021eb6:	6126      	str	r6, [r4, #16]
 8021eb8:	6165      	str	r5, [r4, #20]
 8021eba:	444e      	add	r6, r9
 8021ebc:	eba5 0509 	sub.w	r5, r5, r9
 8021ec0:	6026      	str	r6, [r4, #0]
 8021ec2:	60a5      	str	r5, [r4, #8]
 8021ec4:	463e      	mov	r6, r7
 8021ec6:	42be      	cmp	r6, r7
 8021ec8:	d900      	bls.n	8021ecc <__ssputs_r+0x86>
 8021eca:	463e      	mov	r6, r7
 8021ecc:	6820      	ldr	r0, [r4, #0]
 8021ece:	4632      	mov	r2, r6
 8021ed0:	4641      	mov	r1, r8
 8021ed2:	f7ff fa15 	bl	8021300 <memmove>
 8021ed6:	68a3      	ldr	r3, [r4, #8]
 8021ed8:	1b9b      	subs	r3, r3, r6
 8021eda:	60a3      	str	r3, [r4, #8]
 8021edc:	6823      	ldr	r3, [r4, #0]
 8021ede:	4433      	add	r3, r6
 8021ee0:	6023      	str	r3, [r4, #0]
 8021ee2:	2000      	movs	r0, #0
 8021ee4:	e7db      	b.n	8021e9e <__ssputs_r+0x58>
 8021ee6:	462a      	mov	r2, r5
 8021ee8:	f7ff ff7e 	bl	8021de8 <_realloc_r>
 8021eec:	4606      	mov	r6, r0
 8021eee:	2800      	cmp	r0, #0
 8021ef0:	d1e1      	bne.n	8021eb6 <__ssputs_r+0x70>
 8021ef2:	6921      	ldr	r1, [r4, #16]
 8021ef4:	4650      	mov	r0, sl
 8021ef6:	f7ff fa25 	bl	8021344 <_free_r>
 8021efa:	e7c7      	b.n	8021e8c <__ssputs_r+0x46>

08021efc <_svfiprintf_r>:
 8021efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f00:	4698      	mov	r8, r3
 8021f02:	898b      	ldrh	r3, [r1, #12]
 8021f04:	061b      	lsls	r3, r3, #24
 8021f06:	b09d      	sub	sp, #116	; 0x74
 8021f08:	4607      	mov	r7, r0
 8021f0a:	460d      	mov	r5, r1
 8021f0c:	4614      	mov	r4, r2
 8021f0e:	d50e      	bpl.n	8021f2e <_svfiprintf_r+0x32>
 8021f10:	690b      	ldr	r3, [r1, #16]
 8021f12:	b963      	cbnz	r3, 8021f2e <_svfiprintf_r+0x32>
 8021f14:	2140      	movs	r1, #64	; 0x40
 8021f16:	f7ff fa81 	bl	802141c <_malloc_r>
 8021f1a:	6028      	str	r0, [r5, #0]
 8021f1c:	6128      	str	r0, [r5, #16]
 8021f1e:	b920      	cbnz	r0, 8021f2a <_svfiprintf_r+0x2e>
 8021f20:	230c      	movs	r3, #12
 8021f22:	603b      	str	r3, [r7, #0]
 8021f24:	f04f 30ff 	mov.w	r0, #4294967295
 8021f28:	e0d1      	b.n	80220ce <_svfiprintf_r+0x1d2>
 8021f2a:	2340      	movs	r3, #64	; 0x40
 8021f2c:	616b      	str	r3, [r5, #20]
 8021f2e:	2300      	movs	r3, #0
 8021f30:	9309      	str	r3, [sp, #36]	; 0x24
 8021f32:	2320      	movs	r3, #32
 8021f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8021f3c:	2330      	movs	r3, #48	; 0x30
 8021f3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80220e8 <_svfiprintf_r+0x1ec>
 8021f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021f46:	f04f 0901 	mov.w	r9, #1
 8021f4a:	4623      	mov	r3, r4
 8021f4c:	469a      	mov	sl, r3
 8021f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f52:	b10a      	cbz	r2, 8021f58 <_svfiprintf_r+0x5c>
 8021f54:	2a25      	cmp	r2, #37	; 0x25
 8021f56:	d1f9      	bne.n	8021f4c <_svfiprintf_r+0x50>
 8021f58:	ebba 0b04 	subs.w	fp, sl, r4
 8021f5c:	d00b      	beq.n	8021f76 <_svfiprintf_r+0x7a>
 8021f5e:	465b      	mov	r3, fp
 8021f60:	4622      	mov	r2, r4
 8021f62:	4629      	mov	r1, r5
 8021f64:	4638      	mov	r0, r7
 8021f66:	f7ff ff6e 	bl	8021e46 <__ssputs_r>
 8021f6a:	3001      	adds	r0, #1
 8021f6c:	f000 80aa 	beq.w	80220c4 <_svfiprintf_r+0x1c8>
 8021f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f72:	445a      	add	r2, fp
 8021f74:	9209      	str	r2, [sp, #36]	; 0x24
 8021f76:	f89a 3000 	ldrb.w	r3, [sl]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	f000 80a2 	beq.w	80220c4 <_svfiprintf_r+0x1c8>
 8021f80:	2300      	movs	r3, #0
 8021f82:	f04f 32ff 	mov.w	r2, #4294967295
 8021f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f8a:	f10a 0a01 	add.w	sl, sl, #1
 8021f8e:	9304      	str	r3, [sp, #16]
 8021f90:	9307      	str	r3, [sp, #28]
 8021f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021f96:	931a      	str	r3, [sp, #104]	; 0x68
 8021f98:	4654      	mov	r4, sl
 8021f9a:	2205      	movs	r2, #5
 8021f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021fa0:	4851      	ldr	r0, [pc, #324]	; (80220e8 <_svfiprintf_r+0x1ec>)
 8021fa2:	f7de f93d 	bl	8000220 <memchr>
 8021fa6:	9a04      	ldr	r2, [sp, #16]
 8021fa8:	b9d8      	cbnz	r0, 8021fe2 <_svfiprintf_r+0xe6>
 8021faa:	06d0      	lsls	r0, r2, #27
 8021fac:	bf44      	itt	mi
 8021fae:	2320      	movmi	r3, #32
 8021fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021fb4:	0711      	lsls	r1, r2, #28
 8021fb6:	bf44      	itt	mi
 8021fb8:	232b      	movmi	r3, #43	; 0x2b
 8021fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8021fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8021fc4:	d015      	beq.n	8021ff2 <_svfiprintf_r+0xf6>
 8021fc6:	9a07      	ldr	r2, [sp, #28]
 8021fc8:	4654      	mov	r4, sl
 8021fca:	2000      	movs	r0, #0
 8021fcc:	f04f 0c0a 	mov.w	ip, #10
 8021fd0:	4621      	mov	r1, r4
 8021fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021fd6:	3b30      	subs	r3, #48	; 0x30
 8021fd8:	2b09      	cmp	r3, #9
 8021fda:	d94e      	bls.n	802207a <_svfiprintf_r+0x17e>
 8021fdc:	b1b0      	cbz	r0, 802200c <_svfiprintf_r+0x110>
 8021fde:	9207      	str	r2, [sp, #28]
 8021fe0:	e014      	b.n	802200c <_svfiprintf_r+0x110>
 8021fe2:	eba0 0308 	sub.w	r3, r0, r8
 8021fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8021fea:	4313      	orrs	r3, r2
 8021fec:	9304      	str	r3, [sp, #16]
 8021fee:	46a2      	mov	sl, r4
 8021ff0:	e7d2      	b.n	8021f98 <_svfiprintf_r+0x9c>
 8021ff2:	9b03      	ldr	r3, [sp, #12]
 8021ff4:	1d19      	adds	r1, r3, #4
 8021ff6:	681b      	ldr	r3, [r3, #0]
 8021ff8:	9103      	str	r1, [sp, #12]
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	bfbb      	ittet	lt
 8021ffe:	425b      	neglt	r3, r3
 8022000:	f042 0202 	orrlt.w	r2, r2, #2
 8022004:	9307      	strge	r3, [sp, #28]
 8022006:	9307      	strlt	r3, [sp, #28]
 8022008:	bfb8      	it	lt
 802200a:	9204      	strlt	r2, [sp, #16]
 802200c:	7823      	ldrb	r3, [r4, #0]
 802200e:	2b2e      	cmp	r3, #46	; 0x2e
 8022010:	d10c      	bne.n	802202c <_svfiprintf_r+0x130>
 8022012:	7863      	ldrb	r3, [r4, #1]
 8022014:	2b2a      	cmp	r3, #42	; 0x2a
 8022016:	d135      	bne.n	8022084 <_svfiprintf_r+0x188>
 8022018:	9b03      	ldr	r3, [sp, #12]
 802201a:	1d1a      	adds	r2, r3, #4
 802201c:	681b      	ldr	r3, [r3, #0]
 802201e:	9203      	str	r2, [sp, #12]
 8022020:	2b00      	cmp	r3, #0
 8022022:	bfb8      	it	lt
 8022024:	f04f 33ff 	movlt.w	r3, #4294967295
 8022028:	3402      	adds	r4, #2
 802202a:	9305      	str	r3, [sp, #20]
 802202c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80220f8 <_svfiprintf_r+0x1fc>
 8022030:	7821      	ldrb	r1, [r4, #0]
 8022032:	2203      	movs	r2, #3
 8022034:	4650      	mov	r0, sl
 8022036:	f7de f8f3 	bl	8000220 <memchr>
 802203a:	b140      	cbz	r0, 802204e <_svfiprintf_r+0x152>
 802203c:	2340      	movs	r3, #64	; 0x40
 802203e:	eba0 000a 	sub.w	r0, r0, sl
 8022042:	fa03 f000 	lsl.w	r0, r3, r0
 8022046:	9b04      	ldr	r3, [sp, #16]
 8022048:	4303      	orrs	r3, r0
 802204a:	3401      	adds	r4, #1
 802204c:	9304      	str	r3, [sp, #16]
 802204e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022052:	4826      	ldr	r0, [pc, #152]	; (80220ec <_svfiprintf_r+0x1f0>)
 8022054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022058:	2206      	movs	r2, #6
 802205a:	f7de f8e1 	bl	8000220 <memchr>
 802205e:	2800      	cmp	r0, #0
 8022060:	d038      	beq.n	80220d4 <_svfiprintf_r+0x1d8>
 8022062:	4b23      	ldr	r3, [pc, #140]	; (80220f0 <_svfiprintf_r+0x1f4>)
 8022064:	bb1b      	cbnz	r3, 80220ae <_svfiprintf_r+0x1b2>
 8022066:	9b03      	ldr	r3, [sp, #12]
 8022068:	3307      	adds	r3, #7
 802206a:	f023 0307 	bic.w	r3, r3, #7
 802206e:	3308      	adds	r3, #8
 8022070:	9303      	str	r3, [sp, #12]
 8022072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022074:	4433      	add	r3, r6
 8022076:	9309      	str	r3, [sp, #36]	; 0x24
 8022078:	e767      	b.n	8021f4a <_svfiprintf_r+0x4e>
 802207a:	fb0c 3202 	mla	r2, ip, r2, r3
 802207e:	460c      	mov	r4, r1
 8022080:	2001      	movs	r0, #1
 8022082:	e7a5      	b.n	8021fd0 <_svfiprintf_r+0xd4>
 8022084:	2300      	movs	r3, #0
 8022086:	3401      	adds	r4, #1
 8022088:	9305      	str	r3, [sp, #20]
 802208a:	4619      	mov	r1, r3
 802208c:	f04f 0c0a 	mov.w	ip, #10
 8022090:	4620      	mov	r0, r4
 8022092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022096:	3a30      	subs	r2, #48	; 0x30
 8022098:	2a09      	cmp	r2, #9
 802209a:	d903      	bls.n	80220a4 <_svfiprintf_r+0x1a8>
 802209c:	2b00      	cmp	r3, #0
 802209e:	d0c5      	beq.n	802202c <_svfiprintf_r+0x130>
 80220a0:	9105      	str	r1, [sp, #20]
 80220a2:	e7c3      	b.n	802202c <_svfiprintf_r+0x130>
 80220a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80220a8:	4604      	mov	r4, r0
 80220aa:	2301      	movs	r3, #1
 80220ac:	e7f0      	b.n	8022090 <_svfiprintf_r+0x194>
 80220ae:	ab03      	add	r3, sp, #12
 80220b0:	9300      	str	r3, [sp, #0]
 80220b2:	462a      	mov	r2, r5
 80220b4:	4b0f      	ldr	r3, [pc, #60]	; (80220f4 <_svfiprintf_r+0x1f8>)
 80220b6:	a904      	add	r1, sp, #16
 80220b8:	4638      	mov	r0, r7
 80220ba:	f3af 8000 	nop.w
 80220be:	1c42      	adds	r2, r0, #1
 80220c0:	4606      	mov	r6, r0
 80220c2:	d1d6      	bne.n	8022072 <_svfiprintf_r+0x176>
 80220c4:	89ab      	ldrh	r3, [r5, #12]
 80220c6:	065b      	lsls	r3, r3, #25
 80220c8:	f53f af2c 	bmi.w	8021f24 <_svfiprintf_r+0x28>
 80220cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80220ce:	b01d      	add	sp, #116	; 0x74
 80220d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220d4:	ab03      	add	r3, sp, #12
 80220d6:	9300      	str	r3, [sp, #0]
 80220d8:	462a      	mov	r2, r5
 80220da:	4b06      	ldr	r3, [pc, #24]	; (80220f4 <_svfiprintf_r+0x1f8>)
 80220dc:	a904      	add	r1, sp, #16
 80220de:	4638      	mov	r0, r7
 80220e0:	f000 f9d4 	bl	802248c <_printf_i>
 80220e4:	e7eb      	b.n	80220be <_svfiprintf_r+0x1c2>
 80220e6:	bf00      	nop
 80220e8:	0802c374 	.word	0x0802c374
 80220ec:	0802c37e 	.word	0x0802c37e
 80220f0:	00000000 	.word	0x00000000
 80220f4:	08021e47 	.word	0x08021e47
 80220f8:	0802c37a 	.word	0x0802c37a

080220fc <__sfputc_r>:
 80220fc:	6893      	ldr	r3, [r2, #8]
 80220fe:	3b01      	subs	r3, #1
 8022100:	2b00      	cmp	r3, #0
 8022102:	b410      	push	{r4}
 8022104:	6093      	str	r3, [r2, #8]
 8022106:	da08      	bge.n	802211a <__sfputc_r+0x1e>
 8022108:	6994      	ldr	r4, [r2, #24]
 802210a:	42a3      	cmp	r3, r4
 802210c:	db01      	blt.n	8022112 <__sfputc_r+0x16>
 802210e:	290a      	cmp	r1, #10
 8022110:	d103      	bne.n	802211a <__sfputc_r+0x1e>
 8022112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022116:	f7ff bb7b 	b.w	8021810 <__swbuf_r>
 802211a:	6813      	ldr	r3, [r2, #0]
 802211c:	1c58      	adds	r0, r3, #1
 802211e:	6010      	str	r0, [r2, #0]
 8022120:	7019      	strb	r1, [r3, #0]
 8022122:	4608      	mov	r0, r1
 8022124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022128:	4770      	bx	lr

0802212a <__sfputs_r>:
 802212a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802212c:	4606      	mov	r6, r0
 802212e:	460f      	mov	r7, r1
 8022130:	4614      	mov	r4, r2
 8022132:	18d5      	adds	r5, r2, r3
 8022134:	42ac      	cmp	r4, r5
 8022136:	d101      	bne.n	802213c <__sfputs_r+0x12>
 8022138:	2000      	movs	r0, #0
 802213a:	e007      	b.n	802214c <__sfputs_r+0x22>
 802213c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022140:	463a      	mov	r2, r7
 8022142:	4630      	mov	r0, r6
 8022144:	f7ff ffda 	bl	80220fc <__sfputc_r>
 8022148:	1c43      	adds	r3, r0, #1
 802214a:	d1f3      	bne.n	8022134 <__sfputs_r+0xa>
 802214c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022150 <_vfiprintf_r>:
 8022150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022154:	460d      	mov	r5, r1
 8022156:	b09d      	sub	sp, #116	; 0x74
 8022158:	4614      	mov	r4, r2
 802215a:	4698      	mov	r8, r3
 802215c:	4606      	mov	r6, r0
 802215e:	b118      	cbz	r0, 8022168 <_vfiprintf_r+0x18>
 8022160:	6983      	ldr	r3, [r0, #24]
 8022162:	b90b      	cbnz	r3, 8022168 <_vfiprintf_r+0x18>
 8022164:	f7ff fd2e 	bl	8021bc4 <__sinit>
 8022168:	4b89      	ldr	r3, [pc, #548]	; (8022390 <_vfiprintf_r+0x240>)
 802216a:	429d      	cmp	r5, r3
 802216c:	d11b      	bne.n	80221a6 <_vfiprintf_r+0x56>
 802216e:	6875      	ldr	r5, [r6, #4]
 8022170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022172:	07d9      	lsls	r1, r3, #31
 8022174:	d405      	bmi.n	8022182 <_vfiprintf_r+0x32>
 8022176:	89ab      	ldrh	r3, [r5, #12]
 8022178:	059a      	lsls	r2, r3, #22
 802217a:	d402      	bmi.n	8022182 <_vfiprintf_r+0x32>
 802217c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802217e:	f7ff fdbf 	bl	8021d00 <__retarget_lock_acquire_recursive>
 8022182:	89ab      	ldrh	r3, [r5, #12]
 8022184:	071b      	lsls	r3, r3, #28
 8022186:	d501      	bpl.n	802218c <_vfiprintf_r+0x3c>
 8022188:	692b      	ldr	r3, [r5, #16]
 802218a:	b9eb      	cbnz	r3, 80221c8 <_vfiprintf_r+0x78>
 802218c:	4629      	mov	r1, r5
 802218e:	4630      	mov	r0, r6
 8022190:	f7ff fb90 	bl	80218b4 <__swsetup_r>
 8022194:	b1c0      	cbz	r0, 80221c8 <_vfiprintf_r+0x78>
 8022196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022198:	07dc      	lsls	r4, r3, #31
 802219a:	d50e      	bpl.n	80221ba <_vfiprintf_r+0x6a>
 802219c:	f04f 30ff 	mov.w	r0, #4294967295
 80221a0:	b01d      	add	sp, #116	; 0x74
 80221a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221a6:	4b7b      	ldr	r3, [pc, #492]	; (8022394 <_vfiprintf_r+0x244>)
 80221a8:	429d      	cmp	r5, r3
 80221aa:	d101      	bne.n	80221b0 <_vfiprintf_r+0x60>
 80221ac:	68b5      	ldr	r5, [r6, #8]
 80221ae:	e7df      	b.n	8022170 <_vfiprintf_r+0x20>
 80221b0:	4b79      	ldr	r3, [pc, #484]	; (8022398 <_vfiprintf_r+0x248>)
 80221b2:	429d      	cmp	r5, r3
 80221b4:	bf08      	it	eq
 80221b6:	68f5      	ldreq	r5, [r6, #12]
 80221b8:	e7da      	b.n	8022170 <_vfiprintf_r+0x20>
 80221ba:	89ab      	ldrh	r3, [r5, #12]
 80221bc:	0598      	lsls	r0, r3, #22
 80221be:	d4ed      	bmi.n	802219c <_vfiprintf_r+0x4c>
 80221c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80221c2:	f7ff fd9e 	bl	8021d02 <__retarget_lock_release_recursive>
 80221c6:	e7e9      	b.n	802219c <_vfiprintf_r+0x4c>
 80221c8:	2300      	movs	r3, #0
 80221ca:	9309      	str	r3, [sp, #36]	; 0x24
 80221cc:	2320      	movs	r3, #32
 80221ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80221d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80221d6:	2330      	movs	r3, #48	; 0x30
 80221d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802239c <_vfiprintf_r+0x24c>
 80221dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80221e0:	f04f 0901 	mov.w	r9, #1
 80221e4:	4623      	mov	r3, r4
 80221e6:	469a      	mov	sl, r3
 80221e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80221ec:	b10a      	cbz	r2, 80221f2 <_vfiprintf_r+0xa2>
 80221ee:	2a25      	cmp	r2, #37	; 0x25
 80221f0:	d1f9      	bne.n	80221e6 <_vfiprintf_r+0x96>
 80221f2:	ebba 0b04 	subs.w	fp, sl, r4
 80221f6:	d00b      	beq.n	8022210 <_vfiprintf_r+0xc0>
 80221f8:	465b      	mov	r3, fp
 80221fa:	4622      	mov	r2, r4
 80221fc:	4629      	mov	r1, r5
 80221fe:	4630      	mov	r0, r6
 8022200:	f7ff ff93 	bl	802212a <__sfputs_r>
 8022204:	3001      	adds	r0, #1
 8022206:	f000 80aa 	beq.w	802235e <_vfiprintf_r+0x20e>
 802220a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802220c:	445a      	add	r2, fp
 802220e:	9209      	str	r2, [sp, #36]	; 0x24
 8022210:	f89a 3000 	ldrb.w	r3, [sl]
 8022214:	2b00      	cmp	r3, #0
 8022216:	f000 80a2 	beq.w	802235e <_vfiprintf_r+0x20e>
 802221a:	2300      	movs	r3, #0
 802221c:	f04f 32ff 	mov.w	r2, #4294967295
 8022220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022224:	f10a 0a01 	add.w	sl, sl, #1
 8022228:	9304      	str	r3, [sp, #16]
 802222a:	9307      	str	r3, [sp, #28]
 802222c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022230:	931a      	str	r3, [sp, #104]	; 0x68
 8022232:	4654      	mov	r4, sl
 8022234:	2205      	movs	r2, #5
 8022236:	f814 1b01 	ldrb.w	r1, [r4], #1
 802223a:	4858      	ldr	r0, [pc, #352]	; (802239c <_vfiprintf_r+0x24c>)
 802223c:	f7dd fff0 	bl	8000220 <memchr>
 8022240:	9a04      	ldr	r2, [sp, #16]
 8022242:	b9d8      	cbnz	r0, 802227c <_vfiprintf_r+0x12c>
 8022244:	06d1      	lsls	r1, r2, #27
 8022246:	bf44      	itt	mi
 8022248:	2320      	movmi	r3, #32
 802224a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802224e:	0713      	lsls	r3, r2, #28
 8022250:	bf44      	itt	mi
 8022252:	232b      	movmi	r3, #43	; 0x2b
 8022254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022258:	f89a 3000 	ldrb.w	r3, [sl]
 802225c:	2b2a      	cmp	r3, #42	; 0x2a
 802225e:	d015      	beq.n	802228c <_vfiprintf_r+0x13c>
 8022260:	9a07      	ldr	r2, [sp, #28]
 8022262:	4654      	mov	r4, sl
 8022264:	2000      	movs	r0, #0
 8022266:	f04f 0c0a 	mov.w	ip, #10
 802226a:	4621      	mov	r1, r4
 802226c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022270:	3b30      	subs	r3, #48	; 0x30
 8022272:	2b09      	cmp	r3, #9
 8022274:	d94e      	bls.n	8022314 <_vfiprintf_r+0x1c4>
 8022276:	b1b0      	cbz	r0, 80222a6 <_vfiprintf_r+0x156>
 8022278:	9207      	str	r2, [sp, #28]
 802227a:	e014      	b.n	80222a6 <_vfiprintf_r+0x156>
 802227c:	eba0 0308 	sub.w	r3, r0, r8
 8022280:	fa09 f303 	lsl.w	r3, r9, r3
 8022284:	4313      	orrs	r3, r2
 8022286:	9304      	str	r3, [sp, #16]
 8022288:	46a2      	mov	sl, r4
 802228a:	e7d2      	b.n	8022232 <_vfiprintf_r+0xe2>
 802228c:	9b03      	ldr	r3, [sp, #12]
 802228e:	1d19      	adds	r1, r3, #4
 8022290:	681b      	ldr	r3, [r3, #0]
 8022292:	9103      	str	r1, [sp, #12]
 8022294:	2b00      	cmp	r3, #0
 8022296:	bfbb      	ittet	lt
 8022298:	425b      	neglt	r3, r3
 802229a:	f042 0202 	orrlt.w	r2, r2, #2
 802229e:	9307      	strge	r3, [sp, #28]
 80222a0:	9307      	strlt	r3, [sp, #28]
 80222a2:	bfb8      	it	lt
 80222a4:	9204      	strlt	r2, [sp, #16]
 80222a6:	7823      	ldrb	r3, [r4, #0]
 80222a8:	2b2e      	cmp	r3, #46	; 0x2e
 80222aa:	d10c      	bne.n	80222c6 <_vfiprintf_r+0x176>
 80222ac:	7863      	ldrb	r3, [r4, #1]
 80222ae:	2b2a      	cmp	r3, #42	; 0x2a
 80222b0:	d135      	bne.n	802231e <_vfiprintf_r+0x1ce>
 80222b2:	9b03      	ldr	r3, [sp, #12]
 80222b4:	1d1a      	adds	r2, r3, #4
 80222b6:	681b      	ldr	r3, [r3, #0]
 80222b8:	9203      	str	r2, [sp, #12]
 80222ba:	2b00      	cmp	r3, #0
 80222bc:	bfb8      	it	lt
 80222be:	f04f 33ff 	movlt.w	r3, #4294967295
 80222c2:	3402      	adds	r4, #2
 80222c4:	9305      	str	r3, [sp, #20]
 80222c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80223ac <_vfiprintf_r+0x25c>
 80222ca:	7821      	ldrb	r1, [r4, #0]
 80222cc:	2203      	movs	r2, #3
 80222ce:	4650      	mov	r0, sl
 80222d0:	f7dd ffa6 	bl	8000220 <memchr>
 80222d4:	b140      	cbz	r0, 80222e8 <_vfiprintf_r+0x198>
 80222d6:	2340      	movs	r3, #64	; 0x40
 80222d8:	eba0 000a 	sub.w	r0, r0, sl
 80222dc:	fa03 f000 	lsl.w	r0, r3, r0
 80222e0:	9b04      	ldr	r3, [sp, #16]
 80222e2:	4303      	orrs	r3, r0
 80222e4:	3401      	adds	r4, #1
 80222e6:	9304      	str	r3, [sp, #16]
 80222e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80222ec:	482c      	ldr	r0, [pc, #176]	; (80223a0 <_vfiprintf_r+0x250>)
 80222ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80222f2:	2206      	movs	r2, #6
 80222f4:	f7dd ff94 	bl	8000220 <memchr>
 80222f8:	2800      	cmp	r0, #0
 80222fa:	d03f      	beq.n	802237c <_vfiprintf_r+0x22c>
 80222fc:	4b29      	ldr	r3, [pc, #164]	; (80223a4 <_vfiprintf_r+0x254>)
 80222fe:	bb1b      	cbnz	r3, 8022348 <_vfiprintf_r+0x1f8>
 8022300:	9b03      	ldr	r3, [sp, #12]
 8022302:	3307      	adds	r3, #7
 8022304:	f023 0307 	bic.w	r3, r3, #7
 8022308:	3308      	adds	r3, #8
 802230a:	9303      	str	r3, [sp, #12]
 802230c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802230e:	443b      	add	r3, r7
 8022310:	9309      	str	r3, [sp, #36]	; 0x24
 8022312:	e767      	b.n	80221e4 <_vfiprintf_r+0x94>
 8022314:	fb0c 3202 	mla	r2, ip, r2, r3
 8022318:	460c      	mov	r4, r1
 802231a:	2001      	movs	r0, #1
 802231c:	e7a5      	b.n	802226a <_vfiprintf_r+0x11a>
 802231e:	2300      	movs	r3, #0
 8022320:	3401      	adds	r4, #1
 8022322:	9305      	str	r3, [sp, #20]
 8022324:	4619      	mov	r1, r3
 8022326:	f04f 0c0a 	mov.w	ip, #10
 802232a:	4620      	mov	r0, r4
 802232c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022330:	3a30      	subs	r2, #48	; 0x30
 8022332:	2a09      	cmp	r2, #9
 8022334:	d903      	bls.n	802233e <_vfiprintf_r+0x1ee>
 8022336:	2b00      	cmp	r3, #0
 8022338:	d0c5      	beq.n	80222c6 <_vfiprintf_r+0x176>
 802233a:	9105      	str	r1, [sp, #20]
 802233c:	e7c3      	b.n	80222c6 <_vfiprintf_r+0x176>
 802233e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022342:	4604      	mov	r4, r0
 8022344:	2301      	movs	r3, #1
 8022346:	e7f0      	b.n	802232a <_vfiprintf_r+0x1da>
 8022348:	ab03      	add	r3, sp, #12
 802234a:	9300      	str	r3, [sp, #0]
 802234c:	462a      	mov	r2, r5
 802234e:	4b16      	ldr	r3, [pc, #88]	; (80223a8 <_vfiprintf_r+0x258>)
 8022350:	a904      	add	r1, sp, #16
 8022352:	4630      	mov	r0, r6
 8022354:	f3af 8000 	nop.w
 8022358:	4607      	mov	r7, r0
 802235a:	1c78      	adds	r0, r7, #1
 802235c:	d1d6      	bne.n	802230c <_vfiprintf_r+0x1bc>
 802235e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022360:	07d9      	lsls	r1, r3, #31
 8022362:	d405      	bmi.n	8022370 <_vfiprintf_r+0x220>
 8022364:	89ab      	ldrh	r3, [r5, #12]
 8022366:	059a      	lsls	r2, r3, #22
 8022368:	d402      	bmi.n	8022370 <_vfiprintf_r+0x220>
 802236a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802236c:	f7ff fcc9 	bl	8021d02 <__retarget_lock_release_recursive>
 8022370:	89ab      	ldrh	r3, [r5, #12]
 8022372:	065b      	lsls	r3, r3, #25
 8022374:	f53f af12 	bmi.w	802219c <_vfiprintf_r+0x4c>
 8022378:	9809      	ldr	r0, [sp, #36]	; 0x24
 802237a:	e711      	b.n	80221a0 <_vfiprintf_r+0x50>
 802237c:	ab03      	add	r3, sp, #12
 802237e:	9300      	str	r3, [sp, #0]
 8022380:	462a      	mov	r2, r5
 8022382:	4b09      	ldr	r3, [pc, #36]	; (80223a8 <_vfiprintf_r+0x258>)
 8022384:	a904      	add	r1, sp, #16
 8022386:	4630      	mov	r0, r6
 8022388:	f000 f880 	bl	802248c <_printf_i>
 802238c:	e7e4      	b.n	8022358 <_vfiprintf_r+0x208>
 802238e:	bf00      	nop
 8022390:	0802c334 	.word	0x0802c334
 8022394:	0802c354 	.word	0x0802c354
 8022398:	0802c314 	.word	0x0802c314
 802239c:	0802c374 	.word	0x0802c374
 80223a0:	0802c37e 	.word	0x0802c37e
 80223a4:	00000000 	.word	0x00000000
 80223a8:	0802212b 	.word	0x0802212b
 80223ac:	0802c37a 	.word	0x0802c37a

080223b0 <_printf_common>:
 80223b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223b4:	4616      	mov	r6, r2
 80223b6:	4699      	mov	r9, r3
 80223b8:	688a      	ldr	r2, [r1, #8]
 80223ba:	690b      	ldr	r3, [r1, #16]
 80223bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80223c0:	4293      	cmp	r3, r2
 80223c2:	bfb8      	it	lt
 80223c4:	4613      	movlt	r3, r2
 80223c6:	6033      	str	r3, [r6, #0]
 80223c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80223cc:	4607      	mov	r7, r0
 80223ce:	460c      	mov	r4, r1
 80223d0:	b10a      	cbz	r2, 80223d6 <_printf_common+0x26>
 80223d2:	3301      	adds	r3, #1
 80223d4:	6033      	str	r3, [r6, #0]
 80223d6:	6823      	ldr	r3, [r4, #0]
 80223d8:	0699      	lsls	r1, r3, #26
 80223da:	bf42      	ittt	mi
 80223dc:	6833      	ldrmi	r3, [r6, #0]
 80223de:	3302      	addmi	r3, #2
 80223e0:	6033      	strmi	r3, [r6, #0]
 80223e2:	6825      	ldr	r5, [r4, #0]
 80223e4:	f015 0506 	ands.w	r5, r5, #6
 80223e8:	d106      	bne.n	80223f8 <_printf_common+0x48>
 80223ea:	f104 0a19 	add.w	sl, r4, #25
 80223ee:	68e3      	ldr	r3, [r4, #12]
 80223f0:	6832      	ldr	r2, [r6, #0]
 80223f2:	1a9b      	subs	r3, r3, r2
 80223f4:	42ab      	cmp	r3, r5
 80223f6:	dc26      	bgt.n	8022446 <_printf_common+0x96>
 80223f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80223fc:	1e13      	subs	r3, r2, #0
 80223fe:	6822      	ldr	r2, [r4, #0]
 8022400:	bf18      	it	ne
 8022402:	2301      	movne	r3, #1
 8022404:	0692      	lsls	r2, r2, #26
 8022406:	d42b      	bmi.n	8022460 <_printf_common+0xb0>
 8022408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802240c:	4649      	mov	r1, r9
 802240e:	4638      	mov	r0, r7
 8022410:	47c0      	blx	r8
 8022412:	3001      	adds	r0, #1
 8022414:	d01e      	beq.n	8022454 <_printf_common+0xa4>
 8022416:	6823      	ldr	r3, [r4, #0]
 8022418:	68e5      	ldr	r5, [r4, #12]
 802241a:	6832      	ldr	r2, [r6, #0]
 802241c:	f003 0306 	and.w	r3, r3, #6
 8022420:	2b04      	cmp	r3, #4
 8022422:	bf08      	it	eq
 8022424:	1aad      	subeq	r5, r5, r2
 8022426:	68a3      	ldr	r3, [r4, #8]
 8022428:	6922      	ldr	r2, [r4, #16]
 802242a:	bf0c      	ite	eq
 802242c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022430:	2500      	movne	r5, #0
 8022432:	4293      	cmp	r3, r2
 8022434:	bfc4      	itt	gt
 8022436:	1a9b      	subgt	r3, r3, r2
 8022438:	18ed      	addgt	r5, r5, r3
 802243a:	2600      	movs	r6, #0
 802243c:	341a      	adds	r4, #26
 802243e:	42b5      	cmp	r5, r6
 8022440:	d11a      	bne.n	8022478 <_printf_common+0xc8>
 8022442:	2000      	movs	r0, #0
 8022444:	e008      	b.n	8022458 <_printf_common+0xa8>
 8022446:	2301      	movs	r3, #1
 8022448:	4652      	mov	r2, sl
 802244a:	4649      	mov	r1, r9
 802244c:	4638      	mov	r0, r7
 802244e:	47c0      	blx	r8
 8022450:	3001      	adds	r0, #1
 8022452:	d103      	bne.n	802245c <_printf_common+0xac>
 8022454:	f04f 30ff 	mov.w	r0, #4294967295
 8022458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802245c:	3501      	adds	r5, #1
 802245e:	e7c6      	b.n	80223ee <_printf_common+0x3e>
 8022460:	18e1      	adds	r1, r4, r3
 8022462:	1c5a      	adds	r2, r3, #1
 8022464:	2030      	movs	r0, #48	; 0x30
 8022466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802246a:	4422      	add	r2, r4
 802246c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022474:	3302      	adds	r3, #2
 8022476:	e7c7      	b.n	8022408 <_printf_common+0x58>
 8022478:	2301      	movs	r3, #1
 802247a:	4622      	mov	r2, r4
 802247c:	4649      	mov	r1, r9
 802247e:	4638      	mov	r0, r7
 8022480:	47c0      	blx	r8
 8022482:	3001      	adds	r0, #1
 8022484:	d0e6      	beq.n	8022454 <_printf_common+0xa4>
 8022486:	3601      	adds	r6, #1
 8022488:	e7d9      	b.n	802243e <_printf_common+0x8e>
	...

0802248c <_printf_i>:
 802248c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022490:	7e0f      	ldrb	r7, [r1, #24]
 8022492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022494:	2f78      	cmp	r7, #120	; 0x78
 8022496:	4691      	mov	r9, r2
 8022498:	4680      	mov	r8, r0
 802249a:	460c      	mov	r4, r1
 802249c:	469a      	mov	sl, r3
 802249e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80224a2:	d807      	bhi.n	80224b4 <_printf_i+0x28>
 80224a4:	2f62      	cmp	r7, #98	; 0x62
 80224a6:	d80a      	bhi.n	80224be <_printf_i+0x32>
 80224a8:	2f00      	cmp	r7, #0
 80224aa:	f000 80d8 	beq.w	802265e <_printf_i+0x1d2>
 80224ae:	2f58      	cmp	r7, #88	; 0x58
 80224b0:	f000 80a3 	beq.w	80225fa <_printf_i+0x16e>
 80224b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80224b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80224bc:	e03a      	b.n	8022534 <_printf_i+0xa8>
 80224be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80224c2:	2b15      	cmp	r3, #21
 80224c4:	d8f6      	bhi.n	80224b4 <_printf_i+0x28>
 80224c6:	a101      	add	r1, pc, #4	; (adr r1, 80224cc <_printf_i+0x40>)
 80224c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80224cc:	08022525 	.word	0x08022525
 80224d0:	08022539 	.word	0x08022539
 80224d4:	080224b5 	.word	0x080224b5
 80224d8:	080224b5 	.word	0x080224b5
 80224dc:	080224b5 	.word	0x080224b5
 80224e0:	080224b5 	.word	0x080224b5
 80224e4:	08022539 	.word	0x08022539
 80224e8:	080224b5 	.word	0x080224b5
 80224ec:	080224b5 	.word	0x080224b5
 80224f0:	080224b5 	.word	0x080224b5
 80224f4:	080224b5 	.word	0x080224b5
 80224f8:	08022645 	.word	0x08022645
 80224fc:	08022569 	.word	0x08022569
 8022500:	08022627 	.word	0x08022627
 8022504:	080224b5 	.word	0x080224b5
 8022508:	080224b5 	.word	0x080224b5
 802250c:	08022667 	.word	0x08022667
 8022510:	080224b5 	.word	0x080224b5
 8022514:	08022569 	.word	0x08022569
 8022518:	080224b5 	.word	0x080224b5
 802251c:	080224b5 	.word	0x080224b5
 8022520:	0802262f 	.word	0x0802262f
 8022524:	682b      	ldr	r3, [r5, #0]
 8022526:	1d1a      	adds	r2, r3, #4
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	602a      	str	r2, [r5, #0]
 802252c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022534:	2301      	movs	r3, #1
 8022536:	e0a3      	b.n	8022680 <_printf_i+0x1f4>
 8022538:	6820      	ldr	r0, [r4, #0]
 802253a:	6829      	ldr	r1, [r5, #0]
 802253c:	0606      	lsls	r6, r0, #24
 802253e:	f101 0304 	add.w	r3, r1, #4
 8022542:	d50a      	bpl.n	802255a <_printf_i+0xce>
 8022544:	680e      	ldr	r6, [r1, #0]
 8022546:	602b      	str	r3, [r5, #0]
 8022548:	2e00      	cmp	r6, #0
 802254a:	da03      	bge.n	8022554 <_printf_i+0xc8>
 802254c:	232d      	movs	r3, #45	; 0x2d
 802254e:	4276      	negs	r6, r6
 8022550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022554:	485e      	ldr	r0, [pc, #376]	; (80226d0 <_printf_i+0x244>)
 8022556:	230a      	movs	r3, #10
 8022558:	e019      	b.n	802258e <_printf_i+0x102>
 802255a:	680e      	ldr	r6, [r1, #0]
 802255c:	602b      	str	r3, [r5, #0]
 802255e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022562:	bf18      	it	ne
 8022564:	b236      	sxthne	r6, r6
 8022566:	e7ef      	b.n	8022548 <_printf_i+0xbc>
 8022568:	682b      	ldr	r3, [r5, #0]
 802256a:	6820      	ldr	r0, [r4, #0]
 802256c:	1d19      	adds	r1, r3, #4
 802256e:	6029      	str	r1, [r5, #0]
 8022570:	0601      	lsls	r1, r0, #24
 8022572:	d501      	bpl.n	8022578 <_printf_i+0xec>
 8022574:	681e      	ldr	r6, [r3, #0]
 8022576:	e002      	b.n	802257e <_printf_i+0xf2>
 8022578:	0646      	lsls	r6, r0, #25
 802257a:	d5fb      	bpl.n	8022574 <_printf_i+0xe8>
 802257c:	881e      	ldrh	r6, [r3, #0]
 802257e:	4854      	ldr	r0, [pc, #336]	; (80226d0 <_printf_i+0x244>)
 8022580:	2f6f      	cmp	r7, #111	; 0x6f
 8022582:	bf0c      	ite	eq
 8022584:	2308      	moveq	r3, #8
 8022586:	230a      	movne	r3, #10
 8022588:	2100      	movs	r1, #0
 802258a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802258e:	6865      	ldr	r5, [r4, #4]
 8022590:	60a5      	str	r5, [r4, #8]
 8022592:	2d00      	cmp	r5, #0
 8022594:	bfa2      	ittt	ge
 8022596:	6821      	ldrge	r1, [r4, #0]
 8022598:	f021 0104 	bicge.w	r1, r1, #4
 802259c:	6021      	strge	r1, [r4, #0]
 802259e:	b90e      	cbnz	r6, 80225a4 <_printf_i+0x118>
 80225a0:	2d00      	cmp	r5, #0
 80225a2:	d04d      	beq.n	8022640 <_printf_i+0x1b4>
 80225a4:	4615      	mov	r5, r2
 80225a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80225aa:	fb03 6711 	mls	r7, r3, r1, r6
 80225ae:	5dc7      	ldrb	r7, [r0, r7]
 80225b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80225b4:	4637      	mov	r7, r6
 80225b6:	42bb      	cmp	r3, r7
 80225b8:	460e      	mov	r6, r1
 80225ba:	d9f4      	bls.n	80225a6 <_printf_i+0x11a>
 80225bc:	2b08      	cmp	r3, #8
 80225be:	d10b      	bne.n	80225d8 <_printf_i+0x14c>
 80225c0:	6823      	ldr	r3, [r4, #0]
 80225c2:	07de      	lsls	r6, r3, #31
 80225c4:	d508      	bpl.n	80225d8 <_printf_i+0x14c>
 80225c6:	6923      	ldr	r3, [r4, #16]
 80225c8:	6861      	ldr	r1, [r4, #4]
 80225ca:	4299      	cmp	r1, r3
 80225cc:	bfde      	ittt	le
 80225ce:	2330      	movle	r3, #48	; 0x30
 80225d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80225d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80225d8:	1b52      	subs	r2, r2, r5
 80225da:	6122      	str	r2, [r4, #16]
 80225dc:	f8cd a000 	str.w	sl, [sp]
 80225e0:	464b      	mov	r3, r9
 80225e2:	aa03      	add	r2, sp, #12
 80225e4:	4621      	mov	r1, r4
 80225e6:	4640      	mov	r0, r8
 80225e8:	f7ff fee2 	bl	80223b0 <_printf_common>
 80225ec:	3001      	adds	r0, #1
 80225ee:	d14c      	bne.n	802268a <_printf_i+0x1fe>
 80225f0:	f04f 30ff 	mov.w	r0, #4294967295
 80225f4:	b004      	add	sp, #16
 80225f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225fa:	4835      	ldr	r0, [pc, #212]	; (80226d0 <_printf_i+0x244>)
 80225fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022600:	6829      	ldr	r1, [r5, #0]
 8022602:	6823      	ldr	r3, [r4, #0]
 8022604:	f851 6b04 	ldr.w	r6, [r1], #4
 8022608:	6029      	str	r1, [r5, #0]
 802260a:	061d      	lsls	r5, r3, #24
 802260c:	d514      	bpl.n	8022638 <_printf_i+0x1ac>
 802260e:	07df      	lsls	r7, r3, #31
 8022610:	bf44      	itt	mi
 8022612:	f043 0320 	orrmi.w	r3, r3, #32
 8022616:	6023      	strmi	r3, [r4, #0]
 8022618:	b91e      	cbnz	r6, 8022622 <_printf_i+0x196>
 802261a:	6823      	ldr	r3, [r4, #0]
 802261c:	f023 0320 	bic.w	r3, r3, #32
 8022620:	6023      	str	r3, [r4, #0]
 8022622:	2310      	movs	r3, #16
 8022624:	e7b0      	b.n	8022588 <_printf_i+0xfc>
 8022626:	6823      	ldr	r3, [r4, #0]
 8022628:	f043 0320 	orr.w	r3, r3, #32
 802262c:	6023      	str	r3, [r4, #0]
 802262e:	2378      	movs	r3, #120	; 0x78
 8022630:	4828      	ldr	r0, [pc, #160]	; (80226d4 <_printf_i+0x248>)
 8022632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022636:	e7e3      	b.n	8022600 <_printf_i+0x174>
 8022638:	0659      	lsls	r1, r3, #25
 802263a:	bf48      	it	mi
 802263c:	b2b6      	uxthmi	r6, r6
 802263e:	e7e6      	b.n	802260e <_printf_i+0x182>
 8022640:	4615      	mov	r5, r2
 8022642:	e7bb      	b.n	80225bc <_printf_i+0x130>
 8022644:	682b      	ldr	r3, [r5, #0]
 8022646:	6826      	ldr	r6, [r4, #0]
 8022648:	6961      	ldr	r1, [r4, #20]
 802264a:	1d18      	adds	r0, r3, #4
 802264c:	6028      	str	r0, [r5, #0]
 802264e:	0635      	lsls	r5, r6, #24
 8022650:	681b      	ldr	r3, [r3, #0]
 8022652:	d501      	bpl.n	8022658 <_printf_i+0x1cc>
 8022654:	6019      	str	r1, [r3, #0]
 8022656:	e002      	b.n	802265e <_printf_i+0x1d2>
 8022658:	0670      	lsls	r0, r6, #25
 802265a:	d5fb      	bpl.n	8022654 <_printf_i+0x1c8>
 802265c:	8019      	strh	r1, [r3, #0]
 802265e:	2300      	movs	r3, #0
 8022660:	6123      	str	r3, [r4, #16]
 8022662:	4615      	mov	r5, r2
 8022664:	e7ba      	b.n	80225dc <_printf_i+0x150>
 8022666:	682b      	ldr	r3, [r5, #0]
 8022668:	1d1a      	adds	r2, r3, #4
 802266a:	602a      	str	r2, [r5, #0]
 802266c:	681d      	ldr	r5, [r3, #0]
 802266e:	6862      	ldr	r2, [r4, #4]
 8022670:	2100      	movs	r1, #0
 8022672:	4628      	mov	r0, r5
 8022674:	f7dd fdd4 	bl	8000220 <memchr>
 8022678:	b108      	cbz	r0, 802267e <_printf_i+0x1f2>
 802267a:	1b40      	subs	r0, r0, r5
 802267c:	6060      	str	r0, [r4, #4]
 802267e:	6863      	ldr	r3, [r4, #4]
 8022680:	6123      	str	r3, [r4, #16]
 8022682:	2300      	movs	r3, #0
 8022684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022688:	e7a8      	b.n	80225dc <_printf_i+0x150>
 802268a:	6923      	ldr	r3, [r4, #16]
 802268c:	462a      	mov	r2, r5
 802268e:	4649      	mov	r1, r9
 8022690:	4640      	mov	r0, r8
 8022692:	47d0      	blx	sl
 8022694:	3001      	adds	r0, #1
 8022696:	d0ab      	beq.n	80225f0 <_printf_i+0x164>
 8022698:	6823      	ldr	r3, [r4, #0]
 802269a:	079b      	lsls	r3, r3, #30
 802269c:	d413      	bmi.n	80226c6 <_printf_i+0x23a>
 802269e:	68e0      	ldr	r0, [r4, #12]
 80226a0:	9b03      	ldr	r3, [sp, #12]
 80226a2:	4298      	cmp	r0, r3
 80226a4:	bfb8      	it	lt
 80226a6:	4618      	movlt	r0, r3
 80226a8:	e7a4      	b.n	80225f4 <_printf_i+0x168>
 80226aa:	2301      	movs	r3, #1
 80226ac:	4632      	mov	r2, r6
 80226ae:	4649      	mov	r1, r9
 80226b0:	4640      	mov	r0, r8
 80226b2:	47d0      	blx	sl
 80226b4:	3001      	adds	r0, #1
 80226b6:	d09b      	beq.n	80225f0 <_printf_i+0x164>
 80226b8:	3501      	adds	r5, #1
 80226ba:	68e3      	ldr	r3, [r4, #12]
 80226bc:	9903      	ldr	r1, [sp, #12]
 80226be:	1a5b      	subs	r3, r3, r1
 80226c0:	42ab      	cmp	r3, r5
 80226c2:	dcf2      	bgt.n	80226aa <_printf_i+0x21e>
 80226c4:	e7eb      	b.n	802269e <_printf_i+0x212>
 80226c6:	2500      	movs	r5, #0
 80226c8:	f104 0619 	add.w	r6, r4, #25
 80226cc:	e7f5      	b.n	80226ba <_printf_i+0x22e>
 80226ce:	bf00      	nop
 80226d0:	0802c385 	.word	0x0802c385
 80226d4:	0802c396 	.word	0x0802c396

080226d8 <__sread>:
 80226d8:	b510      	push	{r4, lr}
 80226da:	460c      	mov	r4, r1
 80226dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80226e0:	f000 f89c 	bl	802281c <_read_r>
 80226e4:	2800      	cmp	r0, #0
 80226e6:	bfab      	itete	ge
 80226e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80226ea:	89a3      	ldrhlt	r3, [r4, #12]
 80226ec:	181b      	addge	r3, r3, r0
 80226ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80226f2:	bfac      	ite	ge
 80226f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80226f6:	81a3      	strhlt	r3, [r4, #12]
 80226f8:	bd10      	pop	{r4, pc}

080226fa <__swrite>:
 80226fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226fe:	461f      	mov	r7, r3
 8022700:	898b      	ldrh	r3, [r1, #12]
 8022702:	05db      	lsls	r3, r3, #23
 8022704:	4605      	mov	r5, r0
 8022706:	460c      	mov	r4, r1
 8022708:	4616      	mov	r6, r2
 802270a:	d505      	bpl.n	8022718 <__swrite+0x1e>
 802270c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022710:	2302      	movs	r3, #2
 8022712:	2200      	movs	r2, #0
 8022714:	f000 f868 	bl	80227e8 <_lseek_r>
 8022718:	89a3      	ldrh	r3, [r4, #12]
 802271a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802271e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022722:	81a3      	strh	r3, [r4, #12]
 8022724:	4632      	mov	r2, r6
 8022726:	463b      	mov	r3, r7
 8022728:	4628      	mov	r0, r5
 802272a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802272e:	f000 b817 	b.w	8022760 <_write_r>

08022732 <__sseek>:
 8022732:	b510      	push	{r4, lr}
 8022734:	460c      	mov	r4, r1
 8022736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802273a:	f000 f855 	bl	80227e8 <_lseek_r>
 802273e:	1c43      	adds	r3, r0, #1
 8022740:	89a3      	ldrh	r3, [r4, #12]
 8022742:	bf15      	itete	ne
 8022744:	6560      	strne	r0, [r4, #84]	; 0x54
 8022746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802274a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802274e:	81a3      	strheq	r3, [r4, #12]
 8022750:	bf18      	it	ne
 8022752:	81a3      	strhne	r3, [r4, #12]
 8022754:	bd10      	pop	{r4, pc}

08022756 <__sclose>:
 8022756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802275a:	f000 b813 	b.w	8022784 <_close_r>
	...

08022760 <_write_r>:
 8022760:	b538      	push	{r3, r4, r5, lr}
 8022762:	4d07      	ldr	r5, [pc, #28]	; (8022780 <_write_r+0x20>)
 8022764:	4604      	mov	r4, r0
 8022766:	4608      	mov	r0, r1
 8022768:	4611      	mov	r1, r2
 802276a:	2200      	movs	r2, #0
 802276c:	602a      	str	r2, [r5, #0]
 802276e:	461a      	mov	r2, r3
 8022770:	f7de fe61 	bl	8001436 <_write>
 8022774:	1c43      	adds	r3, r0, #1
 8022776:	d102      	bne.n	802277e <_write_r+0x1e>
 8022778:	682b      	ldr	r3, [r5, #0]
 802277a:	b103      	cbz	r3, 802277e <_write_r+0x1e>
 802277c:	6023      	str	r3, [r4, #0]
 802277e:	bd38      	pop	{r3, r4, r5, pc}
 8022780:	200003b0 	.word	0x200003b0

08022784 <_close_r>:
 8022784:	b538      	push	{r3, r4, r5, lr}
 8022786:	4d06      	ldr	r5, [pc, #24]	; (80227a0 <_close_r+0x1c>)
 8022788:	2300      	movs	r3, #0
 802278a:	4604      	mov	r4, r0
 802278c:	4608      	mov	r0, r1
 802278e:	602b      	str	r3, [r5, #0]
 8022790:	f7de fe6d 	bl	800146e <_close>
 8022794:	1c43      	adds	r3, r0, #1
 8022796:	d102      	bne.n	802279e <_close_r+0x1a>
 8022798:	682b      	ldr	r3, [r5, #0]
 802279a:	b103      	cbz	r3, 802279e <_close_r+0x1a>
 802279c:	6023      	str	r3, [r4, #0]
 802279e:	bd38      	pop	{r3, r4, r5, pc}
 80227a0:	200003b0 	.word	0x200003b0

080227a4 <_fstat_r>:
 80227a4:	b538      	push	{r3, r4, r5, lr}
 80227a6:	4d07      	ldr	r5, [pc, #28]	; (80227c4 <_fstat_r+0x20>)
 80227a8:	2300      	movs	r3, #0
 80227aa:	4604      	mov	r4, r0
 80227ac:	4608      	mov	r0, r1
 80227ae:	4611      	mov	r1, r2
 80227b0:	602b      	str	r3, [r5, #0]
 80227b2:	f7de fe68 	bl	8001486 <_fstat>
 80227b6:	1c43      	adds	r3, r0, #1
 80227b8:	d102      	bne.n	80227c0 <_fstat_r+0x1c>
 80227ba:	682b      	ldr	r3, [r5, #0]
 80227bc:	b103      	cbz	r3, 80227c0 <_fstat_r+0x1c>
 80227be:	6023      	str	r3, [r4, #0]
 80227c0:	bd38      	pop	{r3, r4, r5, pc}
 80227c2:	bf00      	nop
 80227c4:	200003b0 	.word	0x200003b0

080227c8 <_isatty_r>:
 80227c8:	b538      	push	{r3, r4, r5, lr}
 80227ca:	4d06      	ldr	r5, [pc, #24]	; (80227e4 <_isatty_r+0x1c>)
 80227cc:	2300      	movs	r3, #0
 80227ce:	4604      	mov	r4, r0
 80227d0:	4608      	mov	r0, r1
 80227d2:	602b      	str	r3, [r5, #0]
 80227d4:	f7de fe67 	bl	80014a6 <_isatty>
 80227d8:	1c43      	adds	r3, r0, #1
 80227da:	d102      	bne.n	80227e2 <_isatty_r+0x1a>
 80227dc:	682b      	ldr	r3, [r5, #0]
 80227de:	b103      	cbz	r3, 80227e2 <_isatty_r+0x1a>
 80227e0:	6023      	str	r3, [r4, #0]
 80227e2:	bd38      	pop	{r3, r4, r5, pc}
 80227e4:	200003b0 	.word	0x200003b0

080227e8 <_lseek_r>:
 80227e8:	b538      	push	{r3, r4, r5, lr}
 80227ea:	4d07      	ldr	r5, [pc, #28]	; (8022808 <_lseek_r+0x20>)
 80227ec:	4604      	mov	r4, r0
 80227ee:	4608      	mov	r0, r1
 80227f0:	4611      	mov	r1, r2
 80227f2:	2200      	movs	r2, #0
 80227f4:	602a      	str	r2, [r5, #0]
 80227f6:	461a      	mov	r2, r3
 80227f8:	f7de fe60 	bl	80014bc <_lseek>
 80227fc:	1c43      	adds	r3, r0, #1
 80227fe:	d102      	bne.n	8022806 <_lseek_r+0x1e>
 8022800:	682b      	ldr	r3, [r5, #0]
 8022802:	b103      	cbz	r3, 8022806 <_lseek_r+0x1e>
 8022804:	6023      	str	r3, [r4, #0]
 8022806:	bd38      	pop	{r3, r4, r5, pc}
 8022808:	200003b0 	.word	0x200003b0

0802280c <_malloc_usable_size_r>:
 802280c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022810:	1f18      	subs	r0, r3, #4
 8022812:	2b00      	cmp	r3, #0
 8022814:	bfbc      	itt	lt
 8022816:	580b      	ldrlt	r3, [r1, r0]
 8022818:	18c0      	addlt	r0, r0, r3
 802281a:	4770      	bx	lr

0802281c <_read_r>:
 802281c:	b538      	push	{r3, r4, r5, lr}
 802281e:	4d07      	ldr	r5, [pc, #28]	; (802283c <_read_r+0x20>)
 8022820:	4604      	mov	r4, r0
 8022822:	4608      	mov	r0, r1
 8022824:	4611      	mov	r1, r2
 8022826:	2200      	movs	r2, #0
 8022828:	602a      	str	r2, [r5, #0]
 802282a:	461a      	mov	r2, r3
 802282c:	f7de fde6 	bl	80013fc <_read>
 8022830:	1c43      	adds	r3, r0, #1
 8022832:	d102      	bne.n	802283a <_read_r+0x1e>
 8022834:	682b      	ldr	r3, [r5, #0]
 8022836:	b103      	cbz	r3, 802283a <_read_r+0x1e>
 8022838:	6023      	str	r3, [r4, #0]
 802283a:	bd38      	pop	{r3, r4, r5, pc}
 802283c:	200003b0 	.word	0x200003b0

08022840 <_init>:
 8022840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022842:	bf00      	nop
 8022844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022846:	bc08      	pop	{r3}
 8022848:	469e      	mov	lr, r3
 802284a:	4770      	bx	lr

0802284c <_fini>:
 802284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802284e:	bf00      	nop
 8022850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022852:	bc08      	pop	{r3}
 8022854:	469e      	mov	lr, r3
 8022856:	4770      	bx	lr
