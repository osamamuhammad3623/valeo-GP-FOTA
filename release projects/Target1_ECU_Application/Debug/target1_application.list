
target1_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003470  08003470  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003478  08003478  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000005e4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000658  20000658  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bc9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003187  00000000  00000000  00038c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  0003d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002896d  00000000  00000000  0003e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001571a  00000000  00000000  00066d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5b4a  00000000  00000000  0007c457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00171fa1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005324  00000000  00000000  00171ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080033e0 	.word	0x080033e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080033e0 	.word	0x080033e0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <buzzer_on>:
 *      Author: osama
 */

#include "buzzer.h"

void buzzer_on(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2120      	movs	r1, #32
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <buzzer_on+0x14>)
 80004fe:	f000 ff11 	bl	8001324 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020000 	.word	0x40020000

0800050c <buzzer_off>:

void buzzer_off(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <buzzer_off+0x14>)
 8000516:	f000 ff05 	bl	8001324 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fb30 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f812 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f880 	bl	8000634 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  ultrasonic_init();
 8000534:	f000 fad4 	bl	8000ae0 <ultrasonic_init>
  	/* USER CODE BEGIN 2 */
  	/* USER CODE END 2 */

  	while (1)
  	{
  		ultrasonic_get_distance();
 8000538:	f000 fa98 	bl	8000a6c <ultrasonic_get_distance>
  		if (g_ultrasonic_last_measured_distance <= ULTRASONIC_MINIMUM_DISTANCE){
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <main+0x2c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b14      	cmp	r3, #20
 8000542:	d802      	bhi.n	800054a <main+0x26>
  			buzzer_on();
 8000544:	f7ff ffd6 	bl	80004f4 <buzzer_on>
 8000548:	e7f6      	b.n	8000538 <main+0x14>
  		}else{
  			buzzer_off();
 800054a:	f7ff ffdf 	bl	800050c <buzzer_off>
  		ultrasonic_get_distance();
 800054e:	e7f3      	b.n	8000538 <main+0x14>
 8000550:	200000d8 	.word	0x200000d8

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 ff34 	bl	80033d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <SystemClock_Config+0xd8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a2a      	ldr	r2, [pc, #168]	; (800062c <SystemClock_Config+0xd8>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xd8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xdc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a24      	ldr	r2, [pc, #144]	; (8000630 <SystemClock_Config+0xdc>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xdc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005c8:	23b4      	movs	r3, #180	; 0xb4
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 ff0d 	bl	80013f8 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e4:	f000 f93c 	bl	8000860 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e8:	f000 feb6 	bl	8001358 <HAL_PWREx_EnableOverDrive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005f2:	f000 f935 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2105      	movs	r1, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f001 f967 	bl	80018e8 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000620:	f000 f91e 	bl	8000860 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4b75      	ldr	r3, [pc, #468]	; (8000824 <MX_GPIO_Init+0x1f0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a74      	ldr	r2, [pc, #464]	; (8000824 <MX_GPIO_Init+0x1f0>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b72      	ldr	r3, [pc, #456]	; (8000824 <MX_GPIO_Init+0x1f0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <MX_GPIO_Init+0x1f0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a6d      	ldr	r2, [pc, #436]	; (8000824 <MX_GPIO_Init+0x1f0>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b6b      	ldr	r3, [pc, #428]	; (8000824 <MX_GPIO_Init+0x1f0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b67      	ldr	r3, [pc, #412]	; (8000824 <MX_GPIO_Init+0x1f0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a66      	ldr	r2, [pc, #408]	; (8000824 <MX_GPIO_Init+0x1f0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b64      	ldr	r3, [pc, #400]	; (8000824 <MX_GPIO_Init+0x1f0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b60      	ldr	r3, [pc, #384]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a5f      	ldr	r2, [pc, #380]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b5d      	ldr	r3, [pc, #372]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a58      	ldr	r2, [pc, #352]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b52      	ldr	r3, [pc, #328]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a51      	ldr	r2, [pc, #324]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b4f      	ldr	r3, [pc, #316]	; (8000824 <MX_GPIO_Init+0x1f0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2130      	movs	r1, #48	; 0x30
 80006f6:	484c      	ldr	r0, [pc, #304]	; (8000828 <MX_GPIO_Init+0x1f4>)
 80006f8:	f000 fe14 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f244 0181 	movw	r1, #16513	; 0x4081
 8000702:	484a      	ldr	r0, [pc, #296]	; (800082c <MX_GPIO_Init+0x1f8>)
 8000704:	f000 fe0e 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4848      	ldr	r0, [pc, #288]	; (8000830 <MX_GPIO_Init+0x1fc>)
 800070e:	f000 fe09 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000718:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4842      	ldr	r0, [pc, #264]	; (8000834 <MX_GPIO_Init+0x200>)
 800072a:	f000 fc37 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800073e:	2302      	movs	r3, #2
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4837      	ldr	r0, [pc, #220]	; (8000828 <MX_GPIO_Init+0x1f4>)
 800074a:	f000 fc27 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800074e:	2330      	movs	r3, #48	; 0x30
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4830      	ldr	r0, [pc, #192]	; (8000828 <MX_GPIO_Init+0x1f4>)
 8000766:	f000 fc19 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800076a:	f244 0381 	movw	r3, #16513	; 0x4081
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	482a      	ldr	r0, [pc, #168]	; (800082c <MX_GPIO_Init+0x1f8>)
 8000784:	f000 fc0a 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800079a:	2307      	movs	r3, #7
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4824      	ldr	r0, [pc, #144]	; (8000838 <MX_GPIO_Init+0x204>)
 80007a6:	f000 fbf9 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	481b      	ldr	r0, [pc, #108]	; (8000830 <MX_GPIO_Init+0x1fc>)
 80007c2:	f000 fbeb 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4815      	ldr	r0, [pc, #84]	; (8000830 <MX_GPIO_Init+0x1fc>)
 80007da:	f000 fbdf 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007de:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007f0:	230a      	movs	r3, #10
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <MX_GPIO_Init+0x1f4>)
 80007fc:	f000 fbce 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0x1f4>)
 8000816:	f000 fbc1 	bl	8000f9c <HAL_GPIO_Init>

}
 800081a:	bf00      	nop
 800081c:	3730      	adds	r7, #48	; 0x30
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020400 	.word	0x40020400
 8000830:	40021800 	.word	0x40021800
 8000834:	40020800 	.word	0x40020800
 8000838:	40020c00 	.word	0x40020c00

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 f9bf 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40010000 	.word	0x40010000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_MspInit+0x54>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <HAL_MspInit+0x54>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x54>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_MspInit+0x54>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_MspInit+0x54>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x54>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	f06f 0001 	mvn.w	r0, #1
 80008b2:	f000 fa65 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <HAL_InitTick+0xd4>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	4a2e      	ldr	r2, [pc, #184]	; (8000998 <HAL_InitTick+0xd4>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6453      	str	r3, [r2, #68]	; 0x44
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <HAL_InitTick+0xd4>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f0:	f107 020c 	add.w	r2, r7, #12
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fa00 	bl	8001d00 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000900:	f001 f9ea 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8000904:	4603      	mov	r3, r0
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	4a23      	ldr	r2, [pc, #140]	; (800099c <HAL_InitTick+0xd8>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3b01      	subs	r3, #1
 8000916:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <HAL_InitTick+0xdc>)
 800091a:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <HAL_InitTick+0xe0>)
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_InitTick+0xdc>)
 8000920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <HAL_InitTick+0xdc>)
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_InitTick+0xdc>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0xdc>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_InitTick+0xdc>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800093e:	4818      	ldr	r0, [pc, #96]	; (80009a0 <HAL_InitTick+0xdc>)
 8000940:	f001 fa10 	bl	8001d64 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800094a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800094e:	2b00      	cmp	r3, #0
 8000950:	d11b      	bne.n	800098a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <HAL_InitTick+0xdc>)
 8000954:	f001 fa60 	bl	8001e18 <HAL_TIM_Base_Start_IT>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000962:	2b00      	cmp	r3, #0
 8000964:	d111      	bne.n	800098a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000966:	2019      	movs	r0, #25
 8000968:	f000 fa26 	bl	8000db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d808      	bhi.n	8000984 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000972:	2200      	movs	r2, #0
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	2019      	movs	r0, #25
 8000978:	f000 fa02 	bl	8000d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_InitTick+0xe4>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e002      	b.n	800098a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800098e:	4618      	mov	r0, r3
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	20000090 	.word	0x20000090
 80009a4:	40010000 	.word	0x40010000
 80009a8:	20000004 	.word	0x20000004

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009de:	f001 fa8b 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000090 	.word	0x20000090

080009ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <ETH_IRQHandler+0x10>)
 80009f2:	f000 f9ef 	bl	8000dd4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000e8 	.word	0x200000e8

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <DWT_Delay_us>:

uint32_t g_ultrasonic_last_measured_distance=0;


void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <DWT_Delay_us+0x40>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000a32:	f001 f945 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <DWT_Delay_us+0x44>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	0c9b      	lsrs	r3, r3, #18
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000a48:	bf00      	nop
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <DWT_Delay_us+0x40>)
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	1ad2      	subs	r2, r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d3f8      	bcc.n	8000a4a <DWT_Delay_us+0x26>
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e0001000 	.word	0xe0001000
 8000a68:	431bde83 	.word	0x431bde83

08000a6c <ultrasonic_get_distance>:

void ultrasonic_get_distance(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
	// set the trigger pin for 10 uS and then clear it
	HAL_GPIO_WritePin(ULTRASONIC_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2110      	movs	r1, #16
 8000a7a:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <ultrasonic_get_distance+0x68>)
 8000a7c:	f000 fc52 	bl	8001324 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 8000a80:	200a      	movs	r0, #10
 8000a82:	f7ff ffcf 	bl	8000a24 <DWT_Delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2110      	movs	r1, #16
 8000a8a:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <ultrasonic_get_distance+0x68>)
 8000a8c:	f000 fc4a 	bl	8001324 <HAL_GPIO_WritePin>

	// measure time for Echo pin
	while(!HAL_GPIO_ReadPin(ULTRASONIC_PORT, ULTRASONIC_ECHO_PIN));
 8000a90:	bf00      	nop
 8000a92:	2101      	movs	r1, #1
 8000a94:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <ultrasonic_get_distance+0x68>)
 8000a96:	f000 fc2d 	bl	80012f4 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f8      	beq.n	8000a92 <ultrasonic_get_distance+0x26>
	while(HAL_GPIO_ReadPin(ULTRASONIC_PORT, ULTRASONIC_ECHO_PIN)){
 8000aa0:	e005      	b.n	8000aae <ultrasonic_get_distance+0x42>
		local_time++;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
		DWT_Delay_us(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffbb 	bl	8000a24 <DWT_Delay_us>
	while(HAL_GPIO_ReadPin(ULTRASONIC_PORT, ULTRASONIC_ECHO_PIN)){
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <ultrasonic_get_distance+0x68>)
 8000ab2:	f000 fc1f 	bl	80012f4 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f2      	bne.n	8000aa2 <ultrasonic_get_distance+0x36>
	}

	g_ultrasonic_last_measured_distance =  (local_time/58); // time is divided by 58 to get distance by cm [number is from the HC-SR04 datasheet]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <ultrasonic_get_distance+0x6c>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	095b      	lsrs	r3, r3, #5
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <ultrasonic_get_distance+0x70>)
 8000ac8:	6013      	str	r3, [r2, #0]
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	8d3dcb09 	.word	0x8d3dcb09
 8000adc:	200000d8 	.word	0x200000d8

08000ae0 <ultrasonic_init>:


void ultrasonic_init(void){
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <ultrasonic_init+0x50>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <ultrasonic_init+0x50>)
 8000aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aee:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <ultrasonic_init+0x50>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <ultrasonic_init+0x50>)
 8000af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000afa:	60d3      	str	r3, [r2, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <ultrasonic_init+0x54>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <ultrasonic_init+0x54>)
 8000b02:	f023 0301 	bic.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <ultrasonic_init+0x54>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <ultrasonic_init+0x54>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <ultrasonic_init+0x54>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000b1a:	bf00      	nop
	__ASM volatile ("NOP");
 8000b1c:	bf00      	nop
	__ASM volatile ("NOP");
 8000b1e:	bf00      	nop

	/* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <ultrasonic_init+0x54>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b00      	cmp	r3, #0
	{
		return 0; /*clock cycle counter started*/
	}
	else
	{
		return 1; /*clock cycle counter not started*/
 8000b26:	bf00      	nop
	}
}
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000edf0 	.word	0xe000edf0
 8000b34:	e0001000 	.word	0xe0001000

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b62:	f7ff ff4d 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 fc01 	bl	800336c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fcdb 	bl	8000524 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b7c:	08003480 	.word	0x08003480
  ldr r2, =_sbss
 8000b80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b84:	20000658 	.word	0x20000658

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff fe82 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe54 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	200000dc 	.word	0x200000dc

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000dc 	.word	0x200000dc

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dea:	2b40      	cmp	r3, #64	; 0x40
 8000dec:	d112      	bne.n	8000e14 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfc:	2b40      	cmp	r3, #64	; 0x40
 8000dfe:	d109      	bne.n	8000e14 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b50      	ldr	r3, [pc, #320]	; (8000f4c <HAL_ETH_IRQHandler+0x178>)
 8000e0c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f001 fa56 	bl	80022c0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d113      	bne.n	8000e4e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d10a      	bne.n	8000e4e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e40:	461a      	mov	r2, r3
 8000e42:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000e46:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f001 fa49 	bl	80022e0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e60:	d14c      	bne.n	8000efc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e74:	d142      	bne.n	8000efc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7c:	f043 0208 	orr.w	r2, r3, #8
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e98:	d11a      	bne.n	8000ed0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <HAL_ETH_IRQHandler+0x17c>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8000ec0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000ec4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	22e0      	movs	r2, #224	; 0xe0
 8000eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000ece:	e012      	b.n	8000ef6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	f248 6380 	movw	r3, #34432	; 0x8680
 8000ede:	4013      	ands	r3, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f248 6380 	movw	r3, #34432	; 0x8680
 8000ef4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f001 fa02 	bl	8002300 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d10e      	bne.n	8000f28 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f81c 	bl	8000f58 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_ETH_IRQHandler+0x180>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_ETH_IRQHandler+0x180>)
 8000f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f815 	bl	8000f6c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	00010040 	.word	0x00010040
 8000f50:	007e2000 	.word	0x007e2000
 8000f54:	40013c00 	.word	0x40013c00

08000f58 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e177      	b.n	80012a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8166 	bne.w	80012a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80c0 	beq.w	80012a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <HAL_GPIO_Init+0x324>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a61      	ldr	r2, [pc, #388]	; (80012c4 <HAL_GPIO_Init+0x328>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a58      	ldr	r2, [pc, #352]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d037      	beq.n	80011da <HAL_GPIO_Init+0x23e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a57      	ldr	r2, [pc, #348]	; (80012cc <HAL_GPIO_Init+0x330>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d031      	beq.n	80011d6 <HAL_GPIO_Init+0x23a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d02b      	beq.n	80011d2 <HAL_GPIO_Init+0x236>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a55      	ldr	r2, [pc, #340]	; (80012d4 <HAL_GPIO_Init+0x338>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x232>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x33c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x22e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a53      	ldr	r2, [pc, #332]	; (80012dc <HAL_GPIO_Init+0x340>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x22a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x344>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x348>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x34c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x350>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x21a>
 80011b2:	2309      	movs	r3, #9
 80011b4:	e012      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011b6:	230a      	movs	r3, #10
 80011b8:	e010      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x240>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x328>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_GPIO_Init+0x354>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121e:	4a34      	ldr	r2, [pc, #208]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001248:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <HAL_GPIO_Init+0x354>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_GPIO_Init+0x354>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_GPIO_Init+0x354>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_GPIO_Init+0x354>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae84 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40022400 	.word	0x40022400
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_PWREx_EnableOverDrive+0x94>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001384:	f7ff fc38 	bl	8000bf8 <HAL_GetTick>
 8001388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800138a:	e009      	b.n	80013a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800138c:	f7ff fc34 	bl	8000bf8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139a:	d901      	bls.n	80013a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e01f      	b.n	80013e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d1ee      	bne.n	800138c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b4:	f7ff fc20 	bl	8000bf8 <HAL_GetTick>
 80013b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ba:	e009      	b.n	80013d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013bc:	f7ff fc1c 	bl	8000bf8 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ca:	d901      	bls.n	80013d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e007      	b.n	80013e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013dc:	d1ee      	bne.n	80013bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	420e0040 	.word	0x420e0040
 80013f0:	40007000 	.word	0x40007000
 80013f4:	420e0044 	.word	0x420e0044

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e267      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001416:	4b88      	ldr	r3, [pc, #544]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00c      	beq.n	800143c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4b85      	ldr	r3, [pc, #532]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800142a:	2b08      	cmp	r3, #8
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b82      	ldr	r3, [pc, #520]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05b      	beq.n	8001500 <HAL_RCC_OscConfig+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d157      	bne.n	8001500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e242      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x74>
 800145e:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a75      	ldr	r2, [pc, #468]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4b70      	ldr	r3, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6f      	ldr	r2, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6c      	ldr	r2, [pc, #432]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 8001490:	4b69      	ldr	r3, [pc, #420]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a68      	ldr	r2, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a65      	ldr	r2, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fba2 	bl	8000bf8 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fb9e 	bl	8000bf8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e207      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b5b      	ldr	r3, [pc, #364]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xc0>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb8e 	bl	8000bf8 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb8a 	bl	8000bf8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1f3      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0xe8>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d063      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1c7      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4937      	ldr	r1, [pc, #220]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_RCC_OscConfig+0x244>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fb43 	bl	8000bf8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fb3f 	bl	8000bf8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1a8      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4925      	ldr	r1, [pc, #148]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_RCC_OscConfig+0x244>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb22 	bl	8000bf8 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fb1e 	bl	8000bf8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e187      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d036      	beq.n	8001650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d016      	beq.n	8001618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_RCC_OscConfig+0x248>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fb02 	bl	8000bf8 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fafe 	bl	8000bf8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e167      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_OscConfig+0x240>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x200>
 8001616:	e01b      	b.n	8001650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_OscConfig+0x248>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff faeb 	bl	8000bf8 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	e00e      	b.n	8001644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fae7 	bl	8000bf8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d907      	bls.n	8001644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e150      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001638:	40023800 	.word	0x40023800
 800163c:	42470000 	.word	0x42470000
 8001640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ea      	bne.n	8001626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8097 	beq.w	800178c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b81      	ldr	r3, [pc, #516]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b7d      	ldr	r3, [pc, #500]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a7c      	ldr	r2, [pc, #496]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b7a      	ldr	r3, [pc, #488]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b77      	ldr	r3, [pc, #476]	; (800186c <HAL_RCC_OscConfig+0x474>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b74      	ldr	r3, [pc, #464]	; (800186c <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a73      	ldr	r2, [pc, #460]	; (800186c <HAL_RCC_OscConfig+0x474>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff faa7 	bl	8000bf8 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff faa3 	bl	8000bf8 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e10c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x474>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2ea>
 80016d4:	4b64      	ldr	r3, [pc, #400]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d8:	4a63      	ldr	r2, [pc, #396]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6713      	str	r3, [r2, #112]	; 0x70
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x30c>
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
 80016f6:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 8001704:	4b58      	ldr	r3, [pc, #352]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a57      	ldr	r2, [pc, #348]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a54      	ldr	r2, [pc, #336]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fa68 	bl	8000bf8 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fa64 	bl	8000bf8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0cb      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001742:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0ee      	beq.n	800172c <HAL_RCC_OscConfig+0x334>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa52 	bl	8000bf8 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fa4e 	bl	8000bf8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0b5      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176e:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ee      	bne.n	8001758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a1 	beq.w	80018d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d05c      	beq.n	800185c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d141      	bne.n	800182e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa22 	bl	8000bf8 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fa1e 	bl	8000bf8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e087      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	491b      	ldr	r1, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_RCC_OscConfig+0x478>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff f9f7 	bl	8000bf8 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff f9f3 	bl	8000bf8 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e05c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x416>
 800182c:	e054      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_OscConfig+0x478>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f9e0 	bl	8000bf8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f9dc 	bl	8000bf8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e045      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_RCC_OscConfig+0x470>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x444>
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e038      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000
 8001870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x4ec>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d028      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d121      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11a      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d111      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	3b01      	subs	r3, #1
 80018be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d90c      	bls.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4934      	ldr	r1, [pc, #208]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff f90e 	bl	8000bf8 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff f90a 	bl	8000bf8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20c      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	490a      	ldr	r1, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ff18 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	080033f8 	.word	0x080033f8
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab8:	b094      	sub	sp, #80	; 0x50
 8001aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001acc:	4b79      	ldr	r3, [pc, #484]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d00d      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	f200 80e1 	bhi.w	8001ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae6:	e0db      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001aec:	e0db      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aee:	4b73      	ldr	r3, [pc, #460]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af2:	e0d8      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001afc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afe:	4b6d      	ldr	r3, [pc, #436]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	2200      	movs	r2, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
 8001b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b26:	4622      	mov	r2, r4
 8001b28:	462b      	mov	r3, r5
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4621      	mov	r1, r4
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	6139      	str	r1, [r7, #16]
 8001b44:	4629      	mov	r1, r5
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b58:	4659      	mov	r1, fp
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	4651      	mov	r1, sl
 8001b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b62:	4651      	mov	r1, sl
 8001b64:	018a      	lsls	r2, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	ebb2 0801 	subs.w	r8, r2, r1
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b86:	4690      	mov	r8, r2
 8001b88:	4699      	mov	r9, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	eb18 0303 	adds.w	r3, r8, r3
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	462b      	mov	r3, r5
 8001b94:	eb49 0303 	adc.w	r3, r9, r3
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	024b      	lsls	r3, r1, #9
 8001baa:	4621      	mov	r1, r4
 8001bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	024a      	lsls	r2, r1, #9
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bc4:	f7fe fb14 	bl	80001f0 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd0:	e058      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4611      	mov	r1, r2
 8001bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bec:	4642      	mov	r2, r8
 8001bee:	464b      	mov	r3, r9
 8001bf0:	f04f 0000 	mov.w	r0, #0
 8001bf4:	f04f 0100 	mov.w	r1, #0
 8001bf8:	0159      	lsls	r1, r3, #5
 8001bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfe:	0150      	lsls	r0, r2, #5
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4641      	mov	r1, r8
 8001c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c24:	ebb2 040a 	subs.w	r4, r2, sl
 8001c28:	eb63 050b 	sbc.w	r5, r3, fp
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	00eb      	lsls	r3, r5, #3
 8001c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c3a:	00e2      	lsls	r2, r4, #3
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	4643      	mov	r3, r8
 8001c42:	18e3      	adds	r3, r4, r3
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	464b      	mov	r3, r9
 8001c48:	eb45 0303 	adc.w	r3, r5, r3
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	028b      	lsls	r3, r1, #10
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c64:	4621      	mov	r1, r4
 8001c66:	028a      	lsls	r2, r1, #10
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	61fa      	str	r2, [r7, #28]
 8001c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c78:	f7fe faba 	bl	80001f0 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3750      	adds	r7, #80	; 0x50
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0b5b      	lsrs	r3, r3, #13
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08003408 	.word	0x08003408

08001d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_RCC_GetClockConfig+0x60>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f839 	bl	8001e02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 f9d8 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d001      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e04e      	b.n	8001ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d022      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5a:	d01d      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d018      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_TIM_Base_Start_IT+0xd4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40010400 	.word	0x40010400
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40001800 	.word	0x40001800

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d122      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0202 	mvn.w	r2, #2
 8001f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8ee 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8e0 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8f1 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8c4 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8b6 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8c7 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f89a 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f88c 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f89d 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b10      	cmp	r3, #16
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0210 	mvn.w	r2, #16
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2208      	movs	r2, #8
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f870 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f862 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f873 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fbe0 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b80      	cmp	r3, #128	; 0x80
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f902 	bl	80022ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f838 	bl	8002144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8cc 	bl	8002298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	; (800226c <TIM_Base_SetConfig+0x114>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d00f      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <TIM_Base_SetConfig+0x118>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00b      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3b      	ldr	r2, [pc, #236]	; (8002278 <TIM_Base_SetConfig+0x120>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3a      	ldr	r2, [pc, #232]	; (800227c <TIM_Base_SetConfig+0x124>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <TIM_Base_SetConfig+0x114>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d027      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <TIM_Base_SetConfig+0x118>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d023      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <TIM_Base_SetConfig+0x120>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <TIM_Base_SetConfig+0x124>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <TIM_Base_SetConfig+0x128>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <TIM_Base_SetConfig+0x12c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <TIM_Base_SetConfig+0x130>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <TIM_Base_SetConfig+0x134>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <TIM_Base_SetConfig+0x138>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a23      	ldr	r2, [pc, #140]	; (8002294 <TIM_Base_SetConfig+0x13c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <TIM_Base_SetConfig+0x114>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0xf8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <TIM_Base_SetConfig+0x124>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40010400 	.word	0x40010400
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800
 800228c:	40001800 	.word	0x40001800
 8002290:	40001c00 	.word	0x40001c00
 8002294:	40002000 	.word	0x40002000

08002298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_ETH_RxCpltCallback+0x1c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 f83f 	bl	8002350 <osSemaphoreRelease>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200000e0 	.word	0x200000e0

080022e0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_ETH_TxCpltCallback+0x1c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f82f 	bl	8002350 <osSemaphoreRelease>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200000e4 	.word	0x200000e4

08002300 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7fe fe39 	bl	8000f80 <HAL_ETH_GetDMAError>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d104      	bne.n	8002322 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_ETH_ErrorCallback+0x2c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f817 	bl	8002350 <osSemaphoreRelease>
  }
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200000e0 	.word	0x200000e0

08002330 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <SysTick_Handler+0x1c>)
 8002336:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002338:	f000 fe2c 	bl	8002f94 <xTaskGetSchedulerState>
 800233c:	4603      	mov	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002342:	f000 ffb1 	bl	80032a8 <xPortSysTickHandler>
  }
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002366:	f06f 0303 	mvn.w	r3, #3
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e02c      	b.n	80023c8 <osSemaphoreRelease+0x78>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800236e:	f3ef 8305 	mrs	r3, IPSR
 8002372:	60fb      	str	r3, [r7, #12]
  return(result);
 8002374:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01a      	beq.n	80023b0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	4619      	mov	r1, r3
 8002384:	6938      	ldr	r0, [r7, #16]
 8002386:	f000 f9ad 	bl	80026e4 <xQueueGiveFromISR>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d003      	beq.n	8002398 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002390:	f06f 0302 	mvn.w	r3, #2
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e017      	b.n	80023c8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d014      	beq.n	80023c8 <osSemaphoreRelease+0x78>
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <osSemaphoreRelease+0x84>)
 80023a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	e00b      	b.n	80023c8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	6938      	ldr	r0, [r7, #16]
 80023b8:	f000 f896 	bl	80024e8 <xQueueGenericSend>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d002      	beq.n	80023c8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80023c2:	f06f 0302 	mvn.w	r3, #2
 80023c6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80023c8:	697b      	ldr	r3, [r7, #20]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d103      	bne.n	8002440 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e00c      	b.n	800245a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3308      	adds	r3, #8
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e002      	b.n	800244e <vListInsert+0x2e>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d2f6      	bcs.n	8002448 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	601a      	str	r2, [r3, #0]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6892      	ldr	r2, [r2, #8]
 80024a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6852      	ldr	r2, [r2, #4]
 80024b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d103      	bne.n	80024c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024f6:	2300      	movs	r3, #0
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <xQueueGenericSend+0x40>
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <xQueueGenericSend+0x44>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <xQueueGenericSend+0x46>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <xQueueGenericSend+0x60>
	__asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002544:	bf00      	nop
 8002546:	e7fe      	b.n	8002546 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d103      	bne.n	8002556 <xQueueGenericSend+0x6e>
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <xQueueGenericSend+0x72>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <xQueueGenericSend+0x74>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <xQueueGenericSend+0x8e>
	__asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	623b      	str	r3, [r7, #32]
}
 8002572:	bf00      	nop
 8002574:	e7fe      	b.n	8002574 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002576:	f000 fd0d 	bl	8002f94 <xTaskGetSchedulerState>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <xQueueGenericSend+0x9e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <xQueueGenericSend+0xa2>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <xQueueGenericSend+0xa4>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	61fb      	str	r3, [r7, #28]
}
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025a6:	f000 fdef 	bl	8003188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <xQueueGenericSend+0xd4>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d129      	bne.n	8002610 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c2:	f000 f91c 	bl	80027fe <prvCopyDataToQueue>
 80025c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	3324      	adds	r3, #36	; 0x24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fbd5 	bl	8002d84 <xTaskRemoveFromEventList>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025e0:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <xQueueGenericSend+0x1f8>)
 80025e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	e00a      	b.n	8002608 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <xQueueGenericSend+0x1f8>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002608:	f000 fdee 	bl	80031e8 <vPortExitCritical>
				return pdPASS;
 800260c:	2301      	movs	r3, #1
 800260e:	e063      	b.n	80026d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002616:	f000 fde7 	bl	80031e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800261a:	2300      	movs	r3, #0
 800261c:	e05c      	b.n	80026d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fc0f 	bl	8002e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800262e:	2301      	movs	r3, #1
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002632:	f000 fdd9 	bl	80031e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002636:	f000 f9b7 	bl	80029a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800263a:	f000 fda5 	bl	8003188 <vPortEnterCritical>
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002644:	b25b      	sxtb	r3, r3
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d103      	bne.n	8002654 <xQueueGenericSend+0x16c>
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800265a:	b25b      	sxtb	r3, r3
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x182>
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800266a:	f000 fdbd 	bl	80031e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800266e:	1d3a      	adds	r2, r7, #4
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fbfe 	bl	8002e78 <xTaskCheckForTimeOut>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d124      	bne.n	80026cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002684:	f000 f977 	bl	8002976 <prvIsQueueFull>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d018      	beq.n	80026c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	3310      	adds	r3, #16
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fb50 	bl	8002d3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800269c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800269e:	f000 f918 	bl	80028d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026a2:	f000 f98f 	bl	80029c4 <xTaskResumeAll>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f af7c 	bne.w	80025a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <xQueueGenericSend+0x1f8>)
 80026b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	e772      	b.n	80025a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c2:	f000 f906 	bl	80028d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026c6:	f000 f97d 	bl	80029c4 <xTaskResumeAll>
 80026ca:	e76c      	b.n	80025a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ce:	f000 f900 	bl	80028d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026d2:	f000 f977 	bl	80029c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3738      	adds	r7, #56	; 0x38
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	e000ed04 	.word	0xe000ed04

080026e4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	; 0x38
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <xQueueGiveFromISR+0x2a>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	623b      	str	r3, [r7, #32]
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <xQueueGiveFromISR+0x48>
	__asm volatile
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	61fb      	str	r3, [r7, #28]
}
 8002728:	bf00      	nop
 800272a:	e7fe      	b.n	800272a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d103      	bne.n	800273c <xQueueGiveFromISR+0x58>
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xQueueGiveFromISR+0x5c>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <xQueueGiveFromISR+0x5e>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <xQueueGiveFromISR+0x78>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	61bb      	str	r3, [r7, #24]
}
 8002758:	bf00      	nop
 800275a:	e7fe      	b.n	800275a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800275c:	f000 fdc6 	bl	80032ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002760:	f3ef 8211 	mrs	r2, BASEPRI
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	617a      	str	r2, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002778:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002788:	429a      	cmp	r2, r3
 800278a:	d22b      	bcs.n	80027e4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800279e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d112      	bne.n	80027ce <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d016      	beq.n	80027de <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	3324      	adds	r3, #36	; 0x24
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fae5 	bl	8002d84 <xTaskRemoveFromEventList>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e007      	b.n	80027de <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	b25a      	sxtb	r2, r3
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027de:	2301      	movs	r3, #1
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
 80027e2:	e001      	b.n	80027e8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3738      	adds	r7, #56	; 0x38
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10d      	bne.n	8002838 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d14d      	bne.n	80028c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fbd1 	bl	8002fd0 <xTaskPriorityDisinherit>
 800282e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	e043      	b.n	80028c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6858      	ldr	r0, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	461a      	mov	r2, r3
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	f000 fdb3 	bl	80033b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	441a      	add	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	d32b      	bcc.n	80028c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	e026      	b.n	80028c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	68d8      	ldr	r0, [r3, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	461a      	mov	r2, r3
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	f000 fd99 	bl	80033b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	425b      	negs	r3, r3
 800288c:	441a      	add	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d207      	bcs.n	80028ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	425b      	negs	r3, r3
 80028a8:	441a      	add	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d105      	bne.n	80028c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	3b01      	subs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80028c8:	697b      	ldr	r3, [r7, #20]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028da:	f000 fc55 	bl	8003188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028e6:	e011      	b.n	800290c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d012      	beq.n	8002916 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3324      	adds	r3, #36	; 0x24
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fa45 	bl	8002d84 <xTaskRemoveFromEventList>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002900:	f000 fb1c 	bl	8002f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	3b01      	subs	r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800290c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002910:	2b00      	cmp	r3, #0
 8002912:	dce9      	bgt.n	80028e8 <prvUnlockQueue+0x16>
 8002914:	e000      	b.n	8002918 <prvUnlockQueue+0x46>
					break;
 8002916:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	22ff      	movs	r2, #255	; 0xff
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002920:	f000 fc62 	bl	80031e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002924:	f000 fc30 	bl	8003188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800292e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002930:	e011      	b.n	8002956 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3310      	adds	r3, #16
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fa20 	bl	8002d84 <xTaskRemoveFromEventList>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800294a:	f000 faf7 	bl	8002f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800294e:	7bbb      	ldrb	r3, [r7, #14]
 8002950:	3b01      	subs	r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800295a:	2b00      	cmp	r3, #0
 800295c:	dce9      	bgt.n	8002932 <prvUnlockQueue+0x60>
 800295e:	e000      	b.n	8002962 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002960:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800296a:	f000 fc3d 	bl	80031e8 <vPortExitCritical>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800297e:	f000 fc03 	bl	8003188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	429a      	cmp	r2, r3
 800298c:	d102      	bne.n	8002994 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800298e:	2301      	movs	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e001      	b.n	8002998 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002998:	f000 fc26 	bl	80031e8 <vPortExitCritical>

	return xReturn;
 800299c:	68fb      	ldr	r3, [r7, #12]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <vTaskSuspendAll+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <vTaskSuspendAll+0x18>)
 80029b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	2000064c 	.word	0x2000064c

080029c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029d2:	4b42      	ldr	r3, [pc, #264]	; (8002adc <xTaskResumeAll+0x118>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	603b      	str	r3, [r7, #0]
}
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029f0:	f000 fbca 	bl	8003188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <xTaskResumeAll+0x118>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	4a38      	ldr	r2, [pc, #224]	; (8002adc <xTaskResumeAll+0x118>)
 80029fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <xTaskResumeAll+0x118>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d162      	bne.n	8002acc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <xTaskResumeAll+0x11c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d05e      	beq.n	8002acc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a0e:	e02f      	b.n	8002a70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <xTaskResumeAll+0x120>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3318      	adds	r3, #24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fd38 	bl	8002492 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3304      	adds	r3, #4
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fd33 	bl	8002492 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <xTaskResumeAll+0x124>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d903      	bls.n	8002a40 <xTaskResumeAll+0x7c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <xTaskResumeAll+0x124>)
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <xTaskResumeAll+0x128>)
 8002a4e:	441a      	add	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f7ff fcbe 	bl	80023d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <xTaskResumeAll+0x12c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <xTaskResumeAll+0x130>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <xTaskResumeAll+0x120>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1cb      	bne.n	8002a10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a7e:	f000 fa69 	bl	8002f54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <xTaskResumeAll+0x134>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d010      	beq.n	8002ab0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a8e:	f000 f837 	bl	8002b00 <xTaskIncrementTick>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <xTaskResumeAll+0x130>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f1      	bne.n	8002a8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <xTaskResumeAll+0x134>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <xTaskResumeAll+0x130>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <xTaskResumeAll+0x138>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002acc:	f000 fb8c 	bl	80031e8 <vPortExitCritical>

	return xAlreadyYielded;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000064c 	.word	0x2000064c
 8002ae0:	2000062c 	.word	0x2000062c
 8002ae4:	20000604 	.word	0x20000604
 8002ae8:	20000634 	.word	0x20000634
 8002aec:	2000019c 	.word	0x2000019c
 8002af0:	20000198 	.word	0x20000198
 8002af4:	20000640 	.word	0x20000640
 8002af8:	2000063c 	.word	0x2000063c
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b0a:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <xTaskIncrementTick+0x148>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 808f 	bne.w	8002c32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b14:	4b4d      	ldr	r3, [pc, #308]	; (8002c4c <xTaskIncrementTick+0x14c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b1c:	4a4b      	ldr	r2, [pc, #300]	; (8002c4c <xTaskIncrementTick+0x14c>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d120      	bne.n	8002b6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b28:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <xTaskIncrementTick+0x150>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <xTaskIncrementTick+0x48>
	__asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	603b      	str	r3, [r7, #0]
}
 8002b44:	bf00      	nop
 8002b46:	e7fe      	b.n	8002b46 <xTaskIncrementTick+0x46>
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <xTaskIncrementTick+0x150>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <xTaskIncrementTick+0x154>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3f      	ldr	r2, [pc, #252]	; (8002c50 <xTaskIncrementTick+0x150>)
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4a3f      	ldr	r2, [pc, #252]	; (8002c54 <xTaskIncrementTick+0x154>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <xTaskIncrementTick+0x158>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a3d      	ldr	r2, [pc, #244]	; (8002c58 <xTaskIncrementTick+0x158>)
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	f000 f9f5 	bl	8002f54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <xTaskIncrementTick+0x15c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d349      	bcc.n	8002c08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b74:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <xTaskIncrementTick+0x150>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <xTaskIncrementTick+0x15c>)
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	601a      	str	r2, [r3, #0]
					break;
 8002b86:	e03f      	b.n	8002c08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b88:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <xTaskIncrementTick+0x150>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d203      	bcs.n	8002ba8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ba0:	4a2e      	ldr	r2, [pc, #184]	; (8002c5c <xTaskIncrementTick+0x15c>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ba6:	e02f      	b.n	8002c08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3304      	adds	r3, #4
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fc70 	bl	8002492 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fc67 	bl	8002492 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <xTaskIncrementTick+0x160>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d903      	bls.n	8002bd8 <xTaskIncrementTick+0xd8>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	4a22      	ldr	r2, [pc, #136]	; (8002c60 <xTaskIncrementTick+0x160>)
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <xTaskIncrementTick+0x164>)
 8002be6:	441a      	add	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f7ff fbf2 	bl	80023d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <xTaskIncrementTick+0x168>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d3b8      	bcc.n	8002b74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c06:	e7b5      	b.n	8002b74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <xTaskIncrementTick+0x168>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	4915      	ldr	r1, [pc, #84]	; (8002c64 <xTaskIncrementTick+0x164>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d901      	bls.n	8002c24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <xTaskIncrementTick+0x16c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e004      	b.n	8002c3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <xTaskIncrementTick+0x170>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <xTaskIncrementTick+0x170>)
 8002c3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c3c:	697b      	ldr	r3, [r7, #20]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000064c 	.word	0x2000064c
 8002c4c:	20000630 	.word	0x20000630
 8002c50:	200005fc 	.word	0x200005fc
 8002c54:	20000600 	.word	0x20000600
 8002c58:	20000644 	.word	0x20000644
 8002c5c:	20000648 	.word	0x20000648
 8002c60:	20000634 	.word	0x20000634
 8002c64:	2000019c 	.word	0x2000019c
 8002c68:	20000198 	.word	0x20000198
 8002c6c:	20000640 	.word	0x20000640
 8002c70:	2000063c 	.word	0x2000063c

08002c74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <vTaskSwitchContext+0xb0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <vTaskSwitchContext+0xb4>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c88:	e046      	b.n	8002d18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <vTaskSwitchContext+0xb4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <vTaskSwitchContext+0xb8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e010      	b.n	8002cba <vTaskSwitchContext+0x46>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	607b      	str	r3, [r7, #4]
}
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <vTaskSwitchContext+0x3e>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	491d      	ldr	r1, [pc, #116]	; (8002d30 <vTaskSwitchContext+0xbc>)
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0e4      	beq.n	8002c98 <vTaskSwitchContext+0x24>
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <vTaskSwitchContext+0xbc>)
 8002cda:	4413      	add	r3, r2
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d104      	bne.n	8002cfe <vTaskSwitchContext+0x8a>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <vTaskSwitchContext+0xc0>)
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <vTaskSwitchContext+0xb8>)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <vTaskSwitchContext+0xc0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3354      	adds	r3, #84	; 0x54
 8002d14:	4a08      	ldr	r2, [pc, #32]	; (8002d38 <vTaskSwitchContext+0xc4>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	2000064c 	.word	0x2000064c
 8002d28:	20000640 	.word	0x20000640
 8002d2c:	20000634 	.word	0x20000634
 8002d30:	2000019c 	.word	0x2000019c
 8002d34:	20000198 	.word	0x20000198
 8002d38:	20000010 	.word	0x20000010

08002d3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	60fb      	str	r3, [r7, #12]
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <vTaskPlaceOnEventList+0x44>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3318      	adds	r3, #24
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fb58 	bl	8002420 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d70:	2101      	movs	r1, #1
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	f000 f99a 	bl	80030ac <prvAddCurrentTaskToDelayedList>
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000198 	.word	0x20000198

08002d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60fb      	str	r3, [r7, #12]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	3318      	adds	r3, #24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fb6c 	bl	8002492 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <xTaskRemoveFromEventList+0xb0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d11d      	bne.n	8002dfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fb63 	bl	8002492 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <xTaskRemoveFromEventList+0xb4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d903      	bls.n	8002de0 <xTaskRemoveFromEventList+0x5c>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <xTaskRemoveFromEventList+0xb4>)
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <xTaskRemoveFromEventList+0xb8>)
 8002dee:	441a      	add	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7ff faee 	bl	80023d8 <vListInsertEnd>
 8002dfc:	e005      	b.n	8002e0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	3318      	adds	r3, #24
 8002e02:	4619      	mov	r1, r3
 8002e04:	480e      	ldr	r0, [pc, #56]	; (8002e40 <xTaskRemoveFromEventList+0xbc>)
 8002e06:	f7ff fae7 	bl	80023d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <xTaskRemoveFromEventList+0xc0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d905      	bls.n	8002e24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <xTaskRemoveFromEventList+0xc4>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e001      	b.n	8002e28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002e28:	697b      	ldr	r3, [r7, #20]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000064c 	.word	0x2000064c
 8002e38:	20000634 	.word	0x20000634
 8002e3c:	2000019c 	.word	0x2000019c
 8002e40:	20000604 	.word	0x20000604
 8002e44:	20000198 	.word	0x20000198
 8002e48:	20000640 	.word	0x20000640

08002e4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <vTaskInternalSetTimeOutState+0x24>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <vTaskInternalSetTimeOutState+0x28>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	20000644 	.word	0x20000644
 8002e74:	20000630 	.word	0x20000630

08002e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	613b      	str	r3, [r7, #16]
}
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	60fb      	str	r3, [r7, #12]
}
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002eba:	f000 f965 	bl	8003188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <xTaskCheckForTimeOut+0xbc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d102      	bne.n	8002ede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	e023      	b.n	8002f26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <xTaskCheckForTimeOut+0xc0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d007      	beq.n	8002efa <xTaskCheckForTimeOut+0x82>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	e015      	b.n	8002f26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d20b      	bcs.n	8002f1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad2      	subs	r2, r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff9b 	bl	8002e4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e004      	b.n	8002f26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f26:	f000 f95f 	bl	80031e8 <vPortExitCritical>

	return xReturn;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000630 	.word	0x20000630
 8002f38:	20000644 	.word	0x20000644

08002f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <vTaskMissedYield+0x14>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	20000640 	.word	0x20000640

08002f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <prvResetNextTaskUnblockTime+0x38>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <prvResetNextTaskUnblockTime+0x3c>)
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f6c:	e008      	b.n	8002f80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <prvResetNextTaskUnblockTime+0x38>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <prvResetNextTaskUnblockTime+0x3c>)
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	200005fc 	.word	0x200005fc
 8002f90:	20000648 	.word	0x20000648

08002f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <xTaskGetSchedulerState+0x34>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	e008      	b.n	8002fba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <xTaskGetSchedulerState+0x38>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	e001      	b.n	8002fba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002fba:	687b      	ldr	r3, [r7, #4]
	}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	20000638 	.word	0x20000638
 8002fcc:	2000064c 	.word	0x2000064c

08002fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d056      	beq.n	8003094 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002fe6:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <xTaskPriorityDisinherit+0xd0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d00a      	beq.n	8003006 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	60fb      	str	r3, [r7, #12]
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	60bb      	str	r3, [r7, #8]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	429a      	cmp	r2, r3
 8003038:	d02c      	beq.n	8003094 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	2b00      	cmp	r3, #0
 8003040:	d128      	bne.n	8003094 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3304      	adds	r3, #4
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fa23 	bl	8002492 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <xTaskPriorityDisinherit+0xd4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d903      	bls.n	8003074 <xTaskPriorityDisinherit+0xa4>
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <xTaskPriorityDisinherit+0xd4>)
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <xTaskPriorityDisinherit+0xd8>)
 8003082:	441a      	add	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7ff f9a4 	bl	80023d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003090:	2301      	movs	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003094:	697b      	ldr	r3, [r7, #20]
	}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000198 	.word	0x20000198
 80030a4:	20000634 	.word	0x20000634
 80030a8:	2000019c 	.word	0x2000019c

080030ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <prvAddCurrentTaskToDelayedList+0x90>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030bc:	4b20      	ldr	r3, [pc, #128]	; (8003140 <prvAddCurrentTaskToDelayedList+0x94>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f9e5 	bl	8002492 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d10a      	bne.n	80030e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <prvAddCurrentTaskToDelayedList+0x94>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4819      	ldr	r0, [pc, #100]	; (8003144 <prvAddCurrentTaskToDelayedList+0x98>)
 80030e0:	f7ff f97a 	bl	80023d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030e4:	e026      	b.n	8003134 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <prvAddCurrentTaskToDelayedList+0x94>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d209      	bcs.n	8003112 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <prvAddCurrentTaskToDelayedList+0x94>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f7ff f988 	bl	8002420 <vListInsert>
}
 8003110:	e010      	b.n	8003134 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <prvAddCurrentTaskToDelayedList+0x94>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3304      	adds	r3, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7ff f97e 	bl	8002420 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d202      	bcs.n	8003134 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000630 	.word	0x20000630
 8003140:	20000198 	.word	0x20000198
 8003144:	20000618 	.word	0x20000618
 8003148:	20000600 	.word	0x20000600
 800314c:	200005fc 	.word	0x200005fc
 8003150:	20000648 	.word	0x20000648
	...

08003160 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <pxCurrentTCBConst2>)
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	6808      	ldr	r0, [r1, #0]
 8003166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316a:	f380 8809 	msr	PSP, r0
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f380 8811 	msr	BASEPRI, r0
 800317a:	4770      	bx	lr
 800317c:	f3af 8000 	nop.w

08003180 <pxCurrentTCBConst2>:
 8003180:	20000198 	.word	0x20000198
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop

08003188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	607b      	str	r3, [r7, #4]
}
 80031a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <vPortEnterCritical+0x58>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <vPortEnterCritical+0x58>)
 80031aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <vPortEnterCritical+0x58>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10f      	bne.n	80031d4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <vPortEnterCritical+0x5c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <vPortEnterCritical+0x4c>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	603b      	str	r3, [r7, #0]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <vPortEnterCritical+0x4a>
	}
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <vPortExitCritical+0x50>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <vPortExitCritical+0x24>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	607b      	str	r3, [r7, #4]
}
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <vPortExitCritical+0x50>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3b01      	subs	r3, #1
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <vPortExitCritical+0x50>)
 8003214:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <vPortExitCritical+0x50>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <vPortExitCritical+0x42>
 800321e:	2300      	movs	r3, #0
 8003220:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f383 8811 	msr	BASEPRI, r3
}
 8003228:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	2000000c 	.word	0x2000000c
 800323c:	00000000 	.word	0x00000000

08003240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003240:	f3ef 8009 	mrs	r0, PSP
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <pxCurrentTCBConst>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	f01e 0f10 	tst.w	lr, #16
 8003250:	bf08      	it	eq
 8003252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325a:	6010      	str	r0, [r2, #0]
 800325c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003264:	f380 8811 	msr	BASEPRI, r0
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f7ff fd00 	bl	8002c74 <vTaskSwitchContext>
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f380 8811 	msr	BASEPRI, r0
 800327c:	bc09      	pop	{r0, r3}
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	6808      	ldr	r0, [r1, #0]
 8003282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	f01e 0f10 	tst.w	lr, #16
 800328a:	bf08      	it	eq
 800328c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003290:	f380 8809 	msr	PSP, r0
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	f3af 8000 	nop.w

080032a0 <pxCurrentTCBConst>:
 80032a0:	20000198 	.word	0x20000198
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop

080032a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	607b      	str	r3, [r7, #4]
}
 80032c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032c2:	f7ff fc1d 	bl	8002b00 <xTaskIncrementTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <xPortSysTickHandler+0x40>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f383 8811 	msr	BASEPRI, r3
}
 80032de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80032f2:	f3ef 8305 	mrs	r3, IPSR
 80032f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d914      	bls.n	8003328 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80032fe:	4a17      	ldr	r2, [pc, #92]	; (800335c <vPortValidateInterruptPriority+0x70>)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <vPortValidateInterruptPriority+0x74>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	7afa      	ldrb	r2, [r7, #11]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20a      	bcs.n	8003328 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	607b      	str	r3, [r7, #4]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <vPortValidateInterruptPriority+0x78>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <vPortValidateInterruptPriority+0x7c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d90a      	bls.n	800334e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	603b      	str	r3, [r7, #0]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <vPortValidateInterruptPriority+0x60>
	}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e3f0 	.word	0xe000e3f0
 8003360:	20000650 	.word	0x20000650
 8003364:	e000ed0c 	.word	0xe000ed0c
 8003368:	20000654 	.word	0x20000654

0800336c <__libc_init_array>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	4d0d      	ldr	r5, [pc, #52]	; (80033a4 <__libc_init_array+0x38>)
 8003370:	4c0d      	ldr	r4, [pc, #52]	; (80033a8 <__libc_init_array+0x3c>)
 8003372:	1b64      	subs	r4, r4, r5
 8003374:	10a4      	asrs	r4, r4, #2
 8003376:	2600      	movs	r6, #0
 8003378:	42a6      	cmp	r6, r4
 800337a:	d109      	bne.n	8003390 <__libc_init_array+0x24>
 800337c:	4d0b      	ldr	r5, [pc, #44]	; (80033ac <__libc_init_array+0x40>)
 800337e:	4c0c      	ldr	r4, [pc, #48]	; (80033b0 <__libc_init_array+0x44>)
 8003380:	f000 f82e 	bl	80033e0 <_init>
 8003384:	1b64      	subs	r4, r4, r5
 8003386:	10a4      	asrs	r4, r4, #2
 8003388:	2600      	movs	r6, #0
 800338a:	42a6      	cmp	r6, r4
 800338c:	d105      	bne.n	800339a <__libc_init_array+0x2e>
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	f855 3b04 	ldr.w	r3, [r5], #4
 8003394:	4798      	blx	r3
 8003396:	3601      	adds	r6, #1
 8003398:	e7ee      	b.n	8003378 <__libc_init_array+0xc>
 800339a:	f855 3b04 	ldr.w	r3, [r5], #4
 800339e:	4798      	blx	r3
 80033a0:	3601      	adds	r6, #1
 80033a2:	e7f2      	b.n	800338a <__libc_init_array+0x1e>
 80033a4:	08003478 	.word	0x08003478
 80033a8:	08003478 	.word	0x08003478
 80033ac:	08003478 	.word	0x08003478
 80033b0:	0800347c 	.word	0x0800347c

080033b4 <memcpy>:
 80033b4:	440a      	add	r2, r1
 80033b6:	4291      	cmp	r1, r2
 80033b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033bc:	d100      	bne.n	80033c0 <memcpy+0xc>
 80033be:	4770      	bx	lr
 80033c0:	b510      	push	{r4, lr}
 80033c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033ca:	4291      	cmp	r1, r2
 80033cc:	d1f9      	bne.n	80033c2 <memcpy+0xe>
 80033ce:	bd10      	pop	{r4, pc}

080033d0 <memset>:
 80033d0:	4402      	add	r2, r0
 80033d2:	4603      	mov	r3, r0
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d100      	bne.n	80033da <memset+0xa>
 80033d8:	4770      	bx	lr
 80033da:	f803 1b01 	strb.w	r1, [r3], #1
 80033de:	e7f9      	b.n	80033d4 <memset+0x4>

080033e0 <_init>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr

080033ec <_fini>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	bf00      	nop
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr
