
test_mcu_security.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002270  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800241c  0800241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002434  08002434  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800243c  0800243c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000030  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000003c  2000003c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000079d6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001996  00000000  00000000  00027a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  000293a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  00029b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b6ec  00000000  00000000  0002a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000884f  00000000  00000000  0005590c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff0cb  00000000  00000000  0005e15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015d226  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d5c  00000000  00000000  0015d278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002404 	.word	0x08002404

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002404 	.word	0x08002404

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	60da      	str	r2, [r3, #12]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	615a      	str	r2, [r3, #20]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000548:	4907      	ldr	r1, [pc, #28]	; (8000568 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4313      	orrs	r3, r2
 800054e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4013      	ands	r3, r2
 8000558:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40023800 	.word	0x40023800

0800056c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <LL_APB1_GRP1_EnableClock+0x2c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40023800 	.word	0x40023800

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 f9d4 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80c 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8d8 	bl	800075c <MX_GPIO_Init>
  MX_UART4_Init();
 80005ac:	f000 f886 	bl	80006bc <MX_UART4_Init>
  MX_RNG_Init();
 80005b0:	f000 f870 	bl	8000694 <MX_RNG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bootloader_jump_to_application(0x08060000);
 80005b4:	4801      	ldr	r0, [pc, #4]	; (80005bc <main+0x20>)
 80005b6:	f001 fedf 	bl	8002378 <bootloader_jump_to_application>
	while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0x1e>
 80005bc:	08060000 	.word	0x08060000

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 ff10 	bl	80023f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000638:	23c0      	movs	r3, #192	; 0xc0
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fc9d 	bl	8000f88 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000654:	f000 f8c4 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff00 	bl	8001478 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 f8af 	bl	80007e0 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_RNG_Init+0x20>)
 800069a:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <MX_RNG_Init+0x24>)
 800069c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_RNG_Init+0x20>)
 80006a0:	f001 f896 	bl	80017d0 <HAL_RNG_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80006aa:	f000 f899 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000028 	.word	0x20000028
 80006b8:	50060800 	.word	0x50060800

080006bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80006e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80006ea:	f7ff ff3f 	bl	800056c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff ff24 	bl	800053c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0/WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80006f4:	2303      	movs	r3, #3
 80006f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000708:	2308      	movs	r3, #8
 800070a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4810      	ldr	r0, [pc, #64]	; (8000754 <MX_UART4_Init+0x98>)
 8000712:	f001 f98c 	bl	8001a2e <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000716:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800071a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000728:	230c      	movs	r3, #12
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <MX_UART4_Init+0x9c>)
 800073c:	f001 fd8a 	bl	8002254 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_UART4_Init+0x9c>)
 8000742:	f7ff fee5 	bl	8000510 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_UART4_Init+0x9c>)
 8000748:	f7ff fed2 	bl	80004f0 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3738      	adds	r7, #56	; 0x38
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020000 	.word	0x40020000
 8000758:	40004c00 	.word	0x40004c00

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x7c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <MX_GPIO_Init+0x7c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0x7c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x7c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <MX_GPIO_Init+0x7c>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_GPIO_Init+0x7c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x80>)
 80007b0:	f000 fbd0 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_led_Pin */
  GPIO_InitStruct.Pin = blue_led_Pin;
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(blue_led_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x80>)
 80007cc:	f000 fa16 	bl	8000bfc <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020400 	.word	0x40020400

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_RNG_MspInit+0x3c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d10d      	bne.n	800086a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_RNG_MspInit+0x40>)
 8000854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <HAL_RNG_MspInit+0x40>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	6353      	str	r3, [r2, #52]	; 0x34
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_RNG_MspInit+0x40>)
 8000860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	50060800 	.word	0x50060800
 800087c:	40023800 	.word	0x40023800

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f890 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000922:	f7ff ffd7 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f001 fd41 	bl	80023ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092a:	f7ff fe37 	bl	800059c <main>
  bx  lr    
 800092e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000930:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08002444 	.word	0x08002444
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	2000003c 	.word	0x2000003c

08000948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_Init+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_Init+0x40>)
 8000956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_Init+0x40>)
 8000962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x40>)
 800096e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f90d 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	200f      	movs	r0, #15
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff ff34 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023c00 	.word	0x40023c00

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f917 	bl	8000be2 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f8ed 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000038 	.word	0x20000038

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000038 	.word	0x20000038

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff8e 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff47 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff5c 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff8e 	bl	8000ae8 <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffb0 	bl	8000b50 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e177      	b.n	8000f08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8166 	bne.w	8000f02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d005      	beq.n	8000c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d130      	bne.n	8000cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d017      	beq.n	8000cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d123      	bne.n	8000d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0203 	and.w	r2, r3, #3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80c0 	beq.w	8000f02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b66      	ldr	r3, [pc, #408]	; (8000f20 <HAL_GPIO_Init+0x324>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a65      	ldr	r2, [pc, #404]	; (8000f20 <HAL_GPIO_Init+0x324>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b63      	ldr	r3, [pc, #396]	; (8000f20 <HAL_GPIO_Init+0x324>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9e:	4a61      	ldr	r2, [pc, #388]	; (8000f24 <HAL_GPIO_Init+0x328>)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a58      	ldr	r2, [pc, #352]	; (8000f28 <HAL_GPIO_Init+0x32c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d037      	beq.n	8000e3a <HAL_GPIO_Init+0x23e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a57      	ldr	r2, [pc, #348]	; (8000f2c <HAL_GPIO_Init+0x330>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d031      	beq.n	8000e36 <HAL_GPIO_Init+0x23a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a56      	ldr	r2, [pc, #344]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d02b      	beq.n	8000e32 <HAL_GPIO_Init+0x236>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a55      	ldr	r2, [pc, #340]	; (8000f34 <HAL_GPIO_Init+0x338>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x232>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a54      	ldr	r2, [pc, #336]	; (8000f38 <HAL_GPIO_Init+0x33c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x22e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a53      	ldr	r2, [pc, #332]	; (8000f3c <HAL_GPIO_Init+0x340>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x22a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a52      	ldr	r2, [pc, #328]	; (8000f40 <HAL_GPIO_Init+0x344>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x226>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a51      	ldr	r2, [pc, #324]	; (8000f44 <HAL_GPIO_Init+0x348>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x222>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a50      	ldr	r2, [pc, #320]	; (8000f48 <HAL_GPIO_Init+0x34c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x21e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4f      	ldr	r2, [pc, #316]	; (8000f4c <HAL_GPIO_Init+0x350>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x21a>
 8000e12:	2309      	movs	r3, #9
 8000e14:	e012      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e16:	230a      	movs	r3, #10
 8000e18:	e010      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	e00e      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e1e:	2307      	movs	r3, #7
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x240>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x328>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7e:	4a34      	ldr	r2, [pc, #208]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea8:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <HAL_GPIO_Init+0x354>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f ae84 	bls.w	8000c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021c00 	.word	0x40021c00
 8000f48:	40022000 	.word	0x40022000
 8000f4c:	40022400 	.word	0x40022400
 8000f50:	40013c00 	.word	0x40013c00

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	041a      	lsls	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	619a      	str	r2, [r3, #24]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e267      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d075      	beq.n	8001092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa6:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d00c      	beq.n	8000fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb2:	4b85      	ldr	r3, [pc, #532]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d112      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fbe:	4b82      	ldr	r3, [pc, #520]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fca:	d10b      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	4b7e      	ldr	r3, [pc, #504]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d05b      	beq.n	8001090 <HAL_RCC_OscConfig+0x108>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d157      	bne.n	8001090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e242      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fec:	d106      	bne.n	8000ffc <HAL_RCC_OscConfig+0x74>
 8000fee:	4b76      	ldr	r3, [pc, #472]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a75      	ldr	r2, [pc, #468]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e01d      	b.n	8001038 <HAL_RCC_OscConfig+0xb0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0x98>
 8001006:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6f      	ldr	r2, [pc, #444]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6c      	ldr	r2, [pc, #432]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xb0>
 8001020:	4b69      	ldr	r3, [pc, #420]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a65      	ldr	r2, [pc, #404]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fcea 	bl	8000a18 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fce6 	bl	8000a18 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e207      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b5b      	ldr	r3, [pc, #364]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xc0>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fcd6 	bl	8000a18 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fcd2 	bl	8000a18 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1f3      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0xe8>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d063      	beq.n	8001166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109e:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d11c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b6:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d116      	bne.n	80010f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x152>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e1c7      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4937      	ldr	r1, [pc, #220]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	e03a      	b.n	8001166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HAL_RCC_OscConfig+0x244>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fe:	f7ff fc8b 	bl	8000a18 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fc87 	bl	8000a18 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1a8      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4925      	ldr	r1, [pc, #148]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x244>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fc6a 	bl	8000a18 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fc66 	bl	8000a18 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e187      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d036      	beq.n	80011e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d016      	beq.n	80011a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_RCC_OscConfig+0x248>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001180:	f7ff fc4a 	bl	8000a18 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc46 	bl	8000a18 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e167      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_OscConfig+0x240>)
 800119c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x200>
 80011a6:	e01b      	b.n	80011e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_RCC_OscConfig+0x248>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fc33 	bl	8000a18 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	e00e      	b.n	80011d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc2f 	bl	8000a18 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d907      	bls.n	80011d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e150      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
 80011c8:	40023800 	.word	0x40023800
 80011cc:	42470000 	.word	0x42470000
 80011d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d4:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 80011d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1ea      	bne.n	80011b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8097 	beq.w	800131c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f2:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10f      	bne.n	800121e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b7d      	ldr	r3, [pc, #500]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a7c      	ldr	r2, [pc, #496]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b7a      	ldr	r3, [pc, #488]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121a:	2301      	movs	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121e:	4b77      	ldr	r3, [pc, #476]	; (80013fc <HAL_RCC_OscConfig+0x474>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122a:	4b74      	ldr	r3, [pc, #464]	; (80013fc <HAL_RCC_OscConfig+0x474>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a73      	ldr	r2, [pc, #460]	; (80013fc <HAL_RCC_OscConfig+0x474>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001236:	f7ff fbef 	bl	8000a18 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123e:	f7ff fbeb 	bl	8000a18 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e10c      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <HAL_RCC_OscConfig+0x474>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x2ea>
 8001264:	4b64      	ldr	r3, [pc, #400]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001268:	4a63      	ldr	r2, [pc, #396]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6713      	str	r3, [r2, #112]	; 0x70
 8001270:	e01c      	b.n	80012ac <HAL_RCC_OscConfig+0x324>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x30c>
 800127a:	4b5f      	ldr	r3, [pc, #380]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127e:	4a5e      	ldr	r2, [pc, #376]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6713      	str	r3, [r2, #112]	; 0x70
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	4a5b      	ldr	r2, [pc, #364]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6713      	str	r3, [r2, #112]	; 0x70
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0x324>
 8001294:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	4a57      	ldr	r2, [pc, #348]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	6713      	str	r3, [r2, #112]	; 0x70
 80012a0:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a54      	ldr	r2, [pc, #336]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f023 0304 	bic.w	r3, r3, #4
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d015      	beq.n	80012e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fbb0 	bl	8000a18 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff fbac 	bl	8000a18 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e0cb      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0ee      	beq.n	80012bc <HAL_RCC_OscConfig+0x334>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fb9a 	bl	8000a18 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fb96 	bl	8000a18 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0b5      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ee      	bne.n	80012e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a38      	ldr	r2, [pc, #224]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80a1 	beq.w	8001468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	d05c      	beq.n	80013ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d141      	bne.n	80013be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_RCC_OscConfig+0x478>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fb6a 	bl	8000a18 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fb66 	bl	8000a18 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e087      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	3b01      	subs	r3, #1
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	491b      	ldr	r1, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x478>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fb3f 	bl	8000a18 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff fb3b 	bl	8000a18 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e05c      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x416>
 80013bc:	e054      	b.n	8001468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_RCC_OscConfig+0x478>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb28 	bl	8000a18 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fb24 	bl	8000a18 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e045      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x444>
 80013ea:	e03d      	b.n	8001468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d107      	bne.n	8001404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e038      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000
 8001400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x4ec>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d028      	beq.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d121      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d11a      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001434:	4013      	ands	r3, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800143a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800143c:	4293      	cmp	r3, r2
 800143e:	d111      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	3b01      	subs	r3, #1
 800144e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001450:	429a      	cmp	r2, r3
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cc      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d90c      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0b8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014cc:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	494d      	ldr	r1, [pc, #308]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d044      	beq.n	8001598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d119      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e07f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	2b03      	cmp	r3, #3
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e06f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e067      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 0203 	bic.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4934      	ldr	r1, [pc, #208]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff fa56 	bl	8000a18 <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fa52 	bl	8000a18 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e04f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 020c 	and.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d1eb      	bne.n	8001570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d20c      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e032      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fe:	f000 f821 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8001602:	4602      	mov	r2, r0
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	490a      	ldr	r1, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	5ccb      	ldrb	r3, [r1, r3]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f9b6 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023c00 	.word	0x40023c00
 8001634:	40023800 	.word	0x40023800
 8001638:	0800241c 	.word	0x0800241c
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001648:	b090      	sub	sp, #64	; 0x40
 800164a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
 8001650:	2300      	movs	r3, #0
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d00d      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x40>
 8001668:	2b08      	cmp	r3, #8
 800166a:	f200 80a1 	bhi.w	80017b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x34>
 8001672:	2b04      	cmp	r3, #4
 8001674:	d003      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x3a>
 8001676:	e09b      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800167a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800167c:	e09b      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800167e:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001682:	e098      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168e:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d028      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	2200      	movs	r2, #0
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	627a      	str	r2, [r7, #36]	; 0x24
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016ac:	2100      	movs	r1, #0
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_GetSysClockFreq+0x188>)
 80016b0:	fb03 f201 	mul.w	r2, r3, r1
 80016b4:	2300      	movs	r3, #0
 80016b6:	fb00 f303 	mul.w	r3, r0, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	4a43      	ldr	r2, [pc, #268]	; (80017cc <HAL_RCC_GetSysClockFreq+0x188>)
 80016be:	fba0 1202 	umull	r1, r2, r0, r2
 80016c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016c4:	460a      	mov	r2, r1
 80016c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80016c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ca:	4413      	add	r3, r2
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d0:	2200      	movs	r2, #0
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	61fa      	str	r2, [r7, #28]
 80016d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016de:	f7fe fd85 	bl	80001ec <__aeabi_uldivmod>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4613      	mov	r3, r2
 80016e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ea:	e053      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	2200      	movs	r2, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	617a      	str	r2, [r7, #20]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016fe:	f04f 0b00 	mov.w	fp, #0
 8001702:	4652      	mov	r2, sl
 8001704:	465b      	mov	r3, fp
 8001706:	f04f 0000 	mov.w	r0, #0
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	0159      	lsls	r1, r3, #5
 8001710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001714:	0150      	lsls	r0, r2, #5
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	ebb2 080a 	subs.w	r8, r2, sl
 800171e:	eb63 090b 	sbc.w	r9, r3, fp
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800172e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001732:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001736:	ebb2 0408 	subs.w	r4, r2, r8
 800173a:	eb63 0509 	sbc.w	r5, r3, r9
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	00eb      	lsls	r3, r5, #3
 8001748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800174c:	00e2      	lsls	r2, r4, #3
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	eb14 030a 	adds.w	r3, r4, sl
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	eb45 030b 	adc.w	r3, r5, fp
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176a:	4629      	mov	r1, r5
 800176c:	028b      	lsls	r3, r1, #10
 800176e:	4621      	mov	r1, r4
 8001770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001774:	4621      	mov	r1, r4
 8001776:	028a      	lsls	r2, r1, #10
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	2200      	movs	r2, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	60fa      	str	r2, [r7, #12]
 8001784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001788:	f7fe fd30 	bl	80001ec <__aeabi_uldivmod>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4613      	mov	r3, r2
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3740      	adds	r7, #64	; 0x40
 80017bc:	46bd      	mov	sp, r7
 80017be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	017d7840 	.word	0x017d7840

080017d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e01c      	b.n	800181c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	795b      	ldrb	r3, [r3, #5]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff f822 	bl	800083c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0204 	orr.w	r2, r2, #4
 800180c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2103      	movs	r1, #3
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	61bb      	str	r3, [r7, #24]
  return result;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	431a      	orrs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	605a      	str	r2, [r3, #4]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b089      	sub	sp, #36	; 0x24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	613b      	str	r3, [r7, #16]
  return result;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2103      	movs	r1, #3
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	61bb      	str	r3, [r7, #24]
  return result;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001904:	bf00      	nop
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	613b      	str	r3, [r7, #16]
  return result;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2103      	movs	r1, #3
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	61bb      	str	r3, [r7, #24]
  return result;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	60da      	str	r2, [r3, #12]
}
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800196e:	b480      	push	{r7}
 8001970:	b089      	sub	sp, #36	; 0x24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	613b      	str	r3, [r7, #16]
  return result;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	210f      	movs	r1, #15
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	401a      	ands	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	61bb      	str	r3, [r7, #24]
  return result;
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	431a      	orrs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80019c0:	bf00      	nop
 80019c2:	3724      	adds	r7, #36	; 0x24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	613b      	str	r3, [r7, #16]
  return result;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	210f      	movs	r1, #15
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	401a      	ands	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	61bb      	str	r3, [r7, #24]
  return result;
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b088      	sub	sp, #32
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	613b      	str	r3, [r7, #16]
  return result;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a58:	e050      	b.n	8001afc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d042      	beq.n	8001af6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d003      	beq.n	8001a80 <LL_GPIO_Init+0x52>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d10d      	bne.n	8001a9c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	461a      	mov	r2, r3
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff12 	bl	80018b2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	461a      	mov	r2, r3
 8001a94:	69b9      	ldr	r1, [r7, #24]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fef3 	bl	8001882 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff33 	bl	8001910 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d11a      	bne.n	8001ae8 <LL_GPIO_Init+0xba>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	60bb      	str	r3, [r7, #8]
  return result;
 8001abe:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d807      	bhi.n	8001ada <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	69b9      	ldr	r1, [r7, #24]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff4b 	bl	800196e <LL_GPIO_SetAFPin_0_7>
 8001ad8:	e006      	b.n	8001ae8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	69b9      	ldr	r1, [r7, #24]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff72 	bl	80019cc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	461a      	mov	r2, r3
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff fe97 	bl	8001824 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1a7      	bne.n	8001a5a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <LL_RCC_GetSysClkSource+0x18>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <LL_RCC_GetAHBPrescaler+0x18>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <LL_RCC_PLL_GetMainSource+0x18>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <LL_RCC_PLL_GetN+0x18>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40023800 	.word	0x40023800

08001bbc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <LL_RCC_PLL_GetP+0x18>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <LL_RCC_PLL_GetDivider+0x18>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001bfc:	f000 f820 	bl	8001c40 <RCC_GetSystemClockFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f840 	bl	8001c90 <RCC_GetHCLKClockFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f84e 	bl	8001cbc <RCC_GetPCLK1ClockFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f85a 	bl	8001ce4 <RCC_GetPCLK2ClockFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60da      	str	r2, [r3, #12]
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001c4a:	f7ff ff63 	bl	8001b14 <LL_RCC_GetSysClkSource>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d00c      	beq.n	8001c6e <RCC_GetSystemClockFreq+0x2e>
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d80f      	bhi.n	8001c78 <RCC_GetSystemClockFreq+0x38>
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <RCC_GetSystemClockFreq+0x22>
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d003      	beq.n	8001c68 <RCC_GetSystemClockFreq+0x28>
 8001c60:	e00a      	b.n	8001c78 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <RCC_GetSystemClockFreq+0x48>)
 8001c64:	607b      	str	r3, [r7, #4]
      break;
 8001c66:	e00a      	b.n	8001c7e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <RCC_GetSystemClockFreq+0x4c>)
 8001c6a:	607b      	str	r3, [r7, #4]
      break;
 8001c6c:	e007      	b.n	8001c7e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001c6e:	2008      	movs	r0, #8
 8001c70:	f000 f84c 	bl	8001d0c <RCC_PLL_GetFreqDomain_SYS>
 8001c74:	6078      	str	r0, [r7, #4]
      break;
 8001c76:	e002      	b.n	8001c7e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <RCC_GetSystemClockFreq+0x48>)
 8001c7a:	607b      	str	r3, [r7, #4]
      break;
 8001c7c:	bf00      	nop
  }

  return frequency;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	017d7840 	.word	0x017d7840

08001c90 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c98:	f7ff ff4a 	bl	8001b30 <LL_RCC_GetAHBPrescaler>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <RCC_GetHCLKClockFreq+0x28>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	40d3      	lsrs	r3, r2
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	0800241c 	.word	0x0800241c

08001cbc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001cc4:	f7ff ff42 	bl	8001b4c <LL_RCC_GetAPB1Prescaler>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	0a9b      	lsrs	r3, r3, #10
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	40d3      	lsrs	r3, r2
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	0800242c 	.word	0x0800242c

08001ce4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001cec:	f7ff ff3c 	bl	8001b68 <LL_RCC_GetAPB2Prescaler>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <RCC_GetPCLK2ClockFreq+0x24>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	40d3      	lsrs	r3, r2
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	0800242c 	.word	0x0800242c

08001d0c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001d20:	f7ff ff30 	bl	8001b84 <LL_RCC_PLL_GetMainSource>
 8001d24:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d32:	d003      	beq.n	8001d3c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001d34:	e005      	b.n	8001d42 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	e005      	b.n	8001d48 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001d3e:	617b      	str	r3, [r7, #20]
      break;
 8001d40:	e002      	b.n	8001d48 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d44:	617b      	str	r3, [r7, #20]
      break;
 8001d46:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d113      	bne.n	8001d76 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001d4e:	f7ff ff43 	bl	8001bd8 <LL_RCC_PLL_GetDivider>
 8001d52:	4602      	mov	r2, r0
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fbb3 f4f2 	udiv	r4, r3, r2
 8001d5a:	f7ff ff21 	bl	8001ba0 <LL_RCC_PLL_GetN>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	fb03 f404 	mul.w	r4, r3, r4
 8001d64:	f7ff ff2a 	bl	8001bbc <LL_RCC_PLL_GetP>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	0c1b      	lsrs	r3, r3, #16
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d74:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001d76:	693b      	ldr	r3, [r7, #16]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	017d7840 	.word	0x017d7840

08001d88 <LL_USART_IsEnabled>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_USART_SetStopBitsLength>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_USART_SetHWFlowCtrl>:
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	615a      	str	r2, [r3, #20]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_USART_SetBaudRate>:
{
 8001dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e00:	b0c0      	sub	sp, #256	; 0x100
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e08:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001e0c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001e10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e1c:	f040 810c 	bne.w	8002038 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	1891      	adds	r1, r2, r2
 8001e38:	6639      	str	r1, [r7, #96]	; 0x60
 8001e3a:	415b      	adcs	r3, r3
 8001e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8001e3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e42:	4621      	mov	r1, r4
 8001e44:	eb12 0801 	adds.w	r8, r2, r1
 8001e48:	4629      	mov	r1, r5
 8001e4a:	eb43 0901 	adc.w	r9, r3, r1
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	4623      	mov	r3, r4
 8001e68:	eb18 0303 	adds.w	r3, r8, r3
 8001e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e70:	462b      	mov	r3, r5
 8001e72:	eb49 0303 	adc.w	r3, r9, r3
 8001e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	469a      	mov	sl, r3
 8001e82:	4693      	mov	fp, r2
 8001e84:	eb1a 030a 	adds.w	r3, sl, sl
 8001e88:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e8a:	eb4b 030b 	adc.w	r3, fp, fp
 8001e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e98:	f7fe f9a8 	bl	80001ec <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <LL_USART_SetBaudRate+0x238>)
 8001ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	b29c      	uxth	r4, r3
 8001eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001eb8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ebc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001ec0:	4642      	mov	r2, r8
 8001ec2:	464b      	mov	r3, r9
 8001ec4:	1891      	adds	r1, r2, r2
 8001ec6:	6539      	str	r1, [r7, #80]	; 0x50
 8001ec8:	415b      	adcs	r3, r3
 8001eca:	657b      	str	r3, [r7, #84]	; 0x54
 8001ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	1851      	adds	r1, r2, r1
 8001ed4:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	414b      	adcs	r3, r1
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8001ee8:	4659      	mov	r1, fp
 8001eea:	00cb      	lsls	r3, r1, #3
 8001eec:	4651      	mov	r1, sl
 8001eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ef2:	4651      	mov	r1, sl
 8001ef4:	00ca      	lsls	r2, r1, #3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	4642      	mov	r2, r8
 8001efe:	189b      	adds	r3, r3, r2
 8001f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f04:	464b      	mov	r3, r9
 8001f06:	460a      	mov	r2, r1
 8001f08:	eb42 0303 	adc.w	r3, r2, r3
 8001f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f14:	2200      	movs	r2, #0
 8001f16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f1a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001f1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001f22:	460b      	mov	r3, r1
 8001f24:	18db      	adds	r3, r3, r3
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
 8001f28:	4613      	mov	r3, r2
 8001f2a:	eb42 0303 	adc.w	r3, r2, r3
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f34:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001f38:	f7fe f958 	bl	80001ec <__aeabi_uldivmod>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4611      	mov	r1, r2
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <LL_USART_SetBaudRate+0x238>)
 8001f44:	fba3 2301 	umull	r2, r3, r3, r1
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	2264      	movs	r2, #100	; 0x64
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	1acb      	subs	r3, r1, r3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <LL_USART_SetBaudRate+0x238>)
 8001f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4423      	add	r3, r4
 8001f6e:	b29c      	uxth	r4, r3
 8001f70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f74:	2200      	movs	r2, #0
 8001f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f7a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f7e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8001f82:	4642      	mov	r2, r8
 8001f84:	464b      	mov	r3, r9
 8001f86:	1891      	adds	r1, r2, r2
 8001f88:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f8a:	415b      	adcs	r3, r3
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f92:	4641      	mov	r1, r8
 8001f94:	1851      	adds	r1, r2, r1
 8001f96:	6339      	str	r1, [r7, #48]	; 0x30
 8001f98:	4649      	mov	r1, r9
 8001f9a:	414b      	adcs	r3, r1
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001faa:	4659      	mov	r1, fp
 8001fac:	00cb      	lsls	r3, r1, #3
 8001fae:	4651      	mov	r1, sl
 8001fb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fb4:	4651      	mov	r1, sl
 8001fb6:	00ca      	lsls	r2, r1, #3
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4642      	mov	r2, r8
 8001fc0:	189b      	adds	r3, r3, r2
 8001fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	460a      	mov	r2, r1
 8001fca:	eb42 0303 	adc.w	r3, r2, r3
 8001fce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001fd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fdc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001fe0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	18db      	adds	r3, r3, r3
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fea:	4613      	mov	r3, r2
 8001fec:	eb42 0303 	adc.w	r3, r2, r3
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ff6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ffa:	f7fe f8f7 	bl	80001ec <__aeabi_uldivmod>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <LL_USART_SetBaudRate+0x238>)
 8002004:	fba3 1302 	umull	r1, r3, r3, r2
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	2164      	movs	r1, #100	; 0x64
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	3332      	adds	r3, #50	; 0x32
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <LL_USART_SetBaudRate+0x238>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b29b      	uxth	r3, r3
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	b29b      	uxth	r3, r3
 8002026:	4423      	add	r3, r4
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002030:	609a      	str	r2, [r3, #8]
}
 8002032:	e107      	b.n	8002244 <LL_USART_SetBaudRate+0x448>
 8002034:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002038:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800203c:	2200      	movs	r2, #0
 800203e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002042:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002046:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800204a:	4642      	mov	r2, r8
 800204c:	464b      	mov	r3, r9
 800204e:	1891      	adds	r1, r2, r2
 8002050:	6239      	str	r1, [r7, #32]
 8002052:	415b      	adcs	r3, r3
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800205a:	4641      	mov	r1, r8
 800205c:	1854      	adds	r4, r2, r1
 800205e:	4649      	mov	r1, r9
 8002060:	eb43 0501 	adc.w	r5, r3, r1
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	00eb      	lsls	r3, r5, #3
 800206e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002072:	00e2      	lsls	r2, r4, #3
 8002074:	4614      	mov	r4, r2
 8002076:	461d      	mov	r5, r3
 8002078:	4643      	mov	r3, r8
 800207a:	18e3      	adds	r3, r4, r3
 800207c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002080:	464b      	mov	r3, r9
 8002082:	eb45 0303 	adc.w	r3, r5, r3
 8002086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800208a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800208e:	2200      	movs	r2, #0
 8002090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002094:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80020a4:	4629      	mov	r1, r5
 80020a6:	008b      	lsls	r3, r1, #2
 80020a8:	4621      	mov	r1, r4
 80020aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020ae:	4621      	mov	r1, r4
 80020b0:	008a      	lsls	r2, r1, #2
 80020b2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80020b6:	f7fe f899 	bl	80001ec <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4b64      	ldr	r3, [pc, #400]	; (8002250 <LL_USART_SetBaudRate+0x454>)
 80020c0:	fba3 2302 	umull	r2, r3, r3, r2
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	b29c      	uxth	r4, r3
 80020cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020d0:	2200      	movs	r2, #0
 80020d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020da:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80020de:	4642      	mov	r2, r8
 80020e0:	464b      	mov	r3, r9
 80020e2:	1891      	adds	r1, r2, r2
 80020e4:	61b9      	str	r1, [r7, #24]
 80020e6:	415b      	adcs	r3, r3
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ee:	4641      	mov	r1, r8
 80020f0:	1851      	adds	r1, r2, r1
 80020f2:	6139      	str	r1, [r7, #16]
 80020f4:	4649      	mov	r1, r9
 80020f6:	414b      	adcs	r3, r1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002106:	4659      	mov	r1, fp
 8002108:	00cb      	lsls	r3, r1, #3
 800210a:	4651      	mov	r1, sl
 800210c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002110:	4651      	mov	r1, sl
 8002112:	00ca      	lsls	r2, r1, #3
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	4603      	mov	r3, r0
 800211a:	4642      	mov	r2, r8
 800211c:	189b      	adds	r3, r3, r2
 800211e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002122:	464b      	mov	r3, r9
 8002124:	460a      	mov	r2, r1
 8002126:	eb42 0303 	adc.w	r3, r2, r3
 800212a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800212e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002132:	2200      	movs	r2, #0
 8002134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002138:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002148:	4649      	mov	r1, r9
 800214a:	008b      	lsls	r3, r1, #2
 800214c:	4641      	mov	r1, r8
 800214e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002152:	4641      	mov	r1, r8
 8002154:	008a      	lsls	r2, r1, #2
 8002156:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800215a:	f7fe f847 	bl	80001ec <__aeabi_uldivmod>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <LL_USART_SetBaudRate+0x454>)
 8002164:	fba3 1302 	umull	r1, r3, r3, r2
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	2164      	movs	r1, #100	; 0x64
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	3332      	adds	r3, #50	; 0x32
 8002176:	4a36      	ldr	r2, [pc, #216]	; (8002250 <LL_USART_SetBaudRate+0x454>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	b29b      	uxth	r3, r3
 8002180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002184:	b29b      	uxth	r3, r3
 8002186:	4423      	add	r3, r4
 8002188:	b29c      	uxth	r4, r3
 800218a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800218e:	2200      	movs	r2, #0
 8002190:	67bb      	str	r3, [r7, #120]	; 0x78
 8002192:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002198:	4642      	mov	r2, r8
 800219a:	464b      	mov	r3, r9
 800219c:	1891      	adds	r1, r2, r2
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	415b      	adcs	r3, r3
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021a8:	4641      	mov	r1, r8
 80021aa:	1851      	adds	r1, r2, r1
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	4649      	mov	r1, r9
 80021b0:	414b      	adcs	r3, r1
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021c0:	4659      	mov	r1, fp
 80021c2:	00cb      	lsls	r3, r1, #3
 80021c4:	4651      	mov	r1, sl
 80021c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ca:	4651      	mov	r1, sl
 80021cc:	00ca      	lsls	r2, r1, #3
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	4642      	mov	r2, r8
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	673b      	str	r3, [r7, #112]	; 0x70
 80021da:	464b      	mov	r3, r9
 80021dc:	460a      	mov	r2, r1
 80021de:	eb42 0303 	adc.w	r3, r2, r3
 80021e2:	677b      	str	r3, [r7, #116]	; 0x74
 80021e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80021e8:	2200      	movs	r2, #0
 80021ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80021fa:	4649      	mov	r1, r9
 80021fc:	008b      	lsls	r3, r1, #2
 80021fe:	4641      	mov	r1, r8
 8002200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002204:	4641      	mov	r1, r8
 8002206:	008a      	lsls	r2, r1, #2
 8002208:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800220c:	f7fd ffee 	bl	80001ec <__aeabi_uldivmod>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <LL_USART_SetBaudRate+0x454>)
 8002216:	fba3 1302 	umull	r1, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2164      	movs	r1, #100	; 0x64
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	3332      	adds	r3, #50	; 0x32
 8002228:	4a09      	ldr	r2, [pc, #36]	; (8002250 <LL_USART_SetBaudRate+0x454>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	b29b      	uxth	r3, r3
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	b29b      	uxth	r3, r3
 8002238:	4423      	add	r3, r4
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002242:	609a      	str	r2, [r3, #8]
}
 8002244:	bf00      	nop
 8002246:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800224a:	46bd      	mov	sp, r7
 800224c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002250:	51eb851f 	.word	0x51eb851f

08002254 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fd8e 	bl	8001d88 <LL_USART_IsEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d16c      	bne.n	800234c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800227a:	f023 030c 	bic.w	r3, r3, #12
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	6851      	ldr	r1, [r2, #4]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	68d2      	ldr	r2, [r2, #12]
 8002286:	4311      	orrs	r1, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	6912      	ldr	r2, [r2, #16]
 800228c:	4311      	orrs	r1, r2
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	6992      	ldr	r2, [r2, #24]
 8002292:	430a      	orrs	r2, r1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fd85 	bl	8001db0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fd92 	bl	8001dd6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fc9c 	bl	8001bf4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a26      	ldr	r2, [pc, #152]	; (8002358 <LL_USART_Init+0x104>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d102      	bne.n	80022ca <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	e02f      	b.n	800232a <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a23      	ldr	r2, [pc, #140]	; (800235c <LL_USART_Init+0x108>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d102      	bne.n	80022d8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	e028      	b.n	800232a <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <LL_USART_Init+0x10c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e021      	b.n	800232a <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <LL_USART_Init+0x110>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d102      	bne.n	80022f4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e01a      	b.n	800232a <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <LL_USART_Init+0x114>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d102      	bne.n	8002302 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	e013      	b.n	800232a <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <LL_USART_Init+0x118>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d102      	bne.n	8002310 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	e00c      	b.n	800232a <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <LL_USART_Init+0x11c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d102      	bne.n	800231e <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e005      	b.n	800232a <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <LL_USART_Init+0x120>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8002338:	2300      	movs	r3, #0
 800233a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69b9      	ldr	r1, [r7, #24]
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fd58 	bl	8001dfc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800234c:	7ffb      	ldrb	r3, [r7, #31]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40011000 	.word	0x40011000
 800235c:	40004400 	.word	0x40004400
 8002360:	40004800 	.word	0x40004800
 8002364:	40011400 	.word	0x40011400
 8002368:	40004c00 	.word	0x40004c00
 800236c:	40005000 	.word	0x40005000
 8002370:	40007800 	.word	0x40007800
 8002374:	40007c00 	.word	0x40007c00

08002378 <bootloader_jump_to_application>:
	NVIC_SystemReset();
}

#else

void bootloader_jump_to_application(uint32_t start_addr){
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    /* Get the main application start address */
    uint32_t jump_address = *(uint32_t *)(start_addr + 4);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]

    /* Set the main stack pointer to to the application start address */
    __set_MSP(*(uint32_t *)start_addr);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f383 8808 	msr	MSP, r3
}
 8002394:	bf00      	nop

    // Create function pointer for the main application
    void (*app_ptr)(void);
    app_ptr = (void *)(jump_address);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800239a:	b672      	cpsid	i
}
 800239c:	bf00      	nop

    /* disable all IRQs */
    __disable_irq(); // ensure to __enable_irq() in the application main function

    // Now jump to the main application
    app_ptr();
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4798      	blx	r3
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <__libc_init_array>:
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4d0d      	ldr	r5, [pc, #52]	; (80023e4 <__libc_init_array+0x38>)
 80023b0:	4c0d      	ldr	r4, [pc, #52]	; (80023e8 <__libc_init_array+0x3c>)
 80023b2:	1b64      	subs	r4, r4, r5
 80023b4:	10a4      	asrs	r4, r4, #2
 80023b6:	2600      	movs	r6, #0
 80023b8:	42a6      	cmp	r6, r4
 80023ba:	d109      	bne.n	80023d0 <__libc_init_array+0x24>
 80023bc:	4d0b      	ldr	r5, [pc, #44]	; (80023ec <__libc_init_array+0x40>)
 80023be:	4c0c      	ldr	r4, [pc, #48]	; (80023f0 <__libc_init_array+0x44>)
 80023c0:	f000 f820 	bl	8002404 <_init>
 80023c4:	1b64      	subs	r4, r4, r5
 80023c6:	10a4      	asrs	r4, r4, #2
 80023c8:	2600      	movs	r6, #0
 80023ca:	42a6      	cmp	r6, r4
 80023cc:	d105      	bne.n	80023da <__libc_init_array+0x2e>
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d4:	4798      	blx	r3
 80023d6:	3601      	adds	r6, #1
 80023d8:	e7ee      	b.n	80023b8 <__libc_init_array+0xc>
 80023da:	f855 3b04 	ldr.w	r3, [r5], #4
 80023de:	4798      	blx	r3
 80023e0:	3601      	adds	r6, #1
 80023e2:	e7f2      	b.n	80023ca <__libc_init_array+0x1e>
 80023e4:	0800243c 	.word	0x0800243c
 80023e8:	0800243c 	.word	0x0800243c
 80023ec:	0800243c 	.word	0x0800243c
 80023f0:	08002440 	.word	0x08002440

080023f4 <memset>:
 80023f4:	4402      	add	r2, r0
 80023f6:	4603      	mov	r3, r0
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d100      	bne.n	80023fe <memset+0xa>
 80023fc:	4770      	bx	lr
 80023fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002402:	e7f9      	b.n	80023f8 <memset+0x4>

08002404 <_init>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	bf00      	nop
 8002408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240a:	bc08      	pop	{r3}
 800240c:	469e      	mov	lr, r3
 800240e:	4770      	bx	lr

08002410 <_fini>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	bf00      	nop
 8002414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002416:	bc08      	pop	{r3}
 8002418:	469e      	mov	lr, r3
 800241a:	4770      	bx	lr
